Implementation smell,Namespace,Class,File,Method,Description
Long Method,MatterHackers.SerialPortCommunication.FrostedSerial,FrostedSerialPortStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Communication\FrostedSerial\FrostedSerialStream.cs,SetFrostedAttributes,The method has 108 lines of code.
Long Method,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The method has 2262 lines of code.
Long Method,MatterControl.Printing,GCodeMemoryFile,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\GCode\GCodeMemoryFile.cs,ParseFileContents,The method has 103 lines of code.
Long Method,MatterControl.Printing,GCodeMemoryFile,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\GCode\GCodeMemoryFile.cs,ParseGLine,The method has 118 lines of code.
Long Method,MatterControl.Printing,GCodeMemoryFile,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\GCode\GCodeMemoryFile.cs,ParseMLine,The method has 132 lines of code.
Long Method,MatterControl.Printing,PrinterConnection,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\PrinterConnection.cs,PrinterConnection,The method has 110 lines of code.
Long Method,MatterControl.Printing,PrinterConnection,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\PrinterConnection.cs,Connect,The method has 162 lines of code.
Long Method,MatterControl.Printing,PrinterConnection,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\PrinterConnection.cs,TryWriteNextLineFromGCodeFile,The method has 110 lines of code.
Long Method,MatterHackers.MatterControl.Plugins.X3GDriver,X3GPacketAnalyzer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GReader.cs,analyzePayload,The method has 111 lines of code.
Long Method,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The method has 649 lines of code.
Long Method,MatterControl.Printing.Pipelines,PrintRecoveryStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\PrintRecoveryStream.cs,ReadLine,The method has 180 lines of code.
Long Method,MatterControl.Printing.Pipelines,ToolChangeStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\ToolChangeStream.cs,ReadLine,The method has 155 lines of code.
Long Method,MatterControl.Printing.Pipelines,WaitForTempStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\WaitForTempStream.cs,ReadLine,The method has 138 lines of code.
Long Method,MatterControl.Printing.PrintLeveling,LevelingValidation,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Leveling\LevelingValidation.cs,NeedsToBeRun,The method has 102 lines of code.
Complex Method,MatterHackers.SerialPortCommunication.FrostedSerial,FrostedSerialPort,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Communication\FrostedSerial\FrostedSerialPort.cs,GetPortNames,Cyclomatic complexity of the method is 10
Complex Method,MatterHackers.SerialPortCommunication.FrostedSerial,FrostedSerialPortStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Communication\FrostedSerial\FrostedSerialStream.cs,SetFrostedAttributes,Cyclomatic complexity of the method is 15
Complex Method,MatterHackers.MatterControl.SlicerConfiguration,PrinterSettings,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\PrinterSettings.cs,ParseShowString,Cyclomatic complexity of the method is 12
Complex Method,MatterHackers.MatterControl.SlicerConfiguration,PrinterSettings,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\PrinterSettings.cs,GetLayerValues,Cyclomatic complexity of the method is 8
Complex Method,MatterHackers.MatterControl.SlicerConfiguration,PrinterSettings,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\PrinterSettings.cs,GetValueAndLayerName,Cyclomatic complexity of the method is 8
Complex Method,MatterHackers.MatterControl.SlicerConfiguration,PrinterSettings,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\PrinterSettings.cs,GetValue,Cyclomatic complexity of the method is 24
Complex Method,MatterHackers.MatterControl.SlicerConfiguration,PrinterSettings,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\PrinterSettings.cs,ClearValue,Cyclomatic complexity of the method is 8
Complex Method,MatterHackers.MatterControl.SlicerConfiguration,SettingsLayout,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SettingsLayout.cs,LoadAndParseLayoutFile,Cyclomatic complexity of the method is 9
Complex Method,MatterControl.Printing,GCodeFileStreamed,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\GCode\GCodeFileStreamed.cs,Instruction,Cyclomatic complexity of the method is 8
Complex Method,MatterControl.Printing,GCodeMemoryFile,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\GCode\GCodeMemoryFile.cs,GetFilamentDiameter,Cyclomatic complexity of the method is 8
Complex Method,MatterControl.Printing,GCodeMemoryFile,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\GCode\GCodeMemoryFile.cs,GetFilamentUsedMm,Cyclomatic complexity of the method is 8
Complex Method,MatterControl.Printing,GCodeMemoryFile,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\GCode\GCodeMemoryFile.cs,GetLayerHeight,Cyclomatic complexity of the method is 8
Complex Method,MatterControl.Printing,GCodeMemoryFile,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\GCode\GCodeMemoryFile.cs,ParseFileContents,Cyclomatic complexity of the method is 18
Complex Method,MatterControl.Printing,GCodeMemoryFile,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\GCode\GCodeMemoryFile.cs,AnalyzeGCodeLines,Cyclomatic complexity of the method is 11
Complex Method,MatterControl.Printing,GCodeMemoryFile,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\GCode\GCodeMemoryFile.cs,ParseGLine,Cyclomatic complexity of the method is 26
Complex Method,MatterControl.Printing,GCodeMemoryFile,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\GCode\GCodeMemoryFile.cs,ParseMLine,Cyclomatic complexity of the method is 46
Complex Method,MatterControl.Printing,PrinterConnection,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\PrinterConnection.cs,PrinterStatesFirmware,Cyclomatic complexity of the method is 9
Complex Method,MatterControl.Printing,PrinterConnection,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\PrinterConnection.cs,ParseTemperatureString,Cyclomatic complexity of the method is 8
Complex Method,MatterControl.Printing,PrinterConnection,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\PrinterConnection.cs,QueueLine,Cyclomatic complexity of the method is 8
Complex Method,MatterControl.Printing,PrinterConnection,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\PrinterConnection.cs,CreateStreamProcessors,Cyclomatic complexity of the method is 8
Complex Method,MatterControl.Printing,PrinterConnection,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\PrinterConnection.cs,TryWriteNextLineFromGCodeFile,Cyclomatic complexity of the method is 15
Complex Method,MatterControl.Printing,PrinterConnection,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\PrinterConnection.cs,WriteRaw,Cyclomatic complexity of the method is 13
Complex Method,MatterHackers.PrinterEmulator,Emulator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\Emulator\Emulator.cs,GetCorrectResponse,Cyclomatic complexity of the method is 8
Complex Method,MatterHackers.MatterControl.Plugins.X3GDriver,X3GPacketAnalyzer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GReader.cs,analyzePayload,Cyclomatic complexity of the method is 21
Complex Method,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,Cyclomatic complexity of the method is 83
Complex Method,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,updateTargetPostition,Cyclomatic complexity of the method is 13
Complex Method,MatterHackers.Plugins.X3GDriver,X3GSerialPortWrapper,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GSerialPortWrapper.cs,hasFullPacket,Cyclomatic complexity of the method is 8
Complex Method,MatterControl.Printing.Pipelines,GCodeSwitcher,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\GCodeSwitcher.cs,ReadLine,Cyclomatic complexity of the method is 10
Complex Method,MatterControl.Printing.Pipelines,MaxLengthStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\MaxLengthStream.cs,ReadLine,Cyclomatic complexity of the method is 10
Complex Method,MatterControl.Printing.Pipelines,PauseHandlingStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\PauseHandlingStream.cs,ReadLine,Cyclomatic complexity of the method is 16
Complex Method,MatterControl.Printing.Pipelines,PrintRecoveryStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\PrintRecoveryStream.cs,ReadLine,Cyclomatic complexity of the method is 22
Complex Method,MatterControl.Printing.Pipelines,RelativeToAbsoluteStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\RelativeToAbsoluteStream.cs,ProcessLine,Cyclomatic complexity of the method is 11
Complex Method,MatterControl.Printing.Pipelines,ToolChangeStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\ToolChangeStream.cs,ReadLine,Cyclomatic complexity of the method is 24
Complex Method,MatterControl.Printing.Pipelines,ToolChangeStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\ToolChangeStream.cs,QueueAfterGCode,Cyclomatic complexity of the method is 8
Complex Method,MatterControl.Printing.Pipelines,WaitForTempStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\WaitForTempStream.cs,ReadLine,Cyclomatic complexity of the method is 18
Complex Method,MatterControl.Printing.PrintLeveling,LevelingValidation,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Leveling\LevelingValidation.cs,NeedsToBeRun,Cyclomatic complexity of the method is 24
Long Parameter List,MatterHackers.SerialPortCommunication.FrostedSerial,FrostedSerialPort,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Communication\FrostedSerial\FrostedSerialPort.cs,FrostedSerialPort,The method has 5 parameters. Parameters: portName' baudRate' parity' dataBits' stopBits
Long Parameter List,MatterHackers.SerialPortCommunication.FrostedSerial,FrostedSerialPortFactory,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Communication\FrostedSerial\FrostedSerialPortFactory.cs,CreateFile,The method has 7 parameters. Parameters: lpFileName' dwDesiredAccess' dwShareMode' securityAttrs' dwCreationDisposition' dwFlagsAndAttributes' hTemplateFile
Long Parameter List,MatterHackers.SerialPortCommunication.FrostedSerial,FrostedSerialPortStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Communication\FrostedSerial\FrostedSerialStream.cs,set_attributes,The method has 6 parameters. Parameters: fd' baudRate' parity' dataBits' stopBits' handshake
Long Parameter List,MatterHackers.SerialPortCommunication.FrostedSerial,FrostedSerialPortStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Communication\FrostedSerial\FrostedSerialStream.cs,FrostedSerialPortStream,The method has 12 parameters. Parameters: portName' baudRate' dataBits' parity' stopBits' dtrEnable' rtsEnable' handshake' readTimeout' writeTimeout' readBufferSize' writeBufferSize
Long Parameter List,MatterHackers.SerialPortCommunication.FrostedSerial,FrostedSerialPortStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Communication\FrostedSerial\FrostedSerialStream.cs,SetFrostedAttributes,The method has 6 parameters. Parameters: fd' baudRate' parity' dataBits' stopBits' handshake
Long Parameter List,MatterHackers.SerialPortCommunication.FrostedSerial,FrostedSerialPortStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Communication\FrostedSerial\FrostedSerialStream.cs,write_serial,The method has 5 parameters. Parameters: fd' buffer' offset' count' timeout
Long Parameter List,MatterHackers.SerialPortCommunication.FrostedSerial,FrostedSerialPortStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Communication\FrostedSerial\FrostedSerialStream.cs,SetAttributes,The method has 5 parameters. Parameters: baud_rate' parity' data_bits' sb' hs
Long Parameter List,MatterHackers.SerialPortCommunication.FrostedSerial,IFrostedSerialStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Communication\FrostedSerial\IFrostedSerialStream.cs,SetAttributes,The method has 5 parameters. Parameters: baud_rate' parity' data_bits' sb' hs
Long Parameter List,MatterHackers.SerialPortCommunication.FrostedSerial,SerialPortFixer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Communication\SerialPortFixer.cs,FormatMessage,The method has 7 parameters. Parameters: dwFlags' lpSource' dwMessageId' dwLanguageId' lpBuffer' nSize' arguments
Long Parameter List,MatterHackers.SerialPortCommunication.FrostedSerial,SerialPortFixer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Communication\SerialPortFixer.cs,CreateFile,The method has 7 parameters. Parameters: lpFileName' dwDesiredAccess' dwShareMode' securityAttrs' dwCreationDisposition' dwFlagsAndAttributes' hTemplateFile
Long Parameter List,MatterHackers.MatterControl.SlicerConfiguration,IObjectSlicer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\IObjectSlicer.cs,Slice,The method has 5 parameters. Parameters: itemsOnBed' printerSettings' filePath' progressReporter' cancellationToken
Long Parameter List,MatterControl.Printing,GCodeFile,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\GCode\GCodeFile.cs,GetFirstNumberAfter,The method has 5 parameters. Parameters: stringToCheckAfter' stringWithNumber' readValue' startIndex' stopCheckingString
Long Parameter List,MatterControl.Printing,GCodeFile,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\GCode\GCodeFile.cs,GetFirstNumberAfter,The method has 6 parameters. Parameters: stringToCheckAfter' stringWithNumber' readValue' numberEnd' startIndex' stopCheckingString
Long Parameter List,MatterControl.Printing,GCodeFile,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\GCode\GCodeFile.cs,GetFirstNumberAfter,The method has 5 parameters. Parameters: stringToCheckAfter' stringWithNumber' readValue' startIndex' stopCheckingString
Long Parameter List,MatterControl.Printing,GCodeFile,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\GCode\GCodeFile.cs,GetFirstNumberAfter,The method has 6 parameters. Parameters: stringToCheckAfter' stringWithNumber' readValue' numberEnd' startIndex' stopCheckingString
Long Parameter List,MatterControl.Printing,GCodeFile,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\GCode\GCodeFile.cs,GetFirstStringAfter,The method has 5 parameters. Parameters: stringToCheckAfter' fullStringToLookIn' separatorString' nextString' startIndex
Long Parameter List,MatterControl.Printing,GCodeFile,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\GCode\GCodeFile.cs,Load,The method has 6 parameters. Parameters: fileStream' maxAccelerationMmPerS2' maxVelocityMmPerS' velocitySameAsStopMmPerS' speedMultiplier' cancellationToken
Long Parameter List,MatterControl.Printing,GCodeMemoryFile,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\GCode\GCodeMemoryFile.cs,Load,The method has 7 parameters. Parameters: fileStream' maxAccelerationMmPerS2' maxVelocityMmPerS' velocitySameAsStopMmPerS' speedMultiplier' cancellationToken' progressReporter
Long Parameter List,MatterControl.Printing,GCodeMemoryFile,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\GCode\GCodeMemoryFile.cs,Load,The method has 7 parameters. Parameters: filePath' maxAccelerationMmPerS2' maxVelocityMmPerS' velocitySameAsStopMmPerS' speedMultiplier' cancellationToken' progressReporter
Long Parameter List,MatterControl.Printing,GCodeMemoryFile,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\GCode\GCodeMemoryFile.cs,ParseFileContents,The method has 7 parameters. Parameters: gCodeString' maxAccelerationMmPerS2' maxVelocityMmPerS' velocitySameAsStopMmPerS' speedMultiplier' cancellationToken' progressReporter
Long Parameter List,MatterControl.Printing,GCodeMemoryFile,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\GCode\GCodeMemoryFile.cs,AnalyzeGCodeLines,The method has 6 parameters. Parameters: cancellationToken' progressReporter' maxAccelerationMmPerS2' maxVelocityMmPerS' velocitySameAsStopMmPerS' speedMultiplier
Long Parameter List,MatterControl.Printing,PrinterConnection,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\PrinterConnection.cs,ParseTemperatureString,The method has 5 parameters. Parameters: temperatureString' actualHotendTemperature' hotendTemperatureChange' actualBedTemperature' bedTemperatureChanged
Long Identifier,MatterHackers.MatterControl.SlicerConfiguration,SettingsKey,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SettingsKey.cs,,The length of the parameter external_perimeter_extrusion_width is 34.
Long Identifier,MatterHackers.MatterControl.SlicerConfiguration,SettingsKey,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SettingsKey.cs,,The length of the parameter print_leveling_required_to_print is 32.
Long Identifier,MatterHackers.MatterControl.SlicerConfiguration,SettingsKey,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SettingsKey.cs,,The length of the parameter print_time_estimate_multiplier is 30.
Long Identifier,MatterHackers.MatterControl.SlicerConfiguration,SettingsKey,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SettingsKey.cs,,The length of the parameter raft_extra_distance_around_part is 31.
Long Identifier,MatterHackers.MatterControl.SlicerConfiguration,SettingsKey,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SettingsKey.cs,,The length of the parameter recover_position_before_z_home is 30.
Long Identifier,MatterHackers.MatterControl.SlicerConfiguration,SettingsKey,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SettingsKey.cs,,The length of the parameter repair_outlines_extensive_stitching is 35.
Long Identifier,MatterHackers.MatterControl.SlicerConfiguration,SettingsKey,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SettingsKey.cs,,The length of the parameter retract_restart_extra_time_to_apply is 35.
Long Identifier,MatterHackers.MatterControl.SlicerConfiguration,SettingsKey,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SettingsKey.cs,,The length of the parameter retract_restart_extra_toolchange is 32.
Long Identifier,MatterHackers.MatterControl.SlicerConfiguration,SettingsKey,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SettingsKey.cs,,The length of the parameter start_perimeters_at_concave_points is 34.
Long Identifier,MatterHackers.MatterControl.SlicerConfiguration,SettingsKey,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SettingsKey.cs,,The length of the parameter start_perimeters_at_non_overhang is 32.
Long Identifier,MatterHackers.MatterControl.SlicerConfiguration,SettingsKey,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SettingsKey.cs,,The length of the parameter support_material_create_perimeter is 33.
Long Identifier,MatterHackers.MatterControl.SlicerConfiguration,SettingsKey,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SettingsKey.cs,,The length of the parameter support_material_interface_extruder is 35.
Long Identifier,MatterHackers.MatterControl.SlicerConfiguration,SettingsKey,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SettingsKey.cs,,The length of the parameter support_material_interface_layers is 33.
Long Identifier,MatterHackers.MatterControl.SlicerConfiguration,SettingsKey,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SettingsKey.cs,,The length of the parameter t1_extrusion_move_speed_multiplier is 34.
Long Identifier,MatterHackers.MatterControl.SlicerConfiguration,SettingsKey,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SettingsKey.cs,,The length of the parameter xy_offsets_have_been_calibrated is 31.
Long Identifier,MatterControl.Printing,GCodeMemoryFile,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\GCode\GCodeMemoryFile.cs,GCodeMemoryFile,The length of the parameter gcodeHasExplicitLayerChangeInfo is 31.
Long Identifier,MatterControl.Printing,GCodeMemoryFile,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\GCode\GCodeMemoryFile.cs,ParseFileContents,The length of the parameter gcodeHasExplicitLayerChangeInfo is 31.
Long Identifier,MatterControl.Printing,GCodeMemoryFile,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\GCode\GCodeMemoryFile.cs,,The length of the parameter gcodeHasExplicitLayerChangeInfo is 31.
Long Identifier,MatterHackers.MatterControl.Plugins.X3GDriver,X3GPrinterDetails,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GPrinterDetails.cs,,The length of the parameter targetTempForMakerbotStyleCommands is 34.
Long Identifier,MatterHackers.MatterControl.Plugins.X3GDriver,X3GPrinterDetails,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GPrinterDetails.cs,,The length of the parameter requiredTemperatureResponseCount is 32.
Long Identifier,MatterControl.Printing.Pipelines,ExtrusionMultiplierStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\ExtrusionMultiplierStream.cs,ApplyExtrusionMultiplier,The length of the parameter gcodeRequestedExtrusionPosition is 31.
Long Identifier,MatterControl.Printing.Pipelines,ExtrusionMultiplierStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\ExtrusionMultiplierStream.cs,ApplyExtrusionMultiplier,The length of the parameter gcodeRequestedExtrusionPosition is 31.
Long Identifier,MatterControl.Printing.Pipelines,ExtrusionMultiplierStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\ExtrusionMultiplierStream.cs,,The length of the parameter currentActualExtrusionPosition is 30.
Long Identifier,MatterControl.Printing.Pipelines,ExtrusionMultiplierStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\ExtrusionMultiplierStream.cs,,The length of the parameter previousGcodeRequestedExtrusionPosition is 39.
Long Statement,MatterHackers.SerialPortCommunication.FrostedSerial,FrostedSerialPortFactory,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Communication\FrostedSerial\FrostedSerialPortFactory.cs,SerialPortAlreadyOpen,The length of the statement  "				using (SafeFileHandle hFile = CreateFile(@"\\.\" + portName' GENERIC_READ | GENERIC_WRITE' 0' IntPtr.Zero' 3' dwFlagsAndAttributes' IntPtr.Zero)) " is 145.
Long Statement,MatterHackers.SerialPortCommunication.FrostedSerial,FrostedSerialPortStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Communication\FrostedSerial\FrostedSerialStream.cs,SetFrostedAttributes,The length of the statement  "				newtio.c_lflag &= (uint)-(int)(e_c_lflag.ICANON | e_c_lflag.ECHO | e_c_lflag.ECHOE | e_c_lflag.ECHOK | e_c_lflag.ECHONL | e_c_lflag.ISIG | e_c_lflag.IEXTEN); " is 157.
Long Statement,MatterHackers.SerialPortCommunication.FrostedSerial,testCLass,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Communication\TermiosH.cs,TestFunc,The length of the statement  "			//c_lflag &= (uint)-(e_c_lflag.ICANON | e_c_lflag.ECHO | e_c_lflag.ECHOE | e_c_lflag.ECHOK | e_c_lflag.ECHOL | e_c_lflag.ECHONL | e_c_lflag.ISIG | e_c_lflag.IEXTEN); " is 165.
Long Statement,MatterHackers.SerialPortCommunication.FrostedSerial,testCLass,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Communication\TermiosH.cs,TestFunc,The length of the statement  "				c_lflag &= (uint)-(uint)(e_c_lflag.ICANON | e_c_lflag.ECHO | e_c_lflag.ECHOE | e_c_lflag.ECHOK | e_c_lflag.ECHONL | e_c_lflag.ISIG | e_c_lflag.IEXTEN); " is 151.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,PrinterSettings,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\PrinterSettings.cs,LoadFile,The length of the statement  "				var settings = JsonConvert.DeserializeObject<PrinterSettings>(File.ReadAllText(printerProfilePath)' new PrinterSettingsConverter()); " is 132.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SettingsHelpers,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SettingsHelpers.cs,UseZProbe,The length of the statement  "			return printerSettings.GetValue<bool>(SettingsKey.has_z_probe) && printerSettings.GetValue<bool>(SettingsKey.use_z_probe); " is 122.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "Forces the slicer to attempt to avoid having the perimeter line cross over existing perimeter lines. This can help with oozing or strings.".Localize()' " is 163.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "The X and Y values of the size of the print bed' in millimeters. For printers with a circular bed' these values are the diameters on the X and Y axes.".Localize()' " is 175.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "The temperature to which the bed will be set for the duration of the print. Set to 0 to disable.".Localize()' " is 121.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					DefaultValue = "Trim the end of the filament to ensure a good load.  \n![](https://www.matterhackers.com/r/c3zLyf)  \nMake sure you trim it at a slight angle" " is 158.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					DefaultValue = "* Insert filament into the extruder until you feel it start to feed\\n  * Make sure the filament is all the way into the extruder\\n  * Hold the filament for several seconds until it catches\\n  * Test that it is inserted by gently pulling down' there should be some resistance  \\n* Click 'Next'  \\n![Load Filament](https://www.matterhackers.com/r/Ipj4Bb)" " is 374.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					DefaultValue = "* Insert filament into extruder 2 until you feel it start to feed\\n  * Make sure the filament is all the way into the extruder\\n  * Hold the filament for several seconds until it catches\\n  * Test that it is inserted by gently pulling down' there should be some resistance  \\n* Click 'Next'  \\n![Load Filament](https://www.matterhackers.com/r/Ipj4Bb)" " is 372.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					DefaultValue = "In a few seconds filament should be coming out of the extruder\\n* Wait for the new filament to be coming out with no trace of the previous filament\\n* Click 'Next' when the new filament is running cleanly" " is 223.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					DefaultValue = "In a few seconds filament should be coming out of the second extruder\\n* Wait for the new filament to be coming out with no trace of the previous filament\\n* Click 'Next' when the new filament is running cleanly" " is 230.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "The number of layers or the distance in millimeters to solid fill on the bottom surface(s) of the object. Add mm to the end of the number to specify distance in millimeters.".Localize()' " is 198.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "The layer(s) at which the print will pause' allowing for a change in filament. Printer is paused before starting the given layer. Leave blank to disable. To pause on multiple layers' separate the layer numbers with semicolons. For example: \"16; 37\".".Localize()' " is 276.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "The speed at which the bottom solid layers will print. Can be set explicitly or as a percentage of the Infill speed. Use 0 to match infill speed.".Localize()' " is 170.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "The height of the printer's printable volume' in millimeters. Controls the height of the visual print area displayed in 3D View.".Localize()' " is 153.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "Each individual part is printed to completion then the nozzle is lowered back to the bed and the next part is printed.".Localize()' " is 143.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "G-Code to run upon successful connection to a printer. This can be useful to set settings specific to a given printer.".Localize()' " is 143.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "Creates a raft under the printed part. Useful to prevent warping when printing ABS (and other warping-prone plastics) as it helps parts adhere to the bed.".Localize()' " is 179.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "The distance between the top of the raft and the bottom of the model. 0.6 mm is a good starting point for PLA and 0.4 mm is a good starting point for ABS. Lower values give a smoother surface' higher values make the print easier to remove.".Localize()' " is 264.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "The speed at which the layers of the raft (other than the first layer) will print. This can be set explicitly or as a percentage of the Infill speed.".Localize()' " is 174.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "The offset of each nozzle relative to the first nozzle. Only useful for multiple extruder machines.".Localize()' " is 124.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "Detects sections of the model that would be too thin to print and expands them to make them printable.".Localize()' " is 127.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "All extrusions are multiplied by this value. Increasing it above 1 will increase the amount of filament being extruded (1.1 is a good max value); decreasing it will decrease the amount being extruded (.9 is a good minimum value).".Localize()' " is 254.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "The price of one kilogram of filament. Used for estimating the cost of a print in the Layer View.".Localize()' " is 122.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "Detect gaps between perimeters that are too thin to fill with normal infill and attempt to fill them.".Localize()' " is 126.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "A modifier of the width of the extrusion for the first layer of the print. A value greater than 100% can help with adhesion to the print bed.".Localize()' " is 166.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "The thickness of the first layer. A first layer taller than the default layer thickness can ensure good adhesion to the build plate.".Localize()' " is 157.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "The speed at which the nozzle will move when printing the initial layers. If expressed as a percentage the Infill speed is modified.".Localize()' " is 157.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "The number of layers to consider as the beginning of the print. These will print at initial layer speed.".Localize()' " is 129.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "When this is checked MatterControl will attempt to recover a print in the event of a failure' such as lost connection or lost power.".Localize()' " is 157.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "Checks before each print that the layer height is less than the nozzle diameter (important for filament adhesion)".Localize()' " is 138.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "The X and Y position of the hot end that minimizes the chance of colliding with the parts on the bed.".Localize()' " is 126.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "The temperature to which the nozzle will be heated before printing the first layer of a part. The printer will wait until this temperature has been reached before printing.".Localize()' " is 197.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "The version of G-Code the printer's firmware communicates with. Some firmware use different G and M codes. Setting this ensures that the output G-Code will use the correct commands.".Localize()' " is 206.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "The version of G-Code the printer's firmware communicates with. Some firmware use different G and M codes. Setting this ensures that the output G-Code will use the correct commands.".Localize()' " is 206.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "The printer has its own auto bed leveling probe and procedure which can be called using a G29 command during Start G-Code.".Localize()' " is 147.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "This will only work on specific hardware. Do not use unless you are sure your printer controller supports this feature".Localize()' " is 143.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "The printer has the ability to control the power supply. Enable this function to show the ATX Power Control section on the Controls pane.".Localize()' " is 162.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "Shows a button at the right side of the Printer Connection Bar used to reset the USB connection to the printer. This can be used on printers that support it as an emergency stop.".Localize()' " is 203.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "The amount the infill edge will push into the perimeter. Helps ensure the infill is connected to the edge. This can be expressed as a percentage of the Nozzle Diameter.".Localize()' " is 193.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "The speed to move the laser when the layer height is 0.025mm. Speed will be adjusted linearly at other heights.".Localize()' " is 136.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "The speed to move the laser when the layer height is 0.1mm. Speed will be adjusted linearly at other heights.".Localize()' " is 134.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "A comma separated list of sample points to probe the bed at. You must specify an x and y position for each point. For example: '20'20'100'180'180'20' will sample the bad at 3 points.".Localize()' " is 207.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "Specifies that the firmware has support for ros_0 endstop reporting on M119. TRIGGERED state defines filament has runout. If runout is detected the printers pause G-Code is run.".Localize()' " is 202.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "Enable this if your printer has hardware support for G30 (automatic bed probing) and you want to use it rather than manually measuring the probe positions.".Localize()' " is 180.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "The thickness of each layer of the print' except the first layer. A smaller number will create more layers and more vertical accuracy but also a slower print.".Localize()' " is 183.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "If the time to print a layer is less than this' the fan will turn on at its minimum speed. It will then ramp up to its maximum speed as the layer time decreases.".Localize()' " is 186.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "As the time to print a layer decreases to this' the fan speed will be increased up to its maximum speed.".Localize()' " is 129.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "The minimum speed at which the layer cooling fan will run' expressed as a percentage of full power.".Localize()' " is 124.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "The maximum speed at which the layer cooling fan will run' expressed as a percentage of full power.".Localize()' " is 124.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "The speed at which the layer cooling fan will run when bridging' expressed as a percentage of full power.".Localize()' " is 130.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "The number of layers for which the layer cooling fan will be forced off at the start of the print.".Localize()' " is 123.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "The minimum speed to which the printer will reduce to in order to attempt to make the layer print time long enough to satisfy the minimum layer time.".Localize()' " is 174.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "The minimum length of filament to use printing the skirt loops. Enough skirt loops will be drawn to use this amount of filament' overriding the value set in Loops if the value in Loops will produce a skirt shorter than this value.".Localize()' " is 255.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "Output only the first layer of the print. Especially useful for outputting gcode data for applications like engraving or cutting.".Localize()' " is 154.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "A modifier of the width of the extrusion when printing outside perimeters. Can be useful to fine-adjust actual print size when objects print larger or smaller than specified in the digital model.".Localize()' " is 220.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "The distance that a perimeter will overlap itself when it completes its loop' expressed as a percentage of the Nozzle Diameter.".Localize()' " is 152.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "The number' or total width' of external shells to create. Add mm to the end of the number to specify width in millimeters.".Localize()' " is 147.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "The position (X and Y coordinates) of the center of the print bed' in millimeters. Normally this is 1/2 the bed size for Cartesian printers and 0' 0 for Delta printers.".Localize()' " is 193.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "When using multiple extruders' the distance filament will reverse before changing to a different extruder.".Localize()' " is 131.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "Length of extra filament to extrude after a complete tool change (in addition to the re-extrusion of the tool change retraction distance).".Localize()' " is 163.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "If the extruder has been running for a long time' it may be reporting values that are too large' this will periodically reset it.".Localize()' " is 154.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "Length of filament to extrude after a complete retraction (in addition to the re-extrusion of the Length on Move distance).".Localize()' " is 148.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "The time over which to increase the Extra Length On Restart to its maximum value. Below this time only a portion of the extra length will be applied. Leave 0 to apply the entire amount all the time.".Localize()' " is 223.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "Sometime a mesh will not have closed a perimeter. When this is checked these non-closed perimeters while be closed.".Localize()' " is 140.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "The number of loops to draw around all the parts on the bed before starting on the parts. Used mostly to prime the nozzle so the flow is even when the actual print begins.".Localize()' " is 196.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "The minimum amount of time a layer must take to print. If a layer will take less than this amount of time' the movement speed is reduced so the layer print time will match this value' down to the minimum print speed at the slowest.".Localize()' " is 256.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "Used for small perimeters (usually holes). This can be set explicitly or as a percentage of the Perimeters' speed.".Localize()' " is 139.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "The speed to print infill when completely solid. This can be set explicitly or as a percentage of the Infill speed.".Localize()' " is 140.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "Forces the print to have only one extrusion and gradually increase the Z height during the print. Only one part will print at a time with this feature.".Localize()' " is 176.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "G-Code to be run immediately following the temperature setting commands. Including commands to set temperature in this section will cause them not be generated outside of this section. Will accept Custom G-Code variables.".Localize()' " is 246.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "This is a set of regular expressions to apply to lines prior to sending to a printer. They will be applied in the order listed before sending. To return more than one instruction separate them with comma.".Localize()' " is 229.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "This is a set of regular expressions to apply to lines after they are received from the printer. They will be applied in order to each line received.".Localize()' " is 174.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "The distance between the top of the support and the bottom of the model. A good value depends on the type of material. For ABS and PLA a value between 0.4 and 0.6 works well' respectively.".Localize()' " is 213.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "Generates an outline around the support material to improve strength and hold up interface layers.".Localize()' " is 123.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "The index of the extruder to use for printing support material. Applicable only when Extruder Count is set to a value more than 1.".Localize()' " is 155.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "The index of the extruder to use to print the raft. Set to 0 to use the support extruder index.".Localize()' " is 120.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "The number of layers or the distance to print solid material between the supports and the part. Add mm to the end of the number to specify distance.".Localize()' " is 173.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "The temperature to which the bed will heat (or cool) in order to remove the part' as specified in Custom G-Code.".Localize()' " is 137.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "The number of CPU cores to use while doing slicing. Increasing this can slow down your machine.".Localize()' " is 120.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "G-Code to be run before every tool change. You can use '; WRITE_RAW' to skip checksums or '; NO_PROCESSING' to skip position offsetting.".Localize()' " is 161.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "G-Code to be run after every tool change. You can use '; WRITE_RAW' to skip checksums or '; NO_PROCESSING' to skip position offsetting.".Localize()' " is 160.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "G-Code to be run before switching to extruder 2. Will use standard before G-Code if not set. You can use [wipe_tower_x] [wipe_tower_y] & [wipe_tower_z]  to set the extruder position if needed. You can also use '; WRITE_RAW' to skip checksums or '; NO_PROCESSING' to skip position offsetting.".Localize()' " is 316.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "G-Code to be run after switching to extruder 2. Will use standard after G-Code if not set. You can use '; WRITE_RAW' to skip checksums or '; NO_PROCESSING' to skip position offsetting.".Localize()' " is 209.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "The speed at which the top solid layers will print. Can be set explicitly or as a percentage of the Infill speed.".Localize()' " is 138.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "The number of layers' or the distance in millimeters' to solid fill on the top surface(s) of the object. Add mm to the end of the number to specify distance in millimeters.".Localize()' " is 197.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "Normally you will want to use absolute e distances. Only check this if you know your printer needs relative e distances.".Localize()' " is 145.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "This is to help reduce vibrations during printing. If your printer has a resonance frequency that is causing trouble you can set this to try and reduce printing at that frequency.".Localize()' " is 204.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "Creates a perimeter around the part on which to wipe the other nozzle when printing using dual extrusion. Set to 0 to disable.".Localize()' " is 151.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "The length and width of a tower created at the back left of the print used for wiping the next nozzle when changing between multiple extruders. Set to 0 to disable.".Localize()' " is 189.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "Sets MatterControl to attempt to connect to a printer over the network. (You must disconnect and reconnect for this to take effect)".Localize()' " is 156.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "Allow MatterControl to split long lines to improve leveling and print canceling. Critical for printers that are significantly out of level.".Localize()' " is 164.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "Make MatterControl emulate bed limits and endstops in software and prevent the printer from moving to invalid locations.".Localize()' " is 145.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "Sets MatterControl to use s3g communication method. (You must disconnect and reconnect for this to take effect)".Localize()' " is 136.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "Adjust this to correct differences between expected printing speeds and actual printing speeds.".Localize()' " is 120.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "Creates a brim attached to the base of the print. Useful to prevent warping when printing ABS (and other warping-prone plastics) as it helps parts adhere to the bed.".Localize()' " is 190.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsFields,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SliceSettingsFields.cs,AllSettings,The length of the statement  "					HelpText = "Creates an outline around the print' but not attached to it. This is useful for priming the nozzle to ensure the plastic is flowing when the print starts.".Localize()' " is 179.
Long Statement,MatterControl.Printing,GCodeFile,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\GCode\GCodeFile.cs,GetFirstNumberAfter,The length of the statement  "			if (GetFirstNumberAfter(stringToCheckAfter' stringWithNumber' ref doubleValue' out numberEnd' startIndex' stopCheckingString)) " is 126.
Long Statement,MatterControl.Printing,GCodeFile,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\GCode\GCodeFile.cs,GetFirstStringAfter,The length of the statement  "					nextString = fullStringToLookIn.Substring(stringPos + stringToCheckAfter.Length' separatorPos - (stringPos + stringToCheckAfter.Length)); " is 137.
Long Statement,MatterControl.Printing,GCodeFile,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\GCode\GCodeFile.cs,ReplaceNumberAfter,The length of the statement  "					string newString = string.Format("{0}{1:0.#####}{2}"' stringWithNumber.Substring(0' charPos + 1)' numberToPutIn' stringWithNumber.Substring(spacePos)); " is 151.
Long Statement,MatterControl.Printing,GCodeFileStreamed,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\GCode\GCodeFileStreamed.cs,GetWeightedCenter,The length of the statement  "			throw new NotImplementedException("A streamed GCode file should not need to do this. Please validate the code that is calling this."); " is 134.
Long Statement,MatterControl.Printing,GCodeFileStreamed,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\GCode\GCodeFileStreamed.cs,GetBounds,The length of the statement  "			throw new NotImplementedException("A streamed GCode file should not need to do this. Please validate the code that is calling this."); " is 134.
Long Statement,MatterControl.Printing,GCodeFileStreamed,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\GCode\GCodeFileStreamed.cs,GetFilamentCubicMm,The length of the statement  "			throw new NotImplementedException("A streamed GCode file should not need to do this. Please validate the code that is calling this."); " is 134.
Long Statement,MatterControl.Printing,GCodeMemoryFile,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\GCode\GCodeMemoryFile.cs,GetLayerHeight,The length of the statement  "				layerHeight = gCodeCommandQueue[IndexOfLayerStart[layerIndex + 1]].Z - gCodeCommandQueue[IndexOfLayerStart[layerIndex]].Z; " is 122.
Long Statement,MatterControl.Printing,GCodeMemoryFile,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\GCode\GCodeMemoryFile.cs,GetLayerHeight,The length of the statement  "						layerHeight = gCodeCommandQueue[IndexOfLayerStart[layerIndex + 1]].Z - gCodeCommandQueue[IndexOfLayerStart[layerIndex]].Z; " is 122.
Long Statement,MatterControl.Printing,GCodeMemoryFile,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\GCode\GCodeMemoryFile.cs,IsExtruding,The length of the statement  "				double extrusionLength = gCodeCommandQueue[instructionIndexToCheck].EPosition - gCodeCommandQueue[instructionIndexToCheck - 1].EPosition; " is 137.
Long Statement,MatterControl.Printing,GCodeMemoryFile,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\GCode\GCodeMemoryFile.cs,NextToolChange,The length of the statement  "					var time = gCodeCommandQueue[instructionIndex].SecondsToEndFromHere - gCodeCommandQueue[toolChanges[nextToolChange]].SecondsToEndFromHere; " is 138.
Long Statement,MatterControl.Printing,GCodeMemoryFile,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\GCode\GCodeMemoryFile.cs,PercentComplete,The length of the statement  "				return Math.Min(99.9' (gCodeCommandQueue[0].SecondsToEndFromHere - gCodeCommandQueue[instructionIndex].SecondsToEndFromHere) / gCodeCommandQueue[0].SecondsToEndFromHere * 100); " is 176.
Long Statement,MatterControl.Printing,GCodeMemoryFile,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\GCode\GCodeMemoryFile.cs,Ratio0to1IntoContainedLayerSeconds,The length of the statement  "					// Improved last layer percent complete - seek endIndex to 'MatterSlice Completed' line' otherwise leave at LineCount - 1 " is 121.
Long Statement,MatterControl.Printing,GCodeMemoryFile,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\GCode\GCodeMemoryFile.cs,Ratio0to1IntoContainedLayerSeconds,The length of the statement  "					var deltaFromStart = Math.Max(0' gCodeCommandQueue[startIndex].SecondsToEndFromHere - gCodeCommandQueue[instructionIndex].SecondsToEndFromHere); " is 144.
Long Statement,MatterControl.Printing,GCodeMemoryFile,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\GCode\GCodeMemoryFile.cs,Ratio0to1IntoContainedLayerInstruction,The length of the statement  "					// Improved last layer percent complete - seek endIndex to 'MatterSlice Completed' line' otherwise leave at LineCount - 1 " is 121.
Long Statement,MatterControl.Printing,PrinterConnection,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\PrinterConnection.cs,Connect,The length of the statement  "			// On Android' there will never be more than one serial port available for us to connect to. Override the current .ComPort value to account for " is 143.
Long Statement,MatterControl.Printing,PrinterConnection,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\PrinterConnection.cs,Connect,The length of the statement  "			// this aspect to ensure the validation logic that verifies port availability/in use status can proceed without additional workarounds for Android " is 146.
Long Statement,MatterControl.Printing,PrinterConnection,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\PrinterConnection.cs,Connect,The length of the statement  "										// We have to send a line because some printers (like old print-r-bots) do not send anything when connecting and there is no other way to know they are there. " is 158.
Long Statement,MatterControl.Printing,PrinterConnection,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\PrinterConnection.cs,Connect,The length of the statement  "										// Setting connected before calling ReadThread.Start causes the misguided CheckOnPrinter logic to spin up new  ReadThreads " is 122.
Long Statement,MatterControl.Printing,PrinterConnection,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\PrinterConnection.cs,Connect,The length of the statement  "										TurnOffBedAndExtruders(TurnOff.Now); // make sure our ui and the printer agree and that the printer is in a known state (not heating). " is 134.
Long Statement,MatterControl.Printing,PrinterConnection,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\PrinterConnection.cs,HaltConnectionThread,The length of the statement  "			// TODO: stopTryingToConnect is not longer used by anyone. Likely we need to wire up setting CancellationToken from this context " is 128.
Long Statement,MatterControl.Printing,PrinterConnection,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\PrinterConnection.cs,MoveAbsolute,The length of the statement  "			QueueLine(string.Format("G1 X{0:0.###}Y{1:0.###}Z{2:0.###} F{3}"' position.X' position.Y' position.Z' feedRateMmPerMinute)); " is 124.
Long Statement,MatterControl.Printing,PrinterConnection,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\PrinterConnection.cs,MoveExtruderRelative,The length of the statement  "				// TODO: Long term we need to track the active extruder and make requiresToolChange be driven by the extruder you're actually on " is 128.
Long Statement,MatterControl.Printing,PrinterConnection,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\PrinterConnection.cs,ArduinoDtrReset,The length of the statement  "				IFrostedSerialPort resetSerialPort = FrostedSerialPortFactory.GetAppropriateFactory(this.DriverType).Create(this.ComPort' Printer.Settings); " is 140.
Long Statement,MatterControl.Printing,PrinterConnection,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\PrinterConnection.cs,ReadFromPrinter,The length of the statement  "				|| (this.IsConnected && serialPort != null && serialPort.IsOpen && !Disconnecting && readThreadHolder.IsCurrentThread())) " is 121.
Long Statement,MatterControl.Printing,PrinterConnection,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\PrinterConnection.cs,CreateStreamProcessors,The length of the statement  "					accumulatedStream = new SendProgressStream(new PrintRecoveryStream(gCodeFileSwitcher' Printer' ActivePrintTask.PercentDone)' Printer); " is 134.
Long Statement,MatterControl.Printing,PrinterConnection,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\PrinterConnection.cs,CreateStreamProcessors,The length of the statement  "				accumulatedStream = toolChangeStream = new ToolChangeStream(Printer' accumulatedStream' queuedCommandStream' gCodeFileSwitcher); " is 128.
Long Statement,MatterControl.Printing,PrinterConnection,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\PrinterConnection.cs,TurnOffBedAndExtruders,The length of the statement  "				bool currentlyWaiting = ContinueHoldingTemperature && TimeHaveBeenHoldingTemperature.IsRunning && TimeHaveBeenHoldingTemperature.Elapsed.TotalSeconds < TimeToHoldTemperature; " is 174.
Long Statement,MatterControl.Printing,PrinterConnection,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\PrinterConnection.cs,TurnOffBedAndExtruders,The length of the statement  "							SecondsToHoldTemperature = ContinueHoldingTemperature ? Math.Max(0' TimeToHoldTemperature - TimeHaveBeenHoldingTemperature.Elapsed.TotalSeconds) : 0; " is 149.
Long Statement,MatterControl.Printing,PrinterConnection,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\PrinterConnection.cs,WriteRaw,The length of the statement  "						|| (lineWithoutChecksum.StartsWith("T") && !lineWithoutChecksum.StartsWith("T:"))) // is a switch extruder (verify this is the right time to ask this) " is 150.
Long Statement,MatterControl.Printing,PrinterConnection,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\PrinterConnection.cs,WriteRaw,The length of the statement  "						// This writes on the next line' and there may have been another write attempt before it is printer. Write indented to attempt to show its association. " is 151.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration.MappingClasses,SkirtLengthMapping,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\MappingClasses\SkirtLengthMapping.cs,Convert,The length of the statement  "			double amountOfFilamentCubicMms = settings.GetValue<double>(SettingsKey.filament_diameter) * MathHelper.Tau * lengthToExtrudeMm; " is 128.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration.MappingClasses,SkirtLengthMapping,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\MappingClasses\SkirtLengthMapping.cs,Convert,The length of the statement  "			double extrusionSquareSize = settings.GetValue<double>(SettingsKey.first_layer_height) * settings.GetValue<double>(SettingsKey.nozzle_diameter); " is 144.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration.MappingClasses,Slice3rBedShape,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\MappingClasses\Slice3rBedShape.cs,Convert,The length of the statement  "					// bed_shape = 99.4522x10.4528'97.8148x20.7912'95.1057x30.9017'91.3545x40.6737'86.6025x50'80.9017x58.7785'74.3145x66.9131'66.9131x74.3145'58.7785x80.9017'50x86.6025'40.6737x91.3545'30.9017x95.1057'20.7912x97.8148'10.4528x99.4522'0x100'-10.4528x99.4522'-20.7912x97.8148'-30.9017x95.1057'-40.6737x91.3545'-50x86.6025'-58.7785x80.9017'-66.9131x74.3145'-74.3145x66.9131'-80.9017x58.7785'-86.6025x50'-91.3545x40.6737'-95.1057x30.9017'-97.8148x20.7912'-99.4522x10.4528'-100x0'-99.4522x - 10.4528'-97.8148x - 20.7912'-95.1057x - 30.9017'-91.3545x - 40.6737'-86.6025x - 50'-80.9017x - 58.7785'-74.3145x - 66.9131'-66.9131x - 74.3145'-58.7785x - 80.9017'-50x - 86.6025'-40.6737x - 91.3545'-30.9017x - 95.1057'-20.7912x - 97.8148'-10.4528x - 99.4522'0x - 100'10.4528x - 99.4522'20.7912x - 97.8148'30.9017x - 95.1057'40.6737x - 91.3545'50x - 86.6025'58.7785x - 80.9017'66.9131x - 74.3145'74.3145x - 66.9131'80.9017x - 58.7785'86.6025x - 50'91.3545x - 40.6737'95.1057x - 30.9017'97.8148x - 20.7912'99.4522x - 10.4528'100x0 " is 1010.
Long Statement,MatterHackers.PrinterEmulator,Emulator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\Emulator\Emulator.cs,GetCorrectResponse,The length of the statement  "							var length = Math.Max(CurrentExtruder.ECurrent - CurrentExtruder.EDestination' (CurrentPosition - Destination).Length); // WIP' factor in the extruder movement " is 159.
Long Statement,MatterHackers.PrinterEmulator,Emulator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\Emulator\Emulator.cs,GetPosition,The length of the statement  "			return $"X:{Destination.X:0.00} Y: {Destination.Y:0.00} Z: {Destination.Z:0.00} E: {CurrentExtruder.EDestination:0.00} Count X: 0.00 Y: 0.00 Z: 0.00\nok\n"; " is 156.
Long Statement,MatterHackers.PrinterEmulator,Emulator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\Emulator\Emulator.cs,ReportMarlinFirmware,The length of the statement  "			return "FIRMWARE_NAME:Marlin V1; Sprinter/grbl mashup for gen6 FIRMWARE_URL:https://github.com/MarlinFirmware/Marlin PROTOCOL_VERSION:1.0 MACHINE_TYPE:Framelis v1 EXTRUDER_COUNT:1 UUID:155f84b5-d4d7-46f4-9432-667e6876f37a\nok\n"; " is 229.
Long Statement,MatterHackers.PrinterEmulator,Emulator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\Emulator\Emulator.cs,ReturnTemp,The length of the statement  "			response += (!this.HasHeatedBed) ? "\n" : $" B: {HeatedBed.CurrentTemperature:0.0} / {HeatedBed.TargetTemperature:0.0}\n"; " is 122.
Long Statement,TcpipDriver,TcpipSerialPort,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\TCPIP\TcpipSerialPort.cs,Read,The length of the statement  "			Array.Copy(readBuffer' count' readBuffer' 0' bufferIndex); // This may throw an exception as the target and source are the same " is 127.
Long Statement,TcpipDriver,TcpipSerialPort,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\TCPIP\TcpipSerialPort.cs,SetBaudRate,The length of the statement  "			byte[] bytes = new byte[] { IAC' SB' ComPortOpt' SetBaud' baudBytes[0]' baudBytes[1]' baudBytes[2]' baudBytes[3]' IAC' SE }; " is 124.
Long Statement,MatterHackers.MatterControl.Plugins.X3GDriver,X3GPacketAnalyzer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GReader.cs,analyzePayload,The length of the statement  "					case 0x82://Action Buffer overflow' Packet Discarded (currently will request resend of line' later should be avoided by checking buffer size before send) " is 153.
Long Statement,MatterHackers.MatterControl.Plugins.X3GDriver,X3GPacketAnalyzer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GReader.cs,analyzePayload,The length of the statement  "						if (printerDetails.currentPosition.Length != 0)//if we are not connecting just now to the printer we will report back the target move position " is 142.
Long Statement,MatterHackers.MatterControl.Plugins.X3GDriver,X3GPacketAnalyzer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GReader.cs,analyzePayload,The length of the statement  "							payloadStrBuilder.Append(String.Format(" C: X:{0} Y:{1} Z:{2} E:{3}"' posFromPrinter.X' posFromPrinter.Y' posFromPrinter.Z' 0)); " is 128.
Long Statement,MatterHackers.MatterControl.Plugins.X3GDriver,X3GPacketAnalyzer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GReader.cs,analyzePayload,The length of the statement  "					case 3: //Length of temperature response' temperature is requested individually for each extruder and bed separately. This collects the information and condenses it into one response to be sent to the printer " is 208.
Long Statement,MatterHackers.MatterControl.Plugins.X3GDriver,X3GPacketAnalyzer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GReader.cs,translateInt32,The length of the statement  "				return (long)(response[startingIndex] + (response[startingIndex + 1] * 256) + (response[startingIndex + 2] * 256 ^ 2) + (response[startingIndex + 3] * (256 ^ 3))); " is 163.
Long Statement,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The length of the statement  "			commands = parseGcode(writemessage); //gcode is parsed into a list of strings each corresponding to a parameter (example: G1X10Y38.5 => G1'X10'Y38.5) " is 149.
Long Statement,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The length of the statement  "						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization " is 126.
Long Statement,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The length of the statement  "										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder " is 124.
Long Statement,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The length of the statement  "										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder " is 126.
Long Statement,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The length of the statement  "										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder " is 125.
Long Statement,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The length of the statement  "									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm) " is 128.
Long Statement,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The length of the statement  "							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects) " is 137.
Long Statement,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The length of the statement  "							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position " is 138.
Long Statement,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,updateCurrentPosition,The length of the statement  "			printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position " is 138.
Long Statement,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,FeedrateOnly,The length of the statement  "				feedRateOnlyCheck = !(checkCommandForFlag(writemessage' 'X') || checkCommandForFlag(writemessage' 'Y') || checkCommandForFlag(writemessage' 'Z') || checkCommandForFlag(writemessage' 'E')); " is 188.
Long Statement,MatterHackers.Plugins.X3GDriver,X3GSerialPortWrapper,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GSerialPortWrapper.cs,secondExtruderIsReady,The length of the statement  "			return (extruderTemp >= printerDetails.targetExtruderTemps[1] - 2);//Maker bot seems to stop the lockout when within 2 Degrees so we will match it " is 146.
Long Statement,MatterHackers.Plugins.X3GDriver,X3GSerialPortWrapper,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GSerialPortWrapper.cs,ExtruderIsReady,The length of the statement  "			return extruderTemp >= (printerDetails.targetExtruderTemps[0] - 2);//Maker bot seems to stop the lockout when within 2 Degrees so we will match it " is 146.
Long Statement,MatterHackers.Plugins.X3GDriver,X3GSerialPortWrapper,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GSerialPortWrapper.cs,BedIsReady,The length of the statement  "				printerDetails.targetBedTemp = 0; //Flashforges seem to lose the ability to maintain this temperature' rather than locking them out forever we remove the requirement after reached once " is 184.
Long Statement,MatterHackers.Plugins.X3GDriver,X3GSerialPortWrapper,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GSerialPortWrapper.cs,hasFullPacket,The length of the statement  "						readPacket.Add(bytesRead[1]);//Add the start bit and retrieve packet length from the buffer (may need to check buffer size before reading) " is 138.
Long Statement,MatterControl.Printing.Pipelines,MaxLengthStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\MaxLengthStream.cs,ReadLine,The length of the statement  "						double lengthSquared = Math.Max(deltaToDestination.LengthSquared' deltaToDestination.extrusion * deltaToDestination.extrusion); " is 127.
Long Statement,MatterControl.Printing.Pipelines,PauseHandlingStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\PauseHandlingStream.cs,Resume,The length of the statement  "			InjectPauseGCode("G1 X{0:0.###} Y{1:0.###} Z{2:0.###} F{3}".FormatWith(ensureAllAxisAreSent.X' ensureAllAxisAreSent.Y' ensureAllAxisAreSent.Z' feedRates.X + 1)); " is 161.
Long Statement,MatterControl.Printing.Pipelines,PauseHandlingStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\PauseHandlingStream.cs,Resume,The length of the statement  "			InjectPauseGCode("G1 X{0:0.###} Y{1:0.###} Z{2:0.###} F{3}".FormatWith(positionBeforeActualPause.X' positionBeforeActualPause.Y' positionBeforeActualPause.Z' feedRates)); " is 170.
Long Statement,MatterControl.Printing.Pipelines,PrintRecoveryStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\PrintRecoveryStream.cs,ReadLine,The length of the statement  "					// We don't know where the printer is for sure (it may have been turned off). Disable leveling until we know where it is. " is 121.
Long Statement,MatterControl.Printing.Pipelines,PrintRecoveryStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\PrintRecoveryStream.cs,ReadLine,The length of the statement  "						queuedCommands.Add("G1 X{0:0.###}Y{1:0.###}F{2}".FormatWith(recoveryPositionXy.X' recoveryPositionXy.Y' printer.Settings.XSpeed())); " is 132.
Long Statement,MatterControl.Printing.Pipelines,PrintRecoveryStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\PrintRecoveryStream.cs,ReadLine,The length of the statement  "							queuedCommands.Add(CreateMovementLine(new PrinterMove(new Vector3(recoverPositionXy.X' recoverPositionXy.Y' lastDestination.position.Z)' 0' printer.Settings.ZSpeed()))); " is 169.
Long Statement,MatterControl.Printing.Pipelines,PrintRecoveryStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\PrintRecoveryStream.cs,ReadLine,The length of the statement  "							new Vector3(boundsOfSkippedLayers.Left - extruderWidth * 2' boundsOfSkippedLayers.Bottom + boundsOfSkippedLayers.Height / 2' lastDestination.position.Z)' " is 153.
Long Statement,MatterControl.Printing.Pipelines,ToolChangeStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\ToolChangeStream.cs,ReadLine,The length of the statement  "					// For smoothie' switch back to the extrude we were using before the temp change (smoothie switches to the specified extruder' marlin repetier do not) " is 150.
Long Statement,MatterControl.Printing.Pipelines,ToolChangeStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\ToolChangeStream.cs,ReadLine,The length of the statement  "					// For smoothie' switch back to the extrude we were using before the temp change (smoothie switches to the specified extruder' marlin repetier do not) " is 150.
Long Statement,MatterControl.Printing.Pipelines,ToolChangeStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\ToolChangeStream.cs,QueueBeforeIfNeedToSwitchExtruders,The length of the statement  "				&& (lineNoComment.Contains("X") || lineNoComment.Contains("Y") || lineNoComment.Contains("Z"))) // has a move axis in it " is 120.
Long Statement,MatterControl.Printing.Pipelines,ToolSpeedMultiplierStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\ToolSpeedMultiplierStream.cs,ReadLine,The length of the statement  "					bool xyPositionDelta = currentMove.position.X != this.lastDestination.position.X || currentMove.position.Y != this.lastDestination.position.Y; " is 142.
Long Statement,MatterControl.Printing.PrintLeveling,LevelingPlan,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Leveling\LevelingPlan.cs,GetSampleRing,The length of the statement  "			double bedRadius = Math.Min(printer.Settings.GetValue<Vector2>(SettingsKey.bed_size).X' printer.Settings.GetValue<Vector2>(SettingsKey.bed_size).Y) / 2; " is 152.
Long Statement,MatterControl.Printing.PrintLeveling,LevelWizardMesh,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Leveling\LevelWizardMesh.cs,GetPrintLevelPositionToSample,The length of the statement  "				// reduce the bed size by the ratio of the radius (square root of 2) so that the sample positions will fit on a circular bed " is 124.
Complex Conditional,MatterHackers.SerialPortCommunication.FrostedSerial,FrostedSerialPortStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Communication\FrostedSerial\FrostedSerialStream.cs,SetSignal,The conditional expression  "signal < SerialSignal.Cd || signal > SerialSignal.Rts ||  					signal == SerialSignal.Cd ||  					signal == SerialSignal.Cts ||  					signal == SerialSignal.Dsr"  is complex.
Complex Conditional,MatterHackers.MatterControl.SlicerConfiguration,PrinterSettings,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\PrinterSettings.cs,OnSettingChanged,The conditional expression  "slicerConfigName == SettingsKey.t0_inset  				|| slicerConfigName == SettingsKey.t1_inset  				|| slicerConfigName == SettingsKey.bed_size  				|| slicerConfigName == SettingsKey.print_center"  is complex.
Complex Conditional,MatterHackers.MatterControl.SlicerConfiguration,PrinterSettings,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\PrinterSettings.cs,ParseShowString,The conditional expression  "(!negate && sliceSettingValue == matchString)  							|| (negate && sliceSettingValue != matchString)"  is complex.
Complex Conditional,MatterControl.Printing,GCodeFile,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\GCode\GCodeFile.cs,GetFirstNumberAfter,The conditional expression  "stringPos != -1  				&& (stopPos == -1 || stringPos < stopPos || string.IsNullOrEmpty(stopCheckingString))"  is complex.
Complex Conditional,MatterControl.Printing,GCodeMemoryFile,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\GCode\GCodeMemoryFile.cs,NextToolChange,The conditional expression  "instructionIndex < toolChanges[i]  						&& gCodeCommandQueue[toolChanges[i]].ToolIndex != currentToolIndex  						&& (toolToLookFor == -1 || gCodeCommandQueue[toolChanges[i]].ToolIndex == toolToLookFor)"  is complex.
Complex Conditional,MatterControl.Printing,GCodeMemoryFile,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\GCode\GCodeMemoryFile.cs,ParseFileContents,The conditional expression  "previousInstruction != null  					&& machineInstructionForLine.EPosition > previousInstruction.EPosition  					&& (machineInstructionForLine.Line.IndexOf('X') != -1 || machineInstructionForLine.Line.IndexOf('Y') != -1)"  is complex.
Complex Conditional,MatterControl.Printing,PrinterConnection,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\PrinterConnection.cs,ReadFromPrinter,The conditional expression  "CommunicationState == CommunicationStates.AttemptingToConnect  				|| (this.IsConnected && serialPort != null && serialPort.IsOpen && !Disconnecting && readThreadHolder.IsCurrentThread())"  is complex.
Complex Conditional,MatterControl.Printing,PrinterConnection,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\PrinterConnection.cs,KeepTrackOfAbsolutePositionAndDestination,The conditional expression  "lineBeingSent.StartsWith("G0 ")  				|| lineBeingSent.StartsWith("G1 ")  				|| lineBeingSent.StartsWith("G2 ")  				|| lineBeingSent.StartsWith("G3 ")"  is complex.
Complex Conditional,MatterControl.Printing,PrinterConnection,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\PrinterConnection.cs,SyncProgressToDB,The conditional expression  "timePrinting.Elapsed.TotalSeconds > 0  					&& gCodeFileSwitcher != null  					&& (secondsSinceUpdateHistory > secondsSinceStartedPrint  					|| secondsSinceUpdateHistory + 1 < secondsSinceStartedPrint  					|| lineSinceUpdateHistory + 20 < gCodeFileSwitcher.LineIndex)"  is complex.
Complex Conditional,MatterControl.Printing,PrinterConnection,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\PrinterConnection.cs,WriteRaw,The conditional expression  "lineWithoutChecksum.StartsWith("G28") // is a home  						|| lineWithoutChecksum.StartsWith("G29") // is a bed level  						|| lineWithoutChecksum.StartsWith("G30") // is a bed level  						|| (lineWithoutChecksum.StartsWith("T") && !lineWithoutChecksum.StartsWith("T:"))"  is complex.
Complex Conditional,MatterControl.Printing.Pipelines,GCodeStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\GCodeStream.cs,LineIsMovement,The conditional expression  "lineBeingSent.StartsWith("G0 ")  				|| lineBeingSent.StartsWith("G1 ")  				|| lineBeingSent.StartsWith("G28")  				|| lineBeingSent.StartsWith("G29")  				|| lineBeingSent.StartsWith("G30")"  is complex.
Complex Conditional,MatterControl.Printing.Pipelines,PrintLevelingStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\PrintLevelingStream.cs,GetLeveledPosition,The conditional expression  "levelingData != null  				&& printer.Settings?.GetValue<bool>(SettingsKey.print_leveling_enabled) == true  				&& (lineBeingSent.StartsWith("G0 ") || lineBeingSent.StartsWith("G1 "))"  is complex.
Complex Conditional,MatterControl.Printing.Pipelines,PrintRecoveryStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\PrintRecoveryStream.cs,ReadLine,The conditional expression  "line.StartsWith("M109") // heat and wait extruder  							|| line.StartsWith("M104") // heat extruder  							|| line.StartsWith("M190") // heat and wait bed  							|| line.StartsWith("M140") // heat bed  							|| line.StartsWith("T") // switch extruder  							|| line.StartsWith("M106") // fan on  							|| line.StartsWith("M107") // fan off  							|| line.StartsWith("G92")"  is complex.
Complex Conditional,MatterControl.Printing.Pipelines,RequestTemperaturesStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\RequestTemperaturesStream.cs,ReadLine,The conditional expression  "!printer.Connection.WaitingForPositionRead  				&& nextReadTimeMs < UiThread.CurrentTimerMs  				&& printer.Connection.IsConnected  				&& printer.Connection.MonitorPrinterTemperature"  is complex.
Complex Conditional,MatterControl.Printing.Pipelines,SoftwareEndstopsStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\SoftwareEndstopsStream.cs,Settings_SettingChanged,The conditional expression  "stringEvent.Data == SettingsKey.bed_size  				|| stringEvent.Data == SettingsKey.print_center  				|| stringEvent.Data == SettingsKey.build_height  				|| stringEvent.Data == SettingsKey.bed_shape"  is complex.
Complex Conditional,MatterControl.Printing.Pipelines,ToolChangeStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\ToolChangeStream.cs,ReadLine,The conditional expression  "sendState == SendStates.WaitingForMove  				&& activeTool != RequestedTool // is different than the last extruder set  				&& (lineNoComment.StartsWith("G0 ") || lineNoComment.StartsWith("G1 ")) // is a G1 or G0  				&& lineNoComment.Contains("E") // it is an extrusion move  											   // and have no other position information  				&& !lineNoComment.Contains("X")  				&& !lineNoComment.Contains("Y")  				&& !lineNoComment.Contains("Z")"  is complex.
Complex Conditional,MatterControl.Printing.Pipelines,ToolChangeStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\ToolChangeStream.cs,ManageReHeating,The conditional expression  "toolIndex >= 0  					&& time < timeToReheat  					&& printer.Connection.GetTargetHotendTemperature(i) != targetTemp  					&& line != setTempLine"  is complex.
Complex Conditional,MatterControl.Printing.Pipelines,ToolChangeStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\ToolChangeStream.cs,QueueBeforeIfNeedToSwitchExtruders,The conditional expression  "sendState == SendStates.WaitingForMove  				&& activeTool != RequestedTool // is different than the last extruder set  				&& (lineNoComment.StartsWith("G0 ") || lineNoComment.StartsWith("G1 ")) // is a G1 or G0  				&& (lineNoComment.Contains("X") || lineNoComment.Contains("Y") || lineNoComment.Contains("Z"))"  is complex.
Virtual Method Call from Constructor,MatterHackers.Plugins.X3GDriver,X3GSerialPortWrapper,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GSerialPortWrapper.cs,X3GSerialPortWrapper,The constructor "X3GSerialPortWrapper" calls a virtual method "Create".
Empty Catch Block,MatterControl.Printing,PrinterConnection,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\PrinterConnection.cs,BedTemperatureWasWritenToPrinter,The method has an empty catch block.
Empty Catch Block,MatterControl.Printing,PrinterConnection,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\PrinterConnection.cs,FanSpeedWasWritenToPrinter,The method has an empty catch block.
Empty Catch Block,MatterControl.Printing,PrinterConnection,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\PrinterConnection.cs,ReadFromPrinter,The method has an empty catch block.
Empty Catch Block,MatterControl.Printing,PrinterConnection,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\PrinterConnection.cs,ReadFromPrinter,The method has an empty catch block.
Empty Catch Block,MatterControl.Printing,PrinterConnection,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\PrinterConnection.cs,RebootBoard,The method has an empty catch block.
Empty Catch Block,MatterControl.Printing,PrinterConnection,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\PrinterConnection.cs,WriteRaw,The method has an empty catch block.
Empty Catch Block,MatterControl.Printing,ReadThread,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\PrinterConnection.cs,ReadThread,The method has an empty catch block.
Empty Catch Block,MatterHackers.PrinterEmulator,Heater,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\Emulator\Heater.cs,Heater,The method has an empty catch block.
Empty Catch Block,TcpipDriver,TcpipSerialPort,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\TCPIP\TcpipSerialPort.cs,Reconnect,The method has an empty catch block.
Magic Number,MatterHackers.SerialPortCommunication.FrostedSerial,FrostedSerialPort,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Communication\FrostedSerial\FrostedSerialPort.cs,ReadChar,The following statement contains a magic number: byte[] buffer = new byte[16];
Magic Number,MatterHackers.SerialPortCommunication.FrostedSerial,FrostedSerialPortFactory,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Communication\FrostedSerial\FrostedSerialPortFactory.cs,CreateAndOpen,The following statement contains a magic number: bool customBaudAssignment = isLinux && baudRate > 115200;
Magic Number,MatterHackers.SerialPortCommunication.FrostedSerial,FrostedSerialPortFactory,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Communication\FrostedSerial\FrostedSerialPortFactory.cs,CreateAndOpen,The following statement contains a magic number: newPort.ReadTimeout = 500;
Magic Number,MatterHackers.SerialPortCommunication.FrostedSerial,FrostedSerialPortFactory,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Communication\FrostedSerial\FrostedSerialPortFactory.cs,CreateAndOpen,The following statement contains a magic number: newPort.WriteTimeout = 500;
Magic Number,MatterHackers.SerialPortCommunication.FrostedSerial,FrostedSerialPortStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Communication\FrostedSerial\FrostedSerialStream.cs,SetFrostedAttributes,The following statement contains a magic number: switch (dataBits)  			{  				case 5:  					newtio.c_cflag |= (uint)e_c_oflag.CS5;  					break;    				case 6:  					newtio.c_cflag |= (uint)e_c_oflag.CS6;  					break;    				case 7:  					newtio.c_cflag |= (uint)e_c_oflag.CS6;  					break;    				case 8:  				default:  					newtio.c_cflag |= (uint)e_c_oflag.CS8;  					break;  			}
Magic Number,MatterHackers.SerialPortCommunication.FrostedSerial,FrostedSerialPortStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Communication\FrostedSerial\FrostedSerialStream.cs,SetFrostedAttributes,The following statement contains a magic number: switch (dataBits)  			{  				case 5:  					newtio.c_cflag |= (uint)e_c_oflag.CS5;  					break;    				case 6:  					newtio.c_cflag |= (uint)e_c_oflag.CS6;  					break;    				case 7:  					newtio.c_cflag |= (uint)e_c_oflag.CS6;  					break;    				case 8:  				default:  					newtio.c_cflag |= (uint)e_c_oflag.CS8;  					break;  			}
Magic Number,MatterHackers.SerialPortCommunication.FrostedSerial,FrostedSerialPortStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Communication\FrostedSerial\FrostedSerialStream.cs,SetFrostedAttributes,The following statement contains a magic number: switch (dataBits)  			{  				case 5:  					newtio.c_cflag |= (uint)e_c_oflag.CS5;  					break;    				case 6:  					newtio.c_cflag |= (uint)e_c_oflag.CS6;  					break;    				case 7:  					newtio.c_cflag |= (uint)e_c_oflag.CS6;  					break;    				case 8:  				default:  					newtio.c_cflag |= (uint)e_c_oflag.CS8;  					break;  			}
Magic Number,MatterHackers.SerialPortCommunication.FrostedSerial,FrostedSerialPortStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Communication\FrostedSerial\FrostedSerialStream.cs,SetFrostedAttributes,The following statement contains a magic number: switch (dataBits)  			{  				case 5:  					newtio.c_cflag |= (uint)e_c_oflag.CS5;  					break;    				case 6:  					newtio.c_cflag |= (uint)e_c_oflag.CS6;  					break;    				case 7:  					newtio.c_cflag |= (uint)e_c_oflag.CS6;  					break;    				case 8:  				default:  					newtio.c_cflag |= (uint)e_c_oflag.CS8;  					break;  			}
Magic Number,MatterHackers.SerialPortCommunication.FrostedSerial,SerialPortFixer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Communication\SerialPortFixer.cs,SerialPortFixer,The following statement contains a magic number: SafeFileHandle hFile = CreateFile(@"\\.\" + portName' dwAccess' 0' IntPtr.Zero' 3' dwFlagsAndAttributes' IntPtr.Zero);
Magic Number,MatterHackers.SerialPortCommunication.FrostedSerial,SerialPortFixer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Communication\SerialPortFixer.cs,SerialPortFixer,The following statement contains a magic number: (fileType != 2) && (fileType != 0)
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,GCodeMacro,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\GCodeMacro.cs,FixMacroName,The following statement contains a magic number: int lengthLimit = 24;
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,PrinterSettings,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\PrinterSettings.cs,ReplaceMacroValues,The following statement contains a magic number: doubleValue *= 60;
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,PrinterSettings,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\PrinterSettings.cs,BedAABB,The following statement contains a magic number: return new AxisAlignedBoundingBox(  				printCenter.X - bedSize.X / 2' // min x  				printCenter.Y - bedSize.Y / 2' // min y  				0' // min z  				printCenter.X + bedSize.X / 2' // max x  				printCenter.Y + bedSize.Y / 2' // max y  				buildHeight);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,PrinterSettings,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\PrinterSettings.cs,BedAABB,The following statement contains a magic number: return new AxisAlignedBoundingBox(  				printCenter.X - bedSize.X / 2' // min x  				printCenter.Y - bedSize.Y / 2' // min y  				0' // min z  				printCenter.X + bedSize.X / 2' // max x  				printCenter.Y + bedSize.Y / 2' // max y  				buildHeight);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,PrinterSettings,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\PrinterSettings.cs,BedAABB,The following statement contains a magic number: return new AxisAlignedBoundingBox(  				printCenter.X - bedSize.X / 2' // min x  				printCenter.Y - bedSize.Y / 2' // min y  				0' // min z  				printCenter.X + bedSize.X / 2' // max x  				printCenter.Y + bedSize.Y / 2' // max y  				buildHeight);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,PrinterSettings,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\PrinterSettings.cs,BedAABB,The following statement contains a magic number: return new AxisAlignedBoundingBox(  				printCenter.X - bedSize.X / 2' // min x  				printCenter.Y - bedSize.Y / 2' // min y  				0' // min z  				printCenter.X + bedSize.X / 2' // max x  				printCenter.Y + bedSize.Y / 2' // max y  				buildHeight);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,PrinterSettingsConverter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\PrinterSettings.cs,MigrateProbeOffset,The following statement contains a magic number: split.Length == 2
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,PrinterSettingsLayer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\PrinterSettingsLayer.cs,LoadFromIni,The following statement contains a magic number: var settings = from line in File.ReadAllLines(filePath)  						   let segments = line.Split('=')  						   where !line.StartsWith("#") && !string.IsNullOrEmpty(line) && segments.Length == 2  						   select new  						   {  							   Key = segments[0].Trim()'  							   Value = segments[1].Trim()  						   };
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,ProfileMigrations,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\ProfileMigrations.cs,MigrateDocument,The following statement contains a magic number: jObject["DocumentVersion"] = 201606271;
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,ProfileMigrations,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\ProfileMigrations.cs,MigrateDocument,The following statement contains a magic number: fromVersion < 201606271
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SettingsHelpers,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SettingsHelpers.cs,SetExtruderOffset,The following statement contains a magic number: xyz.Length == 2
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SettingsHelpers,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SettingsHelpers.cs,ExtruderOffset,The following statement contains a magic number: xyz.Length == 2
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SettingsHelpers,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SettingsHelpers.cs,ManualMovementSpeeds,The following statement contains a magic number: var feedRate = new Vector3(3000' 3000' 315);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SettingsHelpers,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SettingsHelpers.cs,ManualMovementSpeeds,The following statement contains a magic number: var feedRate = new Vector3(3000' 3000' 315);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SettingsHelpers,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SettingsHelpers.cs,ManualMovementSpeeds,The following statement contains a magic number: var feedRate = new Vector3(3000' 3000' 315);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SettingsHelpers,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SettingsHelpers.cs,ManualMovementSpeeds,The following statement contains a magic number: feedRate.Y = double.Parse(segments[3]);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SettingsHelpers,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SettingsHelpers.cs,ManualMovementSpeeds,The following statement contains a magic number: feedRate.Z = double.Parse(segments[5]);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SettingsHelpers,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SettingsHelpers.cs,GetMovementSpeeds,The following statement contains a magic number: speeds.Add(allSpeeds[i * 2 + 0]' double.Parse(allSpeeds[i * 2 + 1]));
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SettingsHelpers,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SettingsHelpers.cs,GetMovementSpeeds,The following statement contains a magic number: speeds.Add(allSpeeds[i * 2 + 0]' double.Parse(allSpeeds[i * 2 + 1]));
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SettingsHelpers,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SettingsHelpers.cs,GetMovementSpeeds,The following statement contains a magic number: i < allSpeeds.Length / 2
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SettingsLayout,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SettingsLayout.cs,LoadAndParseLayoutFile,The following statement contains a magic number: switch (CountLeadingSpaces(line))  					{  						case 0:  							sectionToAddTo = new SettingsSection(sanitizedLine);  							sections.Add(sanitizedLine' sectionToAddTo);  							break;    						case 2:  							categoryToAddTo = new Category(sanitizedLine' sectionToAddTo);  							sectionToAddTo.Categories.Add(categoryToAddTo);  							break;    						case 4:  							groupToAddTo = new Group(sanitizedLine' categoryToAddTo);  							categoryToAddTo.Groups.Add(groupToAddTo);  							break;    						case 6:  							subGroupToAddTo = new SubGroup(sanitizedLine' groupToAddTo);  							groupToAddTo.SubGroups.Add(subGroupToAddTo);  							break;    						case 8:  							if (PrinterSettings.SettingsData.TryGetValue(sanitizedLine' out SliceSettingData data))  							{  								subGroupToAddTo.Settings.Add(data);  								data.OrganizerSubGroup = subGroupToAddTo;  								sectionToAddTo.AddSetting(data.SlicerConfigName' subGroupToAddTo);  							}    							break;    						default:  							throw new Exception("Bad file' too many spaces (must be 0' 2' 4 or 6).");  					}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SettingsLayout,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SettingsLayout.cs,LoadAndParseLayoutFile,The following statement contains a magic number: switch (CountLeadingSpaces(line))  					{  						case 0:  							sectionToAddTo = new SettingsSection(sanitizedLine);  							sections.Add(sanitizedLine' sectionToAddTo);  							break;    						case 2:  							categoryToAddTo = new Category(sanitizedLine' sectionToAddTo);  							sectionToAddTo.Categories.Add(categoryToAddTo);  							break;    						case 4:  							groupToAddTo = new Group(sanitizedLine' categoryToAddTo);  							categoryToAddTo.Groups.Add(groupToAddTo);  							break;    						case 6:  							subGroupToAddTo = new SubGroup(sanitizedLine' groupToAddTo);  							groupToAddTo.SubGroups.Add(subGroupToAddTo);  							break;    						case 8:  							if (PrinterSettings.SettingsData.TryGetValue(sanitizedLine' out SliceSettingData data))  							{  								subGroupToAddTo.Settings.Add(data);  								data.OrganizerSubGroup = subGroupToAddTo;  								sectionToAddTo.AddSetting(data.SlicerConfigName' subGroupToAddTo);  							}    							break;    						default:  							throw new Exception("Bad file' too many spaces (must be 0' 2' 4 or 6).");  					}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SettingsLayout,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SettingsLayout.cs,LoadAndParseLayoutFile,The following statement contains a magic number: switch (CountLeadingSpaces(line))  					{  						case 0:  							sectionToAddTo = new SettingsSection(sanitizedLine);  							sections.Add(sanitizedLine' sectionToAddTo);  							break;    						case 2:  							categoryToAddTo = new Category(sanitizedLine' sectionToAddTo);  							sectionToAddTo.Categories.Add(categoryToAddTo);  							break;    						case 4:  							groupToAddTo = new Group(sanitizedLine' categoryToAddTo);  							categoryToAddTo.Groups.Add(groupToAddTo);  							break;    						case 6:  							subGroupToAddTo = new SubGroup(sanitizedLine' groupToAddTo);  							groupToAddTo.SubGroups.Add(subGroupToAddTo);  							break;    						case 8:  							if (PrinterSettings.SettingsData.TryGetValue(sanitizedLine' out SliceSettingData data))  							{  								subGroupToAddTo.Settings.Add(data);  								data.OrganizerSubGroup = subGroupToAddTo;  								sectionToAddTo.AddSetting(data.SlicerConfigName' subGroupToAddTo);  							}    							break;    						default:  							throw new Exception("Bad file' too many spaces (must be 0' 2' 4 or 6).");  					}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SettingsLayout,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Settings\SettingsLayout.cs,LoadAndParseLayoutFile,The following statement contains a magic number: switch (CountLeadingSpaces(line))  					{  						case 0:  							sectionToAddTo = new SettingsSection(sanitizedLine);  							sections.Add(sanitizedLine' sectionToAddTo);  							break;    						case 2:  							categoryToAddTo = new Category(sanitizedLine' sectionToAddTo);  							sectionToAddTo.Categories.Add(categoryToAddTo);  							break;    						case 4:  							groupToAddTo = new Group(sanitizedLine' categoryToAddTo);  							categoryToAddTo.Groups.Add(groupToAddTo);  							break;    						case 6:  							subGroupToAddTo = new SubGroup(sanitizedLine' groupToAddTo);  							groupToAddTo.SubGroups.Add(subGroupToAddTo);  							break;    						case 8:  							if (PrinterSettings.SettingsData.TryGetValue(sanitizedLine' out SliceSettingData data))  							{  								subGroupToAddTo.Settings.Add(data);  								data.OrganizerSubGroup = subGroupToAddTo;  								sectionToAddTo.AddSetting(data.SlicerConfigName' subGroupToAddTo);  							}    							break;    						default:  							throw new Exception("Bad file' too many spaces (must be 0' 2' 4 or 6).");  					}
Magic Number,MatterControl.Printing,GCodeFileStreamed,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\GCode\GCodeFileStreamed.cs,PercentComplete,The following statement contains a magic number: return (double)openGcodeStream.BaseStream.Position / (double)openGcodeStream.BaseStream.Length * 100.0;
Magic Number,MatterControl.Printing,GCodeFileStreamed,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\GCode\GCodeFileStreamed.cs,PercentComplete,The following statement contains a magic number: return 100;
Magic Number,MatterControl.Printing,GCodeMemoryFile,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\GCode\GCodeMemoryFile.cs,GetFilamentCubicMm,The following statement contains a magic number: double filamentRadius = filamentDiameterMm / 2;
Magic Number,MatterControl.Printing,GCodeMemoryFile,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\GCode\GCodeMemoryFile.cs,GetFilamentDiameter,The following statement contains a magic number: i < Math.Min(100' gCodeCommandQueue.Count)
Magic Number,MatterControl.Printing,GCodeMemoryFile,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\GCode\GCodeMemoryFile.cs,GetFilamentDiameter,The following statement contains a magic number: i > Math.Max(0' gCodeCommandQueue.Count - 100)
Magic Number,MatterControl.Printing,GCodeMemoryFile,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\GCode\GCodeMemoryFile.cs,GetFilamentDiameter,The following statement contains a magic number: filamentDiameterCache = 1.75;
Magic Number,MatterControl.Printing,GCodeMemoryFile,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\GCode\GCodeMemoryFile.cs,GetFilamentWeightGrams,The following statement contains a magic number: double cubicMmPerCubicCm = 1000;
Magic Number,MatterControl.Printing,GCodeMemoryFile,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\GCode\GCodeMemoryFile.cs,GetLayerHeight,The following statement contains a magic number: var layerHeight = .2;
Magic Number,MatterControl.Printing,GCodeMemoryFile,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\GCode\GCodeMemoryFile.cs,GetLayerHeight,The following statement contains a magic number: layerHeight < IndexOfLayerStart.Count - 2
Magic Number,MatterControl.Printing,GCodeMemoryFile,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\GCode\GCodeMemoryFile.cs,GetLayerHeight,The following statement contains a magic number: layerIndex >= 0  					&& layerHeight < .01
Magic Number,MatterControl.Printing,GCodeMemoryFile,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\GCode\GCodeMemoryFile.cs,GetLayerHeight,The following statement contains a magic number: layerHeight < .01
Magic Number,MatterControl.Printing,GCodeMemoryFile,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\GCode\GCodeMemoryFile.cs,PercentComplete,The following statement contains a magic number: return Math.Min(99.9' (gCodeCommandQueue[0].SecondsToEndFromHere - gCodeCommandQueue[instructionIndex].SecondsToEndFromHere) / gCodeCommandQueue[0].SecondsToEndFromHere * 100);
Magic Number,MatterControl.Printing,GCodeMemoryFile,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\GCode\GCodeMemoryFile.cs,PercentComplete,The following statement contains a magic number: return Math.Min(99.9' (gCodeCommandQueue[0].SecondsToEndFromHere - gCodeCommandQueue[instructionIndex].SecondsToEndFromHere) / gCodeCommandQueue[0].SecondsToEndFromHere * 100);
Magic Number,MatterControl.Printing,GCodeMemoryFile,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\GCode\GCodeMemoryFile.cs,PercentComplete,The following statement contains a magic number: return 100;
Magic Number,MatterControl.Printing,GCodeMemoryFile,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\GCode\GCodeMemoryFile.cs,ParseFileContents,The following statement contains a magic number: progressReporter((double)lineIndex / crCount / 2' "");
Magic Number,MatterControl.Printing,GCodeMemoryFile,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\GCode\GCodeMemoryFile.cs,ParseFileContents,The following statement contains a magic number: progressReporter != null && maxProgressReport.ElapsedMilliseconds > 200
Magic Number,MatterControl.Printing,GCodeMemoryFile,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\GCode\GCodeMemoryFile.cs,AnalyzeGCodeLines,The following statement contains a magic number: var timeForE = Estimator.GetSecondsForMovement(deltaEPositionThisLine'  						feedRateMmPerMin / 60.0'  						maxAccelerationMmPerS2[3]'  						maxVelocityMmPerS[3]'  						velocitySameAsStopMmPerS[3]'  						speedMultiplier[3]);
Magic Number,MatterControl.Printing,GCodeMemoryFile,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\GCode\GCodeMemoryFile.cs,AnalyzeGCodeLines,The following statement contains a magic number: var timeForE = Estimator.GetSecondsForMovement(deltaEPositionThisLine'  						feedRateMmPerMin / 60.0'  						maxAccelerationMmPerS2[3]'  						maxVelocityMmPerS[3]'  						velocitySameAsStopMmPerS[3]'  						speedMultiplier[3]);
Magic Number,MatterControl.Printing,GCodeMemoryFile,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\GCode\GCodeMemoryFile.cs,AnalyzeGCodeLines,The following statement contains a magic number: var timeForE = Estimator.GetSecondsForMovement(deltaEPositionThisLine'  						feedRateMmPerMin / 60.0'  						maxAccelerationMmPerS2[3]'  						maxVelocityMmPerS[3]'  						velocitySameAsStopMmPerS[3]'  						speedMultiplier[3]);
Magic Number,MatterControl.Printing,GCodeMemoryFile,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\GCode\GCodeMemoryFile.cs,AnalyzeGCodeLines,The following statement contains a magic number: var timeForE = Estimator.GetSecondsForMovement(deltaEPositionThisLine'  						feedRateMmPerMin / 60.0'  						maxAccelerationMmPerS2[3]'  						maxVelocityMmPerS[3]'  						velocitySameAsStopMmPerS[3]'  						speedMultiplier[3]);
Magic Number,MatterControl.Printing,GCodeMemoryFile,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\GCode\GCodeMemoryFile.cs,AnalyzeGCodeLines,The following statement contains a magic number: var timeForE = Estimator.GetSecondsForMovement(deltaEPositionThisLine'  						feedRateMmPerMin / 60.0'  						maxAccelerationMmPerS2[3]'  						maxVelocityMmPerS[3]'  						velocitySameAsStopMmPerS[3]'  						speedMultiplier[3]);
Magic Number,MatterControl.Printing,GCodeMemoryFile,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\GCode\GCodeMemoryFile.cs,AnalyzeGCodeLines,The following statement contains a magic number: var timeForPosition = Estimator.GetSecondsForMovement(deltaPositionThisLine'  						feedRateMmPerMin / 60.0'  						new Vector3(maxAccelerationMmPerS2)'  						new Vector3(maxVelocityMmPerS)'  						new Vector3(velocitySameAsStopMmPerS)'  						new Vector3(speedMultiplier));
Magic Number,MatterControl.Printing,GCodeMemoryFile,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\GCode\GCodeMemoryFile.cs,AnalyzeGCodeLines,The following statement contains a magic number: progressReporter(((double)lineIndex / gCodeCommandQueue.Count / 2) + .5' "");
Magic Number,MatterControl.Printing,GCodeMemoryFile,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\GCode\GCodeMemoryFile.cs,AnalyzeGCodeLines,The following statement contains a magic number: progressReporter(((double)lineIndex / gCodeCommandQueue.Count / 2) + .5' "");
Magic Number,MatterControl.Printing,GCodeMemoryFile,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\GCode\GCodeMemoryFile.cs,AnalyzeGCodeLines,The following statement contains a magic number: progressReporter != null && maxProgressReport.ElapsedMilliseconds > 200
Magic Number,MatterControl.Printing,PrinterConnection,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\PrinterConnection.cs,PrinterConnection,The following statement contains a magic number: Task.Run(() =>  			{  				this.OnIdle();  				Thread.Sleep(10);  			});
Magic Number,MatterControl.Printing,PrinterConnection,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\PrinterConnection.cs,PrinterConnection,The following statement contains a magic number: printer.Settings.SettingChanged += (s' stringEvent) =>  			{  				var extruder = -1;  				switch (stringEvent.Data)  				{  					case SettingsKey.temperature:  						extruder = 0;  						break;    					case SettingsKey.temperature1:  						extruder = 1;  						break;    					case SettingsKey.temperature2:  						extruder = 2;  						break;    					case SettingsKey.temperature3:  						extruder = 3;  						break;  				}    				if (extruder > -1)  				{  					if (this.Printing  						&& (this.DetailedPrintingState == DetailedPrintingState.HeatingT0  							|| this.DetailedPrintingState == DetailedPrintingState.HeatingT1))  					{  					}  					else  					{  						double goalTemp = this.GetTargetHotendTemperature(extruder);  						if (goalTemp > 0)  						{  							var newGoal = printer.Settings.GetValue<double>(stringEvent.Data);  							this.SetTargetHotendTemperature(extruder' newGoal);  						}  					}  				}    				if (stringEvent.Data == SettingsKey.bed_temperature)  				{  					if (this.Printing  						&& this.DetailedPrintingState == DetailedPrintingState.HeatingBed)  					{  					}  					else  					{  						double goalTemp = this.TargetBedTemperature;  						if (goalTemp > 0)  						{  							var newGoal = printer.Settings.GetValue<double>(SettingsKey.bed_temperature);  							this.TargetBedTemperature = newGoal;  						}  					}  				}  			};
Magic Number,MatterControl.Printing,PrinterConnection,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\PrinterConnection.cs,PrinterConnection,The following statement contains a magic number: printer.Settings.SettingChanged += (s' stringEvent) =>  			{  				var extruder = -1;  				switch (stringEvent.Data)  				{  					case SettingsKey.temperature:  						extruder = 0;  						break;    					case SettingsKey.temperature1:  						extruder = 1;  						break;    					case SettingsKey.temperature2:  						extruder = 2;  						break;    					case SettingsKey.temperature3:  						extruder = 3;  						break;  				}    				if (extruder > -1)  				{  					if (this.Printing  						&& (this.DetailedPrintingState == DetailedPrintingState.HeatingT0  							|| this.DetailedPrintingState == DetailedPrintingState.HeatingT1))  					{  					}  					else  					{  						double goalTemp = this.GetTargetHotendTemperature(extruder);  						if (goalTemp > 0)  						{  							var newGoal = printer.Settings.GetValue<double>(stringEvent.Data);  							this.SetTargetHotendTemperature(extruder' newGoal);  						}  					}  				}    				if (stringEvent.Data == SettingsKey.bed_temperature)  				{  					if (this.Printing  						&& this.DetailedPrintingState == DetailedPrintingState.HeatingBed)  					{  					}  					else  					{  						double goalTemp = this.TargetBedTemperature;  						if (goalTemp > 0)  						{  							var newGoal = printer.Settings.GetValue<double>(SettingsKey.bed_temperature);  							this.TargetBedTemperature = newGoal;  						}  					}  				}  			};
Magic Number,MatterControl.Printing,PrinterConnection,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\PrinterConnection.cs,InitializeReadLineReplacements,The following statement contains a magic number: var search = matches[0].Value.Substring(1' matches[0].Value.Length - 2);
Magic Number,MatterControl.Printing,PrinterConnection,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\PrinterConnection.cs,InitializeReadLineReplacements,The following statement contains a magic number: var replace = matches[1].Value.Substring(1' matches[1].Value.Length - 2);
Magic Number,MatterControl.Printing,PrinterConnection,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\PrinterConnection.cs,InitializeReadLineReplacements,The following statement contains a magic number: matches.Count == 2
Magic Number,MatterControl.Printing,PrinterConnection,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\PrinterConnection.cs,BedTemperatureWasWritenToPrinter,The following statement contains a magic number: splitOnS.Length == 2
Magic Number,MatterControl.Printing,PrinterConnection,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\PrinterConnection.cs,FanSpeedWasWritenToPrinter,The following statement contains a magic number: splitOnS.Length != 2
Magic Number,MatterControl.Printing,PrinterConnection,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\PrinterConnection.cs,FanSpeedWasWritenToPrinter,The following statement contains a magic number: splitOnS.Length == 2
Magic Number,MatterControl.Printing,PrinterConnection,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\PrinterConnection.cs,PrinterStatesFirmware,The following statement contains a magic number: split.Length == 2
Magic Number,MatterControl.Printing,PrinterConnection,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\PrinterConnection.cs,ArduinoDtrReset,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,MatterControl.Printing,PrinterConnection,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\PrinterConnection.cs,ToggleHighLowHigh,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,MatterControl.Printing,PrinterConnection,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\PrinterConnection.cs,ToggleHighLowHigh,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,MatterControl.Printing,PrinterConnection,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\PrinterConnection.cs,CancelPrint,The following statement contains a magic number: Thread.Sleep(15);
Magic Number,MatterControl.Printing,PrinterConnection,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\PrinterConnection.cs,CreateStreamProcessors,The following statement contains a magic number: accumulatedStream = maxLengthStream = new MaxLengthStream(Printer' accumulatedStream' enableLineSplitting ? 1 : 2000);
Magic Number,MatterControl.Printing,PrinterConnection,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\PrinterConnection.cs,SyncProgressToDB,The following statement contains a magic number: timePrinting.Elapsed.TotalSeconds > 0  					&& gCodeFileSwitcher != null  					&& (secondsSinceUpdateHistory > secondsSinceStartedPrint  					|| secondsSinceUpdateHistory + 1 < secondsSinceStartedPrint  					|| lineSinceUpdateHistory + 20 < gCodeFileSwitcher.LineIndex)
Magic Number,MatterControl.Printing,PrinterConnection,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\PrinterConnection.cs,SyncProgressToDB,The following statement contains a magic number: Thread.Sleep(5);
Magic Number,MatterControl.Printing,PrinterConnection,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\PrinterConnection.cs,ExpectedWaitSeconds,The following statement contains a magic number: return 2 * timeMultiple;
Magic Number,MatterControl.Printing,PrinterConnection,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\PrinterConnection.cs,ExpectedWaitSeconds,The following statement contains a magic number: return 10 * timeMultiple;
Magic Number,MatterControl.Printing,PrinterConnection,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\PrinterConnection.cs,TryWriteNextLineFromGCodeFile,The following statement contains a magic number: (timeSinceLastReadAnything.Elapsed.TotalSeconds > 10 && timeSinceLastWrite.Elapsed.TotalSeconds > 30)  							|| timeHaveBeenWaitingForOK.Elapsed.TotalSeconds > ExpectedWaitSeconds(currentSentLine)
Magic Number,MatterControl.Printing,PrinterConnection,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\PrinterConnection.cs,TryWriteNextLineFromGCodeFile,The following statement contains a magic number: (timeSinceLastReadAnything.Elapsed.TotalSeconds > 10 && timeSinceLastWrite.Elapsed.TotalSeconds > 30)  							|| timeHaveBeenWaitingForOK.Elapsed.TotalSeconds > ExpectedWaitSeconds(currentSentLine)
Magic Number,MatterHackers.MatterControl.SlicerConfiguration.MappingClasses,AsCountOrDistance,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\MappingClasses\AsCountOrDistance.cs,Convert,The following statement contains a magic number: int layers = (int)(ParseDouble(withoutMm) / denominator + .5);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration.MappingClasses,AsPercentOfReferenceOrDirect,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\MappingClasses\AsPercentOfReferenceOrDirect.cs,Convert,The following statement contains a magic number: double ratio = ParseDouble(withoutPercent) / 100.0;
Magic Number,MatterHackers.MatterControl.SlicerConfiguration.MappingClasses,AsPercentOrDirect,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\MappingClasses\AsPercentOrDirect.cs,Convert,The following statement contains a magic number: finalValue = ParseDouble(withoutPercent) / 100.0;
Magic Number,MatterHackers.MatterControl.SlicerConfiguration.MappingClasses,AsPercentOrDirectFirst,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\MappingClasses\AsPercentOrDirectFirst.cs,Convert,The following statement contains a magic number: ratio = ParseDouble(withoutPercent) / 100.0;
Magic Number,MatterHackers.MatterControl.SlicerConfiguration.MappingClasses,InfillTranslator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\MappingClasses\InfillTranslator.cs,Convert,The following statement contains a magic number: double linespacing = 1000;
Magic Number,MatterHackers.MatterControl.SlicerConfiguration.MappingClasses,InfillTranslator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\MappingClasses\InfillTranslator.cs,Convert,The following statement contains a magic number: infillRatio0To1 > .01
Magic Number,MatterHackers.MatterControl.SlicerConfiguration.MappingClasses,InfillTranslator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\MappingClasses\InfillTranslator.cs,Convert,The following statement contains a magic number: return ((int)(linespacing * 1000)).ToString();
Magic Number,MatterHackers.MatterControl.SlicerConfiguration.MappingClasses,OverrideSpeedOnSlaPrinters,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\MappingClasses\OverrideSpeedOnSlaPrinters.cs,Convert,The following statement contains a magic number: var deltaHeight = .1 - .025;
Magic Number,MatterHackers.MatterControl.SlicerConfiguration.MappingClasses,OverrideSpeedOnSlaPrinters,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\MappingClasses\OverrideSpeedOnSlaPrinters.cs,Convert,The following statement contains a magic number: var deltaHeight = .1 - .025;
Magic Number,MatterHackers.MatterControl.SlicerConfiguration.MappingClasses,OverrideSpeedOnSlaPrinters,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\MappingClasses\OverrideSpeedOnSlaPrinters.cs,Convert,The following statement contains a magic number: var heightRatio = (layerHeight - .025) / deltaHeight;
Magic Number,MatterHackers.MatterControl.SlicerConfiguration.MappingClasses,Slice3rBedShape,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\MappingClasses\Slice3rBedShape.cs,Convert,The following statement contains a magic number: switch (settings.GetValue<BedShape>(SettingsKey.bed_shape))  			{  				case BedShape.Circular:  					{  						int numPoints = 10;  						double angle = MathHelper.Tau / numPoints;  						string bedString = "";  						bool first = true;  						for (int i = 0; i < numPoints; i++)  						{  							if (!first)  							{  								bedString += "'";  							}    							double x = Math.Cos(angle * i);  							double y = Math.Sin(angle * i);  							bedString += $"{printCenter.X + x * bedSize.X / 2:0.####}x{printCenter.Y + y * bedSize.Y / 2:0.####}";  							first = false;  						}    						return bedString;  					}    					// bed_shape = 99.4522x10.4528'97.8148x20.7912'95.1057x30.9017'91.3545x40.6737'86.6025x50'80.9017x58.7785'74.3145x66.9131'66.9131x74.3145'58.7785x80.9017'50x86.6025'40.6737x91.3545'30.9017x95.1057'20.7912x97.8148'10.4528x99.4522'0x100'-10.4528x99.4522'-20.7912x97.8148'-30.9017x95.1057'-40.6737x91.3545'-50x86.6025'-58.7785x80.9017'-66.9131x74.3145'-74.3145x66.9131'-80.9017x58.7785'-86.6025x50'-91.3545x40.6737'-95.1057x30.9017'-97.8148x20.7912'-99.4522x10.4528'-100x0'-99.4522x - 10.4528'-97.8148x - 20.7912'-95.1057x - 30.9017'-91.3545x - 40.6737'-86.6025x - 50'-80.9017x - 58.7785'-74.3145x - 66.9131'-66.9131x - 74.3145'-58.7785x - 80.9017'-50x - 86.6025'-40.6737x - 91.3545'-30.9017x - 95.1057'-20.7912x - 97.8148'-10.4528x - 99.4522'0x - 100'10.4528x - 99.4522'20.7912x - 97.8148'30.9017x - 95.1057'40.6737x - 91.3545'50x - 86.6025'58.7785x - 80.9017'66.9131x - 74.3145'74.3145x - 66.9131'80.9017x - 58.7785'86.6025x - 50'91.3545x - 40.6737'95.1057x - 30.9017'97.8148x - 20.7912'99.4522x - 10.4528'100x0    				case BedShape.Rectangular:  				default:  					{  						// bed_shape = 0x0'200x0'200x200'0x200  						string bedString = $"{printCenter.X - bedSize.X / 2}x{printCenter.Y - bedSize.Y / 2}";  						bedString += $"'{printCenter.X + bedSize.X / 2}x{printCenter.Y - bedSize.Y / 2}";  						bedString += $"'{printCenter.X + bedSize.X / 2}x{printCenter.Y + bedSize.Y / 2}";  						bedString += $"'{printCenter.X - bedSize.X / 2}x{printCenter.Y + bedSize.Y / 2}";    						return bedString;  					}  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration.MappingClasses,Slice3rBedShape,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\MappingClasses\Slice3rBedShape.cs,Convert,The following statement contains a magic number: switch (settings.GetValue<BedShape>(SettingsKey.bed_shape))  			{  				case BedShape.Circular:  					{  						int numPoints = 10;  						double angle = MathHelper.Tau / numPoints;  						string bedString = "";  						bool first = true;  						for (int i = 0; i < numPoints; i++)  						{  							if (!first)  							{  								bedString += "'";  							}    							double x = Math.Cos(angle * i);  							double y = Math.Sin(angle * i);  							bedString += $"{printCenter.X + x * bedSize.X / 2:0.####}x{printCenter.Y + y * bedSize.Y / 2:0.####}";  							first = false;  						}    						return bedString;  					}    					// bed_shape = 99.4522x10.4528'97.8148x20.7912'95.1057x30.9017'91.3545x40.6737'86.6025x50'80.9017x58.7785'74.3145x66.9131'66.9131x74.3145'58.7785x80.9017'50x86.6025'40.6737x91.3545'30.9017x95.1057'20.7912x97.8148'10.4528x99.4522'0x100'-10.4528x99.4522'-20.7912x97.8148'-30.9017x95.1057'-40.6737x91.3545'-50x86.6025'-58.7785x80.9017'-66.9131x74.3145'-74.3145x66.9131'-80.9017x58.7785'-86.6025x50'-91.3545x40.6737'-95.1057x30.9017'-97.8148x20.7912'-99.4522x10.4528'-100x0'-99.4522x - 10.4528'-97.8148x - 20.7912'-95.1057x - 30.9017'-91.3545x - 40.6737'-86.6025x - 50'-80.9017x - 58.7785'-74.3145x - 66.9131'-66.9131x - 74.3145'-58.7785x - 80.9017'-50x - 86.6025'-40.6737x - 91.3545'-30.9017x - 95.1057'-20.7912x - 97.8148'-10.4528x - 99.4522'0x - 100'10.4528x - 99.4522'20.7912x - 97.8148'30.9017x - 95.1057'40.6737x - 91.3545'50x - 86.6025'58.7785x - 80.9017'66.9131x - 74.3145'74.3145x - 66.9131'80.9017x - 58.7785'86.6025x - 50'91.3545x - 40.6737'95.1057x - 30.9017'97.8148x - 20.7912'99.4522x - 10.4528'100x0    				case BedShape.Rectangular:  				default:  					{  						// bed_shape = 0x0'200x0'200x200'0x200  						string bedString = $"{printCenter.X - bedSize.X / 2}x{printCenter.Y - bedSize.Y / 2}";  						bedString += $"'{printCenter.X + bedSize.X / 2}x{printCenter.Y - bedSize.Y / 2}";  						bedString += $"'{printCenter.X + bedSize.X / 2}x{printCenter.Y + bedSize.Y / 2}";  						bedString += $"'{printCenter.X - bedSize.X / 2}x{printCenter.Y + bedSize.Y / 2}";    						return bedString;  					}  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration.MappingClasses,Slice3rBedShape,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\MappingClasses\Slice3rBedShape.cs,Convert,The following statement contains a magic number: switch (settings.GetValue<BedShape>(SettingsKey.bed_shape))  			{  				case BedShape.Circular:  					{  						int numPoints = 10;  						double angle = MathHelper.Tau / numPoints;  						string bedString = "";  						bool first = true;  						for (int i = 0; i < numPoints; i++)  						{  							if (!first)  							{  								bedString += "'";  							}    							double x = Math.Cos(angle * i);  							double y = Math.Sin(angle * i);  							bedString += $"{printCenter.X + x * bedSize.X / 2:0.####}x{printCenter.Y + y * bedSize.Y / 2:0.####}";  							first = false;  						}    						return bedString;  					}    					// bed_shape = 99.4522x10.4528'97.8148x20.7912'95.1057x30.9017'91.3545x40.6737'86.6025x50'80.9017x58.7785'74.3145x66.9131'66.9131x74.3145'58.7785x80.9017'50x86.6025'40.6737x91.3545'30.9017x95.1057'20.7912x97.8148'10.4528x99.4522'0x100'-10.4528x99.4522'-20.7912x97.8148'-30.9017x95.1057'-40.6737x91.3545'-50x86.6025'-58.7785x80.9017'-66.9131x74.3145'-74.3145x66.9131'-80.9017x58.7785'-86.6025x50'-91.3545x40.6737'-95.1057x30.9017'-97.8148x20.7912'-99.4522x10.4528'-100x0'-99.4522x - 10.4528'-97.8148x - 20.7912'-95.1057x - 30.9017'-91.3545x - 40.6737'-86.6025x - 50'-80.9017x - 58.7785'-74.3145x - 66.9131'-66.9131x - 74.3145'-58.7785x - 80.9017'-50x - 86.6025'-40.6737x - 91.3545'-30.9017x - 95.1057'-20.7912x - 97.8148'-10.4528x - 99.4522'0x - 100'10.4528x - 99.4522'20.7912x - 97.8148'30.9017x - 95.1057'40.6737x - 91.3545'50x - 86.6025'58.7785x - 80.9017'66.9131x - 74.3145'74.3145x - 66.9131'80.9017x - 58.7785'86.6025x - 50'91.3545x - 40.6737'95.1057x - 30.9017'97.8148x - 20.7912'99.4522x - 10.4528'100x0    				case BedShape.Rectangular:  				default:  					{  						// bed_shape = 0x0'200x0'200x200'0x200  						string bedString = $"{printCenter.X - bedSize.X / 2}x{printCenter.Y - bedSize.Y / 2}";  						bedString += $"'{printCenter.X + bedSize.X / 2}x{printCenter.Y - bedSize.Y / 2}";  						bedString += $"'{printCenter.X + bedSize.X / 2}x{printCenter.Y + bedSize.Y / 2}";  						bedString += $"'{printCenter.X - bedSize.X / 2}x{printCenter.Y + bedSize.Y / 2}";    						return bedString;  					}  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration.MappingClasses,Slice3rBedShape,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\MappingClasses\Slice3rBedShape.cs,Convert,The following statement contains a magic number: switch (settings.GetValue<BedShape>(SettingsKey.bed_shape))  			{  				case BedShape.Circular:  					{  						int numPoints = 10;  						double angle = MathHelper.Tau / numPoints;  						string bedString = "";  						bool first = true;  						for (int i = 0; i < numPoints; i++)  						{  							if (!first)  							{  								bedString += "'";  							}    							double x = Math.Cos(angle * i);  							double y = Math.Sin(angle * i);  							bedString += $"{printCenter.X + x * bedSize.X / 2:0.####}x{printCenter.Y + y * bedSize.Y / 2:0.####}";  							first = false;  						}    						return bedString;  					}    					// bed_shape = 99.4522x10.4528'97.8148x20.7912'95.1057x30.9017'91.3545x40.6737'86.6025x50'80.9017x58.7785'74.3145x66.9131'66.9131x74.3145'58.7785x80.9017'50x86.6025'40.6737x91.3545'30.9017x95.1057'20.7912x97.8148'10.4528x99.4522'0x100'-10.4528x99.4522'-20.7912x97.8148'-30.9017x95.1057'-40.6737x91.3545'-50x86.6025'-58.7785x80.9017'-66.9131x74.3145'-74.3145x66.9131'-80.9017x58.7785'-86.6025x50'-91.3545x40.6737'-95.1057x30.9017'-97.8148x20.7912'-99.4522x10.4528'-100x0'-99.4522x - 10.4528'-97.8148x - 20.7912'-95.1057x - 30.9017'-91.3545x - 40.6737'-86.6025x - 50'-80.9017x - 58.7785'-74.3145x - 66.9131'-66.9131x - 74.3145'-58.7785x - 80.9017'-50x - 86.6025'-40.6737x - 91.3545'-30.9017x - 95.1057'-20.7912x - 97.8148'-10.4528x - 99.4522'0x - 100'10.4528x - 99.4522'20.7912x - 97.8148'30.9017x - 95.1057'40.6737x - 91.3545'50x - 86.6025'58.7785x - 80.9017'66.9131x - 74.3145'74.3145x - 66.9131'80.9017x - 58.7785'86.6025x - 50'91.3545x - 40.6737'95.1057x - 30.9017'97.8148x - 20.7912'99.4522x - 10.4528'100x0    				case BedShape.Rectangular:  				default:  					{  						// bed_shape = 0x0'200x0'200x200'0x200  						string bedString = $"{printCenter.X - bedSize.X / 2}x{printCenter.Y - bedSize.Y / 2}";  						bedString += $"'{printCenter.X + bedSize.X / 2}x{printCenter.Y - bedSize.Y / 2}";  						bedString += $"'{printCenter.X + bedSize.X / 2}x{printCenter.Y + bedSize.Y / 2}";  						bedString += $"'{printCenter.X - bedSize.X / 2}x{printCenter.Y + bedSize.Y / 2}";    						return bedString;  					}  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration.MappingClasses,Slice3rBedShape,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\MappingClasses\Slice3rBedShape.cs,Convert,The following statement contains a magic number: switch (settings.GetValue<BedShape>(SettingsKey.bed_shape))  			{  				case BedShape.Circular:  					{  						int numPoints = 10;  						double angle = MathHelper.Tau / numPoints;  						string bedString = "";  						bool first = true;  						for (int i = 0; i < numPoints; i++)  						{  							if (!first)  							{  								bedString += "'";  							}    							double x = Math.Cos(angle * i);  							double y = Math.Sin(angle * i);  							bedString += $"{printCenter.X + x * bedSize.X / 2:0.####}x{printCenter.Y + y * bedSize.Y / 2:0.####}";  							first = false;  						}    						return bedString;  					}    					// bed_shape = 99.4522x10.4528'97.8148x20.7912'95.1057x30.9017'91.3545x40.6737'86.6025x50'80.9017x58.7785'74.3145x66.9131'66.9131x74.3145'58.7785x80.9017'50x86.6025'40.6737x91.3545'30.9017x95.1057'20.7912x97.8148'10.4528x99.4522'0x100'-10.4528x99.4522'-20.7912x97.8148'-30.9017x95.1057'-40.6737x91.3545'-50x86.6025'-58.7785x80.9017'-66.9131x74.3145'-74.3145x66.9131'-80.9017x58.7785'-86.6025x50'-91.3545x40.6737'-95.1057x30.9017'-97.8148x20.7912'-99.4522x10.4528'-100x0'-99.4522x - 10.4528'-97.8148x - 20.7912'-95.1057x - 30.9017'-91.3545x - 40.6737'-86.6025x - 50'-80.9017x - 58.7785'-74.3145x - 66.9131'-66.9131x - 74.3145'-58.7785x - 80.9017'-50x - 86.6025'-40.6737x - 91.3545'-30.9017x - 95.1057'-20.7912x - 97.8148'-10.4528x - 99.4522'0x - 100'10.4528x - 99.4522'20.7912x - 97.8148'30.9017x - 95.1057'40.6737x - 91.3545'50x - 86.6025'58.7785x - 80.9017'66.9131x - 74.3145'74.3145x - 66.9131'80.9017x - 58.7785'86.6025x - 50'91.3545x - 40.6737'95.1057x - 30.9017'97.8148x - 20.7912'99.4522x - 10.4528'100x0    				case BedShape.Rectangular:  				default:  					{  						// bed_shape = 0x0'200x0'200x200'0x200  						string bedString = $"{printCenter.X - bedSize.X / 2}x{printCenter.Y - bedSize.Y / 2}";  						bedString += $"'{printCenter.X + bedSize.X / 2}x{printCenter.Y - bedSize.Y / 2}";  						bedString += $"'{printCenter.X + bedSize.X / 2}x{printCenter.Y + bedSize.Y / 2}";  						bedString += $"'{printCenter.X - bedSize.X / 2}x{printCenter.Y + bedSize.Y / 2}";    						return bedString;  					}  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration.MappingClasses,Slice3rBedShape,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\MappingClasses\Slice3rBedShape.cs,Convert,The following statement contains a magic number: switch (settings.GetValue<BedShape>(SettingsKey.bed_shape))  			{  				case BedShape.Circular:  					{  						int numPoints = 10;  						double angle = MathHelper.Tau / numPoints;  						string bedString = "";  						bool first = true;  						for (int i = 0; i < numPoints; i++)  						{  							if (!first)  							{  								bedString += "'";  							}    							double x = Math.Cos(angle * i);  							double y = Math.Sin(angle * i);  							bedString += $"{printCenter.X + x * bedSize.X / 2:0.####}x{printCenter.Y + y * bedSize.Y / 2:0.####}";  							first = false;  						}    						return bedString;  					}    					// bed_shape = 99.4522x10.4528'97.8148x20.7912'95.1057x30.9017'91.3545x40.6737'86.6025x50'80.9017x58.7785'74.3145x66.9131'66.9131x74.3145'58.7785x80.9017'50x86.6025'40.6737x91.3545'30.9017x95.1057'20.7912x97.8148'10.4528x99.4522'0x100'-10.4528x99.4522'-20.7912x97.8148'-30.9017x95.1057'-40.6737x91.3545'-50x86.6025'-58.7785x80.9017'-66.9131x74.3145'-74.3145x66.9131'-80.9017x58.7785'-86.6025x50'-91.3545x40.6737'-95.1057x30.9017'-97.8148x20.7912'-99.4522x10.4528'-100x0'-99.4522x - 10.4528'-97.8148x - 20.7912'-95.1057x - 30.9017'-91.3545x - 40.6737'-86.6025x - 50'-80.9017x - 58.7785'-74.3145x - 66.9131'-66.9131x - 74.3145'-58.7785x - 80.9017'-50x - 86.6025'-40.6737x - 91.3545'-30.9017x - 95.1057'-20.7912x - 97.8148'-10.4528x - 99.4522'0x - 100'10.4528x - 99.4522'20.7912x - 97.8148'30.9017x - 95.1057'40.6737x - 91.3545'50x - 86.6025'58.7785x - 80.9017'66.9131x - 74.3145'74.3145x - 66.9131'80.9017x - 58.7785'86.6025x - 50'91.3545x - 40.6737'95.1057x - 30.9017'97.8148x - 20.7912'99.4522x - 10.4528'100x0    				case BedShape.Rectangular:  				default:  					{  						// bed_shape = 0x0'200x0'200x200'0x200  						string bedString = $"{printCenter.X - bedSize.X / 2}x{printCenter.Y - bedSize.Y / 2}";  						bedString += $"'{printCenter.X + bedSize.X / 2}x{printCenter.Y - bedSize.Y / 2}";  						bedString += $"'{printCenter.X + bedSize.X / 2}x{printCenter.Y + bedSize.Y / 2}";  						bedString += $"'{printCenter.X - bedSize.X / 2}x{printCenter.Y + bedSize.Y / 2}";    						return bedString;  					}  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration.MappingClasses,Slice3rBedShape,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\MappingClasses\Slice3rBedShape.cs,Convert,The following statement contains a magic number: switch (settings.GetValue<BedShape>(SettingsKey.bed_shape))  			{  				case BedShape.Circular:  					{  						int numPoints = 10;  						double angle = MathHelper.Tau / numPoints;  						string bedString = "";  						bool first = true;  						for (int i = 0; i < numPoints; i++)  						{  							if (!first)  							{  								bedString += "'";  							}    							double x = Math.Cos(angle * i);  							double y = Math.Sin(angle * i);  							bedString += $"{printCenter.X + x * bedSize.X / 2:0.####}x{printCenter.Y + y * bedSize.Y / 2:0.####}";  							first = false;  						}    						return bedString;  					}    					// bed_shape = 99.4522x10.4528'97.8148x20.7912'95.1057x30.9017'91.3545x40.6737'86.6025x50'80.9017x58.7785'74.3145x66.9131'66.9131x74.3145'58.7785x80.9017'50x86.6025'40.6737x91.3545'30.9017x95.1057'20.7912x97.8148'10.4528x99.4522'0x100'-10.4528x99.4522'-20.7912x97.8148'-30.9017x95.1057'-40.6737x91.3545'-50x86.6025'-58.7785x80.9017'-66.9131x74.3145'-74.3145x66.9131'-80.9017x58.7785'-86.6025x50'-91.3545x40.6737'-95.1057x30.9017'-97.8148x20.7912'-99.4522x10.4528'-100x0'-99.4522x - 10.4528'-97.8148x - 20.7912'-95.1057x - 30.9017'-91.3545x - 40.6737'-86.6025x - 50'-80.9017x - 58.7785'-74.3145x - 66.9131'-66.9131x - 74.3145'-58.7785x - 80.9017'-50x - 86.6025'-40.6737x - 91.3545'-30.9017x - 95.1057'-20.7912x - 97.8148'-10.4528x - 99.4522'0x - 100'10.4528x - 99.4522'20.7912x - 97.8148'30.9017x - 95.1057'40.6737x - 91.3545'50x - 86.6025'58.7785x - 80.9017'66.9131x - 74.3145'74.3145x - 66.9131'80.9017x - 58.7785'86.6025x - 50'91.3545x - 40.6737'95.1057x - 30.9017'97.8148x - 20.7912'99.4522x - 10.4528'100x0    				case BedShape.Rectangular:  				default:  					{  						// bed_shape = 0x0'200x0'200x200'0x200  						string bedString = $"{printCenter.X - bedSize.X / 2}x{printCenter.Y - bedSize.Y / 2}";  						bedString += $"'{printCenter.X + bedSize.X / 2}x{printCenter.Y - bedSize.Y / 2}";  						bedString += $"'{printCenter.X + bedSize.X / 2}x{printCenter.Y + bedSize.Y / 2}";  						bedString += $"'{printCenter.X - bedSize.X / 2}x{printCenter.Y + bedSize.Y / 2}";    						return bedString;  					}  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration.MappingClasses,Slice3rBedShape,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\MappingClasses\Slice3rBedShape.cs,Convert,The following statement contains a magic number: switch (settings.GetValue<BedShape>(SettingsKey.bed_shape))  			{  				case BedShape.Circular:  					{  						int numPoints = 10;  						double angle = MathHelper.Tau / numPoints;  						string bedString = "";  						bool first = true;  						for (int i = 0; i < numPoints; i++)  						{  							if (!first)  							{  								bedString += "'";  							}    							double x = Math.Cos(angle * i);  							double y = Math.Sin(angle * i);  							bedString += $"{printCenter.X + x * bedSize.X / 2:0.####}x{printCenter.Y + y * bedSize.Y / 2:0.####}";  							first = false;  						}    						return bedString;  					}    					// bed_shape = 99.4522x10.4528'97.8148x20.7912'95.1057x30.9017'91.3545x40.6737'86.6025x50'80.9017x58.7785'74.3145x66.9131'66.9131x74.3145'58.7785x80.9017'50x86.6025'40.6737x91.3545'30.9017x95.1057'20.7912x97.8148'10.4528x99.4522'0x100'-10.4528x99.4522'-20.7912x97.8148'-30.9017x95.1057'-40.6737x91.3545'-50x86.6025'-58.7785x80.9017'-66.9131x74.3145'-74.3145x66.9131'-80.9017x58.7785'-86.6025x50'-91.3545x40.6737'-95.1057x30.9017'-97.8148x20.7912'-99.4522x10.4528'-100x0'-99.4522x - 10.4528'-97.8148x - 20.7912'-95.1057x - 30.9017'-91.3545x - 40.6737'-86.6025x - 50'-80.9017x - 58.7785'-74.3145x - 66.9131'-66.9131x - 74.3145'-58.7785x - 80.9017'-50x - 86.6025'-40.6737x - 91.3545'-30.9017x - 95.1057'-20.7912x - 97.8148'-10.4528x - 99.4522'0x - 100'10.4528x - 99.4522'20.7912x - 97.8148'30.9017x - 95.1057'40.6737x - 91.3545'50x - 86.6025'58.7785x - 80.9017'66.9131x - 74.3145'74.3145x - 66.9131'80.9017x - 58.7785'86.6025x - 50'91.3545x - 40.6737'95.1057x - 30.9017'97.8148x - 20.7912'99.4522x - 10.4528'100x0    				case BedShape.Rectangular:  				default:  					{  						// bed_shape = 0x0'200x0'200x200'0x200  						string bedString = $"{printCenter.X - bedSize.X / 2}x{printCenter.Y - bedSize.Y / 2}";  						bedString += $"'{printCenter.X + bedSize.X / 2}x{printCenter.Y - bedSize.Y / 2}";  						bedString += $"'{printCenter.X + bedSize.X / 2}x{printCenter.Y + bedSize.Y / 2}";  						bedString += $"'{printCenter.X - bedSize.X / 2}x{printCenter.Y + bedSize.Y / 2}";    						return bedString;  					}  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration.MappingClasses,Slice3rBedShape,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\MappingClasses\Slice3rBedShape.cs,Convert,The following statement contains a magic number: switch (settings.GetValue<BedShape>(SettingsKey.bed_shape))  			{  				case BedShape.Circular:  					{  						int numPoints = 10;  						double angle = MathHelper.Tau / numPoints;  						string bedString = "";  						bool first = true;  						for (int i = 0; i < numPoints; i++)  						{  							if (!first)  							{  								bedString += "'";  							}    							double x = Math.Cos(angle * i);  							double y = Math.Sin(angle * i);  							bedString += $"{printCenter.X + x * bedSize.X / 2:0.####}x{printCenter.Y + y * bedSize.Y / 2:0.####}";  							first = false;  						}    						return bedString;  					}    					// bed_shape = 99.4522x10.4528'97.8148x20.7912'95.1057x30.9017'91.3545x40.6737'86.6025x50'80.9017x58.7785'74.3145x66.9131'66.9131x74.3145'58.7785x80.9017'50x86.6025'40.6737x91.3545'30.9017x95.1057'20.7912x97.8148'10.4528x99.4522'0x100'-10.4528x99.4522'-20.7912x97.8148'-30.9017x95.1057'-40.6737x91.3545'-50x86.6025'-58.7785x80.9017'-66.9131x74.3145'-74.3145x66.9131'-80.9017x58.7785'-86.6025x50'-91.3545x40.6737'-95.1057x30.9017'-97.8148x20.7912'-99.4522x10.4528'-100x0'-99.4522x - 10.4528'-97.8148x - 20.7912'-95.1057x - 30.9017'-91.3545x - 40.6737'-86.6025x - 50'-80.9017x - 58.7785'-74.3145x - 66.9131'-66.9131x - 74.3145'-58.7785x - 80.9017'-50x - 86.6025'-40.6737x - 91.3545'-30.9017x - 95.1057'-20.7912x - 97.8148'-10.4528x - 99.4522'0x - 100'10.4528x - 99.4522'20.7912x - 97.8148'30.9017x - 95.1057'40.6737x - 91.3545'50x - 86.6025'58.7785x - 80.9017'66.9131x - 74.3145'74.3145x - 66.9131'80.9017x - 58.7785'86.6025x - 50'91.3545x - 40.6737'95.1057x - 30.9017'97.8148x - 20.7912'99.4522x - 10.4528'100x0    				case BedShape.Rectangular:  				default:  					{  						// bed_shape = 0x0'200x0'200x200'0x200  						string bedString = $"{printCenter.X - bedSize.X / 2}x{printCenter.Y - bedSize.Y / 2}";  						bedString += $"'{printCenter.X + bedSize.X / 2}x{printCenter.Y - bedSize.Y / 2}";  						bedString += $"'{printCenter.X + bedSize.X / 2}x{printCenter.Y + bedSize.Y / 2}";  						bedString += $"'{printCenter.X - bedSize.X / 2}x{printCenter.Y + bedSize.Y / 2}";    						return bedString;  					}  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration.MappingClasses,Slice3rBedShape,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\MappingClasses\Slice3rBedShape.cs,Convert,The following statement contains a magic number: switch (settings.GetValue<BedShape>(SettingsKey.bed_shape))  			{  				case BedShape.Circular:  					{  						int numPoints = 10;  						double angle = MathHelper.Tau / numPoints;  						string bedString = "";  						bool first = true;  						for (int i = 0; i < numPoints; i++)  						{  							if (!first)  							{  								bedString += "'";  							}    							double x = Math.Cos(angle * i);  							double y = Math.Sin(angle * i);  							bedString += $"{printCenter.X + x * bedSize.X / 2:0.####}x{printCenter.Y + y * bedSize.Y / 2:0.####}";  							first = false;  						}    						return bedString;  					}    					// bed_shape = 99.4522x10.4528'97.8148x20.7912'95.1057x30.9017'91.3545x40.6737'86.6025x50'80.9017x58.7785'74.3145x66.9131'66.9131x74.3145'58.7785x80.9017'50x86.6025'40.6737x91.3545'30.9017x95.1057'20.7912x97.8148'10.4528x99.4522'0x100'-10.4528x99.4522'-20.7912x97.8148'-30.9017x95.1057'-40.6737x91.3545'-50x86.6025'-58.7785x80.9017'-66.9131x74.3145'-74.3145x66.9131'-80.9017x58.7785'-86.6025x50'-91.3545x40.6737'-95.1057x30.9017'-97.8148x20.7912'-99.4522x10.4528'-100x0'-99.4522x - 10.4528'-97.8148x - 20.7912'-95.1057x - 30.9017'-91.3545x - 40.6737'-86.6025x - 50'-80.9017x - 58.7785'-74.3145x - 66.9131'-66.9131x - 74.3145'-58.7785x - 80.9017'-50x - 86.6025'-40.6737x - 91.3545'-30.9017x - 95.1057'-20.7912x - 97.8148'-10.4528x - 99.4522'0x - 100'10.4528x - 99.4522'20.7912x - 97.8148'30.9017x - 95.1057'40.6737x - 91.3545'50x - 86.6025'58.7785x - 80.9017'66.9131x - 74.3145'74.3145x - 66.9131'80.9017x - 58.7785'86.6025x - 50'91.3545x - 40.6737'95.1057x - 30.9017'97.8148x - 20.7912'99.4522x - 10.4528'100x0    				case BedShape.Rectangular:  				default:  					{  						// bed_shape = 0x0'200x0'200x200'0x200  						string bedString = $"{printCenter.X - bedSize.X / 2}x{printCenter.Y - bedSize.Y / 2}";  						bedString += $"'{printCenter.X + bedSize.X / 2}x{printCenter.Y - bedSize.Y / 2}";  						bedString += $"'{printCenter.X + bedSize.X / 2}x{printCenter.Y + bedSize.Y / 2}";  						bedString += $"'{printCenter.X - bedSize.X / 2}x{printCenter.Y + bedSize.Y / 2}";    						return bedString;  					}  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration.MappingClasses,Slice3rBedShape,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\MappingClasses\Slice3rBedShape.cs,Convert,The following statement contains a magic number: switch (settings.GetValue<BedShape>(SettingsKey.bed_shape))  			{  				case BedShape.Circular:  					{  						int numPoints = 10;  						double angle = MathHelper.Tau / numPoints;  						string bedString = "";  						bool first = true;  						for (int i = 0; i < numPoints; i++)  						{  							if (!first)  							{  								bedString += "'";  							}    							double x = Math.Cos(angle * i);  							double y = Math.Sin(angle * i);  							bedString += $"{printCenter.X + x * bedSize.X / 2:0.####}x{printCenter.Y + y * bedSize.Y / 2:0.####}";  							first = false;  						}    						return bedString;  					}    					// bed_shape = 99.4522x10.4528'97.8148x20.7912'95.1057x30.9017'91.3545x40.6737'86.6025x50'80.9017x58.7785'74.3145x66.9131'66.9131x74.3145'58.7785x80.9017'50x86.6025'40.6737x91.3545'30.9017x95.1057'20.7912x97.8148'10.4528x99.4522'0x100'-10.4528x99.4522'-20.7912x97.8148'-30.9017x95.1057'-40.6737x91.3545'-50x86.6025'-58.7785x80.9017'-66.9131x74.3145'-74.3145x66.9131'-80.9017x58.7785'-86.6025x50'-91.3545x40.6737'-95.1057x30.9017'-97.8148x20.7912'-99.4522x10.4528'-100x0'-99.4522x - 10.4528'-97.8148x - 20.7912'-95.1057x - 30.9017'-91.3545x - 40.6737'-86.6025x - 50'-80.9017x - 58.7785'-74.3145x - 66.9131'-66.9131x - 74.3145'-58.7785x - 80.9017'-50x - 86.6025'-40.6737x - 91.3545'-30.9017x - 95.1057'-20.7912x - 97.8148'-10.4528x - 99.4522'0x - 100'10.4528x - 99.4522'20.7912x - 97.8148'30.9017x - 95.1057'40.6737x - 91.3545'50x - 86.6025'58.7785x - 80.9017'66.9131x - 74.3145'74.3145x - 66.9131'80.9017x - 58.7785'86.6025x - 50'91.3545x - 40.6737'95.1057x - 30.9017'97.8148x - 20.7912'99.4522x - 10.4528'100x0    				case BedShape.Rectangular:  				default:  					{  						// bed_shape = 0x0'200x0'200x200'0x200  						string bedString = $"{printCenter.X - bedSize.X / 2}x{printCenter.Y - bedSize.Y / 2}";  						bedString += $"'{printCenter.X + bedSize.X / 2}x{printCenter.Y - bedSize.Y / 2}";  						bedString += $"'{printCenter.X + bedSize.X / 2}x{printCenter.Y + bedSize.Y / 2}";  						bedString += $"'{printCenter.X - bedSize.X / 2}x{printCenter.Y + bedSize.Y / 2}";    						return bedString;  					}  			}
Magic Number,MatterHackers.PrinterEmulator,Emulator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\Emulator\Emulator.cs,GetCorrectResponse,The following statement contains a magic number: var timeToMove_ms = (long)(length / FeedRate * 1000.0 * 60.5);
Magic Number,MatterHackers.PrinterEmulator,Emulator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\Emulator\Emulator.cs,GetCorrectResponse,The following statement contains a magic number: var timeToMove_ms = (long)(length / FeedRate * 1000.0 * 60.5);
Magic Number,MatterHackers.PrinterEmulator,Emulator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\Emulator\Emulator.cs,ProbePosition,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,MatterHackers.PrinterEmulator,Emulator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\Emulator\Emulator.cs,ParseChecksumLine,The following statement contains a magic number: SimulateLineErrors && (recievedCount % 11) == 0
Magic Number,MatterHackers.PrinterEmulator,Emulator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\Emulator\Emulator.cs,EnsureExtruderCount,The following statement contains a magic number: newList.Add(new Heater($"Hotend{i}") { CurrentTemperature = 27 });
Magic Number,MatterHackers.PrinterEmulator,Emulator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\Emulator\Emulator.cs,EnsureExtruderCount,The following statement contains a magic number: i < index + 2
Magic Number,MatterHackers.PrinterEmulator,Emulator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\Emulator\Emulator.cs,ParseMovmentCommand,The following statement contains a magic number: newPosition.Y < 30
Magic Number,MatterHackers.PrinterEmulator,Emulator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\Emulator\Emulator.cs,Wait,The following statement contains a magic number: timeToWait /= 1000;
Magic Number,MatterHackers.PrinterEmulator,Emulator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\Emulator\Emulator.cs,Wait,The following statement contains a magic number: Thread.Sleep((int)(timeToWait * 1000));
Magic Number,MatterHackers.PrinterEmulator,Emulator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\Emulator\Emulator.cs,Open,The following statement contains a magic number: this.ReadTimeout = 500;
Magic Number,MatterHackers.PrinterEmulator,Emulator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\Emulator\Emulator.cs,Open,The following statement contains a magic number: this.WriteTimeout = 500;
Magic Number,MatterHackers.PrinterEmulator,Emulator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\Emulator\Emulator.cs,Open,The following statement contains a magic number: Task.Run(() =>  			{  				Thread.CurrentThread.Name = "EmulatorDtr";  				while (!shuttingDown)  				{  					if (this.DtrEnable != DsrState)  					{  						DsrState = this.DtrEnable;  						DsrChangeCount++;  					}    					Thread.Sleep(10);  				}  			});
Magic Number,MatterHackers.PrinterEmulator,Emulator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\Emulator\Emulator.cs,Open,The following statement contains a magic number: Task.Run(() =>  			{  				Thread.CurrentThread.Name = "EmulatorPipeline";    				while (!shuttingDown || receiveQueue.Count > 0)  				{  					if (receiveQueue.Count == 0)  					{  						if (shuttingDown)  						{  							return;  						}    						receiveResetEvent.WaitOne();  					}    					if (receiveQueue.Count == 0)  					{  						if (shuttingDown)  						{  							return;  						}    						Thread.Sleep(10);  					}  					else  					{  						string receivedLine;    						lock (receiveLock)  						{  							receivedLine = receiveQueue.Dequeue();  						}    						if (receivedLine?.Length > 0)  						{  							// Thread.Sleep(250);  							string emulatedResponse = GetCorrectResponse(receivedLine);    							lock (sendLock)  							{  								sendQueue.Enqueue(emulatedResponse);  							}  						}  					}  				}    				this.IsOpen = false;    				this.Dispose();  			});
Magic Number,MatterHackers.PrinterEmulator,Heater,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\Emulator\Heater.cs,Heater,The following statement contains a magic number: Task.Run(() =>  			{  				Thread.CurrentThread.Name = $"EmulatorHeator{identifier}";    				var random = new Random();    				double requiredLoops = 0;  				double incrementPerLoop = 0;    				while (!shutdown)  				{  					if (this.Enabled  						&& targetTemp > 0)  					{  						if (this.isDirty)  						{  							requiredLoops = this.HeatUpTimeInSeconds * 1000 / loopTimeInMs;  							incrementPerLoop = TargetTemperature / requiredLoops;  						}    						if (CurrentTemperature < targetTemp)  						{  							CurrentTemperature += incrementPerLoop;  						}  						else if (CurrentTemperature != targetTemp)  						{  							CurrentTemperature = targetTemp;  						}  					}    					// Try catch this so that if the program exits while this thread is active we don't throw  					// This fixes the DualExtrusionShowsCorrectHotendData test  					try  					{  						Thread.Sleep(loopTimeInMs);  					}  					catch  					{  					}  				}  			});
Magic Number,TcpipDriver,TcpipSerialPort,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\TCPIP\TcpipSerialPort.cs,TcpipSerialPort,The following statement contains a magic number: readBuffer = new byte[1024];
Magic Number,TcpipDriver,TcpipSerialPort,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\TCPIP\TcpipSerialPort.cs,Open,The following statement contains a magic number: int timeoutMs = 8000;
Magic Number,TcpipDriver,TcpipSerialPort,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\TCPIP\TcpipSerialPort.cs,Reconnect,The following statement contains a magic number: i < 5
Magic Number,TcpipDriver,TcpipSerialPort,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\TCPIP\TcpipSerialPort.cs,SetBaudRate,The following statement contains a magic number: byte[] bytes = new byte[] { IAC' SB' ComPortOpt' SetBaud' baudBytes[0]' baudBytes[1]' baudBytes[2]' baudBytes[3]' IAC' SE };
Magic Number,TcpipDriver,TcpipSerialPort,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\TCPIP\TcpipSerialPort.cs,SetBaudRate,The following statement contains a magic number: byte[] bytes = new byte[] { IAC' SB' ComPortOpt' SetBaud' baudBytes[0]' baudBytes[1]' baudBytes[2]' baudBytes[3]' IAC' SE };
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GCrc,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GCrc.cs,update,The following statement contains a magic number: i < 8
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GPrinterDetails,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GPrinterDetails.cs,X3GPrinterDetails,The following statement contains a magic number: positionalOffset = new Vector3(285' 150' 0);
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GPrinterDetails,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GPrinterDetails.cs,X3GPrinterDetails,The following statement contains a magic number: positionalOffset = new Vector3(285' 150' 0);
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GPrinterDetails,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GPrinterDetails.cs,X3GPrinterDetails,The following statement contains a magic number: stepsPerMm = new Vector3(88.8' 88.8' 400);
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GPrinterDetails,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GPrinterDetails.cs,X3GPrinterDetails,The following statement contains a magic number: stepsPerMm = new Vector3(88.8' 88.8' 400);
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GPrinterDetails,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GPrinterDetails.cs,X3GPrinterDetails,The following statement contains a magic number: stepsPerMm = new Vector3(88.8' 88.8' 400);
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GPrinterDetails,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GPrinterDetails.cs,X3GPrinterDetails,The following statement contains a magic number: extruderStepsPerMm = 101;
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GPrinterDetails,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GPrinterDetails.cs,X3GPrinterDetails,The following statement contains a magic number: homingFeedRate = new Vector3(300' 300' 400);
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GPrinterDetails,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GPrinterDetails.cs,X3GPrinterDetails,The following statement contains a magic number: homingFeedRate = new Vector3(300' 300' 400);
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GPrinterDetails,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GPrinterDetails.cs,X3GPrinterDetails,The following statement contains a magic number: homingFeedRate = new Vector3(300' 300' 400);
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GPrinterDetails,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GPrinterDetails.cs,X3GPrinterDetails,The following statement contains a magic number: targetExtruderTemps = new int[2];
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GPacketAnalyzer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GReader.cs,analyze,The following statement contains a magic number: checkCrc(payloadLength + 2);
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GPacketAnalyzer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GReader.cs,analyzePayload,The following statement contains a magic number: switch (response[2])  				{  					case 0x81:  						payloadStrBuilder.Append("ok");  						commandOK = true;  						break;  					case 0x80:  						payloadStrBuilder.Append("Generic Packet Error' packet discarded");  						break;  					case 0x83:  						payloadStrBuilder.Append("CRC mismatch' packet discarded\n");  						payloadStrBuilder.Append("RS:" + X3GWriter.lineNumber + "\n");  						payloadStrBuilder.Append("ok");  						break;  					case 0x88:  						payloadStrBuilder.Append("Tool lock Timeout");  						break;  					case 0x89:  						payloadStrBuilder.Append("Cancel Build");  						break;  					case 0x8C:  						payloadStrBuilder.Append("Packet timeout error' packet discarded");  						payloadStrBuilder.Append("RS:" + X3GWriter.lineNumber + "\n");  						payloadStrBuilder.Append("ok");  						break;  					case 0x82://Action Buffer overflow' Packet Discarded (currently will request resend of line' later should be avoided by checking buffer size before send)  						payloadStrBuilder.Append("Action Buffer overflow' Packet Discarded\n");  						payloadStrBuilder.Append("RS:" + X3GWriter.lineNumber + "\n");  						payloadStrBuilder.Append("ok");  						break;  					case 0x84:  						payloadStrBuilder.Append("Query Packet too big' packet discarded");  						break;  					case 0x85:  						payloadStrBuilder.Append("Command not supported/recognized");  						break;  					case 0x87:  						payloadStrBuilder.Append("Downstream timeout");  						break;  					case 0x8A:  						payloadStrBuilder.Append("Bot is Building from SD");  						break;  					case 0x8B:  						payloadStrBuilder.Append("Bot is Shutdown due to Overheat");  						break;  					default:  						payloadStrBuilder.Append("Command Failed: " + response[2]);  						break;  				}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GPacketAnalyzer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GReader.cs,analyzePayload,The following statement contains a magic number: switch (response[2])  				{  					case 0x81:  						payloadStrBuilder.Append("ok");  						commandOK = true;  						break;  					case 0x80:  						payloadStrBuilder.Append("Generic Packet Error' packet discarded");  						break;  					case 0x83:  						payloadStrBuilder.Append("CRC mismatch' packet discarded\n");  						payloadStrBuilder.Append("RS:" + X3GWriter.lineNumber + "\n");  						payloadStrBuilder.Append("ok");  						break;  					case 0x88:  						payloadStrBuilder.Append("Tool lock Timeout");  						break;  					case 0x89:  						payloadStrBuilder.Append("Cancel Build");  						break;  					case 0x8C:  						payloadStrBuilder.Append("Packet timeout error' packet discarded");  						payloadStrBuilder.Append("RS:" + X3GWriter.lineNumber + "\n");  						payloadStrBuilder.Append("ok");  						break;  					case 0x82://Action Buffer overflow' Packet Discarded (currently will request resend of line' later should be avoided by checking buffer size before send)  						payloadStrBuilder.Append("Action Buffer overflow' Packet Discarded\n");  						payloadStrBuilder.Append("RS:" + X3GWriter.lineNumber + "\n");  						payloadStrBuilder.Append("ok");  						break;  					case 0x84:  						payloadStrBuilder.Append("Query Packet too big' packet discarded");  						break;  					case 0x85:  						payloadStrBuilder.Append("Command not supported/recognized");  						break;  					case 0x87:  						payloadStrBuilder.Append("Downstream timeout");  						break;  					case 0x8A:  						payloadStrBuilder.Append("Bot is Building from SD");  						break;  					case 0x8B:  						payloadStrBuilder.Append("Bot is Shutdown due to Overheat");  						break;  					default:  						payloadStrBuilder.Append("Command Failed: " + response[2]);  						break;  				}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GPacketAnalyzer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GReader.cs,analyzePayload,The following statement contains a magic number: switch (payloadLength)  				{  					case 23: //22 is the length of the get position response + 1 for response code  						if (printerDetails.currentPosition.Length != 0)//if we are not connecting just now to the printer we will report back the target move position  						{  							Vector3 printerPos = printerDetails.targetMovePosition;  							payloadStrBuilder.Append(String.Format(" C: X:{0} Y:{1} Z:{2} E:{3}"' printerPos.X' printerPos.Y' printerPos.Z' 0));  						}  						else//if we have not told the printer to move yet we get the location the printer actually thinks it is at  						{  							Vector3 posFromPrinter = new Vector3();  							posFromPrinter.X = translateInt32(3);  							posFromPrinter.Y = translateInt32(7);  							posFromPrinter.Z = translateInt32(11);    							posFromPrinter.X = posFromPrinter.X / printerDetails.stepsPerMm.X;  							posFromPrinter.Y = posFromPrinter.Y / printerDetails.stepsPerMm.Y;  							posFromPrinter.Z = posFromPrinter.Z / printerDetails.stepsPerMm.Z;    							payloadStrBuilder.Append(String.Format(" C: X:{0} Y:{1} Z:{2} E:{3}"' posFromPrinter.X' posFromPrinter.Y' posFromPrinter.Z' 0));  						}    						break;  					case 3: //Length of temperature response' temperature is requested individually for each extruder and bed separately. This collects the information and condenses it into one response to be sent to the printer  						if (!gCommandForResponse.Contains("M115"))  						{  							int temperature = translateInt16(3);  							printerDetails.teperatureResponseCount++;    							if (printerDetails.teperatureResponseCount == 1)  							{  								if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  								{  									temperatureResponseStrBuilder.Append(String.Format(" T0:{0}"' temperature));  								}  								else  								{  									temperatureResponseStrBuilder.Append(String.Format(" T:{0}"' temperature));  								}  							}  							else if (printerDetails.teperatureResponseCount == 2 && settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								temperatureResponseStrBuilder.Append(String.Format(" B:{0}"' temperature));  							}  							else  							{  								temperatureResponseStrBuilder.Append(String.Format(" T1:{0}"' temperature));  							}    							if (printerDetails.teperatureResponseCount == printerDetails.requiredTemperatureResponseCount)  							{  								payloadStrBuilder.Append(temperatureResponseStrBuilder.ToString());  								temperatureResponseStrBuilder.Clear();  								printerDetails.teperatureResponseCount = 0;  							}  						}  						break;  				}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GPacketAnalyzer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GReader.cs,analyzePayload,The following statement contains a magic number: switch (payloadLength)  				{  					case 23: //22 is the length of the get position response + 1 for response code  						if (printerDetails.currentPosition.Length != 0)//if we are not connecting just now to the printer we will report back the target move position  						{  							Vector3 printerPos = printerDetails.targetMovePosition;  							payloadStrBuilder.Append(String.Format(" C: X:{0} Y:{1} Z:{2} E:{3}"' printerPos.X' printerPos.Y' printerPos.Z' 0));  						}  						else//if we have not told the printer to move yet we get the location the printer actually thinks it is at  						{  							Vector3 posFromPrinter = new Vector3();  							posFromPrinter.X = translateInt32(3);  							posFromPrinter.Y = translateInt32(7);  							posFromPrinter.Z = translateInt32(11);    							posFromPrinter.X = posFromPrinter.X / printerDetails.stepsPerMm.X;  							posFromPrinter.Y = posFromPrinter.Y / printerDetails.stepsPerMm.Y;  							posFromPrinter.Z = posFromPrinter.Z / printerDetails.stepsPerMm.Z;    							payloadStrBuilder.Append(String.Format(" C: X:{0} Y:{1} Z:{2} E:{3}"' posFromPrinter.X' posFromPrinter.Y' posFromPrinter.Z' 0));  						}    						break;  					case 3: //Length of temperature response' temperature is requested individually for each extruder and bed separately. This collects the information and condenses it into one response to be sent to the printer  						if (!gCommandForResponse.Contains("M115"))  						{  							int temperature = translateInt16(3);  							printerDetails.teperatureResponseCount++;    							if (printerDetails.teperatureResponseCount == 1)  							{  								if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  								{  									temperatureResponseStrBuilder.Append(String.Format(" T0:{0}"' temperature));  								}  								else  								{  									temperatureResponseStrBuilder.Append(String.Format(" T:{0}"' temperature));  								}  							}  							else if (printerDetails.teperatureResponseCount == 2 && settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								temperatureResponseStrBuilder.Append(String.Format(" B:{0}"' temperature));  							}  							else  							{  								temperatureResponseStrBuilder.Append(String.Format(" T1:{0}"' temperature));  							}    							if (printerDetails.teperatureResponseCount == printerDetails.requiredTemperatureResponseCount)  							{  								payloadStrBuilder.Append(temperatureResponseStrBuilder.ToString());  								temperatureResponseStrBuilder.Clear();  								printerDetails.teperatureResponseCount = 0;  							}  						}  						break;  				}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GPacketAnalyzer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GReader.cs,analyzePayload,The following statement contains a magic number: switch (payloadLength)  				{  					case 23: //22 is the length of the get position response + 1 for response code  						if (printerDetails.currentPosition.Length != 0)//if we are not connecting just now to the printer we will report back the target move position  						{  							Vector3 printerPos = printerDetails.targetMovePosition;  							payloadStrBuilder.Append(String.Format(" C: X:{0} Y:{1} Z:{2} E:{3}"' printerPos.X' printerPos.Y' printerPos.Z' 0));  						}  						else//if we have not told the printer to move yet we get the location the printer actually thinks it is at  						{  							Vector3 posFromPrinter = new Vector3();  							posFromPrinter.X = translateInt32(3);  							posFromPrinter.Y = translateInt32(7);  							posFromPrinter.Z = translateInt32(11);    							posFromPrinter.X = posFromPrinter.X / printerDetails.stepsPerMm.X;  							posFromPrinter.Y = posFromPrinter.Y / printerDetails.stepsPerMm.Y;  							posFromPrinter.Z = posFromPrinter.Z / printerDetails.stepsPerMm.Z;    							payloadStrBuilder.Append(String.Format(" C: X:{0} Y:{1} Z:{2} E:{3}"' posFromPrinter.X' posFromPrinter.Y' posFromPrinter.Z' 0));  						}    						break;  					case 3: //Length of temperature response' temperature is requested individually for each extruder and bed separately. This collects the information and condenses it into one response to be sent to the printer  						if (!gCommandForResponse.Contains("M115"))  						{  							int temperature = translateInt16(3);  							printerDetails.teperatureResponseCount++;    							if (printerDetails.teperatureResponseCount == 1)  							{  								if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  								{  									temperatureResponseStrBuilder.Append(String.Format(" T0:{0}"' temperature));  								}  								else  								{  									temperatureResponseStrBuilder.Append(String.Format(" T:{0}"' temperature));  								}  							}  							else if (printerDetails.teperatureResponseCount == 2 && settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								temperatureResponseStrBuilder.Append(String.Format(" B:{0}"' temperature));  							}  							else  							{  								temperatureResponseStrBuilder.Append(String.Format(" T1:{0}"' temperature));  							}    							if (printerDetails.teperatureResponseCount == printerDetails.requiredTemperatureResponseCount)  							{  								payloadStrBuilder.Append(temperatureResponseStrBuilder.ToString());  								temperatureResponseStrBuilder.Clear();  								printerDetails.teperatureResponseCount = 0;  							}  						}  						break;  				}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GPacketAnalyzer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GReader.cs,analyzePayload,The following statement contains a magic number: switch (payloadLength)  				{  					case 23: //22 is the length of the get position response + 1 for response code  						if (printerDetails.currentPosition.Length != 0)//if we are not connecting just now to the printer we will report back the target move position  						{  							Vector3 printerPos = printerDetails.targetMovePosition;  							payloadStrBuilder.Append(String.Format(" C: X:{0} Y:{1} Z:{2} E:{3}"' printerPos.X' printerPos.Y' printerPos.Z' 0));  						}  						else//if we have not told the printer to move yet we get the location the printer actually thinks it is at  						{  							Vector3 posFromPrinter = new Vector3();  							posFromPrinter.X = translateInt32(3);  							posFromPrinter.Y = translateInt32(7);  							posFromPrinter.Z = translateInt32(11);    							posFromPrinter.X = posFromPrinter.X / printerDetails.stepsPerMm.X;  							posFromPrinter.Y = posFromPrinter.Y / printerDetails.stepsPerMm.Y;  							posFromPrinter.Z = posFromPrinter.Z / printerDetails.stepsPerMm.Z;    							payloadStrBuilder.Append(String.Format(" C: X:{0} Y:{1} Z:{2} E:{3}"' posFromPrinter.X' posFromPrinter.Y' posFromPrinter.Z' 0));  						}    						break;  					case 3: //Length of temperature response' temperature is requested individually for each extruder and bed separately. This collects the information and condenses it into one response to be sent to the printer  						if (!gCommandForResponse.Contains("M115"))  						{  							int temperature = translateInt16(3);  							printerDetails.teperatureResponseCount++;    							if (printerDetails.teperatureResponseCount == 1)  							{  								if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  								{  									temperatureResponseStrBuilder.Append(String.Format(" T0:{0}"' temperature));  								}  								else  								{  									temperatureResponseStrBuilder.Append(String.Format(" T:{0}"' temperature));  								}  							}  							else if (printerDetails.teperatureResponseCount == 2 && settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								temperatureResponseStrBuilder.Append(String.Format(" B:{0}"' temperature));  							}  							else  							{  								temperatureResponseStrBuilder.Append(String.Format(" T1:{0}"' temperature));  							}    							if (printerDetails.teperatureResponseCount == printerDetails.requiredTemperatureResponseCount)  							{  								payloadStrBuilder.Append(temperatureResponseStrBuilder.ToString());  								temperatureResponseStrBuilder.Clear();  								printerDetails.teperatureResponseCount = 0;  							}  						}  						break;  				}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GPacketAnalyzer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GReader.cs,analyzePayload,The following statement contains a magic number: switch (payloadLength)  				{  					case 23: //22 is the length of the get position response + 1 for response code  						if (printerDetails.currentPosition.Length != 0)//if we are not connecting just now to the printer we will report back the target move position  						{  							Vector3 printerPos = printerDetails.targetMovePosition;  							payloadStrBuilder.Append(String.Format(" C: X:{0} Y:{1} Z:{2} E:{3}"' printerPos.X' printerPos.Y' printerPos.Z' 0));  						}  						else//if we have not told the printer to move yet we get the location the printer actually thinks it is at  						{  							Vector3 posFromPrinter = new Vector3();  							posFromPrinter.X = translateInt32(3);  							posFromPrinter.Y = translateInt32(7);  							posFromPrinter.Z = translateInt32(11);    							posFromPrinter.X = posFromPrinter.X / printerDetails.stepsPerMm.X;  							posFromPrinter.Y = posFromPrinter.Y / printerDetails.stepsPerMm.Y;  							posFromPrinter.Z = posFromPrinter.Z / printerDetails.stepsPerMm.Z;    							payloadStrBuilder.Append(String.Format(" C: X:{0} Y:{1} Z:{2} E:{3}"' posFromPrinter.X' posFromPrinter.Y' posFromPrinter.Z' 0));  						}    						break;  					case 3: //Length of temperature response' temperature is requested individually for each extruder and bed separately. This collects the information and condenses it into one response to be sent to the printer  						if (!gCommandForResponse.Contains("M115"))  						{  							int temperature = translateInt16(3);  							printerDetails.teperatureResponseCount++;    							if (printerDetails.teperatureResponseCount == 1)  							{  								if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  								{  									temperatureResponseStrBuilder.Append(String.Format(" T0:{0}"' temperature));  								}  								else  								{  									temperatureResponseStrBuilder.Append(String.Format(" T:{0}"' temperature));  								}  							}  							else if (printerDetails.teperatureResponseCount == 2 && settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								temperatureResponseStrBuilder.Append(String.Format(" B:{0}"' temperature));  							}  							else  							{  								temperatureResponseStrBuilder.Append(String.Format(" T1:{0}"' temperature));  							}    							if (printerDetails.teperatureResponseCount == printerDetails.requiredTemperatureResponseCount)  							{  								payloadStrBuilder.Append(temperatureResponseStrBuilder.ToString());  								temperatureResponseStrBuilder.Clear();  								printerDetails.teperatureResponseCount = 0;  							}  						}  						break;  				}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GPacketAnalyzer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GReader.cs,analyzePayload,The following statement contains a magic number: switch (payloadLength)  				{  					case 23: //22 is the length of the get position response + 1 for response code  						if (printerDetails.currentPosition.Length != 0)//if we are not connecting just now to the printer we will report back the target move position  						{  							Vector3 printerPos = printerDetails.targetMovePosition;  							payloadStrBuilder.Append(String.Format(" C: X:{0} Y:{1} Z:{2} E:{3}"' printerPos.X' printerPos.Y' printerPos.Z' 0));  						}  						else//if we have not told the printer to move yet we get the location the printer actually thinks it is at  						{  							Vector3 posFromPrinter = new Vector3();  							posFromPrinter.X = translateInt32(3);  							posFromPrinter.Y = translateInt32(7);  							posFromPrinter.Z = translateInt32(11);    							posFromPrinter.X = posFromPrinter.X / printerDetails.stepsPerMm.X;  							posFromPrinter.Y = posFromPrinter.Y / printerDetails.stepsPerMm.Y;  							posFromPrinter.Z = posFromPrinter.Z / printerDetails.stepsPerMm.Z;    							payloadStrBuilder.Append(String.Format(" C: X:{0} Y:{1} Z:{2} E:{3}"' posFromPrinter.X' posFromPrinter.Y' posFromPrinter.Z' 0));  						}    						break;  					case 3: //Length of temperature response' temperature is requested individually for each extruder and bed separately. This collects the information and condenses it into one response to be sent to the printer  						if (!gCommandForResponse.Contains("M115"))  						{  							int temperature = translateInt16(3);  							printerDetails.teperatureResponseCount++;    							if (printerDetails.teperatureResponseCount == 1)  							{  								if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  								{  									temperatureResponseStrBuilder.Append(String.Format(" T0:{0}"' temperature));  								}  								else  								{  									temperatureResponseStrBuilder.Append(String.Format(" T:{0}"' temperature));  								}  							}  							else if (printerDetails.teperatureResponseCount == 2 && settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								temperatureResponseStrBuilder.Append(String.Format(" B:{0}"' temperature));  							}  							else  							{  								temperatureResponseStrBuilder.Append(String.Format(" T1:{0}"' temperature));  							}    							if (printerDetails.teperatureResponseCount == printerDetails.requiredTemperatureResponseCount)  							{  								payloadStrBuilder.Append(temperatureResponseStrBuilder.ToString());  								temperatureResponseStrBuilder.Clear();  								printerDetails.teperatureResponseCount = 0;  							}  						}  						break;  				}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GPacketAnalyzer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GReader.cs,analyzePayload,The following statement contains a magic number: switch (payloadLength)  				{  					case 23: //22 is the length of the get position response + 1 for response code  						if (printerDetails.currentPosition.Length != 0)//if we are not connecting just now to the printer we will report back the target move position  						{  							Vector3 printerPos = printerDetails.targetMovePosition;  							payloadStrBuilder.Append(String.Format(" C: X:{0} Y:{1} Z:{2} E:{3}"' printerPos.X' printerPos.Y' printerPos.Z' 0));  						}  						else//if we have not told the printer to move yet we get the location the printer actually thinks it is at  						{  							Vector3 posFromPrinter = new Vector3();  							posFromPrinter.X = translateInt32(3);  							posFromPrinter.Y = translateInt32(7);  							posFromPrinter.Z = translateInt32(11);    							posFromPrinter.X = posFromPrinter.X / printerDetails.stepsPerMm.X;  							posFromPrinter.Y = posFromPrinter.Y / printerDetails.stepsPerMm.Y;  							posFromPrinter.Z = posFromPrinter.Z / printerDetails.stepsPerMm.Z;    							payloadStrBuilder.Append(String.Format(" C: X:{0} Y:{1} Z:{2} E:{3}"' posFromPrinter.X' posFromPrinter.Y' posFromPrinter.Z' 0));  						}    						break;  					case 3: //Length of temperature response' temperature is requested individually for each extruder and bed separately. This collects the information and condenses it into one response to be sent to the printer  						if (!gCommandForResponse.Contains("M115"))  						{  							int temperature = translateInt16(3);  							printerDetails.teperatureResponseCount++;    							if (printerDetails.teperatureResponseCount == 1)  							{  								if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  								{  									temperatureResponseStrBuilder.Append(String.Format(" T0:{0}"' temperature));  								}  								else  								{  									temperatureResponseStrBuilder.Append(String.Format(" T:{0}"' temperature));  								}  							}  							else if (printerDetails.teperatureResponseCount == 2 && settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								temperatureResponseStrBuilder.Append(String.Format(" B:{0}"' temperature));  							}  							else  							{  								temperatureResponseStrBuilder.Append(String.Format(" T1:{0}"' temperature));  							}    							if (printerDetails.teperatureResponseCount == printerDetails.requiredTemperatureResponseCount)  							{  								payloadStrBuilder.Append(temperatureResponseStrBuilder.ToString());  								temperatureResponseStrBuilder.Clear();  								printerDetails.teperatureResponseCount = 0;  							}  						}  						break;  				}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GPacketAnalyzer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GReader.cs,analyzePayload,The following statement contains a magic number: i < payloadLength + 2
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GPacketAnalyzer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GReader.cs,translateInt16,The following statement contains a magic number: return (response[startingIndex] + (response[startingIndex + 1] * 256));
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GPacketAnalyzer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GReader.cs,translateInt32,The following statement contains a magic number: return (long)(response[startingIndex] + (response[startingIndex + 1] * 256) + (response[startingIndex + 2] * 256 ^ 2) + (response[startingIndex + 3] * (256 ^ 3)));
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GPacketAnalyzer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GReader.cs,translateInt32,The following statement contains a magic number: return (long)(response[startingIndex] + (response[startingIndex + 1] * 256) + (response[startingIndex + 2] * 256 ^ 2) + (response[startingIndex + 3] * (256 ^ 3)));
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GPacketAnalyzer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GReader.cs,translateInt32,The following statement contains a magic number: return (long)(response[startingIndex] + (response[startingIndex + 1] * 256) + (response[startingIndex + 2] * 256 ^ 2) + (response[startingIndex + 3] * (256 ^ 3)));
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GPacketAnalyzer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GReader.cs,translateInt32,The following statement contains a magic number: return (long)(response[startingIndex] + (response[startingIndex + 1] * 256) + (response[startingIndex + 2] * 256 ^ 2) + (response[startingIndex + 3] * (256 ^ 3)));
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GPacketAnalyzer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GReader.cs,translateInt32,The following statement contains a magic number: return (long)(response[startingIndex] + (response[startingIndex + 1] * 256) + (response[startingIndex + 2] * 256 ^ 2) + (response[startingIndex + 3] * (256 ^ 3)));
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GPacketAnalyzer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GReader.cs,translateInt32,The following statement contains a magic number: return (long)(response[startingIndex] + (response[startingIndex + 1] * 256) + (response[startingIndex + 2] * 256 ^ 2) + (response[startingIndex + 3] * (256 ^ 3)));
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GPacketAnalyzer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GReader.cs,translateInt32,The following statement contains a magic number: return (long)(response[startingIndex] + (response[startingIndex + 1] * 256) + (response[startingIndex + 2] * 256 ^ 2) + (response[startingIndex + 3] * (256 ^ 3)));
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,X3GWriter,The following statement contains a magic number: feedrate = 3200;
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,X3GWriter,The following statement contains a magic number: feedrate = 3200;
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following statement contains a magic number: switch (commandType)  			{  				case 'M':    					int commandVal = (int)getParameterValue(commands' 'M');  					switch (commandVal)  					{  						case 73://Set Build Perc M73  							binaryPacket = new X3GPacketFactory(150);  							binaryPacket.addByte((byte)getParameterValue(commands' 'P'));  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 82://set extruder to absolute move M82  							sendToPrinter = false;  							printerDetails.extruderRelativePos = false;  							break;    						case 83://set extruder to relative move M83  							sendToPrinter = false;  							printerDetails.extruderRelativePos = true;  							break;    						case 84://Stop idle hold (release motors) M84  							binaryPacket = new X3GPacketFactory(137);  							binaryPacket.addByte(31);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 92://set axis steps per unit M92  							sendToPrinter = false;  							updateStepsPerMm(commands);    							break;    						case 114://Get Current Position M114  							binaryPacket = new X3GPacketFactory(21);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 115://connecting M115  							binaryPacket = new X3GPacketFactory(0x00);  							binaryPacket.add16bits(0x28);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 105://get temperature M105  							binaryPacket = new X3GPacketFactory(0x0A);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(0x02);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.requiredTemperatureResponseCount = 1;    							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))//if it has a bed get the bed temp  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(0);  								binaryPacket.addByte(30);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  							{  								binaryPacket = new X3GPacketFactory(10);  								binaryPacket.addByte(1);  								binaryPacket.addByte(2);  								printerDetails.requiredTemperatureResponseCount++;  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}  							printerDetails.teperatureResponseCount = 0;  							break;    						case 104://set extruder temperature M104  							int temp = (int)getParameterValue(commands' 'S');  							byte extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);    							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);//turns on cooling fan  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetTempForMakerbotStyleCommands = temp;  							break;    						case 109://set extruder temperature and wait M109  							temp = (int)getParameterValue(commands' 'S');  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;    							break;    						case 106://Fan On M106  							int zeroCheck = (int)getParameterValue(commands' 'S');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);    							if (zeroCheck > 0)  							{  								binaryPacket.addByte(1);//If the value is not zero enable motor  							}  							else  							{  								binaryPacket.addByte(0);//If value is zero disable motor  							}    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 107://Fan off M107  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 110://set current line number M110  							lineNumber = (int)getParameterValue(commands' 'N');  							sendToPrinter = false;  							break;    						case 117://Set Display message M117  							binaryPacket = new X3GPacketFactory(149);  							binaryPacket.addByte(4);  							binaryPacket.addByte(0);  							binaryPacket.addByte(0);  							binaryPacket.addByte(20); //20 second timeout on message  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 127://Disable extra output(fan) Makerbot M127  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(0x00);  							binaryPacket.addByte(13);  							binaryPacket.addByte(1);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 132://load axis offset of current home pos Makerbot M132    							binaryPacket = new X3GPacketFactory(144);  							binaryPacket.addByte(31);    							convertedMessage = binaryPacket.getX3GPacket();    							break;    						case 133://wait for toolhead to heat to target temp Makerbot M133  							temp = printerDetails.targetTempForMakerbotStyleCommands;  							extruder = (byte)getParameterValue(commands' 'T');  							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(0x03);  							binaryPacket.addByte(0x02);  							binaryPacket.add16bits(temp);  							convertedMessage = binaryPacket.getX3GPacket();    							binaryPacket = new X3GPacketFactory(136);  							binaryPacket.addByte(extruder);  							binaryPacket.addByte(12);  							binaryPacket.addByte(1);  							binaryPacket.addByte(1);    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							binaryPacket = new X3GPacketFactory(135);  							binaryPacket.addByte(0x00);  							binaryPacket.add16bits(100);//delay between query packets in ms  							binaryPacket.add16bits(1200);//timeout before continuing w/o  tool ready in seconds    							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							printerDetails.targetExtruderTemps[extruder] = temp;  							printerDetails.heatingLockout = true;  							break;    						case 134://wait for build platform temp Makerbot M134  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(printerDetails.targetBedTemp);  							}  							else  							{  								sendToPrinter = false;  							}    							break;  						case 135://change toolhead Makerbot M135  							printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  							//Swaps active&inactive toolheads  							float switchPositionHolder = printerDetails.activeExtruderPosition;  							printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  							printerDetails.inactiveExtruderPosition = switchPositionHolder;  							//sends toolchange command to printer  							binaryPacket = new X3GPacketFactory(134);  							binaryPacket.addByte(printerDetails.activeExtruderIndex);    							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 140://Set Bed temp M140  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 190://Wait for bed to reach target temp M190  							if (settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								int temperature = (int)getParameterValue(commands' 'S');  								binaryPacket = new X3GPacketFactory(136);  								binaryPacket.addByte(0);  								binaryPacket.addByte(31);  								binaryPacket.addByte(2);  								binaryPacket.add16bits(temperature);    								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetBedTemp = temperature;    								binaryPacket = new X3GPacketFactory(141);  								binaryPacket.addByte(0);  								binaryPacket.add16bits(100);  								binaryPacket.add16bits(1200);    								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								printerDetails.heatingLockout = true;  							}  							else  							{  								sendToPrinter = false;  							}    							break;    						case 206://Positional offset for bed M206  							sendToPrinter = false;  							updateBedOffset(commands);    							break;    						//The following are fake gcode commands to do features that are not included in gCode or are needed for printer initialization  						case 1200: //Build Start Notification M1200  							binaryPacket = new X3GPacketFactory(153);  							binaryPacket.add32bits(0);  							for (int i = 1; i < commands.Count; i++)  							{  								byte b = Convert.ToByte(commands.ElementAt(i)[0]);  								binaryPacket.addByte(b);  							}  							//binaryPacket.addByte(77);  							//binaryPacket.addByte(67);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1201: //Build End Notification M1201  							binaryPacket = new X3GPacketFactory(154);  							binaryPacket.addByte(0);  							convertedMessage = binaryPacket.getX3GPacket();  							printerDetails.heatingLockout = false;  							printerDetails.targetBedTemp = 0;  							printerDetails.targetExtruderTemps[0] = 0;  							printerDetails.targetExtruderTemps[1] = 0;  							break;    						case 1202: //dtr hi-low (reset) M1202  							binaryPacket = new X3GPacketFactory(3);  							convertedMessage = binaryPacket.getX3GPacket();  							break;    						case 1203: //toolhead offset M1203  							sendToPrinter = false;  							printerDetails.extruderOffset = new Vector2(getParameterValue(commands' 'X')' getParameterValue(commands' 'Y'));  							break;    						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'G':  					int commandValue = getCommandValue(commands[0]);    					switch (commandValue)  					{  						case 0:  						case 1://Move G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn G0/G1    							if (FeedrateOnly(writemessage))  							{  								sendToPrinter = false;  								updateFeedRate((int)getParameterValue(commands' 'F'));  							}  							else  							{  								if (!relativePos)  								{  									binaryPacket = new X3GPacketFactory(155);//Host command code  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)//checks which extruder is active and  									{  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//First extruder  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm)); //second extruder  									}  									else  									{  										binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits((long)((printerDetails.targetExtruderPosition) * printerDetails.extruderStepsPerMm));//second extruder  									}    									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X / 60)));//feedrate in steps/second                                  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move:none (0)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);//this calculates time(needs length of the move target - current and get magnitude) (expected in mm)  									binaryPacket.add16bits((feedrate / 60) * 64);//feedrate(mm/s) mult by 64 used with above float to calc time    									//Update of the position is now down when an OK is returned from the printer    									convertedMessage = binaryPacket.getX3GPacket();  								}  								else  								{  									binaryPacket = new X3GPacketFactory(155);  									updateTargetPostition(commands);  									updateFeedRate((int)getParameterValue(commands' 'F'));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.X) * printerDetails.stepsPerMm.X));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Y) * printerDetails.stepsPerMm.Y));  									binaryPacket.add32bits((long)((printerDetails.targetMovePosition.Z) * printerDetails.stepsPerMm.Z));  									if (printerDetails.activeExtruderIndex == 0)  									{  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  										binaryPacket.add32bits(0);  									}  									else  									{  										binaryPacket.add32bits(0);  										binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  									}      									binaryPacket.add32bits((long)(feedrate * (printerDetails.stepsPerMm.X) / 60));  									binaryPacket.addByte(getRelativeMovementAxes(commands));//specifies which axes should make a relative move: all(31)  									float move = CalculateMoveInMM(commands);  									binaryPacket.addFloat(move);  									binaryPacket.add16bits((feedrate / 60) * 64);    									printerDetails.targetMovePosition.X = printerDetails.currentPosition.X + printerDetails.targetMovePosition.X;  									printerDetails.targetMovePosition.Y = printerDetails.currentPosition.Y + printerDetails.targetMovePosition.Y;  									printerDetails.targetMovePosition.Z = printerDetails.currentPosition.Z + printerDetails.targetMovePosition.Z;    									convertedMessage = binaryPacket.getX3GPacket();  								}  							}      							break;  						case 2:  						case 3://Controlled Arc Move G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn (clockwise arc) G3 (counter-Clockwise)  							break;  						case 28://Move to Origin (home) G28 (Flags)X Y Z  							byte axesBitfeild = 0;  							if (commandHasNoParameters(commands))//If there are no parameters home all axes  							{  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(3);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out in seconds  								convertedMessage = binaryPacket.getX3GPacket();  								printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								axesBitfeild = 7;  							}  							else//Otherwise check for which axes should be homed  							{  								if (checkCommandForFlag(writemessage' 'X'))  								{  									axesBitfeild = 1;  									printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  								}  								if (checkCommandForFlag(writemessage' 'Y'))  								{  									axesBitfeild += 2;  									printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  								}  								binaryPacket = new X3GPacketFactory(132);  								binaryPacket.addByte(axesBitfeild);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.X);  								binaryPacket.add16bits(45);//Time out  								convertedMessage = binaryPacket.getX3GPacket();  								if (checkCommandForFlag(writemessage' 'Z'))  								{  									axesBitfeild += 4;  									printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  								}  							}    							if (axesBitfeild > 3 || axesBitfeild == 0)//handles Z homing  							{  								binaryPacket = new X3GPacketFactory(131); //This Will Home Z if it is specified  								binaryPacket.addByte(0x04);  								binaryPacket.add32bits((long)printerDetails.homingFeedRate.Z);  								binaryPacket.add16bits(45);  								overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  							}    							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;  							printerDetails.activeExtruderPosition = 0;  							printerDetails.inactiveExtruderPosition = 0;  							printerDetails.targetExtruderPosition = 0;    							//Set position of homed position the inverse of the printer offset (this will turn 0'0 for the printer to be the same as what MC expects)  							binaryPacket = new X3GPacketFactory(140);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							binaryPacket.add32bits(0);  							binaryPacket.add32bits(0);  							overFlowPackets.Enqueue(binaryPacket.getX3GPacket());    							break;  						case 29://Detailed Z-Probe G29  							break;  						case 30://Single Z-Probe G30  							break;  						case 4://Dwell G4 Pnnn or Snnn (P = milliseconds S = seconds)  							binaryPacket = new X3GPacketFactory(0x85);  							long i = (long)getParameterValue(commands' 'P');  							if (i == 0)  							{  								i = (long)(getParameterValue(commands' 'S') * 1000);  							}  							printerDetails.dwellTime = i;  							binaryPacket.add32bits(i);  							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 10://Retract G10  							break;  						case 11://UnRetract G11  							break;  						case 20://set units to inches G20  							break;  						case 21://set units to Millimeters G21  							sendToPrinter = false;  							break;  						case 90://Set to Absolute Positioning G90  							relativePos = false;  							printerDetails.extruderRelativePos = false;  							sendToPrinter = false;  							break;  						case 91://set to Relative Positioning G91  							relativePos = true;  							printerDetails.extruderRelativePos = true;  							sendToPrinter = false;  							break;  						case 92://Set Position G92 Xnnn Ynnn Znnn Ennn  							binaryPacket = new X3GPacketFactory(0x8C);  							updateTargetPostition(commands);  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.X * printerDetails.stepsPerMm.X));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Y * printerDetails.stepsPerMm.Y));  							binaryPacket.add32bits((long)(printerDetails.targetMovePosition.Z * printerDetails.stepsPerMm.Z));  							if (printerDetails.activeExtruderIndex == 0)  							{  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  							}  							else  							{  								binaryPacket.add32bits((long)(printerDetails.inactiveExtruderPosition * printerDetails.extruderStepsPerMm));  								binaryPacket.add32bits((long)(printerDetails.targetExtruderPosition * printerDetails.extruderStepsPerMm));  							}    							printerDetails.currentPosition = new Vector3(printerDetails.targetMovePosition); //sets the current position to the targeted move position  							printerDetails.activeExtruderPosition = printerDetails.targetExtruderPosition;    							convertedMessage = binaryPacket.getX3GPacket();  							break;  						case 130://Set digital Potentiometer G130 Xnn Ynn Znn Ann Bnn  							if (checkCommandForFlag(commands' 'X'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(0);  								binaryPacket.addByte((byte)getParameterValue(commands' 'X'));  								convertedMessage = binaryPacket.getX3GPacket();  							}  							if (checkCommandForFlag(commands' 'Y'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(1);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Y'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'Z'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(2);  								binaryPacket.addByte((byte)getParameterValue(commands' 'Z'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'A'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(3);  								binaryPacket.addByte((byte)getParameterValue(commands' 'A'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							if (checkCommandForFlag(commands' 'B'))  							{  								binaryPacket = new X3GPacketFactory(145);  								binaryPacket.addByte(4);  								binaryPacket.addByte((byte)getParameterValue(commands' 'B'));  								if (convertedMessage != null)  								{  									overFlowPackets.Enqueue(binaryPacket.getX3GPacket());  								}  								else  								{  									convertedMessage = binaryPacket.getX3GPacket();  								}  							}  							break;  						case 161://Home axis to minimum G161 Z Fnnn  							double targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.Z)  							{  								targetFeedrate = printerDetails.homingFeedRate.Z;  							}  							binaryPacket = new X3GPacketFactory(131);  							binaryPacket.addByte(0x04);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.Z = printerDetails.positionalOffset.Z;  							printerDetails.currentPosition.Z = printerDetails.targetMovePosition.Z;    							break;  						case 162://Home axis to maximum G162 X Y Fnnn  							targetFeedrate = getParameterValue(commands' 'F');  							if (targetFeedrate < printerDetails.homingFeedRate.X)  							{  								targetFeedrate = printerDetails.homingFeedRate.X;  							}  							binaryPacket = new X3GPacketFactory(132);  							binaryPacket.addByte(0x03);  							binaryPacket.add32bits((long)targetFeedrate);  							binaryPacket.add16bits(45);  							convertedMessage = binaryPacket.getX3GPacket();  							//Set positional details  							printerDetails.targetMovePosition.X = printerDetails.positionalOffset.X;  							printerDetails.targetMovePosition.Y = printerDetails.positionalOffset.Y;  							printerDetails.currentPosition.X = printerDetails.targetMovePosition.X;  							printerDetails.currentPosition.Y = printerDetails.targetMovePosition.Y;    							break;  						default:  							sendToPrinter = false;  							convertedMessage = new byte[] { 0 };  							break;  					}    					break;    				case 'T'://Change toolhead  					printerDetails.activeExtruderIndex = (byte)getParameterValue(commands' 'T');  					//Swaps active&inactive toolheads  					float positionHolder = printerDetails.activeExtruderPosition;  					printerDetails.activeExtruderPosition = printerDetails.inactiveExtruderPosition;  					printerDetails.inactiveExtruderPosition = positionHolder;  					//sends toolchange command to printer  					binaryPacket = new X3GPacketFactory(134);  					binaryPacket.addByte(printerDetails.activeExtruderIndex);    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				case 'X'://Used to test binary commands typed in via terminal(ex. Home x&y: X132 B03 L500 I30)  					writemessage = writemessage.Substring(1);  					int arraySize = commands.Count;    					binaryPacket = new X3GPacketFactory((byte)getParameterValue(commands' 'X'));    					for (int i = 1; i < arraySize; i++)  					{  						if (commands.ElementAt(i) != null && commands.ElementAt(i) != "")  						{  							char c = commands[i][0];  							commands[i] = commands[i].Substring(1);  							switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}  						}    					}    					convertedMessage = binaryPacket.getX3GPacket();  					break;  				default:  					convertedMessage = new byte[] { 0 };  					sendToPrinter = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,getRelativeMovementAxes,The following statement contains a magic number: axes = 31;
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,commandHasNoParameters,The following statement contains a magic number: return (firstWhitspace + 2) >= writemessage.Length;
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,CalculateDDA,The following statement contains a magic number: return ((60000000 / (long)(printerDetails.stepsPerMm.X * feedrate)));
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GPacketFactory,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,X3GPacketFactory,The following statement contains a magic number: index = 2;
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GPacketFactory,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,add16bits,The following statement contains a magic number: addByte((byte)((command >> 8) & 0xff));
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GPacketFactory,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,add32bits,The following statement contains a magic number: add16bits((int)(command >> 16) & 0xffff);
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GPacketFactory,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,getX3GPacket,The following statement contains a magic number: packetArray[1] = (byte)(packetLength - (byte)3);
Magic Number,MatterHackers.Plugins.X3GDriver,X3GSerialPortWrapper,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GSerialPortWrapper.cs,secondExtruderIsReady,The following statement contains a magic number: string str = translatedReply.Substring(index + 3' i - (index + 3));
Magic Number,MatterHackers.Plugins.X3GDriver,X3GSerialPortWrapper,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GSerialPortWrapper.cs,secondExtruderIsReady,The following statement contains a magic number: string str = translatedReply.Substring(index + 3' i - (index + 3));
Magic Number,MatterHackers.Plugins.X3GDriver,X3GSerialPortWrapper,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GSerialPortWrapper.cs,secondExtruderIsReady,The following statement contains a magic number: return (extruderTemp >= printerDetails.targetExtruderTemps[1] - 2);
Magic Number,MatterHackers.Plugins.X3GDriver,X3GSerialPortWrapper,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GSerialPortWrapper.cs,ExtruderIsReady,The following statement contains a magic number: string str = translatedReply.Substring(index + 2' i - (index + 2));
Magic Number,MatterHackers.Plugins.X3GDriver,X3GSerialPortWrapper,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GSerialPortWrapper.cs,ExtruderIsReady,The following statement contains a magic number: string str = translatedReply.Substring(index + 2' i - (index + 2));
Magic Number,MatterHackers.Plugins.X3GDriver,X3GSerialPortWrapper,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GSerialPortWrapper.cs,ExtruderIsReady,The following statement contains a magic number: return extruderTemp >= (printerDetails.targetExtruderTemps[0] - 2);
Magic Number,MatterHackers.Plugins.X3GDriver,X3GSerialPortWrapper,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GSerialPortWrapper.cs,BedIsReady,The following statement contains a magic number: string str = translatedReply.Substring(index + 2' i - (index + 2));
Magic Number,MatterHackers.Plugins.X3GDriver,X3GSerialPortWrapper,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GSerialPortWrapper.cs,BedIsReady,The following statement contains a magic number: string str = translatedReply.Substring(index + 2' i - (index + 2));
Magic Number,MatterHackers.Plugins.X3GDriver,X3GSerialPortWrapper,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GSerialPortWrapper.cs,BedIsReady,The following statement contains a magic number: isReady = bedTemp >= (printerDetails.targetBedTemp - 2);
Magic Number,MatterControl.Printing.Pipelines,BabyStepsStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\BabyStepsStream.cs,ReadExtruderOffsets,The following statement contains a magic number: i < 4
Magic Number,MatterControl.Printing.Pipelines,BabyStepsStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\BabyStepsStream.cs,SetPrinterPosition,The following statement contains a magic number: inputNoBabyStepping.position += extruderOffsets[Math.Min(extruderIndex' 4)];
Magic Number,MatterControl.Printing.Pipelines,BabyStepsStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\BabyStepsStream.cs,ReadLine,The following statement contains a magic number: moveToSend.position -= extruderOffsets[Math.Min(extruderIndex' 4)];
Magic Number,MatterControl.Printing.Pipelines,GCodeSwitcher,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\GCodeSwitcher.cs,GCodeSwitcher,The following statement contains a magic number: var multiplier = settings.GetValue<double>(SettingsKey.print_time_estimate_multiplier) / 100.0;
Magic Number,MatterControl.Printing.Pipelines,GCodeSwitcher,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\GCodeSwitcher.cs,SwitchTo,The following statement contains a magic number: Task.Run(() =>  				{  					var settings = this.printer.Settings;  					var maxAcceleration = settings.GetValue<double>(SettingsKey.max_acceleration);  					var maxVelocity = settings.GetValue<double>(SettingsKey.max_velocity);  					var jerkVelocity = settings.GetValue<double>(SettingsKey.jerk_velocity);  					var multiplier = settings.GetValue<double>(SettingsKey.print_time_estimate_multiplier) / 100.0;    					var switchToGCode = GCodeFile.Load(new StreamReader(gcodeFilename).BaseStream'  						new Vector4(maxAcceleration' maxAcceleration' maxAcceleration' maxAcceleration)'  						new Vector4(maxVelocity' maxVelocity' maxVelocity' maxVelocity)'  						new Vector4(jerkVelocity' jerkVelocity' jerkVelocity' jerkVelocity)'  						new Vector4(multiplier' multiplier' multiplier' multiplier)'  						CancellationToken.None);    					if (switchToGCode is GCodeMemoryFile memoryFile)  					{  						this.switchToGCode = memoryFile;  					}  				});
Magic Number,MatterControl.Printing.Pipelines,MaxLengthStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\MaxLengthStream.cs,ReadLine,The following statement contains a magic number: MaxSegmentLength = 5;
Magic Number,MatterControl.Printing.Pipelines,MaxLengthStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\MaxLengthStream.cs,ReadLine,The following statement contains a magic number: double maxSegmentsCanTransmit = 1 / (((currentDestination.feedRate / 60) * maxSecondsPerSegment) / length);
Magic Number,MatterControl.Printing.Pipelines,NotPrintingStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\NotPrintingStream.cs,ReadLine,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,MatterControl.Printing.Pipelines,PauseHandlingStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\PauseHandlingStream.cs,PauseHandlingStream,The following statement contains a magic number: printer.Connection.LineReceived += (s' line) =>  				{  					if (line != null)  					{  						if (line.Contains("ros_"))  						{  							if (line.Contains("TRIGGERED"))  							{  								readOutOfFilament = true;  							}  						}    						if (line.Contains("pos_"))  						{  							double sensorDistance = 0;  							double stepperDistance = 0;  							if (GCodeFile.GetFirstNumberAfter("SENSOR:"' line' ref sensorDistance))  							{  								if (sensorDistance < -1 || sensorDistance > 1)  								{  									printer.Connection.FilamentPositionSensorDetected = true;  								}    								if (printer.Connection.FilamentPositionSensorDetected)  								{  									GCodeFile.GetFirstNumberAfter("STEPPER:"' line' ref stepperDistance);    									var stepperDelta = Math.Abs(stepperDistance - positionSensorData.LastStepperDistance);    									// if we think we should have move the filament by more than 1mm  									if (stepperDelta > 1)  									{  										var sensorDelta = Math.Abs(sensorDistance - positionSensorData.LastSensorDistance);  										// check if the sensor data is within a tolerance of the stepper data    										var deltaRatio = sensorDelta / stepperDelta;  										if (deltaRatio < .5 || deltaRatio > 2)  										{  											// we have a reportable discrepancy set a runout state  											positionSensorData.ExtrusionDiscrepency++;  											if (positionSensorData.ExtrusionDiscrepency > 2)  											{  												readOutOfFilament = true;  												positionSensorData.ExtrusionDiscrepency = 0;  											}  										}  										else  										{  											positionSensorData.ExtrusionDiscrepency = 0;  										}    										// and record this position  										positionSensorData.LastSensorDistance = sensorDistance;  										positionSensorData.LastStepperDistance = stepperDistance;  									}  								}  							}  						}  					}  				};
Magic Number,MatterControl.Printing.Pipelines,PauseHandlingStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\PauseHandlingStream.cs,PauseHandlingStream,The following statement contains a magic number: printer.Connection.LineReceived += (s' line) =>  				{  					if (line != null)  					{  						if (line.Contains("ros_"))  						{  							if (line.Contains("TRIGGERED"))  							{  								readOutOfFilament = true;  							}  						}    						if (line.Contains("pos_"))  						{  							double sensorDistance = 0;  							double stepperDistance = 0;  							if (GCodeFile.GetFirstNumberAfter("SENSOR:"' line' ref sensorDistance))  							{  								if (sensorDistance < -1 || sensorDistance > 1)  								{  									printer.Connection.FilamentPositionSensorDetected = true;  								}    								if (printer.Connection.FilamentPositionSensorDetected)  								{  									GCodeFile.GetFirstNumberAfter("STEPPER:"' line' ref stepperDistance);    									var stepperDelta = Math.Abs(stepperDistance - positionSensorData.LastStepperDistance);    									// if we think we should have move the filament by more than 1mm  									if (stepperDelta > 1)  									{  										var sensorDelta = Math.Abs(sensorDistance - positionSensorData.LastSensorDistance);  										// check if the sensor data is within a tolerance of the stepper data    										var deltaRatio = sensorDelta / stepperDelta;  										if (deltaRatio < .5 || deltaRatio > 2)  										{  											// we have a reportable discrepancy set a runout state  											positionSensorData.ExtrusionDiscrepency++;  											if (positionSensorData.ExtrusionDiscrepency > 2)  											{  												readOutOfFilament = true;  												positionSensorData.ExtrusionDiscrepency = 0;  											}  										}  										else  										{  											positionSensorData.ExtrusionDiscrepency = 0;  										}    										// and record this position  										positionSensorData.LastSensorDistance = sensorDistance;  										positionSensorData.LastStepperDistance = stepperDistance;  									}  								}  							}  						}  					}  				};
Magic Number,MatterControl.Printing.Pipelines,PauseHandlingStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\PauseHandlingStream.cs,PauseHandlingStream,The following statement contains a magic number: printer.Connection.LineReceived += (s' line) =>  				{  					if (line != null)  					{  						if (line.Contains("ros_"))  						{  							if (line.Contains("TRIGGERED"))  							{  								readOutOfFilament = true;  							}  						}    						if (line.Contains("pos_"))  						{  							double sensorDistance = 0;  							double stepperDistance = 0;  							if (GCodeFile.GetFirstNumberAfter("SENSOR:"' line' ref sensorDistance))  							{  								if (sensorDistance < -1 || sensorDistance > 1)  								{  									printer.Connection.FilamentPositionSensorDetected = true;  								}    								if (printer.Connection.FilamentPositionSensorDetected)  								{  									GCodeFile.GetFirstNumberAfter("STEPPER:"' line' ref stepperDistance);    									var stepperDelta = Math.Abs(stepperDistance - positionSensorData.LastStepperDistance);    									// if we think we should have move the filament by more than 1mm  									if (stepperDelta > 1)  									{  										var sensorDelta = Math.Abs(sensorDistance - positionSensorData.LastSensorDistance);  										// check if the sensor data is within a tolerance of the stepper data    										var deltaRatio = sensorDelta / stepperDelta;  										if (deltaRatio < .5 || deltaRatio > 2)  										{  											// we have a reportable discrepancy set a runout state  											positionSensorData.ExtrusionDiscrepency++;  											if (positionSensorData.ExtrusionDiscrepency > 2)  											{  												readOutOfFilament = true;  												positionSensorData.ExtrusionDiscrepency = 0;  											}  										}  										else  										{  											positionSensorData.ExtrusionDiscrepency = 0;  										}    										// and record this position  										positionSensorData.LastSensorDistance = sensorDistance;  										positionSensorData.LastStepperDistance = stepperDistance;  									}  								}  							}  						}  					}  				};
Magic Number,MatterControl.Printing.Pipelines,PauseHandlingStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\PauseHandlingStream.cs,ReadLine,The following statement contains a magic number: !timeSinceLastEndstopRead.IsRunning || timeSinceLastEndstopRead.ElapsedMilliseconds > 5000
Magic Number,MatterControl.Printing.Pipelines,PauseHandlingStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\PauseHandlingStream.cs,Resume,The following statement contains a magic number: Vector3 ensureAllAxisAreSent = positionBeforeActualPause + new Vector3(.01' .01' .01);
Magic Number,MatterControl.Printing.Pipelines,PauseHandlingStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\PauseHandlingStream.cs,Resume,The following statement contains a magic number: Vector3 ensureAllAxisAreSent = positionBeforeActualPause + new Vector3(.01' .01' .01);
Magic Number,MatterControl.Printing.Pipelines,PauseHandlingStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\PauseHandlingStream.cs,Resume,The following statement contains a magic number: Vector3 ensureAllAxisAreSent = positionBeforeActualPause + new Vector3(.01' .01' .01);
Magic Number,MatterControl.Printing.Pipelines,PauseHandlingStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\PauseHandlingStream.cs,Resume,The following statement contains a magic number: var outerPerimeterSpeed = printer.Settings.GetValue<double>(SettingsKey.perimeter_speed) * 60;
Magic Number,MatterControl.Printing.Pipelines,PrintRecoveryStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\PrintRecoveryStream.cs,PrintRecoveryStream,The following statement contains a magic number: recoverFeedRate = 10;
Magic Number,MatterControl.Printing.Pipelines,PrintRecoveryStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\PrintRecoveryStream.cs,PrintRecoveryStream,The following statement contains a magic number: recoverFeedRate *= 60;
Magic Number,MatterControl.Printing.Pipelines,PrintRecoveryStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\PrintRecoveryStream.cs,ReadLine,The following statement contains a magic number: switch (RecoveryState)  			{  				// heat the extrude to remove it from the part  				case RecoveryState.RemoveHeating:  					// TODO: make sure we heat up all the extruders that we need to (all that are used)  					queuedCommands.Add("G21; set units to millimeters");  					queuedCommands.Add("M107; fan off");  					queuedCommands.Add("T0; set the active extruder to 0");  					queuedCommands.Add("G90; use absolute coordinates");  					queuedCommands.Add("G92 E0; reset the expected extruder position");  					queuedCommands.Add("M82; use absolute distance for extrusion");    					bool hasHeatedBed = printer.Settings.GetValue<bool>(SettingsKey.has_heated_bed);  					double bedTemp = printer.Settings.GetValue<double>(SettingsKey.bed_temperature);  					if (hasHeatedBed && bedTemp > 0)  					{  						// start heating the bed  						queuedCommands.Add($"M140 S{bedTemp}");  					}    					// heat up the extruder  					queuedCommands.Add("M109 S{0}".FormatWith(printer.Settings.Helpers.ExtruderTargetTemperature(0)));    					if (hasHeatedBed && bedTemp > 0)  					{  						// finish heating the bed  						queuedCommands.Add($"M190 S{bedTemp}");  					}    					RecoveryState = RecoveryState.Raising;  					lastLine = "";  					return "";    				// remove it from the part  				case RecoveryState.Raising:  					// We don't know where the printer is for sure (it may have been turned off). Disable leveling until we know where it is.  					printer.Connection.AllowLeveling = false;  					queuedCommands.Add("M114 ; get current position");  					queuedCommands.Add("G91 ; move relative");  					queuedCommands.Add("G1 Z10 F{0}".FormatWith(printer.Settings.ZSpeed()));  					queuedCommands.Add("G90 ; move absolute");  					RecoveryState = RecoveryState.Homing;  					lastLine = "";  					return "";    				// if top homing' home the extruder  				case RecoveryState.Homing:  					if (printer.Settings.GetValue<bool>(SettingsKey.z_homes_to_max))  					{  						queuedCommands.Add("G28");  					}  					else  					{  						// home x  						queuedCommands.Add("G28 X0");  						// home y  						queuedCommands.Add("G28 Y0");  						// move to the place we can home z from  						Vector2 recoveryPositionXy = printer.Settings.GetValue<Vector2>(SettingsKey.recover_position_before_z_home);  						queuedCommands.Add("G1 X{0:0.###}Y{1:0.###}F{2}".FormatWith(recoveryPositionXy.X' recoveryPositionXy.Y' printer.Settings.XSpeed()));  						// home z  						queuedCommands.Add("G28 Z0");  					}    					// We now know where the printer is re-enable print leveling  					printer.Connection.AllowLeveling = true;  					RecoveryState = RecoveryState.FindingRecoveryLayer;  					return "";    				// This is to recover printing if an out a filament occurs.  				// Help the user move the extruder down to just touching the part  				case RecoveryState.FindingRecoveryLayer:  					if (false) // help the user get the head to the right position  					{  						// move to above the completed print  						// move over a know good part of the model at the current top layer (extrude vertex from gcode)  						// let the user move down until they like the height  						// calculate that position and continue  					}  					else // we are resuming because of disconnect or reset' skip this  					{  						RecoveryState = RecoveryState.SkippingGCode;  						goto case RecoveryState.SkippingGCode;  					}    				case RecoveryState.SkippingGCode:  					// run through the gcode that the device expected looking for things like temp  					// and skip everything else until we get to the point we left off last time  					int commandCount = 0;  					boundsOfSkippedLayers = RectangleDouble.ZeroIntersection;  					while (internalStream.GCodeFile.PercentComplete(internalStream.LineIndex) < percentDone)  					{  						string line = internalStream.ReadLine();  						if (line == null)  						{  							break;  						}    						commandCount++;    						// make sure we don't parse comments  						if (line.Contains(";"))  						{  							line = line.Split(';')[0];  						}    						lastDestination = GetPosition(line' lastDestination);    						if (commandCount > 100)  						{  							boundsOfSkippedLayers.ExpandToInclude(lastDestination.position.Xy);  						}    						// check if the line is something we want to send to the printer (like a temp)  						if (line.StartsWith("M109") // heat and wait extruder  							|| line.StartsWith("M104") // heat extruder  							|| line.StartsWith("M190") // heat and wait bed  							|| line.StartsWith("M140") // heat bed  							|| line.StartsWith("T") // switch extruder  							|| line.StartsWith("M106") // fan on  							|| line.StartsWith("M107") // fan off  							|| line.StartsWith("G92")) // set position  						{  							lastLine = line;    							return line;  						}  					}    					RecoveryState = RecoveryState.PrimingAndMovingToStart;    					// make sure we always- pick up the last movement  					boundsOfSkippedLayers.ExpandToInclude(lastDestination.position.Xy);  					return "";    				case RecoveryState.PrimingAndMovingToStart:  					{  						if (printer.Settings.GetValue("z_homes_to_max") == "0") // we are homed to the bed  						{  							// move to the height we can recover printing from  							Vector2 recoverPositionXy = printer.Settings.GetValue<Vector2>(SettingsKey.recover_position_before_z_home);  							queuedCommands.Add(CreateMovementLine(new PrinterMove(new Vector3(recoverPositionXy.X' recoverPositionXy.Y' lastDestination.position.Z)' 0' printer.Settings.ZSpeed())));  						}    						double extruderWidth = printer.Settings.GetValue<double>(SettingsKey.nozzle_diameter);  						// move to a position outside the printed bounds  						queuedCommands.Add(CreateMovementLine(new PrinterMove(  							new Vector3(boundsOfSkippedLayers.Left - extruderWidth * 2' boundsOfSkippedLayers.Bottom + boundsOfSkippedLayers.Height / 2' lastDestination.position.Z)'  							0'  							printer.Settings.XSpeed())));    						// let's prime the extruder  						queuedCommands.Add("G1 E10 F{0}".FormatWith(printer.Settings.EFeedRate(0))); // extrude 10  						queuedCommands.Add("G1 E9"); // and retract a bit    						// move to the actual print position  						queuedCommands.Add(CreateMovementLine(new PrinterMove(lastDestination.position' 0' printer.Settings.XSpeed())));    						// reset the printer to know where the filament should be  						queuedCommands.Add("G92 E{0}".FormatWith(lastDestination.extrusion));  						RecoveryState = RecoveryState.PrintingSlow;  					}    					return "";    				case RecoveryState.PrintingSlow:  					{  						string lineToSend = internalStream.ReadLine();  						if (lineToSend == null)  						{  							return null;  						}    						if (!GCodeFile.IsLayerChange(lineToSend))  						{  							// have not seen the end of this layer so keep printing slow  							if (LineIsMovement(lineToSend))  							{  								PrinterMove currentMove = GetPosition(lineToSend' lastDestination);  								PrinterMove moveToSend = currentMove;    								moveToSend.feedRate = recoverFeedRate;    								lineToSend = CreateMovementLine(moveToSend' lastDestination);  								lastDestination = currentMove;  								return lineToSend;  							}    							lastLine = lineToSend;    							return lineToSend;  						}  					}    					// we only fall through to here after seeing the next "; Layer:"  					RecoveryState = RecoveryState.PrintingToEnd;  					return "";    				case RecoveryState.PrintingToEnd:  					return internalStream.ReadLine();  			}
Magic Number,MatterControl.Printing.Pipelines,PrintRecoveryStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\PrintRecoveryStream.cs,ReadLine,The following statement contains a magic number: switch (RecoveryState)  			{  				// heat the extrude to remove it from the part  				case RecoveryState.RemoveHeating:  					// TODO: make sure we heat up all the extruders that we need to (all that are used)  					queuedCommands.Add("G21; set units to millimeters");  					queuedCommands.Add("M107; fan off");  					queuedCommands.Add("T0; set the active extruder to 0");  					queuedCommands.Add("G90; use absolute coordinates");  					queuedCommands.Add("G92 E0; reset the expected extruder position");  					queuedCommands.Add("M82; use absolute distance for extrusion");    					bool hasHeatedBed = printer.Settings.GetValue<bool>(SettingsKey.has_heated_bed);  					double bedTemp = printer.Settings.GetValue<double>(SettingsKey.bed_temperature);  					if (hasHeatedBed && bedTemp > 0)  					{  						// start heating the bed  						queuedCommands.Add($"M140 S{bedTemp}");  					}    					// heat up the extruder  					queuedCommands.Add("M109 S{0}".FormatWith(printer.Settings.Helpers.ExtruderTargetTemperature(0)));    					if (hasHeatedBed && bedTemp > 0)  					{  						// finish heating the bed  						queuedCommands.Add($"M190 S{bedTemp}");  					}    					RecoveryState = RecoveryState.Raising;  					lastLine = "";  					return "";    				// remove it from the part  				case RecoveryState.Raising:  					// We don't know where the printer is for sure (it may have been turned off). Disable leveling until we know where it is.  					printer.Connection.AllowLeveling = false;  					queuedCommands.Add("M114 ; get current position");  					queuedCommands.Add("G91 ; move relative");  					queuedCommands.Add("G1 Z10 F{0}".FormatWith(printer.Settings.ZSpeed()));  					queuedCommands.Add("G90 ; move absolute");  					RecoveryState = RecoveryState.Homing;  					lastLine = "";  					return "";    				// if top homing' home the extruder  				case RecoveryState.Homing:  					if (printer.Settings.GetValue<bool>(SettingsKey.z_homes_to_max))  					{  						queuedCommands.Add("G28");  					}  					else  					{  						// home x  						queuedCommands.Add("G28 X0");  						// home y  						queuedCommands.Add("G28 Y0");  						// move to the place we can home z from  						Vector2 recoveryPositionXy = printer.Settings.GetValue<Vector2>(SettingsKey.recover_position_before_z_home);  						queuedCommands.Add("G1 X{0:0.###}Y{1:0.###}F{2}".FormatWith(recoveryPositionXy.X' recoveryPositionXy.Y' printer.Settings.XSpeed()));  						// home z  						queuedCommands.Add("G28 Z0");  					}    					// We now know where the printer is re-enable print leveling  					printer.Connection.AllowLeveling = true;  					RecoveryState = RecoveryState.FindingRecoveryLayer;  					return "";    				// This is to recover printing if an out a filament occurs.  				// Help the user move the extruder down to just touching the part  				case RecoveryState.FindingRecoveryLayer:  					if (false) // help the user get the head to the right position  					{  						// move to above the completed print  						// move over a know good part of the model at the current top layer (extrude vertex from gcode)  						// let the user move down until they like the height  						// calculate that position and continue  					}  					else // we are resuming because of disconnect or reset' skip this  					{  						RecoveryState = RecoveryState.SkippingGCode;  						goto case RecoveryState.SkippingGCode;  					}    				case RecoveryState.SkippingGCode:  					// run through the gcode that the device expected looking for things like temp  					// and skip everything else until we get to the point we left off last time  					int commandCount = 0;  					boundsOfSkippedLayers = RectangleDouble.ZeroIntersection;  					while (internalStream.GCodeFile.PercentComplete(internalStream.LineIndex) < percentDone)  					{  						string line = internalStream.ReadLine();  						if (line == null)  						{  							break;  						}    						commandCount++;    						// make sure we don't parse comments  						if (line.Contains(";"))  						{  							line = line.Split(';')[0];  						}    						lastDestination = GetPosition(line' lastDestination);    						if (commandCount > 100)  						{  							boundsOfSkippedLayers.ExpandToInclude(lastDestination.position.Xy);  						}    						// check if the line is something we want to send to the printer (like a temp)  						if (line.StartsWith("M109") // heat and wait extruder  							|| line.StartsWith("M104") // heat extruder  							|| line.StartsWith("M190") // heat and wait bed  							|| line.StartsWith("M140") // heat bed  							|| line.StartsWith("T") // switch extruder  							|| line.StartsWith("M106") // fan on  							|| line.StartsWith("M107") // fan off  							|| line.StartsWith("G92")) // set position  						{  							lastLine = line;    							return line;  						}  					}    					RecoveryState = RecoveryState.PrimingAndMovingToStart;    					// make sure we always- pick up the last movement  					boundsOfSkippedLayers.ExpandToInclude(lastDestination.position.Xy);  					return "";    				case RecoveryState.PrimingAndMovingToStart:  					{  						if (printer.Settings.GetValue("z_homes_to_max") == "0") // we are homed to the bed  						{  							// move to the height we can recover printing from  							Vector2 recoverPositionXy = printer.Settings.GetValue<Vector2>(SettingsKey.recover_position_before_z_home);  							queuedCommands.Add(CreateMovementLine(new PrinterMove(new Vector3(recoverPositionXy.X' recoverPositionXy.Y' lastDestination.position.Z)' 0' printer.Settings.ZSpeed())));  						}    						double extruderWidth = printer.Settings.GetValue<double>(SettingsKey.nozzle_diameter);  						// move to a position outside the printed bounds  						queuedCommands.Add(CreateMovementLine(new PrinterMove(  							new Vector3(boundsOfSkippedLayers.Left - extruderWidth * 2' boundsOfSkippedLayers.Bottom + boundsOfSkippedLayers.Height / 2' lastDestination.position.Z)'  							0'  							printer.Settings.XSpeed())));    						// let's prime the extruder  						queuedCommands.Add("G1 E10 F{0}".FormatWith(printer.Settings.EFeedRate(0))); // extrude 10  						queuedCommands.Add("G1 E9"); // and retract a bit    						// move to the actual print position  						queuedCommands.Add(CreateMovementLine(new PrinterMove(lastDestination.position' 0' printer.Settings.XSpeed())));    						// reset the printer to know where the filament should be  						queuedCommands.Add("G92 E{0}".FormatWith(lastDestination.extrusion));  						RecoveryState = RecoveryState.PrintingSlow;  					}    					return "";    				case RecoveryState.PrintingSlow:  					{  						string lineToSend = internalStream.ReadLine();  						if (lineToSend == null)  						{  							return null;  						}    						if (!GCodeFile.IsLayerChange(lineToSend))  						{  							// have not seen the end of this layer so keep printing slow  							if (LineIsMovement(lineToSend))  							{  								PrinterMove currentMove = GetPosition(lineToSend' lastDestination);  								PrinterMove moveToSend = currentMove;    								moveToSend.feedRate = recoverFeedRate;    								lineToSend = CreateMovementLine(moveToSend' lastDestination);  								lastDestination = currentMove;  								return lineToSend;  							}    							lastLine = lineToSend;    							return lineToSend;  						}  					}    					// we only fall through to here after seeing the next "; Layer:"  					RecoveryState = RecoveryState.PrintingToEnd;  					return "";    				case RecoveryState.PrintingToEnd:  					return internalStream.ReadLine();  			}
Magic Number,MatterControl.Printing.Pipelines,PrintRecoveryStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\PrintRecoveryStream.cs,ReadLine,The following statement contains a magic number: switch (RecoveryState)  			{  				// heat the extrude to remove it from the part  				case RecoveryState.RemoveHeating:  					// TODO: make sure we heat up all the extruders that we need to (all that are used)  					queuedCommands.Add("G21; set units to millimeters");  					queuedCommands.Add("M107; fan off");  					queuedCommands.Add("T0; set the active extruder to 0");  					queuedCommands.Add("G90; use absolute coordinates");  					queuedCommands.Add("G92 E0; reset the expected extruder position");  					queuedCommands.Add("M82; use absolute distance for extrusion");    					bool hasHeatedBed = printer.Settings.GetValue<bool>(SettingsKey.has_heated_bed);  					double bedTemp = printer.Settings.GetValue<double>(SettingsKey.bed_temperature);  					if (hasHeatedBed && bedTemp > 0)  					{  						// start heating the bed  						queuedCommands.Add($"M140 S{bedTemp}");  					}    					// heat up the extruder  					queuedCommands.Add("M109 S{0}".FormatWith(printer.Settings.Helpers.ExtruderTargetTemperature(0)));    					if (hasHeatedBed && bedTemp > 0)  					{  						// finish heating the bed  						queuedCommands.Add($"M190 S{bedTemp}");  					}    					RecoveryState = RecoveryState.Raising;  					lastLine = "";  					return "";    				// remove it from the part  				case RecoveryState.Raising:  					// We don't know where the printer is for sure (it may have been turned off). Disable leveling until we know where it is.  					printer.Connection.AllowLeveling = false;  					queuedCommands.Add("M114 ; get current position");  					queuedCommands.Add("G91 ; move relative");  					queuedCommands.Add("G1 Z10 F{0}".FormatWith(printer.Settings.ZSpeed()));  					queuedCommands.Add("G90 ; move absolute");  					RecoveryState = RecoveryState.Homing;  					lastLine = "";  					return "";    				// if top homing' home the extruder  				case RecoveryState.Homing:  					if (printer.Settings.GetValue<bool>(SettingsKey.z_homes_to_max))  					{  						queuedCommands.Add("G28");  					}  					else  					{  						// home x  						queuedCommands.Add("G28 X0");  						// home y  						queuedCommands.Add("G28 Y0");  						// move to the place we can home z from  						Vector2 recoveryPositionXy = printer.Settings.GetValue<Vector2>(SettingsKey.recover_position_before_z_home);  						queuedCommands.Add("G1 X{0:0.###}Y{1:0.###}F{2}".FormatWith(recoveryPositionXy.X' recoveryPositionXy.Y' printer.Settings.XSpeed()));  						// home z  						queuedCommands.Add("G28 Z0");  					}    					// We now know where the printer is re-enable print leveling  					printer.Connection.AllowLeveling = true;  					RecoveryState = RecoveryState.FindingRecoveryLayer;  					return "";    				// This is to recover printing if an out a filament occurs.  				// Help the user move the extruder down to just touching the part  				case RecoveryState.FindingRecoveryLayer:  					if (false) // help the user get the head to the right position  					{  						// move to above the completed print  						// move over a know good part of the model at the current top layer (extrude vertex from gcode)  						// let the user move down until they like the height  						// calculate that position and continue  					}  					else // we are resuming because of disconnect or reset' skip this  					{  						RecoveryState = RecoveryState.SkippingGCode;  						goto case RecoveryState.SkippingGCode;  					}    				case RecoveryState.SkippingGCode:  					// run through the gcode that the device expected looking for things like temp  					// and skip everything else until we get to the point we left off last time  					int commandCount = 0;  					boundsOfSkippedLayers = RectangleDouble.ZeroIntersection;  					while (internalStream.GCodeFile.PercentComplete(internalStream.LineIndex) < percentDone)  					{  						string line = internalStream.ReadLine();  						if (line == null)  						{  							break;  						}    						commandCount++;    						// make sure we don't parse comments  						if (line.Contains(";"))  						{  							line = line.Split(';')[0];  						}    						lastDestination = GetPosition(line' lastDestination);    						if (commandCount > 100)  						{  							boundsOfSkippedLayers.ExpandToInclude(lastDestination.position.Xy);  						}    						// check if the line is something we want to send to the printer (like a temp)  						if (line.StartsWith("M109") // heat and wait extruder  							|| line.StartsWith("M104") // heat extruder  							|| line.StartsWith("M190") // heat and wait bed  							|| line.StartsWith("M140") // heat bed  							|| line.StartsWith("T") // switch extruder  							|| line.StartsWith("M106") // fan on  							|| line.StartsWith("M107") // fan off  							|| line.StartsWith("G92")) // set position  						{  							lastLine = line;    							return line;  						}  					}    					RecoveryState = RecoveryState.PrimingAndMovingToStart;    					// make sure we always- pick up the last movement  					boundsOfSkippedLayers.ExpandToInclude(lastDestination.position.Xy);  					return "";    				case RecoveryState.PrimingAndMovingToStart:  					{  						if (printer.Settings.GetValue("z_homes_to_max") == "0") // we are homed to the bed  						{  							// move to the height we can recover printing from  							Vector2 recoverPositionXy = printer.Settings.GetValue<Vector2>(SettingsKey.recover_position_before_z_home);  							queuedCommands.Add(CreateMovementLine(new PrinterMove(new Vector3(recoverPositionXy.X' recoverPositionXy.Y' lastDestination.position.Z)' 0' printer.Settings.ZSpeed())));  						}    						double extruderWidth = printer.Settings.GetValue<double>(SettingsKey.nozzle_diameter);  						// move to a position outside the printed bounds  						queuedCommands.Add(CreateMovementLine(new PrinterMove(  							new Vector3(boundsOfSkippedLayers.Left - extruderWidth * 2' boundsOfSkippedLayers.Bottom + boundsOfSkippedLayers.Height / 2' lastDestination.position.Z)'  							0'  							printer.Settings.XSpeed())));    						// let's prime the extruder  						queuedCommands.Add("G1 E10 F{0}".FormatWith(printer.Settings.EFeedRate(0))); // extrude 10  						queuedCommands.Add("G1 E9"); // and retract a bit    						// move to the actual print position  						queuedCommands.Add(CreateMovementLine(new PrinterMove(lastDestination.position' 0' printer.Settings.XSpeed())));    						// reset the printer to know where the filament should be  						queuedCommands.Add("G92 E{0}".FormatWith(lastDestination.extrusion));  						RecoveryState = RecoveryState.PrintingSlow;  					}    					return "";    				case RecoveryState.PrintingSlow:  					{  						string lineToSend = internalStream.ReadLine();  						if (lineToSend == null)  						{  							return null;  						}    						if (!GCodeFile.IsLayerChange(lineToSend))  						{  							// have not seen the end of this layer so keep printing slow  							if (LineIsMovement(lineToSend))  							{  								PrinterMove currentMove = GetPosition(lineToSend' lastDestination);  								PrinterMove moveToSend = currentMove;    								moveToSend.feedRate = recoverFeedRate;    								lineToSend = CreateMovementLine(moveToSend' lastDestination);  								lastDestination = currentMove;  								return lineToSend;  							}    							lastLine = lineToSend;    							return lineToSend;  						}  					}    					// we only fall through to here after seeing the next "; Layer:"  					RecoveryState = RecoveryState.PrintingToEnd;  					return "";    				case RecoveryState.PrintingToEnd:  					return internalStream.ReadLine();  			}
Magic Number,MatterControl.Printing.Pipelines,RequestTemperaturesStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\RequestTemperaturesStream.cs,RequestTemperaturesStream,The following statement contains a magic number: nextReadTimeMs = UiThread.CurrentTimerMs + 1000;
Magic Number,MatterControl.Printing.Pipelines,RequestTemperaturesStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\RequestTemperaturesStream.cs,ReadLine,The following statement contains a magic number: nextReadTimeMs = UiThread.CurrentTimerMs + 1000;
Magic Number,MatterControl.Printing.Pipelines,SoftwareEndstopsStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\SoftwareEndstopsStream.cs,CalculateBounds,The following statement contains a magic number: aabb.MaxXYZ.Z = 200;
Magic Number,MatterControl.Printing.Pipelines,SoftwareEndstopsStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\SoftwareEndstopsStream.cs,CalculateBounds,The following statement contains a magic number: aabb.ZSize < 10
Magic Number,MatterControl.Printing.Pipelines,SoftwareEndstopsStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\SoftwareEndstopsStream.cs,CalculateBounds,The following statement contains a magic number: aabb.MinXYZ.Z = -100;
Magic Number,MatterControl.Printing.Pipelines,SoftwareEndstopsStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\SoftwareEndstopsStream.cs,ClampToPrinter,The following statement contains a magic number: i < 3
Magic Number,MatterControl.Printing.Pipelines,ToolChangeStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\ToolChangeStream.cs,ReadLine,The following statement contains a magic number: return $"{lineToSend.Substring(0' 4)} T{requestedToolForTempChange} S{temp}";
Magic Number,MatterControl.Printing.Pipelines,ToolChangeStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\ToolChangeStream.cs,QueueAfterGCode,The following statement contains a magic number: currentPrinterTargeTemp > 0  				&& printer.Connection.GetActualHotendTemperature(RequestedTool) < nextToolTargetTemp - 3
Magic Number,MatterControl.Printing.Pipelines,WaitForTempStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\WaitForTempStream.cs,ReadLine,The following statement contains a magic number: switch (state)  			{  				case State.Passthrough:  					{  						string lineToSend = base.ReadLine();    						if(lineToSend == null)  						{  							return null;  						}    						if (lineToSend.EndsWith("; NO_PROCESSING"))  						{  							return lineToSend;  						}    						if (lineToSend.StartsWith("M"))  						{  							// initial test is just to see if it is an M109  							if (lineToSend.StartsWith("M109")) // extruder set and wait temp  							{  								var lineNoComment = lineToSend.Split(';')[0];    								if (lineNoComment.Contains("F") // If it has a control character F (auto temp)  									|| !lineNoComment.Contains("S")) // if it is a reset (has no S temperature)  								{  									// don't replace it  									return lineToSend;  								}    								// send an M104 instead  								waitWhenCooling = false;  								lineToSend = "M104" + lineToSend.Substring(4);  								GCodeFile.GetFirstNumberAfter("S"' lineToSend' ref targetTemp);  								extruderIndex = printer.Connection.ActiveExtruderIndex;  								GCodeFile.GetFirstNumberAfter("T"' lineToSend' ref extruderIndex);  								if (targetTemp > ignoreRequestIfBelowTemp)  								{  									if (extruderIndex == 1)  									{  										state = State.WaitingForT1Temp;  									}  									else  									{  										state = State.WaitingForT0Temp;  									}  									timeHaveBeenAtTemp.Reset();  								}  								else  								{  									Thread.Sleep(100); // sleep .1 second while waiting for temp  									return ""; // return nothing until we reach temp  								}  							}  							else if (lineToSend.StartsWith("M190")) // bed set and wait temp  							{  								// send an M140 instead  								bool gotR = GCodeFile.GetFirstNumberAfter("R"' lineToSend' ref targetTemp);  								bool gotS = GCodeFile.GetFirstNumberAfter("S"' lineToSend' ref targetTemp);  								if (gotR || gotS)  								{  									if (targetTemp > ignoreRequestIfBelowTemp)  									{  										waitWhenCooling = gotR;  										lineToSend = "M140 S" + targetTemp.ToString();  										state = State.WaitingForBedTemp;  										timeHaveBeenAtTemp.Reset();  									}  									else  									{  										Thread.Sleep(100); // sleep .1 second while waiting for temp  										return ""; // return nothing until we reach temp  									}  								}  								else  								{  									Thread.Sleep(100); // sleep .1 second while waiting for temp  									return ""; // return nothing until we reach temp  								}  							}  						}    						return lineToSend;  					}    				case State.WaitingForT0Temp:  				case State.WaitingForT1Temp:  					{  						double extruderTemp = printer.Connection.GetActualHotendTemperature((int)extruderIndex);  						bool tempWithinRange = extruderTemp >= targetTemp - sameTempRangeHotend   							&& extruderTemp <= targetTemp + sameTempRangeHotend;  						if (tempWithinRange && !timeHaveBeenAtTemp.IsRunning)  						{  							timeHaveBeenAtTemp.Start();  						}    						if (timeHaveBeenAtTemp.Elapsed.TotalSeconds > WaitAfterReachTempTime  							|| printer.Connection.PrintWasCanceled)  						{  							// switch to pass through and continue  							state = State.Passthrough;  							return "";  						}  						else  						{  							// send a wait command  							Thread.Sleep(100); // sleep .1 second while waiting for temp  							return ""; // return nothing until we reach temp  						}  					}    				case State.WaitingForBedTemp:  					{  						double bedTemp = printer.Connection.ActualBedTemperature;  						bool tempWithinRange;  						if (waitWhenCooling)  						{  							tempWithinRange = bedTemp >= targetTemp - sameTempRangeBed   								&& bedTemp <= targetTemp + sameTempRangeBed;  						}  						else  						{  							tempWithinRange = bedTemp >= targetTemp - sameTempRangeBed;  						}    						// Added R code for M190  						if (tempWithinRange && !timeHaveBeenAtTemp.IsRunning)  						{  							timeHaveBeenAtTemp.Start();  						}    						if (timeHaveBeenAtTemp.Elapsed.TotalSeconds > WaitAfterReachTempTime  							|| printer.Connection.PrintWasCanceled)  						{  							// switch to pass through and continue  							state = State.Passthrough;  							return "";  						}  						else  						{  							// send a wait command  							Thread.Sleep(100); // sleep .1 second while waiting for temp  							return ""; // return nothing until we reach temp  						}  					}  			}
Magic Number,MatterControl.Printing.Pipelines,WaitForTempStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\WaitForTempStream.cs,ReadLine,The following statement contains a magic number: switch (state)  			{  				case State.Passthrough:  					{  						string lineToSend = base.ReadLine();    						if(lineToSend == null)  						{  							return null;  						}    						if (lineToSend.EndsWith("; NO_PROCESSING"))  						{  							return lineToSend;  						}    						if (lineToSend.StartsWith("M"))  						{  							// initial test is just to see if it is an M109  							if (lineToSend.StartsWith("M109")) // extruder set and wait temp  							{  								var lineNoComment = lineToSend.Split(';')[0];    								if (lineNoComment.Contains("F") // If it has a control character F (auto temp)  									|| !lineNoComment.Contains("S")) // if it is a reset (has no S temperature)  								{  									// don't replace it  									return lineToSend;  								}    								// send an M104 instead  								waitWhenCooling = false;  								lineToSend = "M104" + lineToSend.Substring(4);  								GCodeFile.GetFirstNumberAfter("S"' lineToSend' ref targetTemp);  								extruderIndex = printer.Connection.ActiveExtruderIndex;  								GCodeFile.GetFirstNumberAfter("T"' lineToSend' ref extruderIndex);  								if (targetTemp > ignoreRequestIfBelowTemp)  								{  									if (extruderIndex == 1)  									{  										state = State.WaitingForT1Temp;  									}  									else  									{  										state = State.WaitingForT0Temp;  									}  									timeHaveBeenAtTemp.Reset();  								}  								else  								{  									Thread.Sleep(100); // sleep .1 second while waiting for temp  									return ""; // return nothing until we reach temp  								}  							}  							else if (lineToSend.StartsWith("M190")) // bed set and wait temp  							{  								// send an M140 instead  								bool gotR = GCodeFile.GetFirstNumberAfter("R"' lineToSend' ref targetTemp);  								bool gotS = GCodeFile.GetFirstNumberAfter("S"' lineToSend' ref targetTemp);  								if (gotR || gotS)  								{  									if (targetTemp > ignoreRequestIfBelowTemp)  									{  										waitWhenCooling = gotR;  										lineToSend = "M140 S" + targetTemp.ToString();  										state = State.WaitingForBedTemp;  										timeHaveBeenAtTemp.Reset();  									}  									else  									{  										Thread.Sleep(100); // sleep .1 second while waiting for temp  										return ""; // return nothing until we reach temp  									}  								}  								else  								{  									Thread.Sleep(100); // sleep .1 second while waiting for temp  									return ""; // return nothing until we reach temp  								}  							}  						}    						return lineToSend;  					}    				case State.WaitingForT0Temp:  				case State.WaitingForT1Temp:  					{  						double extruderTemp = printer.Connection.GetActualHotendTemperature((int)extruderIndex);  						bool tempWithinRange = extruderTemp >= targetTemp - sameTempRangeHotend   							&& extruderTemp <= targetTemp + sameTempRangeHotend;  						if (tempWithinRange && !timeHaveBeenAtTemp.IsRunning)  						{  							timeHaveBeenAtTemp.Start();  						}    						if (timeHaveBeenAtTemp.Elapsed.TotalSeconds > WaitAfterReachTempTime  							|| printer.Connection.PrintWasCanceled)  						{  							// switch to pass through and continue  							state = State.Passthrough;  							return "";  						}  						else  						{  							// send a wait command  							Thread.Sleep(100); // sleep .1 second while waiting for temp  							return ""; // return nothing until we reach temp  						}  					}    				case State.WaitingForBedTemp:  					{  						double bedTemp = printer.Connection.ActualBedTemperature;  						bool tempWithinRange;  						if (waitWhenCooling)  						{  							tempWithinRange = bedTemp >= targetTemp - sameTempRangeBed   								&& bedTemp <= targetTemp + sameTempRangeBed;  						}  						else  						{  							tempWithinRange = bedTemp >= targetTemp - sameTempRangeBed;  						}    						// Added R code for M190  						if (tempWithinRange && !timeHaveBeenAtTemp.IsRunning)  						{  							timeHaveBeenAtTemp.Start();  						}    						if (timeHaveBeenAtTemp.Elapsed.TotalSeconds > WaitAfterReachTempTime  							|| printer.Connection.PrintWasCanceled)  						{  							// switch to pass through and continue  							state = State.Passthrough;  							return "";  						}  						else  						{  							// send a wait command  							Thread.Sleep(100); // sleep .1 second while waiting for temp  							return ""; // return nothing until we reach temp  						}  					}  			}
Magic Number,MatterControl.Printing.Pipelines,WaitForTempStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\WaitForTempStream.cs,ReadLine,The following statement contains a magic number: switch (state)  			{  				case State.Passthrough:  					{  						string lineToSend = base.ReadLine();    						if(lineToSend == null)  						{  							return null;  						}    						if (lineToSend.EndsWith("; NO_PROCESSING"))  						{  							return lineToSend;  						}    						if (lineToSend.StartsWith("M"))  						{  							// initial test is just to see if it is an M109  							if (lineToSend.StartsWith("M109")) // extruder set and wait temp  							{  								var lineNoComment = lineToSend.Split(';')[0];    								if (lineNoComment.Contains("F") // If it has a control character F (auto temp)  									|| !lineNoComment.Contains("S")) // if it is a reset (has no S temperature)  								{  									// don't replace it  									return lineToSend;  								}    								// send an M104 instead  								waitWhenCooling = false;  								lineToSend = "M104" + lineToSend.Substring(4);  								GCodeFile.GetFirstNumberAfter("S"' lineToSend' ref targetTemp);  								extruderIndex = printer.Connection.ActiveExtruderIndex;  								GCodeFile.GetFirstNumberAfter("T"' lineToSend' ref extruderIndex);  								if (targetTemp > ignoreRequestIfBelowTemp)  								{  									if (extruderIndex == 1)  									{  										state = State.WaitingForT1Temp;  									}  									else  									{  										state = State.WaitingForT0Temp;  									}  									timeHaveBeenAtTemp.Reset();  								}  								else  								{  									Thread.Sleep(100); // sleep .1 second while waiting for temp  									return ""; // return nothing until we reach temp  								}  							}  							else if (lineToSend.StartsWith("M190")) // bed set and wait temp  							{  								// send an M140 instead  								bool gotR = GCodeFile.GetFirstNumberAfter("R"' lineToSend' ref targetTemp);  								bool gotS = GCodeFile.GetFirstNumberAfter("S"' lineToSend' ref targetTemp);  								if (gotR || gotS)  								{  									if (targetTemp > ignoreRequestIfBelowTemp)  									{  										waitWhenCooling = gotR;  										lineToSend = "M140 S" + targetTemp.ToString();  										state = State.WaitingForBedTemp;  										timeHaveBeenAtTemp.Reset();  									}  									else  									{  										Thread.Sleep(100); // sleep .1 second while waiting for temp  										return ""; // return nothing until we reach temp  									}  								}  								else  								{  									Thread.Sleep(100); // sleep .1 second while waiting for temp  									return ""; // return nothing until we reach temp  								}  							}  						}    						return lineToSend;  					}    				case State.WaitingForT0Temp:  				case State.WaitingForT1Temp:  					{  						double extruderTemp = printer.Connection.GetActualHotendTemperature((int)extruderIndex);  						bool tempWithinRange = extruderTemp >= targetTemp - sameTempRangeHotend   							&& extruderTemp <= targetTemp + sameTempRangeHotend;  						if (tempWithinRange && !timeHaveBeenAtTemp.IsRunning)  						{  							timeHaveBeenAtTemp.Start();  						}    						if (timeHaveBeenAtTemp.Elapsed.TotalSeconds > WaitAfterReachTempTime  							|| printer.Connection.PrintWasCanceled)  						{  							// switch to pass through and continue  							state = State.Passthrough;  							return "";  						}  						else  						{  							// send a wait command  							Thread.Sleep(100); // sleep .1 second while waiting for temp  							return ""; // return nothing until we reach temp  						}  					}    				case State.WaitingForBedTemp:  					{  						double bedTemp = printer.Connection.ActualBedTemperature;  						bool tempWithinRange;  						if (waitWhenCooling)  						{  							tempWithinRange = bedTemp >= targetTemp - sameTempRangeBed   								&& bedTemp <= targetTemp + sameTempRangeBed;  						}  						else  						{  							tempWithinRange = bedTemp >= targetTemp - sameTempRangeBed;  						}    						// Added R code for M190  						if (tempWithinRange && !timeHaveBeenAtTemp.IsRunning)  						{  							timeHaveBeenAtTemp.Start();  						}    						if (timeHaveBeenAtTemp.Elapsed.TotalSeconds > WaitAfterReachTempTime  							|| printer.Connection.PrintWasCanceled)  						{  							// switch to pass through and continue  							state = State.Passthrough;  							return "";  						}  						else  						{  							// send a wait command  							Thread.Sleep(100); // sleep .1 second while waiting for temp  							return ""; // return nothing until we reach temp  						}  					}  			}
Magic Number,MatterControl.Printing.Pipelines,WaitForTempStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\WaitForTempStream.cs,ReadLine,The following statement contains a magic number: switch (state)  			{  				case State.Passthrough:  					{  						string lineToSend = base.ReadLine();    						if(lineToSend == null)  						{  							return null;  						}    						if (lineToSend.EndsWith("; NO_PROCESSING"))  						{  							return lineToSend;  						}    						if (lineToSend.StartsWith("M"))  						{  							// initial test is just to see if it is an M109  							if (lineToSend.StartsWith("M109")) // extruder set and wait temp  							{  								var lineNoComment = lineToSend.Split(';')[0];    								if (lineNoComment.Contains("F") // If it has a control character F (auto temp)  									|| !lineNoComment.Contains("S")) // if it is a reset (has no S temperature)  								{  									// don't replace it  									return lineToSend;  								}    								// send an M104 instead  								waitWhenCooling = false;  								lineToSend = "M104" + lineToSend.Substring(4);  								GCodeFile.GetFirstNumberAfter("S"' lineToSend' ref targetTemp);  								extruderIndex = printer.Connection.ActiveExtruderIndex;  								GCodeFile.GetFirstNumberAfter("T"' lineToSend' ref extruderIndex);  								if (targetTemp > ignoreRequestIfBelowTemp)  								{  									if (extruderIndex == 1)  									{  										state = State.WaitingForT1Temp;  									}  									else  									{  										state = State.WaitingForT0Temp;  									}  									timeHaveBeenAtTemp.Reset();  								}  								else  								{  									Thread.Sleep(100); // sleep .1 second while waiting for temp  									return ""; // return nothing until we reach temp  								}  							}  							else if (lineToSend.StartsWith("M190")) // bed set and wait temp  							{  								// send an M140 instead  								bool gotR = GCodeFile.GetFirstNumberAfter("R"' lineToSend' ref targetTemp);  								bool gotS = GCodeFile.GetFirstNumberAfter("S"' lineToSend' ref targetTemp);  								if (gotR || gotS)  								{  									if (targetTemp > ignoreRequestIfBelowTemp)  									{  										waitWhenCooling = gotR;  										lineToSend = "M140 S" + targetTemp.ToString();  										state = State.WaitingForBedTemp;  										timeHaveBeenAtTemp.Reset();  									}  									else  									{  										Thread.Sleep(100); // sleep .1 second while waiting for temp  										return ""; // return nothing until we reach temp  									}  								}  								else  								{  									Thread.Sleep(100); // sleep .1 second while waiting for temp  									return ""; // return nothing until we reach temp  								}  							}  						}    						return lineToSend;  					}    				case State.WaitingForT0Temp:  				case State.WaitingForT1Temp:  					{  						double extruderTemp = printer.Connection.GetActualHotendTemperature((int)extruderIndex);  						bool tempWithinRange = extruderTemp >= targetTemp - sameTempRangeHotend   							&& extruderTemp <= targetTemp + sameTempRangeHotend;  						if (tempWithinRange && !timeHaveBeenAtTemp.IsRunning)  						{  							timeHaveBeenAtTemp.Start();  						}    						if (timeHaveBeenAtTemp.Elapsed.TotalSeconds > WaitAfterReachTempTime  							|| printer.Connection.PrintWasCanceled)  						{  							// switch to pass through and continue  							state = State.Passthrough;  							return "";  						}  						else  						{  							// send a wait command  							Thread.Sleep(100); // sleep .1 second while waiting for temp  							return ""; // return nothing until we reach temp  						}  					}    				case State.WaitingForBedTemp:  					{  						double bedTemp = printer.Connection.ActualBedTemperature;  						bool tempWithinRange;  						if (waitWhenCooling)  						{  							tempWithinRange = bedTemp >= targetTemp - sameTempRangeBed   								&& bedTemp <= targetTemp + sameTempRangeBed;  						}  						else  						{  							tempWithinRange = bedTemp >= targetTemp - sameTempRangeBed;  						}    						// Added R code for M190  						if (tempWithinRange && !timeHaveBeenAtTemp.IsRunning)  						{  							timeHaveBeenAtTemp.Start();  						}    						if (timeHaveBeenAtTemp.Elapsed.TotalSeconds > WaitAfterReachTempTime  							|| printer.Connection.PrintWasCanceled)  						{  							// switch to pass through and continue  							state = State.Passthrough;  							return "";  						}  						else  						{  							// send a wait command  							Thread.Sleep(100); // sleep .1 second while waiting for temp  							return ""; // return nothing until we reach temp  						}  					}  			}
Magic Number,MatterControl.Printing.Pipelines,WaitForTempStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\WaitForTempStream.cs,ReadLine,The following statement contains a magic number: switch (state)  			{  				case State.Passthrough:  					{  						string lineToSend = base.ReadLine();    						if(lineToSend == null)  						{  							return null;  						}    						if (lineToSend.EndsWith("; NO_PROCESSING"))  						{  							return lineToSend;  						}    						if (lineToSend.StartsWith("M"))  						{  							// initial test is just to see if it is an M109  							if (lineToSend.StartsWith("M109")) // extruder set and wait temp  							{  								var lineNoComment = lineToSend.Split(';')[0];    								if (lineNoComment.Contains("F") // If it has a control character F (auto temp)  									|| !lineNoComment.Contains("S")) // if it is a reset (has no S temperature)  								{  									// don't replace it  									return lineToSend;  								}    								// send an M104 instead  								waitWhenCooling = false;  								lineToSend = "M104" + lineToSend.Substring(4);  								GCodeFile.GetFirstNumberAfter("S"' lineToSend' ref targetTemp);  								extruderIndex = printer.Connection.ActiveExtruderIndex;  								GCodeFile.GetFirstNumberAfter("T"' lineToSend' ref extruderIndex);  								if (targetTemp > ignoreRequestIfBelowTemp)  								{  									if (extruderIndex == 1)  									{  										state = State.WaitingForT1Temp;  									}  									else  									{  										state = State.WaitingForT0Temp;  									}  									timeHaveBeenAtTemp.Reset();  								}  								else  								{  									Thread.Sleep(100); // sleep .1 second while waiting for temp  									return ""; // return nothing until we reach temp  								}  							}  							else if (lineToSend.StartsWith("M190")) // bed set and wait temp  							{  								// send an M140 instead  								bool gotR = GCodeFile.GetFirstNumberAfter("R"' lineToSend' ref targetTemp);  								bool gotS = GCodeFile.GetFirstNumberAfter("S"' lineToSend' ref targetTemp);  								if (gotR || gotS)  								{  									if (targetTemp > ignoreRequestIfBelowTemp)  									{  										waitWhenCooling = gotR;  										lineToSend = "M140 S" + targetTemp.ToString();  										state = State.WaitingForBedTemp;  										timeHaveBeenAtTemp.Reset();  									}  									else  									{  										Thread.Sleep(100); // sleep .1 second while waiting for temp  										return ""; // return nothing until we reach temp  									}  								}  								else  								{  									Thread.Sleep(100); // sleep .1 second while waiting for temp  									return ""; // return nothing until we reach temp  								}  							}  						}    						return lineToSend;  					}    				case State.WaitingForT0Temp:  				case State.WaitingForT1Temp:  					{  						double extruderTemp = printer.Connection.GetActualHotendTemperature((int)extruderIndex);  						bool tempWithinRange = extruderTemp >= targetTemp - sameTempRangeHotend   							&& extruderTemp <= targetTemp + sameTempRangeHotend;  						if (tempWithinRange && !timeHaveBeenAtTemp.IsRunning)  						{  							timeHaveBeenAtTemp.Start();  						}    						if (timeHaveBeenAtTemp.Elapsed.TotalSeconds > WaitAfterReachTempTime  							|| printer.Connection.PrintWasCanceled)  						{  							// switch to pass through and continue  							state = State.Passthrough;  							return "";  						}  						else  						{  							// send a wait command  							Thread.Sleep(100); // sleep .1 second while waiting for temp  							return ""; // return nothing until we reach temp  						}  					}    				case State.WaitingForBedTemp:  					{  						double bedTemp = printer.Connection.ActualBedTemperature;  						bool tempWithinRange;  						if (waitWhenCooling)  						{  							tempWithinRange = bedTemp >= targetTemp - sameTempRangeBed   								&& bedTemp <= targetTemp + sameTempRangeBed;  						}  						else  						{  							tempWithinRange = bedTemp >= targetTemp - sameTempRangeBed;  						}    						// Added R code for M190  						if (tempWithinRange && !timeHaveBeenAtTemp.IsRunning)  						{  							timeHaveBeenAtTemp.Start();  						}    						if (timeHaveBeenAtTemp.Elapsed.TotalSeconds > WaitAfterReachTempTime  							|| printer.Connection.PrintWasCanceled)  						{  							// switch to pass through and continue  							state = State.Passthrough;  							return "";  						}  						else  						{  							// send a wait command  							Thread.Sleep(100); // sleep .1 second while waiting for temp  							return ""; // return nothing until we reach temp  						}  					}  			}
Magic Number,MatterControl.Printing.Pipelines,WaitForTempStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\WaitForTempStream.cs,ReadLine,The following statement contains a magic number: switch (state)  			{  				case State.Passthrough:  					{  						string lineToSend = base.ReadLine();    						if(lineToSend == null)  						{  							return null;  						}    						if (lineToSend.EndsWith("; NO_PROCESSING"))  						{  							return lineToSend;  						}    						if (lineToSend.StartsWith("M"))  						{  							// initial test is just to see if it is an M109  							if (lineToSend.StartsWith("M109")) // extruder set and wait temp  							{  								var lineNoComment = lineToSend.Split(';')[0];    								if (lineNoComment.Contains("F") // If it has a control character F (auto temp)  									|| !lineNoComment.Contains("S")) // if it is a reset (has no S temperature)  								{  									// don't replace it  									return lineToSend;  								}    								// send an M104 instead  								waitWhenCooling = false;  								lineToSend = "M104" + lineToSend.Substring(4);  								GCodeFile.GetFirstNumberAfter("S"' lineToSend' ref targetTemp);  								extruderIndex = printer.Connection.ActiveExtruderIndex;  								GCodeFile.GetFirstNumberAfter("T"' lineToSend' ref extruderIndex);  								if (targetTemp > ignoreRequestIfBelowTemp)  								{  									if (extruderIndex == 1)  									{  										state = State.WaitingForT1Temp;  									}  									else  									{  										state = State.WaitingForT0Temp;  									}  									timeHaveBeenAtTemp.Reset();  								}  								else  								{  									Thread.Sleep(100); // sleep .1 second while waiting for temp  									return ""; // return nothing until we reach temp  								}  							}  							else if (lineToSend.StartsWith("M190")) // bed set and wait temp  							{  								// send an M140 instead  								bool gotR = GCodeFile.GetFirstNumberAfter("R"' lineToSend' ref targetTemp);  								bool gotS = GCodeFile.GetFirstNumberAfter("S"' lineToSend' ref targetTemp);  								if (gotR || gotS)  								{  									if (targetTemp > ignoreRequestIfBelowTemp)  									{  										waitWhenCooling = gotR;  										lineToSend = "M140 S" + targetTemp.ToString();  										state = State.WaitingForBedTemp;  										timeHaveBeenAtTemp.Reset();  									}  									else  									{  										Thread.Sleep(100); // sleep .1 second while waiting for temp  										return ""; // return nothing until we reach temp  									}  								}  								else  								{  									Thread.Sleep(100); // sleep .1 second while waiting for temp  									return ""; // return nothing until we reach temp  								}  							}  						}    						return lineToSend;  					}    				case State.WaitingForT0Temp:  				case State.WaitingForT1Temp:  					{  						double extruderTemp = printer.Connection.GetActualHotendTemperature((int)extruderIndex);  						bool tempWithinRange = extruderTemp >= targetTemp - sameTempRangeHotend   							&& extruderTemp <= targetTemp + sameTempRangeHotend;  						if (tempWithinRange && !timeHaveBeenAtTemp.IsRunning)  						{  							timeHaveBeenAtTemp.Start();  						}    						if (timeHaveBeenAtTemp.Elapsed.TotalSeconds > WaitAfterReachTempTime  							|| printer.Connection.PrintWasCanceled)  						{  							// switch to pass through and continue  							state = State.Passthrough;  							return "";  						}  						else  						{  							// send a wait command  							Thread.Sleep(100); // sleep .1 second while waiting for temp  							return ""; // return nothing until we reach temp  						}  					}    				case State.WaitingForBedTemp:  					{  						double bedTemp = printer.Connection.ActualBedTemperature;  						bool tempWithinRange;  						if (waitWhenCooling)  						{  							tempWithinRange = bedTemp >= targetTemp - sameTempRangeBed   								&& bedTemp <= targetTemp + sameTempRangeBed;  						}  						else  						{  							tempWithinRange = bedTemp >= targetTemp - sameTempRangeBed;  						}    						// Added R code for M190  						if (tempWithinRange && !timeHaveBeenAtTemp.IsRunning)  						{  							timeHaveBeenAtTemp.Start();  						}    						if (timeHaveBeenAtTemp.Elapsed.TotalSeconds > WaitAfterReachTempTime  							|| printer.Connection.PrintWasCanceled)  						{  							// switch to pass through and continue  							state = State.Passthrough;  							return "";  						}  						else  						{  							// send a wait command  							Thread.Sleep(100); // sleep .1 second while waiting for temp  							return ""; // return nothing until we reach temp  						}  					}  			}
Magic Number,MatterControl.Printing.PrintLeveling,LevelingFunctions,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Leveling\LevelingFunctions.cs,LevelingFunctions,The following statement contains a magic number: SampledPositions.Count > 2
Magic Number,MatterControl.Printing.PrintLeveling,LevelingFunctions,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Leveling\LevelingFunctions.cs,LevelingFunctions,The following statement contains a magic number: int extraXPosition = -50000;
Magic Number,MatterControl.Printing.PrintLeveling,LevelingFunctions,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Leveling\LevelingFunctions.cs,LevelingFunctions,The following statement contains a magic number: var triangles = DelaunayTriangulation<DefaultVertex' DefaultTriangulationCell<DefaultVertex>>.Create(vertices' .001);
Magic Number,MatterControl.Printing.PrintLeveling,LevelingFunctions,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Leveling\LevelingFunctions.cs,LevelingFunctions,The following statement contains a magic number: var p2 = triangle.Vertices[2].Position;
Magic Number,MatterControl.Printing.PrintLeveling,LevelingFunctions,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Leveling\LevelingFunctions.cs,GetCorrectRegion,The following statement contains a magic number: int xIndex = (int)Math.Round(currentDestination.X * 100 / bedSize.X);
Magic Number,MatterControl.Printing.PrintLeveling,LevelingFunctions,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Leveling\LevelingFunctions.cs,GetCorrectRegion,The following statement contains a magic number: int yIndex = (int)Math.Round(currentDestination.Y * 100 / bedSize.Y);
Magic Number,MatterControl.Printing.PrintLeveling,LevelingTriangle,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Leveling\LevelingFunctions.cs,LevelingTriangle,The following statement contains a magic number: this.Center = (V0 + V1 + V2) / 3;
Magic Number,MatterControl.Printing.PrintLeveling,LevelingTriangle,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Leveling\LevelingFunctions.cs,PointInPolyXY,The following statement contains a magic number: sumOfLineSides == -3 || sumOfLineSides == 3
Magic Number,MatterControl.Printing.PrintLeveling,LevelingTriangle,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Leveling\LevelingFunctions.cs,PointInPolyXY,The following statement contains a magic number: sumOfLineSides == -3 || sumOfLineSides == 3
Magic Number,MatterControl.Printing.PrintLeveling,LevelingPlan,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Leveling\LevelingPlan.cs,GetSampleRing,The following statement contains a magic number: double bedRadius = Math.Min(printer.Settings.GetValue<Vector2>(SettingsKey.bed_size).X' printer.Settings.GetValue<Vector2>(SettingsKey.bed_size).Y) / 2;
Magic Number,MatterControl.Printing.PrintLeveling,LevelingValidation,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Leveling\LevelingValidation.cs,NeedsToBeRun,The following statement contains a magic number: switch (levelingData.LevelingSystem)  			{  				case LevelingSystem.Probe3Points:  					if (levelingData.SampledPositions.Count != 3) // different criteria for what is not initialized  					{  						return true;  					}    					break;    				case LevelingSystem.Probe7PointRadial:  					if (levelingData.SampledPositions.Count != 7) // different criteria for what is not initialized  					{  						return true;  					}    					break;    				case LevelingSystem.Probe13PointRadial:  					if (levelingData.SampledPositions.Count != 13) // different criteria for what is not initialized  					{  						return true;  					}    					break;    				case LevelingSystem.Probe100PointRadial:  					if (levelingData.SampledPositions.Count != 100) // different criteria for what is not initialized  					{  						return true;  					}    					break;    				case LevelingSystem.Probe3x3Mesh:  					if (levelingData.SampledPositions.Count != 9) // different criteria for what is not initialized  					{  						return true;  					}    					break;    				case LevelingSystem.Probe5x5Mesh:  					if (levelingData.SampledPositions.Count != 25) // different criteria for what is not initialized  					{  						return true;  					}    					break;    				case LevelingSystem.Probe10x10Mesh:  					if (levelingData.SampledPositions.Count != 100) // different criteria for what is not initialized  					{  						return true;  					}    					break;    				case LevelingSystem.ProbeCustom:  					if (levelingData.SampledPositions.Count != LevelWizardCustom.ParseLevelingSamplePoints(printer).Count)  					{  						return true;  					}    					break;    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterControl.Printing.PrintLeveling,LevelingValidation,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Leveling\LevelingValidation.cs,NeedsToBeRun,The following statement contains a magic number: switch (levelingData.LevelingSystem)  			{  				case LevelingSystem.Probe3Points:  					if (levelingData.SampledPositions.Count != 3) // different criteria for what is not initialized  					{  						return true;  					}    					break;    				case LevelingSystem.Probe7PointRadial:  					if (levelingData.SampledPositions.Count != 7) // different criteria for what is not initialized  					{  						return true;  					}    					break;    				case LevelingSystem.Probe13PointRadial:  					if (levelingData.SampledPositions.Count != 13) // different criteria for what is not initialized  					{  						return true;  					}    					break;    				case LevelingSystem.Probe100PointRadial:  					if (levelingData.SampledPositions.Count != 100) // different criteria for what is not initialized  					{  						return true;  					}    					break;    				case LevelingSystem.Probe3x3Mesh:  					if (levelingData.SampledPositions.Count != 9) // different criteria for what is not initialized  					{  						return true;  					}    					break;    				case LevelingSystem.Probe5x5Mesh:  					if (levelingData.SampledPositions.Count != 25) // different criteria for what is not initialized  					{  						return true;  					}    					break;    				case LevelingSystem.Probe10x10Mesh:  					if (levelingData.SampledPositions.Count != 100) // different criteria for what is not initialized  					{  						return true;  					}    					break;    				case LevelingSystem.ProbeCustom:  					if (levelingData.SampledPositions.Count != LevelWizardCustom.ParseLevelingSamplePoints(printer).Count)  					{  						return true;  					}    					break;    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterControl.Printing.PrintLeveling,LevelingValidation,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Leveling\LevelingValidation.cs,NeedsToBeRun,The following statement contains a magic number: switch (levelingData.LevelingSystem)  			{  				case LevelingSystem.Probe3Points:  					if (levelingData.SampledPositions.Count != 3) // different criteria for what is not initialized  					{  						return true;  					}    					break;    				case LevelingSystem.Probe7PointRadial:  					if (levelingData.SampledPositions.Count != 7) // different criteria for what is not initialized  					{  						return true;  					}    					break;    				case LevelingSystem.Probe13PointRadial:  					if (levelingData.SampledPositions.Count != 13) // different criteria for what is not initialized  					{  						return true;  					}    					break;    				case LevelingSystem.Probe100PointRadial:  					if (levelingData.SampledPositions.Count != 100) // different criteria for what is not initialized  					{  						return true;  					}    					break;    				case LevelingSystem.Probe3x3Mesh:  					if (levelingData.SampledPositions.Count != 9) // different criteria for what is not initialized  					{  						return true;  					}    					break;    				case LevelingSystem.Probe5x5Mesh:  					if (levelingData.SampledPositions.Count != 25) // different criteria for what is not initialized  					{  						return true;  					}    					break;    				case LevelingSystem.Probe10x10Mesh:  					if (levelingData.SampledPositions.Count != 100) // different criteria for what is not initialized  					{  						return true;  					}    					break;    				case LevelingSystem.ProbeCustom:  					if (levelingData.SampledPositions.Count != LevelWizardCustom.ParseLevelingSamplePoints(printer).Count)  					{  						return true;  					}    					break;    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterControl.Printing.PrintLeveling,LevelingValidation,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Leveling\LevelingValidation.cs,NeedsToBeRun,The following statement contains a magic number: switch (levelingData.LevelingSystem)  			{  				case LevelingSystem.Probe3Points:  					if (levelingData.SampledPositions.Count != 3) // different criteria for what is not initialized  					{  						return true;  					}    					break;    				case LevelingSystem.Probe7PointRadial:  					if (levelingData.SampledPositions.Count != 7) // different criteria for what is not initialized  					{  						return true;  					}    					break;    				case LevelingSystem.Probe13PointRadial:  					if (levelingData.SampledPositions.Count != 13) // different criteria for what is not initialized  					{  						return true;  					}    					break;    				case LevelingSystem.Probe100PointRadial:  					if (levelingData.SampledPositions.Count != 100) // different criteria for what is not initialized  					{  						return true;  					}    					break;    				case LevelingSystem.Probe3x3Mesh:  					if (levelingData.SampledPositions.Count != 9) // different criteria for what is not initialized  					{  						return true;  					}    					break;    				case LevelingSystem.Probe5x5Mesh:  					if (levelingData.SampledPositions.Count != 25) // different criteria for what is not initialized  					{  						return true;  					}    					break;    				case LevelingSystem.Probe10x10Mesh:  					if (levelingData.SampledPositions.Count != 100) // different criteria for what is not initialized  					{  						return true;  					}    					break;    				case LevelingSystem.ProbeCustom:  					if (levelingData.SampledPositions.Count != LevelWizardCustom.ParseLevelingSamplePoints(printer).Count)  					{  						return true;  					}    					break;    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterControl.Printing.PrintLeveling,LevelingValidation,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Leveling\LevelingValidation.cs,NeedsToBeRun,The following statement contains a magic number: switch (levelingData.LevelingSystem)  			{  				case LevelingSystem.Probe3Points:  					if (levelingData.SampledPositions.Count != 3) // different criteria for what is not initialized  					{  						return true;  					}    					break;    				case LevelingSystem.Probe7PointRadial:  					if (levelingData.SampledPositions.Count != 7) // different criteria for what is not initialized  					{  						return true;  					}    					break;    				case LevelingSystem.Probe13PointRadial:  					if (levelingData.SampledPositions.Count != 13) // different criteria for what is not initialized  					{  						return true;  					}    					break;    				case LevelingSystem.Probe100PointRadial:  					if (levelingData.SampledPositions.Count != 100) // different criteria for what is not initialized  					{  						return true;  					}    					break;    				case LevelingSystem.Probe3x3Mesh:  					if (levelingData.SampledPositions.Count != 9) // different criteria for what is not initialized  					{  						return true;  					}    					break;    				case LevelingSystem.Probe5x5Mesh:  					if (levelingData.SampledPositions.Count != 25) // different criteria for what is not initialized  					{  						return true;  					}    					break;    				case LevelingSystem.Probe10x10Mesh:  					if (levelingData.SampledPositions.Count != 100) // different criteria for what is not initialized  					{  						return true;  					}    					break;    				case LevelingSystem.ProbeCustom:  					if (levelingData.SampledPositions.Count != LevelWizardCustom.ParseLevelingSamplePoints(printer).Count)  					{  						return true;  					}    					break;    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterControl.Printing.PrintLeveling,LevelingValidation,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Leveling\LevelingValidation.cs,NeedsToBeRun,The following statement contains a magic number: switch (levelingData.LevelingSystem)  			{  				case LevelingSystem.Probe3Points:  					if (levelingData.SampledPositions.Count != 3) // different criteria for what is not initialized  					{  						return true;  					}    					break;    				case LevelingSystem.Probe7PointRadial:  					if (levelingData.SampledPositions.Count != 7) // different criteria for what is not initialized  					{  						return true;  					}    					break;    				case LevelingSystem.Probe13PointRadial:  					if (levelingData.SampledPositions.Count != 13) // different criteria for what is not initialized  					{  						return true;  					}    					break;    				case LevelingSystem.Probe100PointRadial:  					if (levelingData.SampledPositions.Count != 100) // different criteria for what is not initialized  					{  						return true;  					}    					break;    				case LevelingSystem.Probe3x3Mesh:  					if (levelingData.SampledPositions.Count != 9) // different criteria for what is not initialized  					{  						return true;  					}    					break;    				case LevelingSystem.Probe5x5Mesh:  					if (levelingData.SampledPositions.Count != 25) // different criteria for what is not initialized  					{  						return true;  					}    					break;    				case LevelingSystem.Probe10x10Mesh:  					if (levelingData.SampledPositions.Count != 100) // different criteria for what is not initialized  					{  						return true;  					}    					break;    				case LevelingSystem.ProbeCustom:  					if (levelingData.SampledPositions.Count != LevelWizardCustom.ParseLevelingSamplePoints(printer).Count)  					{  						return true;  					}    					break;    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterControl.Printing.PrintLeveling,LevelingValidation,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Leveling\LevelingValidation.cs,NeedsToBeRun,The following statement contains a magic number: switch (levelingData.LevelingSystem)  			{  				case LevelingSystem.Probe3Points:  					if (levelingData.SampledPositions.Count != 3) // different criteria for what is not initialized  					{  						return true;  					}    					break;    				case LevelingSystem.Probe7PointRadial:  					if (levelingData.SampledPositions.Count != 7) // different criteria for what is not initialized  					{  						return true;  					}    					break;    				case LevelingSystem.Probe13PointRadial:  					if (levelingData.SampledPositions.Count != 13) // different criteria for what is not initialized  					{  						return true;  					}    					break;    				case LevelingSystem.Probe100PointRadial:  					if (levelingData.SampledPositions.Count != 100) // different criteria for what is not initialized  					{  						return true;  					}    					break;    				case LevelingSystem.Probe3x3Mesh:  					if (levelingData.SampledPositions.Count != 9) // different criteria for what is not initialized  					{  						return true;  					}    					break;    				case LevelingSystem.Probe5x5Mesh:  					if (levelingData.SampledPositions.Count != 25) // different criteria for what is not initialized  					{  						return true;  					}    					break;    				case LevelingSystem.Probe10x10Mesh:  					if (levelingData.SampledPositions.Count != 100) // different criteria for what is not initialized  					{  						return true;  					}    					break;    				case LevelingSystem.ProbeCustom:  					if (levelingData.SampledPositions.Count != LevelWizardCustom.ParseLevelingSamplePoints(printer).Count)  					{  						return true;  					}    					break;    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterControl.Printing.PrintLeveling,LevelWizard100PointRadial,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Leveling\LevelWizard100PointRadial.cs,GetPrintLevelPositionToSample,The following statement contains a magic number: int[] ringCounts = { 3' 6' 12' 26' 52 };
Magic Number,MatterControl.Printing.PrintLeveling,LevelWizard100PointRadial,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Leveling\LevelWizard100PointRadial.cs,GetPrintLevelPositionToSample,The following statement contains a magic number: int[] ringCounts = { 3' 6' 12' 26' 52 };
Magic Number,MatterControl.Printing.PrintLeveling,LevelWizard100PointRadial,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Leveling\LevelWizard100PointRadial.cs,GetPrintLevelPositionToSample,The following statement contains a magic number: int[] ringCounts = { 3' 6' 12' 26' 52 };
Magic Number,MatterControl.Printing.PrintLeveling,LevelWizard100PointRadial,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Leveling\LevelWizard100PointRadial.cs,GetPrintLevelPositionToSample,The following statement contains a magic number: int[] ringCounts = { 3' 6' 12' 26' 52 };
Magic Number,MatterControl.Printing.PrintLeveling,LevelWizard100PointRadial,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Leveling\LevelWizard100PointRadial.cs,GetPrintLevelPositionToSample,The following statement contains a magic number: int[] ringCounts = { 3' 6' 12' 26' 52 };
Magic Number,MatterControl.Printing.PrintLeveling,LevelWizard100PointRadial,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Leveling\LevelWizard100PointRadial.cs,GetPrintLevelPositionToSample,The following statement contains a magic number: double[] ringPhase = { 0' MathHelper.Tau * 2 / 3' MathHelper.Tau / 2' MathHelper.Tau / 2' MathHelper.Tau / 2 };
Magic Number,MatterControl.Printing.PrintLeveling,LevelWizard100PointRadial,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Leveling\LevelWizard100PointRadial.cs,GetPrintLevelPositionToSample,The following statement contains a magic number: double[] ringPhase = { 0' MathHelper.Tau * 2 / 3' MathHelper.Tau / 2' MathHelper.Tau / 2' MathHelper.Tau / 2 };
Magic Number,MatterControl.Printing.PrintLeveling,LevelWizard100PointRadial,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Leveling\LevelWizard100PointRadial.cs,GetPrintLevelPositionToSample,The following statement contains a magic number: double[] ringPhase = { 0' MathHelper.Tau * 2 / 3' MathHelper.Tau / 2' MathHelper.Tau / 2' MathHelper.Tau / 2 };
Magic Number,MatterControl.Printing.PrintLeveling,LevelWizard100PointRadial,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Leveling\LevelWizard100PointRadial.cs,GetPrintLevelPositionToSample,The following statement contains a magic number: double[] ringPhase = { 0' MathHelper.Tau * 2 / 3' MathHelper.Tau / 2' MathHelper.Tau / 2' MathHelper.Tau / 2 };
Magic Number,MatterControl.Printing.PrintLeveling,LevelWizard100PointRadial,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Leveling\LevelWizard100PointRadial.cs,GetPrintLevelPositionToSample,The following statement contains a magic number: double[] ringPhase = { 0' MathHelper.Tau * 2 / 3' MathHelper.Tau / 2' MathHelper.Tau / 2' MathHelper.Tau / 2 };
Magic Number,MatterControl.Printing.PrintLeveling,LevelWizard100PointRadial,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Leveling\LevelWizard100PointRadial.cs,GetPrintLevelPositionToSample,The following statement contains a magic number: double step = .9 / 5;
Magic Number,MatterControl.Printing.PrintLeveling,LevelWizard100PointRadial,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Leveling\LevelWizard100PointRadial.cs,GetPrintLevelPositionToSample,The following statement contains a magic number: double step = .9 / 5;
Magic Number,MatterControl.Printing.PrintLeveling,LevelWizard100PointRadial,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Leveling\LevelWizard100PointRadial.cs,GetPrintLevelPositionToSample,The following statement contains a magic number: i < 5
Magic Number,MatterControl.Printing.PrintLeveling,LevelWizard13PointRadial,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Leveling\LevelWizard13PointRadial.cs,GetPrintLevelPositionToSample,The following statement contains a magic number: GetSampleRing(4' .45' 0)
Magic Number,MatterControl.Printing.PrintLeveling,LevelWizard13PointRadial,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Leveling\LevelWizard13PointRadial.cs,GetPrintLevelPositionToSample,The following statement contains a magic number: GetSampleRing(4' .45' 0)
Magic Number,MatterControl.Printing.PrintLeveling,LevelWizard13PointRadial,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Leveling\LevelWizard13PointRadial.cs,GetPrintLevelPositionToSample,The following statement contains a magic number: GetSampleRing(8' .9' MathHelper.Tau * 3 / 4)
Magic Number,MatterControl.Printing.PrintLeveling,LevelWizard13PointRadial,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Leveling\LevelWizard13PointRadial.cs,GetPrintLevelPositionToSample,The following statement contains a magic number: GetSampleRing(8' .9' MathHelper.Tau * 3 / 4)
Magic Number,MatterControl.Printing.PrintLeveling,LevelWizard13PointRadial,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Leveling\LevelWizard13PointRadial.cs,GetPrintLevelPositionToSample,The following statement contains a magic number: GetSampleRing(8' .9' MathHelper.Tau * 3 / 4)
Magic Number,MatterControl.Printing.PrintLeveling,LevelWizard13PointRadial,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Leveling\LevelWizard13PointRadial.cs,GetPrintLevelPositionToSample,The following statement contains a magic number: GetSampleRing(8' .9' MathHelper.Tau * 3 / 4)
Magic Number,MatterControl.Printing.PrintLeveling,LevelWizard3Point,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Leveling\LevelWizard3Point.cs,GetPrintLevelPositionToSample,The following statement contains a magic number: Vector2 firstPosition = new Vector2(printCenter.X' printCenter.Y + (bedSize.Y / 2) * .5);
Magic Number,MatterControl.Printing.PrintLeveling,LevelWizard3Point,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Leveling\LevelWizard3Point.cs,GetPrintLevelPositionToSample,The following statement contains a magic number: Vector2 firstPosition = new Vector2(printCenter.X' printCenter.Y + (bedSize.Y / 2) * .5);
Magic Number,MatterControl.Printing.PrintLeveling,LevelWizard3Point,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Leveling\LevelWizard3Point.cs,GetPrintLevelPositionToSample,The following statement contains a magic number: yield return Vector2.Rotate(firstPosition' MathHelper.Tau / 3);
Magic Number,MatterControl.Printing.PrintLeveling,LevelWizard3Point,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Leveling\LevelWizard3Point.cs,GetPrintLevelPositionToSample,The following statement contains a magic number: yield return Vector2.Rotate(firstPosition' MathHelper.Tau * 2 / 3);
Magic Number,MatterControl.Printing.PrintLeveling,LevelWizard3Point,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Leveling\LevelWizard3Point.cs,GetPrintLevelPositionToSample,The following statement contains a magic number: yield return Vector2.Rotate(firstPosition' MathHelper.Tau * 2 / 3);
Magic Number,MatterControl.Printing.PrintLeveling,LevelWizard7PointRadial,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Leveling\LevelWizard7PointRadial.cs,GetPrintLevelPositionToSample,The following statement contains a magic number: GetSampleRing(6' .9' 0)
Magic Number,MatterControl.Printing.PrintLeveling,LevelWizard7PointRadial,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Leveling\LevelWizard7PointRadial.cs,GetPrintLevelPositionToSample,The following statement contains a magic number: GetSampleRing(6' .9' 0)
Magic Number,MatterControl.Printing.PrintLeveling,LevelWizardMesh,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Leveling\LevelWizardMesh.cs,GetPrintLevelPositionToSample,The following statement contains a magic number: bedSize *= 1.0 / Math.Sqrt(2);
Magic Number,MatterControl.Printing.PrintLeveling,LevelWizardMesh,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Leveling\LevelWizardMesh.cs,GetPrintLevelPositionToSample,The following statement contains a magic number: double halfXSize = (bedSize.X / 2) * .8;
Magic Number,MatterControl.Printing.PrintLeveling,LevelWizardMesh,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Leveling\LevelWizardMesh.cs,GetPrintLevelPositionToSample,The following statement contains a magic number: double halfXSize = (bedSize.X / 2) * .8;
Magic Number,MatterControl.Printing.PrintLeveling,LevelWizardMesh,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Leveling\LevelWizardMesh.cs,GetPrintLevelPositionToSample,The following statement contains a magic number: double xStep = (halfXSize * 2) / (gridWidth - 1);
Magic Number,MatterControl.Printing.PrintLeveling,LevelWizardMesh,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Leveling\LevelWizardMesh.cs,GetPrintLevelPositionToSample,The following statement contains a magic number: double halfYSize = (bedSize.Y / 2) * .8;
Magic Number,MatterControl.Printing.PrintLeveling,LevelWizardMesh,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Leveling\LevelWizardMesh.cs,GetPrintLevelPositionToSample,The following statement contains a magic number: double halfYSize = (bedSize.Y / 2) * .8;
Magic Number,MatterControl.Printing.PrintLeveling,LevelWizardMesh,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Leveling\LevelWizardMesh.cs,GetPrintLevelPositionToSample,The following statement contains a magic number: double yStep = (halfYSize * 2) / (gridHeight - 1);
Magic Number,MatterControl.Printing.PrintLeveling,LevelWizardMesh,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Leveling\LevelWizardMesh.cs,GetPrintLevelPositionToSample,The following statement contains a magic number: (y % 2) == 1
Duplicate Code,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The method contains a code clone-set at the following line numbers (starting from the method definition): ((127' 151)' (224' 248))
Missing Default,MatterHackers.SerialPortCommunication.FrostedSerial,FrostedSerialPortStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Communication\FrostedSerial\FrostedSerialStream.cs,SetFrostedAttributes,The following switch statement is missing a default case: switch (stopBits)  			{  				case StopBits.None:  					break;    				case StopBits.One:  					unchecked  					{  						newtio.c_cflag &= (uint)-(uint)e_c_oflag.CSTOPB;  					}  					break;    				case StopBits.Two:  					newtio.c_cflag |= (uint)e_c_oflag.CSTOPB;  					break;    				case StopBits.OnePointFive:  					break;  			}
Missing Default,MatterHackers.SerialPortCommunication.FrostedSerial,FrostedSerialPortStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Communication\FrostedSerial\FrostedSerialStream.cs,SetFrostedAttributes,The following switch statement is missing a default case: switch (parity)  			{  				case Parity.None: /* None */  					newtio.c_cflag &= ~(uint)(e_c_oflag.PARENB | e_c_oflag.PARODD);  					break;    				case Parity.Odd: /* Odd */  					newtio.c_cflag |= (uint)(e_c_oflag.PARENB | e_c_oflag.PARODD);  					break;    				case Parity.Even: /* Even */  					newtio.c_cflag &= ~(uint)(e_c_oflag.PARODD);  					newtio.c_cflag |= (uint)(e_c_oflag.PARENB);  					break;    				case Parity.Mark: /* Mark */  					/* XXX unhandled */  					break;    				case Parity.Space: /* Space */  					/* XXX unhandled */  					break;  			}
Missing Default,MatterHackers.SerialPortCommunication.FrostedSerial,FrostedSerialPortStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\Communication\FrostedSerial\FrostedSerialStream.cs,SetFrostedAttributes,The following switch statement is missing a default case: switch (handshake)  			{  				case Handshake.None: /* None */  					/* do nothing */  					break;    				case Handshake.RequestToSend: /* RequestToSend (RTS) */  #if CRTSCTS  				newtio.c_cflag |= CRTSCTS;  #endif //* def CRTSCTS */  					break;    				case Handshake.RequestToSendXOnXOff: /* RequestToSendXOnXOff (RTS + XON/XOFF) */  #if CRTSCTS  				newtio.c_cflag |= CRTSCTS;  #endif //* def CRTSCTS */  				/* fall through */  				case Handshake.XOnXOff: /* XOnXOff */  					newtio.c_iflag |= (uint)(e_c_iflag.IXOFF | e_c_iflag.IXON);  					break;  			}
Missing Default,MatterControl.Printing,PrinterConnection,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\PrinterConnection.cs,PrinterConnection,The following switch statement is missing a default case: switch (stringEvent.Data)  				{  					case SettingsKey.temperature:  						extruder = 0;  						break;    					case SettingsKey.temperature1:  						extruder = 1;  						break;    					case SettingsKey.temperature2:  						extruder = 2;  						break;    					case SettingsKey.temperature3:  						extruder = 3;  						break;  				}
Missing Default,MatterControl.Printing,PrinterConnection,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\PrinterConnection.cs,Stop,The following switch statement is missing a default case: switch (CommunicationState)  			{  				case CommunicationStates.PrintingFromSd:  					CancelSDCardPrint();  					break;    				case CommunicationStates.Printing:  					CancelPrint(markPrintCanceled);  					break;    				case CommunicationStates.Paused:  					if (PrePauseCommunicationState == CommunicationStates.PrintingFromSd)  					{  						CancelSDCardPrint();  						CommunicationState = CommunicationStates.Connected;  					}  					else  					{  						CancelPrint(markPrintCanceled);  						// We have to continue printing the end gcode' so we set this to Printing.  						CommunicationState = CommunicationStates.Printing;  					}    					break;    				case CommunicationStates.AttemptingToConnect:  					CommunicationState = CommunicationStates.FailedToConnect;  					// connectThread.Join(JoinThreadTimeoutMs);    					CommunicationState = CommunicationStates.Disconnecting;  					currentReadThreadIndex++;  					if (serialPort != null)  					{  						serialPort.Close();  						serialPort.Dispose();  						serialPort = null;  					}    					CommunicationState = CommunicationStates.Disconnected;  					break;    				case CommunicationStates.PreparingToPrint:  					CommunicationState = CommunicationStates.Connected;  					break;  			}
Missing Default,MatterHackers.MatterControl.Plugins.X3GDriver,X3GPacketAnalyzer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GReader.cs,analyzePayload,The following switch statement is missing a default case: switch (payloadLength)  				{  					case 23: //22 is the length of the get position response + 1 for response code  						if (printerDetails.currentPosition.Length != 0)//if we are not connecting just now to the printer we will report back the target move position  						{  							Vector3 printerPos = printerDetails.targetMovePosition;  							payloadStrBuilder.Append(String.Format(" C: X:{0} Y:{1} Z:{2} E:{3}"' printerPos.X' printerPos.Y' printerPos.Z' 0));  						}  						else//if we have not told the printer to move yet we get the location the printer actually thinks it is at  						{  							Vector3 posFromPrinter = new Vector3();  							posFromPrinter.X = translateInt32(3);  							posFromPrinter.Y = translateInt32(7);  							posFromPrinter.Z = translateInt32(11);    							posFromPrinter.X = posFromPrinter.X / printerDetails.stepsPerMm.X;  							posFromPrinter.Y = posFromPrinter.Y / printerDetails.stepsPerMm.Y;  							posFromPrinter.Z = posFromPrinter.Z / printerDetails.stepsPerMm.Z;    							payloadStrBuilder.Append(String.Format(" C: X:{0} Y:{1} Z:{2} E:{3}"' posFromPrinter.X' posFromPrinter.Y' posFromPrinter.Z' 0));  						}    						break;  					case 3: //Length of temperature response' temperature is requested individually for each extruder and bed separately. This collects the information and condenses it into one response to be sent to the printer  						if (!gCommandForResponse.Contains("M115"))  						{  							int temperature = translateInt16(3);  							printerDetails.teperatureResponseCount++;    							if (printerDetails.teperatureResponseCount == 1)  							{  								if (settings.GetValue<int>(SettingsKey.extruder_count) > 1)  								{  									temperatureResponseStrBuilder.Append(String.Format(" T0:{0}"' temperature));  								}  								else  								{  									temperatureResponseStrBuilder.Append(String.Format(" T:{0}"' temperature));  								}  							}  							else if (printerDetails.teperatureResponseCount == 2 && settings.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								temperatureResponseStrBuilder.Append(String.Format(" B:{0}"' temperature));  							}  							else  							{  								temperatureResponseStrBuilder.Append(String.Format(" T1:{0}"' temperature));  							}    							if (printerDetails.teperatureResponseCount == printerDetails.requiredTemperatureResponseCount)  							{  								payloadStrBuilder.Append(temperatureResponseStrBuilder.ToString());  								temperatureResponseStrBuilder.Clear();  								printerDetails.teperatureResponseCount = 0;  							}  						}  						break;  				}
Missing Default,MatterHackers.MatterControl.Plugins.X3GDriver,X3GWriter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Drivers\X3G\X3GWriter.cs,translate,The following switch statement is missing a default case: switch (c)  							{  								case 'b':  								case 'B':  									binaryPacket.addByte(Byte.Parse(commands[i]));  									break;  								case 'i':  								case 'I':  									binaryPacket.add16bits(int.Parse(commands[i]));  									break;  								case 'l':  								case 'L':  									binaryPacket.add32bits(long.Parse(commands[i]));  									break;  							}
Missing Default,MatterControl.Printing.Pipelines,PauseHandlingStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\PauseHandlingStream.cs,DoPause,The following switch statement is missing a default case: switch (pauseReason)  			{  				case PauseReason.UserRequested:  					// do nothing special  					break;    				case PauseReason.PauseLayerReached:  				case PauseReason.GCodeRequest:  					printer.Connection.OnPauseOnLayer(new PrintPauseEventArgs(printer.Connection.ActivePrintName' false' layerNumber));  					break;    				case PauseReason.FilamentRunout:  					printer.Connection.OnFilamentRunout(new PrintPauseEventArgs(printer.Connection.ActivePrintName' true' layerNumber));  					break;  			}
Missing Default,MatterControl.Printing.Pipelines,PrintRecoveryStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\PrintRecoveryStream.cs,ReadLine,The following switch statement is missing a default case: switch (RecoveryState)  			{  				// heat the extrude to remove it from the part  				case RecoveryState.RemoveHeating:  					// TODO: make sure we heat up all the extruders that we need to (all that are used)  					queuedCommands.Add("G21; set units to millimeters");  					queuedCommands.Add("M107; fan off");  					queuedCommands.Add("T0; set the active extruder to 0");  					queuedCommands.Add("G90; use absolute coordinates");  					queuedCommands.Add("G92 E0; reset the expected extruder position");  					queuedCommands.Add("M82; use absolute distance for extrusion");    					bool hasHeatedBed = printer.Settings.GetValue<bool>(SettingsKey.has_heated_bed);  					double bedTemp = printer.Settings.GetValue<double>(SettingsKey.bed_temperature);  					if (hasHeatedBed && bedTemp > 0)  					{  						// start heating the bed  						queuedCommands.Add($"M140 S{bedTemp}");  					}    					// heat up the extruder  					queuedCommands.Add("M109 S{0}".FormatWith(printer.Settings.Helpers.ExtruderTargetTemperature(0)));    					if (hasHeatedBed && bedTemp > 0)  					{  						// finish heating the bed  						queuedCommands.Add($"M190 S{bedTemp}");  					}    					RecoveryState = RecoveryState.Raising;  					lastLine = "";  					return "";    				// remove it from the part  				case RecoveryState.Raising:  					// We don't know where the printer is for sure (it may have been turned off). Disable leveling until we know where it is.  					printer.Connection.AllowLeveling = false;  					queuedCommands.Add("M114 ; get current position");  					queuedCommands.Add("G91 ; move relative");  					queuedCommands.Add("G1 Z10 F{0}".FormatWith(printer.Settings.ZSpeed()));  					queuedCommands.Add("G90 ; move absolute");  					RecoveryState = RecoveryState.Homing;  					lastLine = "";  					return "";    				// if top homing' home the extruder  				case RecoveryState.Homing:  					if (printer.Settings.GetValue<bool>(SettingsKey.z_homes_to_max))  					{  						queuedCommands.Add("G28");  					}  					else  					{  						// home x  						queuedCommands.Add("G28 X0");  						// home y  						queuedCommands.Add("G28 Y0");  						// move to the place we can home z from  						Vector2 recoveryPositionXy = printer.Settings.GetValue<Vector2>(SettingsKey.recover_position_before_z_home);  						queuedCommands.Add("G1 X{0:0.###}Y{1:0.###}F{2}".FormatWith(recoveryPositionXy.X' recoveryPositionXy.Y' printer.Settings.XSpeed()));  						// home z  						queuedCommands.Add("G28 Z0");  					}    					// We now know where the printer is re-enable print leveling  					printer.Connection.AllowLeveling = true;  					RecoveryState = RecoveryState.FindingRecoveryLayer;  					return "";    				// This is to recover printing if an out a filament occurs.  				// Help the user move the extruder down to just touching the part  				case RecoveryState.FindingRecoveryLayer:  					if (false) // help the user get the head to the right position  					{  						// move to above the completed print  						// move over a know good part of the model at the current top layer (extrude vertex from gcode)  						// let the user move down until they like the height  						// calculate that position and continue  					}  					else // we are resuming because of disconnect or reset' skip this  					{  						RecoveryState = RecoveryState.SkippingGCode;  						goto case RecoveryState.SkippingGCode;  					}    				case RecoveryState.SkippingGCode:  					// run through the gcode that the device expected looking for things like temp  					// and skip everything else until we get to the point we left off last time  					int commandCount = 0;  					boundsOfSkippedLayers = RectangleDouble.ZeroIntersection;  					while (internalStream.GCodeFile.PercentComplete(internalStream.LineIndex) < percentDone)  					{  						string line = internalStream.ReadLine();  						if (line == null)  						{  							break;  						}    						commandCount++;    						// make sure we don't parse comments  						if (line.Contains(";"))  						{  							line = line.Split(';')[0];  						}    						lastDestination = GetPosition(line' lastDestination);    						if (commandCount > 100)  						{  							boundsOfSkippedLayers.ExpandToInclude(lastDestination.position.Xy);  						}    						// check if the line is something we want to send to the printer (like a temp)  						if (line.StartsWith("M109") // heat and wait extruder  							|| line.StartsWith("M104") // heat extruder  							|| line.StartsWith("M190") // heat and wait bed  							|| line.StartsWith("M140") // heat bed  							|| line.StartsWith("T") // switch extruder  							|| line.StartsWith("M106") // fan on  							|| line.StartsWith("M107") // fan off  							|| line.StartsWith("G92")) // set position  						{  							lastLine = line;    							return line;  						}  					}    					RecoveryState = RecoveryState.PrimingAndMovingToStart;    					// make sure we always- pick up the last movement  					boundsOfSkippedLayers.ExpandToInclude(lastDestination.position.Xy);  					return "";    				case RecoveryState.PrimingAndMovingToStart:  					{  						if (printer.Settings.GetValue("z_homes_to_max") == "0") // we are homed to the bed  						{  							// move to the height we can recover printing from  							Vector2 recoverPositionXy = printer.Settings.GetValue<Vector2>(SettingsKey.recover_position_before_z_home);  							queuedCommands.Add(CreateMovementLine(new PrinterMove(new Vector3(recoverPositionXy.X' recoverPositionXy.Y' lastDestination.position.Z)' 0' printer.Settings.ZSpeed())));  						}    						double extruderWidth = printer.Settings.GetValue<double>(SettingsKey.nozzle_diameter);  						// move to a position outside the printed bounds  						queuedCommands.Add(CreateMovementLine(new PrinterMove(  							new Vector3(boundsOfSkippedLayers.Left - extruderWidth * 2' boundsOfSkippedLayers.Bottom + boundsOfSkippedLayers.Height / 2' lastDestination.position.Z)'  							0'  							printer.Settings.XSpeed())));    						// let's prime the extruder  						queuedCommands.Add("G1 E10 F{0}".FormatWith(printer.Settings.EFeedRate(0))); // extrude 10  						queuedCommands.Add("G1 E9"); // and retract a bit    						// move to the actual print position  						queuedCommands.Add(CreateMovementLine(new PrinterMove(lastDestination.position' 0' printer.Settings.XSpeed())));    						// reset the printer to know where the filament should be  						queuedCommands.Add("G92 E{0}".FormatWith(lastDestination.extrusion));  						RecoveryState = RecoveryState.PrintingSlow;  					}    					return "";    				case RecoveryState.PrintingSlow:  					{  						string lineToSend = internalStream.ReadLine();  						if (lineToSend == null)  						{  							return null;  						}    						if (!GCodeFile.IsLayerChange(lineToSend))  						{  							// have not seen the end of this layer so keep printing slow  							if (LineIsMovement(lineToSend))  							{  								PrinterMove currentMove = GetPosition(lineToSend' lastDestination);  								PrinterMove moveToSend = currentMove;    								moveToSend.feedRate = recoverFeedRate;    								lineToSend = CreateMovementLine(moveToSend' lastDestination);  								lastDestination = currentMove;  								return lineToSend;  							}    							lastLine = lineToSend;    							return lineToSend;  						}  					}    					// we only fall through to here after seeing the next "; Layer:"  					RecoveryState = RecoveryState.PrintingToEnd;  					return "";    				case RecoveryState.PrintingToEnd:  					return internalStream.ReadLine();  			}
Missing Default,MatterControl.Printing.Pipelines,ToolChangeStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\ToolChangeStream.cs,QueueAfterGCode,The following switch statement is missing a default case: switch (RequestedTool)  			{  				case 0:  					afterGcodeToQueue = printer.Settings.GetValue(SettingsKey.toolchange_gcode).Replace("\\n"' "\n");  					break;    				case 1:  					afterGcodeToQueue = printer.Settings.GetValue(SettingsKey.toolchange_gcode_1).Replace("\\n"' "\n");  					break;  			}
Missing Default,MatterControl.Printing.Pipelines,ToolChangeStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\ToolChangeStream.cs,QueueBeforeIfNeedToSwitchExtruders,The following switch statement is missing a default case: switch (RequestedTool)  				{  					case 0:  						beforeGcodeToQueue = printer.Settings.GetValue(SettingsKey.before_toolchange_gcode).Replace("\\n"' "\n");  						break;    					case 1:  						beforeGcodeToQueue = printer.Settings.GetValue(SettingsKey.before_toolchange_gcode_1).Replace("\\n"' "\n");  						break;  				}
Missing Default,MatterControl.Printing.Pipelines,WaitForTempStream,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControl.Printing\PrinterCommunication\Io\WaitForTempStream.cs,ReadLine,The following switch statement is missing a default case: switch (state)  			{  				case State.Passthrough:  					{  						string lineToSend = base.ReadLine();    						if(lineToSend == null)  						{  							return null;  						}    						if (lineToSend.EndsWith("; NO_PROCESSING"))  						{  							return lineToSend;  						}    						if (lineToSend.StartsWith("M"))  						{  							// initial test is just to see if it is an M109  							if (lineToSend.StartsWith("M109")) // extruder set and wait temp  							{  								var lineNoComment = lineToSend.Split(';')[0];    								if (lineNoComment.Contains("F") // If it has a control character F (auto temp)  									|| !lineNoComment.Contains("S")) // if it is a reset (has no S temperature)  								{  									// don't replace it  									return lineToSend;  								}    								// send an M104 instead  								waitWhenCooling = false;  								lineToSend = "M104" + lineToSend.Substring(4);  								GCodeFile.GetFirstNumberAfter("S"' lineToSend' ref targetTemp);  								extruderIndex = printer.Connection.ActiveExtruderIndex;  								GCodeFile.GetFirstNumberAfter("T"' lineToSend' ref extruderIndex);  								if (targetTemp > ignoreRequestIfBelowTemp)  								{  									if (extruderIndex == 1)  									{  										state = State.WaitingForT1Temp;  									}  									else  									{  										state = State.WaitingForT0Temp;  									}  									timeHaveBeenAtTemp.Reset();  								}  								else  								{  									Thread.Sleep(100); // sleep .1 second while waiting for temp  									return ""; // return nothing until we reach temp  								}  							}  							else if (lineToSend.StartsWith("M190")) // bed set and wait temp  							{  								// send an M140 instead  								bool gotR = GCodeFile.GetFirstNumberAfter("R"' lineToSend' ref targetTemp);  								bool gotS = GCodeFile.GetFirstNumberAfter("S"' lineToSend' ref targetTemp);  								if (gotR || gotS)  								{  									if (targetTemp > ignoreRequestIfBelowTemp)  									{  										waitWhenCooling = gotR;  										lineToSend = "M140 S" + targetTemp.ToString();  										state = State.WaitingForBedTemp;  										timeHaveBeenAtTemp.Reset();  									}  									else  									{  										Thread.Sleep(100); // sleep .1 second while waiting for temp  										return ""; // return nothing until we reach temp  									}  								}  								else  								{  									Thread.Sleep(100); // sleep .1 second while waiting for temp  									return ""; // return nothing until we reach temp  								}  							}  						}    						return lineToSend;  					}    				case State.WaitingForT0Temp:  				case State.WaitingForT1Temp:  					{  						double extruderTemp = printer.Connection.GetActualHotendTemperature((int)extruderIndex);  						bool tempWithinRange = extruderTemp >= targetTemp - sameTempRangeHotend   							&& extruderTemp <= targetTemp + sameTempRangeHotend;  						if (tempWithinRange && !timeHaveBeenAtTemp.IsRunning)  						{  							timeHaveBeenAtTemp.Start();  						}    						if (timeHaveBeenAtTemp.Elapsed.TotalSeconds > WaitAfterReachTempTime  							|| printer.Connection.PrintWasCanceled)  						{  							// switch to pass through and continue  							state = State.Passthrough;  							return "";  						}  						else  						{  							// send a wait command  							Thread.Sleep(100); // sleep .1 second while waiting for temp  							return ""; // return nothing until we reach temp  						}  					}    				case State.WaitingForBedTemp:  					{  						double bedTemp = printer.Connection.ActualBedTemperature;  						bool tempWithinRange;  						if (waitWhenCooling)  						{  							tempWithinRange = bedTemp >= targetTemp - sameTempRangeBed   								&& bedTemp <= targetTemp + sameTempRangeBed;  						}  						else  						{  							tempWithinRange = bedTemp >= targetTemp - sameTempRangeBed;  						}    						// Added R code for M190  						if (tempWithinRange && !timeHaveBeenAtTemp.IsRunning)  						{  							timeHaveBeenAtTemp.Start();  						}    						if (timeHaveBeenAtTemp.Elapsed.TotalSeconds > WaitAfterReachTempTime  							|| printer.Connection.PrintWasCanceled)  						{  							// switch to pass through and continue  							state = State.Passthrough;  							return "";  						}  						else  						{  							// send a wait command  							Thread.Sleep(100); // sleep .1 second while waiting for temp  							return ""; // return nothing until we reach temp  						}  					}  			}
