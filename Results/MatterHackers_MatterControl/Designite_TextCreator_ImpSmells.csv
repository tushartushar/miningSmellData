Implementation smell,Namespace,Class,File,Method,Description
Long Method,MatterHackers.MatterControl.Plugins.TextCreator,View3DTextCreator,C:\repos\MatterHackers_MatterControl\TextCreator\View3DTextCreator.cs,View3DTextCreator,The method has 100 lines of code.
Long Method,MatterHackers.MatterControl.Plugins.TextCreator,View3DTextCreator,C:\repos\MatterHackers_MatterControl\TextCreator\View3DTextCreator.cs,CreateRightButtonPanel,The method has 108 lines of code.
Complex Method,MatterHackers.MatterControl.Plugins.TextCreator,View3DTextCreator,C:\repos\MatterHackers_MatterControl\TextCreator\View3DTextCreator.cs,FindMeshGroupHitPosition,Cyclomatic complexity of the method is 8
Long Identifier,MatterHackers.MatterControl.Plugins.TextCreator,View3DTextCreator,C:\repos\MatterHackers_MatterControl\TextCreator\View3DTextCreator.cs,FindMeshGroupHitPosition,The length of the parameter meshViewerWidgetScreenPosition is 30.
Long Identifier,MatterHackers.MatterControl.Plugins.TextCreator,View3DTextCreator,C:\repos\MatterHackers_MatterControl\TextCreator\View3DTextCreator.cs,OnMouseMove,The length of the parameter meshViewerWidgetScreenPosition is 30.
Long Statement,MatterHackers.MatterControl.Plugins.TextCreator,View3DTextCreator,C:\repos\MatterHackers_MatterControl\TextCreator\View3DTextCreator.cs,OnMouseMove,The length of the statement  "			if (meshViewerWidget.TrackballTumbleWidget.TransformState == TrackBallController.MouseDownType.None && meshSelectInfo.downOnPart) " is 129.
Long Statement,MatterHackers.MatterControl.Plugins.TextCreator,View3DTextCreator,C:\repos\MatterHackers_MatterControl\TextCreator\View3DTextCreator.cs,OnMouseMove,The length of the statement  "				Vector2 meshViewerWidgetScreenPosition = meshViewerWidget.TransformFromParentSpace(this' new Vector2(mouseEvent.X' mouseEvent.Y)); " is 130.
Long Statement,MatterHackers.MatterControl.Plugins.TextCreator,View3DTextCreator,C:\repos\MatterHackers_MatterControl\TextCreator\View3DTextCreator.cs,insertTextBackgroundWorker_DoWork,The length of the statement  "					PlatingHelper.CreateITraceableForMeshGroup(asyncPlatingDatas' asyncMeshGroups' newIndex' (double progress0To1' string processingState' out bool continueProcessing) => " is 166.
Long Statement,MatterHackers.MatterControl.Plugins.TextCreator,View3DTextCreator,C:\repos\MatterHackers_MatterControl\TextCreator\View3DTextCreator.cs,CreateUnderline,The length of the statement  "				meshTransforms.Add(Matrix4X4.CreateTranslation((bounds.maxXYZ.x + bounds.minXYZ.x) / 2' bounds.minXYZ.y + ySize / 2 - ySize * 1 / 3' zSize / 2)); " is 145.
Long Statement,MatterHackers.MatterControl.Plugins.TextCreator,View3DTextCreator,C:\repos\MatterHackers_MatterControl\TextCreator\View3DTextCreator.cs,CreateRightButtonPanel,The length of the statement  "					createUnderline = new CheckBox(new CheckBoxViewText("Underline".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor)); " is 127.
Long Statement,MatterHackers.MatterControl.Plugins.TextCreator,View3DTextCreator,C:\repos\MatterHackers_MatterControl\TextCreator\View3DTextCreator.cs,SetWordSpacing,The length of the statement  "					meshTransforms[meshIndex] *= Matrix4X4.CreateTranslation(new Vector3(newX' 0' 0) + new Vector3(MeshViewerWidget.BedCenter)); " is 124.
Long Statement,MatterHackers.MatterControl.Plugins.TextCreator,View3DTextCreator,C:\repos\MatterHackers_MatterControl\TextCreator\View3DTextCreator.cs,SetWordSize,The length of the statement  "					meshTransforms[meshIndex] = PlatingHelper.ApplyAtPosition(meshTransforms[meshIndex]' Matrix4X4.CreateScale(new Vector3(oldSize' oldSize' oldSize))' new Vector3(bedCenter)); " is 172.
Long Statement,MatterHackers.MatterControl.Plugins.TextCreator,View3DTextCreator,C:\repos\MatterHackers_MatterControl\TextCreator\View3DTextCreator.cs,SetWordSize,The length of the statement  "					meshTransforms[meshIndex] = PlatingHelper.ApplyAtPosition(meshTransforms[meshIndex]' Matrix4X4.CreateScale(new Vector3(newSize' newSize' newSize))' new Vector3(bedCenter)); " is 172.
Long Statement,MatterHackers.MatterControl.Plugins.TextCreator,View3DTextCreator,C:\repos\MatterHackers_MatterControl\TextCreator\View3DTextCreator.cs,AddLetterControls,The length of the statement  "			MHNumberEdit degreesControl = new MHNumberEdit(45' pixelWidth: 40' allowNegatives: true' increment: 5' minValue: -360' maxValue: 360); " is 134.
Long Statement,MatterHackers.MatterControl.Plugins.TextCreator,View3DTextCreator,C:\repos\MatterHackers_MatterControl\TextCreator\View3DTextCreator.cs,mergeAndSavePartsBackgroundWorker_DoWork,The length of the statement  "				UiThread.RunOnIdle(() => StyledMessageBox.ShowMessageBox(null' "Oops! Unable to save changes.".Localize()' "Unable to save".Localize())); " is 137.
Long Statement,MatterHackers.MatterControl.Plugins.TextCreator,View3DTextCreator,C:\repos\MatterHackers_MatterControl\TextCreator\View3DTextCreator.cs,mergeAndSavePartsBackgroundWorker_DoWork,The length of the statement  "				UiThread.RunOnIdle(() => StyledMessageBox.ShowMessageBox(null' "Oops! Unable to save changes.".Localize()' "Unable to save".Localize())); " is 137.
Magic Number,MatterHackers.MatterControl.Plugins.TextCreator,TextCreatorMainWindow,C:\repos\MatterHackers_MatterControl\TextCreator\TextCreatorMainWindow.cs,TextCreatorMainWindow,The following statement contains a magic number: Width = 640;
Magic Number,MatterHackers.MatterControl.Plugins.TextCreator,TextCreatorMainWindow,C:\repos\MatterHackers_MatterControl\TextCreator\TextCreatorMainWindow.cs,TextCreatorMainWindow,The following statement contains a magic number: Height = 480;
Magic Number,MatterHackers.MatterControl.Plugins.TextCreator,TextCreatorMainWindow,C:\repos\MatterHackers_MatterControl\TextCreator\TextCreatorMainWindow.cs,TextCreatorMainWindow,The following statement contains a magic number: MinimumSize = new Vector2(400' 300);
Magic Number,MatterHackers.MatterControl.Plugins.TextCreator,TextCreatorMainWindow,C:\repos\MatterHackers_MatterControl\TextCreator\TextCreatorMainWindow.cs,TextCreatorMainWindow,The following statement contains a magic number: MinimumSize = new Vector2(400' 300);
Magic Number,MatterHackers.MatterControl.Plugins.TextCreator,View3DTextCreator,C:\repos\MatterHackers_MatterControl\TextCreator\View3DTextCreator.cs,View3DTextCreator,The following statement contains a magic number: buttonBottomPanel.Padding = new BorderDouble(3' 3);
Magic Number,MatterHackers.MatterControl.Plugins.TextCreator,View3DTextCreator,C:\repos\MatterHackers_MatterControl\TextCreator\View3DTextCreator.cs,View3DTextCreator,The following statement contains a magic number: buttonBottomPanel.Padding = new BorderDouble(3' 3);
Magic Number,MatterHackers.MatterControl.Plugins.TextCreator,View3DTextCreator,C:\repos\MatterHackers_MatterControl\TextCreator\View3DTextCreator.cs,View3DTextCreator,The following statement contains a magic number: {  				FlowLayoutWidget editToolBar = new FlowLayoutWidget();    				processingProgressControl = new ProgressControl("Finding Parts:".Localize()' ActiveTheme.Instance.PrimaryTextColor' ActiveTheme.Instance.PrimaryAccentColor);  				processingProgressControl.VAnchor = Agg.UI.VAnchor.ParentCenter;  				editToolBar.AddChild(processingProgressControl);  				editToolBar.VAnchor |= Agg.UI.VAnchor.ParentCenter;    				editPlateButtonsContainer = new FlowLayoutWidget();    				textToAddWidget = new MHTextEditWidget(""' pixelWidth: 300' messageWhenEmptyAndNotSelected: "Enter Text Here".Localize());  				textToAddWidget.VAnchor = VAnchor.ParentCenter;  				textToAddWidget.Margin = new BorderDouble(5);  				editPlateButtonsContainer.AddChild(textToAddWidget);  				textToAddWidget.ActualTextEditWidget.EnterPressed += (object sender' KeyEventArgs keyEvent) =>  				{  					InsertTextNow(textToAddWidget.Text);  				};    				Button insertTextButton = textImageButtonFactory.Generate("Insert".Localize());  				editPlateButtonsContainer.AddChild(insertTextButton);  				insertTextButton.Click += (sender' e) =>  				{  					InsertTextNow(textToAddWidget.Text);  				};    				KeyDown += (sender' e) =>  				{  					KeyEventArgs keyEvent = e as KeyEventArgs;  					if (keyEvent != null && !keyEvent.Handled)  					{  						if (keyEvent.KeyCode == Keys.Escape)  						{  							if (meshSelectInfo.downOnPart)  							{  								meshSelectInfo.downOnPart = false;    								SelectedMeshTransform *= transformOnMouseDown;    								Invalidate();  							}  						}  					}  				};    				editToolBar.AddChild(editPlateButtonsContainer);  				buttonBottomPanel.AddChild(editToolBar);  			}
Magic Number,MatterHackers.MatterControl.Plugins.TextCreator,View3DTextCreator,C:\repos\MatterHackers_MatterControl\TextCreator\View3DTextCreator.cs,View3DTextCreator,The following statement contains a magic number: {  				FlowLayoutWidget editToolBar = new FlowLayoutWidget();    				processingProgressControl = new ProgressControl("Finding Parts:".Localize()' ActiveTheme.Instance.PrimaryTextColor' ActiveTheme.Instance.PrimaryAccentColor);  				processingProgressControl.VAnchor = Agg.UI.VAnchor.ParentCenter;  				editToolBar.AddChild(processingProgressControl);  				editToolBar.VAnchor |= Agg.UI.VAnchor.ParentCenter;    				editPlateButtonsContainer = new FlowLayoutWidget();    				textToAddWidget = new MHTextEditWidget(""' pixelWidth: 300' messageWhenEmptyAndNotSelected: "Enter Text Here".Localize());  				textToAddWidget.VAnchor = VAnchor.ParentCenter;  				textToAddWidget.Margin = new BorderDouble(5);  				editPlateButtonsContainer.AddChild(textToAddWidget);  				textToAddWidget.ActualTextEditWidget.EnterPressed += (object sender' KeyEventArgs keyEvent) =>  				{  					InsertTextNow(textToAddWidget.Text);  				};    				Button insertTextButton = textImageButtonFactory.Generate("Insert".Localize());  				editPlateButtonsContainer.AddChild(insertTextButton);  				insertTextButton.Click += (sender' e) =>  				{  					InsertTextNow(textToAddWidget.Text);  				};    				KeyDown += (sender' e) =>  				{  					KeyEventArgs keyEvent = e as KeyEventArgs;  					if (keyEvent != null && !keyEvent.Handled)  					{  						if (keyEvent.KeyCode == Keys.Escape)  						{  							if (meshSelectInfo.downOnPart)  							{  								meshSelectInfo.downOnPart = false;    								SelectedMeshTransform *= transformOnMouseDown;    								Invalidate();  							}  						}  					}  				};    				editToolBar.AddChild(editPlateButtonsContainer);  				buttonBottomPanel.AddChild(editToolBar);  			}
Magic Number,MatterHackers.MatterControl.Plugins.TextCreator,View3DTextCreator,C:\repos\MatterHackers_MatterControl\TextCreator\View3DTextCreator.cs,View3DTextCreator,The following statement contains a magic number: buttonRightPanelDisabledCover.BackgroundColor = new RGBA_Bytes(ActiveTheme.Instance.PrimaryBackgroundColor' 150);
Magic Number,MatterHackers.MatterControl.Plugins.TextCreator,View3DTextCreator,C:\repos\MatterHackers_MatterControl\TextCreator\View3DTextCreator.cs,ResetWordLayoutSettings,The following statement contains a magic number: heightScrollBar.Value = .25;
Magic Number,MatterHackers.MatterControl.Plugins.TextCreator,View3DTextCreator,C:\repos\MatterHackers_MatterControl\TextCreator\View3DTextCreator.cs,insertTextBackgroundWorker_DoWork,The following statement contains a magic number: TypeFacePrinter printer = new TypeFacePrinter(currentText' new StyledTypeFace(boldTypeFace' 12));
Magic Number,MatterHackers.MatterControl.Plugins.TextCreator,View3DTextCreator,C:\repos\MatterHackers_MatterControl\TextCreator\View3DTextCreator.cs,insertTextBackgroundWorker_DoWork,The following statement contains a magic number: double centerOffset = -size.x / 2;
Magic Number,MatterHackers.MatterControl.Plugins.TextCreator,View3DTextCreator,C:\repos\MatterHackers_MatterControl\TextCreator\View3DTextCreator.cs,insertTextBackgroundWorker_DoWork,The following statement contains a magic number: for (int i = 0; i < currentText.Length; i++)  			{  				int newIndex = asyncMeshGroups.Count;    				TypeFacePrinter letterPrinter = new TypeFacePrinter(currentText[i].ToString()' new StyledTypeFace(boldTypeFace' 12));  				Mesh textMesh = VertexSourceToMesh.Extrude(letterPrinter' 10 + (i % 2));    				if (textMesh.Faces.Count > 0)  				{  					asyncMeshGroups.Add(new MeshGroup(textMesh));    					PlatingMeshGroupData newMeshInfo = new PlatingMeshGroupData();    					newMeshInfo.spacing.x = printer.GetOffsetLeftOfCharacterIndex(i).x + centerOffset;  					asyncPlatingDatas.Add(newMeshInfo);  					asyncMeshGroupTransforms.Add(Matrix4X4.Identity);    					PlatingHelper.CreateITraceableForMeshGroup(asyncPlatingDatas' asyncMeshGroups' newIndex' (double progress0To1' string processingState' out bool continueProcessing) =>  					{  						continueProcessing = true;  						int nextPercent = (int)((currentRatioDone + ratioPerMeshGroup * progress0To1) * 100);  						processingProgressControl.PercentComplete = nextPercent;  					});    					currentRatioDone += ratioPerMeshGroup;    					PlatingHelper.PlaceMeshGroupOnBed(asyncMeshGroups' asyncMeshGroupTransforms' newIndex);  				}    				processingProgressControl.PercentComplete = ((i + 1) * 95 / currentText.Length);  			}
Magic Number,MatterHackers.MatterControl.Plugins.TextCreator,View3DTextCreator,C:\repos\MatterHackers_MatterControl\TextCreator\View3DTextCreator.cs,insertTextBackgroundWorker_DoWork,The following statement contains a magic number: for (int i = 0; i < currentText.Length; i++)  			{  				int newIndex = asyncMeshGroups.Count;    				TypeFacePrinter letterPrinter = new TypeFacePrinter(currentText[i].ToString()' new StyledTypeFace(boldTypeFace' 12));  				Mesh textMesh = VertexSourceToMesh.Extrude(letterPrinter' 10 + (i % 2));    				if (textMesh.Faces.Count > 0)  				{  					asyncMeshGroups.Add(new MeshGroup(textMesh));    					PlatingMeshGroupData newMeshInfo = new PlatingMeshGroupData();    					newMeshInfo.spacing.x = printer.GetOffsetLeftOfCharacterIndex(i).x + centerOffset;  					asyncPlatingDatas.Add(newMeshInfo);  					asyncMeshGroupTransforms.Add(Matrix4X4.Identity);    					PlatingHelper.CreateITraceableForMeshGroup(asyncPlatingDatas' asyncMeshGroups' newIndex' (double progress0To1' string processingState' out bool continueProcessing) =>  					{  						continueProcessing = true;  						int nextPercent = (int)((currentRatioDone + ratioPerMeshGroup * progress0To1) * 100);  						processingProgressControl.PercentComplete = nextPercent;  					});    					currentRatioDone += ratioPerMeshGroup;    					PlatingHelper.PlaceMeshGroupOnBed(asyncMeshGroups' asyncMeshGroupTransforms' newIndex);  				}    				processingProgressControl.PercentComplete = ((i + 1) * 95 / currentText.Length);  			}
Magic Number,MatterHackers.MatterControl.Plugins.TextCreator,View3DTextCreator,C:\repos\MatterHackers_MatterControl\TextCreator\View3DTextCreator.cs,insertTextBackgroundWorker_DoWork,The following statement contains a magic number: for (int i = 0; i < currentText.Length; i++)  			{  				int newIndex = asyncMeshGroups.Count;    				TypeFacePrinter letterPrinter = new TypeFacePrinter(currentText[i].ToString()' new StyledTypeFace(boldTypeFace' 12));  				Mesh textMesh = VertexSourceToMesh.Extrude(letterPrinter' 10 + (i % 2));    				if (textMesh.Faces.Count > 0)  				{  					asyncMeshGroups.Add(new MeshGroup(textMesh));    					PlatingMeshGroupData newMeshInfo = new PlatingMeshGroupData();    					newMeshInfo.spacing.x = printer.GetOffsetLeftOfCharacterIndex(i).x + centerOffset;  					asyncPlatingDatas.Add(newMeshInfo);  					asyncMeshGroupTransforms.Add(Matrix4X4.Identity);    					PlatingHelper.CreateITraceableForMeshGroup(asyncPlatingDatas' asyncMeshGroups' newIndex' (double progress0To1' string processingState' out bool continueProcessing) =>  					{  						continueProcessing = true;  						int nextPercent = (int)((currentRatioDone + ratioPerMeshGroup * progress0To1) * 100);  						processingProgressControl.PercentComplete = nextPercent;  					});    					currentRatioDone += ratioPerMeshGroup;    					PlatingHelper.PlaceMeshGroupOnBed(asyncMeshGroups' asyncMeshGroupTransforms' newIndex);  				}    				processingProgressControl.PercentComplete = ((i + 1) * 95 / currentText.Length);  			}
Magic Number,MatterHackers.MatterControl.Plugins.TextCreator,View3DTextCreator,C:\repos\MatterHackers_MatterControl\TextCreator\View3DTextCreator.cs,insertTextBackgroundWorker_DoWork,The following statement contains a magic number: for (int i = 0; i < currentText.Length; i++)  			{  				int newIndex = asyncMeshGroups.Count;    				TypeFacePrinter letterPrinter = new TypeFacePrinter(currentText[i].ToString()' new StyledTypeFace(boldTypeFace' 12));  				Mesh textMesh = VertexSourceToMesh.Extrude(letterPrinter' 10 + (i % 2));    				if (textMesh.Faces.Count > 0)  				{  					asyncMeshGroups.Add(new MeshGroup(textMesh));    					PlatingMeshGroupData newMeshInfo = new PlatingMeshGroupData();    					newMeshInfo.spacing.x = printer.GetOffsetLeftOfCharacterIndex(i).x + centerOffset;  					asyncPlatingDatas.Add(newMeshInfo);  					asyncMeshGroupTransforms.Add(Matrix4X4.Identity);    					PlatingHelper.CreateITraceableForMeshGroup(asyncPlatingDatas' asyncMeshGroups' newIndex' (double progress0To1' string processingState' out bool continueProcessing) =>  					{  						continueProcessing = true;  						int nextPercent = (int)((currentRatioDone + ratioPerMeshGroup * progress0To1) * 100);  						processingProgressControl.PercentComplete = nextPercent;  					});    					currentRatioDone += ratioPerMeshGroup;    					PlatingHelper.PlaceMeshGroupOnBed(asyncMeshGroups' asyncMeshGroupTransforms' newIndex);  				}    				processingProgressControl.PercentComplete = ((i + 1) * 95 / currentText.Length);  			}
Magic Number,MatterHackers.MatterControl.Plugins.TextCreator,View3DTextCreator,C:\repos\MatterHackers_MatterControl\TextCreator\View3DTextCreator.cs,insertTextBackgroundWorker_DoWork,The following statement contains a magic number: for (int i = 0; i < currentText.Length; i++)  			{  				int newIndex = asyncMeshGroups.Count;    				TypeFacePrinter letterPrinter = new TypeFacePrinter(currentText[i].ToString()' new StyledTypeFace(boldTypeFace' 12));  				Mesh textMesh = VertexSourceToMesh.Extrude(letterPrinter' 10 + (i % 2));    				if (textMesh.Faces.Count > 0)  				{  					asyncMeshGroups.Add(new MeshGroup(textMesh));    					PlatingMeshGroupData newMeshInfo = new PlatingMeshGroupData();    					newMeshInfo.spacing.x = printer.GetOffsetLeftOfCharacterIndex(i).x + centerOffset;  					asyncPlatingDatas.Add(newMeshInfo);  					asyncMeshGroupTransforms.Add(Matrix4X4.Identity);    					PlatingHelper.CreateITraceableForMeshGroup(asyncPlatingDatas' asyncMeshGroups' newIndex' (double progress0To1' string processingState' out bool continueProcessing) =>  					{  						continueProcessing = true;  						int nextPercent = (int)((currentRatioDone + ratioPerMeshGroup * progress0To1) * 100);  						processingProgressControl.PercentComplete = nextPercent;  					});    					currentRatioDone += ratioPerMeshGroup;    					PlatingHelper.PlaceMeshGroupOnBed(asyncMeshGroups' asyncMeshGroupTransforms' newIndex);  				}    				processingProgressControl.PercentComplete = ((i + 1) * 95 / currentText.Length);  			}
Magic Number,MatterHackers.MatterControl.Plugins.TextCreator,View3DTextCreator,C:\repos\MatterHackers_MatterControl\TextCreator\View3DTextCreator.cs,insertTextBackgroundWorker_DoWork,The following statement contains a magic number: processingProgressControl.PercentComplete = 95;
Magic Number,MatterHackers.MatterControl.Plugins.TextCreator,View3DTextCreator,C:\repos\MatterHackers_MatterControl\TextCreator\View3DTextCreator.cs,CreateUnderline,The following statement contains a magic number: if (meshesList.Count > 0)  			{  				AxisAlignedBoundingBox bounds = meshesList[0].GetAxisAlignedBoundingBox(meshTransforms[0]);  				for (int i = 1; i < meshesList.Count; i++)  				{  					bounds = AxisAlignedBoundingBox.Union(bounds' meshesList[i].GetAxisAlignedBoundingBox(meshTransforms[i]));  				}    				double xSize = bounds.XSize;  				double ySize = sizeScrollBar.Value * 3;  				double zSize = bounds.ZSize / 3;  				Mesh connectionLine = PlatonicSolids.CreateCube(xSize' ySize' zSize);  				meshesList.Add(new MeshGroup(connectionLine));  				platingDataList.Add(new PlatingMeshGroupData());  				meshTransforms.Add(Matrix4X4.CreateTranslation((bounds.maxXYZ.x + bounds.minXYZ.x) / 2' bounds.minXYZ.y + ySize / 2 - ySize * 1 / 3' zSize / 2));  				PlatingHelper.CreateITraceableForMeshGroup(platingDataList' meshesList' meshesList.Count - 1' null);  			}
Magic Number,MatterHackers.MatterControl.Plugins.TextCreator,View3DTextCreator,C:\repos\MatterHackers_MatterControl\TextCreator\View3DTextCreator.cs,CreateUnderline,The following statement contains a magic number: if (meshesList.Count > 0)  			{  				AxisAlignedBoundingBox bounds = meshesList[0].GetAxisAlignedBoundingBox(meshTransforms[0]);  				for (int i = 1; i < meshesList.Count; i++)  				{  					bounds = AxisAlignedBoundingBox.Union(bounds' meshesList[i].GetAxisAlignedBoundingBox(meshTransforms[i]));  				}    				double xSize = bounds.XSize;  				double ySize = sizeScrollBar.Value * 3;  				double zSize = bounds.ZSize / 3;  				Mesh connectionLine = PlatonicSolids.CreateCube(xSize' ySize' zSize);  				meshesList.Add(new MeshGroup(connectionLine));  				platingDataList.Add(new PlatingMeshGroupData());  				meshTransforms.Add(Matrix4X4.CreateTranslation((bounds.maxXYZ.x + bounds.minXYZ.x) / 2' bounds.minXYZ.y + ySize / 2 - ySize * 1 / 3' zSize / 2));  				PlatingHelper.CreateITraceableForMeshGroup(platingDataList' meshesList' meshesList.Count - 1' null);  			}
Magic Number,MatterHackers.MatterControl.Plugins.TextCreator,View3DTextCreator,C:\repos\MatterHackers_MatterControl\TextCreator\View3DTextCreator.cs,CreateUnderline,The following statement contains a magic number: if (meshesList.Count > 0)  			{  				AxisAlignedBoundingBox bounds = meshesList[0].GetAxisAlignedBoundingBox(meshTransforms[0]);  				for (int i = 1; i < meshesList.Count; i++)  				{  					bounds = AxisAlignedBoundingBox.Union(bounds' meshesList[i].GetAxisAlignedBoundingBox(meshTransforms[i]));  				}    				double xSize = bounds.XSize;  				double ySize = sizeScrollBar.Value * 3;  				double zSize = bounds.ZSize / 3;  				Mesh connectionLine = PlatonicSolids.CreateCube(xSize' ySize' zSize);  				meshesList.Add(new MeshGroup(connectionLine));  				platingDataList.Add(new PlatingMeshGroupData());  				meshTransforms.Add(Matrix4X4.CreateTranslation((bounds.maxXYZ.x + bounds.minXYZ.x) / 2' bounds.minXYZ.y + ySize / 2 - ySize * 1 / 3' zSize / 2));  				PlatingHelper.CreateITraceableForMeshGroup(platingDataList' meshesList' meshesList.Count - 1' null);  			}
Magic Number,MatterHackers.MatterControl.Plugins.TextCreator,View3DTextCreator,C:\repos\MatterHackers_MatterControl\TextCreator\View3DTextCreator.cs,CreateUnderline,The following statement contains a magic number: if (meshesList.Count > 0)  			{  				AxisAlignedBoundingBox bounds = meshesList[0].GetAxisAlignedBoundingBox(meshTransforms[0]);  				for (int i = 1; i < meshesList.Count; i++)  				{  					bounds = AxisAlignedBoundingBox.Union(bounds' meshesList[i].GetAxisAlignedBoundingBox(meshTransforms[i]));  				}    				double xSize = bounds.XSize;  				double ySize = sizeScrollBar.Value * 3;  				double zSize = bounds.ZSize / 3;  				Mesh connectionLine = PlatonicSolids.CreateCube(xSize' ySize' zSize);  				meshesList.Add(new MeshGroup(connectionLine));  				platingDataList.Add(new PlatingMeshGroupData());  				meshTransforms.Add(Matrix4X4.CreateTranslation((bounds.maxXYZ.x + bounds.minXYZ.x) / 2' bounds.minXYZ.y + ySize / 2 - ySize * 1 / 3' zSize / 2));  				PlatingHelper.CreateITraceableForMeshGroup(platingDataList' meshesList' meshesList.Count - 1' null);  			}
Magic Number,MatterHackers.MatterControl.Plugins.TextCreator,View3DTextCreator,C:\repos\MatterHackers_MatterControl\TextCreator\View3DTextCreator.cs,CreateUnderline,The following statement contains a magic number: if (meshesList.Count > 0)  			{  				AxisAlignedBoundingBox bounds = meshesList[0].GetAxisAlignedBoundingBox(meshTransforms[0]);  				for (int i = 1; i < meshesList.Count; i++)  				{  					bounds = AxisAlignedBoundingBox.Union(bounds' meshesList[i].GetAxisAlignedBoundingBox(meshTransforms[i]));  				}    				double xSize = bounds.XSize;  				double ySize = sizeScrollBar.Value * 3;  				double zSize = bounds.ZSize / 3;  				Mesh connectionLine = PlatonicSolids.CreateCube(xSize' ySize' zSize);  				meshesList.Add(new MeshGroup(connectionLine));  				platingDataList.Add(new PlatingMeshGroupData());  				meshTransforms.Add(Matrix4X4.CreateTranslation((bounds.maxXYZ.x + bounds.minXYZ.x) / 2' bounds.minXYZ.y + ySize / 2 - ySize * 1 / 3' zSize / 2));  				PlatingHelper.CreateITraceableForMeshGroup(platingDataList' meshesList' meshesList.Count - 1' null);  			}
Magic Number,MatterHackers.MatterControl.Plugins.TextCreator,View3DTextCreator,C:\repos\MatterHackers_MatterControl\TextCreator\View3DTextCreator.cs,CreateUnderline,The following statement contains a magic number: if (meshesList.Count > 0)  			{  				AxisAlignedBoundingBox bounds = meshesList[0].GetAxisAlignedBoundingBox(meshTransforms[0]);  				for (int i = 1; i < meshesList.Count; i++)  				{  					bounds = AxisAlignedBoundingBox.Union(bounds' meshesList[i].GetAxisAlignedBoundingBox(meshTransforms[i]));  				}    				double xSize = bounds.XSize;  				double ySize = sizeScrollBar.Value * 3;  				double zSize = bounds.ZSize / 3;  				Mesh connectionLine = PlatonicSolids.CreateCube(xSize' ySize' zSize);  				meshesList.Add(new MeshGroup(connectionLine));  				platingDataList.Add(new PlatingMeshGroupData());  				meshTransforms.Add(Matrix4X4.CreateTranslation((bounds.maxXYZ.x + bounds.minXYZ.x) / 2' bounds.minXYZ.y + ySize / 2 - ySize * 1 / 3' zSize / 2));  				PlatingHelper.CreateITraceableForMeshGroup(platingDataList' meshesList' meshesList.Count - 1' null);  			}
Magic Number,MatterHackers.MatterControl.Plugins.TextCreator,View3DTextCreator,C:\repos\MatterHackers_MatterControl\TextCreator\View3DTextCreator.cs,CreateRightButtonPanel,The following statement contains a magic number: buttonRightPanel.Width = 200;
Magic Number,MatterHackers.MatterControl.Plugins.TextCreator,View3DTextCreator,C:\repos\MatterHackers_MatterControl\TextCreator\View3DTextCreator.cs,CreateRightButtonPanel,The following statement contains a magic number: {  				BorderDouble buttonMargin = new BorderDouble(top: 3);    				// put in the word editing menu  				{  					CheckBox expandWordOptions = ExpandMenuOptionFactory.GenerateCheckBoxButton("Word Edit".Localize()'  					View3DWidget.ArrowRight'  					View3DWidget.ArrowDown);  					expandWordOptions.Margin = new BorderDouble(bottom: 2);  					buttonRightPanel.AddChild(expandWordOptions);    					FlowLayoutWidget wordOptionContainer = new FlowLayoutWidget(FlowDirection.TopToBottom);  					wordOptionContainer.HAnchor = HAnchor.ParentLeftRight;  					wordOptionContainer.Visible = false;  					buttonRightPanel.AddChild(wordOptionContainer);    					spacingScrollBar = InsertUiForSlider(wordOptionContainer' "Spacing:".Localize()' .5' 1);  					{  						spacingScrollBar.ValueChanged += (sender' e) =>  						{  							SetWordSpacing(MeshGroups' MeshGroupTransforms' MeshGroupExtraData);  							RebuildUnderlineIfRequired();  						};  					}    					sizeScrollBar = InsertUiForSlider(wordOptionContainer' "Size:".Localize()' .3' 2);  					{  						sizeScrollBar.ValueChanged += (sender' e) =>  						{  							SetWordSize(MeshGroups' MeshGroupTransforms);    							//SetWordSpacing(MeshGroups' MeshGroupTransforms' MeshGroupExtraData);  							RebuildUnderlineIfRequired();  						};  					}    					heightScrollBar = InsertUiForSlider(wordOptionContainer' "Height:".Localize()' .05' 1);  					{  						heightScrollBar.ValueChanged += (sender' e) =>  						{  							SetWordHeight(MeshGroups' MeshGroupTransforms);  							RebuildUnderlineIfRequired();  						};  					}    					createUnderline = new CheckBox(new CheckBoxViewText("Underline".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor));  					createUnderline.Checked = true;  					createUnderline.Margin = new BorderDouble(10' 5);  					createUnderline.HAnchor = HAnchor.ParentLeft;  					wordOptionContainer.AddChild(createUnderline);  					createUnderline.CheckedStateChanged += (sender' e) =>  					{  						int oldIndex = SelectedMeshGroupIndex;  						if (!createUnderline.Checked)  						{  							// we need to remove the underline  							if (MeshGroups.Count > 1)  							{  								SelectedMeshGroupIndex = MeshGroups.Count - 1;  								DeleteSelectedMesh();  							}  						}  						else if (MeshGroups.Count > 0)  						{  							// we need to add the underline  							CreateUnderline(MeshGroups' MeshGroupTransforms' MeshGroupExtraData);  						}  						SelectedMeshGroupIndex = Math.Min(oldIndex' MeshGroups.Count - 1);  					};    					expandWordOptions.CheckedStateChanged += (sender' e) =>  					{  						wordOptionContainer.Visible = expandWordOptions.Checked;  					};    					expandWordOptions.Checked = true;  				}    				// put in the letter editing menu  				{  					CheckBox expandLetterOptions = ExpandMenuOptionFactory.GenerateCheckBoxButton("Letter"'  					View3DWidget.ArrowRight'  					View3DWidget.ArrowDown);  					expandLetterOptions.Margin = new BorderDouble(bottom: 2);  					//buttonRightPanel.AddChild(expandLetterOptions);    					FlowLayoutWidget letterOptionContainer = new FlowLayoutWidget(FlowDirection.TopToBottom);  					letterOptionContainer.HAnchor = HAnchor.ParentLeftRight;  					letterOptionContainer.Visible = false;  					buttonRightPanel.AddChild(letterOptionContainer);    					SolidSlider sizeScrollBar = InsertUiForSlider(letterOptionContainer' "Size:".Localize());  					SolidSlider heightScrollBar = InsertUiForSlider(letterOptionContainer' "Height:".Localize());  					SolidSlider rotationScrollBar = InsertUiForSlider(letterOptionContainer' "Rotation:".Localize());    					expandLetterOptions.CheckedStateChanged += (sender' e) =>  					{  						letterOptionContainer.Visible = expandLetterOptions.Checked;  					};  				}    				GuiWidget verticalSpacer = new GuiWidget();  				verticalSpacer.VAnchor = VAnchor.ParentBottomTop;  				buttonRightPanel.AddChild(verticalSpacer);    				saveButton = WhiteButtonFactory.Generate("Save".Localize()' centerText: true);  				saveButton.Visible = false;  				saveButton.Cursor = Cursors.Hand;    				saveAndExitButton = WhiteButtonFactory.Generate("Save & Exit".Localize()' centerText: true);  				saveAndExitButton.Visible = false;  				saveAndExitButton.Cursor = Cursors.Hand;    				//buttonRightPanel.AddChild(saveButton);  				buttonRightPanel.AddChild(saveAndExitButton);  			}
Magic Number,MatterHackers.MatterControl.Plugins.TextCreator,View3DTextCreator,C:\repos\MatterHackers_MatterControl\TextCreator\View3DTextCreator.cs,CreateRightButtonPanel,The following statement contains a magic number: {  				BorderDouble buttonMargin = new BorderDouble(top: 3);    				// put in the word editing menu  				{  					CheckBox expandWordOptions = ExpandMenuOptionFactory.GenerateCheckBoxButton("Word Edit".Localize()'  					View3DWidget.ArrowRight'  					View3DWidget.ArrowDown);  					expandWordOptions.Margin = new BorderDouble(bottom: 2);  					buttonRightPanel.AddChild(expandWordOptions);    					FlowLayoutWidget wordOptionContainer = new FlowLayoutWidget(FlowDirection.TopToBottom);  					wordOptionContainer.HAnchor = HAnchor.ParentLeftRight;  					wordOptionContainer.Visible = false;  					buttonRightPanel.AddChild(wordOptionContainer);    					spacingScrollBar = InsertUiForSlider(wordOptionContainer' "Spacing:".Localize()' .5' 1);  					{  						spacingScrollBar.ValueChanged += (sender' e) =>  						{  							SetWordSpacing(MeshGroups' MeshGroupTransforms' MeshGroupExtraData);  							RebuildUnderlineIfRequired();  						};  					}    					sizeScrollBar = InsertUiForSlider(wordOptionContainer' "Size:".Localize()' .3' 2);  					{  						sizeScrollBar.ValueChanged += (sender' e) =>  						{  							SetWordSize(MeshGroups' MeshGroupTransforms);    							//SetWordSpacing(MeshGroups' MeshGroupTransforms' MeshGroupExtraData);  							RebuildUnderlineIfRequired();  						};  					}    					heightScrollBar = InsertUiForSlider(wordOptionContainer' "Height:".Localize()' .05' 1);  					{  						heightScrollBar.ValueChanged += (sender' e) =>  						{  							SetWordHeight(MeshGroups' MeshGroupTransforms);  							RebuildUnderlineIfRequired();  						};  					}    					createUnderline = new CheckBox(new CheckBoxViewText("Underline".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor));  					createUnderline.Checked = true;  					createUnderline.Margin = new BorderDouble(10' 5);  					createUnderline.HAnchor = HAnchor.ParentLeft;  					wordOptionContainer.AddChild(createUnderline);  					createUnderline.CheckedStateChanged += (sender' e) =>  					{  						int oldIndex = SelectedMeshGroupIndex;  						if (!createUnderline.Checked)  						{  							// we need to remove the underline  							if (MeshGroups.Count > 1)  							{  								SelectedMeshGroupIndex = MeshGroups.Count - 1;  								DeleteSelectedMesh();  							}  						}  						else if (MeshGroups.Count > 0)  						{  							// we need to add the underline  							CreateUnderline(MeshGroups' MeshGroupTransforms' MeshGroupExtraData);  						}  						SelectedMeshGroupIndex = Math.Min(oldIndex' MeshGroups.Count - 1);  					};    					expandWordOptions.CheckedStateChanged += (sender' e) =>  					{  						wordOptionContainer.Visible = expandWordOptions.Checked;  					};    					expandWordOptions.Checked = true;  				}    				// put in the letter editing menu  				{  					CheckBox expandLetterOptions = ExpandMenuOptionFactory.GenerateCheckBoxButton("Letter"'  					View3DWidget.ArrowRight'  					View3DWidget.ArrowDown);  					expandLetterOptions.Margin = new BorderDouble(bottom: 2);  					//buttonRightPanel.AddChild(expandLetterOptions);    					FlowLayoutWidget letterOptionContainer = new FlowLayoutWidget(FlowDirection.TopToBottom);  					letterOptionContainer.HAnchor = HAnchor.ParentLeftRight;  					letterOptionContainer.Visible = false;  					buttonRightPanel.AddChild(letterOptionContainer);    					SolidSlider sizeScrollBar = InsertUiForSlider(letterOptionContainer' "Size:".Localize());  					SolidSlider heightScrollBar = InsertUiForSlider(letterOptionContainer' "Height:".Localize());  					SolidSlider rotationScrollBar = InsertUiForSlider(letterOptionContainer' "Rotation:".Localize());    					expandLetterOptions.CheckedStateChanged += (sender' e) =>  					{  						letterOptionContainer.Visible = expandLetterOptions.Checked;  					};  				}    				GuiWidget verticalSpacer = new GuiWidget();  				verticalSpacer.VAnchor = VAnchor.ParentBottomTop;  				buttonRightPanel.AddChild(verticalSpacer);    				saveButton = WhiteButtonFactory.Generate("Save".Localize()' centerText: true);  				saveButton.Visible = false;  				saveButton.Cursor = Cursors.Hand;    				saveAndExitButton = WhiteButtonFactory.Generate("Save & Exit".Localize()' centerText: true);  				saveAndExitButton.Visible = false;  				saveAndExitButton.Cursor = Cursors.Hand;    				//buttonRightPanel.AddChild(saveButton);  				buttonRightPanel.AddChild(saveAndExitButton);  			}
Magic Number,MatterHackers.MatterControl.Plugins.TextCreator,View3DTextCreator,C:\repos\MatterHackers_MatterControl\TextCreator\View3DTextCreator.cs,CreateRightButtonPanel,The following statement contains a magic number: {  				BorderDouble buttonMargin = new BorderDouble(top: 3);    				// put in the word editing menu  				{  					CheckBox expandWordOptions = ExpandMenuOptionFactory.GenerateCheckBoxButton("Word Edit".Localize()'  					View3DWidget.ArrowRight'  					View3DWidget.ArrowDown);  					expandWordOptions.Margin = new BorderDouble(bottom: 2);  					buttonRightPanel.AddChild(expandWordOptions);    					FlowLayoutWidget wordOptionContainer = new FlowLayoutWidget(FlowDirection.TopToBottom);  					wordOptionContainer.HAnchor = HAnchor.ParentLeftRight;  					wordOptionContainer.Visible = false;  					buttonRightPanel.AddChild(wordOptionContainer);    					spacingScrollBar = InsertUiForSlider(wordOptionContainer' "Spacing:".Localize()' .5' 1);  					{  						spacingScrollBar.ValueChanged += (sender' e) =>  						{  							SetWordSpacing(MeshGroups' MeshGroupTransforms' MeshGroupExtraData);  							RebuildUnderlineIfRequired();  						};  					}    					sizeScrollBar = InsertUiForSlider(wordOptionContainer' "Size:".Localize()' .3' 2);  					{  						sizeScrollBar.ValueChanged += (sender' e) =>  						{  							SetWordSize(MeshGroups' MeshGroupTransforms);    							//SetWordSpacing(MeshGroups' MeshGroupTransforms' MeshGroupExtraData);  							RebuildUnderlineIfRequired();  						};  					}    					heightScrollBar = InsertUiForSlider(wordOptionContainer' "Height:".Localize()' .05' 1);  					{  						heightScrollBar.ValueChanged += (sender' e) =>  						{  							SetWordHeight(MeshGroups' MeshGroupTransforms);  							RebuildUnderlineIfRequired();  						};  					}    					createUnderline = new CheckBox(new CheckBoxViewText("Underline".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor));  					createUnderline.Checked = true;  					createUnderline.Margin = new BorderDouble(10' 5);  					createUnderline.HAnchor = HAnchor.ParentLeft;  					wordOptionContainer.AddChild(createUnderline);  					createUnderline.CheckedStateChanged += (sender' e) =>  					{  						int oldIndex = SelectedMeshGroupIndex;  						if (!createUnderline.Checked)  						{  							// we need to remove the underline  							if (MeshGroups.Count > 1)  							{  								SelectedMeshGroupIndex = MeshGroups.Count - 1;  								DeleteSelectedMesh();  							}  						}  						else if (MeshGroups.Count > 0)  						{  							// we need to add the underline  							CreateUnderline(MeshGroups' MeshGroupTransforms' MeshGroupExtraData);  						}  						SelectedMeshGroupIndex = Math.Min(oldIndex' MeshGroups.Count - 1);  					};    					expandWordOptions.CheckedStateChanged += (sender' e) =>  					{  						wordOptionContainer.Visible = expandWordOptions.Checked;  					};    					expandWordOptions.Checked = true;  				}    				// put in the letter editing menu  				{  					CheckBox expandLetterOptions = ExpandMenuOptionFactory.GenerateCheckBoxButton("Letter"'  					View3DWidget.ArrowRight'  					View3DWidget.ArrowDown);  					expandLetterOptions.Margin = new BorderDouble(bottom: 2);  					//buttonRightPanel.AddChild(expandLetterOptions);    					FlowLayoutWidget letterOptionContainer = new FlowLayoutWidget(FlowDirection.TopToBottom);  					letterOptionContainer.HAnchor = HAnchor.ParentLeftRight;  					letterOptionContainer.Visible = false;  					buttonRightPanel.AddChild(letterOptionContainer);    					SolidSlider sizeScrollBar = InsertUiForSlider(letterOptionContainer' "Size:".Localize());  					SolidSlider heightScrollBar = InsertUiForSlider(letterOptionContainer' "Height:".Localize());  					SolidSlider rotationScrollBar = InsertUiForSlider(letterOptionContainer' "Rotation:".Localize());    					expandLetterOptions.CheckedStateChanged += (sender' e) =>  					{  						letterOptionContainer.Visible = expandLetterOptions.Checked;  					};  				}    				GuiWidget verticalSpacer = new GuiWidget();  				verticalSpacer.VAnchor = VAnchor.ParentBottomTop;  				buttonRightPanel.AddChild(verticalSpacer);    				saveButton = WhiteButtonFactory.Generate("Save".Localize()' centerText: true);  				saveButton.Visible = false;  				saveButton.Cursor = Cursors.Hand;    				saveAndExitButton = WhiteButtonFactory.Generate("Save & Exit".Localize()' centerText: true);  				saveAndExitButton.Visible = false;  				saveAndExitButton.Cursor = Cursors.Hand;    				//buttonRightPanel.AddChild(saveButton);  				buttonRightPanel.AddChild(saveAndExitButton);  			}
Magic Number,MatterHackers.MatterControl.Plugins.TextCreator,View3DTextCreator,C:\repos\MatterHackers_MatterControl\TextCreator\View3DTextCreator.cs,CreateRightButtonPanel,The following statement contains a magic number: {  				BorderDouble buttonMargin = new BorderDouble(top: 3);    				// put in the word editing menu  				{  					CheckBox expandWordOptions = ExpandMenuOptionFactory.GenerateCheckBoxButton("Word Edit".Localize()'  					View3DWidget.ArrowRight'  					View3DWidget.ArrowDown);  					expandWordOptions.Margin = new BorderDouble(bottom: 2);  					buttonRightPanel.AddChild(expandWordOptions);    					FlowLayoutWidget wordOptionContainer = new FlowLayoutWidget(FlowDirection.TopToBottom);  					wordOptionContainer.HAnchor = HAnchor.ParentLeftRight;  					wordOptionContainer.Visible = false;  					buttonRightPanel.AddChild(wordOptionContainer);    					spacingScrollBar = InsertUiForSlider(wordOptionContainer' "Spacing:".Localize()' .5' 1);  					{  						spacingScrollBar.ValueChanged += (sender' e) =>  						{  							SetWordSpacing(MeshGroups' MeshGroupTransforms' MeshGroupExtraData);  							RebuildUnderlineIfRequired();  						};  					}    					sizeScrollBar = InsertUiForSlider(wordOptionContainer' "Size:".Localize()' .3' 2);  					{  						sizeScrollBar.ValueChanged += (sender' e) =>  						{  							SetWordSize(MeshGroups' MeshGroupTransforms);    							//SetWordSpacing(MeshGroups' MeshGroupTransforms' MeshGroupExtraData);  							RebuildUnderlineIfRequired();  						};  					}    					heightScrollBar = InsertUiForSlider(wordOptionContainer' "Height:".Localize()' .05' 1);  					{  						heightScrollBar.ValueChanged += (sender' e) =>  						{  							SetWordHeight(MeshGroups' MeshGroupTransforms);  							RebuildUnderlineIfRequired();  						};  					}    					createUnderline = new CheckBox(new CheckBoxViewText("Underline".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor));  					createUnderline.Checked = true;  					createUnderline.Margin = new BorderDouble(10' 5);  					createUnderline.HAnchor = HAnchor.ParentLeft;  					wordOptionContainer.AddChild(createUnderline);  					createUnderline.CheckedStateChanged += (sender' e) =>  					{  						int oldIndex = SelectedMeshGroupIndex;  						if (!createUnderline.Checked)  						{  							// we need to remove the underline  							if (MeshGroups.Count > 1)  							{  								SelectedMeshGroupIndex = MeshGroups.Count - 1;  								DeleteSelectedMesh();  							}  						}  						else if (MeshGroups.Count > 0)  						{  							// we need to add the underline  							CreateUnderline(MeshGroups' MeshGroupTransforms' MeshGroupExtraData);  						}  						SelectedMeshGroupIndex = Math.Min(oldIndex' MeshGroups.Count - 1);  					};    					expandWordOptions.CheckedStateChanged += (sender' e) =>  					{  						wordOptionContainer.Visible = expandWordOptions.Checked;  					};    					expandWordOptions.Checked = true;  				}    				// put in the letter editing menu  				{  					CheckBox expandLetterOptions = ExpandMenuOptionFactory.GenerateCheckBoxButton("Letter"'  					View3DWidget.ArrowRight'  					View3DWidget.ArrowDown);  					expandLetterOptions.Margin = new BorderDouble(bottom: 2);  					//buttonRightPanel.AddChild(expandLetterOptions);    					FlowLayoutWidget letterOptionContainer = new FlowLayoutWidget(FlowDirection.TopToBottom);  					letterOptionContainer.HAnchor = HAnchor.ParentLeftRight;  					letterOptionContainer.Visible = false;  					buttonRightPanel.AddChild(letterOptionContainer);    					SolidSlider sizeScrollBar = InsertUiForSlider(letterOptionContainer' "Size:".Localize());  					SolidSlider heightScrollBar = InsertUiForSlider(letterOptionContainer' "Height:".Localize());  					SolidSlider rotationScrollBar = InsertUiForSlider(letterOptionContainer' "Rotation:".Localize());    					expandLetterOptions.CheckedStateChanged += (sender' e) =>  					{  						letterOptionContainer.Visible = expandLetterOptions.Checked;  					};  				}    				GuiWidget verticalSpacer = new GuiWidget();  				verticalSpacer.VAnchor = VAnchor.ParentBottomTop;  				buttonRightPanel.AddChild(verticalSpacer);    				saveButton = WhiteButtonFactory.Generate("Save".Localize()' centerText: true);  				saveButton.Visible = false;  				saveButton.Cursor = Cursors.Hand;    				saveAndExitButton = WhiteButtonFactory.Generate("Save & Exit".Localize()' centerText: true);  				saveAndExitButton.Visible = false;  				saveAndExitButton.Cursor = Cursors.Hand;    				//buttonRightPanel.AddChild(saveButton);  				buttonRightPanel.AddChild(saveAndExitButton);  			}
Magic Number,MatterHackers.MatterControl.Plugins.TextCreator,View3DTextCreator,C:\repos\MatterHackers_MatterControl\TextCreator\View3DTextCreator.cs,CreateRightButtonPanel,The following statement contains a magic number: {  				BorderDouble buttonMargin = new BorderDouble(top: 3);    				// put in the word editing menu  				{  					CheckBox expandWordOptions = ExpandMenuOptionFactory.GenerateCheckBoxButton("Word Edit".Localize()'  					View3DWidget.ArrowRight'  					View3DWidget.ArrowDown);  					expandWordOptions.Margin = new BorderDouble(bottom: 2);  					buttonRightPanel.AddChild(expandWordOptions);    					FlowLayoutWidget wordOptionContainer = new FlowLayoutWidget(FlowDirection.TopToBottom);  					wordOptionContainer.HAnchor = HAnchor.ParentLeftRight;  					wordOptionContainer.Visible = false;  					buttonRightPanel.AddChild(wordOptionContainer);    					spacingScrollBar = InsertUiForSlider(wordOptionContainer' "Spacing:".Localize()' .5' 1);  					{  						spacingScrollBar.ValueChanged += (sender' e) =>  						{  							SetWordSpacing(MeshGroups' MeshGroupTransforms' MeshGroupExtraData);  							RebuildUnderlineIfRequired();  						};  					}    					sizeScrollBar = InsertUiForSlider(wordOptionContainer' "Size:".Localize()' .3' 2);  					{  						sizeScrollBar.ValueChanged += (sender' e) =>  						{  							SetWordSize(MeshGroups' MeshGroupTransforms);    							//SetWordSpacing(MeshGroups' MeshGroupTransforms' MeshGroupExtraData);  							RebuildUnderlineIfRequired();  						};  					}    					heightScrollBar = InsertUiForSlider(wordOptionContainer' "Height:".Localize()' .05' 1);  					{  						heightScrollBar.ValueChanged += (sender' e) =>  						{  							SetWordHeight(MeshGroups' MeshGroupTransforms);  							RebuildUnderlineIfRequired();  						};  					}    					createUnderline = new CheckBox(new CheckBoxViewText("Underline".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor));  					createUnderline.Checked = true;  					createUnderline.Margin = new BorderDouble(10' 5);  					createUnderline.HAnchor = HAnchor.ParentLeft;  					wordOptionContainer.AddChild(createUnderline);  					createUnderline.CheckedStateChanged += (sender' e) =>  					{  						int oldIndex = SelectedMeshGroupIndex;  						if (!createUnderline.Checked)  						{  							// we need to remove the underline  							if (MeshGroups.Count > 1)  							{  								SelectedMeshGroupIndex = MeshGroups.Count - 1;  								DeleteSelectedMesh();  							}  						}  						else if (MeshGroups.Count > 0)  						{  							// we need to add the underline  							CreateUnderline(MeshGroups' MeshGroupTransforms' MeshGroupExtraData);  						}  						SelectedMeshGroupIndex = Math.Min(oldIndex' MeshGroups.Count - 1);  					};    					expandWordOptions.CheckedStateChanged += (sender' e) =>  					{  						wordOptionContainer.Visible = expandWordOptions.Checked;  					};    					expandWordOptions.Checked = true;  				}    				// put in the letter editing menu  				{  					CheckBox expandLetterOptions = ExpandMenuOptionFactory.GenerateCheckBoxButton("Letter"'  					View3DWidget.ArrowRight'  					View3DWidget.ArrowDown);  					expandLetterOptions.Margin = new BorderDouble(bottom: 2);  					//buttonRightPanel.AddChild(expandLetterOptions);    					FlowLayoutWidget letterOptionContainer = new FlowLayoutWidget(FlowDirection.TopToBottom);  					letterOptionContainer.HAnchor = HAnchor.ParentLeftRight;  					letterOptionContainer.Visible = false;  					buttonRightPanel.AddChild(letterOptionContainer);    					SolidSlider sizeScrollBar = InsertUiForSlider(letterOptionContainer' "Size:".Localize());  					SolidSlider heightScrollBar = InsertUiForSlider(letterOptionContainer' "Height:".Localize());  					SolidSlider rotationScrollBar = InsertUiForSlider(letterOptionContainer' "Rotation:".Localize());    					expandLetterOptions.CheckedStateChanged += (sender' e) =>  					{  						letterOptionContainer.Visible = expandLetterOptions.Checked;  					};  				}    				GuiWidget verticalSpacer = new GuiWidget();  				verticalSpacer.VAnchor = VAnchor.ParentBottomTop;  				buttonRightPanel.AddChild(verticalSpacer);    				saveButton = WhiteButtonFactory.Generate("Save".Localize()' centerText: true);  				saveButton.Visible = false;  				saveButton.Cursor = Cursors.Hand;    				saveAndExitButton = WhiteButtonFactory.Generate("Save & Exit".Localize()' centerText: true);  				saveAndExitButton.Visible = false;  				saveAndExitButton.Cursor = Cursors.Hand;    				//buttonRightPanel.AddChild(saveButton);  				buttonRightPanel.AddChild(saveAndExitButton);  			}
Magic Number,MatterHackers.MatterControl.Plugins.TextCreator,View3DTextCreator,C:\repos\MatterHackers_MatterControl\TextCreator\View3DTextCreator.cs,CreateRightButtonPanel,The following statement contains a magic number: {  				BorderDouble buttonMargin = new BorderDouble(top: 3);    				// put in the word editing menu  				{  					CheckBox expandWordOptions = ExpandMenuOptionFactory.GenerateCheckBoxButton("Word Edit".Localize()'  					View3DWidget.ArrowRight'  					View3DWidget.ArrowDown);  					expandWordOptions.Margin = new BorderDouble(bottom: 2);  					buttonRightPanel.AddChild(expandWordOptions);    					FlowLayoutWidget wordOptionContainer = new FlowLayoutWidget(FlowDirection.TopToBottom);  					wordOptionContainer.HAnchor = HAnchor.ParentLeftRight;  					wordOptionContainer.Visible = false;  					buttonRightPanel.AddChild(wordOptionContainer);    					spacingScrollBar = InsertUiForSlider(wordOptionContainer' "Spacing:".Localize()' .5' 1);  					{  						spacingScrollBar.ValueChanged += (sender' e) =>  						{  							SetWordSpacing(MeshGroups' MeshGroupTransforms' MeshGroupExtraData);  							RebuildUnderlineIfRequired();  						};  					}    					sizeScrollBar = InsertUiForSlider(wordOptionContainer' "Size:".Localize()' .3' 2);  					{  						sizeScrollBar.ValueChanged += (sender' e) =>  						{  							SetWordSize(MeshGroups' MeshGroupTransforms);    							//SetWordSpacing(MeshGroups' MeshGroupTransforms' MeshGroupExtraData);  							RebuildUnderlineIfRequired();  						};  					}    					heightScrollBar = InsertUiForSlider(wordOptionContainer' "Height:".Localize()' .05' 1);  					{  						heightScrollBar.ValueChanged += (sender' e) =>  						{  							SetWordHeight(MeshGroups' MeshGroupTransforms);  							RebuildUnderlineIfRequired();  						};  					}    					createUnderline = new CheckBox(new CheckBoxViewText("Underline".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor));  					createUnderline.Checked = true;  					createUnderline.Margin = new BorderDouble(10' 5);  					createUnderline.HAnchor = HAnchor.ParentLeft;  					wordOptionContainer.AddChild(createUnderline);  					createUnderline.CheckedStateChanged += (sender' e) =>  					{  						int oldIndex = SelectedMeshGroupIndex;  						if (!createUnderline.Checked)  						{  							// we need to remove the underline  							if (MeshGroups.Count > 1)  							{  								SelectedMeshGroupIndex = MeshGroups.Count - 1;  								DeleteSelectedMesh();  							}  						}  						else if (MeshGroups.Count > 0)  						{  							// we need to add the underline  							CreateUnderline(MeshGroups' MeshGroupTransforms' MeshGroupExtraData);  						}  						SelectedMeshGroupIndex = Math.Min(oldIndex' MeshGroups.Count - 1);  					};    					expandWordOptions.CheckedStateChanged += (sender' e) =>  					{  						wordOptionContainer.Visible = expandWordOptions.Checked;  					};    					expandWordOptions.Checked = true;  				}    				// put in the letter editing menu  				{  					CheckBox expandLetterOptions = ExpandMenuOptionFactory.GenerateCheckBoxButton("Letter"'  					View3DWidget.ArrowRight'  					View3DWidget.ArrowDown);  					expandLetterOptions.Margin = new BorderDouble(bottom: 2);  					//buttonRightPanel.AddChild(expandLetterOptions);    					FlowLayoutWidget letterOptionContainer = new FlowLayoutWidget(FlowDirection.TopToBottom);  					letterOptionContainer.HAnchor = HAnchor.ParentLeftRight;  					letterOptionContainer.Visible = false;  					buttonRightPanel.AddChild(letterOptionContainer);    					SolidSlider sizeScrollBar = InsertUiForSlider(letterOptionContainer' "Size:".Localize());  					SolidSlider heightScrollBar = InsertUiForSlider(letterOptionContainer' "Height:".Localize());  					SolidSlider rotationScrollBar = InsertUiForSlider(letterOptionContainer' "Rotation:".Localize());    					expandLetterOptions.CheckedStateChanged += (sender' e) =>  					{  						letterOptionContainer.Visible = expandLetterOptions.Checked;  					};  				}    				GuiWidget verticalSpacer = new GuiWidget();  				verticalSpacer.VAnchor = VAnchor.ParentBottomTop;  				buttonRightPanel.AddChild(verticalSpacer);    				saveButton = WhiteButtonFactory.Generate("Save".Localize()' centerText: true);  				saveButton.Visible = false;  				saveButton.Cursor = Cursors.Hand;    				saveAndExitButton = WhiteButtonFactory.Generate("Save & Exit".Localize()' centerText: true);  				saveAndExitButton.Visible = false;  				saveAndExitButton.Cursor = Cursors.Hand;    				//buttonRightPanel.AddChild(saveButton);  				buttonRightPanel.AddChild(saveAndExitButton);  			}
Magic Number,MatterHackers.MatterControl.Plugins.TextCreator,View3DTextCreator,C:\repos\MatterHackers_MatterControl\TextCreator\View3DTextCreator.cs,CreateRightButtonPanel,The following statement contains a magic number: {  				BorderDouble buttonMargin = new BorderDouble(top: 3);    				// put in the word editing menu  				{  					CheckBox expandWordOptions = ExpandMenuOptionFactory.GenerateCheckBoxButton("Word Edit".Localize()'  					View3DWidget.ArrowRight'  					View3DWidget.ArrowDown);  					expandWordOptions.Margin = new BorderDouble(bottom: 2);  					buttonRightPanel.AddChild(expandWordOptions);    					FlowLayoutWidget wordOptionContainer = new FlowLayoutWidget(FlowDirection.TopToBottom);  					wordOptionContainer.HAnchor = HAnchor.ParentLeftRight;  					wordOptionContainer.Visible = false;  					buttonRightPanel.AddChild(wordOptionContainer);    					spacingScrollBar = InsertUiForSlider(wordOptionContainer' "Spacing:".Localize()' .5' 1);  					{  						spacingScrollBar.ValueChanged += (sender' e) =>  						{  							SetWordSpacing(MeshGroups' MeshGroupTransforms' MeshGroupExtraData);  							RebuildUnderlineIfRequired();  						};  					}    					sizeScrollBar = InsertUiForSlider(wordOptionContainer' "Size:".Localize()' .3' 2);  					{  						sizeScrollBar.ValueChanged += (sender' e) =>  						{  							SetWordSize(MeshGroups' MeshGroupTransforms);    							//SetWordSpacing(MeshGroups' MeshGroupTransforms' MeshGroupExtraData);  							RebuildUnderlineIfRequired();  						};  					}    					heightScrollBar = InsertUiForSlider(wordOptionContainer' "Height:".Localize()' .05' 1);  					{  						heightScrollBar.ValueChanged += (sender' e) =>  						{  							SetWordHeight(MeshGroups' MeshGroupTransforms);  							RebuildUnderlineIfRequired();  						};  					}    					createUnderline = new CheckBox(new CheckBoxViewText("Underline".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor));  					createUnderline.Checked = true;  					createUnderline.Margin = new BorderDouble(10' 5);  					createUnderline.HAnchor = HAnchor.ParentLeft;  					wordOptionContainer.AddChild(createUnderline);  					createUnderline.CheckedStateChanged += (sender' e) =>  					{  						int oldIndex = SelectedMeshGroupIndex;  						if (!createUnderline.Checked)  						{  							// we need to remove the underline  							if (MeshGroups.Count > 1)  							{  								SelectedMeshGroupIndex = MeshGroups.Count - 1;  								DeleteSelectedMesh();  							}  						}  						else if (MeshGroups.Count > 0)  						{  							// we need to add the underline  							CreateUnderline(MeshGroups' MeshGroupTransforms' MeshGroupExtraData);  						}  						SelectedMeshGroupIndex = Math.Min(oldIndex' MeshGroups.Count - 1);  					};    					expandWordOptions.CheckedStateChanged += (sender' e) =>  					{  						wordOptionContainer.Visible = expandWordOptions.Checked;  					};    					expandWordOptions.Checked = true;  				}    				// put in the letter editing menu  				{  					CheckBox expandLetterOptions = ExpandMenuOptionFactory.GenerateCheckBoxButton("Letter"'  					View3DWidget.ArrowRight'  					View3DWidget.ArrowDown);  					expandLetterOptions.Margin = new BorderDouble(bottom: 2);  					//buttonRightPanel.AddChild(expandLetterOptions);    					FlowLayoutWidget letterOptionContainer = new FlowLayoutWidget(FlowDirection.TopToBottom);  					letterOptionContainer.HAnchor = HAnchor.ParentLeftRight;  					letterOptionContainer.Visible = false;  					buttonRightPanel.AddChild(letterOptionContainer);    					SolidSlider sizeScrollBar = InsertUiForSlider(letterOptionContainer' "Size:".Localize());  					SolidSlider heightScrollBar = InsertUiForSlider(letterOptionContainer' "Height:".Localize());  					SolidSlider rotationScrollBar = InsertUiForSlider(letterOptionContainer' "Rotation:".Localize());    					expandLetterOptions.CheckedStateChanged += (sender' e) =>  					{  						letterOptionContainer.Visible = expandLetterOptions.Checked;  					};  				}    				GuiWidget verticalSpacer = new GuiWidget();  				verticalSpacer.VAnchor = VAnchor.ParentBottomTop;  				buttonRightPanel.AddChild(verticalSpacer);    				saveButton = WhiteButtonFactory.Generate("Save".Localize()' centerText: true);  				saveButton.Visible = false;  				saveButton.Cursor = Cursors.Hand;    				saveAndExitButton = WhiteButtonFactory.Generate("Save & Exit".Localize()' centerText: true);  				saveAndExitButton.Visible = false;  				saveAndExitButton.Cursor = Cursors.Hand;    				//buttonRightPanel.AddChild(saveButton);  				buttonRightPanel.AddChild(saveAndExitButton);  			}
Magic Number,MatterHackers.MatterControl.Plugins.TextCreator,View3DTextCreator,C:\repos\MatterHackers_MatterControl\TextCreator\View3DTextCreator.cs,CreateRightButtonPanel,The following statement contains a magic number: {  				BorderDouble buttonMargin = new BorderDouble(top: 3);    				// put in the word editing menu  				{  					CheckBox expandWordOptions = ExpandMenuOptionFactory.GenerateCheckBoxButton("Word Edit".Localize()'  					View3DWidget.ArrowRight'  					View3DWidget.ArrowDown);  					expandWordOptions.Margin = new BorderDouble(bottom: 2);  					buttonRightPanel.AddChild(expandWordOptions);    					FlowLayoutWidget wordOptionContainer = new FlowLayoutWidget(FlowDirection.TopToBottom);  					wordOptionContainer.HAnchor = HAnchor.ParentLeftRight;  					wordOptionContainer.Visible = false;  					buttonRightPanel.AddChild(wordOptionContainer);    					spacingScrollBar = InsertUiForSlider(wordOptionContainer' "Spacing:".Localize()' .5' 1);  					{  						spacingScrollBar.ValueChanged += (sender' e) =>  						{  							SetWordSpacing(MeshGroups' MeshGroupTransforms' MeshGroupExtraData);  							RebuildUnderlineIfRequired();  						};  					}    					sizeScrollBar = InsertUiForSlider(wordOptionContainer' "Size:".Localize()' .3' 2);  					{  						sizeScrollBar.ValueChanged += (sender' e) =>  						{  							SetWordSize(MeshGroups' MeshGroupTransforms);    							//SetWordSpacing(MeshGroups' MeshGroupTransforms' MeshGroupExtraData);  							RebuildUnderlineIfRequired();  						};  					}    					heightScrollBar = InsertUiForSlider(wordOptionContainer' "Height:".Localize()' .05' 1);  					{  						heightScrollBar.ValueChanged += (sender' e) =>  						{  							SetWordHeight(MeshGroups' MeshGroupTransforms);  							RebuildUnderlineIfRequired();  						};  					}    					createUnderline = new CheckBox(new CheckBoxViewText("Underline".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor));  					createUnderline.Checked = true;  					createUnderline.Margin = new BorderDouble(10' 5);  					createUnderline.HAnchor = HAnchor.ParentLeft;  					wordOptionContainer.AddChild(createUnderline);  					createUnderline.CheckedStateChanged += (sender' e) =>  					{  						int oldIndex = SelectedMeshGroupIndex;  						if (!createUnderline.Checked)  						{  							// we need to remove the underline  							if (MeshGroups.Count > 1)  							{  								SelectedMeshGroupIndex = MeshGroups.Count - 1;  								DeleteSelectedMesh();  							}  						}  						else if (MeshGroups.Count > 0)  						{  							// we need to add the underline  							CreateUnderline(MeshGroups' MeshGroupTransforms' MeshGroupExtraData);  						}  						SelectedMeshGroupIndex = Math.Min(oldIndex' MeshGroups.Count - 1);  					};    					expandWordOptions.CheckedStateChanged += (sender' e) =>  					{  						wordOptionContainer.Visible = expandWordOptions.Checked;  					};    					expandWordOptions.Checked = true;  				}    				// put in the letter editing menu  				{  					CheckBox expandLetterOptions = ExpandMenuOptionFactory.GenerateCheckBoxButton("Letter"'  					View3DWidget.ArrowRight'  					View3DWidget.ArrowDown);  					expandLetterOptions.Margin = new BorderDouble(bottom: 2);  					//buttonRightPanel.AddChild(expandLetterOptions);    					FlowLayoutWidget letterOptionContainer = new FlowLayoutWidget(FlowDirection.TopToBottom);  					letterOptionContainer.HAnchor = HAnchor.ParentLeftRight;  					letterOptionContainer.Visible = false;  					buttonRightPanel.AddChild(letterOptionContainer);    					SolidSlider sizeScrollBar = InsertUiForSlider(letterOptionContainer' "Size:".Localize());  					SolidSlider heightScrollBar = InsertUiForSlider(letterOptionContainer' "Height:".Localize());  					SolidSlider rotationScrollBar = InsertUiForSlider(letterOptionContainer' "Rotation:".Localize());    					expandLetterOptions.CheckedStateChanged += (sender' e) =>  					{  						letterOptionContainer.Visible = expandLetterOptions.Checked;  					};  				}    				GuiWidget verticalSpacer = new GuiWidget();  				verticalSpacer.VAnchor = VAnchor.ParentBottomTop;  				buttonRightPanel.AddChild(verticalSpacer);    				saveButton = WhiteButtonFactory.Generate("Save".Localize()' centerText: true);  				saveButton.Visible = false;  				saveButton.Cursor = Cursors.Hand;    				saveAndExitButton = WhiteButtonFactory.Generate("Save & Exit".Localize()' centerText: true);  				saveAndExitButton.Visible = false;  				saveAndExitButton.Cursor = Cursors.Hand;    				//buttonRightPanel.AddChild(saveButton);  				buttonRightPanel.AddChild(saveAndExitButton);  			}
Magic Number,MatterHackers.MatterControl.Plugins.TextCreator,View3DTextCreator,C:\repos\MatterHackers_MatterControl\TextCreator\View3DTextCreator.cs,CreateRightButtonPanel,The following statement contains a magic number: {  				BorderDouble buttonMargin = new BorderDouble(top: 3);    				// put in the word editing menu  				{  					CheckBox expandWordOptions = ExpandMenuOptionFactory.GenerateCheckBoxButton("Word Edit".Localize()'  					View3DWidget.ArrowRight'  					View3DWidget.ArrowDown);  					expandWordOptions.Margin = new BorderDouble(bottom: 2);  					buttonRightPanel.AddChild(expandWordOptions);    					FlowLayoutWidget wordOptionContainer = new FlowLayoutWidget(FlowDirection.TopToBottom);  					wordOptionContainer.HAnchor = HAnchor.ParentLeftRight;  					wordOptionContainer.Visible = false;  					buttonRightPanel.AddChild(wordOptionContainer);    					spacingScrollBar = InsertUiForSlider(wordOptionContainer' "Spacing:".Localize()' .5' 1);  					{  						spacingScrollBar.ValueChanged += (sender' e) =>  						{  							SetWordSpacing(MeshGroups' MeshGroupTransforms' MeshGroupExtraData);  							RebuildUnderlineIfRequired();  						};  					}    					sizeScrollBar = InsertUiForSlider(wordOptionContainer' "Size:".Localize()' .3' 2);  					{  						sizeScrollBar.ValueChanged += (sender' e) =>  						{  							SetWordSize(MeshGroups' MeshGroupTransforms);    							//SetWordSpacing(MeshGroups' MeshGroupTransforms' MeshGroupExtraData);  							RebuildUnderlineIfRequired();  						};  					}    					heightScrollBar = InsertUiForSlider(wordOptionContainer' "Height:".Localize()' .05' 1);  					{  						heightScrollBar.ValueChanged += (sender' e) =>  						{  							SetWordHeight(MeshGroups' MeshGroupTransforms);  							RebuildUnderlineIfRequired();  						};  					}    					createUnderline = new CheckBox(new CheckBoxViewText("Underline".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor));  					createUnderline.Checked = true;  					createUnderline.Margin = new BorderDouble(10' 5);  					createUnderline.HAnchor = HAnchor.ParentLeft;  					wordOptionContainer.AddChild(createUnderline);  					createUnderline.CheckedStateChanged += (sender' e) =>  					{  						int oldIndex = SelectedMeshGroupIndex;  						if (!createUnderline.Checked)  						{  							// we need to remove the underline  							if (MeshGroups.Count > 1)  							{  								SelectedMeshGroupIndex = MeshGroups.Count - 1;  								DeleteSelectedMesh();  							}  						}  						else if (MeshGroups.Count > 0)  						{  							// we need to add the underline  							CreateUnderline(MeshGroups' MeshGroupTransforms' MeshGroupExtraData);  						}  						SelectedMeshGroupIndex = Math.Min(oldIndex' MeshGroups.Count - 1);  					};    					expandWordOptions.CheckedStateChanged += (sender' e) =>  					{  						wordOptionContainer.Visible = expandWordOptions.Checked;  					};    					expandWordOptions.Checked = true;  				}    				// put in the letter editing menu  				{  					CheckBox expandLetterOptions = ExpandMenuOptionFactory.GenerateCheckBoxButton("Letter"'  					View3DWidget.ArrowRight'  					View3DWidget.ArrowDown);  					expandLetterOptions.Margin = new BorderDouble(bottom: 2);  					//buttonRightPanel.AddChild(expandLetterOptions);    					FlowLayoutWidget letterOptionContainer = new FlowLayoutWidget(FlowDirection.TopToBottom);  					letterOptionContainer.HAnchor = HAnchor.ParentLeftRight;  					letterOptionContainer.Visible = false;  					buttonRightPanel.AddChild(letterOptionContainer);    					SolidSlider sizeScrollBar = InsertUiForSlider(letterOptionContainer' "Size:".Localize());  					SolidSlider heightScrollBar = InsertUiForSlider(letterOptionContainer' "Height:".Localize());  					SolidSlider rotationScrollBar = InsertUiForSlider(letterOptionContainer' "Rotation:".Localize());    					expandLetterOptions.CheckedStateChanged += (sender' e) =>  					{  						letterOptionContainer.Visible = expandLetterOptions.Checked;  					};  				}    				GuiWidget verticalSpacer = new GuiWidget();  				verticalSpacer.VAnchor = VAnchor.ParentBottomTop;  				buttonRightPanel.AddChild(verticalSpacer);    				saveButton = WhiteButtonFactory.Generate("Save".Localize()' centerText: true);  				saveButton.Visible = false;  				saveButton.Cursor = Cursors.Hand;    				saveAndExitButton = WhiteButtonFactory.Generate("Save & Exit".Localize()' centerText: true);  				saveAndExitButton.Visible = false;  				saveAndExitButton.Cursor = Cursors.Hand;    				//buttonRightPanel.AddChild(saveButton);  				buttonRightPanel.AddChild(saveAndExitButton);  			}
Magic Number,MatterHackers.MatterControl.Plugins.TextCreator,View3DTextCreator,C:\repos\MatterHackers_MatterControl\TextCreator\View3DTextCreator.cs,CreateRightButtonPanel,The following statement contains a magic number: buttonRightPanel.Padding = new BorderDouble(6' 6);
Magic Number,MatterHackers.MatterControl.Plugins.TextCreator,View3DTextCreator,C:\repos\MatterHackers_MatterControl\TextCreator\View3DTextCreator.cs,CreateRightButtonPanel,The following statement contains a magic number: buttonRightPanel.Padding = new BorderDouble(6' 6);
Magic Number,MatterHackers.MatterControl.Plugins.TextCreator,View3DTextCreator,C:\repos\MatterHackers_MatterControl\TextCreator\View3DTextCreator.cs,AddLetterControls,The following statement contains a magic number: textImageButtonFactory.FixedWidth = 44 * GuiWidget.DeviceScale;
Magic Number,MatterHackers.MatterControl.Plugins.TextCreator,View3DTextCreator,C:\repos\MatterHackers_MatterControl\TextCreator\View3DTextCreator.cs,AddLetterControls,The following statement contains a magic number: degreesContainer.Padding = new BorderDouble(5);
Magic Number,MatterHackers.MatterControl.Plugins.TextCreator,View3DTextCreator,C:\repos\MatterHackers_MatterControl\TextCreator\View3DTextCreator.cs,AddLetterControls,The following statement contains a magic number: MHNumberEdit degreesControl = new MHNumberEdit(45' pixelWidth: 40' allowNegatives: true' increment: 5' minValue: -360' maxValue: 360);
Magic Number,MatterHackers.MatterControl.Plugins.TextCreator,View3DTextCreator,C:\repos\MatterHackers_MatterControl\TextCreator\View3DTextCreator.cs,AddLetterControls,The following statement contains a magic number: MHNumberEdit degreesControl = new MHNumberEdit(45' pixelWidth: 40' allowNegatives: true' increment: 5' minValue: -360' maxValue: 360);
Magic Number,MatterHackers.MatterControl.Plugins.TextCreator,View3DTextCreator,C:\repos\MatterHackers_MatterControl\TextCreator\View3DTextCreator.cs,AddLetterControls,The following statement contains a magic number: MHNumberEdit degreesControl = new MHNumberEdit(45' pixelWidth: 40' allowNegatives: true' increment: 5' minValue: -360' maxValue: 360);
Magic Number,MatterHackers.MatterControl.Plugins.TextCreator,View3DTextCreator,C:\repos\MatterHackers_MatterControl\TextCreator\View3DTextCreator.cs,AddLetterControls,The following statement contains a magic number: MHNumberEdit degreesControl = new MHNumberEdit(45' pixelWidth: 40' allowNegatives: true' increment: 5' minValue: -360' maxValue: 360);
Magic Number,MatterHackers.MatterControl.Plugins.TextCreator,View3DTextCreator,C:\repos\MatterHackers_MatterControl\TextCreator\View3DTextCreator.cs,AddLetterControls,The following statement contains a magic number: MHNumberEdit degreesControl = new MHNumberEdit(45' pixelWidth: 40' allowNegatives: true' increment: 5' minValue: -360' maxValue: 360);
Magic Number,MatterHackers.MatterControl.Plugins.TextCreator,View3DTextCreator,C:\repos\MatterHackers_MatterControl\TextCreator\View3DTextCreator.cs,generateHorizontalRule,The following statement contains a magic number: horizontalRule.Margin = new BorderDouble(0' 1' 0' 3);
Magic Number,MatterHackers.MatterControl.Plugins.TextCreator,View3DTextCreator,C:\repos\MatterHackers_MatterControl\TextCreator\View3DTextCreator.cs,generateHorizontalRule,The following statement contains a magic number: horizontalRule.BackgroundColor = new RGBA_Bytes(255' 255' 255' 200);
Magic Number,MatterHackers.MatterControl.Plugins.TextCreator,View3DTextCreator,C:\repos\MatterHackers_MatterControl\TextCreator\View3DTextCreator.cs,generateHorizontalRule,The following statement contains a magic number: horizontalRule.BackgroundColor = new RGBA_Bytes(255' 255' 255' 200);
Magic Number,MatterHackers.MatterControl.Plugins.TextCreator,View3DTextCreator,C:\repos\MatterHackers_MatterControl\TextCreator\View3DTextCreator.cs,generateHorizontalRule,The following statement contains a magic number: horizontalRule.BackgroundColor = new RGBA_Bytes(255' 255' 255' 200);
Magic Number,MatterHackers.MatterControl.Plugins.TextCreator,View3DTextCreator,C:\repos\MatterHackers_MatterControl\TextCreator\View3DTextCreator.cs,generateHorizontalRule,The following statement contains a magic number: horizontalRule.BackgroundColor = new RGBA_Bytes(255' 255' 255' 200);
Magic Number,MatterHackers.MatterControl.Plugins.TextCreator,View3DTextCreator,C:\repos\MatterHackers_MatterControl\TextCreator\View3DTextCreator.cs,mergeAndSavePartsBackgroundWorker_DoWork,The following statement contains a magic number: try  			{  				// push all the transforms into the meshes  				for (int i = 0; i < asyncMeshGroups.Count; i++)  				{  					asyncMeshGroups[i].Transform(MeshGroupTransforms[i]);    					processingProgressControl.RatioComplete = (double)i / asyncMeshGroups.Count * .1;  				}    				List<MeshGroup> mergResults = new List<MeshGroup>();  				mergResults.Add(new MeshGroup());  				mergResults[0].Meshes.Add(new Mesh());  				double meshGroupIndex = 0;  				foreach (MeshGroup meshGroup in asyncMeshGroups)  				{  					foreach (Mesh mesh in meshGroup.Meshes)  					{  						processingProgressControl.RatioComplete = .1 + (double)meshGroupIndex / asyncMeshGroups.Count;  						mergResults[0].Meshes[0] = CsgOperations.Union(mergResults[0].Meshes[0]' mesh);  					}  					meshGroupIndex++;  				}    				MeshFileIo.Save(mergResults' filePath);  			}  			catch (System.UnauthorizedAccessException)  			{  				//Do something special when unauthorized?  				UiThread.RunOnIdle(() => StyledMessageBox.ShowMessageBox(null' "Oops! Unable to save changes.".Localize()' "Unable to save".Localize()));  			}  			catch  			{  				UiThread.RunOnIdle(() => StyledMessageBox.ShowMessageBox(null' "Oops! Unable to save changes.".Localize()' "Unable to save".Localize()));  			}
Magic Number,MatterHackers.MatterControl.Plugins.TextCreator,View3DTextCreator,C:\repos\MatterHackers_MatterControl\TextCreator\View3DTextCreator.cs,mergeAndSavePartsBackgroundWorker_DoWork,The following statement contains a magic number: try  			{  				// push all the transforms into the meshes  				for (int i = 0; i < asyncMeshGroups.Count; i++)  				{  					asyncMeshGroups[i].Transform(MeshGroupTransforms[i]);    					processingProgressControl.RatioComplete = (double)i / asyncMeshGroups.Count * .1;  				}    				List<MeshGroup> mergResults = new List<MeshGroup>();  				mergResults.Add(new MeshGroup());  				mergResults[0].Meshes.Add(new Mesh());  				double meshGroupIndex = 0;  				foreach (MeshGroup meshGroup in asyncMeshGroups)  				{  					foreach (Mesh mesh in meshGroup.Meshes)  					{  						processingProgressControl.RatioComplete = .1 + (double)meshGroupIndex / asyncMeshGroups.Count;  						mergResults[0].Meshes[0] = CsgOperations.Union(mergResults[0].Meshes[0]' mesh);  					}  					meshGroupIndex++;  				}    				MeshFileIo.Save(mergResults' filePath);  			}  			catch (System.UnauthorizedAccessException)  			{  				//Do something special when unauthorized?  				UiThread.RunOnIdle(() => StyledMessageBox.ShowMessageBox(null' "Oops! Unable to save changes.".Localize()' "Unable to save".Localize()));  			}  			catch  			{  				UiThread.RunOnIdle(() => StyledMessageBox.ShowMessageBox(null' "Oops! Unable to save changes.".Localize()' "Unable to save".Localize()));  			}
