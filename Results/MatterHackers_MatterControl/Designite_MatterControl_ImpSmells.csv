Implementation smell,Namespace,Class,File,Method,Description
Long Method,MatterHackers.MatterControl,HtmlWidget,C:\repos\MatterHackers_MatterControl\AboutPage\HTMLParser\HtmlWidget.cs,AddContent,The method has 155 lines of code.
Long Method,MatterHackers.MatterControl,TouchscreenTabView,C:\repos\MatterHackers_MatterControl\ApplicationView\TouchscreenTabView.cs,TouchscreenTabView,The method has 133 lines of code.
Long Method,MatterHackers.MatterControl,ExportPrintItemWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\ExportPrintItemWindow.cs,CreateWindowContent,The method has 197 lines of code.
Long Method,MatterHackers.MatterControl,TerminalWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\TerminalWindow\TerminalWidget.cs,TerminalWidget,The method has 116 lines of code.
Long Method,MatterHackers.MatterControl,SelectPartsOfPrinterToImport,C:\repos\MatterHackers_MatterControl\SetupWizard\ImportSettingsPage.cs,SelectPartsOfPrinterToImport,The method has 168 lines of code.
Long Method,MatterHackers.MatterControl,EditLevelingSettingsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditLevelingSettingsWindow.cs,EditLevelingSettingsWindow,The method has 106 lines of code.
Long Method,MatterHackers.MatterControl,CreateDiscreteMeshes,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\CreateDiscreteMeshes.cs,SplitIntoMeshesOnOrthographicZ,The method has 100 lines of code.
Long Method,MatterHackers.MatterControl,EditTemperaturePresetsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditTemperaturePresetsWindow.cs,EditTemperaturePresetsWindow,The method has 125 lines of code.
Long Method,MatterHackers.MatterControl,EditManualMovementSpeedsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditManualMovementSpeedsWindow.cs,EditManualMovementSpeedsWindow,The method has 106 lines of code.
Long Method,MatterHackers.MatterControl,StyledMessageBox,C:\repos\MatterHackers_MatterControl\ControlElements\StyledMessageBoxWindow.cs,StyledMessageBox,The method has 113 lines of code.
Long Method,MatterHackers.MatterControl,ManualPrinterControlsDesktop,C:\repos\MatterHackers_MatterControl\PrinterControls\ManualPrinterControls.cs,SetVisibleControls,The method has 119 lines of code.
Long Method,MatterHackers.MatterControl,ManualPrinterControlsTouchScreen,C:\repos\MatterHackers_MatterControl\PrinterControls\ManualPrinterControls.cs,ManualPrinterControlsTouchScreen,The method has 106 lines of code.
Long Method,MatterHackers.MatterControl,ManualPrinterControlsTouchScreen,C:\repos\MatterHackers_MatterControl\PrinterControls\ManualPrinterControls.cs,SetVisibleControls,The method has 121 lines of code.
Long Method,MatterHackers.MatterControl,JogControls,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,JogControls,The method has 181 lines of code.
Long Method,MatterHackers.MatterControl,JogControls,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,CreateEButtons,The method has 114 lines of code.
Long Method,MatterHackers.MatterControl,MatterControlApplication,C:\repos\MatterHackers_MatterControl\MatterControlApplication.cs,MatterControlApplication,The method has 165 lines of code.
Long Method,MatterHackers.MatterControl,SaveAsWindow,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\SaveAsWindow.cs,SaveAsWindow,The method has 101 lines of code.
Long Method,MatterHackers.MatterControl.AboutPage,CheckForUpdateWindow,C:\repos\MatterHackers_MatterControl\AboutPage\CheckForUpdateWindow.cs,CheckForUpdateWindow,The method has 141 lines of code.
Long Method,MatterHackers.MatterControl.ActionBar,PrintActionRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintActionRow.cs,AddChildElements,The method has 133 lines of code.
Long Method,MatterHackers.MatterControl.ActionBar,PrinterConnectAndSelectControl,C:\repos\MatterHackers_MatterControl\ActionBar\PrinterConnectAndSelectControl.cs,AddChildElements,The method has 108 lines of code.
Long Method,MatterHackers.MatterControl.CustomWidgets,PrintingWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,CreateActionBar,The method has 118 lines of code.
Long Method,MatterHackers.MatterControl.CustomWidgets,BasicBody,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,OnLoad,The method has 162 lines of code.
Long Method,MatterHackers.MatterControl.PrinterCommunication.Io,WaitForTempStream,C:\repos\MatterHackers_MatterControl\PrinterCommunication\Io\WaitForTempStream.cs,ReadLine,The method has 120 lines of code.
Long Method,MatterHackers.MatterControl.PrinterCommunication.Io,QueuedCommandsStream,C:\repos\MatterHackers_MatterControl\PrinterCommunication\Io\QueuedCommandsStream.cs,ReadLine,The method has 125 lines of code.
Long Method,MatterHackers.MatterControl.PrinterCommunication.Io,PrintRecoveryStream,C:\repos\MatterHackers_MatterControl\PrinterCommunication\Io\PrintRecoveryStream.cs,ReadLine,The method has 183 lines of code.
Long Method,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,View3DWidget,The method has 280 lines of code.
Long Method,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,CreateRightButtonPanel,The method has 126 lines of code.
Long Method,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,MergeAndSavePartsDoWork,The method has 124 lines of code.
Long Method,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,CreateAndAddChildren,The method has 132 lines of code.
Long Method,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,AddDisplayControls,The method has 136 lines of code.
Long Method,MatterHackers.MatterControl.PrinterControls,AdjustmentControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\AdjustmentControls.cs,AdjustmentControls,The method has 169 lines of code.
Long Method,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,C:\repos\MatterHackers_MatterControl\History\PrintHistoryListItem.cs,AddChildElements,The method has 187 lines of code.
Long Method,MatterHackers.MatterControl.SlicerConfiguration,PrinterSettings,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\PrinterSettings.cs,IsValid,The method has 165 lines of code.
Long Method,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,SliceSettingsWidget,The method has 124 lines of code.
Long Method,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSideTabsAndPages,The method has 139 lines of code.
Long Method,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The method has 748 lines of code.
Long Method,MatterHackers.MatterControl.SlicerConfiguration,SlicingQueue,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SlicingQueue.cs,GetStlFileLocations,The method has 119 lines of code.
Long Method,MatterHackers.MatterControl.SlicerConfiguration,SlicingQueue,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SlicingQueue.cs,CreateSlicedPartsThread,The method has 168 lines of code.
Long Method,MatterHackers.MatterControl.EeProm,EePromMarlinSettings,C:\repos\MatterHackers_MatterControl\EeProm\EePromMarlinSettings.cs,update,The method has 158 lines of code.
Long Method,MatterHackers.MatterControl.EeProm,EePromMarlinWindow,C:\repos\MatterHackers_MatterControl\EeProm\EePromMarlinWindow.cs,EePromMarlinWindow,The method has 164 lines of code.
Long Method,MatterHackers.MatterControl.EeProm,EePromRepetierWindow,C:\repos\MatterHackers_MatterControl\EeProm\EePromRepetierWindow.cs,EePromRepetierWindow,The method has 130 lines of code.
Long Method,MatterHackers.MatterControl.PrintQueue,QueueDataWidget,C:\repos\MatterHackers_MatterControl\Queue\QueueDataWidget.cs,QueueDataWidget,The method has 128 lines of code.
Long Method,MatterHackers.MatterControl.CreatorPlugins,PluginChooserWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\PluginChooserWindow.cs,AddElements,The method has 138 lines of code.
Long Method,SQLiteWin32,TableQuery<T>,C:\repos\MatterHackers_MatterControl\DataStorage\SQLiteWin32.cs,CompileExpr,The method has 181 lines of code.
Long Method,SQLiteUnix,TableQuery<T>,C:\repos\MatterHackers_MatterControl\DataStorage\SQLiteUnix.cs,CompileExpr,The method has 181 lines of code.
Long Method,MatterHackers.MatterControl.PrinterCommunication,PrinterConnectionAndCommunication,C:\repos\MatterHackers_MatterControl\PrinterCommunication\PrinterConnectionAndCommunication.cs,ReadFromPrinter,The method has 144 lines of code.
Long Method,MatterHackers.MatterControl.PrinterCommunication,PrinterConnectionAndCommunication,C:\repos\MatterHackers_MatterControl\PrinterCommunication\PrinterConnectionAndCommunication.cs,TryWriteNextLineFromGCodeFile,The method has 122 lines of code.
Long Method,SQLiteAndroid,TableQuery<T>,C:\repos\MatterHackers_MatterControl\DataStorage\SQLiteAndroid.cs,CompileExpr,The method has 181 lines of code.
Complex Method,MatterHackers.MatterControl,ExportPrintItemWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\ExportPrintItemWindow.cs,CreateWindowContent,Cyclomatic complexity of the method is 9
Complex Method,MatterHackers.MatterControl,CreateDiscreteMeshes,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\CreateDiscreteMeshes.cs,SplitVolumesIntoMeshes,Cyclomatic complexity of the method is 9
Complex Method,MatterHackers.MatterControl,CreateDiscreteMeshes,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\CreateDiscreteMeshes.cs,SplitIntoMeshesOnOrthographicZ,Cyclomatic complexity of the method is 15
Complex Method,MatterHackers.MatterControl,PlatingHelper,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\PlatingHelper.cs,ArrangeMeshGroups,Cyclomatic complexity of the method is 9
Complex Method,MatterHackers.MatterControl,PlatingHelper,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\PlatingHelper.cs,MoveMeshGroupToOpenPosition,Cyclomatic complexity of the method is 9
Complex Method,MatterHackers.MatterControl,StyledMessageBox,C:\repos\MatterHackers_MatterControl\ControlElements\StyledMessageBoxWindow.cs,StyledMessageBox,Cyclomatic complexity of the method is 9
Complex Method,MatterHackers.MatterControl,PartsSheet,C:\repos\MatterHackers_MatterControl\Queue\OptionsMenu\PartsSheetCreator.cs,SavingFunction,Cyclomatic complexity of the method is 10
Complex Method,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,BuildImageFromMeshGroups,Cyclomatic complexity of the method is 8
Complex Method,MatterHackers.MatterControl,MatterControlApplication,C:\repos\MatterHackers_MatterControl\MatterControlApplication.cs,MatterControlApplication,Cyclomatic complexity of the method is 9
Complex Method,MatterHackers.MatterControl,TextImageButtonFactory,C:\repos\MatterHackers_MatterControl\ControlElements\TextImageButtonFactory.cs,getButtonView,Cyclomatic complexity of the method is 10
Complex Method,MatterHackers.MatterControl,TextImageButtonFactory,C:\repos\MatterHackers_MatterControl\ControlElements\TextImageButtonFactory.cs,getCheckBoxButtonView,Cyclomatic complexity of the method is 14
Complex Method,MatterHackers.MatterControl,TextImageButtonFactory,C:\repos\MatterHackers_MatterControl\ControlElements\TextImageButtonFactory.cs,getCheckBoxButtonView,Cyclomatic complexity of the method is 11
Complex Method,MatterHackers.MatterControl.CustomWidgets.LibrarySelector,FolderBreadCrumbWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\LibrarySelector\FolderBreadCrumbWidget.cs,SetBreadCrumbs,Cyclomatic complexity of the method is 9
Complex Method,MatterHackers.MatterControl.PrintLibrary.Provider,LibraryProviderSelector,C:\repos\MatterHackers_MatterControl\Library\Provider\LibraryProviderSelector.cs,ReloadData,Cyclomatic complexity of the method is 10
Complex Method,MatterHackers.MatterControl.SettingsManagement,OemSettings,C:\repos\MatterHackers_MatterControl\SettingsManagement\OemSettings.cs,SetManufacturers,Cyclomatic complexity of the method is 8
Complex Method,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,AlignSelected,Cyclomatic complexity of the method is 9
Complex Method,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,View3DWidget,Cyclomatic complexity of the method is 9
Complex Method,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,OnMouseDown,Cyclomatic complexity of the method is 8
Complex Method,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,FindMeshGroupHitPosition,Cyclomatic complexity of the method is 8
Complex Method,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,loadAndAddPartsToPlate,Cyclomatic complexity of the method is 9
Complex Method,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,MakeLowestFaceFlat,Cyclomatic complexity of the method is 11
Complex Method,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,MergeAndSavePartsDoWork,Cyclomatic complexity of the method is 9
Complex Method,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,C:\repos\MatterHackers_MatterControl\History\PrintHistoryListItem.cs,AddChildElements,Cyclomatic complexity of the method is 8
Complex Method,MatterHackers.MatterControl.SlicerConfiguration,PrinterSettings,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\PrinterSettings.cs,IsValid,Cyclomatic complexity of the method is 31
Complex Method,MatterHackers.MatterControl.SlicerConfiguration,MapStartGCode,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SlicerMapping\MappingClasses.cs,PreStartGCode,Cyclomatic complexity of the method is 9
Complex Method,MatterHackers.MatterControl.SlicerConfiguration,MapStartGCode,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SlicerMapping\MappingClasses.cs,PostStartGCode,Cyclomatic complexity of the method is 11
Complex Method,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,SliceSettingsWidget,Cyclomatic complexity of the method is 8
Complex Method,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSideTabsAndPages,Cyclomatic complexity of the method is 14
Complex Method,MatterHackers.MatterControl.SlicerConfiguration,SlicingQueue,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SlicingQueue.cs,CreateSlicedPartsThread,Cyclomatic complexity of the method is 9
Complex Method,MatterHackers.MatterControl.EeProm,EePromMarlinSettings,C:\repos\MatterHackers_MatterControl\EeProm\EePromMarlinSettings.cs,update,Cyclomatic complexity of the method is 36
Complex Method,MatterHackers.MatterControl.PrintQueue,QueueDataView,C:\repos\MatterHackers_MatterControl\Queue\QueueDataView.cs,SelectedIndexChanged,Cyclomatic complexity of the method is 9
Complex Method,MatterHackers.MatterControl.PrintQueue,QueueDataWidget,C:\repos\MatterHackers_MatterControl\Queue\QueueDataWidget.cs,CreateCopyInQueue,Cyclomatic complexity of the method is 8
Complex Method,MatterHackers.MatterControl.Slicing,SliceLayers,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Slicing\SliceLayers.cs,GetPerimetersForAllLayers,Cyclomatic complexity of the method is 9
Complex Method,MatterHackers.MatterControl.CreatorPlugins,PluginChooserWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\PluginChooserWindow.cs,AddElements,Cyclomatic complexity of the method is 8
Complex Method,MatterHackers.MatterControl.PrinterCommunication,PrinterConnectionAndCommunication,C:\repos\MatterHackers_MatterControl\PrinterCommunication\PrinterConnectionAndCommunication.cs,ReadTemperatures,Cyclomatic complexity of the method is 8
Long Parameter List,MatterHackers.MatterControl,WrappingTextWidget,C:\repos\MatterHackers_MatterControl\AboutPage\HTMLParser\HtmlWidget.cs,WrappingTextWidget,The method has 7 parameters. Parameters: text' pointSize' justification' textColor' ellipsisIfClipped' underline' backgroundColor
Long Parameter List,MatterHackers.MatterControl,PopOutManager,C:\repos\MatterHackers_MatterControl\ControlElements\PopOutManager.cs,SetStates,The method has 6 parameters. Parameters: dataBaseKeyPrefix' poppedOut' width' height' positionX' positionY
Long Parameter List,MatterHackers.MatterControl,DoubleSolidSlider,C:\repos\MatterHackers_MatterControl\CustomWidgets\DoubleSolidSlider.cs,DoubleSolidSlider,The method has 5 parameters. Parameters: positionOfTrackFirstValue' widthInPixels' minimum' maximum' orientation
Long Parameter List,MatterHackers.MatterControl,SolidSlider,C:\repos\MatterHackers_MatterControl\CustomWidgets\SolidSlider.cs,SolidSlider,The method has 5 parameters. Parameters: positionOfTrackFirstValue' thumbWidth' minimum' maximum' orientation
Long Parameter List,MatterHackers.MatterControl,CriteriaRow,C:\repos\MatterHackers_MatterControl\SetupWizard\SetupWizardTroubleshooting.cs,CriteriaRow,The method has 5 parameters. Parameters: itemText' fixitText' errorText' succeeded' fixAction
Long Parameter List,MatterHackers.MatterControl,PlatingHelper,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\PlatingHelper.cs,FindPositionForGroupAndAddToPlate,The method has 5 parameters. Parameters: meshGroupToAdd' meshTransform' perMeshInfo' meshesGroupsToAvoid' meshTransforms
Long Parameter List,MatterHackers.MatterControl,PlatingHelper,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\PlatingHelper.cs,CheckPosition,The method has 8 parameters. Parameters: meshGroupToMoveIndex' allMeshGroups' meshTransforms' meshGroupToMove' meshToMoveBounds' yStep' xStep' transform
Long Parameter List,MatterHackers.MatterControl,PlatingHelper,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\PlatingHelper.cs,AddTraceDataForMesh,The method has 5 parameters. Parameters: mesh' totalActionCount' currentAction' needToUpdateProgressReport' reportProgress
Long Parameter List,MatterHackers.MatterControl,LinkButtonViewBase,C:\repos\MatterHackers_MatterControl\ControlElements\LinkButtonFactory.cs,LinkButtonViewBase,The method has 5 parameters. Parameters: label' textHeight' padding' textColor' isUnderlined
Long Parameter List,MatterHackers.MatterControl,StyledMessageBox,C:\repos\MatterHackers_MatterControl\ControlElements\StyledMessageBoxWindow.cs,ShowMessageBox,The method has 6 parameters. Parameters: callback' message' caption' messageType' yesOk' no
Long Parameter List,MatterHackers.MatterControl,StyledMessageBox,C:\repos\MatterHackers_MatterControl\ControlElements\StyledMessageBoxWindow.cs,ShowMessageBox,The method has 7 parameters. Parameters: callback' message' caption' extraWidgetsToAdd' messageType' yesOk' no
Long Parameter List,MatterHackers.MatterControl,StyledMessageBox,C:\repos\MatterHackers_MatterControl\ControlElements\StyledMessageBoxWindow.cs,StyledMessageBox,The method has 9 parameters. Parameters: callback' message' windowTitle' messageType' extraWidgetsToAdd' width' height' yesOk' no
Long Parameter List,MatterHackers.MatterControl,MHTextEditWidget,C:\repos\MatterHackers_MatterControl\ControlElements\MHTextEditWidget.cs,MHTextEditWidget,The method has 10 parameters. Parameters: text' x' y' pointSize' pixelWidth' pixelHeight' multiLine' tabIndex' messageWhenEmptyAndNotSelected' typeFace
Long Parameter List,MatterHackers.MatterControl,MHPasswordTextEditWidget,C:\repos\MatterHackers_MatterControl\ControlElements\MHTextEditWidget.cs,MHPasswordTextEditWidget,The method has 9 parameters. Parameters: text' x' y' pointSize' pixelWidth' pixelHeight' multiLine' tabIndex' messageWhenEmptyAndNotSelected
Long Parameter List,MatterHackers.MatterControl,MHNumberEdit,C:\repos\MatterHackers_MatterControl\ControlElements\MHTextEditWidget.cs,MHNumberEdit,The method has 12 parameters. Parameters: startingValue' x' y' pointSize' pixelWidth' pixelHeight' allowNegatives' allowDecimals' minValue' maxValue' increment' tabIndex
Long Parameter List,MatterHackers.MatterControl,JogControls,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,CreateMoveButton,The method has 5 parameters. Parameters: label' axis' moveSpeed' levelingButtons' buttonFactory
Long Parameter List,MatterHackers.MatterControl,JogControls,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,CreateZButtons,The method has 5 parameters. Parameters: color' buttonSeparationDistance' zPlusControl' zMinusControl' levelingButtons
Long Parameter List,MatterHackers.MatterControl,MoveButton,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,MoveButton,The method has 5 parameters. Parameters: x' y' buttonView' axis' movementFeedRate
Long Parameter List,MatterHackers.MatterControl,ExtrudeButton,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,ExtrudeButton,The method has 5 parameters. Parameters: x' y' buttonView' movementFeedRate' extruderNumber
Long Parameter List,MatterHackers.MatterControl,RequestManager,C:\repos\MatterHackers_MatterControl\Utilities\WebUtilities\RequestManager.cs,SendPOSTRequest,The method has 5 parameters. Parameters: uri' content' signIn' password' allowAutoRedirect
Long Parameter List,MatterHackers.MatterControl,RequestManager,C:\repos\MatterHackers_MatterControl\Utilities\WebUtilities\RequestManager.cs,GenerateRequest,The method has 6 parameters. Parameters: uri' content' method' signIn' password' allowAutoRedirect
Long Parameter List,MatterHackers.MatterControl,TextImageWidget,C:\repos\MatterHackers_MatterControl\ControlElements\TextImageButtonFactory.cs,TextImageWidget,The method has 13 parameters. Parameters: label' fillColor' borderColor' textColor' borderWidth' margin' image' fontSize' flowDirection' height' width' centerText' imageSpacing
Long Parameter List,MatterHackers.MatterControl,TextImageButtonFactory,C:\repos\MatterHackers_MatterControl\ControlElements\TextImageButtonFactory.cs,GenerateTooltipButton,The method has 5 parameters. Parameters: label' normalImageName' hoverImageName' pressedImageName' disabledImageName
Long Parameter List,MatterHackers.MatterControl,TextImageButtonFactory,C:\repos\MatterHackers_MatterControl\ControlElements\TextImageButtonFactory.cs,GenerateTooltipButton,The method has 5 parameters. Parameters: label' normalImageName' hoverImageName' pressedImageName' disabledImageName
Long Parameter List,MatterHackers.MatterControl,TextImageButtonFactory,C:\repos\MatterHackers_MatterControl\ControlElements\TextImageButtonFactory.cs,GenerateCheckBoxButton,The method has 6 parameters. Parameters: label' normalImage' normalToPressedImage' pressedImage' pressedToNormalImage' pressedLabel
Long Parameter List,MatterHackers.MatterControl,TextImageButtonFactory,C:\repos\MatterHackers_MatterControl\ControlElements\TextImageButtonFactory.cs,GenerateCheckBoxButton,The method has 6 parameters. Parameters: label' normalImageName' normalToPressedImageName' pressedImageName' pressedToNormalImageName' pressedLabel
Long Parameter List,MatterHackers.MatterControl,TextImageButtonFactory,C:\repos\MatterHackers_MatterControl\ControlElements\TextImageButtonFactory.cs,Generate,The method has 6 parameters. Parameters: label' normalImage' hoverImage' pressedImage' disabledImage' centerText
Long Parameter List,MatterHackers.MatterControl,TextImageButtonFactory,C:\repos\MatterHackers_MatterControl\ControlElements\TextImageButtonFactory.cs,Generate,The method has 6 parameters. Parameters: label' normalImageName' hoverImageName' pressedImageName' disabledImageName' centerText
Long Parameter List,MatterHackers.MatterControl,TextImageButtonFactory,C:\repos\MatterHackers_MatterControl\ControlElements\TextImageButtonFactory.cs,getButtonView,The method has 6 parameters. Parameters: label' normalImageName' hoverImageName' pressedImageName' disabledImageName' centerText
Long Parameter List,MatterHackers.MatterControl,TextImageButtonFactory,C:\repos\MatterHackers_MatterControl\ControlElements\TextImageButtonFactory.cs,getButtonView,The method has 6 parameters. Parameters: label' normalImage' hoverImage' pressedImage' disabledImage' centerText
Long Parameter List,MatterHackers.MatterControl,TextImageButtonFactory,C:\repos\MatterHackers_MatterControl\ControlElements\TextImageButtonFactory.cs,getCheckBoxButtonView,The method has 6 parameters. Parameters: label' normalImageName' normalToPressedImageName' pressedImageName' pressedToNormalImageName' pressedLabel
Long Parameter List,MatterHackers.MatterControl,TextImageButtonFactory,C:\repos\MatterHackers_MatterControl\ControlElements\TextImageButtonFactory.cs,getCheckBoxButtonView,The method has 6 parameters. Parameters: label' normalImage' pressedImage' normalToPressedImage' pressedToNormalImage' pressedLabel
Long Parameter List,MatterHackers.MatterControl,DropDownButtonBase,C:\repos\MatterHackers_MatterControl\ControlElements\DropDownMenuFactory.cs,DropDownButtonBase,The method has 9 parameters. Parameters: label' fillColor' borderColor' textColor' borderWidth' margin' fontSize' flowDirection' height
Long Parameter List,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,LevelWizardRadialBase,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\LevelWizard7PointRadial.cs,LevelWizardRadialBase,The method has 5 parameters. Parameters: runningState' width' height' totalSteps' numberOfRadialSamples
Long Parameter List,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,GettingThirdPointFor2PointCalibration,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\PrintLevelPages.cs,GettingThirdPointFor2PointCalibration,The method has 5 parameters. Parameters: container' pageDescription' probeStartPosition' instructionsText' probePosition
Long Parameter List,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,FindBedHeight,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\PrintLevelPages.cs,FindBedHeight,The method has 7 parameters. Parameters: pageDescription' setZHeightCoarseInstruction1' setZHeightCoarseInstruction2' moveDistance' probePositions' probePositionsBeingEditedIndex' allowLessThan0
Long Parameter List,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,GetCoarseBedHeight,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\PrintLevelPages.cs,GetCoarseBedHeight,The method has 6 parameters. Parameters: container' probeStartPosition' pageDescription' probePositions' probePositionsBeingEditedIndex' allowLessThan0
Long Parameter List,MatterHackers.MatterControl.CustomWidgets.LibrarySelector,LibrarySelectorRowItem,C:\repos\MatterHackers_MatterControl\CustomWidgets\LibrarySelector\LibrarySelectorRowItem.cs,LibrarySelectorRowItem,The method has 6 parameters. Parameters: collection' collectionIndex' libraryDataView' parentProvider' thumbnailWidget' openButtonText
Long Parameter List,MatterHackers.Agg.UI,PopOutTextTabWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PopOutTextTab.cs,AddText,The method has 5 parameters. Parameters: tabText' widgetState' textColor' backgroundColor' pointSize
Long Parameter List,MatterHackers.RayTracer,ThumbnailTracer,C:\repos\MatterHackers_MatterControl\CustomWidgets\ThumbnailTracer.cs,DrawTo,The method has 5 parameters. Parameters: graphics2D' meshToDraw' partColorIn' minZ' maxZ
Long Parameter List,MatterHackers.RayTracer,BlenderZBuffer,C:\repos\MatterHackers_MatterControl\CustomWidgets\ThumbnailTracer.cs,BlendPixels,The method has 8 parameters. Parameters: destBuffer' bufferOffset' sourceColors' sourceColorsOffset' covers' coversIndex' firstCoverForAll' count
Long Parameter List,MatterHackers.MatterControl.PrintLibrary.Provider,LibraryProviderFileSystem,C:\repos\MatterHackers_MatterControl\Library\Provider\LibraryProviderFileSystem.cs,LibraryProviderFileSystem,The method has 5 parameters. Parameters: rootPath' name' parentLibraryProvider' setCurrentLibraryProvider' useIncrementedNameDuringTypeChange
Long Parameter List,MatterHackers.MatterControl.PartPreviewWindow,DebugBvh,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\DebugBvh.cs,RenderLine,The method has 5 parameters. Parameters: transform' start' end' color' zBuffered
Long Parameter List,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,View3DWidget,The method has 7 parameters. Parameters: printItemWrapper' viewerVolume' bedCenter' bedShape' windowType' autoRotate' openMode
Long Parameter List,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,ViewGcodeBasic,The method has 5 parameters. Parameters: printItem' viewerVolume' bedCenter' bedShape' windowMode
Long Parameter List,MatterHackers.MatterControl.PrinterControls.PrinterConnections,ControlButtonViewBase,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\BaseConnectionWidget.cs,ControlButtonViewBase,The method has 10 parameters. Parameters: label' width' height' textHeight' borderWidth' borderRadius' padding' textColor' fillColor' borderColor
Long Parameter List,MatterHackers.MatterControl.PrintLibrary,LibraryRowItemCollection,C:\repos\MatterHackers_MatterControl\Library\LibraryRowItemCollection.cs,LibraryRowItemCollection,The method has 7 parameters. Parameters: collection' currentProvider' collectionIndex' libraryDataView' parentProvider' thumbnailWidget' openButtonText
Long Parameter List,MatterHackers.MatterControl.PrintLibrary,MenuEnableData,C:\repos\MatterHackers_MatterControl\Library\PrintLibraryWidget.cs,MenuEnableData,The method has 5 parameters. Parameters: menuItemToChange' multipleItems' protectedItems' collectionItems' shareItems
Long Parameter List,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The method has 7 parameters. Parameters: settingData' layerCascade' persistenceLayer' viewFilter' extruderIndex' addControl' tabIndexForItem
Long Parameter List,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateQuickMenu,The method has 5 parameters. Parameters: settingData' persistenceLayer' content' internalTextWidget' layerCascade
Long Parameter List,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,SaveCommaSeparatedIndexSetting,The method has 5 parameters. Parameters: extruderIndexLocal' layerCascade' slicerConfigName' newSingleValue' persistenceLayer
Long Parameter List,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingData,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsOrganizer.cs,SliceSettingData,The method has 5 parameters. Parameters: slicerConfigName' presentationName' dataEditType' extraSettings' helpText
Long Parameter List,MatterHackers.MatterControl.EeProm,EePromMarlinWindow,C:\repos\MatterHackers_MatterControl\EeProm\EePromMarlinWindow.cs,Create3FieldSet,The method has 7 parameters. Parameters: label' field1Label' field1' field2Label' field2' field3Label' field3
Long Parameter List,MatterHackers.MatterControl.EeProm,EePromMarlinWindow,C:\repos\MatterHackers_MatterControl\EeProm\EePromMarlinWindow.cs,Create4FieldSet,The method has 9 parameters. Parameters: label' field1Label' field1' field2Label' field2' field3Label' field3' field4Label' field4
Long Parameter List,MatterHackers.MatterControl.CreatorPlugins,CreatorInformation,C:\repos\MatterHackers_MatterControl\ControlElements\RegisteredCreators.cs,CreatorInformation,The method has 7 parameters. Parameters: showFunction' iconPath' description' paidAddOnFlag' unlockFunction' permissionFunction' unlockRegisterFunction
Long Parameter List,SQLiteWin32,SQLite3,C:\repos\MatterHackers_MatterControl\DataStorage\SQLiteWin32.cs,BindText,The method has 5 parameters. Parameters: stmt' index' val' n' free
Long Parameter List,SQLiteWin32,SQLite3,C:\repos\MatterHackers_MatterControl\DataStorage\SQLiteWin32.cs,BindBlob,The method has 5 parameters. Parameters: stmt' index' val' n' free
Long Parameter List,SQLiteUnix,SQLite3,C:\repos\MatterHackers_MatterControl\DataStorage\SQLiteUnix.cs,Prepare2,The method has 5 parameters. Parameters: db' sql' numBytes' stmt' pzTail
Long Parameter List,SQLiteUnix,SQLite3,C:\repos\MatterHackers_MatterControl\DataStorage\SQLiteUnix.cs,BindText,The method has 5 parameters. Parameters: stmt' index' val' n' free
Long Parameter List,SQLiteUnix,SQLite3,C:\repos\MatterHackers_MatterControl\DataStorage\SQLiteUnix.cs,BindBlob,The method has 5 parameters. Parameters: stmt' index' val' n' free
Long Parameter List,MatterHackers.MatterControl.PrinterCommunication,PrinterConnectionAndCommunication,C:\repos\MatterHackers_MatterControl\PrinterCommunication\PrinterConnectionAndCommunication.cs,CreateFile,The method has 7 parameters. Parameters: lpFileName' dwDesiredAccess' dwShareMode' securityAttrs' dwCreationDisposition' dwFlagsAndAttributes' hTemplateFile
Long Parameter List,MatterHackers.MatterControl.VersionManagement,ContactFormRequest,C:\repos\MatterHackers_MatterControl\VersionManagement\ContactFormRequest.cs,ContactFormRequest,The method has 5 parameters. Parameters: question' details' email' firstName' lastName
Long Parameter List,SQLiteAndroid,SQLite3,C:\repos\MatterHackers_MatterControl\DataStorage\SQLiteAndroid.cs,Prepare2,The method has 5 parameters. Parameters: db' sql' numBytes' stmt' pzTail
Long Parameter List,SQLiteAndroid,SQLite3,C:\repos\MatterHackers_MatterControl\DataStorage\SQLiteAndroid.cs,BindText,The method has 5 parameters. Parameters: stmt' index' val' n' free
Long Parameter List,SQLiteAndroid,SQLite3,C:\repos\MatterHackers_MatterControl\DataStorage\SQLiteAndroid.cs,BindBlob,The method has 5 parameters. Parameters: stmt' index' val' n' free
Long Identifier,MatterHackers.MatterControl,HtmlWidget,C:\repos\MatterHackers_MatterControl\AboutPage\HTMLParser\HtmlWidget.cs,,The length of the parameter replaceMultipleWhiteSpacesWithSingleWhitespaceRegex is 51.
Long Identifier,MatterHackers.MatterControl,TouchscreenTabView,C:\repos\MatterHackers_MatterControl\ApplicationView\TouchscreenTabView.cs,,The length of the parameter CompactTabView_Options_ScrollPosition is 37.
Long Identifier,MatterHackers.MatterControl,AdvancedControlsPanel,C:\repos\MatterHackers_MatterControl\ApplicationView\AdvancedControlsPanel.cs,,The length of the parameter ThirdPanelTabView_AdvancedControls_CurrentTab is 45.
Long Identifier,MatterHackers.MatterControl,InstructionsPage,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\InstructionsPage.cs,AddTextField,The length of the parameter wrappedInstructionsTabsToSpaces is 31.
Long Identifier,MatterHackers.MatterControl,DoubleSolidSlider,C:\repos\MatterHackers_MatterControl\CustomWidgets\DoubleSolidSlider.cs,,The length of the parameter mouseDownOffsetFromFirstThumbCenter is 35.
Long Identifier,MatterHackers.MatterControl,DoubleSolidSlider,C:\repos\MatterHackers_MatterControl\CustomWidgets\DoubleSolidSlider.cs,,The length of the parameter mouseDownOffsetFromSecondThumbCenter is 36.
Long Identifier,MatterHackers.MatterControl,SolidSlider,C:\repos\MatterHackers_MatterControl\CustomWidgets\SolidSlider.cs,,The length of the parameter mouseDownOffsetFromThumbCenter is 30.
Long Identifier,MatterHackers.MatterControl,RenameItemWindow,C:\repos\MatterHackers_MatterControl\Library\RenameItemWindow.cs,,The length of the parameter functionToCallToCreateNamedFolder is 33.
Long Identifier,MatterHackers.MatterControl,PrinterConfigurationWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrinterConfigurationPage.cs,AddReleaseOptions,The length of the parameter acceptableUpdateFeedTypeValues is 30.
Long Identifier,MatterHackers.MatterControl,ExportPrintItemWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\ExportPrintItemWindow.cs,,The length of the parameter applyLevelingDuringExportString is 31.
Long Identifier,MatterHackers.MatterControl,CreateFolderWindow,C:\repos\MatterHackers_MatterControl\Library\CreateFolderWindow.cs,CreateFolderWindow,The length of the parameter functionToCallToCreateNamedFolder is 33.
Long Identifier,MatterHackers.MatterControl,CreateFolderWindow,C:\repos\MatterHackers_MatterControl\Library\CreateFolderWindow.cs,,The length of the parameter functionToCallToCreateNamedFolder is 33.
Long Identifier,MatterHackers.MatterControl,WizardPage,C:\repos\MatterHackers_MatterControl\SetupWizard\WizardPage.cs,WizardPage,The length of the parameter unlocalizedTextForCancelButton is 30.
Long Identifier,MatterHackers.MatterControl,ApplicationController,C:\repos\MatterHackers_MatterControl\ApplicationView\MainApplicationWidget.cs,,The length of the parameter AdvancedControlsPanelReloading is 30.
Long Identifier,MatterHackers.MatterControl,MHTextEditWidget,C:\repos\MatterHackers_MatterControl\ControlElements\MHTextEditWidget.cs,MHTextEditWidget,The length of the parameter messageWhenEmptyAndNotSelected is 30.
Long Identifier,MatterHackers.MatterControl,MHPasswordTextEditWidget,C:\repos\MatterHackers_MatterControl\ControlElements\MHTextEditWidget.cs,MHPasswordTextEditWidget,The length of the parameter messageWhenEmptyAndNotSelected is 30.
Long Identifier,MatterHackers.MatterControl,ManualPrinterControlsDesktop,C:\repos\MatterHackers_MatterControl\PrinterControls\ManualPrinterControls.cs,,The length of the parameter tuningAdjustmentControlsContainer is 33.
Long Identifier,MatterHackers.MatterControl,ManualPrinterControlsTouchScreen,C:\repos\MatterHackers_MatterControl\PrinterControls\ManualPrinterControls.cs,,The length of the parameter tuningAdjustmentControlsContainer is 33.
Long Identifier,MatterHackers.MatterControl,MatterControlApplication,C:\repos\MatterHackers_MatterControl\MatterControlApplication.cs,,The length of the parameter savePartsSheetExitAnywayMessage is 31.
Long Identifier,MatterHackers.MatterControl,ProjectFileHandler,C:\repos\MatterHackers_MatterControl\Utilities\ProjectFileHandler.cs,,The length of the parameter defaultManifestPathAndFileName is 30.
Long Identifier,MatterHackers.MatterControl.ActionBar,TemperatureWidgetExtruder,C:\repos\MatterHackers_MatterControl\ActionBar\TemperatureWidgetExtruder.cs,,The length of the parameter waitingForExtruderToHeatMessage is 31.
Long Identifier,MatterHackers.MatterControl.ConfigurationPage,ApplicationSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\ApplicationSettings\ApplicationSettingsView.cs,GetDisplayControl,The length of the parameter acceptableUpdateFeedTypeValues is 30.
Long Identifier,MatterHackers.MatterControl.ConfigurationPage,ApplicationSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\ApplicationSettings\ApplicationSettingsView.cs,GetUpdateControl,The length of the parameter acceptableUpdateFeedTypeValues is 30.
Long Identifier,MatterHackers.MatterControl.ConfigurationPage,ApplicationSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\ApplicationSettings\ApplicationSettingsView.cs,GetThumbnailRenderingControl,The length of the parameter acceptableUpdateFeedTypeValues is 30.
Long Identifier,MatterHackers.MatterControl.ConfigurationPage,ApplicationSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\ApplicationSettings\ApplicationSettingsView.cs,,The length of the parameter cannotRestartWhilePrintIsActiveMessage is 38.
Long Identifier,MatterHackers.MatterControl.ConfigurationPage,CloudSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\CloudSettings\CloudSettingsView.cs,GetNotificationControls,The length of the parameter printNotificationsSwitchContainer is 33.
Long Identifier,MatterHackers.MatterControl.ConfigurationPage,CloudSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\CloudSettings\CloudSettingsView.cs,GetNotificationControls,The length of the parameter enablePrintNotificationsSwitch is 30.
Long Identifier,MatterHackers.MatterControl.ConfigurationPage,CloudSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\CloudSettings\CloudSettingsView.cs,,The length of the parameter configureNotificationSettingsButton is 35.
Long Identifier,MatterHackers.MatterControl.ConfigurationPage,HardwareSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrinterSettings\PrinterSettingsView.cs,,The length of the parameter terminalCommunicationsContainer is 31.
Long Identifier,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,RadialLevlingFunctions,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\LevelWizard7PointRadial.cs,,The length of the parameter lastDestinationWithLevelingApplied is 34.
Long Identifier,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,LevelWizardBase,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\LevelWizardBase.cs,,The length of the parameter homingPageInstructionsTextThree is 31.
Long Identifier,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,FindBedHeight,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\PrintLevelPages.cs,FindBedHeight,The length of the parameter probePositionsBeingEditedIndex is 30.
Long Identifier,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,FindBedHeight,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\PrintLevelPages.cs,,The length of the parameter probePositionsBeingEditedIndex is 30.
Long Identifier,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,GetCoarseBedHeight,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\PrintLevelPages.cs,GetCoarseBedHeight,The length of the parameter probePositionsBeingEditedIndex is 30.
Long Identifier,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,GetCoarseBedHeight,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\PrintLevelPages.cs,,The length of the parameter setZHeightCourseInstructTextOne is 31.
Long Identifier,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,GetCoarseBedHeight,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\PrintLevelPages.cs,,The length of the parameter setZHeightCourseInstructTextTwo is 31.
Long Identifier,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,GetCoarseBedHeight,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\PrintLevelPages.cs,,The length of the parameter setZHeightCourseInstructTextThree is 33.
Long Identifier,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,GetCoarseBedHeight,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\PrintLevelPages.cs,,The length of the parameter setZHeightCourseInstructTextFour is 32.
Long Identifier,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,GetCoarseBedHeight,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\PrintLevelPages.cs,,The length of the parameter setZHeightCourseInstructTextFive is 32.
Long Identifier,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,GetFineBedHeight,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\PrintLevelPages.cs,GetFineBedHeight,The length of the parameter probePositionsBeingEditedIndex is 30.
Long Identifier,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,GetFineBedHeight,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\PrintLevelPages.cs,,The length of the parameter setZHeightFineInstructionTextOne is 32.
Long Identifier,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,GetFineBedHeight,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\PrintLevelPages.cs,,The length of the parameter setZHeightFineInstructionTextTwo is 32.
Long Identifier,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,GetFineBedHeight,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\PrintLevelPages.cs,,The length of the parameter setZHeightFineInstructionTextThree is 34.
Long Identifier,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,GetUltraFineBedHeight,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\PrintLevelPages.cs,GetUltraFineBedHeight,The length of the parameter probePositionsBeingEditedIndex is 30.
Long Identifier,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,GetUltraFineBedHeight,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\PrintLevelPages.cs,,The length of the parameter setHeightFineInstructionTextOne is 31.
Long Identifier,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,GetUltraFineBedHeight,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\PrintLevelPages.cs,,The length of the parameter setHeightFineInstructionTextTwo is 31.
Long Identifier,MatterHackers.MatterControl.PrinterCommunication.Io,ExtrusionMultiplyerStream,C:\repos\MatterHackers_MatterControl\PrinterCommunication\Io\ExtrusionMultiplyerStream.cs,ApplyExtrusionMultiplier,The length of the parameter gcodeRequestedExtrusionPosition is 31.
Long Identifier,MatterHackers.MatterControl.PrinterCommunication.Io,ExtrusionMultiplyerStream,C:\repos\MatterHackers_MatterControl\PrinterCommunication\Io\ExtrusionMultiplyerStream.cs,ApplyExtrusionMultiplier,The length of the parameter gcodeRequestedExtrusionPosition is 31.
Long Identifier,MatterHackers.MatterControl.PrinterCommunication.Io,ExtrusionMultiplyerStream,C:\repos\MatterHackers_MatterControl\PrinterCommunication\Io\ExtrusionMultiplyerStream.cs,,The length of the parameter currentActualExtrusionPosition is 30.
Long Identifier,MatterHackers.MatterControl.PrinterCommunication.Io,ExtrusionMultiplyerStream,C:\repos\MatterHackers_MatterControl\PrinterCommunication\Io\ExtrusionMultiplyerStream.cs,,The length of the parameter previousGcodeRequestedExtrusionPosition is 39.
Long Identifier,MatterHackers.MatterControl.PrintLibrary.Provider,LibraryProviderFileSystemCreator,C:\repos\MatterHackers_MatterControl\Library\Provider\LibraryProviderFileSystem.cs,LibraryProviderFileSystemCreator,The length of the parameter useIncrementedNameDuringTypeChange is 34.
Long Identifier,MatterHackers.MatterControl.PrintLibrary.Provider,LibraryProviderFileSystemCreator,C:\repos\MatterHackers_MatterControl\Library\Provider\LibraryProviderFileSystem.cs,,The length of the parameter useIncrementedNameDuringTypeChange is 34.
Long Identifier,MatterHackers.MatterControl.PrintLibrary.Provider,LibraryProviderFileSystem,C:\repos\MatterHackers_MatterControl\Library\Provider\LibraryProviderFileSystem.cs,LibraryProviderFileSystem,The length of the parameter useIncrementedNameDuringTypeChange is 34.
Long Identifier,MatterHackers.MatterControl.PrintLibrary.Provider,LibraryProviderFileSystem,C:\repos\MatterHackers_MatterControl\Library\Provider\LibraryProviderFileSystem.cs,,The length of the parameter useIncrementedNameDuringTypeChange is 34.
Long Identifier,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,OnDragDrop,The length of the parameter enterEditModeBeforeAddingParts is 30.
Long Identifier,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,OnMouseMove,The length of the parameter meshViewerWidgetScreenPosition is 30.
Long Identifier,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,FindMeshGroupHitPosition,The length of the parameter meshViewerWidgetScreenPosition is 30.
Long Identifier,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,,The length of the parameter activeButtonBeforeMouseOverride is 31.
Long Identifier,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,,The length of the parameter startedSliceFromGenerateButton is 30.
Long Identifier,MatterHackers.MatterControl.PrinterControls,MovementControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\MovementControls.cs,,The length of the parameter editManualMovementSettingsWindow is 32.
Long Identifier,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortOne,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepComPortOne.cs,createPrinterConnectionMessageContainer,The length of the parameter setupManualConfigurationOrSkipConnectionText is 44.
Long Identifier,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortOne,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepComPortOne.cs,createPrinterConnectionMessageContainer,The length of the parameter setupManualConfigurationOrSkipConnectionTextFull is 48.
Long Identifier,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortOne,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepComPortOne.cs,createPrinterConnectionMessageContainer,The length of the parameter setupManualConfigurationOrSkipConnectionWidget is 46.
Long Identifier,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepInstallDriver,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepInstallDriver.cs,InstallDriver,The length of the parameter printerDriverInstallerExePathAndFileName is 40.
Long Identifier,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepInstallDriver,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepInstallDriver.cs,InstallDriver,The length of the parameter printerDriverInstallerExePathAndFileName is 40.
Long Identifier,MatterHackers.MatterControl.PrintLibrary,LibraryRowItem,C:\repos\MatterHackers_MatterControl\Library\LibraryRowItem.cs,,The length of the parameter SearchResultsNotAvailableToken is 30.
Long Identifier,MatterHackers.MatterControl.SlicerConfiguration,SettingsKey,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\SettingsHelpers.cs,,The length of the parameter external_perimeter_extrusion_width is 34.
Long Identifier,MatterHackers.MatterControl.SlicerConfiguration,SettingsKey,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\SettingsHelpers.cs,,The length of the parameter print_leveling_required_to_print is 32.
Long Identifier,MatterHackers.MatterControl.SlicerConfiguration,SettingsKey,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\SettingsHelpers.cs,,The length of the parameter recover_position_before_z_home is 30.
Long Identifier,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,,The length of the parameter materialSettingBackgroundColor is 30.
Long Identifier,MatterHackers.MatterControl.SlicerConfiguration,SlicingQueue,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SlicingQueue.cs,CreateSlicedPartsThread,The length of the parameter currentConfigurationFileAndPath is 31.
Long Identifier,MatterHackers.MatterControl.Utilities,LimitCallingFrequency,C:\repos\MatterHackers_MatterControl\Utilities\LimitCallFrequency.cs,LimitCallingFrequency,The length of the parameter minimumTimeBeforeRepeatSeconds is 30.
Long Identifier,MatterHackers.MatterControl.Utilities,LimitCallingFrequency,C:\repos\MatterHackers_MatterControl\Utilities\LimitCallFrequency.cs,,The length of the parameter minimumTimeBeforeRepeatSeconds is 30.
Long Identifier,MatterHackers.MatterControl.PrinterCommunication,PrinterConnectionAndCommunication,C:\repos\MatterHackers_MatterControl\PrinterCommunication\PrinterConnectionAndCommunication.cs,,The length of the parameter CommunicationUnconditionalFromPrinter is 37.
Long Identifier,MatterHackers.MatterControl.PrinterCommunication,PrinterConnectionAndCommunication,C:\repos\MatterHackers_MatterControl\PrinterCommunication\PrinterConnectionAndCommunication.cs,,The length of the parameter CommunicationUnconditionalToPrinter is 35.
Long Identifier,Gaming.Game,DataViewGraph,C:\repos\MatterHackers_MatterControl\CustomWidgets\DataViewGraph.cs,OnDraw,The length of the parameter StrockedTransformedLinesToDraw is 30.
Long Statement,MatterHackers.MatterControl,HtmlWidget,C:\repos\MatterHackers_MatterControl\AboutPage\HTMLParser\HtmlWidget.cs,AddContent,The length of the statement  "							linkButton.OriginRelativeParent = new VectorMath.Vector2(linkButton.OriginRelativeParent.x' linkButton.OriginRelativeParent.y + descentInPixels); " is 145.
Long Statement,MatterHackers.MatterControl,HtmlWidget,C:\repos\MatterHackers_MatterControl\AboutPage\HTMLParser\HtmlWidget.cs,AddContent,The length of the statement  "							WrappingTextWidget content = new WrappingTextWidget(decodedHtml' pointSize: elementState.PointSize' textColor: ActiveTheme.Instance.PrimaryTextColor); " is 150.
Long Statement,MatterHackers.MatterControl,HtmlWidget,C:\repos\MatterHackers_MatterControl\AboutPage\HTMLParser\HtmlWidget.cs,AddContent,The length of the statement  "							TextWidget content = new TextWidget(decodedHtml' pointSize: elementState.PointSize' textColor: ActiveTheme.Instance.PrimaryTextColor); " is 134.
Long Statement,MatterHackers.MatterControl,HtmlWidget,C:\repos\MatterHackers_MatterControl\AboutPage\HTMLParser\HtmlWidget.cs,AddContent,The length of the statement  "						imageWidget.Load += (s' e) => ApplicationController.Instance.DownloadToImageAsync(image' elementState.src' elementState.SizeFixed.x != 0); " is 138.
Long Statement,MatterHackers.MatterControl,HtmlWidget,C:\repos\MatterHackers_MatterControl\AboutPage\HTMLParser\HtmlWidget.cs,AddContent,The length of the statement  "						createdButton.OriginRelativeParent = new VectorMath.Vector2(createdButton.OriginRelativeParent.x' createdButton.OriginRelativeParent.y + descentInPixels); " is 154.
Long Statement,MatterHackers.MatterControl,HtmlWidget,C:\repos\MatterHackers_MatterControl\AboutPage\HTMLParser\HtmlWidget.cs,AddContent,The length of the statement  "						TextWidget content = new TextWidget(decodedHtml' pointSize: elementState.PointSize' textColor: ActiveTheme.Instance.PrimaryTextColor); " is 134.
Long Statement,MatterHackers.MatterControl,UpdateControlData,C:\repos\MatterHackers_MatterControl\AboutPage\UpdateControlData.cs,CheckVersionStatus,The length of the statement  "			string updateFileName = Path.Combine(updateFileLocation' string.Format("{0}.{1}"' currentBuildToken' InstallerExtension)); " is 122.
Long Statement,MatterHackers.MatterControl,UpdateControlData,C:\repos\MatterHackers_MatterControl\AboutPage\UpdateControlData.cs,onVersionRequestSucceeded,The length of the statement  "			string updateAvailableMessage = "There is a recommended update available for MatterControl. Would you like to download it now?".Localize(); " is 139.
Long Statement,MatterHackers.MatterControl,UpdateControlData,C:\repos\MatterHackers_MatterControl\AboutPage\UpdateControlData.cs,onVersionRequestSucceeded,The length of the statement  "			string updateFileName = Path.Combine(updateFileLocation' string.Format("{0}.{1}"' currentBuildToken' InstallerExtension)); " is 122.
Long Statement,MatterHackers.MatterControl,UpdateControlData,C:\repos\MatterHackers_MatterControl\AboutPage\UpdateControlData.cs,onVersionRequestSucceeded,The length of the statement  "						StyledMessageBox.ShowMessageBox(ProcessDialogResponse' updateAvailableMessage' updateAvailableTitle' StyledMessageBox.MessageType.YES_NO' downloadNow' remindMeLater); " is 166.
Long Statement,MatterHackers.MatterControl,UpdateControlData,C:\repos\MatterHackers_MatterControl\AboutPage\UpdateControlData.cs,DownloadUpdateTask,The length of the statement  "					string downloadUri = $"{MatterControlApplication.MCWSBaseUri}/downloads/development/{ApplicationSettings.Instance.get(LatestVersionRequest.VersionKey.CurrentBuildToken)}"; " is 171.
Long Statement,MatterHackers.MatterControl,UpdateControlData,C:\repos\MatterHackers_MatterControl\AboutPage\UpdateControlData.cs,InstallUpdate,The length of the statement  "			string friendlyFileName = Path.Combine(updateFileLocation' "MatterControlSetup-{0}.{1}".FormatWith(releaseVersion' InstallerExtension)); " is 136.
Long Statement,MatterHackers.MatterControl,PrinterSelector,C:\repos\MatterHackers_MatterControl\ActionBar\PrinterSelector.cs,Rebuild,The length of the statement  "			var menuItem = this.AddItem(StaticData.Instance.LoadIcon("icon_plus.png"' 32' 32)' "Add New Printer".Localize() + "..."' "new"); " is 128.
Long Statement,MatterHackers.MatterControl,PrinterSelector,C:\repos\MatterHackers_MatterControl\ActionBar\PrinterSelector.cs,Rebuild,The length of the statement  "							StyledMessageBox.ShowMessageBox(null' "Please wait until the print has finished and try again.".Localize()' "Can't add printers while printing".Localize()) " is 155.
Long Statement,MatterHackers.MatterControl,MenuOptionHelp,C:\repos\MatterHackers_MatterControl\ApplicationView\MenuRow\MenuOptionHelp.cs,GetMenuActions,The length of the statement  "				new MenuItemAction("Forums".Localize()' () => MatterControlApplication.Instance.LaunchBrowser("https://forums.matterhackers.com/category/20/mattercontrol"))' " is 157.
Long Statement,MatterHackers.MatterControl,MenuOptionHelp,C:\repos\MatterHackers_MatterControl\ApplicationView\MenuRow\MenuOptionHelp.cs,GetMenuActions,The length of the statement  "				new MenuItemAction("Wiki".Localize()' () => MatterControlApplication.Instance.LaunchBrowser("http://wiki.mattercontrol.com"))' " is 126.
Long Statement,MatterHackers.MatterControl,MenuOptionHelp,C:\repos\MatterHackers_MatterControl\ApplicationView\MenuRow\MenuOptionHelp.cs,GetMenuActions,The length of the statement  "				new MenuItemAction("Guides and Articles".Localize()' () => MatterControlApplication.Instance.LaunchBrowser("http://www.matterhackers.com/topic/mattercontrol"))' " is 160.
Long Statement,MatterHackers.MatterControl,MenuOptionHelp,C:\repos\MatterHackers_MatterControl\ApplicationView\MenuRow\MenuOptionHelp.cs,GetMenuActions,The length of the statement  "				new MenuItemAction("Release Notes".Localize()' () => MatterControlApplication.Instance.LaunchBrowser("http://wiki.mattercontrol.com/Release_Notes"))' " is 149.
Long Statement,MatterHackers.MatterControl,MenuOptionHelp,C:\repos\MatterHackers_MatterControl\ApplicationView\MenuRow\MenuOptionHelp.cs,GetMenuActions,The length of the statement  "				new MenuItemAction("Report a Bug".Localize()' () => MatterControlApplication.Instance.LaunchBrowser("https://github.com/MatterHackers/MatterControl/issues"))' " is 158.
Long Statement,MatterHackers.MatterControl,MenuOptionFile,C:\repos\MatterHackers_MatterControl\ApplicationView\MenuRow\MenuOptionFile.cs,ImportSettingsFile,The length of the statement  "				StyledMessageBox.ShowMessageBox(null' "Oops! Settings file '{0}' did not contain any settings we could import.".Localize().FormatWith(Path.GetFileName(settingsFilePath))' "Unable to Import".Localize()); " is 202.
Long Statement,MatterHackers.MatterControl,MenuOptionFile,C:\repos\MatterHackers_MatterControl\ApplicationView\MenuRow\MenuOptionFile.cs,AddPrinter_Click,The length of the statement  "				StyledMessageBox.ShowMessageBox(null' "Please wait until the print has finished and try again.".Localize()' "Can't add printers while printing".Localize()) " is 155.
Long Statement,MatterHackers.MatterControl,MenuOptionFile,C:\repos\MatterHackers_MatterControl\ApplicationView\MenuRow\MenuOptionFile.cs,importFile_Click,The length of the statement  "								QueueData.Instance.AddItem(new PrintItemWrapper(new PrintItem(Path.GetFileNameWithoutExtension(loadedFileName)' Path.GetFullPath(loadedFileName)))); " is 148.
Long Statement,MatterHackers.MatterControl,ApplicationMenuRow,C:\repos\MatterHackers_MatterControl\ApplicationView\MenuRow\ApplicationMenuRow.cs,SetUpdateNotification,The length of the statement  "						TextWidget updateStatusMessage = new TextWidget("Up to Date".Localize()' textColor: linkButtonFactory.textColor' pointSize: linkButtonFactory.fontSize); " is 152.
Long Statement,MatterHackers.MatterControl,ApplicationMenuRow,C:\repos\MatterHackers_MatterControl\ApplicationView\MenuRow\ApplicationMenuRow.cs,SetUpdateNotification,The length of the statement  "						TextWidget updateStatusMessage = new TextWidget("Checking For Update...".Localize()' textColor: linkButtonFactory.textColor' pointSize: linkButtonFactory.fontSize); " is 164.
Long Statement,MatterHackers.MatterControl,AdvancedControlsPanel,C:\repos\MatterHackers_MatterControl\ApplicationView\AdvancedControlsPanel.cs,CreateAdvancedControlsTab,The length of the statement  "			backButton = advancedControlsButtonFactory.Generate("Back".Localize()' StaticData.Instance.LoadIcon("icon_arrow_left_32x32.png"' 32' 32)); " is 138.
Long Statement,MatterHackers.MatterControl,AdvancedControlsPanel,C:\repos\MatterHackers_MatterControl\ApplicationView\AdvancedControlsPanel.cs,CreateAdvancedControlsTab,The length of the statement  "			var sliceSettingPopOut = new PopOutTextTabWidget(sliceSettingsTabPage' SliceSettingsTabName' new Vector2(590' 400)' textSize); " is 126.
Long Statement,MatterHackers.MatterControl,AdvancedControlsPanel,C:\repos\MatterHackers_MatterControl\ApplicationView\AdvancedControlsPanel.cs,CreateAdvancedControlsTab,The length of the statement  "			advancedControls.AddTab(new SimpleTextTabWidget(new TabPage(optionsControls' "Options".Localize().ToUpper())' "Options Tab"' textSize' " is 134.
Long Statement,MatterHackers.MatterControl,InstructionsPage,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\InstructionsPage.cs,AddTextField,The length of the statement  "			TextWidget instructionsWidget = new TextWidget(wrappedInstructionsTabsToSpaces' textColor: ActiveTheme.Instance.PrimaryTextColor' pointSize: 12 * extraTextScaling); " is 164.
Long Statement,MatterHackers.MatterControl,AttentionGetter,C:\repos\MatterHackers_MatterControl\ControlElements\AttentionGetter.cs,ChangeBackgroundColor,The length of the statement  "				widgetToHighlight.BackgroundColor = startColor.AdjustLightness(1 + lightnessChange * lightnessMultiplier).GetAsRGBA_Bytes(); " is 124.
Long Statement,MatterHackers.MatterControl,PopOutManager,C:\repos\MatterHackers_MatterControl\ControlElements\PopOutManager.cs,CreateContentForEmptyControl,The length of the statement  "			TextWidget windowedModeMessage = new TextWidget("WINDOWED MODE: This tab has been moved to a separate window.".Localize()' " is 122.
Long Statement,MatterHackers.MatterControl,PopOutManager,C:\repos\MatterHackers_MatterControl\ControlElements\PopOutManager.cs,SaveSizeAndPosition,The length of the statement  "				UserSettings.Instance.set(WindowSizeKey' string.Format("{0}'{1}"' systemWindowWithPopContent.Width' systemWindowWithPopContent.Height)); " is 136.
Long Statement,MatterHackers.MatterControl,PopOutManager,C:\repos\MatterHackers_MatterControl\ControlElements\PopOutManager.cs,SaveSizeAndPosition,The length of the statement  "				UserSettings.Instance.set(PositionKey' string.Format("{0}'{1}"' systemWindowWithPopContent.DesktopPosition.x' systemWindowWithPopContent.DesktopPosition.y)); " is 157.
Long Statement,MatterHackers.MatterControl,DoubleSolidSlideView,C:\repos\MatterHackers_MatterControl\CustomWidgets\DoubleSolidSlider.cs,DoDrawAfterChildren,The length of the statement  "			graphics2D.Render(firstThumbOutside' RGBA_Floats.GetTweenColor(ThumbColor.GetAsRGBA_Floats()' RGBA_Floats.Black.GetAsRGBA_Floats()' .2).GetAsRGBA_Bytes()); " is 155.
Long Statement,MatterHackers.MatterControl,DoubleSolidSlideView,C:\repos\MatterHackers_MatterControl\CustomWidgets\DoubleSolidSlider.cs,DoDrawAfterChildren,The length of the statement  "			graphics2D.Render(secondThumbOutside' RGBA_Floats.GetTweenColor(ThumbColor.GetAsRGBA_Floats()' RGBA_Floats.Black.GetAsRGBA_Floats()' .2).GetAsRGBA_Bytes()); " is 156.
Long Statement,MatterHackers.MatterControl,DoubleSolidSlider,C:\repos\MatterHackers_MatterControl\CustomWidgets\DoubleSolidSlider.cs,OnMouseMove,The length of the statement  "					PositionPixelsFromFirstValue = Math.Min(mousePos.x - mouseDownOffsetFromFirstThumbCenter' PositionPixelsFromSecondValue - ThumbWidth - 2); " is 138.
Long Statement,MatterHackers.MatterControl,DoubleSolidSlider,C:\repos\MatterHackers_MatterControl\CustomWidgets\DoubleSolidSlider.cs,OnMouseMove,The length of the statement  "					PositionPixelsFromFirstValue = Math.Min(mousePos.y - mouseDownOffsetFromFirstThumbCenter' PositionPixelsFromSecondValue - ThumbWidth - 2); " is 138.
Long Statement,MatterHackers.MatterControl,DoubleSolidSlider,C:\repos\MatterHackers_MatterControl\CustomWidgets\DoubleSolidSlider.cs,OnMouseMove,The length of the statement  "					PositionPixelsFromSecondValue = Math.Max(mousePos.x - mouseDownOffsetFromSecondThumbCenter' PositionPixelsFromFirstValue + ThumbWidth + 2); " is 139.
Long Statement,MatterHackers.MatterControl,DoubleSolidSlider,C:\repos\MatterHackers_MatterControl\CustomWidgets\DoubleSolidSlider.cs,OnMouseMove,The length of the statement  "					PositionPixelsFromSecondValue = Math.Max(mousePos.y - mouseDownOffsetFromSecondThumbCenter' PositionPixelsFromFirstValue + ThumbWidth + 2); " is 139.
Long Statement,MatterHackers.MatterControl,SolidSlideView,C:\repos\MatterHackers_MatterControl\CustomWidgets\SolidSlider.cs,DoDrawAfterChildren,The length of the statement  "			graphics2D.Render(thumbOutside' RGBA_Floats.GetTweenColor(ThumbColor.GetAsRGBA_Floats()' RGBA_Floats.Black.GetAsRGBA_Floats()' .2).GetAsRGBA_Bytes()); " is 150.
Long Statement,MatterHackers.MatterControl,PrinterConfigurationWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrinterConfigurationPage.cs,AddReleaseOptions,The length of the statement  "			releaseOptionsDropList.MinimumSize = new Vector2(releaseOptionsDropList.LocalBounds.Width' releaseOptionsDropList.LocalBounds.Height); " is 134.
Long Statement,MatterHackers.MatterControl,PrinterConfigurationWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrinterConfigurationPage.cs,AddHandlers,The length of the statement  "			PrinterConnectionAndCommunication.Instance.CommunicationStateChanged.RegisterEvent(onPrinterStatusChanged' ref unregisterEvents); " is 129.
Long Statement,MatterHackers.MatterControl,ExportPrintItemWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\ExportPrintItemWindow.cs,CreateWindowContent,The length of the statement  "				applyLeveling = new CheckBox(LocalizedString.Get(applyLevelingDuringExportString)' ActiveTheme.Instance.PrimaryTextColor' 10); " is 126.
Long Statement,MatterHackers.MatterControl,ExportPrintItemWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\ExportPrintItemWindow.cs,CreateWindowContent,The length of the statement  "				showInFolderAfterSave = new CheckBox("Show file in folder after save".Localize()' ActiveTheme.Instance.PrimaryTextColor' 10); " is 125.
Long Statement,MatterHackers.MatterControl,ExportPrintItemWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\ExportPrintItemWindow.cs,CreateWindowContent,The length of the statement  "				TextWidget noGCodeMessage = new TextWidget(noGCodeMessageTextFull' textColor: ActiveTheme.Instance.PrimaryTextColor' pointSize: 10); " is 132.
Long Statement,MatterHackers.MatterControl,AndroidConnectDevicePage,C:\repos\MatterHackers_MatterControl\SetupWizard\AndroidConnectDevicePage.cs,updateControls,The length of the statement  "			else if (firstLoad || PrinterConnectionAndCommunication.Instance.CommunicationState == PrinterConnectionAndCommunication.CommunicationStates.Disconnected) " is 154.
Long Statement,MatterHackers.MatterControl,AndroidConnectDevicePage,C:\repos\MatterHackers_MatterControl\SetupWizard\AndroidConnectDevicePage.cs,updateControls,The length of the statement  "			else if (PrinterConnectionAndCommunication.Instance.CommunicationState == PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect) " is 148.
Long Statement,MatterHackers.MatterControl,ImportSettingsPage,C:\repos\MatterHackers_MatterControl\SetupWizard\ImportSettingsPage.cs,ImportSettingsFile,The length of the statement  "					WizardWindow.ChangeToPage(new ImportSucceeded(importPrinterSuccessMessage.FormatWith(Path.GetFileNameWithoutExtension(settingsFilePath))) " is 137.
Long Statement,MatterHackers.MatterControl,ImportSettingsPage,C:\repos\MatterHackers_MatterControl\SetupWizard\ImportSettingsPage.cs,ImportToPreset,The length of the statement  "								WizardWindow.ChangeToPage(new ImportSucceeded(importSettingSuccessMessage.FormatWith(Path.GetFileNameWithoutExtension(settingsFilePath)' sectionName)) " is 150.
Long Statement,MatterHackers.MatterControl,ImportSettingsPage,C:\repos\MatterHackers_MatterControl\SetupWizard\ImportSettingsPage.cs,ImportToPreset,The length of the statement  "						StyledMessageBox.ShowMessageBox(null' "Oops! Unable to recognize settings file '{0}'.".Localize().FormatWith(Path.GetFileName(settingsFilePath))' "Unable to Import".Localize()); " is 177.
Long Statement,MatterHackers.MatterControl,ImportSettingsPage,C:\repos\MatterHackers_MatterControl\SetupWizard\ImportSettingsPage.cs,MergeSettings,The length of the statement  "						StyledMessageBox.ShowMessageBox(null' "Oops! Unable to recognize settings file '{0}'.".Localize().FormatWith(Path.GetFileName(settingsFilePath))' "Unable to Import".Localize()); " is 177.
Long Statement,MatterHackers.MatterControl,ImportSettingsPage,C:\repos\MatterHackers_MatterControl\SetupWizard\ImportSettingsPage.cs,displayFailedToImportMessage,The length of the statement  "			StyledMessageBox.ShowMessageBox(null' "Oops! Settings file '{0}' did not contain any settings we could import.".Localize().FormatWith(Path.GetFileName(settingsFilePath))' "Unable to Import".Localize()); " is 202.
Long Statement,MatterHackers.MatterControl,SetupPrinterView,C:\repos\MatterHackers_MatterControl\SetupWizard\AndroidSetupOptionsPage.cs,updateConnectedState,The length of the statement  "				connectionStatus.Text = string.Format ("{0}: {1}"' "Status".Localize().ToUpper()' PrinterConnectionAndCommunication.Instance.PrinterConnectionStatusVerbose); " is 157.
Long Statement,MatterHackers.MatterControl,SetupWizardTroubleshooting,C:\repos\MatterHackers_MatterControl\SetupWizard\SetupWizardTroubleshooting.cs,ConnectionStatusChanged,The length of the statement  "			if(PrinterConnectionAndCommunication.Instance.CommunicationState == PrinterConnectionAndCommunication.CommunicationStates.Connected && connectToPrinterRow != null) " is 163.
Long Statement,MatterHackers.MatterControl,SetupWizardTroubleshooting,C:\repos\MatterHackers_MatterControl\SetupWizard\SetupWizardTroubleshooting.cs,RefreshStatus,The length of the statement  "			TextWidget printerNameLabel = new TextWidget(string.Format ("{0}:"' "Connection Troubleshooting".Localize())' 0' 0' labelFontSize); " is 131.
Long Statement,MatterHackers.MatterControl,SetupWizardTroubleshooting,C:\repos\MatterHackers_MatterControl\SetupWizard\SetupWizardTroubleshooting.cs,RefreshStatus,The length of the statement  "			UsbDevice usbPrintDevice = usbManager.DeviceList.Values.Where(d => d.DeviceName != "/dev/bus/usb/002/002").FirstOrDefault(); " is 124.
Long Statement,MatterHackers.MatterControl,SetupWizardTroubleshooting,C:\repos\MatterHackers_MatterControl\SetupWizard\SetupWizardTroubleshooting.cs,RefreshStatus,The length of the statement  "						DriverClass = usbManager.DeviceList.Values.First ().DeviceClass == Android.Hardware.Usb.UsbClass.Comm ? "cdcDriverType" : "ftdiDriverType" " is 138.
Long Statement,MatterHackers.MatterControl,SetupWizardTroubleshooting,C:\repos\MatterHackers_MatterControl\SetupWizard\SetupWizardTroubleshooting.cs,RefreshStatus,The length of the statement  "					usbStatus.Summary = string.Format ("No USB device definition found. Click the 'Fix' button to add an override for your device "' usbStatus.UsbDetails.VendorID' usbStatus.UsbDetails.ProductID); " is 192.
Long Statement,MatterHackers.MatterControl,SetupWizardTroubleshooting,C:\repos\MatterHackers_MatterControl\SetupWizard\SetupWizardTroubleshooting.cs,RefreshStatus,The length of the statement  "					File.AppendAllText(overridePath' string.Format("{0}'{1}'{2}\r\n"' usbDetails.VendorID' usbDetails.ProductID' usbDetails.DriverClass)); " is 134.
Long Statement,MatterHackers.MatterControl,CreateDiscreteMeshes,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\CreateDiscreteMeshes.cs,SplitConnectedIntoMeshes,The length of the statement  "				List<Mesh> discreteVolumes = SplitVolumesIntoMeshes(mesh' (double progress0To1' string processingState' out bool continueProcessing) => " is 135.
Long Statement,MatterHackers.MatterControl,CreateDiscreteMeshes,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\CreateDiscreteMeshes.cs,SplitVolumesIntoMeshes,The length of the statement  "										Vertex newVertex = meshFromCurrentVolume.CreateVertex(faceEdgeToAdd.firstVertex.Position' CreateOption.CreateNew' SortOption.WillSortLater); " is 140.
Long Statement,MatterHackers.MatterControl,CreateDiscreteMeshes,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\CreateDiscreteMeshes.cs,SplitIntoMeshesOnOrthographicZ,The length of the statement  "			Vector2 renderOffset = new Vector2(buildVolume.x / 2' buildVolume.y / 2) - new Vector2(partBounds.Center.x' partBounds.Center.y); " is 129.
Long Statement,MatterHackers.MatterControl,CreateDiscreteMeshes,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\CreateDiscreteMeshes.cs,SplitIntoMeshesOnOrthographicZ,The length of the statement  "			PolygonMesh.Rendering.OrthographicZProjection.DrawTo(partPlate.NewGraphics2D()' meshToSplit' renderOffset' scaleFactor' RGBA_Bytes.White); " is 138.
Long Statement,MatterHackers.MatterControl,CreateDiscreteMeshes,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\CreateDiscreteMeshes.cs,SplitIntoMeshesOnOrthographicZ,The length of the statement  "				graphics2D.Render(PlatingHelper.PolygonToPathStorage(polygon)' new RGBA_Bytes(rand.Next(128' 255)' rand.Next(128' 255)' rand.Next(128' 255))); " is 142.
Long Statement,MatterHackers.MatterControl,CreateDiscreteMeshes,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\CreateDiscreteMeshes.cs,PointInPolygon,The length of the statement  "					&& (testPosition.X - polygon[i].X < (polygon[prevIndex].X - polygon[i].X) * (testPosition.Y - polygon[i].Y) / (polygon[prevIndex].Y - polygon[i].Y))) " is 149.
Long Statement,MatterHackers.MatterControl,PlatingHelper,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\PlatingHelper.cs,ArrangeMeshGroups,The length of the statement  "				PlatingHelper.MoveMeshGroupToOpenPosition(meshGroupIndex' asyncPlatingDatas' asyncMeshGroups' asyncMeshGroupTransforms); " is 120.
Long Statement,MatterHackers.MatterControl,PlatingHelper,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\PlatingHelper.cs,ArrangeMeshGroups,The length of the statement  "					bounds = AxisAlignedBoundingBox.Union(bounds' asyncMeshGroups[i].GetAxisAlignedBoundingBox(asyncMeshGroupTransforms[i])); " is 121.
Long Statement,MatterHackers.MatterControl,PlatingHelper,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\PlatingHelper.cs,CenterMeshGroupXY,The length of the statement  "			meshTransforms[index] *= Matrix4X4.CreateTranslation(new Vector3(-boundsCenter.x + bounds.XSize / 2' -boundsCenter.y + bounds.YSize / 2' 0)); " is 141.
Long Statement,MatterHackers.MatterControl,PlatingHelper,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\PlatingHelper.cs,MoveMeshGroupToOpenPosition,The length of the statement  "			AxisAlignedBoundingBox meshToMoveBounds = GetAxisAlignedBoundingBox(meshGroupToMove' meshTransforms[meshGroupToMoveIndex]); " is 123.
Long Statement,MatterHackers.MatterControl,PlatingHelper,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\PlatingHelper.cs,MoveMeshGroupToOpenPosition,The length of the statement  "					partPlaced = CheckPosition(meshGroupToMoveIndex' allMeshGroups' meshTransforms' meshGroupToMove' meshToMoveBounds' yStep' xStep' ref transform); " is 144.
Long Statement,MatterHackers.MatterControl,PlatingHelper,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\PlatingHelper.cs,MoveMeshGroupToOpenPosition,The length of the statement  "						partPlaced = CheckPosition(meshGroupToMoveIndex' allMeshGroups' meshTransforms' meshGroupToMove' meshToMoveBounds' yStep' xStep' ref transform); " is 144.
Long Statement,MatterHackers.MatterControl,PlatingHelper,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\PlatingHelper.cs,MoveMeshGroupToOpenPosition,The length of the statement  "						partPlaced = CheckPosition(meshGroupToMoveIndex' allMeshGroups' meshTransforms' meshGroupToMove' meshToMoveBounds' yStep' xStep' ref transform); " is 144.
Long Statement,MatterHackers.MatterControl,PlatingHelper,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\PlatingHelper.cs,CreateITraceableForMeshGroup,The length of the statement  "					List<IPrimitive> allPolys = AddTraceDataForMesh(mesh' totalActionCount' ref currentAction' ref needUpdateTitle' reportProgress); " is 128.
Long Statement,MatterHackers.MatterControl,MacroDetailWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\EditMacrosWindow.cs,CreateMacroCommandContainer,The length of the statement  "			macroCommandInput = new MHTextEditWidget(windowController.ActiveMacro.GCode' pixelHeight: 120' multiLine: true' typeFace: ApplicationController.MonoSpacedTypeFace); " is 164.
Long Statement,MatterHackers.MatterControl,MacroDetailWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\EditMacrosWindow.cs,ValidateMacroForm,The length of the statement  "			FormField.ValidationHandler[] stringValidationHandlers = new FormField.ValidationHandler[] { validationMethods.StringIsNotEmpty }; " is 130.
Long Statement,MatterHackers.MatterControl,MacroDetailWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\EditMacrosWindow.cs,ValidateMacroForm,The length of the statement  "			FormField.ValidationHandler[] nameValidationHandlers = new FormField.ValidationHandler[] { validationMethods.StringIsNotEmpty' validationMethods.StringHasNoSpecialChars }; " is 171.
Long Statement,MatterHackers.MatterControl,WidescreenPanel,C:\repos\MatterHackers_MatterControl\ApplicationView\WidescreenPanel.cs,LoadColumnTwo,The length of the statement  "			PartPreviewContent partViewContent = new PartPreviewContent(PrinterConnectionAndCommunication.Instance.ActivePrintItem' View3DWidget.WindowMode.Embeded' View3DWidget.AutoRotate.Enabled); " is 186.
Long Statement,MatterHackers.MatterControl,WidescreenPanel,C:\repos\MatterHackers_MatterControl\ApplicationView\WidescreenPanel.cs,SetColumnVisibility,The length of the statement  "					ColumnOne.MinimumSize = new Vector2(Math.Max(compactSlidePanel.TabBarWidth' ColumnOneFixedWidth)' 0); //Ordering here matters - must go after children are added " is 160.
Long Statement,MatterHackers.MatterControl,LinkButtonViewBase,C:\repos\MatterHackers_MatterControl\ControlElements\LinkButtonFactory.cs,OnDraw,The length of the statement  "				RectangleDouble underline = new RectangleDouble(LocalBounds.Left' LocalBounds.Bottom' LocalBounds.Right' LocalBounds.Bottom); " is 125.
Long Statement,MatterHackers.MatterControl,LinkButtonFactory,C:\repos\MatterHackers_MatterControl\ControlElements\LinkButtonFactory.cs,Generate,The length of the statement  "			ButtonViewStates buttonViewWidget = new ButtonViewStates(buttonWidgetNormal' buttonWidgetHover' buttonWidgetPressed' buttonWidgetDisabled); " is 139.
Long Statement,MatterHackers.MatterControl,PrintProgressBar,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintProgressBarWidget.cs,UpdatePrintStatus,The length of the statement  "				if (PrinterConnectionAndCommunication.Instance.PrinterIsPrinting || PrinterConnectionAndCommunication.Instance.PrinterIsPaused) " is 127.
Long Statement,MatterHackers.MatterControl,StyledMessageBox,C:\repos\MatterHackers_MatterControl\ControlElements\StyledMessageBoxWindow.cs,ShowMessageBox,The length of the statement  "			StyledMessageBox messageBox = new StyledMessageBox(callback' message' caption' messageType' extraWidgetsToAdd' 400' 300' yesOk' no); " is 132.
Long Statement,MatterHackers.MatterControl,ApplicationController,C:\repos\MatterHackers_MatterControl\ApplicationView\MainApplicationWidget.cs,StartSignIn,The length of the statement  "					StyledMessageBox.ShowMessageBox(null' "Please wait until the print has finished and try again.".Localize()' "Can't sign in while printing".Localize()) " is 150.
Long Statement,MatterHackers.MatterControl,ApplicationController,C:\repos\MatterHackers_MatterControl\ApplicationView\MainApplicationWidget.cs,StartSignOut,The length of the statement  "					StyledMessageBox.ShowMessageBox(null' "Please wait until the print has finished and try again.".Localize()' "Can't log out while printing".Localize()) " is 150.
Long Statement,MatterHackers.MatterControl,ApplicationController,C:\repos\MatterHackers_MatterControl\ApplicationView\MainApplicationWidget.cs,StartSignOut,The length of the statement  "					}' "Are you sure you want to sign out? You will not have access to your printer profiles or cloud library.".Localize()' "Sign Out?".Localize()' StyledMessageBox.MessageType.YES_NO' "Sign Out".Localize()' "Cancel".Localize()); " is 225.
Long Statement,MatterHackers.MatterControl,ApplicationController,C:\repos\MatterHackers_MatterControl\ApplicationView\MainApplicationWidget.cs,SwitchToPurchasedLibrary,The length of the statement  "				LibraryProviderSelector libraryProviderSelector = CurrentLibraryDataView.CurrentLibraryProvider.GetRootProvider() as LibraryProviderSelector; " is 141.
Long Statement,MatterHackers.MatterControl,ApplicationController,C:\repos\MatterHackers_MatterControl\ApplicationView\MainApplicationWidget.cs,SwitchToSharedLibrary,The length of the statement  "				LibraryProviderSelector libraryProviderSelector = CurrentLibraryDataView.CurrentLibraryProvider.GetRootProvider() as LibraryProviderSelector; " is 141.
Long Statement,MatterHackers.MatterControl,ApplicationController,C:\repos\MatterHackers_MatterControl\ApplicationView\MainApplicationWidget.cs,StartPrintingTest,The length of the statement  "			QueueData.Instance.AddItem(new PrintItemWrapper(new PrintItem("LaunchTestPrint"' @"/storage/sdcard0/Download/LaunchTestPrint.stl"))); " is 133.
Long Statement,MatterHackers.MatterControl,ApplicationController,C:\repos\MatterHackers_MatterControl\ApplicationView\MainApplicationWidget.cs,StartPrintingTest,The length of the statement  "				if (PrinterConnectionAndCommunication.Instance.CommunicationState == PrinterConnectionAndCommunication.CommunicationStates.Connected) " is 133.
Long Statement,MatterHackers.MatterControl,ApplicationController,C:\repos\MatterHackers_MatterControl\ApplicationView\MainApplicationWidget.cs,DownloadToImageAsync,The length of the statement  "							halfImage.NewGraphics2D().Render(unScaledImage' 0' 0' 0' halfImage.Width / (double)unScaledImage.Width' halfImage.Height / (double)unScaledImage.Height); " is 153.
Long Statement,MatterHackers.MatterControl,ApplicationController,C:\repos\MatterHackers_MatterControl\ApplicationView\MainApplicationWidget.cs,DownloadToImageAsync,The length of the statement  "						imageToLoadInto.Allocate(imageToLoadInto.Width' (int)(unScaledImage.Height * finalScale)' imageToLoadInto.Width * (imageToLoadInto.BitDepth / 8)' imageToLoadInto.BitDepth); " is 172.
Long Statement,MatterHackers.MatterControl,PartsSheet,C:\repos\MatterHackers_MatterControl\Queue\OptionsMenu\PartsSheetCreator.cs,SavingFunction,The length of the statement  "					TypeFacePrinter typeFacePrinter = new TypeFacePrinter(queuePartFileName.presentationName' 28' Vector2.Zero' Justification.Center' Baseline.BoundsCenter); " is 153.
Long Statement,MatterHackers.MatterControl,PartsSheet,C:\repos\MatterHackers_MatterControl\Queue\OptionsMenu\PartsSheetCreator.cs,SavingFunction,The length of the statement  "							PolygonMesh.Rendering.OrthographicZProjection.DrawTo(partGraphics2D' loadedMesh' new Vector2(-bounds2D.Left + PartMarginMM' -bounds2D.Bottom + textSpaceMM + PartMarginMM)' PixelPerMM' RGBA_Bytes.Black); " is 202.
Long Statement,MatterHackers.MatterControl,PartsSheet,C:\repos\MatterHackers_MatterControl\Queue\OptionsMenu\PartsSheetCreator.cs,CreateOnePage,The length of the statement  "						plateGraphics.Render(partsOnLine[0].image' plateInventoryImage.Width / 2 - partsOnLine[0].image.Width / 2' offset.y - tallestHeight); " is 133.
Long Statement,MatterHackers.MatterControl,PartsSheet,C:\repos\MatterHackers_MatterControl\Queue\OptionsMenu\PartsSheetCreator.cs,CreateOnePage,The length of the statement  "			TypeFacePrinter printer = new TypeFacePrinter(string.Format("{0}"' Path.GetFileNameWithoutExtension(pathAndFileToSaveTo))' 32' justification: Justification.Center); " is 164.
Long Statement,MatterHackers.MatterControl,PartsSheet,C:\repos\MatterHackers_MatterControl\Queue\OptionsMenu\PartsSheetCreator.cs,PrintTopOfPage,The length of the statement  "			RectangleDouble lineBounds = new RectangleDouble(0' 0' plateInventoryImage.Width - PageMarginPixels.Left * 2' underlineHeightMM * PixelPerMM); " is 142.
Long Statement,MatterHackers.MatterControl,ManualPrinterControlsDesktop,C:\repos\MatterHackers_MatterControl\PrinterControls\ManualPrinterControls.cs,AddHandlers,The length of the statement  "			PrinterConnectionAndCommunication.Instance.CommunicationStateChanged.RegisterEvent(onPrinterStatusChanged' ref unregisterEvents); " is 129.
Long Statement,MatterHackers.MatterControl,TemperatureControlBase,C:\repos\MatterHackers_MatterControl\PrinterControls\TemperatureIndicator.cs,GetTargetTemperatureDisplay,The length of the statement  "			targetTemperatureDisplay = new EditableNumberDisplay(textImageButtonFactory' string.Format("{0:0.0}°C"' GetTargetTemperature())' string.Format("{0:0.0}°C"' 240.2)); " is 164.
Long Statement,MatterHackers.MatterControl,ExtruderTemperatureControlWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\TemperatureIndicator.cs,AddHandlers,The length of the statement  "			PrinterConnectionAndCommunication.Instance.ExtruderTemperatureRead.RegisterEvent(onTemperatureRead' ref unregisterEvents); " is 122.
Long Statement,MatterHackers.MatterControl,ExtruderTemperatureControlWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\TemperatureIndicator.cs,AddHandlers,The length of the statement  "			PrinterConnectionAndCommunication.Instance.ExtruderTemperatureSet.RegisterEvent(onTemperatureSet' ref unregisterEvents); " is 120.
Long Statement,MatterHackers.MatterControl,ExtruderTemperatureControlWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\TemperatureIndicator.cs,SetTargetTemperature,The length of the statement  "					&& PrinterConnectionAndCommunication.Instance.PrintingState == PrinterConnectionAndCommunication.DetailedPrintingState.HeatingExtruder " is 134.
Long Statement,MatterHackers.MatterControl,ExtruderTemperatureControlWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\TemperatureIndicator.cs,SetTargetTemperature,The length of the statement  "					string sliceSettingsNote = "Note: Slice Settings are applied before the print actually starts. Changes while printing will not effect the active print."; " is 153.
Long Statement,MatterHackers.MatterControl,ExtruderTemperatureControlWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\TemperatureIndicator.cs,SetTargetTemperature,The length of the statement  "					string message = string.Format("The extruder is currently heating and its target temperature cannot be changed until it reaches {0}°C.\n\nYou can set the starting extruder temperature in 'Slice Settings' -> 'Filament'.\n\n{1}"' PrinterConnectionAndCommunication.Instance.GetTargetExtruderTemperature(extruderIndex0Based)' sliceSettingsNote); " is 341.
Long Statement,MatterHackers.MatterControl,ExtruderTemperatureControlWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\TemperatureIndicator.cs,SetTargetTemperature,The length of the statement  "					string displayString = string.Format("{0:0.0}°C"' PrinterConnectionAndCommunication.Instance.GetTargetExtruderTemperature(extruderIndex0Based)); " is 144.
Long Statement,MatterHackers.MatterControl,BedTemperatureControlWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\TemperatureIndicator.cs,SetTargetTemperature,The length of the statement  "				&& PrinterConnectionAndCommunication.Instance.PrintingState == PrinterConnectionAndCommunication.DetailedPrintingState.HeatingBed " is 129.
Long Statement,MatterHackers.MatterControl,BedTemperatureControlWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\TemperatureIndicator.cs,SetTargetTemperature,The length of the statement  "				string sliceSettingsNote = "Note: Slice Settings are applied before the print actually starts. Changes while printing will not effect the active print."; " is 153.
Long Statement,MatterHackers.MatterControl,BedTemperatureControlWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\TemperatureIndicator.cs,SetTargetTemperature,The length of the statement  "				string message = string.Format("The bed is currently heating and its target temperature cannot be changed until it reaches {0}°C.\n\nYou can set the starting bed temperature in 'Slice Settings' -> 'Filament'.\n\n{1}"' PrinterConnectionAndCommunication.Instance.TargetBedTemperature' sliceSettingsNote); " is 302.
Long Statement,MatterHackers.MatterControl,JogControls,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,SetEnabledLevels,The length of the statement  "			disableableEButtons.SetEnableLevel(enableEControls ? DisableableWidget.EnableLevel.Enabled : DisableableWidget.EnableLevel.Disabled); " is 133.
Long Statement,MatterHackers.MatterControl,JogControls,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,SetEnabledLevels,The length of the statement  "			tooBigForBabyStepping.SetEnableLevel(enableBabysteppingMode ? DisableableWidget.EnableLevel.Disabled : DisableableWidget.EnableLevel.Enabled); " is 142.
Long Statement,MatterHackers.MatterControl,JogControls,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,GetHotkeyControlContainer,The length of the statement  "			hotKeyButton = hotKeyButtonFactory.GenerateRadioButton(""' StaticData.Instance.LoadIcon("hot_key_small_white.png"' 19' 12).InvertLightness()); " is 142.
Long Statement,MatterHackers.MatterControl,JogControls,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,CreateZButtons,The length of the statement  "				zPlusControl = CreateMoveButton("Z+"' PrinterConnectionAndCommunication.Axis.Z' MovementControls.ZSpeed' levelingButtons' moveButtonFactory); " is 141.
Long Statement,MatterHackers.MatterControl,JogControls,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,CreateZButtons,The length of the statement  "				zMinusControl = CreateMoveButton("Z-"' PrinterConnectionAndCommunication.Axis.Z' MovementControls.ZSpeed' levelingButtons' moveButtonFactory); " is 142.
Long Statement,MatterHackers.MatterControl,JogControls,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,CreateXYGridControl,The length of the statement  "					xMinusControl = CreateMoveButton("X-"' PrinterConnectionAndCommunication.Axis.X' MovementControls.XSpeed' false' moveButtonFactory); " is 132.
Long Statement,MatterHackers.MatterControl,JogControls,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,CreateXYGridControl,The length of the statement  "					xPlusControl = CreateMoveButton("X+"' PrinterConnectionAndCommunication.Axis.X' MovementControls.XSpeed' false' moveButtonFactory); " is 131.
Long Statement,MatterHackers.MatterControl,JogControls,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,CreateXYGridControl,The length of the statement  "					yPlusControl = CreateMoveButton("Y+"' PrinterConnectionAndCommunication.Axis.Y' MovementControls.YSpeed' false' moveButtonFactory); " is 131.
Long Statement,MatterHackers.MatterControl,JogControls,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,CreateXYGridControl,The length of the statement  "					yMinusControl = CreateMoveButton("Y-"' PrinterConnectionAndCommunication.Axis.Y' MovementControls.YSpeed' false' moveButtonFactory); " is 132.
Long Statement,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,GetImageFileName,The length of the statement  "			string imageFileName = Path.Combine(folderToSaveThumbnailsTo' Path.ChangeExtension("{0}_{1}x{2}".FormatWith(stlHashCode' BigRenderSize.x' BigRenderSize.y)' partExtension)); " is 172.
Long Statement,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,GetImageForItem,The length of the statement  "				ImageBuffer sdCardImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_115x115"' partExtension)).InvertLightness(); " is 134.
Long Statement,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,GetImageForItem,The length of the statement  "				graphics.DrawString("GCode"' center.x' center.y' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White); " is 153.
Long Statement,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,GetImageForItem,The length of the statement  "				graphics.DrawString("Missing"' center.x' center.y' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White); " is 155.
Long Statement,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,GetImageForItem,The length of the statement  "				graphics.DrawString("Reduce\nPolygons\nto\nRender"' center.x' center.y + yOffset' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White); " is 186.
Long Statement,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,SetImageFast,The length of the statement  "							this.thumbnailImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_115x115"' partExtension)).InvertLightness(); " is 130.
Long Statement,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,SetImageFast,The length of the statement  "							this.thumbnailImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_50x50"' partExtension)).InvertLightness(); " is 128.
Long Statement,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,SetImageFast,The length of the statement  "				graphics.DrawString("GCode"' center.x' center.y' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White); " is 153.
Long Statement,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,SetImageFast,The length of the statement  "				graphics.DrawString("Missing"' center.x' center.y' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White); " is 155.
Long Statement,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,SetImageFast,The length of the statement  "				graphics.DrawString("Reduce\nPolygons\nto\nRender"' center.x' center.y + yOffset' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White); " is 186.
Long Statement,MatterHackers.MatterControl,MatterControlApplication,C:\repos\MatterHackers_MatterControl\MatterControlApplication.cs,OnClosed,The length of the statement  "			if (PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.PrintingFromSd) " is 138.
Long Statement,MatterHackers.MatterControl,MatterControlApplication,C:\repos\MatterHackers_MatterControl\MatterControlApplication.cs,OnClosing,The length of the statement  "				ApplicationSettings.Instance.set(ApplicationSettingsKey.DesktopPosition' string.Format("{0}'{1}"' DesktopPosition.x' DesktopPosition.y)); " is 137.
Long Statement,MatterHackers.MatterControl,MatterControlApplication,C:\repos\MatterHackers_MatterControl\MatterControlApplication.cs,OnClosing,The length of the statement  "				if (PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.PrintingFromSd) " is 138.
Long Statement,MatterHackers.MatterControl,MatterControlApplication,C:\repos\MatterHackers_MatterControl\MatterControlApplication.cs,OnClosing,The length of the statement  "						"Are you sure you want exit while a print is running from SD Card?\n\nNote: If you exit' it is recommended you wait until the print is completed before running MatterControl again.".Localize()' " is 193.
Long Statement,MatterHackers.MatterControl,MatterControlApplication,C:\repos\MatterHackers_MatterControl\MatterControlApplication.cs,OnClosing,The length of the statement  "				StyledMessageBox.ShowMessageBox(onConfirmExit' savePartsSheetExitAnywayMessage' confirmExit' StyledMessageBox.MessageType.YES_NO); " is 130.
Long Statement,MatterHackers.MatterControl,MatterControlApplication,C:\repos\MatterHackers_MatterControl\MatterControlApplication.cs,ConditionalyCloseNow,The length of the statement  "				bool printingFromSdCard = PrinterConnectionAndCommunication.Instance.CommunicationState == PrinterConnectionAndCommunication.CommunicationStates.PrintingFromSd " is 159.
Long Statement,MatterHackers.MatterControl,MatterControlApplication,C:\repos\MatterHackers_MatterControl\MatterControlApplication.cs,ConditionalyCloseNow,The length of the statement  "					|| (PrinterConnectionAndCommunication.Instance.CommunicationState == PrinterConnectionAndCommunication.CommunicationStates.Paused " is 129.
Long Statement,MatterHackers.MatterControl,MatterControlApplication,C:\repos\MatterHackers_MatterControl\MatterControlApplication.cs,ConditionalyCloseNow,The length of the statement  "					&& PrinterConnectionAndCommunication.Instance.PrePauseCommunicationState == PrinterConnectionAndCommunication.CommunicationStates.PrintingFromSd); " is 146.
Long Statement,MatterHackers.MatterControl,MatterControlApplication,C:\repos\MatterHackers_MatterControl\MatterControlApplication.cs,OnDraw,The length of the statement  "				this.Title = "Allocated = {0:n0} : {1:000}ms' d{2} Size = {3}x{4}' onIdle = {5:00}:{6:00}' widgetsDrawn = {7}".FormatWith(memory' millisecondTimer.GetAverage()' drawCount++' this.Width' this.Height' UiThread.CountExpired' UiThread.Count' GuiWidget.DrawCount); " is 259.
Long Statement,MatterHackers.MatterControl,MatterControlApplication,C:\repos\MatterHackers_MatterControl\MatterControlApplication.cs,FindAndInstantiatePlugins,The length of the statement  "			// TODO: this should look in a plugin folder rather than just the application directory (we probably want it in the user folder). " is 129.
Long Statement,MatterHackers.MatterControl,MatterControlApplication,C:\repos\MatterHackers_MatterControl\MatterControlApplication.cs,FindAndInstantiatePlugins,The length of the statement  "				Dictionary<string' string> nameValuePairs = Newtonsoft.Json.JsonConvert.DeserializeObject<Dictionary<string' string>>(pluginInfo); " is 130.
Long Statement,MatterHackers.MatterControl,ProjectFileHandler,C:\repos\MatterHackers_MatterControl\Utilities\ProjectFileHandler.cs,ExportToProjectArchive,The length of the statement  "			File.WriteAllText(defaultManifestPathAndFileName' JsonConvert.SerializeObject(this.project' Newtonsoft.Json.Formatting.Indented)); " is 130.
Long Statement,MatterHackers.MatterControl,ProjectFileHandler,C:\repos\MatterHackers_MatterControl\Utilities\ProjectFileHandler.cs,ImportFromProjectArchive,The length of the statement  "					string stagingFolder = Path.Combine(applicationDataPath' "data"' "temp"' "project-extract"' projectHashCode.ToString()); " is 120.
Long Statement,MatterHackers.MatterControl,AboutWidget,C:\repos\MatterHackers_MatterControl\AboutPage\AboutWidget.cs,DeleteCacheData,The length of the statement  "			// If the count is less than 0 then we have never run and we need to populate the library and queue still. So don't delete anything yet. " is 136.
Long Statement,MatterHackers.MatterControl,TextImageButtonFactory,C:\repos\MatterHackers_MatterControl\ControlElements\TextImageButtonFactory.cs,GenerateTooltipButton,The length of the statement  "			ButtonViewStates buttonViewWidget = getButtonView(label' normalImageName' hoverImageName' pressedImageName' disabledImageName); " is 127.
Long Statement,MatterHackers.MatterControl,TextImageButtonFactory,C:\repos\MatterHackers_MatterControl\ControlElements\TextImageButtonFactory.cs,GenerateTooltipButton,The length of the statement  "			ButtonViewStates buttonViewWidget = getButtonView(label' normalImageName' hoverImageName' pressedImageName' disabledImageName); " is 127.
Long Statement,MatterHackers.MatterControl,TextImageButtonFactory,C:\repos\MatterHackers_MatterControl\ControlElements\TextImageButtonFactory.cs,GenerateCheckBoxButton,The length of the statement  "			CheckBoxViewStates checkBoxButtonViewWidget = getCheckBoxButtonView(label' normalImage' normalToPressedImage' pressedImage' pressedToNormalImage' pressedLabel); " is 160.
Long Statement,MatterHackers.MatterControl,TextImageButtonFactory,C:\repos\MatterHackers_MatterControl\ControlElements\TextImageButtonFactory.cs,GenerateCheckBoxButton,The length of the statement  "			CheckBoxViewStates checkBoxButtonViewWidget = getCheckBoxButtonView(label' normalImageName' normalToPressedImageName' pressedImageName' pressedToNormalImageName' pressedLabel); " is 176.
Long Statement,MatterHackers.MatterControl,TextImageButtonFactory,C:\repos\MatterHackers_MatterControl\ControlElements\TextImageButtonFactory.cs,Generate,The length of the statement  "			ButtonViewStates buttonViewWidget = getButtonView(label' normalImage' hoverImage' pressedImage' disabledImage' centerText); " is 123.
Long Statement,MatterHackers.MatterControl,TextImageButtonFactory,C:\repos\MatterHackers_MatterControl\ControlElements\TextImageButtonFactory.cs,Generate,The length of the statement  "			ButtonViewStates buttonViewWidget = getButtonView(label' normalImageName' hoverImageName' pressedImageName' disabledImageName' centerText); " is 139.
Long Statement,MatterHackers.MatterControl,TextImageButtonFactory,C:\repos\MatterHackers_MatterControl\ControlElements\TextImageButtonFactory.cs,getButtonView,The length of the statement  "				new TextImageWidget(label' normalFillColor' normalBorderColor' normalTextColor' borderWidth' Margin' normalImage' flowDirection: flowDirection' fontSize: this.fontSize' height: this.FixedHeight' centerText: centerText' imageSpacing: ImageSpacing)' " is 247.
Long Statement,MatterHackers.MatterControl,TextImageButtonFactory,C:\repos\MatterHackers_MatterControl\ControlElements\TextImageButtonFactory.cs,getButtonView,The length of the statement  "				new TextImageWidget(label' hoverFillColor' hoverBorderColor' hoverTextColor' borderWidth' Margin' hoverImage' flowDirection: flowDirection' fontSize: this.fontSize' height: this.FixedHeight' centerText: centerText' imageSpacing: ImageSpacing)' " is 243.
Long Statement,MatterHackers.MatterControl,TextImageButtonFactory,C:\repos\MatterHackers_MatterControl\ControlElements\TextImageButtonFactory.cs,getButtonView,The length of the statement  "				new TextImageWidget(label' pressedFillColor' pressedBorderColor' pressedTextColor' borderWidth' Margin' pressedImage' flowDirection: flowDirection' fontSize: this.fontSize' height: this.FixedHeight' centerText: centerText' imageSpacing: ImageSpacing)' " is 251.
Long Statement,MatterHackers.MatterControl,TextImageButtonFactory,C:\repos\MatterHackers_MatterControl\ControlElements\TextImageButtonFactory.cs,getButtonView,The length of the statement  "				new TextImageWidget(label' disabledFillColor' disabledBorderColor' disabledTextColor' borderWidth' Margin' disabledImage' flowDirection: flowDirection' fontSize: this.fontSize' height: this.FixedHeight' centerText: centerText' imageSpacing: ImageSpacing) " is 254.
Long Statement,MatterHackers.MatterControl,TextImageButtonFactory,C:\repos\MatterHackers_MatterControl\ControlElements\TextImageButtonFactory.cs,getCheckBoxButtonView,The length of the statement  "			GuiWidget normal = new TextImageWidget(label' normalFillColor' normalBorderColor' normalTextColor' borderWidth' Margin' normalImage' flowDirection: flowDirection' fontSize: this.fontSize' height: this.FixedHeight); " is 214.
Long Statement,MatterHackers.MatterControl,TextImageButtonFactory,C:\repos\MatterHackers_MatterControl\ControlElements\TextImageButtonFactory.cs,getCheckBoxButtonView,The length of the statement  "			GuiWidget normalHover = new TextImageWidget(label' hoverFillColor' normalBorderColor' hoverTextColor' borderWidth' Margin' normalImage' flowDirection: flowDirection' fontSize: this.fontSize' height: this.FixedHeight); " is 217.
Long Statement,MatterHackers.MatterControl,TextImageButtonFactory,C:\repos\MatterHackers_MatterControl\ControlElements\TextImageButtonFactory.cs,getCheckBoxButtonView,The length of the statement  "			GuiWidget switchNormalToPressed = new TextImageWidget(label' pressedFillColor' normalBorderColor' pressedTextColor' borderWidth' Margin' normalToPressedImage' flowDirection: flowDirection' fontSize: this.fontSize' height: this.FixedHeight); " is 240.
Long Statement,MatterHackers.MatterControl,TextImageButtonFactory,C:\repos\MatterHackers_MatterControl\ControlElements\TextImageButtonFactory.cs,getCheckBoxButtonView,The length of the statement  "			GuiWidget pressed = new TextImageWidget(pressedText' pressedFillColor' pressedBorderColor' pressedTextColor' borderWidth' Margin' pressedImage' flowDirection: flowDirection' fontSize: this.fontSize' height: this.FixedHeight); " is 225.
Long Statement,MatterHackers.MatterControl,TextImageButtonFactory,C:\repos\MatterHackers_MatterControl\ControlElements\TextImageButtonFactory.cs,getCheckBoxButtonView,The length of the statement  "			GuiWidget pressedHover = new TextImageWidget(label' hoverFillColor' pressedBorderColor' hoverTextColor' borderWidth' Margin' pressedImage' flowDirection: flowDirection' fontSize: this.fontSize' height: this.FixedHeight); " is 220.
Long Statement,MatterHackers.MatterControl,TextImageButtonFactory,C:\repos\MatterHackers_MatterControl\ControlElements\TextImageButtonFactory.cs,getCheckBoxButtonView,The length of the statement  "			GuiWidget switchPressedToNormal = new TextImageWidget(label' normalFillColor' pressedBorderColor' normalTextColor' borderWidth' Margin' pressedToNormalImage' flowDirection: flowDirection' fontSize: this.fontSize' height: this.FixedHeight); " is 239.
Long Statement,MatterHackers.MatterControl,TextImageButtonFactory,C:\repos\MatterHackers_MatterControl\ControlElements\TextImageButtonFactory.cs,getCheckBoxButtonView,The length of the statement  "			GuiWidget disabled = new TextImageWidget(label' disabledFillColor' disabledBorderColor' disabledTextColor' borderWidth' Margin' normalImage' flowDirection: flowDirection' fontSize: this.fontSize' height: this.FixedHeight); " is 222.
Long Statement,MatterHackers.MatterControl,TextImageButtonFactory,C:\repos\MatterHackers_MatterControl\ControlElements\TextImageButtonFactory.cs,getCheckBoxButtonView,The length of the statement  "			CheckBoxViewStates checkBoxButtonViewWidget = new CheckBoxViewStates(normal' normalHover' switchNormalToPressed' pressed' pressedHover' switchPressedToNormal' disabled); " is 169.
Long Statement,MatterHackers.MatterControl,TextImageButtonFactory,C:\repos\MatterHackers_MatterControl\ControlElements\TextImageButtonFactory.cs,getCheckBoxButtonView,The length of the statement  "			GuiWidget normal = new TextImageWidget(label' normalFillColor' normalBorderColor' normalTextColor' borderWidth' Margin' normalImage' flowDirection: flowDirection' fontSize: this.fontSize' height: this.FixedHeight); " is 214.
Long Statement,MatterHackers.MatterControl,TextImageButtonFactory,C:\repos\MatterHackers_MatterControl\ControlElements\TextImageButtonFactory.cs,getCheckBoxButtonView,The length of the statement  "			GuiWidget normalHover = new TextImageWidget(label' hoverFillColor' normalBorderColor' hoverTextColor' borderWidth' Margin' normalImage' flowDirection: flowDirection' fontSize: this.fontSize' height: this.FixedHeight); " is 217.
Long Statement,MatterHackers.MatterControl,TextImageButtonFactory,C:\repos\MatterHackers_MatterControl\ControlElements\TextImageButtonFactory.cs,getCheckBoxButtonView,The length of the statement  "			GuiWidget switchNormalToPressed = new TextImageWidget(label' pressedFillColor' normalBorderColor' pressedTextColor' borderWidth' Margin' normalToPressedImage' flowDirection: flowDirection' fontSize: this.fontSize' height: this.FixedHeight); " is 240.
Long Statement,MatterHackers.MatterControl,TextImageButtonFactory,C:\repos\MatterHackers_MatterControl\ControlElements\TextImageButtonFactory.cs,getCheckBoxButtonView,The length of the statement  "			GuiWidget pressed = new TextImageWidget(pressedText' pressedFillColor' pressedBorderColor' pressedTextColor' borderWidth' Margin' pressedImage' flowDirection: flowDirection' fontSize: this.fontSize' height: this.FixedHeight); " is 225.
Long Statement,MatterHackers.MatterControl,TextImageButtonFactory,C:\repos\MatterHackers_MatterControl\ControlElements\TextImageButtonFactory.cs,getCheckBoxButtonView,The length of the statement  "			GuiWidget pressedHover = new TextImageWidget(label' hoverFillColor' pressedBorderColor' hoverTextColor' borderWidth' Margin' pressedImage' flowDirection: flowDirection' fontSize: this.fontSize' height: this.FixedHeight); " is 220.
Long Statement,MatterHackers.MatterControl,TextImageButtonFactory,C:\repos\MatterHackers_MatterControl\ControlElements\TextImageButtonFactory.cs,getCheckBoxButtonView,The length of the statement  "			GuiWidget switchPressedToNormal = new TextImageWidget(label' normalFillColor' pressedBorderColor' normalTextColor' borderWidth' Margin' pressedToNormalImage' flowDirection: flowDirection' fontSize: this.fontSize' height: this.FixedHeight); " is 239.
Long Statement,MatterHackers.MatterControl,TextImageButtonFactory,C:\repos\MatterHackers_MatterControl\ControlElements\TextImageButtonFactory.cs,getCheckBoxButtonView,The length of the statement  "			GuiWidget disabled = new TextImageWidget(label' disabledFillColor' disabledBorderColor' disabledTextColor' borderWidth' Margin' normalImage' flowDirection: flowDirection' fontSize: this.fontSize' height: this.FixedHeight); " is 222.
Long Statement,MatterHackers.MatterControl,TextImageButtonFactory,C:\repos\MatterHackers_MatterControl\ControlElements\TextImageButtonFactory.cs,getCheckBoxButtonView,The length of the statement  "			CheckBoxViewStates checkBoxButtonViewWidget = new CheckBoxViewStates(normal' normalHover' switchNormalToPressed' pressed' pressedHover' switchPressedToNormal' disabled); " is 169.
Long Statement,MatterHackers.MatterControl,TextImageButtonFactory,C:\repos\MatterHackers_MatterControl\ControlElements\TextImageButtonFactory.cs,GenerateRadioButton,The length of the statement  "			TextImageWidget nomalState = new TextImageWidget(label' normalFillColor' normalBorderColor' normalTextColor' borderWidth' internalMargin' iconImage' flowDirection: flowDirection' fontSize: this.fontSize' height: this.FixedHeight' width: this.FixedWidth' centerText: true); " is 272.
Long Statement,MatterHackers.MatterControl,TextImageButtonFactory,C:\repos\MatterHackers_MatterControl\ControlElements\TextImageButtonFactory.cs,GenerateRadioButton,The length of the statement  "			TextImageWidget hoverState = new TextImageWidget(label' hoverFillColor' hoverBorderColor' hoverTextColor' borderWidth' internalMargin' iconImage' flowDirection: flowDirection' fontSize: this.fontSize' height: this.FixedHeight' width: this.FixedWidth' centerText: true); " is 269.
Long Statement,MatterHackers.MatterControl,TextImageButtonFactory,C:\repos\MatterHackers_MatterControl\ControlElements\TextImageButtonFactory.cs,GenerateRadioButton,The length of the statement  "			TextImageWidget checkingState = new TextImageWidget(label' hoverFillColor' checkedBorderColor' hoverTextColor' borderWidth' internalMargin' iconImage' flowDirection: flowDirection' fontSize: this.fontSize' height: this.FixedHeight' width: this.FixedWidth' centerText: true); " is 274.
Long Statement,MatterHackers.MatterControl,TextImageButtonFactory,C:\repos\MatterHackers_MatterControl\ControlElements\TextImageButtonFactory.cs,GenerateRadioButton,The length of the statement  "			TextImageWidget checkedState = new TextImageWidget(label' pressedFillColor' checkedBorderColor' pressedTextColor' borderWidth' internalMargin' iconImage' flowDirection: flowDirection' fontSize: this.fontSize' height: this.FixedHeight' width: this.FixedWidth' centerText: true); " is 277.
Long Statement,MatterHackers.MatterControl,TextImageButtonFactory,C:\repos\MatterHackers_MatterControl\ControlElements\TextImageButtonFactory.cs,GenerateRadioButton,The length of the statement  "			TextImageWidget disabledState = new TextImageWidget(label' disabledFillColor' disabledBorderColor' disabledTextColor' borderWidth' internalMargin' iconImage' flowDirection: flowDirection' fontSize: this.fontSize' height: this.FixedHeight' width: this.FixedWidth' centerText: true); " is 281.
Long Statement,MatterHackers.MatterControl,TextImageButtonFactory,C:\repos\MatterHackers_MatterControl\ControlElements\TextImageButtonFactory.cs,GenerateRadioButton,The length of the statement  "			RadioButtonViewStates checkBoxButtonViewWidget = new RadioButtonViewStates(nomalState' hoverState' checkingState' checkedState' disabledState); " is 143.
Long Statement,MatterHackers.MatterControl,SaveAsWindow,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\SaveAsWindow.cs,SubmitForm,The length of the statement  "				SaveAsReturnInfo returnInfo = new SaveAsReturnInfo(newName' fileNameAndPath' librarySelectorWidget.CurrentLibraryProvider); " is 123.
Long Statement,MatterHackers.MatterControl,DropDownMenuFactory,C:\repos\MatterHackers_MatterControl\ControlElements\DropDownMenuFactory.cs,CreateButtonViewStates,The length of the statement  "				new DropDownButtonBase(label' normalFillColor' normalBorderColor' normalTextColor' borderWidth' Margin' fontSize' FlowDirection.LeftToRight' FixedHeight)' " is 154.
Long Statement,MatterHackers.MatterControl,DropDownMenuFactory,C:\repos\MatterHackers_MatterControl\ControlElements\DropDownMenuFactory.cs,CreateButtonViewStates,The length of the statement  "				new DropDownButtonBase(label' hoverFillColor' hoverBorderColor' hoverTextColor' borderWidth' Margin' fontSize' FlowDirection.LeftToRight' FixedHeight)' " is 151.
Long Statement,MatterHackers.MatterControl,DropDownMenuFactory,C:\repos\MatterHackers_MatterControl\ControlElements\DropDownMenuFactory.cs,CreateButtonViewStates,The length of the statement  "				new DropDownButtonBase(label' pressedFillColor' pressedBorderColor' pressedTextColor' borderWidth' Margin' fontSize' FlowDirection.LeftToRight' FixedHeight)' " is 157.
Long Statement,MatterHackers.MatterControl,DropDownMenuFactory,C:\repos\MatterHackers_MatterControl\ControlElements\DropDownMenuFactory.cs,CreateButtonViewStates,The length of the statement  "				new DropDownButtonBase(label' disabledFillColor' disabledBorderColor' disabledTextColor' borderWidth' Margin' fontSize' FlowDirection.LeftToRight' FixedHeight) " is 159.
Long Statement,MatterHackers.MatterControl.ActionBar,TouchScreenPrintStatusRow,C:\repos\MatterHackers_MatterControl\ActionBar\TouchScreenPrintStatusRow.cs,OnMouseUp,The length of the statement  "			RectangleDouble topRightHitbox = new RectangleDouble(this.Width - boxSize' this.Height - boxSize' this.Width' this.Height); " is 123.
Long Statement,MatterHackers.MatterControl.ActionBar,TouchScreenPrintStatusRow,C:\repos\MatterHackers_MatterControl\ActionBar\TouchScreenPrintStatusRow.cs,CreateActivePrinterInfoWidget,The length of the statement  "			activePrintPreviewImage = new PartThumbnailWidget(null' "part_icon_transparent_100x100.png"' "building_thumbnail_100x100.png"' PartThumbnailWidget.ImageSizes.Size50x50); " is 169.
Long Statement,MatterHackers.MatterControl.ActionBar,TouchScreenPrintStatusRow,C:\repos\MatterHackers_MatterControl\ActionBar\TouchScreenPrintStatusRow.cs,UpdatePrintStatus,The length of the statement  "						activePrintStatus.Text = "Connection Failed".Localize() + ": " + PrinterConnectionAndCommunication.Instance.ConnectionFailureMessage; " is 133.
Long Statement,MatterHackers.MatterControl.ActionBar,TemperatureWidgetBed,C:\repos\MatterHackers_MatterControl\ActionBar\TemperatureWidgetBed.cs,DisplayCurrentTemperature,The length of the statement  "				if ((int)(PrinterConnectionAndCommunication.Instance.TargetBedTemperature + 0.5) < (int)(PrinterConnectionAndCommunication.Instance.ActualBedTemperature + 0.5)) " is 160.
Long Statement,MatterHackers.MatterControl.ActionBar,TemperatureWidgetBed,C:\repos\MatterHackers_MatterControl\ActionBar\TemperatureWidgetBed.cs,DisplayCurrentTemperature,The length of the statement  "				else if ((int)(PrinterConnectionAndCommunication.Instance.TargetBedTemperature + 0.5) > (int)(PrinterConnectionAndCommunication.Instance.ActualBedTemperature + 0.5)) " is 165.
Long Statement,MatterHackers.MatterControl.ActionBar,TemperatureWidgetBed,C:\repos\MatterHackers_MatterControl\ActionBar\TemperatureWidgetBed.cs,DisplayCurrentTemperature,The length of the statement  "			this.IndicatorValue = string.Format(" {0:0.#}°{1}"' PrinterConnectionAndCommunication.Instance.ActualBedTemperature' tempDirectionIndicator); " is 141.
Long Statement,MatterHackers.MatterControl.ActionBar,TemperatureWidgetBed,C:\repos\MatterHackers_MatterControl\ActionBar\TemperatureWidgetBed.cs,SetTargetTemperature,The length of the statement  "					&& PrinterConnectionAndCommunication.Instance.PrintingState == PrinterConnectionAndCommunication.DetailedPrintingState.HeatingBed " is 129.
Long Statement,MatterHackers.MatterControl.ActionBar,TemperatureWidgetBed,C:\repos\MatterHackers_MatterControl\ActionBar\TemperatureWidgetBed.cs,SetTargetTemperature,The length of the statement  "					string message = string.Format(waitingForBedToHeatMessage' PrinterConnectionAndCommunication.Instance.TargetBedTemperature' sliceSettingsNote); " is 143.
Long Statement,MatterHackers.MatterControl.ActionBar,PrintActionRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintActionRow.cs,AddChildElements,The length of the statement  "			addButton = textImageButtonFactory.GenerateTooltipButton("Add".Localize()' StaticData.Instance.LoadIcon("icon_circle_plus.png"'32'32).InvertLightness()); " is 153.
Long Statement,MatterHackers.MatterControl.ActionBar,PrintActionRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintActionRow.cs,AddChildElements,The length of the statement  "			startButton = textImageButtonFactory.GenerateTooltipButton("Print".Localize()' StaticData.Instance.LoadIcon("icon_play_32x32.png"'32'32).InvertLightness()); " is 156.
Long Statement,MatterHackers.MatterControl.ActionBar,PrintActionRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintActionRow.cs,AddChildElements,The length of the statement  "			touchScreenConnectButton = textImageButtonFactory.GenerateTooltipButton("Connect".Localize()' StaticData.Instance.LoadIcon("connect.png"' 32'32).InvertLightness()); " is 164.
Long Statement,MatterHackers.MatterControl.ActionBar,PrintActionRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintActionRow.cs,AddChildElements,The length of the statement  "			resetConnectionButton = textImageButtonFactory.GenerateTooltipButton("Reset".Localize()' StaticData.Instance.LoadIcon("e_stop4.png"' 32'32).InvertLightness()); " is 159.
Long Statement,MatterHackers.MatterControl.ActionBar,PrintActionRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintActionRow.cs,SetButtonStates,The length of the statement  "				&& PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect) " is 142.
Long Statement,MatterHackers.MatterControl.ActionBar,PrintActionRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintActionRow.cs,AddButtonOnIdle,The length of the statement  "							QueueData.Instance.AddItem(new PrintItemWrapper(new PrintItem(Path.GetFileNameWithoutExtension(loadedFileName)' Path.GetFullPath(loadedFileName)))); " is 148.
Long Statement,MatterHackers.MatterControl.ActionBar,PrinterConnectAndSelectControl,C:\repos\MatterHackers_MatterControl\ActionBar\PrinterConnectAndSelectControl.cs,AddChildElements,The length of the statement  "				disconnectPrinterButton = actionBarButtonFactory.Generate("Disconnect".Localize().ToUpper()' StaticData.Instance.LoadIcon("connect.png"' 32' 32)); " is 146.
Long Statement,MatterHackers.MatterControl.ActionBar,PrinterConnectAndSelectControl,C:\repos\MatterHackers_MatterControl\ActionBar\PrinterConnectAndSelectControl.cs,AddChildElements,The length of the statement  "			PrinterConnectionAndCommunication.Instance.CommunicationStateChanged.RegisterEvent(onPrinterStatusChanged' ref unregisterEvents); " is 129.
Long Statement,MatterHackers.MatterControl.ActionBar,PrinterConnectAndSelectControl,C:\repos\MatterHackers_MatterControl\ActionBar\PrinterConnectAndSelectControl.cs,OnIdleDisconnect,The length of the statement  "				StyledMessageBox.ShowMessageBox(onConfirmStopPrint' disconnectAndCancelMessage' disconnectAndCancelTitle' StyledMessageBox.MessageType.YES_NO' "Disconnect".Localize()' "Stay Connected".Localize()); " is 197.
Long Statement,MatterHackers.MatterControl.ActionBar,PrinterConnectAndSelectControl,C:\repos\MatterHackers_MatterControl\ActionBar\PrinterConnectAndSelectControl.cs,SetConnectionButtonVisibleState,The length of the statement  "			// Ensure connect buttons are locked while long running processes are executing to prevent duplicate calls into said actions " is 124.
Long Statement,MatterHackers.MatterControl.ActionBar,PrinterConnectAndSelectControl,C:\repos\MatterHackers_MatterControl\ActionBar\PrinterConnectAndSelectControl.cs,SetConnectionButtonVisibleState,The length of the statement  "			connectPrinterButton.Enabled = communicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect && ActiveSliceSettings.Instance.PrinterSelected; " is 175.
Long Statement,MatterHackers.MatterControl.ActionBar,PrinterConnectAndSelectControl,C:\repos\MatterHackers_MatterControl\ActionBar\PrinterConnectAndSelectControl.cs,SetConnectionButtonVisibleState,The length of the statement  "			bool printerIsPrintigOrPause = PrinterConnectionAndCommunication.Instance.PrinterIsPrinting || PrinterConnectionAndCommunication.Instance.PrinterIsPaused; " is 154.
Long Statement,MatterHackers.MatterControl.ActionBar,PrinterConnectAndSelectControl,C:\repos\MatterHackers_MatterControl\ActionBar\PrinterConnectAndSelectControl.cs,SetConnectionButtonVisibleState,The length of the statement  "			disconnectPrinterButton.Enabled = communicationState != PrinterConnectionAndCommunication.CommunicationStates.Disconnecting; " is 124.
Long Statement,MatterHackers.MatterControl.ActionBar,PrintStatusRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintStatusRow.cs,AddChildElements,The length of the statement  "			activePrintPreviewImage = new PartThumbnailWidget(null' "part_icon_transparent_100x100.png"' "building_thumbnail_100x100.png"' PartThumbnailWidget.ImageSizes.Size115x115); " is 171.
Long Statement,MatterHackers.MatterControl.ActionBar,PrintStatusRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintStatusRow.cs,UpdatePrintStatus,The length of the statement  "						printerStatus = "Connection Failed".Localize() + ": " + PrinterConnectionAndCommunication.Instance.ConnectionFailureMessage; " is 124.
Long Statement,MatterHackers.MatterControl.ActionBar,TemperatureWidgetBase,C:\repos\MatterHackers_MatterControl\ActionBar\TemperatureWidgetBase.cs,OnMouseEnterBounds,The length of the statement  "			if (PrinterConnectionAndCommunication.Instance.PrinterIsConnected && !PrinterConnectionAndCommunication.Instance.PrinterIsPrinting) " is 131.
Long Statement,MatterHackers.MatterControl.ActionBar,TemperatureWidgetExtruder,C:\repos\MatterHackers_MatterControl\ActionBar\TemperatureWidgetExtruder.cs,DisplayCurrentTemperature,The length of the statement  "				if ((int)(PrinterConnectionAndCommunication.Instance.GetTargetExtruderTemperature(extruderIndex) + 0.5) < (int)(PrinterConnectionAndCommunication.Instance.GetActualExtruderTemperature(extruderIndex) + 0.5)) " is 206.
Long Statement,MatterHackers.MatterControl.ActionBar,TemperatureWidgetExtruder,C:\repos\MatterHackers_MatterControl\ActionBar\TemperatureWidgetExtruder.cs,DisplayCurrentTemperature,The length of the statement  "				else if ((int)(PrinterConnectionAndCommunication.Instance.GetTargetExtruderTemperature(extruderIndex) + 0.5) > (int)(PrinterConnectionAndCommunication.Instance.GetActualExtruderTemperature(extruderIndex) + 0.5)) " is 211.
Long Statement,MatterHackers.MatterControl.ActionBar,TemperatureWidgetExtruder,C:\repos\MatterHackers_MatterControl\ActionBar\TemperatureWidgetExtruder.cs,DisplayCurrentTemperature,The length of the statement  "			this.IndicatorValue = string.Format(" {0:0.#}°{1}"' PrinterConnectionAndCommunication.Instance.GetActualExtruderTemperature(extruderIndex)' tempDirectionIndicator); " is 164.
Long Statement,MatterHackers.MatterControl.ActionBar,TemperatureWidgetExtruder,C:\repos\MatterHackers_MatterControl\ActionBar\TemperatureWidgetExtruder.cs,SetTargetTemperature,The length of the statement  "					&& PrinterConnectionAndCommunication.Instance.PrintingState == PrinterConnectionAndCommunication.DetailedPrintingState.HeatingExtruder " is 134.
Long Statement,MatterHackers.MatterControl.ActionBar,TemperatureWidgetExtruder,C:\repos\MatterHackers_MatterControl\ActionBar\TemperatureWidgetExtruder.cs,SetTargetTemperature,The length of the statement  "					string message = string.Format(waitingForExtruderToHeatMessage' PrinterConnectionAndCommunication.Instance.GetTargetExtruderTemperature(extruderIndex)' sliceSettingsNote); " is 171.
Long Statement,MatterHackers.MatterControl.ConfigurationPage,ApplicationSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\ApplicationSettings\ApplicationSettingsView.cs,GetThumbnailRenderingControl,The length of the statement  "						StyledMessageBox.ShowMessageBox(removeThumbnails' rebuildThumbnailsMessage' rebuildThumbnailsTitle' StyledMessageBox.MessageType.YES_NO' "Rebuild".Localize()); " is 159.
Long Statement,MatterHackers.MatterControl.ConfigurationPage,ApplicationSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\ApplicationSettings\ApplicationSettingsView.cs,GenerateLocalizationValidationFile,The length of the statement  "						outstream.WriteLine("{0}:{1}"' segments[0]' new string(segments[1].ToCharArray().Select(c => c == ' ' ? ' ' : currentChar).ToArray())); " is 135.
Long Statement,MatterHackers.MatterControl.ConfigurationPage,CloudSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\CloudSettings\CloudSettingsView.cs,GetNotificationControls,The length of the statement  "			CheckBox enablePrintNotificationsSwitch = ImageButtonFactory.CreateToggleSwitch(UserSettings.Instance.get("PrintNotificationsEnabled") == "true"); " is 146.
Long Statement,MatterHackers.MatterControl.ConfigurationPage,CloudSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\CloudSettings\CloudSettingsView.cs,AddHandlers,The length of the statement  "			PrinterConnectionAndCommunication.Instance.CommunicationStateChanged.RegisterEvent(onPrinterStatusChanged' ref unregisterEvents); " is 129.
Long Statement,MatterHackers.MatterControl.ConfigurationPage,CalibrationSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\CalibrationSettings\CalibrationSettingsView.cs,GetAutoLevelControl,The length of the statement  "			CheckBox printLevelingSwitch = ImageButtonFactory.CreateToggleSwitch(ActiveSliceSettings.Instance.GetValue<bool>(SettingsKey.print_leveling_enabled)); " is 150.
Long Statement,MatterHackers.MatterControl.ConfigurationPage,CalibrationSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\CalibrationSettings\CalibrationSettingsView.cs,SetVisibleControls,The length of the statement  "				|| PrinterConnectionAndCommunication.Instance.CommunicationState == PrinterConnectionAndCommunication.CommunicationStates.Printing " is 130.
Long Statement,MatterHackers.MatterControl.ConfigurationPage,HardwareSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrinterSettings\PrinterSettingsView.cs,GetCameraControl,The length of the statement  "				CheckBox toggleSwitch = ImageButtonFactory.CreateToggleSwitch(ActiveSliceSettings.Instance.GetValue<bool>(SettingsKey.publish_bed_image)); " is 138.
Long Statement,MatterHackers.MatterControl.ConfigurationPage,HardwareSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrinterSettings\PrinterSettingsView.cs,AddHandlers,The length of the statement  "			PrinterConnectionAndCommunication.Instance.CommunicationStateChanged.RegisterEvent((e' s) => SetEnabledStates()' ref unregisterEvents); " is 135.
Long Statement,MatterHackers.MatterControl.ConfigurationPage,HardwareSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrinterSettings\PrinterSettingsView.cs,AddHandlers,The length of the statement  "			PrinterConnectionAndCommunication.Instance.EnableChanged.RegisterEvent((e's) => SetEnabledStates()' ref unregisterEvents); " is 122.
Long Statement,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,RadialLevlingFunctions,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\LevelWizard7PointRadial.cs,PrinterReportedPosition,The length of the statement  "			lastDestinationWithLevelingApplied = GetPositionWithZOffset(PrinterConnectionAndCommunication.Instance.LastReportedPosition); " is 125.
Long Statement,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,RadialLevlingFunctions,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\LevelWizard7PointRadial.cs,GetPositionWithZOffset,The length of the statement  "				Plane currentPlane = new Plane(LevelingData.SampledPositions[firstIndex]' LevelingData.SampledPositions[lastIndex]' LevelingData.SampledPositions[NumberOfRadialSamples]); " is 170.
Long Statement,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,RadialLevlingFunctions,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\LevelWizard7PointRadial.cs,GetPositionWithZOffset,The length of the statement  "				double hitDistance = currentPlane.GetDistanceToIntersection(new Vector3(currentDestination.x' currentDestination.y' 0)' Vector3.UnitZ); " is 135.
Long Statement,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,LevelWizard7PointRadial,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\LevelWizard7PointRadial.cs,ApplyLeveling,The length of the statement  "                return GetLevelingFunctions(numberOfRadialSamples' levelingData' ActiveSliceSettings.Instance.GetValue<Vector2>(SettingsKey.print_center)) " is 138.
Long Statement,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,LevelWizard7PointRadial,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\LevelWizard7PointRadial.cs,GetPrintLevelPositionToSample,The length of the statement  "            return GetLevelingFunctions(numberOfRadialSamples' levelingData' ActiveSliceSettings.Instance.GetValue<Vector2>(SettingsKey.print_center)) " is 138.
Long Statement,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,LevelWizard13PointRadial,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\LevelWizard13PointRadial.cs,ApplyLeveling,The length of the statement  "                return GetLevelingFunctions(numberOfRadialSamples' settings.Helpers.GetPrintLevelingData()' ActiveSliceSettings.Instance.GetValue<Vector2>(SettingsKey.print_center)) " is 165.
Long Statement,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,LevelWizard13PointRadial,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\LevelWizard13PointRadial.cs,GetPrintLevelPositionToSample,The length of the statement  "            return GetLevelingFunctions(numberOfRadialSamples' levelingData' ActiveSliceSettings.Instance.GetValue<Vector2>(SettingsKey.print_center)) " is 138.
Long Statement,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,GettingThirdPointFor2PointCalibration,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\PrintLevelPages.cs,PageIsBecomingActive,The length of the statement  "			PrinterConnectionAndCommunication.Instance.MoveAbsolute(PrinterConnectionAndCommunication.Axis.Z' probeStartPosition.z' feedRates.z); " is 133.
Long Statement,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,GettingThirdPointFor2PointCalibration,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\PrintLevelPages.cs,FinishedProbe,The length of the statement  "					PrinterConnectionAndCommunication.Instance.MoveAbsolute(probeStartPosition' ActiveSliceSettings.Instance.Helpers.ManualMovementSpeeds().z); " is 139.
Long Statement,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,FindBedHeight,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\PrintLevelPages.cs,PageIsBecomingInactive,The length of the statement  "			probePositions[probePositionsBeingEditedIndex].position = PrinterConnectionAndCommunication.Instance.LastReportedPosition; " is 122.
Long Statement,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,FindBedHeight,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\PrintLevelPages.cs,CreateZButtons,The length of the statement  "			// set these to 0 so the button does not do any movements by default (we will handle the movement on our click callback) " is 120.
Long Statement,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,FindBedHeight,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\PrintLevelPages.cs,zMinusControl_Click,The length of the statement  "			PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Z' -moveAmount' ActiveSliceSettings.Instance.Helpers.ManualMovementSpeeds().z); " is 174.
Long Statement,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,FindBedHeight,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\PrintLevelPages.cs,zPlusControl_Click,The length of the statement  "			PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Z' moveAmount' ActiveSliceSettings.Instance.Helpers.ManualMovementSpeeds().z); " is 173.
Long Statement,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,GetCoarseBedHeight,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\PrintLevelPages.cs,PageIsBecomingActive,The length of the statement  "			PrinterConnectionAndCommunication.Instance.MoveAbsolute(PrinterConnectionAndCommunication.Axis.Z' probeStartPosition.z' feedRates.z); " is 133.
Long Statement,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,GetUltraFineBedHeight,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\PrintLevelPages.cs,PageIsBecomingInactive,The length of the statement  "				PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Z' 2' ActiveSliceSettings.Instance.Helpers.ManualMovementSpeeds().z); " is 164.
Long Statement,MatterHackers.MatterControl.CustomWidgets,BedStatusWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,UpdateTemperatures,The length of the statement  "			this.actualTemp.Text = $"{actualValue:0}".PadLeft(3' (char)0x2007) + "°"; // put in padding spaces to make it at least 3 characters " is 131.
Long Statement,MatterHackers.MatterControl.CustomWidgets,BedStatusWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,UpdateTemperatures,The length of the statement  "			this.targetTemp.Text = $"{targetValue:0}".PadLeft(3' (char)0x2007) + "°"; // put in padding spaces to make it at least 3 characters " is 131.
Long Statement,MatterHackers.MatterControl.CustomWidgets,ExtruderStatusWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,UpdateTemperatures,The length of the statement  "			double actualValue = Math.Max(0' PrinterConnectionAndCommunication.Instance.GetActualExtruderTemperature(extruderIndex)); " is 121.
Long Statement,MatterHackers.MatterControl.CustomWidgets,ExtruderStatusWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,UpdateTemperatures,The length of the statement  "			this.actualTemp.Text = $"{actualValue:0}".PadLeft(3' (char)0x2007) + "°"; // put in padding spaces to make it at least 3 characters " is 131.
Long Statement,MatterHackers.MatterControl.CustomWidgets,ExtruderStatusWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,UpdateTemperatures,The length of the statement  "			this.targetTemp.Text = $"{targetValue:0}".PadLeft(3' (char)0x2007) + "°"; // put in padding spaces to make it at least 3 characters " is 131.
Long Statement,MatterHackers.MatterControl.CustomWidgets,PrintingWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,CreateActionBar,The length of the statement  "			cancelButton.Enabled = PrinterConnectionAndCommunication.Instance.PrinterIsPrinting || PrinterConnectionAndCommunication.Instance.PrinterIsPaused; " is 146.
Long Statement,MatterHackers.MatterControl.CustomWidgets,PrintingWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,CreateActionBar,The length of the statement  "			var resetButton = CreateButton("Reset".Localize().ToUpper()' smallScreen' true' StaticData.Instance.LoadIcon("e_stop4.png"' 32' 32)); " is 133.
Long Statement,MatterHackers.MatterControl.CustomWidgets,PrintingWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,CreateActionBar,The length of the statement  "				cancelButton.Enabled = PrinterConnectionAndCommunication.Instance.PrinterIsPrinting || PrinterConnectionAndCommunication.Instance.PrinterIsPaused; " is 146.
Long Statement,MatterHackers.MatterControl.CustomWidgets,BasicBody,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,GetProgressInfo,The length of the statement  "			// TODO: Consider if the consistency of a common time format would look and feel better than changing formats based on elapsed duration " is 135.
Long Statement,MatterHackers.MatterControl.CustomWidgets,BasicBody,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,GetProgressInfo,The length of the statement  "			timeWidget.Text = (hoursPrinted <= 0) ? $"{minutesPrinted}:{secondsPrinted:00}" : $"{hoursPrinted}:{minutesPrinted:00}:{secondsPrinted:00}"; " is 140.
Long Statement,MatterHackers.MatterControl.CustomWidgets,BasicBody,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,OnLoad,The length of the statement  "				Margin = smallScreen ? new BorderDouble(30' 5' 30' 0) : new BorderDouble(30'20' 30' 0)' // the -12 is to take out the top bar " is 125.
Long Statement,MatterHackers.MatterControl.CustomWidgets,BasicBody,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,OnLoad,The length of the statement  "				ImageBuffer imageBuffer = PartThumbnailWidget.GetImageForItem(PrinterConnectionAndCommunication.Instance.ActivePrintItem' imageSize' imageSize); " is 144.
Long Statement,MatterHackers.MatterControl.CustomWidgets,BasicBody,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,OnLoad,The length of the statement  "				printerName = new TextWidget(ActiveSliceSettings.Instance.GetValue(SettingsKey.printer_name)' pointSize: 16' textColor: ActiveTheme.Instance.PrimaryTextColor) " is 158.
Long Statement,MatterHackers.MatterControl.CustomWidgets,BasicBody,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,OnLoad,The length of the statement  "				partName = new TextWidget(PrinterConnectionAndCommunication.Instance.ActivePrintItem.GetFriendlyName()' pointSize: 16' textColor: ActiveTheme.Instance.PrimaryTextColor) " is 168.
Long Statement,MatterHackers.MatterControl.CustomWidgets,ZAxisControls,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,CreateZMoveButton,The length of the statement  "			var button = buttonFactory.GenerateMoveButton($"{Math.Abs(moveAmount):0.00} mm"' PrinterConnectionAndCommunication.Axis.Z' MovementControls.ZSpeed); " is 148.
Long Statement,MatterHackers.MatterControl.CustomWidgets.LibrarySelector,LibrarySelectorRowItem,C:\repos\MatterHackers_MatterControl\CustomWidgets\LibrarySelector\LibrarySelectorRowItem.cs,ChangeCollection,The length of the statement  "				libraryDataView.CurrentLibraryProvider = libraryDataView.CurrentLibraryProvider.GetProviderForCollection(printItemCollection); " is 126.
Long Statement,MatterHackers.MatterControl.CustomWidgets.LibrarySelector,LibrarySelectorWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\LibrarySelector\LibrarySelectorWidget.cs,AddAllItems,The length of the statement  "					LibrarySelectorRowItem queueItem = new LibrarySelectorRowItem(parent' -1' this' provider.ParentLibraryProvider' GetThumbnailWidget(provider.ParentLibraryProvider' parent' LibraryProvider.UpFolderImage)' "Back".Localize()); " is 222.
Long Statement,MatterHackers.MatterControl.CustomWidgets.LibrarySelector,LibrarySelectorWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\LibrarySelector\LibrarySelectorWidget.cs,AddAllItems,The length of the statement  "						LibrarySelectorRowItem queueItem = new LibrarySelectorRowItem(item' i' this' null' GetThumbnailWidget(null' item' provider.GetCollectionFolderImage(i))' "Open".Localize()); " is 172.
Long Statement,MatterHackers.Agg.UI,PopOutTextTabWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PopOutTextTab.cs,AddText,The length of the statement  "			popOutButton = new Button(0' 0' new ButtonViewStates(new ImageWidget(popOutImage)' new ImageWidget(popOutImage)' new ImageWidget(popOutImageClick)' new ImageWidget(popOutImageClick))); " is 184.
Long Statement,MatterHackers.RayTracer,ThumbnailTracer,C:\repos\MatterHackers_MatterControl\CustomWidgets\ThumbnailTracer.cs,AddAFloor,The length of the statement  "				graphics.Circle(new Vector2(rand.NextDouble() * testImage.Width' rand.NextDouble() * testImage.Height)' rand.NextDouble() * 40 + 10' color); " is 140.
Long Statement,MatterHackers.RayTracer,ThumbnailTracer,C:\repos\MatterHackers_MatterControl\CustomWidgets\ThumbnailTracer.cs,AddAFloor,The length of the statement  "			//scene.shapes.Add(new PlaneShape(new Vector3(0' 0' 1)' 0' new ChessboardMaterial(new RGBA_Floats(1' 1' 1)' new RGBA_Floats(0' 0' 0)' 0' 0' 1' 0.7))); " is 150.
Long Statement,MatterHackers.RayTracer,ThumbnailTracer,C:\repos\MatterHackers_MatterControl\CustomWidgets\ThumbnailTracer.cs,render_gouraud,The length of the statement  "			span_gen.triangle(points[0].position.x' points[0].position.y' points[1].position.x' points[1].position.y' points[2].position.x' points[2].position.y); " is 150.
Long Statement,MatterHackers.RayTracer,ThumbnailTracer,C:\repos\MatterHackers_MatterControl\CustomWidgets\ThumbnailTracer.cs,DrawTo,The length of the statement  "						Vector3 transformedPosition = Vector3.TransformPosition(faceEdge.firstVertex.Position' trackballTumbleWidget.ModelviewMatrix); " is 126.
Long Statement,MatterHackers.RayTracer,ThumbnailTracer,C:\repos\MatterHackers_MatterControl\CustomWidgets\ThumbnailTracer.cs,AddTestMesh,The length of the statement  "				IPrimitive bvhCollection = MeshToBVH.Convert(loadedMeshGroups' new SolidMaterial(partColor.GetAsRGBA_Floats()' .01' 0.0' 2.0)); " is 127.
Long Statement,MatterHackers.RayTracer,ThumbnailTracer,C:\repos\MatterHackers_MatterControl\CustomWidgets\ThumbnailTracer.cs,GetScreenBounds,The length of the statement  "			screenBounds.ExpandToInclude(trackballTumbleWidget.GetScreenPosition(new Vector3(meshBounds.minXYZ.x' meshBounds.minXYZ.y' meshBounds.minXYZ.z))); " is 146.
Long Statement,MatterHackers.RayTracer,ThumbnailTracer,C:\repos\MatterHackers_MatterControl\CustomWidgets\ThumbnailTracer.cs,GetScreenBounds,The length of the statement  "			screenBounds.ExpandToInclude(trackballTumbleWidget.GetScreenPosition(new Vector3(meshBounds.maxXYZ.x' meshBounds.minXYZ.y' meshBounds.minXYZ.z))); " is 146.
Long Statement,MatterHackers.RayTracer,ThumbnailTracer,C:\repos\MatterHackers_MatterControl\CustomWidgets\ThumbnailTracer.cs,GetScreenBounds,The length of the statement  "			screenBounds.ExpandToInclude(trackballTumbleWidget.GetScreenPosition(new Vector3(meshBounds.maxXYZ.x' meshBounds.maxXYZ.y' meshBounds.minXYZ.z))); " is 146.
Long Statement,MatterHackers.RayTracer,ThumbnailTracer,C:\repos\MatterHackers_MatterControl\CustomWidgets\ThumbnailTracer.cs,GetScreenBounds,The length of the statement  "			screenBounds.ExpandToInclude(trackballTumbleWidget.GetScreenPosition(new Vector3(meshBounds.minXYZ.x' meshBounds.maxXYZ.y' meshBounds.minXYZ.z))); " is 146.
Long Statement,MatterHackers.RayTracer,ThumbnailTracer,C:\repos\MatterHackers_MatterControl\CustomWidgets\ThumbnailTracer.cs,GetScreenBounds,The length of the statement  "			screenBounds.ExpandToInclude(trackballTumbleWidget.GetScreenPosition(new Vector3(meshBounds.minXYZ.x' meshBounds.minXYZ.y' meshBounds.maxXYZ.z))); " is 146.
Long Statement,MatterHackers.RayTracer,ThumbnailTracer,C:\repos\MatterHackers_MatterControl\CustomWidgets\ThumbnailTracer.cs,GetScreenBounds,The length of the statement  "			screenBounds.ExpandToInclude(trackballTumbleWidget.GetScreenPosition(new Vector3(meshBounds.maxXYZ.x' meshBounds.minXYZ.y' meshBounds.maxXYZ.z))); " is 146.
Long Statement,MatterHackers.RayTracer,ThumbnailTracer,C:\repos\MatterHackers_MatterControl\CustomWidgets\ThumbnailTracer.cs,GetScreenBounds,The length of the statement  "			screenBounds.ExpandToInclude(trackballTumbleWidget.GetScreenPosition(new Vector3(meshBounds.maxXYZ.x' meshBounds.maxXYZ.y' meshBounds.maxXYZ.z))); " is 146.
Long Statement,MatterHackers.RayTracer,ThumbnailTracer,C:\repos\MatterHackers_MatterControl\CustomWidgets\ThumbnailTracer.cs,GetScreenBounds,The length of the statement  "			screenBounds.ExpandToInclude(trackballTumbleWidget.GetScreenPosition(new Vector3(meshBounds.minXYZ.x' meshBounds.maxXYZ.y' meshBounds.maxXYZ.z))); " is 146.
Long Statement,MatterHackers.RayTracer,BlenderZBuffer,C:\repos\MatterHackers_MatterControl\CustomWidgets\ThumbnailTracer.cs,PixelToColorRGBA_Bytes,The length of the statement  "				return new RGBA_Bytes(buffer[bufferOffset + ImageBuffer.OrderR]' buffer[bufferOffset + ImageBuffer.OrderG]' buffer[bufferOffset + ImageBuffer.OrderB]' buffer[bufferOffset + ImageBuffer.OrderA]); " is 194.
Long Statement,MatterHackers.MatterControl.PrinterCommunication.Io,PauseHandlingStream,C:\repos\MatterHackers_MatterControl\PrinterCommunication\Io\PauseHandlingStream.cs,PauseOnLayer,The length of the statement  "			if (int.TryParse(layer' out layerNumber) && ActiveSliceSettings.Instance.Helpers.LayerToPauseOn().Contains(layerNumber)) " is 120.
Long Statement,MatterHackers.MatterControl.PrinterCommunication.Io,PauseHandlingStream,C:\repos\MatterHackers_MatterControl\PrinterCommunication\Io\PauseHandlingStream.cs,Resume,The length of the statement  "			InjectPauseGCode("G1 X{0:0.###} Y{1:0.###} Z{2:0.###} F{3}".FormatWith(ensureAllAxisAreSent.x' ensureAllAxisAreSent.y' ensureAllAxisAreSent.z' feedRates.x + 1)); " is 161.
Long Statement,MatterHackers.MatterControl.PrinterCommunication.Io,PauseHandlingStream,C:\repos\MatterHackers_MatterControl\PrinterCommunication\Io\PauseHandlingStream.cs,Resume,The length of the statement  "			InjectPauseGCode("G1 X{0:0.###} Y{1:0.###} Z{2:0.###} F{3}".FormatWith(positionBeforeActualPause.x' positionBeforeActualPause.y' positionBeforeActualPause.z' feedRates)); " is 170.
Long Statement,MatterHackers.MatterControl.PrinterCommunication.Io,PauseHandlingStream,C:\repos\MatterHackers_MatterControl\PrinterCommunication\Io\PauseHandlingStream.cs,ReadLine,The length of the statement  "					PrinterConnectionAndCommunication.Instance.CommunicationState = PrinterConnectionAndCommunication.CommunicationStates.Paused; " is 125.
Long Statement,MatterHackers.MatterControl.PrinterCommunication.Io,MaxLengthStream,C:\repos\MatterHackers_MatterControl\PrinterCommunication\Io\MaxLengthStream.cs,ReadLine,The length of the statement  "                    double lengthSquared = Math.Max(deltaToDestination.LengthSquared' deltaToDestination.extrusion * deltaToDestination.extrusion); " is 127.
Long Statement,MatterHackers.MatterControl.PrinterCommunication.Io,PrintLevelingStream,C:\repos\MatterHackers_MatterControl\PrinterCommunication\Io\PrintLevelingStream.cs,RunPrintLevelingTranslations,The length of the statement  "						lineBeingSent = LevelWizard3Point.ApplyLeveling(lineBeingSent' currentDestination.position' PrinterMachineInstruction.MovementTypes.Absolute); " is 142.
Long Statement,MatterHackers.MatterControl.PrinterCommunication.Io,PrintLevelingStream,C:\repos\MatterHackers_MatterControl\PrinterCommunication\Io\PrintLevelingStream.cs,RunPrintLevelingTranslations,The length of the statement  "						lineBeingSent = LevelWizard7PointRadial.ApplyLeveling(lineBeingSent' currentDestination.position' PrinterMachineInstruction.MovementTypes.Absolute); " is 148.
Long Statement,MatterHackers.MatterControl.PrinterCommunication.Io,PrintLevelingStream,C:\repos\MatterHackers_MatterControl\PrinterCommunication\Io\PrintLevelingStream.cs,RunPrintLevelingTranslations,The length of the statement  "						lineBeingSent = LevelWizard13PointRadial.ApplyLeveling(lineBeingSent' currentDestination.position' PrinterMachineInstruction.MovementTypes.Absolute); " is 149.
Long Statement,MatterHackers.MatterControl.PrinterCommunication.Io,PrintRecoveryStream,C:\repos\MatterHackers_MatterControl\PrinterCommunication\Io\PrintRecoveryStream.cs,ReadLine,The length of the statement  "					// We don't know where the printer is for sure (it make have been turned off). Disable leveling until we know where it is. " is 122.
Long Statement,MatterHackers.MatterControl.PrinterCommunication.Io,PrintRecoveryStream,C:\repos\MatterHackers_MatterControl\PrinterCommunication\Io\PrintRecoveryStream.cs,ReadLine,The length of the statement  "						Vector2 recoveryPositionXy = ActiveSliceSettings.Instance.GetValue<Vector2>(SettingsKey.recover_position_before_z_home); " is 120.
Long Statement,MatterHackers.MatterControl.PrinterCommunication.Io,PrintRecoveryStream,C:\repos\MatterHackers_MatterControl\PrinterCommunication\Io\PrintRecoveryStream.cs,ReadLine,The length of the statement  "						queuedCommands.Add("G1 X{0:0.###}Y{1:0.###}F{2}".FormatWith(recoveryPositionXy.x' recoveryPositionXy.y' MovementControls.XSpeed)); " is 130.
Long Statement,MatterHackers.MatterControl.PrinterCommunication.Io,PrintRecoveryStream,C:\repos\MatterHackers_MatterControl\PrinterCommunication\Io\PrintRecoveryStream.cs,ReadLine,The length of the statement  "							queuedCommands.Add(CreateMovementLine(new PrinterMove(new VectorMath.Vector3(recoverPositionXy.x' recoverPositionXy.y' lastDestination.position.z)' 0' MovementControls.ZSpeed))); " is 178.
Long Statement,MatterHackers.MatterControl.PrinterCommunication.Io,PrintRecoveryStream,C:\repos\MatterHackers_MatterControl\PrinterCommunication\Io\PrintRecoveryStream.cs,ReadLine,The length of the statement  "							new Vector3(boundsOfSkippedLayers.Left - extruderWidth*2' boundsOfSkippedLayers.Bottom + boundsOfSkippedLayers.Height / 2' lastDestination.position.z)' " is 151.
Long Statement,MatterHackers.MatterControl.PrintLibrary.Provider,LibraryProviderSelector,C:\repos\MatterHackers_MatterControl\Library\Provider\LibraryProviderSelector.cs,ReloadData,The length of the statement  "			string downloadsDirectory = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile)' "Downloads"); " is 120.
Long Statement,MatterHackers.MatterControl.PrintLibrary.Provider,LibraryProviderSelector,C:\repos\MatterHackers_MatterControl\Library\Provider\LibraryProviderSelector.cs,RenameCollection,The length of the statement  "				LibraryProviderFileSystemCreator fileSystemLibraryCreator = libraryCreators[collectionIndexToRename] as LibraryProviderFileSystemCreator; " is 137.
Long Statement,MatterHackers.MatterControl.PrintLibrary.Provider,LibraryProviderSelector,C:\repos\MatterHackers_MatterControl\Library\Provider\LibraryProviderSelector.cs,AddItem,The length of the statement  "				libraryCreators.Add(new LibraryProviderFileSystemCreator(itemToAdd.FileLocation' Path.GetFileName(itemToAdd.FileLocation))); " is 124.
Long Statement,MatterHackers.MatterControl.PrintLibrary.Provider,LibraryProviderSelector,C:\repos\MatterHackers_MatterControl\Library\Provider\LibraryProviderSelector.cs,GetItemThumbnail,The length of the statement  "			ImageBuffer warningImage = StaticData.Instance.LoadIcon(Path.Combine("FileDialog"' "file.png")' 48' 48).InvertLightness(); " is 122.
Long Statement,MatterHackers.MatterControl.PrintLibrary.Provider,LibraryProviderSelector,C:\repos\MatterHackers_MatterControl\Library\Provider\LibraryProviderSelector.cs,GetPrintItemWrapperAsync,The length of the statement  "			var printItemWrapper = new PrintItemWrapper(new PrintItem(LibraryRowItem.SearchResultsNotAvailableToken' LibraryRowItem.SearchResultsNotAvailableToken)' this.GetProviderLocator()) " is 179.
Long Statement,MatterHackers.MatterControl.PrintLibrary.Provider,LibraryProviderFileSystem,C:\repos\MatterHackers_MatterControl\Library\Provider\LibraryProviderFileSystem.cs,GetPrintItemWrapperAsync,The length of the statement  "			var printItemWrapper = new PrintItemWrapper(new PrintItem(GetPrintItemName(itemIndex)' fileName)' this.GetProviderLocator()) " is 124.
Long Statement,MatterHackers.MatterControl.PrintLibrary.Provider,LibraryProviderFileSystem,C:\repos\MatterHackers_MatterControl\Library\Provider\LibraryProviderFileSystem.cs,GetProviderForCollection,The length of the statement  "			return new LibraryProviderFileSystem(Path.Combine(rootPath' collection.Key)' collection.Name' this' SetCurrentLibraryProvider); " is 127.
Long Statement,MatterHackers.MatterControl.PrintLibrary.Provider,LibraryProviderSQLite,C:\repos\MatterHackers_MatterControl\Library\Provider\LibraryProviderSqlite.cs,EnsureSamplePartsExist,The length of the statement  "			var missingFiles = filenamesToValidate.Where(fileName => !existingLibaryItems.Contains(Path.GetFileNameWithoutExtension(fileName)' StringComparer.OrdinalIgnoreCase)); " is 166.
Long Statement,MatterHackers.MatterControl.PrintLibrary.Provider,LibraryProviderSQLite,C:\repos\MatterHackers_MatterControl\Library\Provider\LibraryProviderSqlite.cs,EnsureSamplePartsExist,The length of the statement  "			// Finally' make sure that we always add at least one item to the queue - ensures that even without printer selection we have some content " is 138.
Long Statement,MatterHackers.MatterControl.PrintLibrary.Provider,LibraryProviderSQLite,C:\repos\MatterHackers_MatterControl\Library\Provider\LibraryProviderSqlite.cs,GetLibraryItems,The length of the statement  "				query = string.Format("SELECT * FROM PrintItem WHERE PrintItemCollectionID = {0} ORDER BY Name ASC;"' baseLibraryCollection.Id); " is 128.
Long Statement,MatterHackers.MatterControl.PrintLibrary.Provider,LibraryProviderSQLite,C:\repos\MatterHackers_MatterControl\Library\Provider\LibraryProviderSqlite.cs,GetLibraryItems,The length of the statement  "				query = string.Format("SELECT * FROM PrintItem WHERE PrintItemCollectionID = {0} AND Name LIKE '%{1}%' ORDER BY Name ASC;"' baseLibraryCollection.Id' keyphrase); " is 161.
Long Statement,MatterHackers.MatterControl.PrintLibrary.Provider,LibraryProviderSQLite,C:\repos\MatterHackers_MatterControl\Library\Provider\LibraryProviderSqlite.cs,GetChildCollections,The length of the statement  "			string query = string.Format("SELECT * FROM PrintItemCollection WHERE ParentCollectionID = {0} ORDER BY Name ASC;"' baseLibraryCollection.Id); " is 142.
Long Statement,MatterHackers.MatterControl.PrintLibrary.Provider,LibraryProviderSQLite,C:\repos\MatterHackers_MatterControl\Library\Provider\LibraryProviderSqlite.cs,GetRootLibraryCollection,The length of the statement  "			PrintItemCollection rootLibraryCollection = Datastore.Instance.dbSQLite.Table<PrintItemCollection>().Where(v => v.Name == "_library").Take(1).FirstOrDefault(); " is 159.
Long Statement,MatterHackers.MatterControl.PrintLibrary.Provider,LibraryProvider,C:\repos\MatterHackers_MatterControl\Library\Provider\LibraryProvider.cs,AddFilesToLibrary,The length of the statement  "						AddItem(new PrintItemWrapper(new PrintItem(Path.GetFileNameWithoutExtension(loadedFileName)' loadedFileName)' this.GetProviderLocator())); " is 138.
Long Statement,MatterHackers.MatterControl.PrintLibrary.Provider,LibraryProvider,C:\repos\MatterHackers_MatterControl\Library\Provider\LibraryProvider.cs,GetItemThumbnail,The length of the statement  "			return new PartThumbnailWidget(printItemWrapper' "part_icon_transparent_40x40.png"' "building_thumbnail_40x40.png"' PartThumbnailWidget.ImageSizes.Size50x50); " is 158.
Long Statement,MatterHackers.MatterControl.SettingsManagement,OemSettings,C:\repos\MatterHackers_MatterControl\SettingsManagement\OemSettings.cs,LoadOemProfiles,The length of the statement  "			string json = File.Exists(cachePath) ? File.ReadAllText(cachePath) : StaticData.Instance.ReadAllText(Path.Combine("Profiles"' "oemprofiles.json")); " is 147.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,DebugBvh,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\DebugBvh.cs,RenderLine,The length of the statement  "			Matrix4X4 rotateTransform = Matrix4X4.CreateRotation(new Quaternion(Vector3.UnitX + new Vector3(.0001' -.00001' .00002)' delta.GetNormal())); " is 141.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,ScaleControls,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\SideBar\ScaleControls.cs,CreateAxisScalingControl,The length of the statement  "					sizeDisplay[axisIndex].SetDisplayString("{0:0.00}".FormatWith(view3DWidget.SelectedMeshGroup.GetAxisAlignedBoundingBox().Size[axisIndex])); " is 139.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,ScaleControls,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\SideBar\ScaleControls.cs,ScaleAxis,The length of the statement  "			view3DWidget.SelectedMeshGroupTransform = PlatingHelper.ApplyAtCenter(view3DWidget.SelectedMeshGroup' view3DWidget.SelectedMeshGroupTransform' totalScale); " is 155.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,ScaleControls,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\SideBar\ScaleControls.cs,ScaleAxis,The length of the statement  "			AxisAlignedBoundingBox scaledBounds = view3DWidget.SelectedMeshGroup.GetAxisAlignedBoundingBox(view3DWidget.SelectedMeshGroupTransform); " is 136.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,ScaleControls,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\SideBar\ScaleControls.cs,ScaleAxis,The length of the statement  "			PlatingHelper.PlaceMeshAtHeight(view3DWidget.MeshGroups' view3DWidget.MeshGroupTransforms' view3DWidget.SelectedMeshGroupIndex' scaledBounds.minXYZ.z); " is 151.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,ScaleControls,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\SideBar\ScaleControls.cs,ScaleAxis,The length of the statement  "			PlatingHelper.PlaceMeshGroupOnBed(view3DWidget.MeshGroups' view3DWidget.MeshGroupTransforms' view3DWidget.SelectedMeshGroupIndex); " is 130.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,ScaleControls,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\SideBar\ScaleControls.cs,SetNewModelSize,The length of the statement  "				AxisAlignedBoundingBox originalMeshBounds = view3DWidget.SelectedMeshGroup.GetAxisAlignedBoundingBox(view3DWidget.SelectedMeshGroupTransform); " is 142.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,ScaleControls,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\SideBar\ScaleControls.cs,OnSelectedTransformChanged,The length of the statement  "				AxisAlignedBoundingBox bounds = view3DWidget.SelectedMeshGroup.GetAxisAlignedBoundingBox(view3DWidget.SelectedMeshGroupTransform); " is 130.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,ScaleControls,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\SideBar\ScaleControls.cs,OnSelectedTransformChanged,The length of the statement  "				AxisAlignedBoundingBox scaledBounds = view3DWidget.SelectedMeshGroup.GetAxisAlignedBoundingBox(view3DWidget.SelectedMeshGroupTransform); " is 136.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,HeightValueDisplay,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\Gui3D\HeightValueDisplay.cs,MeshViewerToDrawWith_Draw,The length of the statement  "								startLineGroundPos = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(bottomPoints[i] + new Vector3(0' 0' -bottomPoints[i].z)); " is 139.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,HeightValueDisplay,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\Gui3D\HeightValueDisplay.cs,MeshViewerToDrawWith_Draw,The length of the statement  "								midLinePos = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(bottomPoints[i] + new Vector3(0' 0' -bottomPoints[i].z/2)); " is 133.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,HeightValueDisplay,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\Gui3D\HeightValueDisplay.cs,MeshViewerToDrawWith_Draw,The length of the statement  "						drawEvent.graphics2D.Line(startLineGroundPos.x' yGround' startLineGroundPos.x + HorizontalLineLength - 5' yGround' RGBA_Bytes.Black); " is 133.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,HeightValueDisplay,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\Gui3D\HeightValueDisplay.cs,MeshViewerToDrawWith_Draw,The length of the statement  "						drawEvent.graphics2D.Line(startLineSelectionPos.x' ySelection' startLineSelectionPos.x + HorizontalLineLength - 5' ySelection' RGBA_Bytes.Black); " is 145.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,HeightValueDisplay,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\Gui3D\HeightValueDisplay.cs,MeshViewerToDrawWith_Draw,The length of the statement  "						InteractionVolume.DrawMeasureLine(drawEvent.graphics2D' pointerBottom' pointerTop' RGBA_Bytes.Black' InteractionVolume.LineArrows.End); " is 135.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,SnappingIndicators,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\Gui3D\SnapingIndicator.cs,SetPosition,The length of the statement  "							double distBetweenPixelsWorldSpace = MeshViewerToDrawWith.TrackballTumbleWidget.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint); " is 131.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,SnappingIndicators,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\Gui3D\SnapingIndicator.cs,SetPosition,The length of the statement  "							lines[0] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0)); " is 148.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,SnappingIndicators,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\Gui3D\SnapingIndicator.cs,SetPosition,The length of the statement  "							lines[1] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0)); " is 163.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,SnappingIndicators,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\Gui3D\SnapingIndicator.cs,SetPosition,The length of the statement  "							lines[2] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0)); " is 148.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,SnappingIndicators,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\Gui3D\SnapingIndicator.cs,SetPosition,The length of the statement  "							lines[3] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0)); " is 163.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,SnappingIndicators,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\Gui3D\SnapingIndicator.cs,SetPosition,The length of the statement  "							double distBetweenPixelsWorldSpace = MeshViewerToDrawWith.TrackballTumbleWidget.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint); " is 131.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,SnappingIndicators,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\Gui3D\SnapingIndicator.cs,SetPosition,The length of the statement  "							lines[0] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0)); " is 148.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,SnappingIndicators,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\Gui3D\SnapingIndicator.cs,SetPosition,The length of the statement  "							lines[1] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0)); " is 163.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,SnappingIndicators,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\Gui3D\SnapingIndicator.cs,SetPosition,The length of the statement  "							lines[2] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0)); " is 148.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,SnappingIndicators,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\Gui3D\SnapingIndicator.cs,SetPosition,The length of the statement  "							lines[3] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0)); " is 163.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,SnappingIndicators,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\Gui3D\SnapingIndicator.cs,SetPosition,The length of the statement  "							double distBetweenPixelsWorldSpace = MeshViewerToDrawWith.TrackballTumbleWidget.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint); " is 131.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,SnappingIndicators,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\Gui3D\SnapingIndicator.cs,SetPosition,The length of the statement  "							lines[0] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0)); " is 148.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,SnappingIndicators,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\Gui3D\SnapingIndicator.cs,SetPosition,The length of the statement  "							lines[1] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0)); " is 163.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,SnappingIndicators,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\Gui3D\SnapingIndicator.cs,SetPosition,The length of the statement  "							lines[2] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0)); " is 148.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,SnappingIndicators,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\Gui3D\SnapingIndicator.cs,SetPosition,The length of the statement  "							lines[3] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0)); " is 163.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,SnappingIndicators,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\Gui3D\SnapingIndicator.cs,SetPosition,The length of the statement  "							double distBetweenPixelsWorldSpace = MeshViewerToDrawWith.TrackballTumbleWidget.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint); " is 131.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,SnappingIndicators,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\Gui3D\SnapingIndicator.cs,SetPosition,The length of the statement  "							lines[0] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0)); " is 148.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,SnappingIndicators,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\Gui3D\SnapingIndicator.cs,SetPosition,The length of the statement  "							lines[1] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0)); " is 163.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,SnappingIndicators,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\Gui3D\SnapingIndicator.cs,SetPosition,The length of the statement  "							lines[2] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0)); " is 148.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,SnappingIndicators,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\Gui3D\SnapingIndicator.cs,SetPosition,The length of the statement  "							lines[3] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0)); " is 163.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,UpArrow3D,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\Gui3D\UpArrow3D.cs,SetPosition,The length of the statement  "			double distBetweenPixelsWorldSpace = MeshViewerToDrawWith.TrackballTumbleWidget.GetWorldUnitsPerScreenPixelAtPosition(centerTop); " is 129.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,UpArrow3D,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\Gui3D\UpArrow3D.cs,SetPosition,The length of the statement  "			Matrix4X4 arrowTransform = Matrix4X4.CreateTranslation(new Vector3(centerTop.x' centerTop.y' centerTop.z + 20 * distBetweenPixelsWorldSpace)); " is 142.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,CreateSelectionData,The length of the statement  "				PlatingHelper.CreateITraceableForMeshGroup(asyncPlatingDatas' asyncMeshGroups' i' (double progress0To1' string processingState' out bool continueProcessing) => " is 159.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,EnterEditAndCreateSelectionData,The length of the statement  "							}' PartsNotPrintableMessage' PartsNotPrintableTitle' StyledMessageBox.MessageType.YES_NO' "Center on Bed".Localize()' "Cancel".Localize()); " is 139.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,AlignSelected,The length of the statement  "			AxisAlignedBoundingBox selectedCurrentBounds = asyncMeshGroups[SelectedMeshGroupIndex].GetAxisAlignedBoundingBox(asyncMeshGroupTransforms[SelectedMeshGroupIndex]); " is 163.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,AlignSelected,The length of the statement  "					AxisAlignedBoundingBox groupToMoveBounds = meshGroupToMove.GetAxisAlignedBoundingBox(asyncMeshGroupTransforms[meshGroupToMoveIndex]); " is 133.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,AlignSelected,The length of the statement  "				PlatingHelper.CreateITraceableForMeshGroup(asyncPlatingDatas' asyncMeshGroups' i' (double progress0To1' string processingState' out bool continueProcessing) => " is 159.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,AutoArrangePartsInBackground,The length of the statement  "					asyncMeshGroupTransforms[i] *= Matrix4X4.CreateTranslation(new Vector3(ActiveSliceSettings.Instance.GetValue<Vector2>(SettingsKey.print_center)' 0)); " is 149.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,CopyGroup,The length of the statement  "			PlatingHelper.FindPositionForGroupAndAddToPlate(copyMeshGroup' SelectedMeshGroupTransform' asyncPlatingDatas' asyncMeshGroups' asyncMeshGroupTransforms); " is 153.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,GroupSelected,The length of the statement  "				PlatingHelper.CreateITraceableForMeshGroup(asyncPlatingDatas' asyncMeshGroups' i' (double progress0To1' string processingState' out bool continueProcessing) => " is 159.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,UngroupSelected,The length of the statement  "				discreetMeshes = CreateDiscreteMeshes.SplitConnectedIntoMeshes(asyncMeshGroups[indexBeingReplaced]' (double progress0To1' string processingState' out bool continueProcessing) => " is 177.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,UngroupSelected,The length of the statement  "				PlatingHelper.CreateITraceableForMeshGroup(asyncPlatingDatas' asyncMeshGroups' addedMeshIndex' (double progress0To1' string processingState' out bool continueProcessing) => " is 172.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,OnMouseMove,The length of the statement  "			if (meshViewerWidget.TrackballTumbleWidget.TransformState == TrackBallController.MouseDownType.None && CurrentSelectInfo.DownOnPart) " is 132.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,OnMouseMove,The length of the statement  "				Vector2 meshViewerWidgetScreenPosition = meshViewerWidget.TransformFromParentSpace(this' new Vector2(mouseEvent.X' mouseEvent.Y)); " is 130.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,AddMaterialControls,The length of the statement  "			for (int extruderIndex = 0; extruderIndex < ActiveSliceSettings.Instance.GetValue<int>(SettingsKey.extruder_count); extruderIndex++) " is 132.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,AddRotateControls,The length of the statement  "			MHNumberEdit degreesControl = new MHNumberEdit(45' pixelWidth: 40' allowNegatives: true' allowDecimals: true' increment: 5' minValue: -360' maxValue: 360); " is 155.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,AddRotateControls,The length of the statement  "			TextWidget centeredX = new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor); centeredX.Margin = new BorderDouble(3' 0' 0' 0); centeredX.AnchorCenter(); rotateXButton.AddChild(centeredX); " is 218.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,AddRotateControls,The length of the statement  "			TextWidget centeredY = new TextWidget("Y"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor); centeredY.Margin = new BorderDouble(3' 0' 0' 0); centeredY.AnchorCenter(); rotateYButton.AddChild(centeredY); " is 218.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,AddRotateControls,The length of the statement  "			TextWidget centeredZ = new TextWidget("Z"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor); centeredZ.Margin = new BorderDouble(3' 0' 0' 0); centeredZ.AnchorCenter(); rotateZButton.AddChild(centeredZ); " is 218.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,CreateRenderTypeRadioButtons,The length of the statement  "				RadioButton renderTypeOutlines = new RadioButton("Outlines".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor); " is 122.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,CreateRenderTypeRadioButtons,The length of the statement  "				RadioButton renderTypePolygons = new RadioButton("Polygons".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor); " is 122.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,CreateRightButtonPanel,The length of the statement  "							CheckBox showBuildVolumeCheckBox = new CheckBox("Show Print Area".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor); " is 128.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,loadAndAddPartsToPlate,The length of the statement  "					List<MeshGroup> loadedMeshGroups = MeshFileIo.Load(Path.GetFullPath(loadedFileName)' (double progress0To1' string processingState' out bool continueProcessing) => " is 162.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,loadAndAddPartsToPlate,The length of the statement  "							PlatingHelper.FindPositionForGroupAndAddToPlate(meshGroup' Matrix4X4.Identity' asyncPlatingDatas' asyncMeshGroups' asyncMeshGroupTransforms); " is 141.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,loadAndAddPartsToPlate,The length of the statement  "							PlatingHelper.CreateITraceableForMeshGroup(asyncPlatingDatas' asyncMeshGroups' asyncMeshGroups.Count - 1' (double progress0To1' string processingState' out bool continueProcessing) => " is 183.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,MakeLowestFaceFlat,The length of the statement  "				SelectedMeshGroupTransform = PlatingHelper.ApplyAtCenter(SelectedMeshGroup' SelectedMeshGroupTransform' partLevelMatrix); " is 121.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,MergeAndSavePartsDoWork,The length of the statement  "						// Drop bracketed number sections from our source filename to ensure we don't generate something like "file (1) (1).amf" " is 120.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,PartsAreInPrintVolume,The length of the statement  "				RectangleDouble bedRect = new RectangleDouble(0' 0' ActiveSliceSettings.Instance.GetValue<Vector2>(SettingsKey.bed_size).x' ActiveSliceSettings.Instance.GetValue<Vector2>(SettingsKey.bed_size).y); " is 196.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,PartsAreInPrintVolume,The length of the statement  "				bedRect.Offset(ActiveSliceSettings.Instance.GetValue<Vector2>(SettingsKey.print_center) - ActiveSliceSettings.Instance.GetValue<Vector2>(SettingsKey.bed_size) / 2); " is 164.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,MirrorControls,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\SideBar\MirrorControls.cs,MirrorOnAxis,The length of the statement  "			view3DWidget.SelectedMeshGroupTransform = PlatingHelper.ApplyAtCenter(view3DWidget.SelectedMeshGroup' view3DWidget.SelectedMeshGroupTransform' Matrix4X4.CreateScale(mirorAxis)); " is 177.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewControls3D.cs,SetMeshViewerDisplayTheme,The length of the statement  "			meshViewerWidget.BuildVolumeColor = new RGBA_Bytes(ActiveTheme.Instance.PrimaryAccentColor.Red0To255' ActiveTheme.Instance.PrimaryAccentColor.Green0To255' ActiveTheme.Instance.PrimaryAccentColor.Blue0To255' 50); " is 211.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,PartPreview3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\BaseClasses\PartPreview3DWidget.cs,RecreateBed,The length of the statement  "							meshViewerWidget.MeshGroupTransforms[i] = Matrix4X4.CreateTranslation(-boundsCenter + new Vector3(0' 0' bounds.ZSize / 2) + new Vector3(bedCenter)); " is 148.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,PartPreview3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\BaseClasses\PartPreview3DWidget.cs,PutOemImageOnBed,The length of the statement  "				bedGraphics.Render(wattermarkImage' new Vector2((bedImage.Width - wattermarkImage.Width) / 2' (bedImage.Height - wattermarkImage.Height) / 2)); " is 143.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeWidget.cs,DoPostLoadInitialization,The length of the statement  "				gCodeRenderer.GCodeFileToDraw?.GetFilamentUsedMm(ActiveSliceSettings.Instance.GetValue<double>(SettingsKey.filament_diameter)); " is 127.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeWidget.cs,OnDraw,The length of the statement  "					GCodeRenderInfo renderInfo = new GCodeRenderInfo(activeLayerIndex' activeLayerIndex' transform' layerScale' CreateRenderInfo()' " is 127.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeWidget.cs,OnDraw,The length of the statement  "						new Vector2[] { ActiveSliceSettings.Instance.Helpers.ExtruderOffset(0)' ActiveSliceSettings.Instance.Helpers.ExtruderOffset(1) }); " is 130.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,CheckSettingChanged,The length of the statement  "					viewerVolume = new Vector3(ActiveSliceSettings.Instance.GetValue<Vector2>(SettingsKey.bed_size)' ActiveSliceSettings.Instance.GetValue<double>(SettingsKey.build_height)); " is 170.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,TrackballTumbleWidget_DrawGlContent,The length of the statement  "				new Vector2[] { ActiveSliceSettings.Instance.Helpers.ExtruderOffset(0)' ActiveSliceSettings.Instance.Helpers.ExtruderOffset(1) }); " is 130.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,AddModelInfo,The length of the statement  "			modelInfoContainer.AddChild(new TextWidget(printTimeLabelFull' textColor: ActiveTheme.Instance.PrimaryTextColor' pointSize: 9)); " is 128.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,AddModelInfo,The length of the statement  "				GuiWidget estimatedPrintTime = new TextWidget(string.Format("{0}"' timeRemainingText)' textColor: ActiveTheme.Instance.PrimaryTextColor' pointSize: 14); " is 152.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,AddModelInfo,The length of the statement  "			modelInfoContainer.AddChild(new TextWidget(filamentLengthLabelFull' textColor: ActiveTheme.Instance.PrimaryTextColor' pointSize: 9)); " is 133.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,AddModelInfo,The length of the statement  "				double filamentUsed = gcodeViewWidget.LoadedGCode.GetFilamentUsedMm(ActiveSliceSettings.Instance.GetValue<double>(SettingsKey.filament_diameter)); " is 146.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,AddModelInfo,The length of the statement  "				GuiWidget estimatedPrintTime = new TextWidget(string.Format("{0:0.0} mm"' filamentUsed)' pointSize: 14' textColor: ActiveTheme.Instance.PrimaryTextColor); " is 154.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,AddModelInfo,The length of the statement  "			modelInfoContainer.AddChild(new TextWidget(filamentVolumeLabelFull' textColor: ActiveTheme.Instance.PrimaryTextColor' pointSize: 9)); " is 133.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,AddModelInfo,The length of the statement  "				double filamentMm3 = gcodeViewWidget.LoadedGCode.GetFilamentCubicMm(ActiveSliceSettings.Instance.GetValue<double>(SettingsKey.filament_diameter)); " is 146.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,AddModelInfo,The length of the statement  "				GuiWidget estimatedPrintTime = new TextWidget(string.Format("{0:0.00} cm³"' filamentMm3 / 1000)' pointSize: 14' textColor: ActiveTheme.Instance.PrimaryTextColor); " is 162.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,AddModelInfo,The length of the statement  "			PrinterConnectionAndCommunication.Instance.CommunicationStateChanged.RegisterEvent(HookUpGCodeMessagesWhenDonePrinting' ref unregisterEvents); " is 142.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,GetEstimatedMassInfo,The length of the statement  "			estimatedMassInfo.AddChild(new TextWidget(massLabelFull' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor)); " is 122.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,GetEstimatedCostInfo,The length of the statement  "			estimatedCostInfo.AddChild(new TextWidget(costLabelFull' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor)); " is 122.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,AddDisplayControls,The length of the statement  "                CheckBox transparentExtrusion = new CheckBox("Transparent".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor) " is 120.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,AddDisplayControls,The length of the statement  "					PrinterConnectionAndCommunication.Instance.CommunicationStateChanged.RegisterEvent(HookUpGCodeMessagesWhenDonePrinting' ref unregisterEvents); " is 142.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,SetSyncToPrintVisibility,The length of the statement  "				bool printerIsRunningPrint = PrinterConnectionAndCommunication.Instance.PrinterIsPaused || PrinterConnectionAndCommunication.Instance.PrinterIsPrinting; " is 152.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,HookUpGCodeMessagesWhenDonePrinting,The length of the statement  "			if (!PrinterConnectionAndCommunication.Instance.PrinterIsPaused && !PrinterConnectionAndCommunication.Instance.PrinterIsPrinting) " is 129.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,OnDraw,The length of the statement  "			bool printerIsRunningPrint = PrinterConnectionAndCommunication.Instance.PrinterIsPaused || PrinterConnectionAndCommunication.Instance.PrinterIsPrinting; " is 152.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,DoneLoadingGCode,The length of the statement  "				// If we have finished loading the gcode and the source file exists but we don't have any loaded gcode it is because the loader decided to not load it. " is 151.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,DoneLoadingGCode,The length of the statement  "				selectLayerSlider = new SolidSlider(new Vector2()' sliderWidth' 0' gcodeViewWidget.LoadedGCode.NumChangesInZ - 1' Orientation.Vertical); " is 136.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,DoGenerateButton_Click,The length of the statement  "				StyledMessageBox.ShowMessageBox(null' "Oops! Please select a printer in order to continue slicing."' "Select Printer"' StyledMessageBox.MessageType.OK); " is 152.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,LayerNavigationWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,OnDraw,The length of the statement  "				layerCountTextWidget.Text = string.Format("{0} / {1}"' gcodeViewWidget.ActiveLayerIndex + 1' gcodeViewWidget.LoadedGCode.NumChangesInZ.ToString()); " is 147.
Long Statement,MatterHackers.MatterControl.PrinterControls,MovementControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\MovementControls.cs,GetHWDestinationBar,The length of the statement  "			TextWidget xPosition = new TextWidget("X: 0.0           "' pointSize: 12' textColor: ActiveTheme.Instance.PrimaryTextColor); " is 124.
Long Statement,MatterHackers.MatterControl.PrinterControls,MovementControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\MovementControls.cs,GetHWDestinationBar,The length of the statement  "			TextWidget yPosition = new TextWidget("Y: 0.0           "' pointSize: 12' textColor: ActiveTheme.Instance.PrimaryTextColor); " is 124.
Long Statement,MatterHackers.MatterControl.PrinterControls,MovementControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\MovementControls.cs,GetHWDestinationBar,The length of the statement  "			TextWidget zPosition = new TextWidget("Z: 0.0           "' pointSize: 12' textColor: ActiveTheme.Instance.PrimaryTextColor); " is 124.
Long Statement,MatterHackers.MatterControl.PrinterControls,ZTuningWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\MovementControls.cs,OffsetStreamChanged,The length of the statement  "			zOffsetStreamContainer.BackgroundColor = (allowRemoveButton && hasOverriddenZOffset) ? SliceSettingsWidget.userSettingBackgroundColor : ActiveTheme.Instance.SecondaryBackgroundColor; " is 182.
Long Statement,MatterHackers.MatterControl.PrinterControls,PowerControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\PowerControls.cs,UpdateControlVisibility,The length of the statement  "			this.SetEnableLevel(PrinterConnectionAndCommunication.Instance.PrinterIsConnected ? EnableLevel.Enabled : EnableLevel.Disabled); " is 128.
Long Statement,MatterHackers.MatterControl.PrinterControls,RunningMacroPage,C:\repos\MatterHackers_MatterControl\ConfigurationPage\RunningMacroPage.cs,CountDownTime,The length of the statement  "			progressBar.RatioComplete = timeToWaitMs == 0 ? 1 : Math.Max(0' Math.Min(1' ((double)timeSinceStartMs / (double)timeToWaitMs))); " is 128.
Long Statement,MatterHackers.MatterControl.PrinterControls,MacroControlsWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\MacroControls.cs,GetMacroButtonContainer,The length of the statement  "			TextWidget noMacrosFound = new TextWidget("No macros are currently set up for this printer.".Localize()' pointSize: 10); " is 120.
Long Statement,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortManual,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepComPortManual.cs,createComPortContainer,The length of the statement  "			printerComPortHelpMessage = new TextWidget("The 'Serial Port' section lists all available serial\nports on your device. Changing which USB port the printer\nis conneted to may change the associated serial port.\n\nTip: If you are uncertain' unplug/plug in your printer\nand hit refresh. The new port that appears should be\nyour printer.".Localize()' 0' 0' 10); " is 361.
Long Statement,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortManual,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepComPortManual.cs,onPrinterStatusChanged,The length of the statement  "			else if (PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect) " is 148.
Long Statement,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortTwo,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepComPortTwo.cs,onPrinterStatusChanged,The length of the statement  "			else if (PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect) " is 148.
Long Statement,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortOne,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepComPortOne.cs,createPrinterConnectionMessageContainer,The length of the statement  "			TextWidget printerMessageOne = new TextWidget("MatterControl will now attempt to auto-detect printer.".Localize()' 0' 0' 10); " is 125.
Long Statement,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortOne,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepComPortOne.cs,createPrinterConnectionMessageContainer,The length of the statement  "			string setupManualConfigurationOrSkipConnectionTextFull = String.Format("{0}:"' setupManualConfigurationOrSkipConnectionText); " is 126.
Long Statement,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortOne,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepComPortOne.cs,createPrinterConnectionMessageContainer,The length of the statement  "			TextWidget setupManualConfigurationOrSkipConnectionWidget = new TextWidget(setupManualConfigurationOrSkipConnectionTextFull' 0' 0' 10); " is 135.
Long Statement,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepMakeModelName,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepMakeModelName.cs,ManufacturerDropList_SelectionChanged,The length of the statement  "			printerModelSelector.ListSource = printers.OrderBy(p => p.Key).Select(p => new KeyValuePair<string' string>(p.Key' p.Value.ProfileToken)).ToList(); " is 147.
Long Statement,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepBaudRate,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepBaudRate.cs,createPrinterBaudRateContainer,The length of the statement  "			printerBaudRateHelpMessage = new TextWidget("The term 'Baud Rate' roughly means the speed at which\ndata is transmitted.  Baud rates may differ from printer to\nprinter. Refer to your printer manual for more info.\n\nTip: If you are uncertain - try 250000.".Localize()' 0' 0' 10); " is 280.
Long Statement,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepInstallDriver,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepInstallDriver.cs,GetPrintDrivers,The length of the statement  "							// TODO: It's really unexpected that the driver gets copied to the temp folder every time a printer is setup. I'd think this only needs " is 135.
Long Statement,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepInstallDriver,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepInstallDriver.cs,GetPrintDrivers,The length of the statement  "								string destTempPath = Path.GetFullPath(Path.Combine(ApplicationDataStorage.ApplicationUserDataPath' "data"' "temp"' "inf"' pathForInf)); " is 136.
Long Statement,MatterHackers.MatterControl.PrinterControls.PrinterConnections,ActionLink,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\BaseConnectionWidget.cs,OnDraw,The length of the statement  "				RectangleDouble underline = new RectangleDouble(LocalBounds.Left' LocalBounds.Bottom' LocalBounds.Right' LocalBounds.Bottom); " is 125.
Long Statement,MatterHackers.MatterControl.PrintHistory,PrintRecovery,C:\repos\MatterHackers_MatterControl\History\PrintHistoryData.cs,CheckIfNeedToRecoverPrint,The length of the statement  "			string printRecoveryWarningMessage = "WARNING: In order to perform print recovery' your printer must move down to reach its home position.\nIf your print is too large' part of your printer may collide with it when moving down.\nMake sure it is safe to perform this operation before proceeding.".Localize(); " is 306.
Long Statement,MatterHackers.MatterControl.PrintHistory,PrintRecovery,C:\repos\MatterHackers_MatterControl\History\PrintHistoryData.cs,CheckIfNeedToRecoverPrint,The length of the statement  "			string printRecoveryMessage = "It appears your last print failed to complete.\n\nWould your like to attempt to recover from the last know position?".Localize(); " is 160.
Long Statement,MatterHackers.MatterControl.PrintHistory,PrintRecovery,C:\repos\MatterHackers_MatterControl\History\PrintHistoryData.cs,CheckIfNeedToRecoverPrint,The length of the statement  "						StyledMessageBox.ShowMessageBox(RecoverPrintProcessDialogResponse' printRecoveryMessage' recoverPrintTitle' StyledMessageBox.MessageType.YES_NO' recoverPrint' cancelRecovery); " is 175.
Long Statement,MatterHackers.MatterControl.PrintHistory,PrintRecovery,C:\repos\MatterHackers_MatterControl\History\PrintHistoryData.cs,CheckIfNeedToRecoverPrint,The length of the statement  "						StyledMessageBox.ShowMessageBox(RecoverPrintProcessDialogResponse' printRecoveryMessage + "\n\n" + printRecoveryWarningMessage' recoverPrintTitle' StyledMessageBox.MessageType.YES_NO' recoverPrint' cancelRecovery); " is 214.
Long Statement,MatterHackers.MatterControl.PrintHistory,PrintRecovery,C:\repos\MatterHackers_MatterControl\History\PrintHistoryData.cs,RecoverPrintProcessDialogResponse,The length of the statement  "					if (PrinterConnectionAndCommunication.Instance.CommunicationState == PrinterConnectionAndCommunication.CommunicationStates.Connected) " is 133.
Long Statement,MatterHackers.MatterControl.PrintHistory,PrintRecovery,C:\repos\MatterHackers_MatterControl\History\PrintHistoryData.cs,RecoverPrintProcessDialogResponse,The length of the statement  "						PrinterConnectionAndCommunication.Instance.CommunicationState = PrinterConnectionAndCommunication.CommunicationStates.PreparingToPrint; " is 135.
Long Statement,MatterHackers.MatterControl.PrintHistory,PrintHistoryData,C:\repos\MatterHackers_MatterControl\History\PrintHistoryData.cs,GetHistoryItems,The length of the statement  "				query = string.Format("SELECT * FROM PrintTask WHERE PrintComplete = 1 ORDER BY PrintStart DESC LIMIT {0};"' recordCount); " is 122.
Long Statement,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,C:\repos\MatterHackers_MatterControl\History\PrintHistoryListItem.cs,AddChildElements,The length of the statement  "						timeIndicator = new TextWidget("{0}hrs {1}min".FormatWith(printTask.PrintTimeMinutes / 60' printTask.PrintTimeMinutes % 60)' pointSize: 12 * pointSizeFactor); " is 158.
Long Statement,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,C:\repos\MatterHackers_MatterControl\History\PrintHistoryListItem.cs,AddChildElements,The length of the statement  "					string startTimeString = printTask.PrintStart.ToString("MMM d yyyy h:mm ") + printTask.PrintStart.ToString("tt").ToLower(); " is 123.
Long Statement,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,C:\repos\MatterHackers_MatterControl\History\PrintHistoryListItem.cs,ViewButton_Click,The length of the statement  "			PrintItem printItem = Datastore.Instance.dbSQLite.Table<PrintItem>().Where(v => v.Id == this.printTask.PrintItemId).Take(1).FirstOrDefault(); " is 141.
Long Statement,MatterHackers.MatterControl.PrintLibrary,LibraryRowItemCollection,C:\repos\MatterHackers_MatterControl\Library\LibraryRowItemCollection.cs,RemoveFromCollection,The length of the statement  "					StyledMessageBox.ShowMessageBox(ProcessDialogResponse' message' collectionNotEmtyTitle' StyledMessageBox.MessageType.YES_NO' deleteNow' doNotDelete); " is 149.
Long Statement,MatterHackers.MatterControl.PrintLibrary,LibraryRowItemPart,C:\repos\MatterHackers_MatterControl\Library\LibraryRowItemPart.cs,AddLoadingProgressBar,The length of the statement  "			processingProgressControl = new ProgressControl("Downloading...".Localize()' RGBA_Bytes.Black' ActiveTheme.Instance.SecondaryAccentColor' (int)(100 * GuiWidget.DeviceScale)' 5' 0) " is 179.
Long Statement,MatterHackers.MatterControl.PrintLibrary,LibraryRowItemPart,C:\repos\MatterHackers_MatterControl\Library\LibraryRowItemPart.cs,MakeCopyForQueue,The length of the statement  "				string errorMessage = string.Format("Unable to duplicate file for queue: {0}\r\n{1}"' printItemToCopy.FileLocation' ex.Message); " is 128.
Long Statement,MatterHackers.MatterControl.PrintLibrary,LibraryRowItemPart,C:\repos\MatterHackers_MatterControl\Library\LibraryRowItemPart.cs,openPartView,The length of the statement  "					StyledMessageBox.ShowMessageBox(null' message' "Item not found"' StyledMessageBox.MessageType.YES_NO' "Remove".Localize()' "Cancel".Localize()); " is 144.
Long Statement,MatterHackers.MatterControl.PrintLibrary,LibraryDataView,C:\repos\MatterHackers_MatterControl\Library\LibraryDataView.cs,AddAllItems,The length of the statement  "					LibraryRowItem queueItem = new LibraryRowItemCollection(parent' provider' -1' this' provider.ParentLibraryProvider' GetThumbnailWidget(provider.ParentLibraryProvider' parent' LibraryProvider.UpFolderImage)' "Back".Localize()); " is 226.
Long Statement,MatterHackers.MatterControl.PrintLibrary,LibraryDataView,C:\repos\MatterHackers_MatterControl\Library\LibraryDataView.cs,AddAllItems,The length of the statement  "					LibraryRowItem queueItem = new LibraryRowItemCollection(item' provider' i' this' null' GetThumbnailWidget(null' item' provider.GetCollectionFolderImage(i))' "Open".Localize()); " is 176.
Long Statement,MatterHackers.MatterControl.PrintLibrary,PrintLibraryWidget,C:\repos\MatterHackers_MatterControl\Library\PrintLibraryWidget.cs,LoadContent,The length of the statement  "				breadCrumbWidget = new FolderBreadCrumbWidget(libraryDataView.SetCurrentLibraryProvider' libraryDataView.CurrentLibraryProvider); " is 129.
Long Statement,MatterHackers.MatterControl.PrintLibrary,PrintLibraryWidget,C:\repos\MatterHackers_MatterControl\Library\PrintLibraryWidget.cs,AddLibraryButtonElements,The length of the statement  "				addToLibraryButton.Enabled = false; // The library selector (the first library selected) is protected so we can't add to it.  " is 124.
Long Statement,MatterHackers.MatterControl.PrintLibrary,PrintLibraryWidget,C:\repos\MatterHackers_MatterControl\Library\PrintLibraryWidget.cs,AddLibraryButtonElements,The length of the statement  "				createFolderButton.Enabled = false; // The library selector (the first library selected) is protected so we can't add to it. " is 124.
Long Statement,MatterHackers.MatterControl.PrintLibrary,PrintLibraryWidget,C:\repos\MatterHackers_MatterControl\Library\PrintLibraryWidget.cs,CreateActionMenuItems,The length of the statement  "			actionMenuEnableData.Add(new MenuEnableData(actionMenu.AddItem(menuItems[menuItems.Count - 1].Title)' false' false' true)); " is 123.
Long Statement,MatterHackers.MatterControl.PrintLibrary,PrintLibraryWidget,C:\repos\MatterHackers_MatterControl\Library\PrintLibraryWidget.cs,CreateActionMenuItems,The length of the statement  "			//actionMenuEnableData.Add(new MenuEnableData(actionMenu.AddItem(menuItems[menuItems.Count - 1].Title)' true' false' true)); " is 124.
Long Statement,MatterHackers.MatterControl.PrintLibrary,PrintLibraryWidget,C:\repos\MatterHackers_MatterControl\Library\PrintLibraryWidget.cs,deleteFromLibraryButton_Click,The length of the statement  "				// If all selected items are LibraryRowItemParts' then we can invoke the batch remove functionality (in the Cloud library scenario) " is 131.
Long Statement,MatterHackers.MatterControl.PrintLibrary,PrintLibraryWidget,C:\repos\MatterHackers_MatterControl\Library\PrintLibraryWidget.cs,moveInLibraryButton_Click,The length of the statement  "				// If all selected items are LibraryRowItemParts' then we can invoke the batch remove functionality (in the Cloud library scenario) " is 131.
Long Statement,MatterHackers.MatterControl.PrintLibrary,PrintLibraryWidget,C:\repos\MatterHackers_MatterControl\Library\PrintLibraryWidget.cs,importToLibraryloadFile_ClickOnIdle,The length of the statement  "			OpenFileDialogParams openParams = new OpenFileDialogParams(ApplicationSettings.OpenPrintableFileParams' multiSelect: true); " is 123.
Long Statement,MatterHackers.MatterControl.SetupWizard,PrinterProfileHistoryPage,C:\repos\MatterHackers_MatterControl\SetupWizard\PrinterProfileHistoryPage.cs,LoadHistoryItems,The length of the statement  "					topToBottomStuff.AddChild(new TextWidget(RelativeTime.BlockDescriptions[group.Key]' textColor: ActiveTheme.Instance.PrimaryTextColor) " is 133.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,ProfileManager,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\ProfileManager.cs,GetProfilesDirectoryForUser,The length of the statement  "			string userProfilesDirectory = Path.Combine(ApplicationDataStorage.ApplicationUserDataPath' "Profiles"' userAndEnvName); " is 120.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsDetailControl,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsDetailControl.cs,GetSliceOptionsMenuDropList,The length of the statement  "			sliceOptionsMenuDropList.AddItem("Export".Localize()).Selected += (s' e) => { WizardWindow.Show<ExportSettingsPage>("ExportSettingsPage"' "Export Settings"); }; " is 160.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsDetailControl,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsDetailControl.cs,GetSliceOptionsMenuDropList,The length of the statement  "			settingsHistory.Selected += (s' e) => { WizardWindow.Show<PrinterProfileHistoryPage>("PrinterProfileHistory"' "Restore Settings"); }; " is 133.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsDetailControl,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsDetailControl.cs,GetSliceOptionsMenuDropList,The length of the statement  "			sliceOptionsMenuDropList.AddItem("Reset to Defaults".Localize()).Selected += (s' e) => { UiThread.RunOnIdle(ResetToDefaults); }; " is 128.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,ActiveSliceSettings,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\ActiveSliceSettings.cs,RefreshActiveInstance,The length of the statement  "			bool themeChanged = activeInstance.GetValue(SettingsKey.active_theme_name) != updatedProfile.GetValue(SettingsKey.active_theme_name); " is 133.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,PrinterSettings,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\PrinterSettings.cs,WarnAboutRevert,The length of the statement  "					}' String.Format("The profile you are attempting to load has been corrupted. We loaded your last usable {0} {1} profile from your recent profile history instead.".Localize()' profile.Make' profile.Model)' "Recovered printer profile".Localize()' messageType: StyledMessageBox.MessageType.OK); " is 291.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,PrinterSettings,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\PrinterSettings.cs,IsValid,The length of the statement  "					string details = string.Format("Layer Height = {0}\nNozzle Diameter = {1}".Localize()' GetValue<double>(SettingsKey.layer_height)' GetValue<double>(SettingsKey.nozzle_diameter)); " is 178.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,PrinterSettings,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\PrinterSettings.cs,IsValid,The length of the statement  "					StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize()); " is 126.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,PrinterSettings,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\PrinterSettings.cs,IsValid,The length of the statement  "					string details = string.Format("First Layer Height = {0}\nNozzle Diameter = {1}".Localize()' GetValue<double>(SettingsKey.first_layer_height)' GetValue<double>(SettingsKey.nozzle_diameter)); " is 190.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,PrinterSettings,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\PrinterSettings.cs,IsValid,The length of the statement  "					StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize()); " is 126.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,PrinterSettings,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\PrinterSettings.cs,IsValid,The length of the statement  "					string location = "Location: 'Settings & Controls' -> 'Settings' -> 'Printer' -> 'Print Recovery' -> 'Enable Recovery'".Localize(); " is 131.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,PrinterSettings,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\PrinterSettings.cs,IsValid,The length of the statement  "							string details = "Your Start G-Code should not contain a G29 if you are planning on using Print Recovery. Change your start G-Code or turn off Print Recovery".Localize(); " is 170.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,PrinterSettings,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\PrinterSettings.cs,IsValid,The length of the statement  "							StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize()); " is 126.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,PrinterSettings,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\PrinterSettings.cs,IsValid,The length of the statement  "							string details = "Your Start G-Code should not contain a G30 if you are planning on using Print Recovery. Change your start G-Code or turn off Print Recovery".Localize(); " is 170.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,PrinterSettings,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\PrinterSettings.cs,IsValid,The length of the statement  "							StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize()); " is 126.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,PrinterSettings,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\PrinterSettings.cs,IsValid,The length of the statement  "					string location = "Location: 'Settings & Controls' -> 'Settings' -> 'Printer' -> 'Custom G-Code' -> 'Start G-Code'".Localize(); " is 127.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,PrinterSettings,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\PrinterSettings.cs,IsValid,The length of the statement  "							string details = "Your Start G-Code should not contain a G29 if you are planning on using print leveling. Change your start G-Code or turn off print leveling".Localize(); " is 170.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,PrinterSettings,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\PrinterSettings.cs,IsValid,The length of the statement  "							StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize()); " is 126.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,PrinterSettings,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\PrinterSettings.cs,IsValid,The length of the statement  "							string details = "Your Start G-Code should not contain a G30 if you are planning on using print leveling. Change your start G-Code or turn off print leveling".Localize(); " is 170.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,PrinterSettings,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\PrinterSettings.cs,IsValid,The length of the statement  "							StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize()); " is 126.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,PrinterSettings,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\PrinterSettings.cs,IsValid,The length of the statement  "					string details = string.Format("First Layer Extrusion Width = {0}\nNozzle Diameter = {1}".Localize()' GetValue(SettingsKey.first_layer_extrusion_width)' GetValue<double>(SettingsKey.nozzle_diameter)); " is 200.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,PrinterSettings,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\PrinterSettings.cs,IsValid,The length of the statement  "					string location = "Location: 'Settings & Controls' -> 'Settings' -> 'Filament' -> 'Extrusion' -> 'First Layer'".Localize(); " is 123.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,PrinterSettings,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\PrinterSettings.cs,IsValid,The length of the statement  "					StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize()); " is 126.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,PrinterSettings,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\PrinterSettings.cs,IsValid,The length of the statement  "					string details = string.Format("First Layer Extrusion Width = {0}".Localize()' GetValue(SettingsKey.first_layer_extrusion_width)); " is 130.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,PrinterSettings,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\PrinterSettings.cs,IsValid,The length of the statement  "					string location = "Location: 'Settings & Controls' -> 'Settings' -> 'Filament' -> 'Extrusion' -> 'First Layer'".Localize(); " is 123.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,PrinterSettings,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\PrinterSettings.cs,IsValid,The length of the statement  "					StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize()); " is 126.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,PrinterSettings,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\PrinterSettings.cs,IsValid,The length of the statement  "				if (GetValue<double>(SettingsKey.external_perimeter_extrusion_width) > GetValue<double>(SettingsKey.nozzle_diameter) * 4) " is 121.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,PrinterSettings,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\PrinterSettings.cs,IsValid,The length of the statement  "					string error = "'External Perimeter Extrusion Width' must be less than or equal to the 'Nozzle Diameter' * 4.".Localize(); " is 122.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,PrinterSettings,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\PrinterSettings.cs,IsValid,The length of the statement  "					string details = string.Format("External Perimeter Extrusion Width = {0}\nNozzle Diameter = {1}".Localize()' GetValue(SettingsKey.external_perimeter_extrusion_width)' GetValue<double>(SettingsKey.nozzle_diameter)); " is 214.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,PrinterSettings,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\PrinterSettings.cs,IsValid,The length of the statement  "					string location = "Location: 'Settings & Controls' -> 'Settings' -> 'Filament' -> 'Extrusion' -> 'External Perimeter'".Localize(); " is 130.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,PrinterSettings,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\PrinterSettings.cs,IsValid,The length of the statement  "					StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize()); " is 126.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,PrinterSettings,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\PrinterSettings.cs,IsValid,The length of the statement  "					string details = string.Format("External Perimeter Extrusion Width = {0}".Localize()' GetValue(SettingsKey.external_perimeter_extrusion_width)); " is 144.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,PrinterSettings,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\PrinterSettings.cs,IsValid,The length of the statement  "					string location = "Location: 'Settings & Controls' -> 'Settings' -> 'Filament' -> 'Extrusion' -> 'External Perimeter'".Localize(); " is 130.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,PrinterSettings,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\PrinterSettings.cs,IsValid,The length of the statement  "					StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize()); " is 126.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,PrinterSettings,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\PrinterSettings.cs,IsValid,The length of the statement  "					StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize()); " is 126.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,PrinterSettings,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\PrinterSettings.cs,IsValid,The length of the statement  "					StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize()); " is 126.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,PrinterSettings,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\PrinterSettings.cs,IsValid,The length of the statement  "					StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize()); " is 126.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,PrinterSettings,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\PrinterSettings.cs,IsValid,The length of the statement  "					StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize()); " is 126.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,PrinterSettings,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\PrinterSettings.cs,IsValid,The length of the statement  "					StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize()); " is 126.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,PrinterSettings,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\PrinterSettings.cs,IsValid,The length of the statement  "				string retractSpeedLocation = "Location: 'Settings & Controls' -> 'Settings' -> 'Filament' -> 'Filament' -> 'Retraction'".Localize(); " is 133.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,PrinterSettings,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\PrinterSettings.cs,ValidateGoodSpeedSettingGreaterThan0,The length of the statement  "					StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2} -> '{3}'"' error' details' speedLocation' data.PresentationName)' "Slice Error".Localize()); " is 163.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,MatterSliceInfo,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\MatterSliceInfo.cs,Exists,The length of the statement  "			if (OsInformation.OperatingSystem == OSType.Android || OsInformation.OperatingSystem == OSType.Mac || SlicingQueue.runInProcess) " is 128.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,Slic3rInfo,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Slic3rInfo.cs,getMacPath,The length of the statement  "			string applicationPath = Path.Combine(ApplicationDataStorage.Instance.ApplicationPath' "Slic3r.app"' "Contents"' "MacOS"' "slic3r"); " is 132.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,PresetSelectorWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SettingsControlSelectors.cs,GetPulldownContainer,The length of the statement  "						var layerToEdit = ActiveSliceSettings.Instance.MaterialLayers.Where(layer => layer.LayerID == presetsID).FirstOrDefault(); " is 122.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,PresetSelectorWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SettingsControlSelectors.cs,GetPulldownContainer,The length of the statement  "						var layerToEdit = ActiveSliceSettings.Instance.QualityLayers.Where(layer => layer.LayerID == presetsID).FirstOrDefault(); " is 121.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,PresetSelectorWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SettingsControlSelectors.cs,CreateDropdown,The length of the statement  "			var listSource = (layerType == NamedSettingsLayers.Material) ? ActiveSliceSettings.Instance.MaterialLayers : ActiveSliceSettings.Instance.QualityLayers; " is 152.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,PresetSelectorWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SettingsControlSelectors.cs,CreateDropdown,The length of the statement  "			MenuItem addNewPreset = dropDownList.AddItem(StaticData.Instance.LoadIcon("icon_plus.png"' 32' 32)' "Add New Setting".Localize() + "..."' "new"); " is 145.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SlicePresetsWindow,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SlicePresetsWindow\SlicePresetsWindow.cs,GetBottomRow,The length of the statement  "					string newProfileName = GetNonCollidingName(sanitizedName' presetsContext.PresetLayers.Select(preset => preset.ValueOrDefault(SettingsKey.layer_name))); " is 152.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,MapStartGCode,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SlicerMapping\MappingClasses.cs,PreStartGCode,The length of the statement  "						AddDefaultIfNotPresent(preStartGCode' setTempString' preStartGCodeLines' string.Format("start heating extruder {0}"' extruderIndex0Based + 1)); " is 143.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,MapStartGCode,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SlicerMapping\MappingClasses.cs,PreStartGCode,The length of the statement  "							AddDefaultIfNotPresent(preStartGCode' setTempString' preStartGCodeLines' string.Format("wait for extruder {0}"' extruderIndex0Based + 1)); " is 138.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,MapStartGCode,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SlicerMapping\MappingClasses.cs,SwitchToFirstActiveExtruder,The length of the statement  "					AddDefaultIfNotPresent(preStartGCode' "T{0}".FormatWith(extruderIndex)' preStartGCodeLines' "set the active extruder to {0}".FormatWith(extruderIndex)); " is 152.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,MapStartGCode,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SlicerMapping\MappingClasses.cs,PostStartGCode,The length of the statement  "						AddDefaultIfNotPresent(postStartGCode' setTempString' postStartGCodeLines' string.Format("wait for extruder {0} to reach temperature"' 1)); " is 139.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,MapStartGCode,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SlicerMapping\MappingClasses.cs,PostStartGCode,The length of the statement  "							postStartGCode.Add($"M104 T{extruderIndex0Based} S{materialTemperature} ; Start heating extruder{extruderIndex0Based+1}"); " is 122.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,MapStartGCode,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SlicerMapping\MappingClasses.cs,PostStartGCode,The length of the statement  "							postStartGCode.Add($"M109 T{extruderIndex0Based} S{materialTemperature} ; Finish heating extruder{extruderIndex0Based + 1}"); " is 125.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSideTabsAndPages,The length of the statement  "					// This code is not working yet. Scroll widgets get a scroll event when the tab becomes visible that is always reseting them. " is 125.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSideTabsAndPages,The length of the statement  "					// So it is not usefull to enable this and in fact makes the tabs inconsistently scrolled. It is just here for reference. // 2015 04 16' LBB " is 140.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,AddInHelpText,The length of the statement  "			GuiWidget helpWidget = new WrappedTextWidget(settingData.HelpText' pointSize: helpPointSize' textColor: RGBA_Bytes.White); " is 122.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,GetExtraSettingsWidget,The length of the statement  "			nameHolder.AddChild(new WrappedTextWidget(settingData.ExtraSettings.Localize()' pointSize: 8' textColor: ActiveTheme.Instance.PrimaryTextColor)); " is 145.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreatePrinterExtraControls,The length of the statement  "					}' "Are you sure you want to delete your currently selected printer?".Localize()' "Delete Printer?".Localize()' StyledMessageBox.MessageType.YES_NO' "Delete Printer".Localize()); " is 178.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The length of the statement  "				TextWidget settingName = new TextWidget(String.Format("Setting '{0}' not found in known settings"' settingData.SlicerConfigName)); " is 130.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The length of the statement  "					nameHolder.AddChild(new WrappedTextWidget(settingData.PresentationName.Localize()' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)); " is 149.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The length of the statement  "								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer); " is 125.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The length of the statement  "								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' intEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade)); " is 145.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The length of the statement  "							var doubleEditWidget = new MHNumberEdit(currentValue' allowNegatives: true' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++) " is 154.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The length of the statement  "								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer); " is 125.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The length of the statement  "							var doubleEditWidget = new MHNumberEdit(0' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++) " is 121.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The length of the statement  "										ActiveSliceSettings.Instance.SetValue(settingData.SetSettingsOnChange[0]["TargetSetting"]' numberEdit.Value.ToString() + "mm"' persistenceLayer); " is 145.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The length of the statement  "								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' doubleEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade)); " is 148.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The length of the statement  "							var doubleEditWidget = new MHNumberEdit(currentValue' allowDecimals: true' allowNegatives: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++) " is 154.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The length of the statement  "								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer); " is 125.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The length of the statement  "								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade)); " is 145.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The length of the statement  "								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade)); " is 145.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The length of the statement  "								// we end up adding a key back into the dictionary after we call .ClearValue' resulting in the blue override bar reappearing after " is 130.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The length of the statement  "								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' checkBoxWidget.Checked ? "1" : "0"' persistenceLayer); " is 122.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The length of the statement  "							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: settingData.ShowAsOverride ? 120 : 200' tabIndex: tabIndexForItem++) " is 137.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The length of the statement  "							var stringEdit = new MHTextEditWidget(convertedNewLines' pixelWidth: 320' pixelHeight: multiLineEditHeight' multiLine: true' tabIndex: tabIndexForItem++' typeFace: ApplicationController.MonoSpacedTypeFace) " is 205.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The length of the statement  "								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((TextEditWidget)sender).Text.Replace("\n"' "\\n")' persistenceLayer); " is 138.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The length of the statement  "							bool canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect; " is 229.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The length of the statement  "							// ensuring that a single printer can be shared across different devices and we'll select the correct com port in each case " is 123.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The length of the statement  "								TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150)' " is 130.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The length of the statement  "								BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150)' " is 136.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The length of the statement  "								canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect; " is 224.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The length of the statement  "								selectableOptions.TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150); " is 148.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The length of the statement  "								selectableOptions.BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150); " is 154.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The length of the statement  "							var xEditWidget = new MHNumberEdit(currentXValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++) " is 130.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The length of the statement  "							var yEditWidget = new MHNumberEdit(currentYValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++) " is 130.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The length of the statement  "								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer); " is 189.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The length of the statement  "								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer); " is 189.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The length of the statement  "							var xEditWidget = new MHNumberEdit(offset.x' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++) " is 147.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The length of the statement  "							var yEditWidget = new MHNumberEdit(offset.y' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++) " is 147.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The length of the statement  "								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer); " is 216.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The length of the statement  "								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer); " is 216.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The length of the statement  "						var missingSetting = new TextWidget(String.Format("Missing the setting for '{0}'."' settingData.DataEditType.ToString())) " is 121.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The length of the statement  "				restoreButton = new Button(new ButtonViewStates(new ImageWidget(restoreNormal)' new ImageWidget(restoreHover)' new ImageWidget(restorePressed)' new ImageWidget(restoreNormal))) " is 176.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The length of the statement  "								var firstParentValue = ActiveSliceSettings.Instance.GetValueAndLayerName(settingData.SlicerConfigName' defaultCascade.Skip(1)); " is 127.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The length of the statement  "								var currentValueAndLayerName = ActiveSliceSettings.Instance.GetValueAndLayerName(settingData.SlicerConfigName' defaultCascade); " is 127.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,ColorCircle,The length of the statement  "			normalGraphics.Line(center + new Vector2(-size / 4.0' -size / 4.0)' center + new Vector2(size / 4.0' size / 4.0)' RGBA_Bytes.White' 2 * GuiWidget.DeviceScale); " is 159.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,ColorCircle,The length of the statement  "			normalGraphics.Line(center + new Vector2(-size / 4.0' size / 4.0)' center + new Vector2(size / 4.0' -size / 4.0)' RGBA_Bytes.White' 2 * GuiWidget.DeviceScale); " is 159.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SlicingQueue,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SlicingQueue.cs,GetStlFileLocations,The length of the statement  "					int supportExtruder = Math.Max(0' Math.Min(ActiveSliceSettings.Instance.GetValue<int>(SettingsKey.extruder_count) - 1' ActiveSliceSettings.Instance.GetValue<int>("support_material_extruder") - 1)); " is 197.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SlicingQueue,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SlicingQueue.cs,GetStlFileLocations,The length of the statement  "					int raftExtruder = Math.Max(0' Math.Min(ActiveSliceSettings.Instance.GetValue<int>(SettingsKey.extruder_count) - 1' ActiveSliceSettings.Instance.GetValue<int>("raft_extruder") - 1)); " is 182.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SlicingQueue,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SlicingQueue.cs,CreateSlicedPartsThread,The length of the statement  "						string currentConfigurationFileAndPath = Path.Combine(ApplicationDataStorage.Instance.GCodeOutputPath' "config_" + ActiveSliceSettings.Instance.GetLongHashCode().ToString() + ".ini"); " is 183.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SlicingQueue,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SlicingQueue.cs,CreateSlicedPartsThread,The length of the statement  "										commandArgs = $"--print-center {bedCenter.x:0.##}'{bedCenter.y:0.##} " + "--load \"" + currentConfigurationFileAndPath + "\" --output \"" + gcodePathAndFileName + "\" \"" + fileToSlice + "\""; " is 192.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SlicingQueue,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SlicingQueue.cs,CreateSlicedPartsThread,The length of the statement  "										commandArgs = "--load \"" + currentConfigurationFileAndPath + "\" --output \"" + gcodePathAndFileName + "\" \"" + fileToSlice + "\""; " is 133.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SlicingQueue,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SlicingQueue.cs,CreateSlicedPartsThread,The length of the statement  "									commandArgs = "-v -o \"" + gcodePathAndFileName + "\" " + EngineMappingCura.GetCuraCommandLineSettings() + " \"" + fileToSlice + "\""; " is 134.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SlicingQueue,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SlicingQueue.cs,CreateSlicedPartsThread,The length of the statement  "											commandArgs = "-b {0} -v -o \"".FormatWith(mergeRules) + gcodePathAndFileName + "\" -c \"" + currentConfigurationFileAndPath + "\""; " is 132.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SlicingQueue,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SlicingQueue.cs,CreateSlicedPartsThread,The length of the statement  "										gcodeWriter.WriteLine("; {0} Version {1} Build {2} : GCode settings used".FormatWith(oemName' VersionInfo.Instance.ReleaseVersion' VersionInfo.Instance.BuildVersion)); " is 167.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SlicingQueue,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SlicingQueue.cs,CreateSlicedPartsThread,The length of the statement  "										gcodeWriter.WriteLine("; Date {0} Time {1}:{2:00}".FormatWith(DateTime.Now.Date' DateTime.Now.Hour' DateTime.Now.Minute)); " is 122.
Long Statement,MatterHackers.MatterControl.DataStorage.ClassicDB,ClassicSqlitePrinterProfiles,C:\repos\MatterHackers_MatterControl\DataStorage\Classic\ClassicSqlitePrinterProfiles.cs,ImportPrinter,The length of the statement  "			var allMacros =  Datastore.Instance.dbSQLite.Query<CustomCommands>("SELECT * FROM CustomCommands WHERE PrinterId = " + printer.Id); " is 131.
Long Statement,MatterHackers.MatterControl.DataStorage.ClassicDB,ClassicSqlitePrinterProfiles,C:\repos\MatterHackers_MatterControl\DataStorage\Classic\ClassicSqlitePrinterProfiles.cs,ImportPrinter,The length of the statement  "			string query = string.Format("SELECT * FROM PrinterSetting WHERE Name = 'PublishBedImage' and PrinterId = {0};"' printer.Id); " is 125.
Long Statement,MatterHackers.MatterControl.DataStorage.ClassicDB,ClassicSqlitePrinterProfiles,C:\repos\MatterHackers_MatterControl\DataStorage\Classic\ClassicSqlitePrinterProfiles.cs,LoadMaterialSettings,The length of the statement  "			var collections = Datastore.Instance.dbSQLite.Table<SliceSettingsCollection>().Where(v => v.PrinterId == printer.Id && v.Tag == "material"); " is 140.
Long Statement,MatterHackers.MatterControl.DataStorage.ClassicDB,ClassicSqlitePrinterProfiles,C:\repos\MatterHackers_MatterControl\DataStorage\Classic\ClassicSqlitePrinterProfiles.cs,LoadQualitySettings,The length of the statement  "			var collections = Datastore.Instance.dbSQLite.Table<SliceSettingsCollection>().Where(v => v.PrinterId == printer.Id && v.Tag == "quality"); " is 139.
Long Statement,MatterHackers.MatterControl.DataStorage.ClassicDB,ClassicSqlitePrinterProfiles,C:\repos\MatterHackers_MatterControl\DataStorage\Classic\ClassicSqlitePrinterProfiles.cs,LoadOemLayer,The length of the statement  "				collection = Datastore.Instance.dbSQLite.Table<SliceSettingsCollection>().Where(v => v.Id == activePrinterSettingsID).Take(1).FirstOrDefault(); " is 143.
Long Statement,MatterHackers.MatterControl.EeProm,EePromRepetierWindow,C:\repos\MatterHackers_MatterControl\EeProm\EePromRepetierWindow.cs,RebuildUi,The length of the statement  "					MHNumberEdit valueEdit = new MHNumberEdit(currentValue' pixelWidth: 80 * GuiWidget.DeviceScale' allowNegatives: true' allowDecimals: true); " is 139.
Long Statement,MatterHackers.MatterControl.PrintQueue,QueueData,C:\repos\MatterHackers_MatterControl\Queue\QueueData.cs,RemoveAt,The length of the statement  "				bool ActiveItemMustStayInQueue = PrinterConnectionAndCommunication.Instance.PrinterIsPrinting || PrinterConnectionAndCommunication.Instance.PrinterIsPaused; " is 156.
Long Statement,MatterHackers.MatterControl.PrintQueue,QueueData,C:\repos\MatterHackers_MatterControl\Queue\QueueData.cs,RemoveAt,The length of the statement  "				bool PartMustStayInQueue = ActiveItemMustStayInQueue && PrintItems[index] == PrinterConnectionAndCommunication.Instance.ActivePrintItem; " is 136.
Long Statement,MatterHackers.MatterControl.PrintQueue,QueueData,C:\repos\MatterHackers_MatterControl\Queue\QueueData.cs,AddItem,The length of the statement  "						string memoryWarningMessage = "Are you sure you want to add this part ({0}) to the Queue?\nThe 3D part you are trying to load may be too complicated and cause performance or stability problems.\n\nConsider reducing the geometry before proceeding.".Localize().FormatWith(item.Name); " is 281.
Long Statement,MatterHackers.MatterControl.PrintQueue,QueueData,C:\repos\MatterHackers_MatterControl\Queue\QueueData.cs,AddItem,The length of the statement  "						StyledMessageBox.ShowMessageBox(UserSaidToAllowAddToQueue' memoryWarningMessage' "File May Cause Problems".Localize()' StyledMessageBox.MessageType.YES_NO' "Add To Queue"' "Do Not Add"); " is 186.
Long Statement,MatterHackers.MatterControl.PrintQueue,ExportToFolderProcess,C:\repos\MatterHackers_MatterControl\Queue\OptionsMenu\ExportToFolderProcess.cs,sliceItem_Done,The length of the statement  "										instruction.Line = LevelWizard7PointRadial.ApplyLeveling(instruction.Line' currentDestination' instruction.movementType); " is 121.
Long Statement,MatterHackers.MatterControl.PrintQueue,ExportToFolderProcess,C:\repos\MatterHackers_MatterControl\Queue\OptionsMenu\ExportToFolderProcess.cs,sliceItem_Done,The length of the statement  "										instruction.Line = LevelWizard13PointRadial.ApplyLeveling(instruction.Line' currentDestination' instruction.movementType); " is 122.
Long Statement,MatterHackers.MatterControl.PrintQueue,PrintItemWrapper,C:\repos\MatterHackers_MatterControl\Queue\PrintItemWrapper.cs,GetGCodePathAndFileName,The length of the statement  "				string gcodeFileName = this.FileHashCode.ToString() + "_" + engineString + "_" + ActiveSliceSettings.Instance.GetLongHashCode().ToString(); " is 139.
Long Statement,MatterHackers.MatterControl.PrintQueue,PrintItemWrapper,C:\repos\MatterHackers_MatterControl\Queue\PrintItemWrapper.cs,IsGCodeFileComplete,The length of the statement  "				using (FileStream fileStream = new FileStream(gcodePathAndFileName' FileMode.Open' FileAccess.Read' FileShare.ReadWrite)) " is 121.
Long Statement,MatterHackers.MatterControl.PrintQueue,QueueRowItem,C:\repos\MatterHackers_MatterControl\Queue\QueueRowItem.cs,ShowCantFindFileMessage,The length of the statement  "				StyledMessageBox.ShowMessageBox(onConfirmRemove' message' titleLabel' StyledMessageBox.MessageType.YES_NO' "Remove".Localize()' "Cancel".Localize()); " is 149.
Long Statement,MatterHackers.MatterControl.PrintQueue,QueueRowItem,C:\repos\MatterHackers_MatterControl\Queue\QueueRowItem.cs,ConstructPrintQueueItem,The length of the statement  "					PartThumbnailWidget thumbnailWidget = new PartThumbnailWidget(PrintItemWrapper' "part_icon_transparent_40x40.png"' "building_thumbnail_40x40.png"' PartThumbnailWidget.ImageSizes.Size50x50); " is 189.
Long Statement,MatterHackers.MatterControl.PrintQueue,QueueRowItem,C:\repos\MatterHackers_MatterControl\Queue\QueueRowItem.cs,DeletePartFromQueue,The length of the statement  "				StyledMessageBox.ShowMessageBox(onDeleteFileConfirm' alsoRemoveFromSdCardMessage' alsoRemoveFromSdCardTitle' StyledMessageBox.MessageType.YES_NO); " is 146.
Long Statement,MatterHackers.MatterControl.PrintQueue,QueueDataView,C:\repos\MatterHackers_MatterControl\Queue\QueueDataView.cs,SelectedIndexChanged,The length of the statement  "					if (!PrinterConnectionAndCommunication.Instance.PrinterIsPrinting && !PrinterConnectionAndCommunication.Instance.PrinterIsPaused) " is 129.
Long Statement,MatterHackers.MatterControl.PrintQueue,QueueDataView,C:\repos\MatterHackers_MatterControl\Queue\QueueDataView.cs,SelectedIndexChanged,The length of the statement  "					if (!PrinterConnectionAndCommunication.Instance.PrinterIsPrinting && !PrinterConnectionAndCommunication.Instance.PrinterIsPaused) " is 129.
Long Statement,MatterHackers.MatterControl.PrintQueue,QueueOptionsMenu,C:\repos\MatterHackers_MatterControl\Queue\OptionsMenu\QueueOptionsMenu.cs,SetMenuItems,The length of the statement  "			menuItems.Add(new Tuple<string' Func<bool>>(" Export to Folder or SD Card".Localize()' exportGCodeToFolderButton_Click)); " is 121.
Long Statement,MatterHackers.MatterControl.PrintQueue,QueueOptionsMenu,C:\repos\MatterHackers_MatterControl\Queue\OptionsMenu\QueueOptionsMenu.cs,PartSheetClickOnIdle,The length of the statement  "							SavePartsSheetFeedbackWindow feedbackWindow = new SavePartsSheetFeedbackWindow(parts.Count' parts[0].Name' ActiveTheme.Instance.PrimaryBackgroundColor); " is 152.
Long Statement,MatterHackers.MatterControl.PrintQueue,QueueOptionsMenu,C:\repos\MatterHackers_MatterControl\Queue\OptionsMenu\QueueOptionsMenu.cs,onSelectFolderDialog,The length of the statement  "						exportingWindow = new ExportToFolderFeedbackWindow(parts.Count' parts[0].Name' ActiveTheme.Instance.PrimaryBackgroundColor); " is 124.
Long Statement,MatterHackers.MatterControl.PrintQueue,QueueDataWidget,C:\repos\MatterHackers_MatterControl\Queue\QueueDataWidget.cs,CreateCopyInQueue,The length of the statement  "					newCopyFilename = Path.Combine(libraryDataPath' Path.ChangeExtension(Path.GetRandomFileName()' Path.GetExtension(printItemWrapper.FileLocation))); " is 146.
Long Statement,MatterHackers.MatterControl.PrintQueue,QueueDataWidget,C:\repos\MatterHackers_MatterControl\Queue\QueueDataWidget.cs,DoAddFiles,The length of the statement  "                    QueueData.Instance.AddItem(new PrintItemWrapper(new PrintItem(Path.GetFileNameWithoutExtension(fileToAdd)' Path.GetFullPath(fileToAdd)))); " is 138.
Long Statement,MatterHackers.MatterControl.PrintQueue,QueueDataWidget,C:\repos\MatterHackers_MatterControl\Queue\QueueDataWidget.cs,AddItemsToQueue,The length of the statement  "								QueueData.Instance.AddItem(new PrintItemWrapper(new PrintItem(Path.GetFileNameWithoutExtension(fileNameToLoad)' Path.GetFullPath(fileNameToLoad)))); " is 148.
Long Statement,MatterHackers.MatterControl.PrintQueue,QueueDataWidget,C:\repos\MatterHackers_MatterControl\Queue\QueueDataWidget.cs,AddPartCopyToQueue,The length of the statement  "			QueueData.Instance.AddItem(new PrintItemWrapper(partInfo.PrintItem)' partInfo.InsertAfterIndex' QueueData.ValidateSizeOn32BitSystems.Skip); " is 139.
Long Statement,MatterHackers.MatterControl.PrintQueue,QueueDataWidget,C:\repos\MatterHackers_MatterControl\Queue\QueueDataWidget.cs,DoAddToSpecificLibrary,The length of the statement  "								PrintItemWrapper printItemWrapper = new PrintItemWrapper(new PrintItem(queueItem.PrintItemWrapper.PrintItem.Name' queueItem.PrintItemWrapper.FileLocation)' returnInfo.destinationLibraryProvider.GetProviderLocator()); " is 216.
Long Statement,MatterHackers.MatterControl.FieldValidation,ValidationMethods,C:\repos\MatterHackers_MatterControl\Utilities\FieldValidation.cs,StringLooksLikeEmail,The length of the statement  "			if (lastAtPos < lastDotPos && lastAtPos > 0 && value.IndexOf("@@") == -1 && lastDotPos > 2 && (value.Length - lastDotPos) > 2) " is 126.
Long Statement,MatterHackers.MatterControl.ContactForm,ContactFormWidget,C:\repos\MatterHackers_MatterControl\AboutPage\ContactForm.cs,ValidateContactForm,The length of the statement  "			FormField.ValidationHandler[] stringValidationHandlers = new FormField.ValidationHandler[] { validationMethods.StringIsNotEmpty }; " is 130.
Long Statement,MatterHackers.MatterControl.ContactForm,ContactFormWidget,C:\repos\MatterHackers_MatterControl\AboutPage\ContactForm.cs,ValidateContactForm,The length of the statement  "			FormField.ValidationHandler[] emailValidationHandlers = new FormField.ValidationHandler[] { validationMethods.StringIsNotEmpty' validationMethods.StringLooksLikeEmail }; " is 169.
Long Statement,MatterHackers.MatterControl.ContactForm,ContactFormWidget,C:\repos\MatterHackers_MatterControl\AboutPage\ContactForm.cs,SubmitContactForm,The length of the statement  "				ContactFormRequest postRequest = new ContactFormRequest(questionInput.Text' detailInput.Text' emailInput.Text' nameInput.Text' ""); " is 131.
Long Statement,SQLiteWin32,SQLiteConnection,C:\repos\MatterHackers_MatterControl\DataStorage\SQLiteWin32.cs,Execute,The length of the statement  "				Debug.WriteLine(string.Format("Finished in {0} ms ({1:0.0} s total)"' _sw.ElapsedMilliseconds' _elapsedMilliseconds / 1000.0)); " is 127.
Long Statement,SQLiteWin32,SQLiteConnection,C:\repos\MatterHackers_MatterControl\DataStorage\SQLiteWin32.cs,ExecuteScalar,The length of the statement  "					Debug.WriteLine(string.Format("Finished in {0} ms ({1:0.0} s total)"' _sw.ElapsedMilliseconds' _elapsedMilliseconds / 1000.0)); " is 127.
Long Statement,SQLiteWin32,SQLiteConnection,C:\repos\MatterHackers_MatterControl\DataStorage\SQLiteWin32.cs,DoSavePointExecute,The length of the statement  "			throw new ArgumentException("savePoint"' "savePoint is not valid' and should be the result of a call to SaveTransactionPoint."); " is 128.
Long Statement,SQLiteWin32,Orm,C:\repos\MatterHackers_MatterControl\DataStorage\SQLiteWin32.cs,SqlType,The length of the statement  "			if (clrType == typeof(Boolean) || clrType == typeof(Byte) || clrType == typeof(UInt16) || clrType == typeof(SByte) || clrType == typeof(Int16) || clrType == typeof(Int32)) " is 171.
Long Statement,SQLiteUnix,SQLiteConnection,C:\repos\MatterHackers_MatterControl\DataStorage\SQLiteUnix.cs,Execute,The length of the statement  "				Debug.WriteLine(string.Format("Finished in {0} ms ({1:0.0} s total)"' _sw.ElapsedMilliseconds' _elapsedMilliseconds / 1000.0)); " is 127.
Long Statement,SQLiteUnix,SQLiteConnection,C:\repos\MatterHackers_MatterControl\DataStorage\SQLiteUnix.cs,ExecuteScalar,The length of the statement  "					Debug.WriteLine(string.Format("Finished in {0} ms ({1:0.0} s total)"' _sw.ElapsedMilliseconds' _elapsedMilliseconds / 1000.0)); " is 127.
Long Statement,SQLiteUnix,SQLiteConnection,C:\repos\MatterHackers_MatterControl\DataStorage\SQLiteUnix.cs,DoSavePointExecute,The length of the statement  "			throw new ArgumentException("savePoint"' "savePoint is not valid' and should be the result of a call to SaveTransactionPoint."); " is 128.
Long Statement,SQLiteUnix,Orm,C:\repos\MatterHackers_MatterControl\DataStorage\SQLiteUnix.cs,SqlType,The length of the statement  "			if (clrType == typeof(Boolean) || clrType == typeof(Byte) || clrType == typeof(UInt16) || clrType == typeof(SByte) || clrType == typeof(Int16) || clrType == typeof(Int32)) " is 171.
Long Statement,MatterHackers.MatterControl.PrinterCommunication,PrinterConnectionAndCommunication,C:\repos\MatterHackers_MatterControl\PrinterCommunication\PrinterConnectionAndCommunication.cs,ConnectToActivePrinter,The length of the statement  "				// On Android' there will never be more than one serial port available for us to connect to. Override the current .ComPort value to account for " is 143.
Long Statement,MatterHackers.MatterControl.PrinterCommunication,PrinterConnectionAndCommunication,C:\repos\MatterHackers_MatterControl\PrinterCommunication\PrinterConnectionAndCommunication.cs,ConnectToActivePrinter,The length of the statement  "				// this aspect to ensure the validation logic that verifies port availability/in use status can proceed without additional workarounds for Android " is 146.
Long Statement,MatterHackers.MatterControl.PrinterCommunication,PrinterConnectionAndCommunication,C:\repos\MatterHackers_MatterControl\PrinterCommunication\PrinterConnectionAndCommunication.cs,MoveAbsolute,The length of the statement  "			SendLineToPrinterNow("G1 X{0:0.###}Y{1:0.###}Z{2:0.###} F{3}".FormatWith(position.x' position.y' position.z' feedRateMmPerMinute)); " is 131.
Long Statement,MatterHackers.MatterControl.PrinterCommunication,PrinterConnectionAndCommunication,C:\repos\MatterHackers_MatterControl\PrinterCommunication\PrinterConnectionAndCommunication.cs,MoveExtruderRelative,The length of the statement  "				// TODO: Long term we need to track the active extruder and make requiresToolChange be driven by the extruder you're actually on " is 128.
Long Statement,MatterHackers.MatterControl.PrinterCommunication,PrinterConnectionAndCommunication,C:\repos\MatterHackers_MatterControl\PrinterCommunication\PrinterConnectionAndCommunication.cs,PrintActivePart,The length of the statement  "								UiThread.RunOnIdle(() => StyledMessageBox.ShowMessageBox(onConfirmPrint' gcodeWarningMessage' "Warning - GCode file".Localize()' new GuiWidget[] { new VerticalSpacer()' hideGCodeWarningCheckBox }' StyledMessageBox.MessageType.YES_NO)); " is 235.
Long Statement,MatterHackers.MatterControl.PrinterCommunication,PrinterConnectionAndCommunication,C:\repos\MatterHackers_MatterControl\PrinterCommunication\PrinterConnectionAndCommunication.cs,PrintActivePart,The length of the statement  "							StyledMessageBox.ShowMessageBox(onRemoveMessageConfirm' message' itemNotFoundMessage' StyledMessageBox.MessageType.YES_NO' "Remove".Localize()' "Cancel".Localize()); " is 165.
Long Statement,MatterHackers.MatterControl.PrinterCommunication,PrinterConnectionAndCommunication,C:\repos\MatterHackers_MatterControl\PrinterCommunication\PrinterConnectionAndCommunication.cs,PrinterReportsError,The length of the statement  "					string message = "Your printer is reporting a hardware Error. This may prevent your printer from functioning properly.".Localize() " is 130.
Long Statement,MatterHackers.MatterControl.PrinterCommunication,PrinterConnectionAndCommunication,C:\repos\MatterHackers_MatterControl\PrinterCommunication\PrinterConnectionAndCommunication.cs,PrinterStatesFirmware,The length of the statement  "			if (GCodeFile.GetFirstStringAfter("MACHINE_TYPE:"' foundStringEventArgs.LineToCheck' " EXTRUDER_COUNT"' ref firmwareVersionReported)) " is 133.
Long Statement,MatterHackers.MatterControl.PrinterCommunication,PrinterConnectionAndCommunication,C:\repos\MatterHackers_MatterControl\PrinterCommunication\PrinterConnectionAndCommunication.cs,ArduinoDtrReset,The length of the statement  "				IFrostedSerialPort resetSerialPort = FrostedSerialPortFactory.GetAppropriateFactory(this.DriverType).Create(this.ComPort); " is 122.
Long Statement,MatterHackers.MatterControl.PrinterCommunication,PrinterConnectionAndCommunication,C:\repos\MatterHackers_MatterControl\PrinterCommunication\PrinterConnectionAndCommunication.cs,ReadFromPrinter,The length of the statement  "				|| (PrinterIsConnected && serialPort != null && serialPort.IsOpen && !Disconnecting && readThreadHolder.IsCurrentThread())) " is 123.
Long Statement,MatterHackers.MatterControl.PrinterCommunication,PrinterConnectionAndCommunication,C:\repos\MatterHackers_MatterControl\PrinterCommunication\PrinterConnectionAndCommunication.cs,ReadFromPrinter,The length of the statement  "								// Abort if we're AttemptingToConnect' no newline was found in the accumulator string and there's too many non-ascii chars " is 122.
Long Statement,MatterHackers.MatterControl.PrinterCommunication,PrinterConnectionAndCommunication,C:\repos\MatterHackers_MatterControl\PrinterCommunication\PrinterConnectionAndCommunication.cs,ReadFromPrinter,The length of the statement  "											CommunicationUnconditionalFromPrinter.CallEvents(this' new StringEventArgs("{0} [{1:0.000}]\n".FormatWith(lastLineRead' timeSinceStartedPrint.Elapsed.TotalSeconds))); " is 166.
Long Statement,MatterHackers.MatterControl.PrinterCommunication,PrinterConnectionAndCommunication,C:\repos\MatterHackers_MatterControl\PrinterCommunication\PrinterConnectionAndCommunication.cs,AttemptToConnect,The length of the statement  "						// We have to send a line because some printers (like old print-r-bots) do not send anything when connecting and there is no other way to know they are there. " is 158.
Long Statement,MatterHackers.MatterControl.PrinterCommunication,PrinterConnectionAndCommunication,C:\repos\MatterHackers_MatterControl\PrinterCommunication\PrinterConnectionAndCommunication.cs,CreateStreamProcessors,The length of the statement  "				babyStepsStream6.Offset = new Vector3(activePrintTask.PrintingOffsetX' activePrintTask.PrintingOffsetY' activePrintTask.PrintingOffsetZ); " is 137.
Long Statement,MatterHackers.MatterControl.PrinterCommunication,PrinterConnectionAndCommunication,C:\repos\MatterHackers_MatterControl\PrinterCommunication\PrinterConnectionAndCommunication.cs,partToPrint_SliceDone,The length of the statement  "						// read the last few k of the file and see if it says "filament used". We use this marker to tell if the file finished writing " is 126.
Long Statement,MatterHackers.MatterControl.PrinterCommunication,PrinterConnectionAndCommunication,C:\repos\MatterHackers_MatterControl\PrinterCommunication\PrinterConnectionAndCommunication.cs,WriteRawToPrinter,The length of the statement  "						|| (lineWithoutChecksum.StartsWith("T") && !lineWithoutChecksum.StartsWith("T:"))) // is a switch extruder (verify this is the right time to ask this) " is 150.
Long Statement,MatterHackers.MatterControl.PrinterCommunication,PrinterConnectionAndCommunication,C:\repos\MatterHackers_MatterControl\PrinterCommunication\PrinterConnectionAndCommunication.cs,WriteRawToPrinter,The length of the statement  "							CommunicationUnconditionalToPrinter.CallEvents(this' new StringEventArgs("{0} [{1:0.000}]\n".FormatWith(lineWidthoutCR' timeSinceStartedPrint.Elapsed.TotalSeconds))); " is 166.
Long Statement,MatterHackers.MatterControl.PrinterCommunication,PrinterConnectionAndCommunication,C:\repos\MatterHackers_MatterControl\PrinterCommunication\PrinterConnectionAndCommunication.cs,WriteRawToPrinter,The length of the statement  "							if (false) // this is for debugging. Eventually it could be hooked up to a user config option so it can be turned on in the field. " is 130.
Long Statement,MatterHackers.MatterControl.VersionManagement,WebRequestBase<ResponseType>,C:\repos\MatterHackers_MatterControl\VersionManagement\WebRequestHandler.cs,SendRequest,The length of the statement  "// Prevent constant exceptions on debug builds when stepping through code. In debug' let requests stay in limbo until resumed and prevent the timeout exceptions " is 160.
Long Statement,MatterHackers.MatterControl.VersionManagement,WebRequestBase<ResponseType>,C:\repos\MatterHackers_MatterControl\VersionManagement\WebRequestHandler.cs,SendRequest,The length of the statement  "			System.Diagnostics.Trace.Write(string.Format("ServiceRequest: {0}\r\n  {1}\r\n"' uri' string.Join("\r\n\t"' jsonToSend.Split(''')))); " is 133.
Long Statement,MatterHackers.MatterControl.VersionManagement,WebRequestBase,C:\repos\MatterHackers_MatterControl\VersionManagement\WebRequestHandler.cs,SendRequest,The length of the statement  "			System.Diagnostics.Trace.Write(string.Format("ServiceRequest: {0}\r\n  {1}\r\n"' uri' string.Join("\r\n\t"' jsonToSend.Split(''')))); " is 133.
Long Statement,SQLiteAndroid,SQLiteConnection,C:\repos\MatterHackers_MatterControl\DataStorage\SQLiteAndroid.cs,Execute,The length of the statement  "				Debug.WriteLine(string.Format("Finished in {0} ms ({1:0.0} s total)"' _sw.ElapsedMilliseconds' _elapsedMilliseconds / 1000.0)); " is 127.
Long Statement,SQLiteAndroid,SQLiteConnection,C:\repos\MatterHackers_MatterControl\DataStorage\SQLiteAndroid.cs,ExecuteScalar,The length of the statement  "					Debug.WriteLine(string.Format("Finished in {0} ms ({1:0.0} s total)"' _sw.ElapsedMilliseconds' _elapsedMilliseconds / 1000.0)); " is 127.
Long Statement,SQLiteAndroid,SQLiteConnection,C:\repos\MatterHackers_MatterControl\DataStorage\SQLiteAndroid.cs,DoSavePointExecute,The length of the statement  "			throw new ArgumentException("savePoint"' "savePoint is not valid' and should be the result of a call to SaveTransactionPoint."); " is 128.
Long Statement,SQLiteAndroid,Orm,C:\repos\MatterHackers_MatterControl\DataStorage\SQLiteAndroid.cs,SqlType,The length of the statement  "			if (clrType == typeof(Boolean) || clrType == typeof(Byte) || clrType == typeof(UInt16) || clrType == typeof(SByte) || clrType == typeof(Int16) || clrType == typeof(Int32)) " is 171.
Long Statement,Gaming.Game,DataViewGraph,C:\repos\MatterHackers_MatterControl\CustomWidgets\DataViewGraph.cs,OnDraw,The length of the statement  "            RoundedRect backGround = new RoundedRect(renderOffset.x' renderOffset.y - 1' renderOffset.x + graphWidth' renderOffset.y - 1 + graphHeight + 2' 5); " is 147.
Long Statement,Gaming.Game,DataViewGraph,C:\repos\MatterHackers_MatterControl\CustomWidgets\DataViewGraph.cs,OnDraw,The length of the statement  "				String Text = historyKeyValue.Key + ": Min:" + MinMin.ToString("0.0") + " Max:" + MaxMax.ToString("0.0") + " Avg:" + MaxAverage.ToString("0.0"); " is 144.
Long Statement,Gaming.Game,DataViewGraph,C:\repos\MatterHackers_MatterControl\CustomWidgets\DataViewGraph.cs,OnDraw,The length of the statement  "				graphics2D.DrawString(Text' renderOffset.x' renderOffset.y + currentTextHeight' backgroundColor: new RGBA_Bytes(RGBA_Bytes.White' 220)' drawFromHintedCach: true); " is 162.
Long Statement,Gaming.Game,DataViewGraph,C:\repos\MatterHackers_MatterControl\CustomWidgets\DataViewGraph.cs,OnDraw,The length of the statement  "			RoundedRect BackGround2 = new RoundedRect(renderOffset.x' renderOffset.y - 1' renderOffset.x + graphWidth' renderOffset.y - 1 + graphHeight + 2' 5); " is 148.
Complex Conditional,MatterHackers.MatterControl,ExportPrintItemWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\ExportPrintItemWindow.cs,CreateWindowContent,The conditional expression  "modelCanBeExported  				&& printItemWrapper != null  				&& (printItemWrapper.PrintItem.Protected  				|| printItemWrapper.PrintItem.ReadOnly)"  is complex.
Complex Conditional,MatterHackers.MatterControl,TextScrollWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\TerminalWindow\TextScrollWidget.cs,ConditionalyAddToVisible,The conditional expression  "line == null  						|| line.Contains("M105")  						|| line.Length < 3  						|| line.StartsWith(startFilter)"  is complex.
Complex Conditional,MatterHackers.MatterControl,CreateDiscreteMeshes,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\CreateDiscreteMeshes.cs,PointInPolygon,The conditional expression  "(((polygon[i].Y <= testPosition.Y) && (testPosition.Y < polygon[prevIndex].Y))  					|| ((polygon[prevIndex].Y <= testPosition.Y) && (testPosition.Y < polygon[i].Y)))  					&& (testPosition.X - polygon[i].X < (polygon[prevIndex].X - polygon[i].X) * (testPosition.Y - polygon[i].Y) / (polygon[prevIndex].Y - polygon[i].Y))"  is complex.
Complex Conditional,MatterHackers.MatterControl,PrintLevelingPlane,C:\repos\MatterHackers_MatterControl\PrinterControls\PrintLevelingPlane.cs,ApplyLeveling,The conditional expression  "(lineBeingSent.StartsWith("G0") || lineBeingSent.StartsWith("G1"))  				&& lineBeingSent.Length > 2  				&& lineBeingSent[2] == ' '"  is complex.
Complex Conditional,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,BuildImageFromMeshGroups,The conditional expression  "loadedMeshGroups != null  				&& loadedMeshGroups.Count > 0  				&& loadedMeshGroups[0].Meshes != null  				&& loadedMeshGroups[0].Meshes[0] != null"  is complex.
Complex Conditional,MatterHackers.MatterControl,MatterControlApplication,C:\repos\MatterHackers_MatterControl\MatterControlApplication.cs,OnDragEnter,The conditional expression  "(extension != "" && MeshFileIo.ValidFileExtensions().Contains(extension))  						|| extension == ".GCODE"  						|| extension == ".ZIP""  is complex.
Complex Conditional,MatterHackers.MatterControl,MatterControlApplication,C:\repos\MatterHackers_MatterControl\MatterControlApplication.cs,OnDragOver,The conditional expression  "(extension != "" && MeshFileIo.ValidFileExtensions().Contains(extension))  						|| extension == ".GCODE"  						|| extension == ".ZIP""  is complex.
Complex Conditional,MatterHackers.MatterControl,ProjectFileHandler,C:\repos\MatterHackers_MatterControl\Utilities\ProjectFileHandler.cs,ImportFromProjectArchive,The conditional expression  "!string.IsNullOrWhiteSpace(zipEntry.Name) &&  							(zipEntry.Name == "manifest.json"  							|| MeshFileIo.ValidFileExtensions().Contains(sourceExtension)  							|| sourceExtension == ".GCODE")"  is complex.
Complex Conditional,MatterHackers.MatterControl.HtmlParsing,HtmlParser,C:\repos\MatterHackers_MatterControl\AboutPage\HTMLParser\HtmlParser.cs,SplitOnSpacesNotInQuotes,The conditional expression  "(nextSingleQuoteIndex != -1 && nextSingleQuoteIndex < nextSpaceIndex)  					|| (nextDoubleQuoteIndex != -1 && nextDoubleQuoteIndex < nextSpaceIndex)"  is complex.
Complex Conditional,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,LevelWizardRadialBase,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\LevelWizard7PointRadial.cs,GetLevelingFunctions,The conditional expression  "currentLevelingFunctions == null                  || currentLevelingFunctions.NumberOfRadialSamples != numberOfRadialSamples                  || currentLevelingFunctions.BedCenter != bedCenter                  || currentLevelingFunctions.LevelingData != levelingData"  is complex.
Complex Conditional,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,LevelWizard7PointRadial,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\LevelWizard7PointRadial.cs,ApplyLeveling,The conditional expression  "settings?.GetValue<bool>(SettingsKey.print_leveling_enabled) == true                  && (lineBeingSent.StartsWith("G0 ") || lineBeingSent.StartsWith("G1 "))                  && lineBeingSent.Length > 2                  && lineBeingSent[2] == ' '"  is complex.
Complex Conditional,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,LevelWizard13PointRadial,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\LevelWizard13PointRadial.cs,ApplyLeveling,The conditional expression  "settings?.GetValue<bool>(SettingsKey.print_leveling_enabled) == true                  && (lineBeingSent.StartsWith("G0 ") || lineBeingSent.StartsWith("G1 "))                  && lineBeingSent.Length > 2                  && lineBeingSent[2] == ' '"  is complex.
Complex Conditional,MatterHackers.MatterControl.CustomWidgets,DisableableWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\DisableableWidget.cs,EnsureCorrectBounds,The conditional expression  "Parent != null  				&& Parent.Visible && Parent.Width > 0  				&& Parent.Height > 0  				&& Parent.Children.Count > 1"  is complex.
Complex Conditional,MatterHackers.MatterControl.CustomWidgets.LibrarySelector,FolderBreadCrumbWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\LibrarySelector\FolderBreadCrumbWidget.cs,SetBreadCrumbs,The conditional expression  "this.Parent != null  				&& this.Width > 0  				&& this.Children.Count > 4  				&& this.GetChildrenBoundsIncludingMargins().Width > (this.Width - 20)"  is complex.
Complex Conditional,MatterHackers.RayTracer,ThumbnailTracer,C:\repos\MatterHackers_MatterControl\CustomWidgets\ThumbnailTracer.cs,NeedsToBeSmaller,The conditional expression  "partScreenBounds.Bottom < goalBounds.Bottom  				|| partScreenBounds.Top > goalBounds.Top  				|| partScreenBounds.Left < goalBounds.Left  				|| partScreenBounds.Right > goalBounds.Right"  is complex.
Complex Conditional,MatterHackers.MatterControl.PrinterCommunication.Io,PrintLevelingStream,C:\repos\MatterHackers_MatterControl\PrinterCommunication\Io\PrintLevelingStream.cs,ReadLine,The conditional expression  "lineFromChild != null  				&& PrintLevelingStream.Enabled  				&& PrinterConnectionAndCommunication.Instance.ActivePrinter.GetValue<bool>(SettingsKey.print_leveling_enabled)  				&& !PrinterConnectionAndCommunication.Instance.ActivePrinter.GetValue<bool>(SettingsKey.has_hardware_leveling)"  is complex.
Complex Conditional,MatterHackers.MatterControl.PrinterCommunication.Io,PrintRecoveryStream,C:\repos\MatterHackers_MatterControl\PrinterCommunication\Io\PrintRecoveryStream.cs,ReadLine,The conditional expression  "line.StartsWith("M109") // heat and wait extruder  							|| line.StartsWith("M104") // heat extruder  							|| line.StartsWith("M190") // heat and wait bed  							|| line.StartsWith("M140") // heat bed  							|| line.StartsWith("T") // switch extruder  							|| line.StartsWith("M106") // fan on  							|| line.StartsWith("M107") // fan off  							|| line.StartsWith("G92")"  is complex.
Complex Conditional,MatterHackers.MatterControl.PrintLibrary.Provider,LibraryProvider,C:\repos\MatterHackers_MatterControl\Library\Provider\LibraryProvider.cs,AddFilesToLibrary,The conditional expression  "(extension != "" && MeshFileIo.ValidFileExtensions().Contains(extension))  					|| extension == ".GCODE"  					|| extension == ".ZIP""  is complex.
Complex Conditional,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,OnMouseDown,The conditional expression  "meshViewerWidget.TrackballTumbleWidget.TransformState == TrackBallController.MouseDownType.None  					&& mouseEvent.Button == MouseButtons.Left  					&& ModifierKeys != Keys.Shift  					&& ModifierKeys != Keys.Control  					&& ModifierKeys != Keys.Alt"  is complex.
Complex Conditional,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,AllowDragDrop,The conditional expression  "(!enterEditButtonsContainer.Visible  				&& !doEdittingButtonsContainer.Visible)  				|| printItemWrapper == null || printItemWrapper.PrintItem.ReadOnly"  is complex.
Complex Conditional,MatterHackers.MatterControl.PartPreviewWindow,PartPreview3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\BaseClasses\PartPreview3DWidget.cs,CheckSettingChanged,The conditional expression  "stringEvent.Data == SettingsKey.bed_size  					|| stringEvent.Data == SettingsKey.print_center  					|| stringEvent.Data == SettingsKey.build_height  					|| stringEvent.Data == SettingsKey.bed_shape  					|| stringEvent.Data == SettingsKey.center_part_on_bed"  is complex.
Complex Conditional,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,CheckSettingChanged,The conditional expression  "gcodeViewWidget?.LoadedGCode != null  					&& (  					stringEvent.Data == SettingsKey.filament_cost  					|| stringEvent.Data == SettingsKey.filament_diameter  					|| stringEvent.Data == SettingsKey.filament_density)"  is complex.
Complex Conditional,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,CheckSettingChanged,The conditional expression  "stringEvent.Data == SettingsKey.bed_size  					|| stringEvent.Data == SettingsKey.print_center  					|| stringEvent.Data == SettingsKey.build_height  					|| stringEvent.Data == SettingsKey.bed_shape  					|| stringEvent.Data == SettingsKey.center_part_on_bed"  is complex.
Complex Conditional,MatterHackers.MatterControl.PrintHistory,PrintRecovery,C:\repos\MatterHackers_MatterControl\History\PrintHistoryData.cs,CheckIfNeedToRecoverPrint,The conditional expression  "!lastPrint.PrintComplete // Top Print History Item is not complete  					&& !string.IsNullOrEmpty(lastPrint.PrintingGCodeFileName) // PrintingGCodeFileName is set  					&& File.Exists(lastPrint.PrintingGCodeFileName) // PrintingGCodeFileName is still on disk  					&& lastPrint.PercentDone > 0 // we are actually part way into the print  					&& ActiveSliceSettings.Instance.GetValue<bool>(SettingsKey.recover_is_enabled)  					&& !ActiveSliceSettings.Instance.GetValue<bool>(SettingsKey.has_hardware_leveling)"  is complex.
Complex Conditional,MatterHackers.MatterControl.PrintLibrary,PrintLibraryWidget,C:\repos\MatterHackers_MatterControl\Library\PrintLibraryWidget.cs,OnDragEnter,The conditional expression  "(extension != "" && MeshFileIo.ValidFileExtensions().Contains(extension))  						|| extension == ".GCODE"  						|| extension == ".ZIP""  is complex.
Complex Conditional,MatterHackers.MatterControl.PrintLibrary,PrintLibraryWidget,C:\repos\MatterHackers_MatterControl\Library\PrintLibraryWidget.cs,OnDragOver,The conditional expression  "(extension != "" && MeshFileIo.ValidFileExtensions().Contains(extension))  						|| extension == ".GCODE"  						|| extension == ".ZIP""  is complex.
Complex Conditional,MatterHackers.MatterControl.SlicerConfiguration,SlicingQueue,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SlicingQueue.cs,CreateSlicedPartsThread,The conditional expression  "OsInformation.OperatingSystem == OSType.Android ||  								((OsInformation.OperatingSystem == OSType.Mac || runInProcess)  									&& ActiveSliceSettings.Instance.Helpers.ActiveSliceEngineType() == SlicingEngineTypes.MatterSlice)"  is complex.
Complex Conditional,MatterHackers.MatterControl.PrintQueue,QueueData,C:\repos\MatterHackers_MatterControl\Queue\QueueData.cs,SwapItems,The conditional expression  "indexA >= 0 && indexA < ItemCount  				&& indexB >= 0 && indexB < ItemCount  				&& indexA != indexB"  is complex.
Complex Conditional,MatterHackers.MatterControl.PrintQueue,QueueDataWidget,C:\repos\MatterHackers_MatterControl\Queue\QueueDataWidget.cs,OnDragEnter,The conditional expression  "(extension != "" && MeshFileIo.ValidFileExtensions().Contains(extension))  					|| extension == ".GCODE"  					|| extension == ".ZIP""  is complex.
Complex Conditional,MatterHackers.MatterControl.PrintQueue,QueueDataWidget,C:\repos\MatterHackers_MatterControl\Queue\QueueDataWidget.cs,OnDragOver,The conditional expression  "(extension != "" && MeshFileIo.ValidFileExtensions().Contains(extension))  					|| extension == ".GCODE"  					|| extension == ".ZIP""  is complex.
Complex Conditional,MatterHackers.MatterControl.FieldValidation,ValidationMethods,C:\repos\MatterHackers_MatterControl\Utilities\FieldValidation.cs,StringLooksLikeEmail,The conditional expression  "lastAtPos < lastDotPos && lastAtPos > 0 && value.IndexOf("@@") == -1 && lastDotPos > 2 && (value.Length - lastDotPos) > 2"  is complex.
Complex Conditional,SQLiteWin32,Orm,C:\repos\MatterHackers_MatterControl\DataStorage\SQLiteWin32.cs,SqlType,The conditional expression  "clrType == typeof(Boolean) || clrType == typeof(Byte) || clrType == typeof(UInt16) || clrType == typeof(SByte) || clrType == typeof(Int16) || clrType == typeof(Int32)"  is complex.
Complex Conditional,SQLiteWin32,SQLiteCommand,C:\repos\MatterHackers_MatterControl\DataStorage\SQLiteWin32.cs,BindParameter,The conditional expression  "value is Byte || value is UInt16 || value is SByte || value is Int16"  is complex.
Complex Conditional,SQLiteUnix,Orm,C:\repos\MatterHackers_MatterControl\DataStorage\SQLiteUnix.cs,SqlType,The conditional expression  "clrType == typeof(Boolean) || clrType == typeof(Byte) || clrType == typeof(UInt16) || clrType == typeof(SByte) || clrType == typeof(Int16) || clrType == typeof(Int32)"  is complex.
Complex Conditional,SQLiteUnix,SQLiteCommand,C:\repos\MatterHackers_MatterControl\DataStorage\SQLiteUnix.cs,BindParameter,The conditional expression  "value is Byte || value is UInt16 || value is SByte || value is Int16"  is complex.
Complex Conditional,MatterHackers.MatterControl.PrinterCommunication,PrinterConnectionAndCommunication,C:\repos\MatterHackers_MatterControl\PrinterCommunication\PrinterConnectionAndCommunication.cs,ReadFromPrinter,The conditional expression  "CommunicationState == CommunicationStates.AttemptingToConnect  				|| (PrinterIsConnected && serialPort != null && serialPort.IsOpen && !Disconnecting && readThreadHolder.IsCurrentThread())"  is complex.
Complex Conditional,MatterHackers.MatterControl.PrinterCommunication,PrinterConnectionAndCommunication,C:\repos\MatterHackers_MatterControl\PrinterCommunication\PrinterConnectionAndCommunication.cs,KeepTrackOfAbsolutePostionAndDestination,The conditional expression  "lineBeingSent.StartsWith("G0 ")  				|| lineBeingSent.StartsWith("G1 ")  				|| lineBeingSent.StartsWith("G2 ")  				|| lineBeingSent.StartsWith("G3 ")"  is complex.
Complex Conditional,MatterHackers.MatterControl.PrinterCommunication,PrinterConnectionAndCommunication,C:\repos\MatterHackers_MatterControl\PrinterCommunication\PrinterConnectionAndCommunication.cs,TryWriteNextLineFromGCodeFile,The conditional expression  "(timeSinceLastReadAnything.Elapsed.TotalSeconds > 10 && timeSinceLastWrite.Elapsed.TotalSeconds > 30)  							|| wasMoveAndNoOK  							|| waitedTooLongForOK"  is complex.
Complex Conditional,MatterHackers.MatterControl.PrinterCommunication,PrinterConnectionAndCommunication,C:\repos\MatterHackers_MatterControl\PrinterCommunication\PrinterConnectionAndCommunication.cs,WriteRawToPrinter,The conditional expression  "lineWithoutChecksum.StartsWith("G28") // is a home  						|| lineWithoutChecksum.StartsWith("G29") // is a bed level  						|| lineWithoutChecksum.StartsWith("G30") // is a bed level  						|| lineWithoutChecksum.StartsWith("G92") // is a reset of printer position  						|| (lineWithoutChecksum.StartsWith("T") && !lineWithoutChecksum.StartsWith("T:"))"  is complex.
Complex Conditional,SQLiteAndroid,Orm,C:\repos\MatterHackers_MatterControl\DataStorage\SQLiteAndroid.cs,SqlType,The conditional expression  "clrType == typeof(Boolean) || clrType == typeof(Byte) || clrType == typeof(UInt16) || clrType == typeof(SByte) || clrType == typeof(Int16) || clrType == typeof(Int32)"  is complex.
Complex Conditional,SQLiteAndroid,SQLiteCommand,C:\repos\MatterHackers_MatterControl\DataStorage\SQLiteAndroid.cs,BindParameter,The conditional expression  "value is Byte || value is UInt16 || value is SByte || value is Int16"  is complex.
Virtual Method Call from Constructor,MatterHackers.MatterControl,MenuBase,C:\repos\MatterHackers_MatterControl\ApplicationView\MenuRow\MenuBase.cs,MenuBase,The constructor "MenuBase" calls a virtual method "GetMenuActions".
Virtual Method Call from Constructor,MatterHackers.MatterControl.ActionBar,TemperatureWidgetBase,C:\repos\MatterHackers_MatterControl\ActionBar\TemperatureWidgetBase.cs,TemperatureWidgetBase,The constructor "TemperatureWidgetBase" calls a virtual method "SetTargetTemperature".
Virtual Method Call from Constructor,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,LevelWizardRadialBase,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\LevelWizard7PointRadial.cs,LevelWizardRadialBase,The constructor "LevelWizardRadialBase" calls a virtual method "GetPrintLevelPositionToSample".
Virtual Method Call from Constructor,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,View3DWidget,The constructor "View3DWidget" calls a virtual method "CreateInteractionVolume".
Virtual Method Call from Constructor,MatterHackers.MatterControl.PrintLibrary,LibraryRowItemPart,C:\repos\MatterHackers_MatterControl\Library\LibraryRowItemPart.cs,LibraryRowItemPart,The constructor "LibraryRowItemPart" calls a virtual method "GetPrintItemName".
Virtual Method Call from Constructor,MatterHackers.MatterControl.SlicerConfiguration,SliceEngineSelector,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SettingsControlSelectors.cs,SliceEngineSelector,The constructor "SliceEngineSelector" calls a virtual method "GetSliceEngineType".
Empty Catch Block,MatterHackers.MatterControl,UpdateControlData,C:\repos\MatterHackers_MatterControl\AboutPage\UpdateControlData.cs,DownloadUpdateTask,The method has an empty catch block.
Empty Catch Block,MatterHackers.MatterControl,ExportPrintItemWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\ExportPrintItemWindow.cs,ExportGcodeCommandLineUtility,The method has an empty catch block.
Empty Catch Block,MatterHackers.MatterControl,ApplicationController,C:\repos\MatterHackers_MatterControl\ApplicationView\MainApplicationWidget.cs,LoadCacheableAsync,The method has an empty catch block.
Empty Catch Block,MatterHackers.MatterControl,ApplicationController,C:\repos\MatterHackers_MatterControl\ApplicationView\MainApplicationWidget.cs,LoadCacheableAsync,The method has an empty catch block.
Empty Catch Block,MatterHackers.MatterControl,ApplicationController,C:\repos\MatterHackers_MatterControl\ApplicationView\MainApplicationWidget.cs,DownloadToImageAsync,The method has an empty catch block.
Empty Catch Block,MatterHackers.MatterControl,ApplicationController,C:\repos\MatterHackers_MatterControl\ApplicationView\MainApplicationWidget.cs,DownloadToImageAsync,The method has an empty catch block.
Empty Catch Block,MatterHackers.MatterControl,PartsSheet,C:\repos\MatterHackers_MatterControl\Queue\OptionsMenu\PartsSheetCreator.cs,SavingFunction,The method has an empty catch block.
Empty Catch Block,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,LoadImageFromDisk,The method has an empty catch block.
Empty Catch Block,MatterHackers.MatterControl,ApplicationSettings,C:\repos\MatterHackers_MatterControl\SettingsManagement\ApplicationSettings.cs,GetRunningClientTokens,The method has an empty catch block.
Empty Catch Block,MatterHackers.MatterControl.PrintLibrary.Provider,LibraryProviderSQLite,C:\repos\MatterHackers_MatterControl\Library\Provider\LibraryProviderSqlite.cs,PreLoadItemToQueue,The method has an empty catch block.
Empty Catch Block,MatterHackers.MatterControl.SlicerConfiguration,PrinterSettings,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\PrinterSettings.cs,RestoreFromOemProfile,The method has an empty catch block.
Empty Catch Block,MatterHackers.MatterControl.SlicerConfiguration,PrinterSettings,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\PrinterSettings.cs,GetFirstValidHistoryItem,The method has an empty catch block.
Empty Catch Block,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreatePrinterExtraControls,The method has an empty catch block.
Empty Catch Block,MatterHackers.MatterControl.SlicerConfiguration,SlicingQueue,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SlicingQueue.cs,CreateSlicedPartsThread,The method has an empty catch block.
Empty Catch Block,MatterHackers.MatterControl.PrinterCommunication,PrinterConnectionAndCommunication,C:\repos\MatterHackers_MatterControl\PrinterCommunication\PrinterConnectionAndCommunication.cs,BedTemperatureWasWritenToPrinter,The method has an empty catch block.
Empty Catch Block,MatterHackers.MatterControl.PrinterCommunication,PrinterConnectionAndCommunication,C:\repos\MatterHackers_MatterControl\PrinterCommunication\PrinterConnectionAndCommunication.cs,FanSpeedWasWritenToPrinter,The method has an empty catch block.
Empty Catch Block,MatterHackers.MatterControl.PrinterCommunication,PrinterConnectionAndCommunication,C:\repos\MatterHackers_MatterControl\PrinterCommunication\PrinterConnectionAndCommunication.cs,PrintActivePart,The method has an empty catch block.
Empty Catch Block,MatterHackers.MatterControl.PrinterCommunication,PrinterConnectionAndCommunication,C:\repos\MatterHackers_MatterControl\PrinterCommunication\PrinterConnectionAndCommunication.cs,ReadFromPrinter,The method has an empty catch block.
Empty Catch Block,MatterHackers.MatterControl.PrinterCommunication,PrinterConnectionAndCommunication,C:\repos\MatterHackers_MatterControl\PrinterCommunication\PrinterConnectionAndCommunication.cs,ReadFromPrinter,The method has an empty catch block.
Empty Catch Block,MatterHackers.MatterControl.PrinterCommunication,PrinterConnectionAndCommunication,C:\repos\MatterHackers_MatterControl\PrinterCommunication\PrinterConnectionAndCommunication.cs,RebootBoard,The method has an empty catch block.
Empty Catch Block,MatterHackers.MatterControl.PrinterCommunication,PrinterConnectionAndCommunication,C:\repos\MatterHackers_MatterControl\PrinterCommunication\PrinterConnectionAndCommunication.cs,TryWriteNextLineFromGCodeFile,The method has an empty catch block.
Empty Catch Block,MatterHackers.MatterControl.PrinterCommunication,PrinterConnectionAndCommunication,C:\repos\MatterHackers_MatterControl\PrinterCommunication\PrinterConnectionAndCommunication.cs,WriteRawToPrinter,The method has an empty catch block.
Empty Catch Block,MatterHackers.MatterControl.PrinterCommunication,PrinterConnectionAndCommunication,C:\repos\MatterHackers_MatterControl\PrinterCommunication\PrinterConnectionAndCommunication.cs,WriteRawToPrinter,The method has an empty catch block.
Empty Catch Block,MatterHackers.MatterControl.PrinterCommunication,ReadThread,C:\repos\MatterHackers_MatterControl\PrinterCommunication\PrinterConnectionAndCommunication.cs,ReadThread,The method has an empty catch block.
Magic Number,MatterHackers.MatterControl,HtmlWidget,C:\repos\MatterHackers_MatterControl\AboutPage\HTMLParser\HtmlWidget.cs,HtmlWidget,The following statement contains a magic number: linkButtonFactory.fontSize = 12;
Magic Number,MatterHackers.MatterControl,HtmlWidget,C:\repos\MatterHackers_MatterControl\AboutPage\HTMLParser\HtmlWidget.cs,AddContent,The following statement contains a magic number: switch (elementState.TypeName)  			{  				case "a":  					{  						elementsUnderConstruction.Push(new FlowLayoutWidget());  						elementsUnderConstruction.Peek().Name = "a";    						if (decodedHtml != null && decodedHtml != "")  						{  							Button linkButton = linkButtonFactory.Generate(decodedHtml.Replace("\r\n"' "\n"));  							StyledTypeFace styled = new StyledTypeFace(LiberationSansFont.Instance' elementState.PointSize);  							double descentInPixels = styled.DescentInPixels;  							linkButton.OriginRelativeParent = new VectorMath.Vector2(linkButton.OriginRelativeParent.x' linkButton.OriginRelativeParent.y + descentInPixels);  							linkButton.Click += (sender' mouseEvent) =>  							{  								MatterControlApplication.Instance.LaunchBrowser(elementState.Href);  							};  							elementsUnderConstruction.Peek().AddChild(linkButton);  						}  					}  					break;    				case "h1":  				case "p":  					{  						elementsUnderConstruction.Push(new FlowLayoutWidget());  						elementsUnderConstruction.Peek().Name = "p";  						elementsUnderConstruction.Peek().HAnchor = HAnchor.ParentLeftRight;    						if (decodedHtml != null && decodedHtml != "")  						{  							WrappingTextWidget content = new WrappingTextWidget(decodedHtml' pointSize: elementState.PointSize' textColor: ActiveTheme.Instance.PrimaryTextColor);  							//content.VAnchor = VAnchor.ParentTop;  							elementsUnderConstruction.Peek().AddChild(content);  						}  					}  					break;    				case "div":  					{  						elementsUnderConstruction.Push(new FlowLayoutWidget());  						elementsUnderConstruction.Peek().Name = "div";    						if (decodedHtml != null && decodedHtml != "")  						{  							TextWidget content = new TextWidget(decodedHtml' pointSize: elementState.PointSize' textColor: ActiveTheme.Instance.PrimaryTextColor);  							elementsUnderConstruction.Peek().AddChild(content);  						}  					}  					break;    				case "!DOCTYPE":  					break;    				case "body":  					break;    				case "html":  					break;    				case "img":  					{  						// put the image into the widget when it is done downloading.  						var image = new ImageBuffer(Math.Max(elementState.SizeFixed.x' 1)' Math.Max(elementState.SizeFixed.y' 1));  						var imageWidget = new ImageWidget(image);  						imageWidget.Load += (s' e) => ApplicationController.Instance.DownloadToImageAsync(image' elementState.src' elementState.SizeFixed.x != 0);    						if (elementsUnderConstruction.Peek().Name == "a")  						{  							Button linkButton = new Button(0' 0' imageWidget);  							linkButton.Cursor = Cursors.Hand;  							linkButton.Click += (sender' mouseEvent) =>  							{  								MatterControlApplication.Instance.LaunchBrowser(elementState.Href);  							};  							elementsUnderConstruction.Peek().AddChild(linkButton);  						}  						else  						{  							elementsUnderConstruction.Peek().AddChild(imageWidget);  						}  					}  					break;    				case "input":  					break;    				case "table":  					break;    				case "td":  				case "span":  					GuiWidget widgetToAdd;    					if (elementState.Classes.Contains("translate"))  					{  						decodedHtml = decodedHtml.Localize();  					}  					if (elementState.Classes.Contains("toUpper"))  					{  						decodedHtml = decodedHtml.ToUpper();  					}  					if (elementState.Classes.Contains("versionNumber"))  					{  						decodedHtml = VersionInfo.Instance.ReleaseVersion;  					}  					if (elementState.Classes.Contains("buildNumber"))  					{  						decodedHtml = VersionInfo.Instance.BuildVersion;  					}    					Button createdButton = null;  					if (elementState.Classes.Contains("centeredButton"))  					{  						createdButton = textImageButtonFactory.Generate(decodedHtml);  						widgetToAdd = createdButton;  					}  					else if (elementState.Classes.Contains("linkButton"))  					{  						double oldFontSize = linkButtonFactory.fontSize;  						linkButtonFactory.fontSize = elementState.PointSize;  						createdButton = linkButtonFactory.Generate(decodedHtml);  						StyledTypeFace styled = new StyledTypeFace(LiberationSansFont.Instance' elementState.PointSize);  						double descentInPixels = styled.DescentInPixels;  						createdButton.OriginRelativeParent = new VectorMath.Vector2(createdButton.OriginRelativeParent.x' createdButton.OriginRelativeParent.y + descentInPixels);  						widgetToAdd = createdButton;  						linkButtonFactory.fontSize = oldFontSize;  					}  					else  					{  						TextWidget content = new TextWidget(decodedHtml' pointSize: elementState.PointSize' textColor: ActiveTheme.Instance.PrimaryTextColor);  						widgetToAdd = content;  					}    					if (createdButton != null)  					{  						if (elementState.Id == "sendFeedback")  						{  							createdButton.Click += (s' e) =>  ContactFormWindow.Open();  						}  						else if (elementState.Id == "clearCache")  						{  							createdButton.Click += (s' e) => AboutWidget.DeleteCacheData(0);  						}  					}    					if (elementState.VerticalAlignment == ElementState.VerticalAlignType.top)  					{  						widgetToAdd.VAnchor = VAnchor.ParentTop;  					}    					elementsUnderConstruction.Peek().AddChild(widgetToAdd);  					break;    				case "tr":  					elementsUnderConstruction.Push(new FlowLayoutWidget());  					elementsUnderConstruction.Peek().Name = "tr";  					if (elementState.SizePercent.y == 100)  					{  						elementsUnderConstruction.Peek().VAnchor = VAnchor.ParentBottomTop;  					}  					if (elementState.Alignment == ElementState.AlignType.center)  					{  						elementsUnderConstruction.Peek().HAnchor |= HAnchor.ParentCenter;  					}  					break;    				default:  					throw new NotImplementedException("Don't know what to do with '{0}'".FormatWith(elementState.TypeName));  			}
Magic Number,MatterHackers.MatterControl,UpdateControlData,C:\repos\MatterHackers_MatterControl\AboutPage\UpdateControlData.cs,DownloadProgressChanged,The following statement contains a magic number: if (downloadSize > 0)  			{  				this.downloadPercent = (int)(e.BytesReceived * 100 / downloadSize);  			}
Magic Number,MatterHackers.MatterControl,UpdateControlData,C:\repos\MatterHackers_MatterControl\AboutPage\UpdateControlData.cs,UpdateControlData,The following statement contains a magic number: if (ApplicationSettings.Instance.GetClientToken() != null  				|| OemSettings.Instance.CheckForUpdatesOnFirstRun)  			{  				if (ApplicationSettings.Instance.GetClientToken() == null)  				{  					updateRequestType = UpdateRequestType.FirstTimeEver;  				}  				else  				{  					updateRequestType = UpdateRequestType.Automatic;  				}  				//If we have already requested an update once' check on load  				CheckForUpdate();  			}  			else  			{  				ApplicationSession firstSession;  				firstSession = Datastore.Instance.dbSQLite.Table<ApplicationSession>().OrderBy(v => v.SessionStart).Take(1).FirstOrDefault();  				if (firstSession != null  					&& DateTime.Compare(firstSession.SessionStart.AddDays(7)' DateTime.Now) < 0)  				{  					SetUpdateStatus(UpdateStatusStates.UpdateAvailable);  				}  			}
Magic Number,MatterHackers.MatterControl,UpdateControlData,C:\repos\MatterHackers_MatterControl\AboutPage\UpdateControlData.cs,InstallUpdate,The following statement contains a magic number: try  			{  				//Change download file to friendly file name  				System.IO.File.Move(updateFileName' friendlyFileName);  #if __ANDROID__  				if (InstallUpdateFromMainActivity != null)  				{  					InstallUpdateFromMainActivity(this' null);  				}  				return true;  #else  				int tries = 0;  				do  				{  					Thread.Sleep(10);  				} while (tries++ < 100 && !File.Exists(friendlyFileName));    				//Run installer file  				Process installUpdate = new Process();  				installUpdate.StartInfo.FileName = friendlyFileName;  				installUpdate.Start();    				//Attempt to close current application  				SystemWindow topSystemWindow = MatterControlApplication.Instance as SystemWindow;  				if (topSystemWindow != null)  				{  					topSystemWindow.CloseOnIdle();  					return true;  				}  #endif  			}  			catch  			{  				GuiWidget.BreakInDebugger();  				if (System.IO.File.Exists(friendlyFileName))  				{  					System.IO.File.Delete(friendlyFileName);  				}  			}
Magic Number,MatterHackers.MatterControl,UpdateControlData,C:\repos\MatterHackers_MatterControl\AboutPage\UpdateControlData.cs,InstallUpdate,The following statement contains a magic number: try  			{  				//Change download file to friendly file name  				System.IO.File.Move(updateFileName' friendlyFileName);  #if __ANDROID__  				if (InstallUpdateFromMainActivity != null)  				{  					InstallUpdateFromMainActivity(this' null);  				}  				return true;  #else  				int tries = 0;  				do  				{  					Thread.Sleep(10);  				} while (tries++ < 100 && !File.Exists(friendlyFileName));    				//Run installer file  				Process installUpdate = new Process();  				installUpdate.StartInfo.FileName = friendlyFileName;  				installUpdate.Start();    				//Attempt to close current application  				SystemWindow topSystemWindow = MatterControlApplication.Instance as SystemWindow;  				if (topSystemWindow != null)  				{  					topSystemWindow.CloseOnIdle();  					return true;  				}  #endif  			}  			catch  			{  				GuiWidget.BreakInDebugger();  				if (System.IO.File.Exists(friendlyFileName))  				{  					System.IO.File.Delete(friendlyFileName);  				}  			}
Magic Number,MatterHackers.MatterControl,UpdateControlView,C:\repos\MatterHackers_MatterControl\AboutPage\UpdateControlView.cs,UpdateControlView,The following statement contains a magic number: Padding = new BorderDouble(6' 5);
Magic Number,MatterHackers.MatterControl,UpdateControlView,C:\repos\MatterHackers_MatterControl\AboutPage\UpdateControlView.cs,UpdateControlView,The following statement contains a magic number: Padding = new BorderDouble(6' 5);
Magic Number,MatterHackers.MatterControl,UpdateControlView,C:\repos\MatterHackers_MatterControl\AboutPage\UpdateControlView.cs,UpdateControlView,The following statement contains a magic number: MinimumSize = new VectorMath.Vector2(0' 50);
Magic Number,MatterHackers.MatterControl,ActionBarPlus,C:\repos\MatterHackers_MatterControl\ActionBar\ActionBarPlus.cs,ActionBarPlus,The following statement contains a magic number: this.Padding = new BorderDouble(bottom: 6);
Magic Number,MatterHackers.MatterControl,PrinterSelector,C:\repos\MatterHackers_MatterControl\ActionBar\PrinterSelector.cs,Rebuild,The following statement contains a magic number: var menuItem = this.AddItem(StaticData.Instance.LoadIcon("icon_plus.png"' 32' 32)' "Add New Printer".Localize() + "..."' "new");
Magic Number,MatterHackers.MatterControl,PrinterSelector,C:\repos\MatterHackers_MatterControl\ActionBar\PrinterSelector.cs,Rebuild,The following statement contains a magic number: var menuItem = this.AddItem(StaticData.Instance.LoadIcon("icon_plus.png"' 32' 32)' "Add New Printer".Localize() + "..."' "new");
Magic Number,MatterHackers.MatterControl,MenuBase,C:\repos\MatterHackers_MatterControl\ApplicationView\MenuRow\MenuBase.cs,MenuBase,The following statement contains a magic number: MenuDropList = new DropDownMenu(menuName.ToUpper()' Direction.Down' pointSize: 10);
Magic Number,MatterHackers.MatterControl,MenuBase,C:\repos\MatterHackers_MatterControl\ApplicationView\MenuRow\MenuBase.cs,MenuBase,The following statement contains a magic number: MenuDropList.Padding = new BorderDouble(4' 4' 0' 4);
Magic Number,MatterHackers.MatterControl,MenuBase,C:\repos\MatterHackers_MatterControl\ApplicationView\MenuRow\MenuBase.cs,MenuBase,The following statement contains a magic number: MenuDropList.Padding = new BorderDouble(4' 4' 0' 4);
Magic Number,MatterHackers.MatterControl,MenuBase,C:\repos\MatterHackers_MatterControl\ApplicationView\MenuRow\MenuBase.cs,MenuBase,The following statement contains a magic number: MenuDropList.Padding = new BorderDouble(4' 4' 0' 4);
Magic Number,MatterHackers.MatterControl,MenuBase,C:\repos\MatterHackers_MatterControl\ApplicationView\MenuRow\MenuBase.cs,MenuBase,The following statement contains a magic number: MenuDropList.MenuItemsPadding = new BorderDouble(8' 4);
Magic Number,MatterHackers.MatterControl,MenuBase,C:\repos\MatterHackers_MatterControl\ApplicationView\MenuRow\MenuBase.cs,MenuBase,The following statement contains a magic number: MenuDropList.MenuItemsPadding = new BorderDouble(8' 4);
Magic Number,MatterHackers.MatterControl,MenuBase,C:\repos\MatterHackers_MatterControl\ApplicationView\MenuRow\MenuBase.cs,MenuBase,The following statement contains a magic number: foreach (MenuItemAction item in menuActions)  			{  				if (item.Title.StartsWith("-----"))  				{  					MenuDropList.AddHorizontalLine();  				}  				else  				{  					MenuItem newItem = MenuDropList.AddItem(item.Title' pointSize: 11);  					if (item.Action == null)  					{  						newItem.Enabled = false;  					}  				}  			}
Magic Number,MatterHackers.MatterControl,MenuBase,C:\repos\MatterHackers_MatterControl\ApplicationView\MenuRow\MenuBase.cs,MenuBase,The following statement contains a magic number: this.Height = 22 * GuiWidget.DeviceScale;
Magic Number,MatterHackers.MatterControl,ApplicationMenuRow,C:\repos\MatterHackers_MatterControl\ApplicationView\MenuRow\ApplicationMenuRow.cs,ApplicationMenuRow,The following statement contains a magic number: linkButtonFactory.fontSize = 8;
Magic Number,MatterHackers.MatterControl,ApplicationMenuRow,C:\repos\MatterHackers_MatterControl\ApplicationView\MenuRow\ApplicationMenuRow.cs,ApplicationMenuRow,The following statement contains a magic number: linkButtonFactory.fontSize = 10;
Magic Number,MatterHackers.MatterControl,ApplicationMenuRow,C:\repos\MatterHackers_MatterControl\ApplicationView\MenuRow\ApplicationMenuRow.cs,ApplicationMenuRow,The following statement contains a magic number: popUpAboutPage.Margin = new BorderDouble(30' 0' 0' 0);
Magic Number,MatterHackers.MatterControl,ApplicationMenuRow,C:\repos\MatterHackers_MatterControl\ApplicationView\MenuRow\ApplicationMenuRow.cs,SetUpdateNotification,The following statement contains a magic number: switch (UpdateControlData.Instance.UpdateStatus)  			{  				case UpdateControlData.UpdateStatusStates.MayBeAvailable:  					{  						popUpAboutPage.RemoveAllChildren();  						Button updateStatusMessage = linkButtonFactory.Generate("Check For Update".Localize());  						updateStatusMessage.Click += (sender2' e) =>  						{  							UiThread.RunOnIdle(CheckForUpdateWindow.Show);  						};  						popUpAboutPage.AddChild(updateStatusMessage);  						popUpAboutPage.Visible = true;  					}  					break;    				case UpdateControlData.UpdateStatusStates.ReadyToInstall:  				case UpdateControlData.UpdateStatusStates.UpdateAvailable:  				case UpdateControlData.UpdateStatusStates.UpdateDownloading:  					{  						popUpAboutPage.RemoveAllChildren();  						Button updateStatusMessage = linkButtonFactory.Generate("Update Available".Localize());  						updateStatusMessage.Click += (sender2' e) =>  						{  							UiThread.RunOnIdle(CheckForUpdateWindow.Show);  						};  						var updateMark = new UpdateNotificationMark();  						updateMark.Margin = new BorderDouble(0' 0' 3' 2);  						updateMark.VAnchor = VAnchor.ParentTop;  						popUpAboutPage.AddChild(updateMark);  						popUpAboutPage.AddChild(updateStatusMessage);  						popUpAboutPage.Visible = true;  					}  					break;    				case UpdateControlData.UpdateStatusStates.UpToDate:  					if (AlwaysShowUpdateStatus)  					{  						popUpAboutPage.RemoveAllChildren();  						TextWidget updateStatusMessage = new TextWidget("Up to Date".Localize()' textColor: linkButtonFactory.textColor' pointSize: linkButtonFactory.fontSize);  						updateStatusMessage.VAnchor = VAnchor.ParentCenter;  						popUpAboutPage.AddChild(updateStatusMessage);  						popUpAboutPage.Visible = true;    						UiThread.RunOnIdle((state) => popUpAboutPage.Visible = false' 3);  						AlwaysShowUpdateStatus = false;  					}  					else  					{  						popUpAboutPage.Visible = false;  					}  					break;    				case UpdateControlData.UpdateStatusStates.CheckingForUpdate:  					if (AlwaysShowUpdateStatus)  					{  						popUpAboutPage.RemoveAllChildren();  						TextWidget updateStatusMessage = new TextWidget("Checking For Update...".Localize()' textColor: linkButtonFactory.textColor' pointSize: linkButtonFactory.fontSize);  						updateStatusMessage.VAnchor = VAnchor.ParentCenter;  						popUpAboutPage.AddChild(updateStatusMessage);  						popUpAboutPage.Visible = true;  					}  					else  					{  						popUpAboutPage.Visible = false;  					}  					break;    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterHackers.MatterControl,ApplicationMenuRow,C:\repos\MatterHackers_MatterControl\ApplicationView\MenuRow\ApplicationMenuRow.cs,SetUpdateNotification,The following statement contains a magic number: switch (UpdateControlData.Instance.UpdateStatus)  			{  				case UpdateControlData.UpdateStatusStates.MayBeAvailable:  					{  						popUpAboutPage.RemoveAllChildren();  						Button updateStatusMessage = linkButtonFactory.Generate("Check For Update".Localize());  						updateStatusMessage.Click += (sender2' e) =>  						{  							UiThread.RunOnIdle(CheckForUpdateWindow.Show);  						};  						popUpAboutPage.AddChild(updateStatusMessage);  						popUpAboutPage.Visible = true;  					}  					break;    				case UpdateControlData.UpdateStatusStates.ReadyToInstall:  				case UpdateControlData.UpdateStatusStates.UpdateAvailable:  				case UpdateControlData.UpdateStatusStates.UpdateDownloading:  					{  						popUpAboutPage.RemoveAllChildren();  						Button updateStatusMessage = linkButtonFactory.Generate("Update Available".Localize());  						updateStatusMessage.Click += (sender2' e) =>  						{  							UiThread.RunOnIdle(CheckForUpdateWindow.Show);  						};  						var updateMark = new UpdateNotificationMark();  						updateMark.Margin = new BorderDouble(0' 0' 3' 2);  						updateMark.VAnchor = VAnchor.ParentTop;  						popUpAboutPage.AddChild(updateMark);  						popUpAboutPage.AddChild(updateStatusMessage);  						popUpAboutPage.Visible = true;  					}  					break;    				case UpdateControlData.UpdateStatusStates.UpToDate:  					if (AlwaysShowUpdateStatus)  					{  						popUpAboutPage.RemoveAllChildren();  						TextWidget updateStatusMessage = new TextWidget("Up to Date".Localize()' textColor: linkButtonFactory.textColor' pointSize: linkButtonFactory.fontSize);  						updateStatusMessage.VAnchor = VAnchor.ParentCenter;  						popUpAboutPage.AddChild(updateStatusMessage);  						popUpAboutPage.Visible = true;    						UiThread.RunOnIdle((state) => popUpAboutPage.Visible = false' 3);  						AlwaysShowUpdateStatus = false;  					}  					else  					{  						popUpAboutPage.Visible = false;  					}  					break;    				case UpdateControlData.UpdateStatusStates.CheckingForUpdate:  					if (AlwaysShowUpdateStatus)  					{  						popUpAboutPage.RemoveAllChildren();  						TextWidget updateStatusMessage = new TextWidget("Checking For Update...".Localize()' textColor: linkButtonFactory.textColor' pointSize: linkButtonFactory.fontSize);  						updateStatusMessage.VAnchor = VAnchor.ParentCenter;  						popUpAboutPage.AddChild(updateStatusMessage);  						popUpAboutPage.Visible = true;  					}  					else  					{  						popUpAboutPage.Visible = false;  					}  					break;    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterHackers.MatterControl,ApplicationMenuRow,C:\repos\MatterHackers_MatterControl\ApplicationView\MenuRow\ApplicationMenuRow.cs,SetUpdateNotification,The following statement contains a magic number: switch (UpdateControlData.Instance.UpdateStatus)  			{  				case UpdateControlData.UpdateStatusStates.MayBeAvailable:  					{  						popUpAboutPage.RemoveAllChildren();  						Button updateStatusMessage = linkButtonFactory.Generate("Check For Update".Localize());  						updateStatusMessage.Click += (sender2' e) =>  						{  							UiThread.RunOnIdle(CheckForUpdateWindow.Show);  						};  						popUpAboutPage.AddChild(updateStatusMessage);  						popUpAboutPage.Visible = true;  					}  					break;    				case UpdateControlData.UpdateStatusStates.ReadyToInstall:  				case UpdateControlData.UpdateStatusStates.UpdateAvailable:  				case UpdateControlData.UpdateStatusStates.UpdateDownloading:  					{  						popUpAboutPage.RemoveAllChildren();  						Button updateStatusMessage = linkButtonFactory.Generate("Update Available".Localize());  						updateStatusMessage.Click += (sender2' e) =>  						{  							UiThread.RunOnIdle(CheckForUpdateWindow.Show);  						};  						var updateMark = new UpdateNotificationMark();  						updateMark.Margin = new BorderDouble(0' 0' 3' 2);  						updateMark.VAnchor = VAnchor.ParentTop;  						popUpAboutPage.AddChild(updateMark);  						popUpAboutPage.AddChild(updateStatusMessage);  						popUpAboutPage.Visible = true;  					}  					break;    				case UpdateControlData.UpdateStatusStates.UpToDate:  					if (AlwaysShowUpdateStatus)  					{  						popUpAboutPage.RemoveAllChildren();  						TextWidget updateStatusMessage = new TextWidget("Up to Date".Localize()' textColor: linkButtonFactory.textColor' pointSize: linkButtonFactory.fontSize);  						updateStatusMessage.VAnchor = VAnchor.ParentCenter;  						popUpAboutPage.AddChild(updateStatusMessage);  						popUpAboutPage.Visible = true;    						UiThread.RunOnIdle((state) => popUpAboutPage.Visible = false' 3);  						AlwaysShowUpdateStatus = false;  					}  					else  					{  						popUpAboutPage.Visible = false;  					}  					break;    				case UpdateControlData.UpdateStatusStates.CheckingForUpdate:  					if (AlwaysShowUpdateStatus)  					{  						popUpAboutPage.RemoveAllChildren();  						TextWidget updateStatusMessage = new TextWidget("Checking For Update...".Localize()' textColor: linkButtonFactory.textColor' pointSize: linkButtonFactory.fontSize);  						updateStatusMessage.VAnchor = VAnchor.ParentCenter;  						popUpAboutPage.AddChild(updateStatusMessage);  						popUpAboutPage.Visible = true;  					}  					else  					{  						popUpAboutPage.Visible = false;  					}  					break;    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterHackers.MatterControl,CompactSlidePanel,C:\repos\MatterHackers_MatterControl\ApplicationView\CompactSlidePanel.cs,CompactSlidePanel,The following statement contains a magic number: {  				// first add the print progress bar  				this.LeftPanel.AddChild(new PrintProgressBar());    				// construct the main controls tab control  				mainControlsTabControl = new FirstPanelTabView(queueDataView);    				var advancedControlsButtonFactory = new TextImageButtonFactory()  				{  					normalTextColor = ActiveTheme.Instance.PrimaryTextColor'  					hoverTextColor = ActiveTheme.Instance.PrimaryTextColor'  					pressedTextColor = ActiveTheme.Instance.PrimaryTextColor'  					fontSize = 10'    					disabledTextColor = RGBA_Bytes.LightGray'  					disabledFillColor = ActiveTheme.Instance.PrimaryBackgroundColor'  					disabledBorderColor = ActiveTheme.Instance.PrimaryBackgroundColor'    					invertImageLocation = true  				};    				Button advancedControlsLinkButton = advancedControlsButtonFactory.Generate("Settings\n& Controls".Localize()'   					StaticData.Instance.LoadIcon("icon_arrow_right_32x32.png"' 32'32));  				advancedControlsLinkButton.Name = "SettingsAndControls";  				advancedControlsLinkButton.ToolTipText = "Switch to Settings' Controls and Options".Localize();  				advancedControlsLinkButton.Margin = new BorderDouble(right: 3);  				advancedControlsLinkButton.VAnchor = VAnchor.ParentBottom;  				advancedControlsLinkButton.Cursor = Cursors.Hand;  				advancedControlsLinkButton.Click += ToggleActivePanel_Click;    				mainControlsTabControl.TabBar.AddChild(new HorizontalSpacer());  				mainControlsTabControl.TabBar.AddChild(advancedControlsLinkButton);  				mainControlsTabControl.TabBar.HAnchor = HAnchor.Max_FitToChildren_ParentWidth;  				mainControlsTabControl.HAnchor = HAnchor.Max_FitToChildren_ParentWidth;    				this.LeftPanel.AddChild(mainControlsTabControl);  			}
Magic Number,MatterHackers.MatterControl,CompactSlidePanel,C:\repos\MatterHackers_MatterControl\ApplicationView\CompactSlidePanel.cs,CompactSlidePanel,The following statement contains a magic number: {  				// first add the print progress bar  				this.LeftPanel.AddChild(new PrintProgressBar());    				// construct the main controls tab control  				mainControlsTabControl = new FirstPanelTabView(queueDataView);    				var advancedControlsButtonFactory = new TextImageButtonFactory()  				{  					normalTextColor = ActiveTheme.Instance.PrimaryTextColor'  					hoverTextColor = ActiveTheme.Instance.PrimaryTextColor'  					pressedTextColor = ActiveTheme.Instance.PrimaryTextColor'  					fontSize = 10'    					disabledTextColor = RGBA_Bytes.LightGray'  					disabledFillColor = ActiveTheme.Instance.PrimaryBackgroundColor'  					disabledBorderColor = ActiveTheme.Instance.PrimaryBackgroundColor'    					invertImageLocation = true  				};    				Button advancedControlsLinkButton = advancedControlsButtonFactory.Generate("Settings\n& Controls".Localize()'   					StaticData.Instance.LoadIcon("icon_arrow_right_32x32.png"' 32'32));  				advancedControlsLinkButton.Name = "SettingsAndControls";  				advancedControlsLinkButton.ToolTipText = "Switch to Settings' Controls and Options".Localize();  				advancedControlsLinkButton.Margin = new BorderDouble(right: 3);  				advancedControlsLinkButton.VAnchor = VAnchor.ParentBottom;  				advancedControlsLinkButton.Cursor = Cursors.Hand;  				advancedControlsLinkButton.Click += ToggleActivePanel_Click;    				mainControlsTabControl.TabBar.AddChild(new HorizontalSpacer());  				mainControlsTabControl.TabBar.AddChild(advancedControlsLinkButton);  				mainControlsTabControl.TabBar.HAnchor = HAnchor.Max_FitToChildren_ParentWidth;  				mainControlsTabControl.HAnchor = HAnchor.Max_FitToChildren_ParentWidth;    				this.LeftPanel.AddChild(mainControlsTabControl);  			}
Magic Number,MatterHackers.MatterControl,CompactSlidePanel,C:\repos\MatterHackers_MatterControl\ApplicationView\CompactSlidePanel.cs,CompactSlidePanel,The following statement contains a magic number: {  				// first add the print progress bar  				this.LeftPanel.AddChild(new PrintProgressBar());    				// construct the main controls tab control  				mainControlsTabControl = new FirstPanelTabView(queueDataView);    				var advancedControlsButtonFactory = new TextImageButtonFactory()  				{  					normalTextColor = ActiveTheme.Instance.PrimaryTextColor'  					hoverTextColor = ActiveTheme.Instance.PrimaryTextColor'  					pressedTextColor = ActiveTheme.Instance.PrimaryTextColor'  					fontSize = 10'    					disabledTextColor = RGBA_Bytes.LightGray'  					disabledFillColor = ActiveTheme.Instance.PrimaryBackgroundColor'  					disabledBorderColor = ActiveTheme.Instance.PrimaryBackgroundColor'    					invertImageLocation = true  				};    				Button advancedControlsLinkButton = advancedControlsButtonFactory.Generate("Settings\n& Controls".Localize()'   					StaticData.Instance.LoadIcon("icon_arrow_right_32x32.png"' 32'32));  				advancedControlsLinkButton.Name = "SettingsAndControls";  				advancedControlsLinkButton.ToolTipText = "Switch to Settings' Controls and Options".Localize();  				advancedControlsLinkButton.Margin = new BorderDouble(right: 3);  				advancedControlsLinkButton.VAnchor = VAnchor.ParentBottom;  				advancedControlsLinkButton.Cursor = Cursors.Hand;  				advancedControlsLinkButton.Click += ToggleActivePanel_Click;    				mainControlsTabControl.TabBar.AddChild(new HorizontalSpacer());  				mainControlsTabControl.TabBar.AddChild(advancedControlsLinkButton);  				mainControlsTabControl.TabBar.HAnchor = HAnchor.Max_FitToChildren_ParentWidth;  				mainControlsTabControl.HAnchor = HAnchor.Max_FitToChildren_ParentWidth;    				this.LeftPanel.AddChild(mainControlsTabControl);  			}
Magic Number,MatterHackers.MatterControl,CompactSlidePanel,C:\repos\MatterHackers_MatterControl\ApplicationView\CompactSlidePanel.cs,CompactSlidePanel,The following statement contains a magic number: {  				// first add the print progress bar  				this.LeftPanel.AddChild(new PrintProgressBar());    				// construct the main controls tab control  				mainControlsTabControl = new FirstPanelTabView(queueDataView);    				var advancedControlsButtonFactory = new TextImageButtonFactory()  				{  					normalTextColor = ActiveTheme.Instance.PrimaryTextColor'  					hoverTextColor = ActiveTheme.Instance.PrimaryTextColor'  					pressedTextColor = ActiveTheme.Instance.PrimaryTextColor'  					fontSize = 10'    					disabledTextColor = RGBA_Bytes.LightGray'  					disabledFillColor = ActiveTheme.Instance.PrimaryBackgroundColor'  					disabledBorderColor = ActiveTheme.Instance.PrimaryBackgroundColor'    					invertImageLocation = true  				};    				Button advancedControlsLinkButton = advancedControlsButtonFactory.Generate("Settings\n& Controls".Localize()'   					StaticData.Instance.LoadIcon("icon_arrow_right_32x32.png"' 32'32));  				advancedControlsLinkButton.Name = "SettingsAndControls";  				advancedControlsLinkButton.ToolTipText = "Switch to Settings' Controls and Options".Localize();  				advancedControlsLinkButton.Margin = new BorderDouble(right: 3);  				advancedControlsLinkButton.VAnchor = VAnchor.ParentBottom;  				advancedControlsLinkButton.Cursor = Cursors.Hand;  				advancedControlsLinkButton.Click += ToggleActivePanel_Click;    				mainControlsTabControl.TabBar.AddChild(new HorizontalSpacer());  				mainControlsTabControl.TabBar.AddChild(advancedControlsLinkButton);  				mainControlsTabControl.TabBar.HAnchor = HAnchor.Max_FitToChildren_ParentWidth;  				mainControlsTabControl.HAnchor = HAnchor.Max_FitToChildren_ParentWidth;    				this.LeftPanel.AddChild(mainControlsTabControl);  			}
Magic Number,MatterHackers.MatterControl,TouchscreenTabView,C:\repos\MatterHackers_MatterControl\ApplicationView\TouchscreenTabView.cs,TouchscreenTabView,The following statement contains a magic number: this.TabBar.Margin = new BorderDouble(4' 0' 0' 0);
Magic Number,MatterHackers.MatterControl,TouchscreenTabView,C:\repos\MatterHackers_MatterControl\ApplicationView\TouchscreenTabView.cs,TouchscreenTabView,The following statement contains a magic number: this.TabBar.Padding = new BorderDouble(0' 8);
Magic Number,MatterHackers.MatterControl,TouchscreenTabView,C:\repos\MatterHackers_MatterControl\ApplicationView\TouchscreenTabView.cs,TouchscreenTabView,The following statement contains a magic number: this.TabTextSize = 18;
Magic Number,MatterHackers.MatterControl,TouchscreenTabView,C:\repos\MatterHackers_MatterControl\ApplicationView\TouchscreenTabView.cs,TouchscreenTabView,The following statement contains a magic number: BorderDouble horizontalSpacerMargin = new BorderDouble(4' 10);
Magic Number,MatterHackers.MatterControl,TouchscreenTabView,C:\repos\MatterHackers_MatterControl\ApplicationView\TouchscreenTabView.cs,TouchscreenTabView,The following statement contains a magic number: BorderDouble horizontalSpacerMargin = new BorderDouble(4' 10);
Magic Number,MatterHackers.MatterControl,TouchscreenTabView,C:\repos\MatterHackers_MatterControl\ApplicationView\TouchscreenTabView.cs,TouchscreenTabView,The following statement contains a magic number: this.Load += (s' e) =>  			{  				if (!simpleMode && !TouchScreenIsTall)  				{  					foreach (GuiWidget horizontalLine in this.TabBar.Children<HorizontalLine>())  					{  						horizontalLine.Margin = new BorderDouble(4' 5);  					}  				}  			};
Magic Number,MatterHackers.MatterControl,TouchscreenTabView,C:\repos\MatterHackers_MatterControl\ApplicationView\TouchscreenTabView.cs,TouchscreenTabView,The following statement contains a magic number: this.Load += (s' e) =>  			{  				if (!simpleMode && !TouchScreenIsTall)  				{  					foreach (GuiWidget horizontalLine in this.TabBar.Children<HorizontalLine>())  					{  						horizontalLine.Margin = new BorderDouble(4' 5);  					}  				}  			};
Magic Number,MatterHackers.MatterControl,TouchscreenTabView,C:\repos\MatterHackers_MatterControl\ApplicationView\TouchscreenTabView.cs,SetUpdateNotification,The following statement contains a magic number: switch (UpdateControlData.Instance.UpdateStatus)  			{  				case UpdateControlData.UpdateStatusStates.MayBeAvailable:  				case UpdateControlData.UpdateStatusStates.ReadyToInstall:  				case UpdateControlData.UpdateStatusStates.UpdateAvailable:  				case UpdateControlData.UpdateStatusStates.UpdateDownloading:  					if (addedUpdateMark == null)  					{  						addedUpdateMark = new UpdateNotificationMark();    						var aboutTabWidget = TabBar.FindNamedChildRecursive("About Tab") as SimpleTextTabWidget;  						addedUpdateMark.OriginRelativeParent = new Vector2(aboutTabWidget.tabTitle.Width + 3' 7 * GuiWidget.DeviceScale);  						aboutTabWidget.AddChild(addedUpdateMark);  					}  					addedUpdateMark.Visible = true;  					break;    				case UpdateControlData.UpdateStatusStates.UpToDate:  				case UpdateControlData.UpdateStatusStates.CheckingForUpdate:  					if (addedUpdateMark != null)  					{  						addedUpdateMark.Visible = false;  					}  					break;    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterHackers.MatterControl,TouchscreenTabView,C:\repos\MatterHackers_MatterControl\ApplicationView\TouchscreenTabView.cs,SetUpdateNotification,The following statement contains a magic number: switch (UpdateControlData.Instance.UpdateStatus)  			{  				case UpdateControlData.UpdateStatusStates.MayBeAvailable:  				case UpdateControlData.UpdateStatusStates.ReadyToInstall:  				case UpdateControlData.UpdateStatusStates.UpdateAvailable:  				case UpdateControlData.UpdateStatusStates.UpdateDownloading:  					if (addedUpdateMark == null)  					{  						addedUpdateMark = new UpdateNotificationMark();    						var aboutTabWidget = TabBar.FindNamedChildRecursive("About Tab") as SimpleTextTabWidget;  						addedUpdateMark.OriginRelativeParent = new Vector2(aboutTabWidget.tabTitle.Width + 3' 7 * GuiWidget.DeviceScale);  						aboutTabWidget.AddChild(addedUpdateMark);  					}  					addedUpdateMark.Visible = true;  					break;    				case UpdateControlData.UpdateStatusStates.UpToDate:  				case UpdateControlData.UpdateStatusStates.CheckingForUpdate:  					if (addedUpdateMark != null)  					{  						addedUpdateMark.Visible = false;  					}  					break;    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterHackers.MatterControl,AdvancedControlsPanel,C:\repos\MatterHackers_MatterControl\ApplicationView\AdvancedControlsPanel.cs,CreateAdvancedControlsTab,The following statement contains a magic number: advancedControls.TabBar.Padding = new BorderDouble(0' 2);
Magic Number,MatterHackers.MatterControl,AdvancedControlsPanel,C:\repos\MatterHackers_MatterControl\ApplicationView\AdvancedControlsPanel.cs,CreateAdvancedControlsTab,The following statement contains a magic number: int textSize = 16;
Magic Number,MatterHackers.MatterControl,AdvancedControlsPanel,C:\repos\MatterHackers_MatterControl\ApplicationView\AdvancedControlsPanel.cs,CreateAdvancedControlsTab,The following statement contains a magic number: textSize = 14;
Magic Number,MatterHackers.MatterControl,AdvancedControlsPanel,C:\repos\MatterHackers_MatterControl\ApplicationView\AdvancedControlsPanel.cs,CreateAdvancedControlsTab,The following statement contains a magic number: advancedControlsButtonFactory.fontSize = 14;
Magic Number,MatterHackers.MatterControl,AdvancedControlsPanel,C:\repos\MatterHackers_MatterControl\ApplicationView\AdvancedControlsPanel.cs,CreateAdvancedControlsTab,The following statement contains a magic number: backButton = advancedControlsButtonFactory.Generate("Back".Localize()' StaticData.Instance.LoadIcon("icon_arrow_left_32x32.png"' 32' 32));
Magic Number,MatterHackers.MatterControl,AdvancedControlsPanel,C:\repos\MatterHackers_MatterControl\ApplicationView\AdvancedControlsPanel.cs,CreateAdvancedControlsTab,The following statement contains a magic number: backButton = advancedControlsButtonFactory.Generate("Back".Localize()' StaticData.Instance.LoadIcon("icon_arrow_left_32x32.png"' 32' 32));
Magic Number,MatterHackers.MatterControl,AdvancedControlsPanel,C:\repos\MatterHackers_MatterControl\ApplicationView\AdvancedControlsPanel.cs,CreateAdvancedControlsTab,The following statement contains a magic number: backButton.Margin = new BorderDouble(right: 3);
Magic Number,MatterHackers.MatterControl,AdvancedControlsPanel,C:\repos\MatterHackers_MatterControl\ApplicationView\AdvancedControlsPanel.cs,CreateAdvancedControlsTab,The following statement contains a magic number: var sliceSettingPopOut = new PopOutTextTabWidget(sliceSettingsTabPage' SliceSettingsTabName' new Vector2(590' 400)' textSize);
Magic Number,MatterHackers.MatterControl,AdvancedControlsPanel,C:\repos\MatterHackers_MatterControl\ApplicationView\AdvancedControlsPanel.cs,CreateAdvancedControlsTab,The following statement contains a magic number: var sliceSettingPopOut = new PopOutTextTabWidget(sliceSettingsTabPage' SliceSettingsTabName' new Vector2(590' 400)' textSize);
Magic Number,MatterHackers.MatterControl,AdvancedControlsPanel,C:\repos\MatterHackers_MatterControl\ApplicationView\AdvancedControlsPanel.cs,CreateAdvancedControlsTab,The following statement contains a magic number: var controlsPopOut = new PopOutTextTabWidget(controlsTabPage' ControlsTabName' new Vector2(400' 300)' textSize);
Magic Number,MatterHackers.MatterControl,AdvancedControlsPanel,C:\repos\MatterHackers_MatterControl\ApplicationView\AdvancedControlsPanel.cs,CreateAdvancedControlsTab,The following statement contains a magic number: var controlsPopOut = new PopOutTextTabWidget(controlsTabPage' ControlsTabName' new Vector2(400' 300)' textSize);
Magic Number,MatterHackers.MatterControl,FirstPanelTabView,C:\repos\MatterHackers_MatterControl\ApplicationView\FirstPanelTabView.cs,FirstPanelTabView,The following statement contains a magic number: this.TabBar.Padding = new BorderDouble(0' 2);
Magic Number,MatterHackers.MatterControl,FirstPanelTabView,C:\repos\MatterHackers_MatterControl\ApplicationView\FirstPanelTabView.cs,FirstPanelTabView,The following statement contains a magic number: this.Margin = new BorderDouble(top: 4);
Magic Number,MatterHackers.MatterControl,FirstPanelTabView,C:\repos\MatterHackers_MatterControl\ApplicationView\FirstPanelTabView.cs,FirstPanelTabView,The following statement contains a magic number: this.AddTab(new SimpleTextTabWidget(QueueTabPage' "Queue Tab"' 15'  					ActiveTheme.Instance.TabLabelSelected' new RGBA_Bytes()' unselectedTextColor' new RGBA_Bytes()));
Magic Number,MatterHackers.MatterControl,FirstPanelTabView,C:\repos\MatterHackers_MatterControl\ApplicationView\FirstPanelTabView.cs,FirstPanelTabView,The following statement contains a magic number: this.AddTab(new SimpleTextTabWidget(LibraryTabPage' "Library Tab"' 15'  					ActiveTheme.Instance.TabLabelSelected' new RGBA_Bytes()' unselectedTextColor' new RGBA_Bytes()));
Magic Number,MatterHackers.MatterControl,FirstPanelTabView,C:\repos\MatterHackers_MatterControl\ApplicationView\FirstPanelTabView.cs,FirstPanelTabView,The following statement contains a magic number: this.AddTab(new SimpleTextTabWidget(HistoryTabPage' "History Tab"' 15'  					ActiveTheme.Instance.TabLabelSelected' new RGBA_Bytes()' unselectedTextColor' new RGBA_Bytes()));
Magic Number,MatterHackers.MatterControl,InstructionsPage,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\InstructionsPage.cs,InstructionsPage,The following statement contains a magic number: if (UserSettings.Instance.IsTouchScreen)  			{  				extraTextScaling = 1.33333;  			}
Magic Number,MatterHackers.MatterControl,InstructionsPage,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\InstructionsPage.cs,InstructionsPage,The following statement contains a magic number: topToBottomControls.Padding = new BorderDouble(3);
Magic Number,MatterHackers.MatterControl,InstructionsPage,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\InstructionsPage.cs,InstructionsPage,The following statement contains a magic number: AddTextField(instructionsText' 10);
Magic Number,MatterHackers.MatterControl,InstructionsPage,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\InstructionsPage.cs,AddTextField,The following statement contains a magic number: GuiWidget spacer = new GuiWidget(10' pixelsFromLast);
Magic Number,MatterHackers.MatterControl,InstructionsPage,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\InstructionsPage.cs,AddTextField,The following statement contains a magic number: EnglishTextWrapping wrapper = new EnglishTextWrapping(12);
Magic Number,MatterHackers.MatterControl,InstructionsPage,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\InstructionsPage.cs,AddTextField,The following statement contains a magic number: string wrappedInstructions = wrapper.InsertCRs(instructionsText' 400);
Magic Number,MatterHackers.MatterControl,InstructionsPage,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\InstructionsPage.cs,AddTextField,The following statement contains a magic number: TextWidget instructionsWidget = new TextWidget(wrappedInstructionsTabsToSpaces' textColor: ActiveTheme.Instance.PrimaryTextColor' pointSize: 12 * extraTextScaling);
Magic Number,MatterHackers.MatterControl,UiNavigation,C:\repos\MatterHackers_MatterControl\ControlElements\AttentionGetter.cs,HighlightWidget,The following statement contains a magic number: var autoLevelRowItem = testRunner.GetWidgetByName(widgetNameToHighlight' out containingWindow' .2);
Magic Number,MatterHackers.MatterControl,AttentionGetter,C:\repos\MatterHackers_MatterControl\ControlElements\AttentionGetter.cs,ChangeBackgroundColor,The following statement contains a magic number: if (widgetToHighlight != null)  			{  				double time = timeSinceStart.Elapsed.TotalSeconds;  				while (time > pulseTime)  				{  					time -= pulseTime;  				}  				time = time * 2 / pulseTime;  				if (time > 1)  				{  					time = 1 - (time - 1);  				}    				double lightnessMultiplier = EaseInOutQuad(time);    				widgetToHighlight.BackgroundColor = startColor.AdjustLightness(1 + lightnessChange * lightnessMultiplier).GetAsRGBA_Bytes();  				if (widgetToHighlight.HasBeenClosed || timeSinceStart.Elapsed.TotalSeconds > cycles * pulseTime)  				{  					widgetToHighlight.BackgroundColor = startColor;  					widgetToHighlight.AfterDraw -= ConnectToWidget;  					runningAttentions.Remove(widgetToHighlight);  					widgetToHighlight = null;  					return;  				}  				UiThread.RunOnIdle(ChangeBackgroundColor' animationDelay);  			}
Magic Number,MatterHackers.MatterControl,AttentionGetter,C:\repos\MatterHackers_MatterControl\ControlElements\AttentionGetter.cs,EaseInOutQuad,The following statement contains a magic number: return 2.0f * t * (1.0f - t) + 0.5;
Magic Number,MatterHackers.MatterControl,PopOutManager,C:\repos\MatterHackers_MatterControl\ControlElements\PopOutManager.cs,ShowContentInWindow,The following statement contains a magic number: if (systemWindowWithPopContent == null)  			{  				// So the window is open now only change this is we close it.  				UserSettings.Instance.Fields.SetBool(WindowLeftOpenKey' true);    				string windowSize = UserSettings.Instance.get(WindowSizeKey);  				int width = 600;  				int height = 400;  				if (windowSize != null && windowSize != "")  				{  					string[] sizes = windowSize.Split(''');  					width = Math.Max(int.Parse(sizes[0])' (int)minSize.x);  					height = Math.Max(int.Parse(sizes[1])' (int)minSize.y);  				}    				systemWindowWithPopContent = new SystemWindow(width' height);  				systemWindowWithPopContent.Padding = new BorderDouble(3);  				systemWindowWithPopContent.Title = windowTitle;  				systemWindowWithPopContent.AlwaysOnTopOfMain = true;  				systemWindowWithPopContent.BackgroundColor = ActiveTheme.Instance.PrimaryBackgroundColor;  				systemWindowWithPopContent.Closing += SystemWindow_Closing;  				if (widgetWithPopContent.Children.Count == 1)  				{  					GuiWidget child = widgetWithPopContent.Children[0];  					widgetWithPopContent.RemoveChild(child);  					child.ClearRemovedFlag();  					widgetWithPopContent.AddChild(CreateContentForEmptyControl());  					systemWindowWithPopContent.AddChild(child);  				}  				systemWindowWithPopContent.ShowAsSystemWindow();    				systemWindowWithPopContent.MinimumSize = minSize;  				string desktopPosition = UserSettings.Instance.get(PositionKey);  				if (desktopPosition != null && desktopPosition != "")  				{  					string[] sizes = desktopPosition.Split(''');    					//If the desktop position is less than -10'-10' override  					int xpos = Math.Max(int.Parse(sizes[0])' -10);  					int ypos = Math.Max(int.Parse(sizes[1])' -10);  					systemWindowWithPopContent.DesktopPosition = new Point2D(xpos' ypos);  				}  			}  			else  			{  				systemWindowWithPopContent.BringToFront();  			}
Magic Number,MatterHackers.MatterControl,PopOutManager,C:\repos\MatterHackers_MatterControl\ControlElements\PopOutManager.cs,ShowContentInWindow,The following statement contains a magic number: if (systemWindowWithPopContent == null)  			{  				// So the window is open now only change this is we close it.  				UserSettings.Instance.Fields.SetBool(WindowLeftOpenKey' true);    				string windowSize = UserSettings.Instance.get(WindowSizeKey);  				int width = 600;  				int height = 400;  				if (windowSize != null && windowSize != "")  				{  					string[] sizes = windowSize.Split(''');  					width = Math.Max(int.Parse(sizes[0])' (int)minSize.x);  					height = Math.Max(int.Parse(sizes[1])' (int)minSize.y);  				}    				systemWindowWithPopContent = new SystemWindow(width' height);  				systemWindowWithPopContent.Padding = new BorderDouble(3);  				systemWindowWithPopContent.Title = windowTitle;  				systemWindowWithPopContent.AlwaysOnTopOfMain = true;  				systemWindowWithPopContent.BackgroundColor = ActiveTheme.Instance.PrimaryBackgroundColor;  				systemWindowWithPopContent.Closing += SystemWindow_Closing;  				if (widgetWithPopContent.Children.Count == 1)  				{  					GuiWidget child = widgetWithPopContent.Children[0];  					widgetWithPopContent.RemoveChild(child);  					child.ClearRemovedFlag();  					widgetWithPopContent.AddChild(CreateContentForEmptyControl());  					systemWindowWithPopContent.AddChild(child);  				}  				systemWindowWithPopContent.ShowAsSystemWindow();    				systemWindowWithPopContent.MinimumSize = minSize;  				string desktopPosition = UserSettings.Instance.get(PositionKey);  				if (desktopPosition != null && desktopPosition != "")  				{  					string[] sizes = desktopPosition.Split(''');    					//If the desktop position is less than -10'-10' override  					int xpos = Math.Max(int.Parse(sizes[0])' -10);  					int ypos = Math.Max(int.Parse(sizes[1])' -10);  					systemWindowWithPopContent.DesktopPosition = new Point2D(xpos' ypos);  				}  			}  			else  			{  				systemWindowWithPopContent.BringToFront();  			}
Magic Number,MatterHackers.MatterControl,PopOutManager,C:\repos\MatterHackers_MatterControl\ControlElements\PopOutManager.cs,ShowContentInWindow,The following statement contains a magic number: if (systemWindowWithPopContent == null)  			{  				// So the window is open now only change this is we close it.  				UserSettings.Instance.Fields.SetBool(WindowLeftOpenKey' true);    				string windowSize = UserSettings.Instance.get(WindowSizeKey);  				int width = 600;  				int height = 400;  				if (windowSize != null && windowSize != "")  				{  					string[] sizes = windowSize.Split(''');  					width = Math.Max(int.Parse(sizes[0])' (int)minSize.x);  					height = Math.Max(int.Parse(sizes[1])' (int)minSize.y);  				}    				systemWindowWithPopContent = new SystemWindow(width' height);  				systemWindowWithPopContent.Padding = new BorderDouble(3);  				systemWindowWithPopContent.Title = windowTitle;  				systemWindowWithPopContent.AlwaysOnTopOfMain = true;  				systemWindowWithPopContent.BackgroundColor = ActiveTheme.Instance.PrimaryBackgroundColor;  				systemWindowWithPopContent.Closing += SystemWindow_Closing;  				if (widgetWithPopContent.Children.Count == 1)  				{  					GuiWidget child = widgetWithPopContent.Children[0];  					widgetWithPopContent.RemoveChild(child);  					child.ClearRemovedFlag();  					widgetWithPopContent.AddChild(CreateContentForEmptyControl());  					systemWindowWithPopContent.AddChild(child);  				}  				systemWindowWithPopContent.ShowAsSystemWindow();    				systemWindowWithPopContent.MinimumSize = minSize;  				string desktopPosition = UserSettings.Instance.get(PositionKey);  				if (desktopPosition != null && desktopPosition != "")  				{  					string[] sizes = desktopPosition.Split(''');    					//If the desktop position is less than -10'-10' override  					int xpos = Math.Max(int.Parse(sizes[0])' -10);  					int ypos = Math.Max(int.Parse(sizes[1])' -10);  					systemWindowWithPopContent.DesktopPosition = new Point2D(xpos' ypos);  				}  			}  			else  			{  				systemWindowWithPopContent.BringToFront();  			}
Magic Number,MatterHackers.MatterControl,PopOutManager,C:\repos\MatterHackers_MatterControl\ControlElements\PopOutManager.cs,ShowContentInWindow,The following statement contains a magic number: if (systemWindowWithPopContent == null)  			{  				// So the window is open now only change this is we close it.  				UserSettings.Instance.Fields.SetBool(WindowLeftOpenKey' true);    				string windowSize = UserSettings.Instance.get(WindowSizeKey);  				int width = 600;  				int height = 400;  				if (windowSize != null && windowSize != "")  				{  					string[] sizes = windowSize.Split(''');  					width = Math.Max(int.Parse(sizes[0])' (int)minSize.x);  					height = Math.Max(int.Parse(sizes[1])' (int)minSize.y);  				}    				systemWindowWithPopContent = new SystemWindow(width' height);  				systemWindowWithPopContent.Padding = new BorderDouble(3);  				systemWindowWithPopContent.Title = windowTitle;  				systemWindowWithPopContent.AlwaysOnTopOfMain = true;  				systemWindowWithPopContent.BackgroundColor = ActiveTheme.Instance.PrimaryBackgroundColor;  				systemWindowWithPopContent.Closing += SystemWindow_Closing;  				if (widgetWithPopContent.Children.Count == 1)  				{  					GuiWidget child = widgetWithPopContent.Children[0];  					widgetWithPopContent.RemoveChild(child);  					child.ClearRemovedFlag();  					widgetWithPopContent.AddChild(CreateContentForEmptyControl());  					systemWindowWithPopContent.AddChild(child);  				}  				systemWindowWithPopContent.ShowAsSystemWindow();    				systemWindowWithPopContent.MinimumSize = minSize;  				string desktopPosition = UserSettings.Instance.get(PositionKey);  				if (desktopPosition != null && desktopPosition != "")  				{  					string[] sizes = desktopPosition.Split(''');    					//If the desktop position is less than -10'-10' override  					int xpos = Math.Max(int.Parse(sizes[0])' -10);  					int ypos = Math.Max(int.Parse(sizes[1])' -10);  					systemWindowWithPopContent.DesktopPosition = new Point2D(xpos' ypos);  				}  			}  			else  			{  				systemWindowWithPopContent.BringToFront();  			}
Magic Number,MatterHackers.MatterControl,PopOutManager,C:\repos\MatterHackers_MatterControl\ControlElements\PopOutManager.cs,ShowContentInWindow,The following statement contains a magic number: if (systemWindowWithPopContent == null)  			{  				// So the window is open now only change this is we close it.  				UserSettings.Instance.Fields.SetBool(WindowLeftOpenKey' true);    				string windowSize = UserSettings.Instance.get(WindowSizeKey);  				int width = 600;  				int height = 400;  				if (windowSize != null && windowSize != "")  				{  					string[] sizes = windowSize.Split(''');  					width = Math.Max(int.Parse(sizes[0])' (int)minSize.x);  					height = Math.Max(int.Parse(sizes[1])' (int)minSize.y);  				}    				systemWindowWithPopContent = new SystemWindow(width' height);  				systemWindowWithPopContent.Padding = new BorderDouble(3);  				systemWindowWithPopContent.Title = windowTitle;  				systemWindowWithPopContent.AlwaysOnTopOfMain = true;  				systemWindowWithPopContent.BackgroundColor = ActiveTheme.Instance.PrimaryBackgroundColor;  				systemWindowWithPopContent.Closing += SystemWindow_Closing;  				if (widgetWithPopContent.Children.Count == 1)  				{  					GuiWidget child = widgetWithPopContent.Children[0];  					widgetWithPopContent.RemoveChild(child);  					child.ClearRemovedFlag();  					widgetWithPopContent.AddChild(CreateContentForEmptyControl());  					systemWindowWithPopContent.AddChild(child);  				}  				systemWindowWithPopContent.ShowAsSystemWindow();    				systemWindowWithPopContent.MinimumSize = minSize;  				string desktopPosition = UserSettings.Instance.get(PositionKey);  				if (desktopPosition != null && desktopPosition != "")  				{  					string[] sizes = desktopPosition.Split(''');    					//If the desktop position is less than -10'-10' override  					int xpos = Math.Max(int.Parse(sizes[0])' -10);  					int ypos = Math.Max(int.Parse(sizes[1])' -10);  					systemWindowWithPopContent.DesktopPosition = new Point2D(xpos' ypos);  				}  			}  			else  			{  				systemWindowWithPopContent.BringToFront();  			}
Magic Number,MatterHackers.MatterControl,PopOutManager,C:\repos\MatterHackers_MatterControl\ControlElements\PopOutManager.cs,CreateContentForEmptyControl,The following statement contains a magic number: allContent.Padding = new BorderDouble(5' 10' 5' 10);
Magic Number,MatterHackers.MatterControl,PopOutManager,C:\repos\MatterHackers_MatterControl\ControlElements\PopOutManager.cs,CreateContentForEmptyControl,The following statement contains a magic number: allContent.Padding = new BorderDouble(5' 10' 5' 10);
Magic Number,MatterHackers.MatterControl,PopOutManager,C:\repos\MatterHackers_MatterControl\ControlElements\PopOutManager.cs,CreateContentForEmptyControl,The following statement contains a magic number: allContent.Padding = new BorderDouble(5' 10' 5' 10);
Magic Number,MatterHackers.MatterControl,PopOutManager,C:\repos\MatterHackers_MatterControl\ControlElements\PopOutManager.cs,CreateContentForEmptyControl,The following statement contains a magic number: allContent.Padding = new BorderDouble(5' 10' 5' 10);
Magic Number,MatterHackers.MatterControl,PopOutManager,C:\repos\MatterHackers_MatterControl\ControlElements\PopOutManager.cs,CreateContentForEmptyControl,The following statement contains a magic number: flowWidget.Padding = new BorderDouble(10' 0);
Magic Number,MatterHackers.MatterControl,PopOutManager,C:\repos\MatterHackers_MatterControl\ControlElements\PopOutManager.cs,CreateContentForEmptyControl,The following statement contains a magic number: flowWidget.Height = 60;
Magic Number,MatterHackers.MatterControl,PopOutManager,C:\repos\MatterHackers_MatterControl\ControlElements\PopOutManager.cs,CreateContentForEmptyControl,The following statement contains a magic number: TextWidget windowedModeMessage = new TextWidget("WINDOWED MODE: This tab has been moved to a separate window.".Localize()'  				pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor);
Magic Number,MatterHackers.MatterControl,AltGroupBox,C:\repos\MatterHackers_MatterControl\CustomWidgets\AltGroupBox.cs,AltGroupBox,The following statement contains a magic number: this.Padding = new BorderDouble(5);
Magic Number,MatterHackers.MatterControl,DoubleSolidSlideView,C:\repos\MatterHackers_MatterControl\CustomWidgets\DoubleSolidSlider.cs,DoubleSolidSlideView,The following statement contains a magic number: TrackHeight = 10;
Magic Number,MatterHackers.MatterControl,DoubleSolidSlideView,C:\repos\MatterHackers_MatterControl\CustomWidgets\DoubleSolidSlider.cs,DoubleSolidSlideView,The following statement contains a magic number: TrackColor = new RGBA_Bytes(220' 220' 220);
Magic Number,MatterHackers.MatterControl,DoubleSolidSlideView,C:\repos\MatterHackers_MatterControl\CustomWidgets\DoubleSolidSlider.cs,DoubleSolidSlideView,The following statement contains a magic number: TrackColor = new RGBA_Bytes(220' 220' 220);
Magic Number,MatterHackers.MatterControl,DoubleSolidSlideView,C:\repos\MatterHackers_MatterControl\CustomWidgets\DoubleSolidSlider.cs,DoubleSolidSlideView,The following statement contains a magic number: TrackColor = new RGBA_Bytes(220' 220' 220);
Magic Number,MatterHackers.MatterControl,DoubleSolidSlideView,C:\repos\MatterHackers_MatterControl\CustomWidgets\DoubleSolidSlider.cs,GetTrackBounds,The following statement contains a magic number: if (sliderAttachedTo.Orientation == Orientation.Horizontal)  			{  				trackBounds = new RectangleDouble(0' -TrackHeight / 2' sliderAttachedTo.TotalWidthInPixels' TrackHeight / 2);  			}  			else  			{  				trackBounds = new RectangleDouble(-TrackHeight / 2' 0' TrackHeight / 2' sliderAttachedTo.TotalWidthInPixels);  			}
Magic Number,MatterHackers.MatterControl,DoubleSolidSlideView,C:\repos\MatterHackers_MatterControl\CustomWidgets\DoubleSolidSlider.cs,GetTrackBounds,The following statement contains a magic number: if (sliderAttachedTo.Orientation == Orientation.Horizontal)  			{  				trackBounds = new RectangleDouble(0' -TrackHeight / 2' sliderAttachedTo.TotalWidthInPixels' TrackHeight / 2);  			}  			else  			{  				trackBounds = new RectangleDouble(-TrackHeight / 2' 0' TrackHeight / 2' sliderAttachedTo.TotalWidthInPixels);  			}
Magic Number,MatterHackers.MatterControl,DoubleSolidSlideView,C:\repos\MatterHackers_MatterControl\CustomWidgets\DoubleSolidSlider.cs,GetTrackBounds,The following statement contains a magic number: if (sliderAttachedTo.Orientation == Orientation.Horizontal)  			{  				trackBounds = new RectangleDouble(0' -TrackHeight / 2' sliderAttachedTo.TotalWidthInPixels' TrackHeight / 2);  			}  			else  			{  				trackBounds = new RectangleDouble(-TrackHeight / 2' 0' TrackHeight / 2' sliderAttachedTo.TotalWidthInPixels);  			}
Magic Number,MatterHackers.MatterControl,DoubleSolidSlideView,C:\repos\MatterHackers_MatterControl\CustomWidgets\DoubleSolidSlider.cs,GetTrackBounds,The following statement contains a magic number: if (sliderAttachedTo.Orientation == Orientation.Horizontal)  			{  				trackBounds = new RectangleDouble(0' -TrackHeight / 2' sliderAttachedTo.TotalWidthInPixels' TrackHeight / 2);  			}  			else  			{  				trackBounds = new RectangleDouble(-TrackHeight / 2' 0' TrackHeight / 2' sliderAttachedTo.TotalWidthInPixels);  			}
Magic Number,MatterHackers.MatterControl,DoubleSolidSlideView,C:\repos\MatterHackers_MatterControl\CustomWidgets\DoubleSolidSlider.cs,DoDrawAfterChildren,The following statement contains a magic number: if (sliderAttachedTo.Orientation == Orientation.Horizontal)  			{  				ValuePrintPosition = new Vector2(sliderAttachedTo.TotalWidthInPixels / 2' -TrackHeight - 12);  			}  			else  			{  				ValuePrintPosition = new Vector2(0' -TrackHeight - 12);  			}
Magic Number,MatterHackers.MatterControl,DoubleSolidSlideView,C:\repos\MatterHackers_MatterControl\CustomWidgets\DoubleSolidSlider.cs,DoDrawAfterChildren,The following statement contains a magic number: if (sliderAttachedTo.Orientation == Orientation.Horizontal)  			{  				ValuePrintPosition = new Vector2(sliderAttachedTo.TotalWidthInPixels / 2' -TrackHeight - 12);  			}  			else  			{  				ValuePrintPosition = new Vector2(0' -TrackHeight - 12);  			}
Magic Number,MatterHackers.MatterControl,DoubleSolidSlideView,C:\repos\MatterHackers_MatterControl\CustomWidgets\DoubleSolidSlider.cs,DoDrawAfterChildren,The following statement contains a magic number: if (sliderAttachedTo.Orientation == Orientation.Horizontal)  			{  				ValuePrintPosition = new Vector2(sliderAttachedTo.TotalWidthInPixels / 2' -TrackHeight - 12);  			}  			else  			{  				ValuePrintPosition = new Vector2(0' -TrackHeight - 12);  			}
Magic Number,MatterHackers.MatterControl,DoubleSolidSlideView,C:\repos\MatterHackers_MatterControl\CustomWidgets\DoubleSolidSlider.cs,DoDrawAfterChildren,The following statement contains a magic number: graphics2D.Render(firstThumbOutside' RGBA_Floats.GetTweenColor(ThumbColor.GetAsRGBA_Floats()' RGBA_Floats.Black.GetAsRGBA_Floats()' .2).GetAsRGBA_Bytes());
Magic Number,MatterHackers.MatterControl,DoubleSolidSlideView,C:\repos\MatterHackers_MatterControl\CustomWidgets\DoubleSolidSlider.cs,DoDrawAfterChildren,The following statement contains a magic number: graphics2D.Render(secondThumbOutside' RGBA_Floats.GetTweenColor(ThumbColor.GetAsRGBA_Floats()' RGBA_Floats.Black.GetAsRGBA_Floats()' .2).GetAsRGBA_Bytes());
Magic Number,MatterHackers.MatterControl,DoubleSolidSlider,C:\repos\MatterHackers_MatterControl\CustomWidgets\DoubleSolidSlider.cs,DoubleSolidSlider,The following statement contains a magic number: ThumbHeight = widthInPixels * 1.4;
Magic Number,MatterHackers.MatterControl,DoubleSolidSlider,C:\repos\MatterHackers_MatterControl\CustomWidgets\DoubleSolidSlider.cs,GetSecondThumbHitBounds,The following statement contains a magic number: if (Orientation == Orientation.Horizontal)  			{  				return new RectangleDouble(-ThumbWidth / 2 + PositionPixelsFromSecondValue' -ThumbHeight / 2'  					ThumbWidth / 2 + PositionPixelsFromSecondValue' ThumbHeight / 2);  			}  			else  			{  				return new RectangleDouble(-ThumbHeight / 2' -ThumbWidth / 2 + PositionPixelsFromSecondValue'  					ThumbHeight / 2' ThumbWidth / 2 + PositionPixelsFromSecondValue);  			}
Magic Number,MatterHackers.MatterControl,DoubleSolidSlider,C:\repos\MatterHackers_MatterControl\CustomWidgets\DoubleSolidSlider.cs,GetSecondThumbHitBounds,The following statement contains a magic number: if (Orientation == Orientation.Horizontal)  			{  				return new RectangleDouble(-ThumbWidth / 2 + PositionPixelsFromSecondValue' -ThumbHeight / 2'  					ThumbWidth / 2 + PositionPixelsFromSecondValue' ThumbHeight / 2);  			}  			else  			{  				return new RectangleDouble(-ThumbHeight / 2' -ThumbWidth / 2 + PositionPixelsFromSecondValue'  					ThumbHeight / 2' ThumbWidth / 2 + PositionPixelsFromSecondValue);  			}
Magic Number,MatterHackers.MatterControl,DoubleSolidSlider,C:\repos\MatterHackers_MatterControl\CustomWidgets\DoubleSolidSlider.cs,GetSecondThumbHitBounds,The following statement contains a magic number: if (Orientation == Orientation.Horizontal)  			{  				return new RectangleDouble(-ThumbWidth / 2 + PositionPixelsFromSecondValue' -ThumbHeight / 2'  					ThumbWidth / 2 + PositionPixelsFromSecondValue' ThumbHeight / 2);  			}  			else  			{  				return new RectangleDouble(-ThumbHeight / 2' -ThumbWidth / 2 + PositionPixelsFromSecondValue'  					ThumbHeight / 2' ThumbWidth / 2 + PositionPixelsFromSecondValue);  			}
Magic Number,MatterHackers.MatterControl,DoubleSolidSlider,C:\repos\MatterHackers_MatterControl\CustomWidgets\DoubleSolidSlider.cs,GetSecondThumbHitBounds,The following statement contains a magic number: if (Orientation == Orientation.Horizontal)  			{  				return new RectangleDouble(-ThumbWidth / 2 + PositionPixelsFromSecondValue' -ThumbHeight / 2'  					ThumbWidth / 2 + PositionPixelsFromSecondValue' ThumbHeight / 2);  			}  			else  			{  				return new RectangleDouble(-ThumbHeight / 2' -ThumbWidth / 2 + PositionPixelsFromSecondValue'  					ThumbHeight / 2' ThumbWidth / 2 + PositionPixelsFromSecondValue);  			}
Magic Number,MatterHackers.MatterControl,DoubleSolidSlider,C:\repos\MatterHackers_MatterControl\CustomWidgets\DoubleSolidSlider.cs,GetSecondThumbHitBounds,The following statement contains a magic number: if (Orientation == Orientation.Horizontal)  			{  				return new RectangleDouble(-ThumbWidth / 2 + PositionPixelsFromSecondValue' -ThumbHeight / 2'  					ThumbWidth / 2 + PositionPixelsFromSecondValue' ThumbHeight / 2);  			}  			else  			{  				return new RectangleDouble(-ThumbHeight / 2' -ThumbWidth / 2 + PositionPixelsFromSecondValue'  					ThumbHeight / 2' ThumbWidth / 2 + PositionPixelsFromSecondValue);  			}
Magic Number,MatterHackers.MatterControl,DoubleSolidSlider,C:\repos\MatterHackers_MatterControl\CustomWidgets\DoubleSolidSlider.cs,GetSecondThumbHitBounds,The following statement contains a magic number: if (Orientation == Orientation.Horizontal)  			{  				return new RectangleDouble(-ThumbWidth / 2 + PositionPixelsFromSecondValue' -ThumbHeight / 2'  					ThumbWidth / 2 + PositionPixelsFromSecondValue' ThumbHeight / 2);  			}  			else  			{  				return new RectangleDouble(-ThumbHeight / 2' -ThumbWidth / 2 + PositionPixelsFromSecondValue'  					ThumbHeight / 2' ThumbWidth / 2 + PositionPixelsFromSecondValue);  			}
Magic Number,MatterHackers.MatterControl,DoubleSolidSlider,C:\repos\MatterHackers_MatterControl\CustomWidgets\DoubleSolidSlider.cs,GetSecondThumbHitBounds,The following statement contains a magic number: if (Orientation == Orientation.Horizontal)  			{  				return new RectangleDouble(-ThumbWidth / 2 + PositionPixelsFromSecondValue' -ThumbHeight / 2'  					ThumbWidth / 2 + PositionPixelsFromSecondValue' ThumbHeight / 2);  			}  			else  			{  				return new RectangleDouble(-ThumbHeight / 2' -ThumbWidth / 2 + PositionPixelsFromSecondValue'  					ThumbHeight / 2' ThumbWidth / 2 + PositionPixelsFromSecondValue);  			}
Magic Number,MatterHackers.MatterControl,DoubleSolidSlider,C:\repos\MatterHackers_MatterControl\CustomWidgets\DoubleSolidSlider.cs,GetSecondThumbHitBounds,The following statement contains a magic number: if (Orientation == Orientation.Horizontal)  			{  				return new RectangleDouble(-ThumbWidth / 2 + PositionPixelsFromSecondValue' -ThumbHeight / 2'  					ThumbWidth / 2 + PositionPixelsFromSecondValue' ThumbHeight / 2);  			}  			else  			{  				return new RectangleDouble(-ThumbHeight / 2' -ThumbWidth / 2 + PositionPixelsFromSecondValue'  					ThumbHeight / 2' ThumbWidth / 2 + PositionPixelsFromSecondValue);  			}
Magic Number,MatterHackers.MatterControl,DoubleSolidSlider,C:\repos\MatterHackers_MatterControl\CustomWidgets\DoubleSolidSlider.cs,GetFirstThumbHitBounds,The following statement contains a magic number: if (Orientation == Orientation.Horizontal)  			{  				return new RectangleDouble(-ThumbWidth / 2 + PositionPixelsFromFirstValue' -ThumbHeight / 2'  					ThumbWidth / 2 + PositionPixelsFromFirstValue' ThumbHeight / 2);  			}  			else  			{  				return new RectangleDouble(-ThumbHeight / 2' -ThumbWidth / 2 + PositionPixelsFromFirstValue'  					ThumbHeight / 2' ThumbWidth / 2 + PositionPixelsFromFirstValue);  			}
Magic Number,MatterHackers.MatterControl,DoubleSolidSlider,C:\repos\MatterHackers_MatterControl\CustomWidgets\DoubleSolidSlider.cs,GetFirstThumbHitBounds,The following statement contains a magic number: if (Orientation == Orientation.Horizontal)  			{  				return new RectangleDouble(-ThumbWidth / 2 + PositionPixelsFromFirstValue' -ThumbHeight / 2'  					ThumbWidth / 2 + PositionPixelsFromFirstValue' ThumbHeight / 2);  			}  			else  			{  				return new RectangleDouble(-ThumbHeight / 2' -ThumbWidth / 2 + PositionPixelsFromFirstValue'  					ThumbHeight / 2' ThumbWidth / 2 + PositionPixelsFromFirstValue);  			}
Magic Number,MatterHackers.MatterControl,DoubleSolidSlider,C:\repos\MatterHackers_MatterControl\CustomWidgets\DoubleSolidSlider.cs,GetFirstThumbHitBounds,The following statement contains a magic number: if (Orientation == Orientation.Horizontal)  			{  				return new RectangleDouble(-ThumbWidth / 2 + PositionPixelsFromFirstValue' -ThumbHeight / 2'  					ThumbWidth / 2 + PositionPixelsFromFirstValue' ThumbHeight / 2);  			}  			else  			{  				return new RectangleDouble(-ThumbHeight / 2' -ThumbWidth / 2 + PositionPixelsFromFirstValue'  					ThumbHeight / 2' ThumbWidth / 2 + PositionPixelsFromFirstValue);  			}
Magic Number,MatterHackers.MatterControl,DoubleSolidSlider,C:\repos\MatterHackers_MatterControl\CustomWidgets\DoubleSolidSlider.cs,GetFirstThumbHitBounds,The following statement contains a magic number: if (Orientation == Orientation.Horizontal)  			{  				return new RectangleDouble(-ThumbWidth / 2 + PositionPixelsFromFirstValue' -ThumbHeight / 2'  					ThumbWidth / 2 + PositionPixelsFromFirstValue' ThumbHeight / 2);  			}  			else  			{  				return new RectangleDouble(-ThumbHeight / 2' -ThumbWidth / 2 + PositionPixelsFromFirstValue'  					ThumbHeight / 2' ThumbWidth / 2 + PositionPixelsFromFirstValue);  			}
Magic Number,MatterHackers.MatterControl,DoubleSolidSlider,C:\repos\MatterHackers_MatterControl\CustomWidgets\DoubleSolidSlider.cs,GetFirstThumbHitBounds,The following statement contains a magic number: if (Orientation == Orientation.Horizontal)  			{  				return new RectangleDouble(-ThumbWidth / 2 + PositionPixelsFromFirstValue' -ThumbHeight / 2'  					ThumbWidth / 2 + PositionPixelsFromFirstValue' ThumbHeight / 2);  			}  			else  			{  				return new RectangleDouble(-ThumbHeight / 2' -ThumbWidth / 2 + PositionPixelsFromFirstValue'  					ThumbHeight / 2' ThumbWidth / 2 + PositionPixelsFromFirstValue);  			}
Magic Number,MatterHackers.MatterControl,DoubleSolidSlider,C:\repos\MatterHackers_MatterControl\CustomWidgets\DoubleSolidSlider.cs,GetFirstThumbHitBounds,The following statement contains a magic number: if (Orientation == Orientation.Horizontal)  			{  				return new RectangleDouble(-ThumbWidth / 2 + PositionPixelsFromFirstValue' -ThumbHeight / 2'  					ThumbWidth / 2 + PositionPixelsFromFirstValue' ThumbHeight / 2);  			}  			else  			{  				return new RectangleDouble(-ThumbHeight / 2' -ThumbWidth / 2 + PositionPixelsFromFirstValue'  					ThumbHeight / 2' ThumbWidth / 2 + PositionPixelsFromFirstValue);  			}
Magic Number,MatterHackers.MatterControl,DoubleSolidSlider,C:\repos\MatterHackers_MatterControl\CustomWidgets\DoubleSolidSlider.cs,GetFirstThumbHitBounds,The following statement contains a magic number: if (Orientation == Orientation.Horizontal)  			{  				return new RectangleDouble(-ThumbWidth / 2 + PositionPixelsFromFirstValue' -ThumbHeight / 2'  					ThumbWidth / 2 + PositionPixelsFromFirstValue' ThumbHeight / 2);  			}  			else  			{  				return new RectangleDouble(-ThumbHeight / 2' -ThumbWidth / 2 + PositionPixelsFromFirstValue'  					ThumbHeight / 2' ThumbWidth / 2 + PositionPixelsFromFirstValue);  			}
Magic Number,MatterHackers.MatterControl,DoubleSolidSlider,C:\repos\MatterHackers_MatterControl\CustomWidgets\DoubleSolidSlider.cs,GetFirstThumbHitBounds,The following statement contains a magic number: if (Orientation == Orientation.Horizontal)  			{  				return new RectangleDouble(-ThumbWidth / 2 + PositionPixelsFromFirstValue' -ThumbHeight / 2'  					ThumbWidth / 2 + PositionPixelsFromFirstValue' ThumbHeight / 2);  			}  			else  			{  				return new RectangleDouble(-ThumbHeight / 2' -ThumbWidth / 2 + PositionPixelsFromFirstValue'  					ThumbHeight / 2' ThumbWidth / 2 + PositionPixelsFromFirstValue);  			}
Magic Number,MatterHackers.MatterControl,DoubleSolidSlider,C:\repos\MatterHackers_MatterControl\CustomWidgets\DoubleSolidSlider.cs,GetPositionPixelsFromFirstValue,The following statement contains a magic number: return ThumbWidth / 2 + TrackWidth * GetPosition0To1FromFirstValue(value);
Magic Number,MatterHackers.MatterControl,DoubleSolidSlider,C:\repos\MatterHackers_MatterControl\CustomWidgets\DoubleSolidSlider.cs,GetTrackHitBounds,The following statement contains a magic number: if (Orientation == Orientation.Horizontal)  			{  				return new RectangleDouble(0' -ThumbHeight / 2'  					TotalWidthInPixels' ThumbHeight / 2);  			}  			else  			{  				return new RectangleDouble(-ThumbHeight / 2' 0' ThumbHeight / 2' TotalWidthInPixels);  			}
Magic Number,MatterHackers.MatterControl,DoubleSolidSlider,C:\repos\MatterHackers_MatterControl\CustomWidgets\DoubleSolidSlider.cs,GetTrackHitBounds,The following statement contains a magic number: if (Orientation == Orientation.Horizontal)  			{  				return new RectangleDouble(0' -ThumbHeight / 2'  					TotalWidthInPixels' ThumbHeight / 2);  			}  			else  			{  				return new RectangleDouble(-ThumbHeight / 2' 0' ThumbHeight / 2' TotalWidthInPixels);  			}
Magic Number,MatterHackers.MatterControl,DoubleSolidSlider,C:\repos\MatterHackers_MatterControl\CustomWidgets\DoubleSolidSlider.cs,GetTrackHitBounds,The following statement contains a magic number: if (Orientation == Orientation.Horizontal)  			{  				return new RectangleDouble(0' -ThumbHeight / 2'  					TotalWidthInPixels' ThumbHeight / 2);  			}  			else  			{  				return new RectangleDouble(-ThumbHeight / 2' 0' ThumbHeight / 2' TotalWidthInPixels);  			}
Magic Number,MatterHackers.MatterControl,DoubleSolidSlider,C:\repos\MatterHackers_MatterControl\CustomWidgets\DoubleSolidSlider.cs,GetTrackHitBounds,The following statement contains a magic number: if (Orientation == Orientation.Horizontal)  			{  				return new RectangleDouble(0' -ThumbHeight / 2'  					TotalWidthInPixels' ThumbHeight / 2);  			}  			else  			{  				return new RectangleDouble(-ThumbHeight / 2' 0' ThumbHeight / 2' TotalWidthInPixels);  			}
Magic Number,MatterHackers.MatterControl,DoubleSolidSlider,C:\repos\MatterHackers_MatterControl\CustomWidgets\DoubleSolidSlider.cs,OnMouseMove,The following statement contains a magic number: if (downOnFirstThumb)  			{  				double oldValue = FirstValue;  				if (Orientation == Orientation.Horizontal)  				{  					PositionPixelsFromFirstValue = Math.Min(mousePos.x - mouseDownOffsetFromFirstThumbCenter' PositionPixelsFromSecondValue - ThumbWidth - 2);  				}  				else  				{  					PositionPixelsFromFirstValue = Math.Min(mousePos.y - mouseDownOffsetFromFirstThumbCenter' PositionPixelsFromSecondValue - ThumbWidth - 2);  				}  				if (oldValue != FirstValue)  				{  					if (FirstValueChanged != null)  					{  						FirstValueChanged(this' mouseEvent);  					}  					Invalidate();  				}  			}  			else if (downOnSecondThumb)  			{  				double oldValue = SecondValue;  				if (Orientation == Orientation.Horizontal)  				{  					PositionPixelsFromSecondValue = Math.Max(mousePos.x - mouseDownOffsetFromSecondThumbCenter' PositionPixelsFromFirstValue + ThumbWidth + 2);  				}  				else  				{  					PositionPixelsFromSecondValue = Math.Max(mousePos.y - mouseDownOffsetFromSecondThumbCenter' PositionPixelsFromFirstValue + ThumbWidth + 2);  				}  				if (oldValue != SecondValue)  				{  					if (SecondValueChanged != null)  					{  						SecondValueChanged(this' mouseEvent);  					}  					Invalidate();  				}  			}
Magic Number,MatterHackers.MatterControl,DoubleSolidSlider,C:\repos\MatterHackers_MatterControl\CustomWidgets\DoubleSolidSlider.cs,OnMouseMove,The following statement contains a magic number: if (downOnFirstThumb)  			{  				double oldValue = FirstValue;  				if (Orientation == Orientation.Horizontal)  				{  					PositionPixelsFromFirstValue = Math.Min(mousePos.x - mouseDownOffsetFromFirstThumbCenter' PositionPixelsFromSecondValue - ThumbWidth - 2);  				}  				else  				{  					PositionPixelsFromFirstValue = Math.Min(mousePos.y - mouseDownOffsetFromFirstThumbCenter' PositionPixelsFromSecondValue - ThumbWidth - 2);  				}  				if (oldValue != FirstValue)  				{  					if (FirstValueChanged != null)  					{  						FirstValueChanged(this' mouseEvent);  					}  					Invalidate();  				}  			}  			else if (downOnSecondThumb)  			{  				double oldValue = SecondValue;  				if (Orientation == Orientation.Horizontal)  				{  					PositionPixelsFromSecondValue = Math.Max(mousePos.x - mouseDownOffsetFromSecondThumbCenter' PositionPixelsFromFirstValue + ThumbWidth + 2);  				}  				else  				{  					PositionPixelsFromSecondValue = Math.Max(mousePos.y - mouseDownOffsetFromSecondThumbCenter' PositionPixelsFromFirstValue + ThumbWidth + 2);  				}  				if (oldValue != SecondValue)  				{  					if (SecondValueChanged != null)  					{  						SecondValueChanged(this' mouseEvent);  					}  					Invalidate();  				}  			}
Magic Number,MatterHackers.MatterControl,DoubleSolidSlider,C:\repos\MatterHackers_MatterControl\CustomWidgets\DoubleSolidSlider.cs,OnMouseMove,The following statement contains a magic number: if (downOnFirstThumb)  			{  				double oldValue = FirstValue;  				if (Orientation == Orientation.Horizontal)  				{  					PositionPixelsFromFirstValue = Math.Min(mousePos.x - mouseDownOffsetFromFirstThumbCenter' PositionPixelsFromSecondValue - ThumbWidth - 2);  				}  				else  				{  					PositionPixelsFromFirstValue = Math.Min(mousePos.y - mouseDownOffsetFromFirstThumbCenter' PositionPixelsFromSecondValue - ThumbWidth - 2);  				}  				if (oldValue != FirstValue)  				{  					if (FirstValueChanged != null)  					{  						FirstValueChanged(this' mouseEvent);  					}  					Invalidate();  				}  			}  			else if (downOnSecondThumb)  			{  				double oldValue = SecondValue;  				if (Orientation == Orientation.Horizontal)  				{  					PositionPixelsFromSecondValue = Math.Max(mousePos.x - mouseDownOffsetFromSecondThumbCenter' PositionPixelsFromFirstValue + ThumbWidth + 2);  				}  				else  				{  					PositionPixelsFromSecondValue = Math.Max(mousePos.y - mouseDownOffsetFromSecondThumbCenter' PositionPixelsFromFirstValue + ThumbWidth + 2);  				}  				if (oldValue != SecondValue)  				{  					if (SecondValueChanged != null)  					{  						SecondValueChanged(this' mouseEvent);  					}  					Invalidate();  				}  			}
Magic Number,MatterHackers.MatterControl,DoubleSolidSlider,C:\repos\MatterHackers_MatterControl\CustomWidgets\DoubleSolidSlider.cs,OnMouseMove,The following statement contains a magic number: if (downOnFirstThumb)  			{  				double oldValue = FirstValue;  				if (Orientation == Orientation.Horizontal)  				{  					PositionPixelsFromFirstValue = Math.Min(mousePos.x - mouseDownOffsetFromFirstThumbCenter' PositionPixelsFromSecondValue - ThumbWidth - 2);  				}  				else  				{  					PositionPixelsFromFirstValue = Math.Min(mousePos.y - mouseDownOffsetFromFirstThumbCenter' PositionPixelsFromSecondValue - ThumbWidth - 2);  				}  				if (oldValue != FirstValue)  				{  					if (FirstValueChanged != null)  					{  						FirstValueChanged(this' mouseEvent);  					}  					Invalidate();  				}  			}  			else if (downOnSecondThumb)  			{  				double oldValue = SecondValue;  				if (Orientation == Orientation.Horizontal)  				{  					PositionPixelsFromSecondValue = Math.Max(mousePos.x - mouseDownOffsetFromSecondThumbCenter' PositionPixelsFromFirstValue + ThumbWidth + 2);  				}  				else  				{  					PositionPixelsFromSecondValue = Math.Max(mousePos.y - mouseDownOffsetFromSecondThumbCenter' PositionPixelsFromFirstValue + ThumbWidth + 2);  				}  				if (oldValue != SecondValue)  				{  					if (SecondValueChanged != null)  					{  						SecondValueChanged(this' mouseEvent);  					}  					Invalidate();  				}  			}
Magic Number,MatterHackers.MatterControl,SlideWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\SlideWidget.cs,SlideIn,The following statement contains a magic number: this.Width = 0.1;
Magic Number,MatterHackers.MatterControl,SolidSlideView,C:\repos\MatterHackers_MatterControl\CustomWidgets\SolidSlider.cs,SolidSlideView,The following statement contains a magic number: TrackHeight = 10;
Magic Number,MatterHackers.MatterControl,SolidSlideView,C:\repos\MatterHackers_MatterControl\CustomWidgets\SolidSlider.cs,SolidSlideView,The following statement contains a magic number: TrackColor = new RGBA_Bytes(220' 220' 220);
Magic Number,MatterHackers.MatterControl,SolidSlideView,C:\repos\MatterHackers_MatterControl\CustomWidgets\SolidSlider.cs,SolidSlideView,The following statement contains a magic number: TrackColor = new RGBA_Bytes(220' 220' 220);
Magic Number,MatterHackers.MatterControl,SolidSlideView,C:\repos\MatterHackers_MatterControl\CustomWidgets\SolidSlider.cs,SolidSlideView,The following statement contains a magic number: TrackColor = new RGBA_Bytes(220' 220' 220);
Magic Number,MatterHackers.MatterControl,SolidSlideView,C:\repos\MatterHackers_MatterControl\CustomWidgets\SolidSlider.cs,GetTrackBounds,The following statement contains a magic number: if (sliderAttachedTo.Orientation == Orientation.Horizontal)  			{  				trackBounds = new RectangleDouble(0' -TrackHeight / 2' sliderAttachedTo.TotalWidthInPixels' TrackHeight / 2);  			}  			else  			{  				trackBounds = new RectangleDouble(-TrackHeight / 2' 0' TrackHeight / 2' sliderAttachedTo.TotalWidthInPixels);  			}
Magic Number,MatterHackers.MatterControl,SolidSlideView,C:\repos\MatterHackers_MatterControl\CustomWidgets\SolidSlider.cs,GetTrackBounds,The following statement contains a magic number: if (sliderAttachedTo.Orientation == Orientation.Horizontal)  			{  				trackBounds = new RectangleDouble(0' -TrackHeight / 2' sliderAttachedTo.TotalWidthInPixels' TrackHeight / 2);  			}  			else  			{  				trackBounds = new RectangleDouble(-TrackHeight / 2' 0' TrackHeight / 2' sliderAttachedTo.TotalWidthInPixels);  			}
Magic Number,MatterHackers.MatterControl,SolidSlideView,C:\repos\MatterHackers_MatterControl\CustomWidgets\SolidSlider.cs,GetTrackBounds,The following statement contains a magic number: if (sliderAttachedTo.Orientation == Orientation.Horizontal)  			{  				trackBounds = new RectangleDouble(0' -TrackHeight / 2' sliderAttachedTo.TotalWidthInPixels' TrackHeight / 2);  			}  			else  			{  				trackBounds = new RectangleDouble(-TrackHeight / 2' 0' TrackHeight / 2' sliderAttachedTo.TotalWidthInPixels);  			}
Magic Number,MatterHackers.MatterControl,SolidSlideView,C:\repos\MatterHackers_MatterControl\CustomWidgets\SolidSlider.cs,GetTrackBounds,The following statement contains a magic number: if (sliderAttachedTo.Orientation == Orientation.Horizontal)  			{  				trackBounds = new RectangleDouble(0' -TrackHeight / 2' sliderAttachedTo.TotalWidthInPixels' TrackHeight / 2);  			}  			else  			{  				trackBounds = new RectangleDouble(-TrackHeight / 2' 0' TrackHeight / 2' sliderAttachedTo.TotalWidthInPixels);  			}
Magic Number,MatterHackers.MatterControl,SolidSlideView,C:\repos\MatterHackers_MatterControl\CustomWidgets\SolidSlider.cs,DoDrawAfterChildren,The following statement contains a magic number: if (sliderAttachedTo.Orientation == Orientation.Horizontal)  			{  				ValuePrintPosition = new Vector2(sliderAttachedTo.TotalWidthInPixels / 2' -TrackHeight - 12);  			}  			else  			{  				ValuePrintPosition = new Vector2(0' -TrackHeight - 12);  			}
Magic Number,MatterHackers.MatterControl,SolidSlideView,C:\repos\MatterHackers_MatterControl\CustomWidgets\SolidSlider.cs,DoDrawAfterChildren,The following statement contains a magic number: if (sliderAttachedTo.Orientation == Orientation.Horizontal)  			{  				ValuePrintPosition = new Vector2(sliderAttachedTo.TotalWidthInPixels / 2' -TrackHeight - 12);  			}  			else  			{  				ValuePrintPosition = new Vector2(0' -TrackHeight - 12);  			}
Magic Number,MatterHackers.MatterControl,SolidSlideView,C:\repos\MatterHackers_MatterControl\CustomWidgets\SolidSlider.cs,DoDrawAfterChildren,The following statement contains a magic number: if (sliderAttachedTo.Orientation == Orientation.Horizontal)  			{  				ValuePrintPosition = new Vector2(sliderAttachedTo.TotalWidthInPixels / 2' -TrackHeight - 12);  			}  			else  			{  				ValuePrintPosition = new Vector2(0' -TrackHeight - 12);  			}
Magic Number,MatterHackers.MatterControl,SolidSlideView,C:\repos\MatterHackers_MatterControl\CustomWidgets\SolidSlider.cs,DoDrawAfterChildren,The following statement contains a magic number: graphics2D.Render(thumbOutside' RGBA_Floats.GetTweenColor(ThumbColor.GetAsRGBA_Floats()' RGBA_Floats.Black.GetAsRGBA_Floats()' .2).GetAsRGBA_Bytes());
Magic Number,MatterHackers.MatterControl,SolidSlider,C:\repos\MatterHackers_MatterControl\CustomWidgets\SolidSlider.cs,SolidSlider,The following statement contains a magic number: ThumbHeight = thumbWidth * 1.4;
Magic Number,MatterHackers.MatterControl,SolidSlider,C:\repos\MatterHackers_MatterControl\CustomWidgets\SolidSlider.cs,GetThumbHitBounds,The following statement contains a magic number: if (Orientation == Orientation.Horizontal)  			{  				return new RectangleDouble(-ThumbWidth / 2 + PositionPixelsFromFirstValue' -ThumbHeight / 2'  					ThumbWidth / 2 + PositionPixelsFromFirstValue' ThumbHeight / 2);  			}  			else  			{  				return new RectangleDouble(-ThumbHeight / 2' -ThumbWidth / 2 + PositionPixelsFromFirstValue'  					ThumbHeight / 2' ThumbWidth / 2 + PositionPixelsFromFirstValue);  			}
Magic Number,MatterHackers.MatterControl,SolidSlider,C:\repos\MatterHackers_MatterControl\CustomWidgets\SolidSlider.cs,GetThumbHitBounds,The following statement contains a magic number: if (Orientation == Orientation.Horizontal)  			{  				return new RectangleDouble(-ThumbWidth / 2 + PositionPixelsFromFirstValue' -ThumbHeight / 2'  					ThumbWidth / 2 + PositionPixelsFromFirstValue' ThumbHeight / 2);  			}  			else  			{  				return new RectangleDouble(-ThumbHeight / 2' -ThumbWidth / 2 + PositionPixelsFromFirstValue'  					ThumbHeight / 2' ThumbWidth / 2 + PositionPixelsFromFirstValue);  			}
Magic Number,MatterHackers.MatterControl,SolidSlider,C:\repos\MatterHackers_MatterControl\CustomWidgets\SolidSlider.cs,GetThumbHitBounds,The following statement contains a magic number: if (Orientation == Orientation.Horizontal)  			{  				return new RectangleDouble(-ThumbWidth / 2 + PositionPixelsFromFirstValue' -ThumbHeight / 2'  					ThumbWidth / 2 + PositionPixelsFromFirstValue' ThumbHeight / 2);  			}  			else  			{  				return new RectangleDouble(-ThumbHeight / 2' -ThumbWidth / 2 + PositionPixelsFromFirstValue'  					ThumbHeight / 2' ThumbWidth / 2 + PositionPixelsFromFirstValue);  			}
Magic Number,MatterHackers.MatterControl,SolidSlider,C:\repos\MatterHackers_MatterControl\CustomWidgets\SolidSlider.cs,GetThumbHitBounds,The following statement contains a magic number: if (Orientation == Orientation.Horizontal)  			{  				return new RectangleDouble(-ThumbWidth / 2 + PositionPixelsFromFirstValue' -ThumbHeight / 2'  					ThumbWidth / 2 + PositionPixelsFromFirstValue' ThumbHeight / 2);  			}  			else  			{  				return new RectangleDouble(-ThumbHeight / 2' -ThumbWidth / 2 + PositionPixelsFromFirstValue'  					ThumbHeight / 2' ThumbWidth / 2 + PositionPixelsFromFirstValue);  			}
Magic Number,MatterHackers.MatterControl,SolidSlider,C:\repos\MatterHackers_MatterControl\CustomWidgets\SolidSlider.cs,GetThumbHitBounds,The following statement contains a magic number: if (Orientation == Orientation.Horizontal)  			{  				return new RectangleDouble(-ThumbWidth / 2 + PositionPixelsFromFirstValue' -ThumbHeight / 2'  					ThumbWidth / 2 + PositionPixelsFromFirstValue' ThumbHeight / 2);  			}  			else  			{  				return new RectangleDouble(-ThumbHeight / 2' -ThumbWidth / 2 + PositionPixelsFromFirstValue'  					ThumbHeight / 2' ThumbWidth / 2 + PositionPixelsFromFirstValue);  			}
Magic Number,MatterHackers.MatterControl,SolidSlider,C:\repos\MatterHackers_MatterControl\CustomWidgets\SolidSlider.cs,GetThumbHitBounds,The following statement contains a magic number: if (Orientation == Orientation.Horizontal)  			{  				return new RectangleDouble(-ThumbWidth / 2 + PositionPixelsFromFirstValue' -ThumbHeight / 2'  					ThumbWidth / 2 + PositionPixelsFromFirstValue' ThumbHeight / 2);  			}  			else  			{  				return new RectangleDouble(-ThumbHeight / 2' -ThumbWidth / 2 + PositionPixelsFromFirstValue'  					ThumbHeight / 2' ThumbWidth / 2 + PositionPixelsFromFirstValue);  			}
Magic Number,MatterHackers.MatterControl,SolidSlider,C:\repos\MatterHackers_MatterControl\CustomWidgets\SolidSlider.cs,GetThumbHitBounds,The following statement contains a magic number: if (Orientation == Orientation.Horizontal)  			{  				return new RectangleDouble(-ThumbWidth / 2 + PositionPixelsFromFirstValue' -ThumbHeight / 2'  					ThumbWidth / 2 + PositionPixelsFromFirstValue' ThumbHeight / 2);  			}  			else  			{  				return new RectangleDouble(-ThumbHeight / 2' -ThumbWidth / 2 + PositionPixelsFromFirstValue'  					ThumbHeight / 2' ThumbWidth / 2 + PositionPixelsFromFirstValue);  			}
Magic Number,MatterHackers.MatterControl,SolidSlider,C:\repos\MatterHackers_MatterControl\CustomWidgets\SolidSlider.cs,GetThumbHitBounds,The following statement contains a magic number: if (Orientation == Orientation.Horizontal)  			{  				return new RectangleDouble(-ThumbWidth / 2 + PositionPixelsFromFirstValue' -ThumbHeight / 2'  					ThumbWidth / 2 + PositionPixelsFromFirstValue' ThumbHeight / 2);  			}  			else  			{  				return new RectangleDouble(-ThumbHeight / 2' -ThumbWidth / 2 + PositionPixelsFromFirstValue'  					ThumbHeight / 2' ThumbWidth / 2 + PositionPixelsFromFirstValue);  			}
Magic Number,MatterHackers.MatterControl,SolidSlider,C:\repos\MatterHackers_MatterControl\CustomWidgets\SolidSlider.cs,GetPositionPixelsFromValue,The following statement contains a magic number: return ThumbWidth / 2 + TrackWidth * GetPosition0To1FromValue(value);
Magic Number,MatterHackers.MatterControl,SolidSlider,C:\repos\MatterHackers_MatterControl\CustomWidgets\SolidSlider.cs,GetTrackHitBounds,The following statement contains a magic number: if (Orientation == Orientation.Horizontal)  			{  				return new RectangleDouble(0' -ThumbHeight / 2'  					TotalWidthInPixels' ThumbHeight / 2);  			}  			else  			{  				return new RectangleDouble(-ThumbHeight / 2' 0' ThumbHeight / 2' TotalWidthInPixels);  			}
Magic Number,MatterHackers.MatterControl,SolidSlider,C:\repos\MatterHackers_MatterControl\CustomWidgets\SolidSlider.cs,GetTrackHitBounds,The following statement contains a magic number: if (Orientation == Orientation.Horizontal)  			{  				return new RectangleDouble(0' -ThumbHeight / 2'  					TotalWidthInPixels' ThumbHeight / 2);  			}  			else  			{  				return new RectangleDouble(-ThumbHeight / 2' 0' ThumbHeight / 2' TotalWidthInPixels);  			}
Magic Number,MatterHackers.MatterControl,SolidSlider,C:\repos\MatterHackers_MatterControl\CustomWidgets\SolidSlider.cs,GetTrackHitBounds,The following statement contains a magic number: if (Orientation == Orientation.Horizontal)  			{  				return new RectangleDouble(0' -ThumbHeight / 2'  					TotalWidthInPixels' ThumbHeight / 2);  			}  			else  			{  				return new RectangleDouble(-ThumbHeight / 2' 0' ThumbHeight / 2' TotalWidthInPixels);  			}
Magic Number,MatterHackers.MatterControl,SolidSlider,C:\repos\MatterHackers_MatterControl\CustomWidgets\SolidSlider.cs,GetTrackHitBounds,The following statement contains a magic number: if (Orientation == Orientation.Horizontal)  			{  				return new RectangleDouble(0' -ThumbHeight / 2'  					TotalWidthInPixels' ThumbHeight / 2);  			}  			else  			{  				return new RectangleDouble(-ThumbHeight / 2' 0' ThumbHeight / 2' TotalWidthInPixels);  			}
Magic Number,MatterHackers.MatterControl,CopyGuestProfilesToUser,C:\repos\MatterHackers_MatterControl\SetupWizard\CopyGuestProfilesToUser.cs,CopyGuestProfilesToUser,The following statement contains a magic number: if (guest?.Profiles.Count > 0)  			{  				container.AddChild(new TextWidget("Printers to Copy:".Localize())  				{  					TextColor = ActiveTheme.Instance.PrimaryTextColor'  					Margin = new BorderDouble(0' 3' 0' 15)'  				});    				foreach (var printerInfo in guest.Profiles)  				{  					var checkBox = new CheckBox(printerInfo.Name)  					{  						TextColor = ActiveTheme.Instance.PrimaryTextColor'  						Margin = new BorderDouble(5' 0' 0' 0)'  						HAnchor = HAnchor.ParentLeft'  						Checked = true'  					};  					checkBoxes.Add(checkBox);  					container.AddChild(checkBox);    					byCheckbox[checkBox] = printerInfo;  				}  			}
Magic Number,MatterHackers.MatterControl,CopyGuestProfilesToUser,C:\repos\MatterHackers_MatterControl\SetupWizard\CopyGuestProfilesToUser.cs,CopyGuestProfilesToUser,The following statement contains a magic number: if (guest?.Profiles.Count > 0)  			{  				container.AddChild(new TextWidget("Printers to Copy:".Localize())  				{  					TextColor = ActiveTheme.Instance.PrimaryTextColor'  					Margin = new BorderDouble(0' 3' 0' 15)'  				});    				foreach (var printerInfo in guest.Profiles)  				{  					var checkBox = new CheckBox(printerInfo.Name)  					{  						TextColor = ActiveTheme.Instance.PrimaryTextColor'  						Margin = new BorderDouble(5' 0' 0' 0)'  						HAnchor = HAnchor.ParentLeft'  						Checked = true'  					};  					checkBoxes.Add(checkBox);  					container.AddChild(checkBox);    					byCheckbox[checkBox] = printerInfo;  				}  			}
Magic Number,MatterHackers.MatterControl,CopyGuestProfilesToUser,C:\repos\MatterHackers_MatterControl\SetupWizard\CopyGuestProfilesToUser.cs,CopyGuestProfilesToUser,The following statement contains a magic number: if (guest?.Profiles.Count > 0)  			{  				container.AddChild(new TextWidget("Printers to Copy:".Localize())  				{  					TextColor = ActiveTheme.Instance.PrimaryTextColor'  					Margin = new BorderDouble(0' 3' 0' 15)'  				});    				foreach (var printerInfo in guest.Profiles)  				{  					var checkBox = new CheckBox(printerInfo.Name)  					{  						TextColor = ActiveTheme.Instance.PrimaryTextColor'  						Margin = new BorderDouble(5' 0' 0' 0)'  						HAnchor = HAnchor.ParentLeft'  						Checked = true'  					};  					checkBoxes.Add(checkBox);  					container.AddChild(checkBox);    					byCheckbox[checkBox] = printerInfo;  				}  			}
Magic Number,MatterHackers.MatterControl,RenameItemWindow,C:\repos\MatterHackers_MatterControl\Library\RenameItemWindow.cs,RenameItemWindow,The following statement contains a magic number: topToBottom.Padding = new BorderDouble(3' 0' 3' 5);
Magic Number,MatterHackers.MatterControl,RenameItemWindow,C:\repos\MatterHackers_MatterControl\Library\RenameItemWindow.cs,RenameItemWindow,The following statement contains a magic number: topToBottom.Padding = new BorderDouble(3' 0' 3' 5);
Magic Number,MatterHackers.MatterControl,RenameItemWindow,C:\repos\MatterHackers_MatterControl\Library\RenameItemWindow.cs,RenameItemWindow,The following statement contains a magic number: topToBottom.Padding = new BorderDouble(3' 0' 3' 5);
Magic Number,MatterHackers.MatterControl,RenameItemWindow,C:\repos\MatterHackers_MatterControl\Library\RenameItemWindow.cs,RenameItemWindow,The following statement contains a magic number: headerRow.Margin = new BorderDouble(0' 3' 0' 0);
Magic Number,MatterHackers.MatterControl,RenameItemWindow,C:\repos\MatterHackers_MatterControl\Library\RenameItemWindow.cs,RenameItemWindow,The following statement contains a magic number: headerRow.Padding = new BorderDouble(0' 3' 0' 3);
Magic Number,MatterHackers.MatterControl,RenameItemWindow,C:\repos\MatterHackers_MatterControl\Library\RenameItemWindow.cs,RenameItemWindow,The following statement contains a magic number: headerRow.Padding = new BorderDouble(0' 3' 0' 3);
Magic Number,MatterHackers.MatterControl,RenameItemWindow,C:\repos\MatterHackers_MatterControl\Library\RenameItemWindow.cs,RenameItemWindow,The following statement contains a magic number: {  				string renameItemLabel = "Rename Item:".Localize();  				elementHeader = new TextWidget(renameItemLabel' pointSize: 14);  				elementHeader.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				elementHeader.HAnchor = HAnchor.ParentLeftRight;  				elementHeader.VAnchor = Agg.UI.VAnchor.ParentBottom;    				headerRow.AddChild(elementHeader);  				topToBottom.AddChild(headerRow);  				this.AddChild(topToBottom);  			}
Magic Number,MatterHackers.MatterControl,RenameItemWindow,C:\repos\MatterHackers_MatterControl\Library\RenameItemWindow.cs,RenameItemWindow,The following statement contains a magic number: {  				middleRowContainer.HAnchor = HAnchor.ParentLeftRight;  				middleRowContainer.VAnchor = VAnchor.ParentBottomTop;  				middleRowContainer.Padding = new BorderDouble(5);  				middleRowContainer.BackgroundColor = ActiveTheme.Instance.SecondaryBackgroundColor;  			}
Magic Number,MatterHackers.MatterControl,RenameItemWindow,C:\repos\MatterHackers_MatterControl\Library\RenameItemWindow.cs,RenameItemWindow,The following statement contains a magic number: TextWidget textBoxHeader = new TextWidget(fileNameLabel' pointSize: 12);
Magic Number,MatterHackers.MatterControl,RenameItemWindow,C:\repos\MatterHackers_MatterControl\Library\RenameItemWindow.cs,RenameItemWindow,The following statement contains a magic number: textBoxHeader.Margin = new BorderDouble(5);
Magic Number,MatterHackers.MatterControl,RenameItemWindow,C:\repos\MatterHackers_MatterControl\Library\RenameItemWindow.cs,RenameItemWindow,The following statement contains a magic number: saveAsNameWidget = new MHTextEditWidget(currentItemName' pixelWidth: 300' messageWhenEmptyAndNotSelected: "Enter New Name Here".Localize());
Magic Number,MatterHackers.MatterControl,RenameItemWindow,C:\repos\MatterHackers_MatterControl\Library\RenameItemWindow.cs,RenameItemWindow,The following statement contains a magic number: saveAsNameWidget.Margin = new BorderDouble(5);
Magic Number,MatterHackers.MatterControl,RenameItemWindow,C:\repos\MatterHackers_MatterControl\Library\RenameItemWindow.cs,RenameItemWindow,The following statement contains a magic number: {  				BackgroundColor = ActiveTheme.Instance.PrimaryBackgroundColor;  				buttonRow.HAnchor = HAnchor.ParentLeftRight;  				buttonRow.Padding = new BorderDouble(0' 3);  			}
Magic Number,MatterHackers.MatterControl,PrinterConfigurationWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrinterConfigurationPage.cs,PrinterConfigurationWidget,The following statement contains a magic number: mainLayoutContainer.Padding = new BorderDouble(top: 10);
Magic Number,MatterHackers.MatterControl,PrinterConfigurationWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrinterConfigurationPage.cs,AddThemeControls,The following statement contains a magic number: themeControlsGroupBox.Height = 78;
Magic Number,MatterHackers.MatterControl,PrinterConfigurationWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrinterConfigurationPage.cs,AddThemeControls,The following statement contains a magic number: currentColorThemeBorder.Margin = new BorderDouble(top: 2' bottom: 2);
Magic Number,MatterHackers.MatterControl,PrinterConfigurationWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrinterConfigurationPage.cs,AddThemeControls,The following statement contains a magic number: currentColorThemeBorder.Margin = new BorderDouble(top: 2' bottom: 2);
Magic Number,MatterHackers.MatterControl,PrinterConfigurationWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrinterConfigurationPage.cs,AddThemeControls,The following statement contains a magic number: currentColorThemeBorder.Padding = new BorderDouble(4);
Magic Number,MatterHackers.MatterControl,PrinterConfigurationWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrinterConfigurationPage.cs,AddThemeControls,The following statement contains a magic number: themeSelector.Margin = new BorderDouble(right: 5);
Magic Number,MatterHackers.MatterControl,PrinterConfigurationWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrinterConfigurationPage.cs,AddReleaseOptions,The following statement contains a magic number: releaseOptionsGroupBox.Height = 68;
Magic Number,MatterHackers.MatterControl,PrinterConfigurationWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrinterConfigurationPage.cs,AddReleaseOptions,The following statement contains a magic number: releaseOptionsDropList.Margin = new BorderDouble(0' 3);
Magic Number,MatterHackers.MatterControl,PrinterConfigurationWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrinterConfigurationPage.cs,CreateSeparatorLine,The following statement contains a magic number: GuiWidget topLine = new GuiWidget(10' 1);
Magic Number,MatterHackers.MatterControl,PrinterConfigurationWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrinterConfigurationPage.cs,CreateSeparatorLine,The following statement contains a magic number: topLine.Margin = new BorderDouble(0' 5);
Magic Number,MatterHackers.MatterControl,PrinterConfigurationWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrinterConfigurationPage.cs,SetDisplayAttributes,The following statement contains a magic number: this.textImageButtonFactory.fontSize = 11;
Magic Number,MatterHackers.MatterControl,PrinterConfigurationWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrinterConfigurationPage.cs,SetDisplayAttributes,The following statement contains a magic number: this.linkButtonFactory.fontSize = 11;
Magic Number,MatterHackers.MatterControl,ExportPrintItemWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\ExportPrintItemWindow.cs,CreateWindowContent,The following statement contains a magic number: topToBottom.Padding = new BorderDouble(3' 0' 3' 5);
Magic Number,MatterHackers.MatterControl,ExportPrintItemWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\ExportPrintItemWindow.cs,CreateWindowContent,The following statement contains a magic number: topToBottom.Padding = new BorderDouble(3' 0' 3' 5);
Magic Number,MatterHackers.MatterControl,ExportPrintItemWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\ExportPrintItemWindow.cs,CreateWindowContent,The following statement contains a magic number: topToBottom.Padding = new BorderDouble(3' 0' 3' 5);
Magic Number,MatterHackers.MatterControl,ExportPrintItemWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\ExportPrintItemWindow.cs,CreateWindowContent,The following statement contains a magic number: headerRow.Margin = new BorderDouble(0' 3' 0' 0);
Magic Number,MatterHackers.MatterControl,ExportPrintItemWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\ExportPrintItemWindow.cs,CreateWindowContent,The following statement contains a magic number: headerRow.Padding = new BorderDouble(0' 3' 0' 3);
Magic Number,MatterHackers.MatterControl,ExportPrintItemWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\ExportPrintItemWindow.cs,CreateWindowContent,The following statement contains a magic number: headerRow.Padding = new BorderDouble(0' 3' 0' 3);
Magic Number,MatterHackers.MatterControl,ExportPrintItemWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\ExportPrintItemWindow.cs,CreateWindowContent,The following statement contains a magic number: {  				TextWidget elementHeader = new TextWidget("File export options:".Localize()' pointSize: 14);  				elementHeader.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				elementHeader.HAnchor = HAnchor.ParentLeftRight;  				elementHeader.VAnchor = Agg.UI.VAnchor.ParentBottom;    				headerRow.AddChild(elementHeader);  				topToBottom.AddChild(headerRow);  			}
Magic Number,MatterHackers.MatterControl,ExportPrintItemWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\ExportPrintItemWindow.cs,CreateWindowContent,The following statement contains a magic number: {  				middleRowContainer.HAnchor = HAnchor.ParentLeftRight;  				middleRowContainer.VAnchor = VAnchor.ParentBottomTop;  				middleRowContainer.Padding = new BorderDouble(5);  				middleRowContainer.BackgroundColor = ActiveTheme.Instance.SecondaryBackgroundColor;  			}
Magic Number,MatterHackers.MatterControl,ExportPrintItemWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\ExportPrintItemWindow.cs,CreateWindowContent,The following statement contains a magic number: if (showExportGCodeButton && ActiveSliceSettings.Instance.GetValue<bool>(SettingsKey.print_leveling_enabled))  			{  				applyLeveling = new CheckBox(LocalizedString.Get(applyLevelingDuringExportString)' ActiveTheme.Instance.PrimaryTextColor' 10);  				applyLeveling.Checked = true;  				applyLeveling.HAnchor = HAnchor.ParentLeft;  				applyLeveling.Cursor = Cursors.Hand;  				//applyLeveling.Margin = new BorderDouble(top: 10);  				middleRowContainer.AddChild(applyLeveling);  			}
Magic Number,MatterHackers.MatterControl,ExportPrintItemWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\ExportPrintItemWindow.cs,CreateWindowContent,The following statement contains a magic number: if (OsInformation.OperatingSystem == OSType.Windows  				|| OsInformation.OperatingSystem == OSType.X11)  			{  				showInFolderAfterSave = new CheckBox("Show file in folder after save".Localize()' ActiveTheme.Instance.PrimaryTextColor' 10);  				showInFolderAfterSave.HAnchor = HAnchor.ParentLeft;  				showInFolderAfterSave.Cursor = Cursors.Hand;  				//showInFolderAfterSave.Margin = new BorderDouble(top: 10);  				middleRowContainer.AddChild(showInFolderAfterSave);  			}
Magic Number,MatterHackers.MatterControl,ExportPrintItemWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\ExportPrintItemWindow.cs,CreateWindowContent,The following statement contains a magic number: if (!showExportGCodeButton)  			{  				string noGCodeMessageTextBeg = "Note".Localize();  				string noGCodeMessageTextEnd = "To enable GCode export' select a printer profile.".Localize();  				string noGCodeMessageTextFull = string.Format("{0}: {1}"' noGCodeMessageTextBeg' noGCodeMessageTextEnd);  				TextWidget noGCodeMessage = new TextWidget(noGCodeMessageTextFull' textColor: ActiveTheme.Instance.PrimaryTextColor' pointSize: 10);  				noGCodeMessage.HAnchor = HAnchor.ParentLeft;  				middleRowContainer.AddChild(noGCodeMessage);  			}
Magic Number,MatterHackers.MatterControl,ExportPrintItemWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\ExportPrintItemWindow.cs,CreateWindowContent,The following statement contains a magic number: {  				BackgroundColor = ActiveTheme.Instance.PrimaryBackgroundColor;  				buttonRow.HAnchor = HAnchor.ParentLeftRight;  				buttonRow.Padding = new BorderDouble(0' 3);  			}
Magic Number,MatterHackers.MatterControl,ExportPrintItemWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\ExportPrintItemWindow.cs,Get8Name,The following statement contains a magic number: return longName.Substring(0' Math.Min(longName.Length' 8));
Magic Number,MatterHackers.MatterControl,PrinterOutputCache,C:\repos\MatterHackers_MatterControl\PrinterControls\TerminalWindow\PrinterOutputCache.cs,Is32Bit,The following statement contains a magic number: if (IntPtr.Size == 4)  			{  				return true;  			}
Magic Number,MatterHackers.MatterControl,PrinterOutputCache,C:\repos\MatterHackers_MatterControl\PrinterControls\TerminalWindow\PrinterOutputCache.cs,PrinterOutputCache,The following statement contains a magic number: if (Is32Bit())  			{  				// About 10 megs worth. Average line length in gcode file is about 14 and we store strings as chars (16 bit) so 450'000 lines.  				maxLinesToBuffer = 450000;  			}
Magic Number,MatterHackers.MatterControl,TextScrollBar,C:\repos\MatterHackers_MatterControl\PrinterControls\TerminalWindow\TextScrolBar.cs,TextScrollBar,The following statement contains a magic number: Margin = new BorderDouble(0' 5);
Magic Number,MatterHackers.MatterControl,TextScrollBar,C:\repos\MatterHackers_MatterControl\PrinterControls\TerminalWindow\TextScrolBar.cs,OnDraw,The following statement contains a magic number: int thumbHeight = 10;
Magic Number,MatterHackers.MatterControl,TextScrollWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\TerminalWindow\TextScrollWidget.cs,TextScrollWidget,The following statement contains a magic number: printer = new TypeFacePrinter(""' new StyledTypeFace(ApplicationController.MonoSpacedTypeFace' 12));
Magic Number,MatterHackers.MatterControl,TextScrollWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\TerminalWindow\TextScrollWidget.cs,ConditionalyAddToVisible,The following statement contains a magic number: if (StartLineStringFilters != null  				&& StartLineStringFilters.Length > 0)  			{  				bool lineIsVisible = true;  				foreach (string startFilter in StartLineStringFilters)  				{  					if (line == null  						|| line.Contains("M105")  						|| line.Length < 3  						|| line.StartsWith(startFilter))  					{  						lineIsVisible = false;  						break;  					}  				}    				if (lineIsVisible)  				{  					visibleLines.Add(line);  				}  			}
Magic Number,MatterHackers.MatterControl,TextScrollWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\TerminalWindow\TextScrollWidget.cs,OnDraw,The following statement contains a magic number: lock(visibleLines)  			{  				lock(locker)  				{  					int startLineIndex = visibleLines.Count - numLinesToDraw;  					if (forceStartLine != -1)  					{  						y = LocalBounds.Top;    						if (forceStartLine > visibleLines.Count - numLinesToDraw)  						{  							forceStartLine = -1;  						}  						else  						{  							// make sure we show all the lines we can  							startLineIndex = Math.Min(forceStartLine' startLineIndex);  						}  					}  					int endLineIndex = visibleLines.Count;  					for (int lineIndex = startLineIndex; lineIndex < endLineIndex; lineIndex++)  					{  						if (lineIndex >= 0)  						{  							if (visibleLines[lineIndex] != null)  							{  								printer.Text = visibleLines[lineIndex];  								printer.Origin = new Vector2(Bounds.Left + 2' y);  								printer.Render(graphics2D' TextColor);  							}  						}  						y -= printer.TypeFaceStyle.EmSizeInPixels;  						if (y < -printer.TypeFaceStyle.EmSizeInPixels)  						{  							break;  						}  					}  				}  			}
Magic Number,MatterHackers.MatterControl,TextScrollWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\TerminalWindow\TextScrollWidget.cs,OnMouseWheel,The following statement contains a magic number: double scrollDelta = (mouseEvent.WheelDelta / ((visibleLines.Count) * 60.0));
Magic Number,MatterHackers.MatterControl,TextScrollWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\TerminalWindow\TextScrollWidget.cs,OnMouseWheel,The following statement contains a magic number: if (scrollDelta < 0)//Rounding seems to favor scrolling up' compinsating scroll down to feel as smooth              {                  scrollDelta *= 2;              }              else if (Position0To1 == 0)//IF we scroll up at the bottum get pop out from the "on screen" chunck              {                  scrollDelta = (NumVisibleLines/(double)visibleLines.Count);              }
Magic Number,MatterHackers.MatterControl,TerminalWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\TerminalWindow\TerminalWidget.cs,TerminalWidget,The following statement contains a magic number: this.Padding = new BorderDouble(5' 0);
Magic Number,MatterHackers.MatterControl,TerminalWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\TerminalWindow\TerminalWidget.cs,TerminalWidget,The following statement contains a magic number: {  				FlowLayoutWidget manualEntryTopToBottomLayout = new FlowLayoutWidget(FlowDirection.TopToBottom);  				manualEntryTopToBottomLayout.VAnchor |= Agg.UI.VAnchor.ParentTop;  				manualEntryTopToBottomLayout.Padding = new BorderDouble(top: 8);    				{  					FlowLayoutWidget topBarControls = new FlowLayoutWidget(FlowDirection.LeftToRight);  					topBarControls.HAnchor |= HAnchor.ParentLeft;    					{  						filterOutput = new CheckBox("Filter Output".Localize())  						{  							Margin = new BorderDouble(5' 5' 5' 2)'  							TextColor = this.textColor'  							VAnchor = Agg.UI.VAnchor.ParentBottom'  						};  						filterOutput.CheckedStateChanged += (object sender' EventArgs e) =>  						{  							if (filterOutput.Checked)  							{  								textScrollWidget.SetLineStartFilter(new string[] { "<-wait"' "<-ok"' "<-T" });  							}  							else  							{  								textScrollWidget.SetLineStartFilter(null);  							}    							UserSettings.Instance.Fields.SetBool(TerminalFilterOutputKey' filterOutput.Checked);  						};    						topBarControls.AddChild(filterOutput);  					}    					{  						autoUppercase = new CheckBox("Auto Uppercase".Localize());  						autoUppercase.Margin = new BorderDouble(5' 5' 5' 2);  						autoUppercase.Checked = UserSettings.Instance.Fields.GetBool(TerminalAutoUppercaseKey' true);  						autoUppercase.TextColor = this.textColor;  						autoUppercase.VAnchor = Agg.UI.VAnchor.ParentBottom;  						topBarControls.AddChild(autoUppercase);  						autoUppercase.CheckedStateChanged += (sender' e) =>  						{  							UserSettings.Instance.Fields.SetBool(TerminalAutoUppercaseKey' autoUppercase.Checked);  						};  						manualEntryTopToBottomLayout.AddChild(topBarControls);  					}  				}    				{  					FlowLayoutWidget leftToRight = new FlowLayoutWidget();  					leftToRight.AnchorAll();    					textScrollWidget = new TextScrollWidget(PrinterOutputCache.Instance.PrinterLines);  					//outputScrollWidget.Height = 100;  					Debug.WriteLine(PrinterOutputCache.Instance.PrinterLines);  					textScrollWidget.BackgroundColor = ActiveTheme.Instance.SecondaryBackgroundColor;  					textScrollWidget.TextColor = ActiveTheme.Instance.PrimaryTextColor;  					textScrollWidget.HAnchor = HAnchor.ParentLeftRight;  					textScrollWidget.VAnchor = VAnchor.ParentBottomTop;  					textScrollWidget.Margin = new BorderDouble(0' 5);  					textScrollWidget.Padding = new BorderDouble(3' 0);    					leftToRight.AddChild(textScrollWidget);    					TextScrollBar textScrollBar = new TextScrollBar(textScrollWidget' 15);  					leftToRight.AddChild(textScrollBar);    					manualEntryTopToBottomLayout.AddChild(leftToRight);  				}    				FlowLayoutWidget manualEntryLayout = new FlowLayoutWidget(FlowDirection.LeftToRight);  				manualEntryLayout.BackgroundColor = this.backgroundColor;  				manualEntryLayout.HAnchor = HAnchor.ParentLeftRight;  				{  					manualCommandTextEdit = new MHTextEditWidget(""' typeFace: ApplicationController.MonoSpacedTypeFace);  					//manualCommandTextEdit.BackgroundColor = RGBA_Bytes.White;  					manualCommandTextEdit.Margin = new BorderDouble(right: 3);  					manualCommandTextEdit.HAnchor = HAnchor.ParentLeftRight;  					manualCommandTextEdit.VAnchor = VAnchor.ParentBottom;  					manualCommandTextEdit.ActualTextEditWidget.EnterPressed += manualCommandTextEdit_EnterPressed;  					manualCommandTextEdit.ActualTextEditWidget.KeyDown += manualCommandTextEdit_KeyDown;  					manualEntryLayout.AddChild(manualCommandTextEdit);  				}    				manualEntryTopToBottomLayout.AddChild(manualEntryLayout);    				Button clearConsoleButton = controlButtonFactory.Generate("Clear".Localize());  				clearConsoleButton.Margin = new BorderDouble(0);  				clearConsoleButton.Click += (sender' e) =>  				{  					PrinterOutputCache.Instance.Clear();  				};    				//Output Console text to screen  				Button exportConsoleTextButton = controlButtonFactory.Generate("Export".Localize() + "...");  				exportConsoleTextButton.Click += (sender' mouseEvent) =>  				{  					UiThread.RunOnIdle(DoExportExportLog_Click);  				};    				Button closeButton = controlButtonFactory.Generate("Close".Localize());  				closeButton.Click += (sender' e) =>  				{  					UiThread.RunOnIdle(CloseWindow);  				};    				sendCommand = controlButtonFactory.Generate("Send".Localize());  				sendCommand.Click += sendManualCommandToPrinter_Click;    				FlowLayoutWidget bottomRowContainer = new FlowLayoutWidget();  				bottomRowContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				bottomRowContainer.Margin = new BorderDouble(0' 3);    				bottomRowContainer.AddChild(sendCommand);  				bottomRowContainer.AddChild(clearConsoleButton);  				bottomRowContainer.AddChild(exportConsoleTextButton);  				bottomRowContainer.AddChild(new HorizontalSpacer());    				if (showInWindow)  				{  					bottomRowContainer.AddChild(closeButton);  				}    				manualEntryTopToBottomLayout.AddChild(bottomRowContainer);  				manualEntryTopToBottomLayout.AnchorAll();    				topLeftToRightLayout.AddChild(manualEntryTopToBottomLayout);  			}
Magic Number,MatterHackers.MatterControl,TerminalWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\TerminalWindow\TerminalWidget.cs,TerminalWidget,The following statement contains a magic number: {  				FlowLayoutWidget manualEntryTopToBottomLayout = new FlowLayoutWidget(FlowDirection.TopToBottom);  				manualEntryTopToBottomLayout.VAnchor |= Agg.UI.VAnchor.ParentTop;  				manualEntryTopToBottomLayout.Padding = new BorderDouble(top: 8);    				{  					FlowLayoutWidget topBarControls = new FlowLayoutWidget(FlowDirection.LeftToRight);  					topBarControls.HAnchor |= HAnchor.ParentLeft;    					{  						filterOutput = new CheckBox("Filter Output".Localize())  						{  							Margin = new BorderDouble(5' 5' 5' 2)'  							TextColor = this.textColor'  							VAnchor = Agg.UI.VAnchor.ParentBottom'  						};  						filterOutput.CheckedStateChanged += (object sender' EventArgs e) =>  						{  							if (filterOutput.Checked)  							{  								textScrollWidget.SetLineStartFilter(new string[] { "<-wait"' "<-ok"' "<-T" });  							}  							else  							{  								textScrollWidget.SetLineStartFilter(null);  							}    							UserSettings.Instance.Fields.SetBool(TerminalFilterOutputKey' filterOutput.Checked);  						};    						topBarControls.AddChild(filterOutput);  					}    					{  						autoUppercase = new CheckBox("Auto Uppercase".Localize());  						autoUppercase.Margin = new BorderDouble(5' 5' 5' 2);  						autoUppercase.Checked = UserSettings.Instance.Fields.GetBool(TerminalAutoUppercaseKey' true);  						autoUppercase.TextColor = this.textColor;  						autoUppercase.VAnchor = Agg.UI.VAnchor.ParentBottom;  						topBarControls.AddChild(autoUppercase);  						autoUppercase.CheckedStateChanged += (sender' e) =>  						{  							UserSettings.Instance.Fields.SetBool(TerminalAutoUppercaseKey' autoUppercase.Checked);  						};  						manualEntryTopToBottomLayout.AddChild(topBarControls);  					}  				}    				{  					FlowLayoutWidget leftToRight = new FlowLayoutWidget();  					leftToRight.AnchorAll();    					textScrollWidget = new TextScrollWidget(PrinterOutputCache.Instance.PrinterLines);  					//outputScrollWidget.Height = 100;  					Debug.WriteLine(PrinterOutputCache.Instance.PrinterLines);  					textScrollWidget.BackgroundColor = ActiveTheme.Instance.SecondaryBackgroundColor;  					textScrollWidget.TextColor = ActiveTheme.Instance.PrimaryTextColor;  					textScrollWidget.HAnchor = HAnchor.ParentLeftRight;  					textScrollWidget.VAnchor = VAnchor.ParentBottomTop;  					textScrollWidget.Margin = new BorderDouble(0' 5);  					textScrollWidget.Padding = new BorderDouble(3' 0);    					leftToRight.AddChild(textScrollWidget);    					TextScrollBar textScrollBar = new TextScrollBar(textScrollWidget' 15);  					leftToRight.AddChild(textScrollBar);    					manualEntryTopToBottomLayout.AddChild(leftToRight);  				}    				FlowLayoutWidget manualEntryLayout = new FlowLayoutWidget(FlowDirection.LeftToRight);  				manualEntryLayout.BackgroundColor = this.backgroundColor;  				manualEntryLayout.HAnchor = HAnchor.ParentLeftRight;  				{  					manualCommandTextEdit = new MHTextEditWidget(""' typeFace: ApplicationController.MonoSpacedTypeFace);  					//manualCommandTextEdit.BackgroundColor = RGBA_Bytes.White;  					manualCommandTextEdit.Margin = new BorderDouble(right: 3);  					manualCommandTextEdit.HAnchor = HAnchor.ParentLeftRight;  					manualCommandTextEdit.VAnchor = VAnchor.ParentBottom;  					manualCommandTextEdit.ActualTextEditWidget.EnterPressed += manualCommandTextEdit_EnterPressed;  					manualCommandTextEdit.ActualTextEditWidget.KeyDown += manualCommandTextEdit_KeyDown;  					manualEntryLayout.AddChild(manualCommandTextEdit);  				}    				manualEntryTopToBottomLayout.AddChild(manualEntryLayout);    				Button clearConsoleButton = controlButtonFactory.Generate("Clear".Localize());  				clearConsoleButton.Margin = new BorderDouble(0);  				clearConsoleButton.Click += (sender' e) =>  				{  					PrinterOutputCache.Instance.Clear();  				};    				//Output Console text to screen  				Button exportConsoleTextButton = controlButtonFactory.Generate("Export".Localize() + "...");  				exportConsoleTextButton.Click += (sender' mouseEvent) =>  				{  					UiThread.RunOnIdle(DoExportExportLog_Click);  				};    				Button closeButton = controlButtonFactory.Generate("Close".Localize());  				closeButton.Click += (sender' e) =>  				{  					UiThread.RunOnIdle(CloseWindow);  				};    				sendCommand = controlButtonFactory.Generate("Send".Localize());  				sendCommand.Click += sendManualCommandToPrinter_Click;    				FlowLayoutWidget bottomRowContainer = new FlowLayoutWidget();  				bottomRowContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				bottomRowContainer.Margin = new BorderDouble(0' 3);    				bottomRowContainer.AddChild(sendCommand);  				bottomRowContainer.AddChild(clearConsoleButton);  				bottomRowContainer.AddChild(exportConsoleTextButton);  				bottomRowContainer.AddChild(new HorizontalSpacer());    				if (showInWindow)  				{  					bottomRowContainer.AddChild(closeButton);  				}    				manualEntryTopToBottomLayout.AddChild(bottomRowContainer);  				manualEntryTopToBottomLayout.AnchorAll();    				topLeftToRightLayout.AddChild(manualEntryTopToBottomLayout);  			}
Magic Number,MatterHackers.MatterControl,TerminalWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\TerminalWindow\TerminalWidget.cs,TerminalWidget,The following statement contains a magic number: {  				FlowLayoutWidget manualEntryTopToBottomLayout = new FlowLayoutWidget(FlowDirection.TopToBottom);  				manualEntryTopToBottomLayout.VAnchor |= Agg.UI.VAnchor.ParentTop;  				manualEntryTopToBottomLayout.Padding = new BorderDouble(top: 8);    				{  					FlowLayoutWidget topBarControls = new FlowLayoutWidget(FlowDirection.LeftToRight);  					topBarControls.HAnchor |= HAnchor.ParentLeft;    					{  						filterOutput = new CheckBox("Filter Output".Localize())  						{  							Margin = new BorderDouble(5' 5' 5' 2)'  							TextColor = this.textColor'  							VAnchor = Agg.UI.VAnchor.ParentBottom'  						};  						filterOutput.CheckedStateChanged += (object sender' EventArgs e) =>  						{  							if (filterOutput.Checked)  							{  								textScrollWidget.SetLineStartFilter(new string[] { "<-wait"' "<-ok"' "<-T" });  							}  							else  							{  								textScrollWidget.SetLineStartFilter(null);  							}    							UserSettings.Instance.Fields.SetBool(TerminalFilterOutputKey' filterOutput.Checked);  						};    						topBarControls.AddChild(filterOutput);  					}    					{  						autoUppercase = new CheckBox("Auto Uppercase".Localize());  						autoUppercase.Margin = new BorderDouble(5' 5' 5' 2);  						autoUppercase.Checked = UserSettings.Instance.Fields.GetBool(TerminalAutoUppercaseKey' true);  						autoUppercase.TextColor = this.textColor;  						autoUppercase.VAnchor = Agg.UI.VAnchor.ParentBottom;  						topBarControls.AddChild(autoUppercase);  						autoUppercase.CheckedStateChanged += (sender' e) =>  						{  							UserSettings.Instance.Fields.SetBool(TerminalAutoUppercaseKey' autoUppercase.Checked);  						};  						manualEntryTopToBottomLayout.AddChild(topBarControls);  					}  				}    				{  					FlowLayoutWidget leftToRight = new FlowLayoutWidget();  					leftToRight.AnchorAll();    					textScrollWidget = new TextScrollWidget(PrinterOutputCache.Instance.PrinterLines);  					//outputScrollWidget.Height = 100;  					Debug.WriteLine(PrinterOutputCache.Instance.PrinterLines);  					textScrollWidget.BackgroundColor = ActiveTheme.Instance.SecondaryBackgroundColor;  					textScrollWidget.TextColor = ActiveTheme.Instance.PrimaryTextColor;  					textScrollWidget.HAnchor = HAnchor.ParentLeftRight;  					textScrollWidget.VAnchor = VAnchor.ParentBottomTop;  					textScrollWidget.Margin = new BorderDouble(0' 5);  					textScrollWidget.Padding = new BorderDouble(3' 0);    					leftToRight.AddChild(textScrollWidget);    					TextScrollBar textScrollBar = new TextScrollBar(textScrollWidget' 15);  					leftToRight.AddChild(textScrollBar);    					manualEntryTopToBottomLayout.AddChild(leftToRight);  				}    				FlowLayoutWidget manualEntryLayout = new FlowLayoutWidget(FlowDirection.LeftToRight);  				manualEntryLayout.BackgroundColor = this.backgroundColor;  				manualEntryLayout.HAnchor = HAnchor.ParentLeftRight;  				{  					manualCommandTextEdit = new MHTextEditWidget(""' typeFace: ApplicationController.MonoSpacedTypeFace);  					//manualCommandTextEdit.BackgroundColor = RGBA_Bytes.White;  					manualCommandTextEdit.Margin = new BorderDouble(right: 3);  					manualCommandTextEdit.HAnchor = HAnchor.ParentLeftRight;  					manualCommandTextEdit.VAnchor = VAnchor.ParentBottom;  					manualCommandTextEdit.ActualTextEditWidget.EnterPressed += manualCommandTextEdit_EnterPressed;  					manualCommandTextEdit.ActualTextEditWidget.KeyDown += manualCommandTextEdit_KeyDown;  					manualEntryLayout.AddChild(manualCommandTextEdit);  				}    				manualEntryTopToBottomLayout.AddChild(manualEntryLayout);    				Button clearConsoleButton = controlButtonFactory.Generate("Clear".Localize());  				clearConsoleButton.Margin = new BorderDouble(0);  				clearConsoleButton.Click += (sender' e) =>  				{  					PrinterOutputCache.Instance.Clear();  				};    				//Output Console text to screen  				Button exportConsoleTextButton = controlButtonFactory.Generate("Export".Localize() + "...");  				exportConsoleTextButton.Click += (sender' mouseEvent) =>  				{  					UiThread.RunOnIdle(DoExportExportLog_Click);  				};    				Button closeButton = controlButtonFactory.Generate("Close".Localize());  				closeButton.Click += (sender' e) =>  				{  					UiThread.RunOnIdle(CloseWindow);  				};    				sendCommand = controlButtonFactory.Generate("Send".Localize());  				sendCommand.Click += sendManualCommandToPrinter_Click;    				FlowLayoutWidget bottomRowContainer = new FlowLayoutWidget();  				bottomRowContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				bottomRowContainer.Margin = new BorderDouble(0' 3);    				bottomRowContainer.AddChild(sendCommand);  				bottomRowContainer.AddChild(clearConsoleButton);  				bottomRowContainer.AddChild(exportConsoleTextButton);  				bottomRowContainer.AddChild(new HorizontalSpacer());    				if (showInWindow)  				{  					bottomRowContainer.AddChild(closeButton);  				}    				manualEntryTopToBottomLayout.AddChild(bottomRowContainer);  				manualEntryTopToBottomLayout.AnchorAll();    				topLeftToRightLayout.AddChild(manualEntryTopToBottomLayout);  			}
Magic Number,MatterHackers.MatterControl,TerminalWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\TerminalWindow\TerminalWidget.cs,TerminalWidget,The following statement contains a magic number: {  				FlowLayoutWidget manualEntryTopToBottomLayout = new FlowLayoutWidget(FlowDirection.TopToBottom);  				manualEntryTopToBottomLayout.VAnchor |= Agg.UI.VAnchor.ParentTop;  				manualEntryTopToBottomLayout.Padding = new BorderDouble(top: 8);    				{  					FlowLayoutWidget topBarControls = new FlowLayoutWidget(FlowDirection.LeftToRight);  					topBarControls.HAnchor |= HAnchor.ParentLeft;    					{  						filterOutput = new CheckBox("Filter Output".Localize())  						{  							Margin = new BorderDouble(5' 5' 5' 2)'  							TextColor = this.textColor'  							VAnchor = Agg.UI.VAnchor.ParentBottom'  						};  						filterOutput.CheckedStateChanged += (object sender' EventArgs e) =>  						{  							if (filterOutput.Checked)  							{  								textScrollWidget.SetLineStartFilter(new string[] { "<-wait"' "<-ok"' "<-T" });  							}  							else  							{  								textScrollWidget.SetLineStartFilter(null);  							}    							UserSettings.Instance.Fields.SetBool(TerminalFilterOutputKey' filterOutput.Checked);  						};    						topBarControls.AddChild(filterOutput);  					}    					{  						autoUppercase = new CheckBox("Auto Uppercase".Localize());  						autoUppercase.Margin = new BorderDouble(5' 5' 5' 2);  						autoUppercase.Checked = UserSettings.Instance.Fields.GetBool(TerminalAutoUppercaseKey' true);  						autoUppercase.TextColor = this.textColor;  						autoUppercase.VAnchor = Agg.UI.VAnchor.ParentBottom;  						topBarControls.AddChild(autoUppercase);  						autoUppercase.CheckedStateChanged += (sender' e) =>  						{  							UserSettings.Instance.Fields.SetBool(TerminalAutoUppercaseKey' autoUppercase.Checked);  						};  						manualEntryTopToBottomLayout.AddChild(topBarControls);  					}  				}    				{  					FlowLayoutWidget leftToRight = new FlowLayoutWidget();  					leftToRight.AnchorAll();    					textScrollWidget = new TextScrollWidget(PrinterOutputCache.Instance.PrinterLines);  					//outputScrollWidget.Height = 100;  					Debug.WriteLine(PrinterOutputCache.Instance.PrinterLines);  					textScrollWidget.BackgroundColor = ActiveTheme.Instance.SecondaryBackgroundColor;  					textScrollWidget.TextColor = ActiveTheme.Instance.PrimaryTextColor;  					textScrollWidget.HAnchor = HAnchor.ParentLeftRight;  					textScrollWidget.VAnchor = VAnchor.ParentBottomTop;  					textScrollWidget.Margin = new BorderDouble(0' 5);  					textScrollWidget.Padding = new BorderDouble(3' 0);    					leftToRight.AddChild(textScrollWidget);    					TextScrollBar textScrollBar = new TextScrollBar(textScrollWidget' 15);  					leftToRight.AddChild(textScrollBar);    					manualEntryTopToBottomLayout.AddChild(leftToRight);  				}    				FlowLayoutWidget manualEntryLayout = new FlowLayoutWidget(FlowDirection.LeftToRight);  				manualEntryLayout.BackgroundColor = this.backgroundColor;  				manualEntryLayout.HAnchor = HAnchor.ParentLeftRight;  				{  					manualCommandTextEdit = new MHTextEditWidget(""' typeFace: ApplicationController.MonoSpacedTypeFace);  					//manualCommandTextEdit.BackgroundColor = RGBA_Bytes.White;  					manualCommandTextEdit.Margin = new BorderDouble(right: 3);  					manualCommandTextEdit.HAnchor = HAnchor.ParentLeftRight;  					manualCommandTextEdit.VAnchor = VAnchor.ParentBottom;  					manualCommandTextEdit.ActualTextEditWidget.EnterPressed += manualCommandTextEdit_EnterPressed;  					manualCommandTextEdit.ActualTextEditWidget.KeyDown += manualCommandTextEdit_KeyDown;  					manualEntryLayout.AddChild(manualCommandTextEdit);  				}    				manualEntryTopToBottomLayout.AddChild(manualEntryLayout);    				Button clearConsoleButton = controlButtonFactory.Generate("Clear".Localize());  				clearConsoleButton.Margin = new BorderDouble(0);  				clearConsoleButton.Click += (sender' e) =>  				{  					PrinterOutputCache.Instance.Clear();  				};    				//Output Console text to screen  				Button exportConsoleTextButton = controlButtonFactory.Generate("Export".Localize() + "...");  				exportConsoleTextButton.Click += (sender' mouseEvent) =>  				{  					UiThread.RunOnIdle(DoExportExportLog_Click);  				};    				Button closeButton = controlButtonFactory.Generate("Close".Localize());  				closeButton.Click += (sender' e) =>  				{  					UiThread.RunOnIdle(CloseWindow);  				};    				sendCommand = controlButtonFactory.Generate("Send".Localize());  				sendCommand.Click += sendManualCommandToPrinter_Click;    				FlowLayoutWidget bottomRowContainer = new FlowLayoutWidget();  				bottomRowContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				bottomRowContainer.Margin = new BorderDouble(0' 3);    				bottomRowContainer.AddChild(sendCommand);  				bottomRowContainer.AddChild(clearConsoleButton);  				bottomRowContainer.AddChild(exportConsoleTextButton);  				bottomRowContainer.AddChild(new HorizontalSpacer());    				if (showInWindow)  				{  					bottomRowContainer.AddChild(closeButton);  				}    				manualEntryTopToBottomLayout.AddChild(bottomRowContainer);  				manualEntryTopToBottomLayout.AnchorAll();    				topLeftToRightLayout.AddChild(manualEntryTopToBottomLayout);  			}
Magic Number,MatterHackers.MatterControl,TerminalWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\TerminalWindow\TerminalWidget.cs,TerminalWidget,The following statement contains a magic number: {  				FlowLayoutWidget manualEntryTopToBottomLayout = new FlowLayoutWidget(FlowDirection.TopToBottom);  				manualEntryTopToBottomLayout.VAnchor |= Agg.UI.VAnchor.ParentTop;  				manualEntryTopToBottomLayout.Padding = new BorderDouble(top: 8);    				{  					FlowLayoutWidget topBarControls = new FlowLayoutWidget(FlowDirection.LeftToRight);  					topBarControls.HAnchor |= HAnchor.ParentLeft;    					{  						filterOutput = new CheckBox("Filter Output".Localize())  						{  							Margin = new BorderDouble(5' 5' 5' 2)'  							TextColor = this.textColor'  							VAnchor = Agg.UI.VAnchor.ParentBottom'  						};  						filterOutput.CheckedStateChanged += (object sender' EventArgs e) =>  						{  							if (filterOutput.Checked)  							{  								textScrollWidget.SetLineStartFilter(new string[] { "<-wait"' "<-ok"' "<-T" });  							}  							else  							{  								textScrollWidget.SetLineStartFilter(null);  							}    							UserSettings.Instance.Fields.SetBool(TerminalFilterOutputKey' filterOutput.Checked);  						};    						topBarControls.AddChild(filterOutput);  					}    					{  						autoUppercase = new CheckBox("Auto Uppercase".Localize());  						autoUppercase.Margin = new BorderDouble(5' 5' 5' 2);  						autoUppercase.Checked = UserSettings.Instance.Fields.GetBool(TerminalAutoUppercaseKey' true);  						autoUppercase.TextColor = this.textColor;  						autoUppercase.VAnchor = Agg.UI.VAnchor.ParentBottom;  						topBarControls.AddChild(autoUppercase);  						autoUppercase.CheckedStateChanged += (sender' e) =>  						{  							UserSettings.Instance.Fields.SetBool(TerminalAutoUppercaseKey' autoUppercase.Checked);  						};  						manualEntryTopToBottomLayout.AddChild(topBarControls);  					}  				}    				{  					FlowLayoutWidget leftToRight = new FlowLayoutWidget();  					leftToRight.AnchorAll();    					textScrollWidget = new TextScrollWidget(PrinterOutputCache.Instance.PrinterLines);  					//outputScrollWidget.Height = 100;  					Debug.WriteLine(PrinterOutputCache.Instance.PrinterLines);  					textScrollWidget.BackgroundColor = ActiveTheme.Instance.SecondaryBackgroundColor;  					textScrollWidget.TextColor = ActiveTheme.Instance.PrimaryTextColor;  					textScrollWidget.HAnchor = HAnchor.ParentLeftRight;  					textScrollWidget.VAnchor = VAnchor.ParentBottomTop;  					textScrollWidget.Margin = new BorderDouble(0' 5);  					textScrollWidget.Padding = new BorderDouble(3' 0);    					leftToRight.AddChild(textScrollWidget);    					TextScrollBar textScrollBar = new TextScrollBar(textScrollWidget' 15);  					leftToRight.AddChild(textScrollBar);    					manualEntryTopToBottomLayout.AddChild(leftToRight);  				}    				FlowLayoutWidget manualEntryLayout = new FlowLayoutWidget(FlowDirection.LeftToRight);  				manualEntryLayout.BackgroundColor = this.backgroundColor;  				manualEntryLayout.HAnchor = HAnchor.ParentLeftRight;  				{  					manualCommandTextEdit = new MHTextEditWidget(""' typeFace: ApplicationController.MonoSpacedTypeFace);  					//manualCommandTextEdit.BackgroundColor = RGBA_Bytes.White;  					manualCommandTextEdit.Margin = new BorderDouble(right: 3);  					manualCommandTextEdit.HAnchor = HAnchor.ParentLeftRight;  					manualCommandTextEdit.VAnchor = VAnchor.ParentBottom;  					manualCommandTextEdit.ActualTextEditWidget.EnterPressed += manualCommandTextEdit_EnterPressed;  					manualCommandTextEdit.ActualTextEditWidget.KeyDown += manualCommandTextEdit_KeyDown;  					manualEntryLayout.AddChild(manualCommandTextEdit);  				}    				manualEntryTopToBottomLayout.AddChild(manualEntryLayout);    				Button clearConsoleButton = controlButtonFactory.Generate("Clear".Localize());  				clearConsoleButton.Margin = new BorderDouble(0);  				clearConsoleButton.Click += (sender' e) =>  				{  					PrinterOutputCache.Instance.Clear();  				};    				//Output Console text to screen  				Button exportConsoleTextButton = controlButtonFactory.Generate("Export".Localize() + "...");  				exportConsoleTextButton.Click += (sender' mouseEvent) =>  				{  					UiThread.RunOnIdle(DoExportExportLog_Click);  				};    				Button closeButton = controlButtonFactory.Generate("Close".Localize());  				closeButton.Click += (sender' e) =>  				{  					UiThread.RunOnIdle(CloseWindow);  				};    				sendCommand = controlButtonFactory.Generate("Send".Localize());  				sendCommand.Click += sendManualCommandToPrinter_Click;    				FlowLayoutWidget bottomRowContainer = new FlowLayoutWidget();  				bottomRowContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				bottomRowContainer.Margin = new BorderDouble(0' 3);    				bottomRowContainer.AddChild(sendCommand);  				bottomRowContainer.AddChild(clearConsoleButton);  				bottomRowContainer.AddChild(exportConsoleTextButton);  				bottomRowContainer.AddChild(new HorizontalSpacer());    				if (showInWindow)  				{  					bottomRowContainer.AddChild(closeButton);  				}    				manualEntryTopToBottomLayout.AddChild(bottomRowContainer);  				manualEntryTopToBottomLayout.AnchorAll();    				topLeftToRightLayout.AddChild(manualEntryTopToBottomLayout);  			}
Magic Number,MatterHackers.MatterControl,TerminalWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\TerminalWindow\TerminalWidget.cs,TerminalWidget,The following statement contains a magic number: {  				FlowLayoutWidget manualEntryTopToBottomLayout = new FlowLayoutWidget(FlowDirection.TopToBottom);  				manualEntryTopToBottomLayout.VAnchor |= Agg.UI.VAnchor.ParentTop;  				manualEntryTopToBottomLayout.Padding = new BorderDouble(top: 8);    				{  					FlowLayoutWidget topBarControls = new FlowLayoutWidget(FlowDirection.LeftToRight);  					topBarControls.HAnchor |= HAnchor.ParentLeft;    					{  						filterOutput = new CheckBox("Filter Output".Localize())  						{  							Margin = new BorderDouble(5' 5' 5' 2)'  							TextColor = this.textColor'  							VAnchor = Agg.UI.VAnchor.ParentBottom'  						};  						filterOutput.CheckedStateChanged += (object sender' EventArgs e) =>  						{  							if (filterOutput.Checked)  							{  								textScrollWidget.SetLineStartFilter(new string[] { "<-wait"' "<-ok"' "<-T" });  							}  							else  							{  								textScrollWidget.SetLineStartFilter(null);  							}    							UserSettings.Instance.Fields.SetBool(TerminalFilterOutputKey' filterOutput.Checked);  						};    						topBarControls.AddChild(filterOutput);  					}    					{  						autoUppercase = new CheckBox("Auto Uppercase".Localize());  						autoUppercase.Margin = new BorderDouble(5' 5' 5' 2);  						autoUppercase.Checked = UserSettings.Instance.Fields.GetBool(TerminalAutoUppercaseKey' true);  						autoUppercase.TextColor = this.textColor;  						autoUppercase.VAnchor = Agg.UI.VAnchor.ParentBottom;  						topBarControls.AddChild(autoUppercase);  						autoUppercase.CheckedStateChanged += (sender' e) =>  						{  							UserSettings.Instance.Fields.SetBool(TerminalAutoUppercaseKey' autoUppercase.Checked);  						};  						manualEntryTopToBottomLayout.AddChild(topBarControls);  					}  				}    				{  					FlowLayoutWidget leftToRight = new FlowLayoutWidget();  					leftToRight.AnchorAll();    					textScrollWidget = new TextScrollWidget(PrinterOutputCache.Instance.PrinterLines);  					//outputScrollWidget.Height = 100;  					Debug.WriteLine(PrinterOutputCache.Instance.PrinterLines);  					textScrollWidget.BackgroundColor = ActiveTheme.Instance.SecondaryBackgroundColor;  					textScrollWidget.TextColor = ActiveTheme.Instance.PrimaryTextColor;  					textScrollWidget.HAnchor = HAnchor.ParentLeftRight;  					textScrollWidget.VAnchor = VAnchor.ParentBottomTop;  					textScrollWidget.Margin = new BorderDouble(0' 5);  					textScrollWidget.Padding = new BorderDouble(3' 0);    					leftToRight.AddChild(textScrollWidget);    					TextScrollBar textScrollBar = new TextScrollBar(textScrollWidget' 15);  					leftToRight.AddChild(textScrollBar);    					manualEntryTopToBottomLayout.AddChild(leftToRight);  				}    				FlowLayoutWidget manualEntryLayout = new FlowLayoutWidget(FlowDirection.LeftToRight);  				manualEntryLayout.BackgroundColor = this.backgroundColor;  				manualEntryLayout.HAnchor = HAnchor.ParentLeftRight;  				{  					manualCommandTextEdit = new MHTextEditWidget(""' typeFace: ApplicationController.MonoSpacedTypeFace);  					//manualCommandTextEdit.BackgroundColor = RGBA_Bytes.White;  					manualCommandTextEdit.Margin = new BorderDouble(right: 3);  					manualCommandTextEdit.HAnchor = HAnchor.ParentLeftRight;  					manualCommandTextEdit.VAnchor = VAnchor.ParentBottom;  					manualCommandTextEdit.ActualTextEditWidget.EnterPressed += manualCommandTextEdit_EnterPressed;  					manualCommandTextEdit.ActualTextEditWidget.KeyDown += manualCommandTextEdit_KeyDown;  					manualEntryLayout.AddChild(manualCommandTextEdit);  				}    				manualEntryTopToBottomLayout.AddChild(manualEntryLayout);    				Button clearConsoleButton = controlButtonFactory.Generate("Clear".Localize());  				clearConsoleButton.Margin = new BorderDouble(0);  				clearConsoleButton.Click += (sender' e) =>  				{  					PrinterOutputCache.Instance.Clear();  				};    				//Output Console text to screen  				Button exportConsoleTextButton = controlButtonFactory.Generate("Export".Localize() + "...");  				exportConsoleTextButton.Click += (sender' mouseEvent) =>  				{  					UiThread.RunOnIdle(DoExportExportLog_Click);  				};    				Button closeButton = controlButtonFactory.Generate("Close".Localize());  				closeButton.Click += (sender' e) =>  				{  					UiThread.RunOnIdle(CloseWindow);  				};    				sendCommand = controlButtonFactory.Generate("Send".Localize());  				sendCommand.Click += sendManualCommandToPrinter_Click;    				FlowLayoutWidget bottomRowContainer = new FlowLayoutWidget();  				bottomRowContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				bottomRowContainer.Margin = new BorderDouble(0' 3);    				bottomRowContainer.AddChild(sendCommand);  				bottomRowContainer.AddChild(clearConsoleButton);  				bottomRowContainer.AddChild(exportConsoleTextButton);  				bottomRowContainer.AddChild(new HorizontalSpacer());    				if (showInWindow)  				{  					bottomRowContainer.AddChild(closeButton);  				}    				manualEntryTopToBottomLayout.AddChild(bottomRowContainer);  				manualEntryTopToBottomLayout.AnchorAll();    				topLeftToRightLayout.AddChild(manualEntryTopToBottomLayout);  			}
Magic Number,MatterHackers.MatterControl,TerminalWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\TerminalWindow\TerminalWidget.cs,TerminalWidget,The following statement contains a magic number: {  				FlowLayoutWidget manualEntryTopToBottomLayout = new FlowLayoutWidget(FlowDirection.TopToBottom);  				manualEntryTopToBottomLayout.VAnchor |= Agg.UI.VAnchor.ParentTop;  				manualEntryTopToBottomLayout.Padding = new BorderDouble(top: 8);    				{  					FlowLayoutWidget topBarControls = new FlowLayoutWidget(FlowDirection.LeftToRight);  					topBarControls.HAnchor |= HAnchor.ParentLeft;    					{  						filterOutput = new CheckBox("Filter Output".Localize())  						{  							Margin = new BorderDouble(5' 5' 5' 2)'  							TextColor = this.textColor'  							VAnchor = Agg.UI.VAnchor.ParentBottom'  						};  						filterOutput.CheckedStateChanged += (object sender' EventArgs e) =>  						{  							if (filterOutput.Checked)  							{  								textScrollWidget.SetLineStartFilter(new string[] { "<-wait"' "<-ok"' "<-T" });  							}  							else  							{  								textScrollWidget.SetLineStartFilter(null);  							}    							UserSettings.Instance.Fields.SetBool(TerminalFilterOutputKey' filterOutput.Checked);  						};    						topBarControls.AddChild(filterOutput);  					}    					{  						autoUppercase = new CheckBox("Auto Uppercase".Localize());  						autoUppercase.Margin = new BorderDouble(5' 5' 5' 2);  						autoUppercase.Checked = UserSettings.Instance.Fields.GetBool(TerminalAutoUppercaseKey' true);  						autoUppercase.TextColor = this.textColor;  						autoUppercase.VAnchor = Agg.UI.VAnchor.ParentBottom;  						topBarControls.AddChild(autoUppercase);  						autoUppercase.CheckedStateChanged += (sender' e) =>  						{  							UserSettings.Instance.Fields.SetBool(TerminalAutoUppercaseKey' autoUppercase.Checked);  						};  						manualEntryTopToBottomLayout.AddChild(topBarControls);  					}  				}    				{  					FlowLayoutWidget leftToRight = new FlowLayoutWidget();  					leftToRight.AnchorAll();    					textScrollWidget = new TextScrollWidget(PrinterOutputCache.Instance.PrinterLines);  					//outputScrollWidget.Height = 100;  					Debug.WriteLine(PrinterOutputCache.Instance.PrinterLines);  					textScrollWidget.BackgroundColor = ActiveTheme.Instance.SecondaryBackgroundColor;  					textScrollWidget.TextColor = ActiveTheme.Instance.PrimaryTextColor;  					textScrollWidget.HAnchor = HAnchor.ParentLeftRight;  					textScrollWidget.VAnchor = VAnchor.ParentBottomTop;  					textScrollWidget.Margin = new BorderDouble(0' 5);  					textScrollWidget.Padding = new BorderDouble(3' 0);    					leftToRight.AddChild(textScrollWidget);    					TextScrollBar textScrollBar = new TextScrollBar(textScrollWidget' 15);  					leftToRight.AddChild(textScrollBar);    					manualEntryTopToBottomLayout.AddChild(leftToRight);  				}    				FlowLayoutWidget manualEntryLayout = new FlowLayoutWidget(FlowDirection.LeftToRight);  				manualEntryLayout.BackgroundColor = this.backgroundColor;  				manualEntryLayout.HAnchor = HAnchor.ParentLeftRight;  				{  					manualCommandTextEdit = new MHTextEditWidget(""' typeFace: ApplicationController.MonoSpacedTypeFace);  					//manualCommandTextEdit.BackgroundColor = RGBA_Bytes.White;  					manualCommandTextEdit.Margin = new BorderDouble(right: 3);  					manualCommandTextEdit.HAnchor = HAnchor.ParentLeftRight;  					manualCommandTextEdit.VAnchor = VAnchor.ParentBottom;  					manualCommandTextEdit.ActualTextEditWidget.EnterPressed += manualCommandTextEdit_EnterPressed;  					manualCommandTextEdit.ActualTextEditWidget.KeyDown += manualCommandTextEdit_KeyDown;  					manualEntryLayout.AddChild(manualCommandTextEdit);  				}    				manualEntryTopToBottomLayout.AddChild(manualEntryLayout);    				Button clearConsoleButton = controlButtonFactory.Generate("Clear".Localize());  				clearConsoleButton.Margin = new BorderDouble(0);  				clearConsoleButton.Click += (sender' e) =>  				{  					PrinterOutputCache.Instance.Clear();  				};    				//Output Console text to screen  				Button exportConsoleTextButton = controlButtonFactory.Generate("Export".Localize() + "...");  				exportConsoleTextButton.Click += (sender' mouseEvent) =>  				{  					UiThread.RunOnIdle(DoExportExportLog_Click);  				};    				Button closeButton = controlButtonFactory.Generate("Close".Localize());  				closeButton.Click += (sender' e) =>  				{  					UiThread.RunOnIdle(CloseWindow);  				};    				sendCommand = controlButtonFactory.Generate("Send".Localize());  				sendCommand.Click += sendManualCommandToPrinter_Click;    				FlowLayoutWidget bottomRowContainer = new FlowLayoutWidget();  				bottomRowContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				bottomRowContainer.Margin = new BorderDouble(0' 3);    				bottomRowContainer.AddChild(sendCommand);  				bottomRowContainer.AddChild(clearConsoleButton);  				bottomRowContainer.AddChild(exportConsoleTextButton);  				bottomRowContainer.AddChild(new HorizontalSpacer());    				if (showInWindow)  				{  					bottomRowContainer.AddChild(closeButton);  				}    				manualEntryTopToBottomLayout.AddChild(bottomRowContainer);  				manualEntryTopToBottomLayout.AnchorAll();    				topLeftToRightLayout.AddChild(manualEntryTopToBottomLayout);  			}
Magic Number,MatterHackers.MatterControl,TerminalWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\TerminalWindow\TerminalWidget.cs,TerminalWidget,The following statement contains a magic number: {  				FlowLayoutWidget manualEntryTopToBottomLayout = new FlowLayoutWidget(FlowDirection.TopToBottom);  				manualEntryTopToBottomLayout.VAnchor |= Agg.UI.VAnchor.ParentTop;  				manualEntryTopToBottomLayout.Padding = new BorderDouble(top: 8);    				{  					FlowLayoutWidget topBarControls = new FlowLayoutWidget(FlowDirection.LeftToRight);  					topBarControls.HAnchor |= HAnchor.ParentLeft;    					{  						filterOutput = new CheckBox("Filter Output".Localize())  						{  							Margin = new BorderDouble(5' 5' 5' 2)'  							TextColor = this.textColor'  							VAnchor = Agg.UI.VAnchor.ParentBottom'  						};  						filterOutput.CheckedStateChanged += (object sender' EventArgs e) =>  						{  							if (filterOutput.Checked)  							{  								textScrollWidget.SetLineStartFilter(new string[] { "<-wait"' "<-ok"' "<-T" });  							}  							else  							{  								textScrollWidget.SetLineStartFilter(null);  							}    							UserSettings.Instance.Fields.SetBool(TerminalFilterOutputKey' filterOutput.Checked);  						};    						topBarControls.AddChild(filterOutput);  					}    					{  						autoUppercase = new CheckBox("Auto Uppercase".Localize());  						autoUppercase.Margin = new BorderDouble(5' 5' 5' 2);  						autoUppercase.Checked = UserSettings.Instance.Fields.GetBool(TerminalAutoUppercaseKey' true);  						autoUppercase.TextColor = this.textColor;  						autoUppercase.VAnchor = Agg.UI.VAnchor.ParentBottom;  						topBarControls.AddChild(autoUppercase);  						autoUppercase.CheckedStateChanged += (sender' e) =>  						{  							UserSettings.Instance.Fields.SetBool(TerminalAutoUppercaseKey' autoUppercase.Checked);  						};  						manualEntryTopToBottomLayout.AddChild(topBarControls);  					}  				}    				{  					FlowLayoutWidget leftToRight = new FlowLayoutWidget();  					leftToRight.AnchorAll();    					textScrollWidget = new TextScrollWidget(PrinterOutputCache.Instance.PrinterLines);  					//outputScrollWidget.Height = 100;  					Debug.WriteLine(PrinterOutputCache.Instance.PrinterLines);  					textScrollWidget.BackgroundColor = ActiveTheme.Instance.SecondaryBackgroundColor;  					textScrollWidget.TextColor = ActiveTheme.Instance.PrimaryTextColor;  					textScrollWidget.HAnchor = HAnchor.ParentLeftRight;  					textScrollWidget.VAnchor = VAnchor.ParentBottomTop;  					textScrollWidget.Margin = new BorderDouble(0' 5);  					textScrollWidget.Padding = new BorderDouble(3' 0);    					leftToRight.AddChild(textScrollWidget);    					TextScrollBar textScrollBar = new TextScrollBar(textScrollWidget' 15);  					leftToRight.AddChild(textScrollBar);    					manualEntryTopToBottomLayout.AddChild(leftToRight);  				}    				FlowLayoutWidget manualEntryLayout = new FlowLayoutWidget(FlowDirection.LeftToRight);  				manualEntryLayout.BackgroundColor = this.backgroundColor;  				manualEntryLayout.HAnchor = HAnchor.ParentLeftRight;  				{  					manualCommandTextEdit = new MHTextEditWidget(""' typeFace: ApplicationController.MonoSpacedTypeFace);  					//manualCommandTextEdit.BackgroundColor = RGBA_Bytes.White;  					manualCommandTextEdit.Margin = new BorderDouble(right: 3);  					manualCommandTextEdit.HAnchor = HAnchor.ParentLeftRight;  					manualCommandTextEdit.VAnchor = VAnchor.ParentBottom;  					manualCommandTextEdit.ActualTextEditWidget.EnterPressed += manualCommandTextEdit_EnterPressed;  					manualCommandTextEdit.ActualTextEditWidget.KeyDown += manualCommandTextEdit_KeyDown;  					manualEntryLayout.AddChild(manualCommandTextEdit);  				}    				manualEntryTopToBottomLayout.AddChild(manualEntryLayout);    				Button clearConsoleButton = controlButtonFactory.Generate("Clear".Localize());  				clearConsoleButton.Margin = new BorderDouble(0);  				clearConsoleButton.Click += (sender' e) =>  				{  					PrinterOutputCache.Instance.Clear();  				};    				//Output Console text to screen  				Button exportConsoleTextButton = controlButtonFactory.Generate("Export".Localize() + "...");  				exportConsoleTextButton.Click += (sender' mouseEvent) =>  				{  					UiThread.RunOnIdle(DoExportExportLog_Click);  				};    				Button closeButton = controlButtonFactory.Generate("Close".Localize());  				closeButton.Click += (sender' e) =>  				{  					UiThread.RunOnIdle(CloseWindow);  				};    				sendCommand = controlButtonFactory.Generate("Send".Localize());  				sendCommand.Click += sendManualCommandToPrinter_Click;    				FlowLayoutWidget bottomRowContainer = new FlowLayoutWidget();  				bottomRowContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				bottomRowContainer.Margin = new BorderDouble(0' 3);    				bottomRowContainer.AddChild(sendCommand);  				bottomRowContainer.AddChild(clearConsoleButton);  				bottomRowContainer.AddChild(exportConsoleTextButton);  				bottomRowContainer.AddChild(new HorizontalSpacer());    				if (showInWindow)  				{  					bottomRowContainer.AddChild(closeButton);  				}    				manualEntryTopToBottomLayout.AddChild(bottomRowContainer);  				manualEntryTopToBottomLayout.AnchorAll();    				topLeftToRightLayout.AddChild(manualEntryTopToBottomLayout);  			}
Magic Number,MatterHackers.MatterControl,TerminalWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\TerminalWindow\TerminalWidget.cs,TerminalWidget,The following statement contains a magic number: {  				FlowLayoutWidget manualEntryTopToBottomLayout = new FlowLayoutWidget(FlowDirection.TopToBottom);  				manualEntryTopToBottomLayout.VAnchor |= Agg.UI.VAnchor.ParentTop;  				manualEntryTopToBottomLayout.Padding = new BorderDouble(top: 8);    				{  					FlowLayoutWidget topBarControls = new FlowLayoutWidget(FlowDirection.LeftToRight);  					topBarControls.HAnchor |= HAnchor.ParentLeft;    					{  						filterOutput = new CheckBox("Filter Output".Localize())  						{  							Margin = new BorderDouble(5' 5' 5' 2)'  							TextColor = this.textColor'  							VAnchor = Agg.UI.VAnchor.ParentBottom'  						};  						filterOutput.CheckedStateChanged += (object sender' EventArgs e) =>  						{  							if (filterOutput.Checked)  							{  								textScrollWidget.SetLineStartFilter(new string[] { "<-wait"' "<-ok"' "<-T" });  							}  							else  							{  								textScrollWidget.SetLineStartFilter(null);  							}    							UserSettings.Instance.Fields.SetBool(TerminalFilterOutputKey' filterOutput.Checked);  						};    						topBarControls.AddChild(filterOutput);  					}    					{  						autoUppercase = new CheckBox("Auto Uppercase".Localize());  						autoUppercase.Margin = new BorderDouble(5' 5' 5' 2);  						autoUppercase.Checked = UserSettings.Instance.Fields.GetBool(TerminalAutoUppercaseKey' true);  						autoUppercase.TextColor = this.textColor;  						autoUppercase.VAnchor = Agg.UI.VAnchor.ParentBottom;  						topBarControls.AddChild(autoUppercase);  						autoUppercase.CheckedStateChanged += (sender' e) =>  						{  							UserSettings.Instance.Fields.SetBool(TerminalAutoUppercaseKey' autoUppercase.Checked);  						};  						manualEntryTopToBottomLayout.AddChild(topBarControls);  					}  				}    				{  					FlowLayoutWidget leftToRight = new FlowLayoutWidget();  					leftToRight.AnchorAll();    					textScrollWidget = new TextScrollWidget(PrinterOutputCache.Instance.PrinterLines);  					//outputScrollWidget.Height = 100;  					Debug.WriteLine(PrinterOutputCache.Instance.PrinterLines);  					textScrollWidget.BackgroundColor = ActiveTheme.Instance.SecondaryBackgroundColor;  					textScrollWidget.TextColor = ActiveTheme.Instance.PrimaryTextColor;  					textScrollWidget.HAnchor = HAnchor.ParentLeftRight;  					textScrollWidget.VAnchor = VAnchor.ParentBottomTop;  					textScrollWidget.Margin = new BorderDouble(0' 5);  					textScrollWidget.Padding = new BorderDouble(3' 0);    					leftToRight.AddChild(textScrollWidget);    					TextScrollBar textScrollBar = new TextScrollBar(textScrollWidget' 15);  					leftToRight.AddChild(textScrollBar);    					manualEntryTopToBottomLayout.AddChild(leftToRight);  				}    				FlowLayoutWidget manualEntryLayout = new FlowLayoutWidget(FlowDirection.LeftToRight);  				manualEntryLayout.BackgroundColor = this.backgroundColor;  				manualEntryLayout.HAnchor = HAnchor.ParentLeftRight;  				{  					manualCommandTextEdit = new MHTextEditWidget(""' typeFace: ApplicationController.MonoSpacedTypeFace);  					//manualCommandTextEdit.BackgroundColor = RGBA_Bytes.White;  					manualCommandTextEdit.Margin = new BorderDouble(right: 3);  					manualCommandTextEdit.HAnchor = HAnchor.ParentLeftRight;  					manualCommandTextEdit.VAnchor = VAnchor.ParentBottom;  					manualCommandTextEdit.ActualTextEditWidget.EnterPressed += manualCommandTextEdit_EnterPressed;  					manualCommandTextEdit.ActualTextEditWidget.KeyDown += manualCommandTextEdit_KeyDown;  					manualEntryLayout.AddChild(manualCommandTextEdit);  				}    				manualEntryTopToBottomLayout.AddChild(manualEntryLayout);    				Button clearConsoleButton = controlButtonFactory.Generate("Clear".Localize());  				clearConsoleButton.Margin = new BorderDouble(0);  				clearConsoleButton.Click += (sender' e) =>  				{  					PrinterOutputCache.Instance.Clear();  				};    				//Output Console text to screen  				Button exportConsoleTextButton = controlButtonFactory.Generate("Export".Localize() + "...");  				exportConsoleTextButton.Click += (sender' mouseEvent) =>  				{  					UiThread.RunOnIdle(DoExportExportLog_Click);  				};    				Button closeButton = controlButtonFactory.Generate("Close".Localize());  				closeButton.Click += (sender' e) =>  				{  					UiThread.RunOnIdle(CloseWindow);  				};    				sendCommand = controlButtonFactory.Generate("Send".Localize());  				sendCommand.Click += sendManualCommandToPrinter_Click;    				FlowLayoutWidget bottomRowContainer = new FlowLayoutWidget();  				bottomRowContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				bottomRowContainer.Margin = new BorderDouble(0' 3);    				bottomRowContainer.AddChild(sendCommand);  				bottomRowContainer.AddChild(clearConsoleButton);  				bottomRowContainer.AddChild(exportConsoleTextButton);  				bottomRowContainer.AddChild(new HorizontalSpacer());    				if (showInWindow)  				{  					bottomRowContainer.AddChild(closeButton);  				}    				manualEntryTopToBottomLayout.AddChild(bottomRowContainer);  				manualEntryTopToBottomLayout.AnchorAll();    				topLeftToRightLayout.AddChild(manualEntryTopToBottomLayout);  			}
Magic Number,MatterHackers.MatterControl,TerminalWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\TerminalWindow\TerminalWidget.cs,TerminalWidget,The following statement contains a magic number: {  				FlowLayoutWidget manualEntryTopToBottomLayout = new FlowLayoutWidget(FlowDirection.TopToBottom);  				manualEntryTopToBottomLayout.VAnchor |= Agg.UI.VAnchor.ParentTop;  				manualEntryTopToBottomLayout.Padding = new BorderDouble(top: 8);    				{  					FlowLayoutWidget topBarControls = new FlowLayoutWidget(FlowDirection.LeftToRight);  					topBarControls.HAnchor |= HAnchor.ParentLeft;    					{  						filterOutput = new CheckBox("Filter Output".Localize())  						{  							Margin = new BorderDouble(5' 5' 5' 2)'  							TextColor = this.textColor'  							VAnchor = Agg.UI.VAnchor.ParentBottom'  						};  						filterOutput.CheckedStateChanged += (object sender' EventArgs e) =>  						{  							if (filterOutput.Checked)  							{  								textScrollWidget.SetLineStartFilter(new string[] { "<-wait"' "<-ok"' "<-T" });  							}  							else  							{  								textScrollWidget.SetLineStartFilter(null);  							}    							UserSettings.Instance.Fields.SetBool(TerminalFilterOutputKey' filterOutput.Checked);  						};    						topBarControls.AddChild(filterOutput);  					}    					{  						autoUppercase = new CheckBox("Auto Uppercase".Localize());  						autoUppercase.Margin = new BorderDouble(5' 5' 5' 2);  						autoUppercase.Checked = UserSettings.Instance.Fields.GetBool(TerminalAutoUppercaseKey' true);  						autoUppercase.TextColor = this.textColor;  						autoUppercase.VAnchor = Agg.UI.VAnchor.ParentBottom;  						topBarControls.AddChild(autoUppercase);  						autoUppercase.CheckedStateChanged += (sender' e) =>  						{  							UserSettings.Instance.Fields.SetBool(TerminalAutoUppercaseKey' autoUppercase.Checked);  						};  						manualEntryTopToBottomLayout.AddChild(topBarControls);  					}  				}    				{  					FlowLayoutWidget leftToRight = new FlowLayoutWidget();  					leftToRight.AnchorAll();    					textScrollWidget = new TextScrollWidget(PrinterOutputCache.Instance.PrinterLines);  					//outputScrollWidget.Height = 100;  					Debug.WriteLine(PrinterOutputCache.Instance.PrinterLines);  					textScrollWidget.BackgroundColor = ActiveTheme.Instance.SecondaryBackgroundColor;  					textScrollWidget.TextColor = ActiveTheme.Instance.PrimaryTextColor;  					textScrollWidget.HAnchor = HAnchor.ParentLeftRight;  					textScrollWidget.VAnchor = VAnchor.ParentBottomTop;  					textScrollWidget.Margin = new BorderDouble(0' 5);  					textScrollWidget.Padding = new BorderDouble(3' 0);    					leftToRight.AddChild(textScrollWidget);    					TextScrollBar textScrollBar = new TextScrollBar(textScrollWidget' 15);  					leftToRight.AddChild(textScrollBar);    					manualEntryTopToBottomLayout.AddChild(leftToRight);  				}    				FlowLayoutWidget manualEntryLayout = new FlowLayoutWidget(FlowDirection.LeftToRight);  				manualEntryLayout.BackgroundColor = this.backgroundColor;  				manualEntryLayout.HAnchor = HAnchor.ParentLeftRight;  				{  					manualCommandTextEdit = new MHTextEditWidget(""' typeFace: ApplicationController.MonoSpacedTypeFace);  					//manualCommandTextEdit.BackgroundColor = RGBA_Bytes.White;  					manualCommandTextEdit.Margin = new BorderDouble(right: 3);  					manualCommandTextEdit.HAnchor = HAnchor.ParentLeftRight;  					manualCommandTextEdit.VAnchor = VAnchor.ParentBottom;  					manualCommandTextEdit.ActualTextEditWidget.EnterPressed += manualCommandTextEdit_EnterPressed;  					manualCommandTextEdit.ActualTextEditWidget.KeyDown += manualCommandTextEdit_KeyDown;  					manualEntryLayout.AddChild(manualCommandTextEdit);  				}    				manualEntryTopToBottomLayout.AddChild(manualEntryLayout);    				Button clearConsoleButton = controlButtonFactory.Generate("Clear".Localize());  				clearConsoleButton.Margin = new BorderDouble(0);  				clearConsoleButton.Click += (sender' e) =>  				{  					PrinterOutputCache.Instance.Clear();  				};    				//Output Console text to screen  				Button exportConsoleTextButton = controlButtonFactory.Generate("Export".Localize() + "...");  				exportConsoleTextButton.Click += (sender' mouseEvent) =>  				{  					UiThread.RunOnIdle(DoExportExportLog_Click);  				};    				Button closeButton = controlButtonFactory.Generate("Close".Localize());  				closeButton.Click += (sender' e) =>  				{  					UiThread.RunOnIdle(CloseWindow);  				};    				sendCommand = controlButtonFactory.Generate("Send".Localize());  				sendCommand.Click += sendManualCommandToPrinter_Click;    				FlowLayoutWidget bottomRowContainer = new FlowLayoutWidget();  				bottomRowContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				bottomRowContainer.Margin = new BorderDouble(0' 3);    				bottomRowContainer.AddChild(sendCommand);  				bottomRowContainer.AddChild(clearConsoleButton);  				bottomRowContainer.AddChild(exportConsoleTextButton);  				bottomRowContainer.AddChild(new HorizontalSpacer());    				if (showInWindow)  				{  					bottomRowContainer.AddChild(closeButton);  				}    				manualEntryTopToBottomLayout.AddChild(bottomRowContainer);  				manualEntryTopToBottomLayout.AnchorAll();    				topLeftToRightLayout.AddChild(manualEntryTopToBottomLayout);  			}
Magic Number,MatterHackers.MatterControl,TerminalWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\TerminalWindow\TerminalWidget.cs,TerminalWidget,The following statement contains a magic number: {  				FlowLayoutWidget manualEntryTopToBottomLayout = new FlowLayoutWidget(FlowDirection.TopToBottom);  				manualEntryTopToBottomLayout.VAnchor |= Agg.UI.VAnchor.ParentTop;  				manualEntryTopToBottomLayout.Padding = new BorderDouble(top: 8);    				{  					FlowLayoutWidget topBarControls = new FlowLayoutWidget(FlowDirection.LeftToRight);  					topBarControls.HAnchor |= HAnchor.ParentLeft;    					{  						filterOutput = new CheckBox("Filter Output".Localize())  						{  							Margin = new BorderDouble(5' 5' 5' 2)'  							TextColor = this.textColor'  							VAnchor = Agg.UI.VAnchor.ParentBottom'  						};  						filterOutput.CheckedStateChanged += (object sender' EventArgs e) =>  						{  							if (filterOutput.Checked)  							{  								textScrollWidget.SetLineStartFilter(new string[] { "<-wait"' "<-ok"' "<-T" });  							}  							else  							{  								textScrollWidget.SetLineStartFilter(null);  							}    							UserSettings.Instance.Fields.SetBool(TerminalFilterOutputKey' filterOutput.Checked);  						};    						topBarControls.AddChild(filterOutput);  					}    					{  						autoUppercase = new CheckBox("Auto Uppercase".Localize());  						autoUppercase.Margin = new BorderDouble(5' 5' 5' 2);  						autoUppercase.Checked = UserSettings.Instance.Fields.GetBool(TerminalAutoUppercaseKey' true);  						autoUppercase.TextColor = this.textColor;  						autoUppercase.VAnchor = Agg.UI.VAnchor.ParentBottom;  						topBarControls.AddChild(autoUppercase);  						autoUppercase.CheckedStateChanged += (sender' e) =>  						{  							UserSettings.Instance.Fields.SetBool(TerminalAutoUppercaseKey' autoUppercase.Checked);  						};  						manualEntryTopToBottomLayout.AddChild(topBarControls);  					}  				}    				{  					FlowLayoutWidget leftToRight = new FlowLayoutWidget();  					leftToRight.AnchorAll();    					textScrollWidget = new TextScrollWidget(PrinterOutputCache.Instance.PrinterLines);  					//outputScrollWidget.Height = 100;  					Debug.WriteLine(PrinterOutputCache.Instance.PrinterLines);  					textScrollWidget.BackgroundColor = ActiveTheme.Instance.SecondaryBackgroundColor;  					textScrollWidget.TextColor = ActiveTheme.Instance.PrimaryTextColor;  					textScrollWidget.HAnchor = HAnchor.ParentLeftRight;  					textScrollWidget.VAnchor = VAnchor.ParentBottomTop;  					textScrollWidget.Margin = new BorderDouble(0' 5);  					textScrollWidget.Padding = new BorderDouble(3' 0);    					leftToRight.AddChild(textScrollWidget);    					TextScrollBar textScrollBar = new TextScrollBar(textScrollWidget' 15);  					leftToRight.AddChild(textScrollBar);    					manualEntryTopToBottomLayout.AddChild(leftToRight);  				}    				FlowLayoutWidget manualEntryLayout = new FlowLayoutWidget(FlowDirection.LeftToRight);  				manualEntryLayout.BackgroundColor = this.backgroundColor;  				manualEntryLayout.HAnchor = HAnchor.ParentLeftRight;  				{  					manualCommandTextEdit = new MHTextEditWidget(""' typeFace: ApplicationController.MonoSpacedTypeFace);  					//manualCommandTextEdit.BackgroundColor = RGBA_Bytes.White;  					manualCommandTextEdit.Margin = new BorderDouble(right: 3);  					manualCommandTextEdit.HAnchor = HAnchor.ParentLeftRight;  					manualCommandTextEdit.VAnchor = VAnchor.ParentBottom;  					manualCommandTextEdit.ActualTextEditWidget.EnterPressed += manualCommandTextEdit_EnterPressed;  					manualCommandTextEdit.ActualTextEditWidget.KeyDown += manualCommandTextEdit_KeyDown;  					manualEntryLayout.AddChild(manualCommandTextEdit);  				}    				manualEntryTopToBottomLayout.AddChild(manualEntryLayout);    				Button clearConsoleButton = controlButtonFactory.Generate("Clear".Localize());  				clearConsoleButton.Margin = new BorderDouble(0);  				clearConsoleButton.Click += (sender' e) =>  				{  					PrinterOutputCache.Instance.Clear();  				};    				//Output Console text to screen  				Button exportConsoleTextButton = controlButtonFactory.Generate("Export".Localize() + "...");  				exportConsoleTextButton.Click += (sender' mouseEvent) =>  				{  					UiThread.RunOnIdle(DoExportExportLog_Click);  				};    				Button closeButton = controlButtonFactory.Generate("Close".Localize());  				closeButton.Click += (sender' e) =>  				{  					UiThread.RunOnIdle(CloseWindow);  				};    				sendCommand = controlButtonFactory.Generate("Send".Localize());  				sendCommand.Click += sendManualCommandToPrinter_Click;    				FlowLayoutWidget bottomRowContainer = new FlowLayoutWidget();  				bottomRowContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				bottomRowContainer.Margin = new BorderDouble(0' 3);    				bottomRowContainer.AddChild(sendCommand);  				bottomRowContainer.AddChild(clearConsoleButton);  				bottomRowContainer.AddChild(exportConsoleTextButton);  				bottomRowContainer.AddChild(new HorizontalSpacer());    				if (showInWindow)  				{  					bottomRowContainer.AddChild(closeButton);  				}    				manualEntryTopToBottomLayout.AddChild(bottomRowContainer);  				manualEntryTopToBottomLayout.AnchorAll();    				topLeftToRightLayout.AddChild(manualEntryTopToBottomLayout);  			}
Magic Number,MatterHackers.MatterControl,TerminalWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\TerminalWindow\TerminalWidget.cs,TerminalWidget,The following statement contains a magic number: {  				FlowLayoutWidget manualEntryTopToBottomLayout = new FlowLayoutWidget(FlowDirection.TopToBottom);  				manualEntryTopToBottomLayout.VAnchor |= Agg.UI.VAnchor.ParentTop;  				manualEntryTopToBottomLayout.Padding = new BorderDouble(top: 8);    				{  					FlowLayoutWidget topBarControls = new FlowLayoutWidget(FlowDirection.LeftToRight);  					topBarControls.HAnchor |= HAnchor.ParentLeft;    					{  						filterOutput = new CheckBox("Filter Output".Localize())  						{  							Margin = new BorderDouble(5' 5' 5' 2)'  							TextColor = this.textColor'  							VAnchor = Agg.UI.VAnchor.ParentBottom'  						};  						filterOutput.CheckedStateChanged += (object sender' EventArgs e) =>  						{  							if (filterOutput.Checked)  							{  								textScrollWidget.SetLineStartFilter(new string[] { "<-wait"' "<-ok"' "<-T" });  							}  							else  							{  								textScrollWidget.SetLineStartFilter(null);  							}    							UserSettings.Instance.Fields.SetBool(TerminalFilterOutputKey' filterOutput.Checked);  						};    						topBarControls.AddChild(filterOutput);  					}    					{  						autoUppercase = new CheckBox("Auto Uppercase".Localize());  						autoUppercase.Margin = new BorderDouble(5' 5' 5' 2);  						autoUppercase.Checked = UserSettings.Instance.Fields.GetBool(TerminalAutoUppercaseKey' true);  						autoUppercase.TextColor = this.textColor;  						autoUppercase.VAnchor = Agg.UI.VAnchor.ParentBottom;  						topBarControls.AddChild(autoUppercase);  						autoUppercase.CheckedStateChanged += (sender' e) =>  						{  							UserSettings.Instance.Fields.SetBool(TerminalAutoUppercaseKey' autoUppercase.Checked);  						};  						manualEntryTopToBottomLayout.AddChild(topBarControls);  					}  				}    				{  					FlowLayoutWidget leftToRight = new FlowLayoutWidget();  					leftToRight.AnchorAll();    					textScrollWidget = new TextScrollWidget(PrinterOutputCache.Instance.PrinterLines);  					//outputScrollWidget.Height = 100;  					Debug.WriteLine(PrinterOutputCache.Instance.PrinterLines);  					textScrollWidget.BackgroundColor = ActiveTheme.Instance.SecondaryBackgroundColor;  					textScrollWidget.TextColor = ActiveTheme.Instance.PrimaryTextColor;  					textScrollWidget.HAnchor = HAnchor.ParentLeftRight;  					textScrollWidget.VAnchor = VAnchor.ParentBottomTop;  					textScrollWidget.Margin = new BorderDouble(0' 5);  					textScrollWidget.Padding = new BorderDouble(3' 0);    					leftToRight.AddChild(textScrollWidget);    					TextScrollBar textScrollBar = new TextScrollBar(textScrollWidget' 15);  					leftToRight.AddChild(textScrollBar);    					manualEntryTopToBottomLayout.AddChild(leftToRight);  				}    				FlowLayoutWidget manualEntryLayout = new FlowLayoutWidget(FlowDirection.LeftToRight);  				manualEntryLayout.BackgroundColor = this.backgroundColor;  				manualEntryLayout.HAnchor = HAnchor.ParentLeftRight;  				{  					manualCommandTextEdit = new MHTextEditWidget(""' typeFace: ApplicationController.MonoSpacedTypeFace);  					//manualCommandTextEdit.BackgroundColor = RGBA_Bytes.White;  					manualCommandTextEdit.Margin = new BorderDouble(right: 3);  					manualCommandTextEdit.HAnchor = HAnchor.ParentLeftRight;  					manualCommandTextEdit.VAnchor = VAnchor.ParentBottom;  					manualCommandTextEdit.ActualTextEditWidget.EnterPressed += manualCommandTextEdit_EnterPressed;  					manualCommandTextEdit.ActualTextEditWidget.KeyDown += manualCommandTextEdit_KeyDown;  					manualEntryLayout.AddChild(manualCommandTextEdit);  				}    				manualEntryTopToBottomLayout.AddChild(manualEntryLayout);    				Button clearConsoleButton = controlButtonFactory.Generate("Clear".Localize());  				clearConsoleButton.Margin = new BorderDouble(0);  				clearConsoleButton.Click += (sender' e) =>  				{  					PrinterOutputCache.Instance.Clear();  				};    				//Output Console text to screen  				Button exportConsoleTextButton = controlButtonFactory.Generate("Export".Localize() + "...");  				exportConsoleTextButton.Click += (sender' mouseEvent) =>  				{  					UiThread.RunOnIdle(DoExportExportLog_Click);  				};    				Button closeButton = controlButtonFactory.Generate("Close".Localize());  				closeButton.Click += (sender' e) =>  				{  					UiThread.RunOnIdle(CloseWindow);  				};    				sendCommand = controlButtonFactory.Generate("Send".Localize());  				sendCommand.Click += sendManualCommandToPrinter_Click;    				FlowLayoutWidget bottomRowContainer = new FlowLayoutWidget();  				bottomRowContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				bottomRowContainer.Margin = new BorderDouble(0' 3);    				bottomRowContainer.AddChild(sendCommand);  				bottomRowContainer.AddChild(clearConsoleButton);  				bottomRowContainer.AddChild(exportConsoleTextButton);  				bottomRowContainer.AddChild(new HorizontalSpacer());    				if (showInWindow)  				{  					bottomRowContainer.AddChild(closeButton);  				}    				manualEntryTopToBottomLayout.AddChild(bottomRowContainer);  				manualEntryTopToBottomLayout.AnchorAll();    				topLeftToRightLayout.AddChild(manualEntryTopToBottomLayout);  			}
Magic Number,MatterHackers.MatterControl,TerminalWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\TerminalWindow\TerminalWidget.cs,TerminalWidget,The following statement contains a magic number: {  				FlowLayoutWidget manualEntryTopToBottomLayout = new FlowLayoutWidget(FlowDirection.TopToBottom);  				manualEntryTopToBottomLayout.VAnchor |= Agg.UI.VAnchor.ParentTop;  				manualEntryTopToBottomLayout.Padding = new BorderDouble(top: 8);    				{  					FlowLayoutWidget topBarControls = new FlowLayoutWidget(FlowDirection.LeftToRight);  					topBarControls.HAnchor |= HAnchor.ParentLeft;    					{  						filterOutput = new CheckBox("Filter Output".Localize())  						{  							Margin = new BorderDouble(5' 5' 5' 2)'  							TextColor = this.textColor'  							VAnchor = Agg.UI.VAnchor.ParentBottom'  						};  						filterOutput.CheckedStateChanged += (object sender' EventArgs e) =>  						{  							if (filterOutput.Checked)  							{  								textScrollWidget.SetLineStartFilter(new string[] { "<-wait"' "<-ok"' "<-T" });  							}  							else  							{  								textScrollWidget.SetLineStartFilter(null);  							}    							UserSettings.Instance.Fields.SetBool(TerminalFilterOutputKey' filterOutput.Checked);  						};    						topBarControls.AddChild(filterOutput);  					}    					{  						autoUppercase = new CheckBox("Auto Uppercase".Localize());  						autoUppercase.Margin = new BorderDouble(5' 5' 5' 2);  						autoUppercase.Checked = UserSettings.Instance.Fields.GetBool(TerminalAutoUppercaseKey' true);  						autoUppercase.TextColor = this.textColor;  						autoUppercase.VAnchor = Agg.UI.VAnchor.ParentBottom;  						topBarControls.AddChild(autoUppercase);  						autoUppercase.CheckedStateChanged += (sender' e) =>  						{  							UserSettings.Instance.Fields.SetBool(TerminalAutoUppercaseKey' autoUppercase.Checked);  						};  						manualEntryTopToBottomLayout.AddChild(topBarControls);  					}  				}    				{  					FlowLayoutWidget leftToRight = new FlowLayoutWidget();  					leftToRight.AnchorAll();    					textScrollWidget = new TextScrollWidget(PrinterOutputCache.Instance.PrinterLines);  					//outputScrollWidget.Height = 100;  					Debug.WriteLine(PrinterOutputCache.Instance.PrinterLines);  					textScrollWidget.BackgroundColor = ActiveTheme.Instance.SecondaryBackgroundColor;  					textScrollWidget.TextColor = ActiveTheme.Instance.PrimaryTextColor;  					textScrollWidget.HAnchor = HAnchor.ParentLeftRight;  					textScrollWidget.VAnchor = VAnchor.ParentBottomTop;  					textScrollWidget.Margin = new BorderDouble(0' 5);  					textScrollWidget.Padding = new BorderDouble(3' 0);    					leftToRight.AddChild(textScrollWidget);    					TextScrollBar textScrollBar = new TextScrollBar(textScrollWidget' 15);  					leftToRight.AddChild(textScrollBar);    					manualEntryTopToBottomLayout.AddChild(leftToRight);  				}    				FlowLayoutWidget manualEntryLayout = new FlowLayoutWidget(FlowDirection.LeftToRight);  				manualEntryLayout.BackgroundColor = this.backgroundColor;  				manualEntryLayout.HAnchor = HAnchor.ParentLeftRight;  				{  					manualCommandTextEdit = new MHTextEditWidget(""' typeFace: ApplicationController.MonoSpacedTypeFace);  					//manualCommandTextEdit.BackgroundColor = RGBA_Bytes.White;  					manualCommandTextEdit.Margin = new BorderDouble(right: 3);  					manualCommandTextEdit.HAnchor = HAnchor.ParentLeftRight;  					manualCommandTextEdit.VAnchor = VAnchor.ParentBottom;  					manualCommandTextEdit.ActualTextEditWidget.EnterPressed += manualCommandTextEdit_EnterPressed;  					manualCommandTextEdit.ActualTextEditWidget.KeyDown += manualCommandTextEdit_KeyDown;  					manualEntryLayout.AddChild(manualCommandTextEdit);  				}    				manualEntryTopToBottomLayout.AddChild(manualEntryLayout);    				Button clearConsoleButton = controlButtonFactory.Generate("Clear".Localize());  				clearConsoleButton.Margin = new BorderDouble(0);  				clearConsoleButton.Click += (sender' e) =>  				{  					PrinterOutputCache.Instance.Clear();  				};    				//Output Console text to screen  				Button exportConsoleTextButton = controlButtonFactory.Generate("Export".Localize() + "...");  				exportConsoleTextButton.Click += (sender' mouseEvent) =>  				{  					UiThread.RunOnIdle(DoExportExportLog_Click);  				};    				Button closeButton = controlButtonFactory.Generate("Close".Localize());  				closeButton.Click += (sender' e) =>  				{  					UiThread.RunOnIdle(CloseWindow);  				};    				sendCommand = controlButtonFactory.Generate("Send".Localize());  				sendCommand.Click += sendManualCommandToPrinter_Click;    				FlowLayoutWidget bottomRowContainer = new FlowLayoutWidget();  				bottomRowContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				bottomRowContainer.Margin = new BorderDouble(0' 3);    				bottomRowContainer.AddChild(sendCommand);  				bottomRowContainer.AddChild(clearConsoleButton);  				bottomRowContainer.AddChild(exportConsoleTextButton);  				bottomRowContainer.AddChild(new HorizontalSpacer());    				if (showInWindow)  				{  					bottomRowContainer.AddChild(closeButton);  				}    				manualEntryTopToBottomLayout.AddChild(bottomRowContainer);  				manualEntryTopToBottomLayout.AnchorAll();    				topLeftToRightLayout.AddChild(manualEntryTopToBottomLayout);  			}
Magic Number,MatterHackers.MatterControl,TerminalWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\TerminalWindow\TerminalWidget.cs,TerminalWidget,The following statement contains a magic number: {  				FlowLayoutWidget manualEntryTopToBottomLayout = new FlowLayoutWidget(FlowDirection.TopToBottom);  				manualEntryTopToBottomLayout.VAnchor |= Agg.UI.VAnchor.ParentTop;  				manualEntryTopToBottomLayout.Padding = new BorderDouble(top: 8);    				{  					FlowLayoutWidget topBarControls = new FlowLayoutWidget(FlowDirection.LeftToRight);  					topBarControls.HAnchor |= HAnchor.ParentLeft;    					{  						filterOutput = new CheckBox("Filter Output".Localize())  						{  							Margin = new BorderDouble(5' 5' 5' 2)'  							TextColor = this.textColor'  							VAnchor = Agg.UI.VAnchor.ParentBottom'  						};  						filterOutput.CheckedStateChanged += (object sender' EventArgs e) =>  						{  							if (filterOutput.Checked)  							{  								textScrollWidget.SetLineStartFilter(new string[] { "<-wait"' "<-ok"' "<-T" });  							}  							else  							{  								textScrollWidget.SetLineStartFilter(null);  							}    							UserSettings.Instance.Fields.SetBool(TerminalFilterOutputKey' filterOutput.Checked);  						};    						topBarControls.AddChild(filterOutput);  					}    					{  						autoUppercase = new CheckBox("Auto Uppercase".Localize());  						autoUppercase.Margin = new BorderDouble(5' 5' 5' 2);  						autoUppercase.Checked = UserSettings.Instance.Fields.GetBool(TerminalAutoUppercaseKey' true);  						autoUppercase.TextColor = this.textColor;  						autoUppercase.VAnchor = Agg.UI.VAnchor.ParentBottom;  						topBarControls.AddChild(autoUppercase);  						autoUppercase.CheckedStateChanged += (sender' e) =>  						{  							UserSettings.Instance.Fields.SetBool(TerminalAutoUppercaseKey' autoUppercase.Checked);  						};  						manualEntryTopToBottomLayout.AddChild(topBarControls);  					}  				}    				{  					FlowLayoutWidget leftToRight = new FlowLayoutWidget();  					leftToRight.AnchorAll();    					textScrollWidget = new TextScrollWidget(PrinterOutputCache.Instance.PrinterLines);  					//outputScrollWidget.Height = 100;  					Debug.WriteLine(PrinterOutputCache.Instance.PrinterLines);  					textScrollWidget.BackgroundColor = ActiveTheme.Instance.SecondaryBackgroundColor;  					textScrollWidget.TextColor = ActiveTheme.Instance.PrimaryTextColor;  					textScrollWidget.HAnchor = HAnchor.ParentLeftRight;  					textScrollWidget.VAnchor = VAnchor.ParentBottomTop;  					textScrollWidget.Margin = new BorderDouble(0' 5);  					textScrollWidget.Padding = new BorderDouble(3' 0);    					leftToRight.AddChild(textScrollWidget);    					TextScrollBar textScrollBar = new TextScrollBar(textScrollWidget' 15);  					leftToRight.AddChild(textScrollBar);    					manualEntryTopToBottomLayout.AddChild(leftToRight);  				}    				FlowLayoutWidget manualEntryLayout = new FlowLayoutWidget(FlowDirection.LeftToRight);  				manualEntryLayout.BackgroundColor = this.backgroundColor;  				manualEntryLayout.HAnchor = HAnchor.ParentLeftRight;  				{  					manualCommandTextEdit = new MHTextEditWidget(""' typeFace: ApplicationController.MonoSpacedTypeFace);  					//manualCommandTextEdit.BackgroundColor = RGBA_Bytes.White;  					manualCommandTextEdit.Margin = new BorderDouble(right: 3);  					manualCommandTextEdit.HAnchor = HAnchor.ParentLeftRight;  					manualCommandTextEdit.VAnchor = VAnchor.ParentBottom;  					manualCommandTextEdit.ActualTextEditWidget.EnterPressed += manualCommandTextEdit_EnterPressed;  					manualCommandTextEdit.ActualTextEditWidget.KeyDown += manualCommandTextEdit_KeyDown;  					manualEntryLayout.AddChild(manualCommandTextEdit);  				}    				manualEntryTopToBottomLayout.AddChild(manualEntryLayout);    				Button clearConsoleButton = controlButtonFactory.Generate("Clear".Localize());  				clearConsoleButton.Margin = new BorderDouble(0);  				clearConsoleButton.Click += (sender' e) =>  				{  					PrinterOutputCache.Instance.Clear();  				};    				//Output Console text to screen  				Button exportConsoleTextButton = controlButtonFactory.Generate("Export".Localize() + "...");  				exportConsoleTextButton.Click += (sender' mouseEvent) =>  				{  					UiThread.RunOnIdle(DoExportExportLog_Click);  				};    				Button closeButton = controlButtonFactory.Generate("Close".Localize());  				closeButton.Click += (sender' e) =>  				{  					UiThread.RunOnIdle(CloseWindow);  				};    				sendCommand = controlButtonFactory.Generate("Send".Localize());  				sendCommand.Click += sendManualCommandToPrinter_Click;    				FlowLayoutWidget bottomRowContainer = new FlowLayoutWidget();  				bottomRowContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				bottomRowContainer.Margin = new BorderDouble(0' 3);    				bottomRowContainer.AddChild(sendCommand);  				bottomRowContainer.AddChild(clearConsoleButton);  				bottomRowContainer.AddChild(exportConsoleTextButton);  				bottomRowContainer.AddChild(new HorizontalSpacer());    				if (showInWindow)  				{  					bottomRowContainer.AddChild(closeButton);  				}    				manualEntryTopToBottomLayout.AddChild(bottomRowContainer);  				manualEntryTopToBottomLayout.AnchorAll();    				topLeftToRightLayout.AddChild(manualEntryTopToBottomLayout);  			}
Magic Number,MatterHackers.MatterControl,CreateFolderWindow,C:\repos\MatterHackers_MatterControl\Library\CreateFolderWindow.cs,CreateFolderWindow,The following statement contains a magic number: topToBottom.Padding = new BorderDouble(3' 0' 3' 5);
Magic Number,MatterHackers.MatterControl,CreateFolderWindow,C:\repos\MatterHackers_MatterControl\Library\CreateFolderWindow.cs,CreateFolderWindow,The following statement contains a magic number: topToBottom.Padding = new BorderDouble(3' 0' 3' 5);
Magic Number,MatterHackers.MatterControl,CreateFolderWindow,C:\repos\MatterHackers_MatterControl\Library\CreateFolderWindow.cs,CreateFolderWindow,The following statement contains a magic number: topToBottom.Padding = new BorderDouble(3' 0' 3' 5);
Magic Number,MatterHackers.MatterControl,CreateFolderWindow,C:\repos\MatterHackers_MatterControl\Library\CreateFolderWindow.cs,CreateFolderWindow,The following statement contains a magic number: headerRow.Margin = new BorderDouble(0' 3' 0' 0);
Magic Number,MatterHackers.MatterControl,CreateFolderWindow,C:\repos\MatterHackers_MatterControl\Library\CreateFolderWindow.cs,CreateFolderWindow,The following statement contains a magic number: headerRow.Padding = new BorderDouble(0' 3' 0' 3);
Magic Number,MatterHackers.MatterControl,CreateFolderWindow,C:\repos\MatterHackers_MatterControl\Library\CreateFolderWindow.cs,CreateFolderWindow,The following statement contains a magic number: headerRow.Padding = new BorderDouble(0' 3' 0' 3);
Magic Number,MatterHackers.MatterControl,CreateFolderWindow,C:\repos\MatterHackers_MatterControl\Library\CreateFolderWindow.cs,CreateFolderWindow,The following statement contains a magic number: {  				string createFolderLabel = "Create New Folder:".Localize();  				TextWidget elementHeader = new TextWidget(createFolderLabel' pointSize: 14);  				elementHeader.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				elementHeader.HAnchor = HAnchor.ParentLeftRight;  				elementHeader.VAnchor = Agg.UI.VAnchor.ParentBottom;    				headerRow.AddChild(elementHeader);  				topToBottom.AddChild(headerRow);  				this.AddChild(topToBottom);  			}
Magic Number,MatterHackers.MatterControl,CreateFolderWindow,C:\repos\MatterHackers_MatterControl\Library\CreateFolderWindow.cs,CreateFolderWindow,The following statement contains a magic number: {  				middleRowContainer.HAnchor = HAnchor.ParentLeftRight;  				middleRowContainer.VAnchor = VAnchor.ParentBottomTop;  				middleRowContainer.Padding = new BorderDouble(5);  				middleRowContainer.BackgroundColor = ActiveTheme.Instance.SecondaryBackgroundColor;  			}
Magic Number,MatterHackers.MatterControl,CreateFolderWindow,C:\repos\MatterHackers_MatterControl\Library\CreateFolderWindow.cs,CreateFolderWindow,The following statement contains a magic number: TextWidget textBoxHeader = new TextWidget(fileNameLabel' pointSize: 12);
Magic Number,MatterHackers.MatterControl,CreateFolderWindow,C:\repos\MatterHackers_MatterControl\Library\CreateFolderWindow.cs,CreateFolderWindow,The following statement contains a magic number: textBoxHeader.Margin = new BorderDouble(5);
Magic Number,MatterHackers.MatterControl,CreateFolderWindow,C:\repos\MatterHackers_MatterControl\Library\CreateFolderWindow.cs,CreateFolderWindow,The following statement contains a magic number: folderNameWidget = new MHTextEditWidget(""' pixelWidth: 300' messageWhenEmptyAndNotSelected: "Enter a Folder Name Here".Localize());
Magic Number,MatterHackers.MatterControl,CreateFolderWindow,C:\repos\MatterHackers_MatterControl\Library\CreateFolderWindow.cs,CreateFolderWindow,The following statement contains a magic number: folderNameWidget.Margin = new BorderDouble(5);
Magic Number,MatterHackers.MatterControl,CreateFolderWindow,C:\repos\MatterHackers_MatterControl\Library\CreateFolderWindow.cs,CreateFolderWindow,The following statement contains a magic number: {  				BackgroundColor = ActiveTheme.Instance.PrimaryBackgroundColor;  				buttonRow.HAnchor = HAnchor.ParentLeftRight;  				buttonRow.Padding = new BorderDouble(0' 3);  			}
Magic Number,MatterHackers.MatterControl,AndroidConnectDevicePage,C:\repos\MatterHackers_MatterControl\SetupWizard\AndroidConnectDevicePage.cs,AndroidConnectDevicePage,The following statement contains a magic number: TextWidget printerNameLabel = new TextWidget("Connect Your Device".Localize() + ":"' 0' 0' labelFontSize)  			{  				TextColor = ActiveTheme.Instance.PrimaryTextColor'  				Margin = new BorderDouble(bottom: 10)  			};
Magic Number,MatterHackers.MatterControl,AndroidConnectDevicePage,C:\repos\MatterHackers_MatterControl\SetupWizard\AndroidConnectDevicePage.cs,AndroidConnectDevicePage,The following statement contains a magic number: contentRow.AddChild(new TextWidget("Instructions:".Localize()' 0' 0' 12'textColor:ActiveTheme.Instance.PrimaryTextColor));
Magic Number,MatterHackers.MatterControl,AndroidConnectDevicePage,C:\repos\MatterHackers_MatterControl\SetupWizard\AndroidConnectDevicePage.cs,AndroidConnectDevicePage,The following statement contains a magic number: contentRow.AddChild(new TextWidget("1. Power on your 3D Printer.".Localize()' 0' 0' 12'textColor:ActiveTheme.Instance.PrimaryTextColor));
Magic Number,MatterHackers.MatterControl,AndroidConnectDevicePage,C:\repos\MatterHackers_MatterControl\SetupWizard\AndroidConnectDevicePage.cs,AndroidConnectDevicePage,The following statement contains a magic number: contentRow.AddChild(new TextWidget("2. Attach your 3D Printer via USB.".Localize()' 0' 0' 12'textColor:ActiveTheme.Instance.PrimaryTextColor));
Magic Number,MatterHackers.MatterControl,AndroidConnectDevicePage,C:\repos\MatterHackers_MatterControl\SetupWizard\AndroidConnectDevicePage.cs,AndroidConnectDevicePage,The following statement contains a magic number: contentRow.AddChild(new TextWidget("3. Press 'Connect'.".Localize()' 0' 0' 12'textColor:ActiveTheme.Instance.PrimaryTextColor));
Magic Number,MatterHackers.MatterControl,AndroidConnectDevicePage,C:\repos\MatterHackers_MatterControl\SetupWizard\AndroidConnectDevicePage.cs,AndroidConnectDevicePage,The following statement contains a magic number: connectButtonContainer = new FlowLayoutWidget()  			{  				HAnchor = HAnchor.ParentLeftRight'  				Margin = new BorderDouble(0' 6)  			};
Magic Number,MatterHackers.MatterControl,AndroidConnectDevicePage,C:\repos\MatterHackers_MatterControl\SetupWizard\AndroidConnectDevicePage.cs,AndroidConnectDevicePage,The following statement contains a magic number: connectButton.Margin = new BorderDouble(0'0'10'0);
Magic Number,MatterHackers.MatterControl,AndroidConnectDevicePage,C:\repos\MatterHackers_MatterControl\SetupWizard\AndroidConnectDevicePage.cs,AndroidConnectDevicePage,The following statement contains a magic number: skipMessage = new TextWidget("(Press 'Skip' to setup connection later)".Localize()' 0' 0' 10' textColor: ActiveTheme.Instance.PrimaryTextColor);
Magic Number,MatterHackers.MatterControl,AndroidConnectDevicePage,C:\repos\MatterHackers_MatterControl\SetupWizard\AndroidConnectDevicePage.cs,AndroidConnectDevicePage,The following statement contains a magic number: generalError = new TextWidget(""' 0' 0' errorFontSize)  			{  				TextColor = ActiveTheme.Instance.SecondaryAccentColor'  				HAnchor = HAnchor.ParentLeftRight'  				Visible = false'  				Margin = new BorderDouble(top: 20)'  			};
Magic Number,MatterHackers.MatterControl,AndroidConnectDevicePage,C:\repos\MatterHackers_MatterControl\SetupWizard\AndroidConnectDevicePage.cs,AndroidConnectDevicePage,The following statement contains a magic number: retryButton.Margin = new BorderDouble(0'0'10'0);
Magic Number,MatterHackers.MatterControl,AndroidConnectDevicePage,C:\repos\MatterHackers_MatterControl\SetupWizard\AndroidConnectDevicePage.cs,AndroidConnectDevicePage,The following statement contains a magic number: retryButtonContainer = new FlowLayoutWidget()  			{  				HAnchor = HAnchor.ParentLeftRight'  				Margin = new BorderDouble(0' 6)'  				Visible = false  			};
Magic Number,MatterHackers.MatterControl,SelectPartsOfPrinterToImport,C:\repos\MatterHackers_MatterControl\SetupWizard\ImportSettingsPage.cs,SelectPartsOfPrinterToImport,The following statement contains a magic number: container.AddChild(new TextWidget("Main Settings:")  			{  				TextColor = ActiveTheme.Instance.PrimaryTextColor'  				Margin = new BorderDouble(0' 3' 0' isMergeIntoUserLayer ? 10 : 0)'  			});
Magic Number,MatterHackers.MatterControl,SelectPartsOfPrinterToImport,C:\repos\MatterHackers_MatterControl\SetupWizard\ImportSettingsPage.cs,SelectPartsOfPrinterToImport,The following statement contains a magic number: container.AddChild(new TextWidget("Main Settings:")  			{  				TextColor = ActiveTheme.Instance.PrimaryTextColor'  				Margin = new BorderDouble(0' 3' 0' isMergeIntoUserLayer ? 10 : 0)'  			});
Magic Number,MatterHackers.MatterControl,SelectPartsOfPrinterToImport,C:\repos\MatterHackers_MatterControl\SetupWizard\ImportSettingsPage.cs,SelectPartsOfPrinterToImport,The following statement contains a magic number: var mainProfileRadioButton = new RadioButton("Printer Profile")  			{  				TextColor = ActiveTheme.Instance.PrimaryTextColor'  				Margin = new BorderDouble(5' 0)'  				HAnchor = HAnchor.ParentLeft'  				Checked = true'  			};
Magic Number,MatterHackers.MatterControl,SelectPartsOfPrinterToImport,C:\repos\MatterHackers_MatterControl\SetupWizard\ImportSettingsPage.cs,SelectPartsOfPrinterToImport,The following statement contains a magic number: if (settingsToImport.QualityLayers.Count > 0)  			{  				container.AddChild(new TextWidget("Quality Presets:")  				{  					TextColor = ActiveTheme.Instance.PrimaryTextColor'  					Margin = new BorderDouble(0' 3' 0' 15)'  				});    				int buttonIndex = 0;  				foreach (var qualitySetting in settingsToImport.QualityLayers)  				{  					RadioButton qualityButton = new RadioButton(qualitySetting.Name)  					{  						TextColor = ActiveTheme.Instance.PrimaryTextColor'  						Margin = new BorderDouble(5' 0' 0' 0)'  						HAnchor = HAnchor.ParentLeft'  					};  					container.AddChild(qualityButton);    					int localButtonIndex = buttonIndex;  					qualityButton.CheckedStateChanged += (s' e) =>  					{  						if (qualityButton.Checked)  						{  							selectedQuality = localButtonIndex;  						}  						else  						{  							selectedQuality = -1;  						}  					};    					buttonIndex++;  				}  			}
Magic Number,MatterHackers.MatterControl,SelectPartsOfPrinterToImport,C:\repos\MatterHackers_MatterControl\SetupWizard\ImportSettingsPage.cs,SelectPartsOfPrinterToImport,The following statement contains a magic number: if (settingsToImport.QualityLayers.Count > 0)  			{  				container.AddChild(new TextWidget("Quality Presets:")  				{  					TextColor = ActiveTheme.Instance.PrimaryTextColor'  					Margin = new BorderDouble(0' 3' 0' 15)'  				});    				int buttonIndex = 0;  				foreach (var qualitySetting in settingsToImport.QualityLayers)  				{  					RadioButton qualityButton = new RadioButton(qualitySetting.Name)  					{  						TextColor = ActiveTheme.Instance.PrimaryTextColor'  						Margin = new BorderDouble(5' 0' 0' 0)'  						HAnchor = HAnchor.ParentLeft'  					};  					container.AddChild(qualityButton);    					int localButtonIndex = buttonIndex;  					qualityButton.CheckedStateChanged += (s' e) =>  					{  						if (qualityButton.Checked)  						{  							selectedQuality = localButtonIndex;  						}  						else  						{  							selectedQuality = -1;  						}  					};    					buttonIndex++;  				}  			}
Magic Number,MatterHackers.MatterControl,SelectPartsOfPrinterToImport,C:\repos\MatterHackers_MatterControl\SetupWizard\ImportSettingsPage.cs,SelectPartsOfPrinterToImport,The following statement contains a magic number: if (settingsToImport.QualityLayers.Count > 0)  			{  				container.AddChild(new TextWidget("Quality Presets:")  				{  					TextColor = ActiveTheme.Instance.PrimaryTextColor'  					Margin = new BorderDouble(0' 3' 0' 15)'  				});    				int buttonIndex = 0;  				foreach (var qualitySetting in settingsToImport.QualityLayers)  				{  					RadioButton qualityButton = new RadioButton(qualitySetting.Name)  					{  						TextColor = ActiveTheme.Instance.PrimaryTextColor'  						Margin = new BorderDouble(5' 0' 0' 0)'  						HAnchor = HAnchor.ParentLeft'  					};  					container.AddChild(qualityButton);    					int localButtonIndex = buttonIndex;  					qualityButton.CheckedStateChanged += (s' e) =>  					{  						if (qualityButton.Checked)  						{  							selectedQuality = localButtonIndex;  						}  						else  						{  							selectedQuality = -1;  						}  					};    					buttonIndex++;  				}  			}
Magic Number,MatterHackers.MatterControl,SelectPartsOfPrinterToImport,C:\repos\MatterHackers_MatterControl\SetupWizard\ImportSettingsPage.cs,SelectPartsOfPrinterToImport,The following statement contains a magic number: if (settingsToImport.MaterialLayers.Count > 0)  			{  				container.AddChild(new TextWidget("Material Presets:")  				{  					TextColor = ActiveTheme.Instance.PrimaryTextColor'  					Margin = new BorderDouble(0' 3' 0' 15)'  				});    				int buttonIndex = 0;  				foreach (var materialSetting in settingsToImport.MaterialLayers)  				{  					RadioButton materialButton = new RadioButton(materialSetting.Name)  					{  						TextColor = ActiveTheme.Instance.PrimaryTextColor'  						Margin = new BorderDouble(5' 0)'  						HAnchor = HAnchor.ParentLeft'  					};    					container.AddChild(materialButton);    					int localButtonIndex = buttonIndex;  					materialButton.CheckedStateChanged += (s' e) =>  					{  						if (materialButton.Checked)  						{  							selectedMaterial = localButtonIndex;  						}  						else  						{  							selectedMaterial = -1;  						}  					};    					buttonIndex++;  				}  			}
Magic Number,MatterHackers.MatterControl,SelectPartsOfPrinterToImport,C:\repos\MatterHackers_MatterControl\SetupWizard\ImportSettingsPage.cs,SelectPartsOfPrinterToImport,The following statement contains a magic number: if (settingsToImport.MaterialLayers.Count > 0)  			{  				container.AddChild(new TextWidget("Material Presets:")  				{  					TextColor = ActiveTheme.Instance.PrimaryTextColor'  					Margin = new BorderDouble(0' 3' 0' 15)'  				});    				int buttonIndex = 0;  				foreach (var materialSetting in settingsToImport.MaterialLayers)  				{  					RadioButton materialButton = new RadioButton(materialSetting.Name)  					{  						TextColor = ActiveTheme.Instance.PrimaryTextColor'  						Margin = new BorderDouble(5' 0)'  						HAnchor = HAnchor.ParentLeft'  					};    					container.AddChild(materialButton);    					int localButtonIndex = buttonIndex;  					materialButton.CheckedStateChanged += (s' e) =>  					{  						if (materialButton.Checked)  						{  							selectedMaterial = localButtonIndex;  						}  						else  						{  							selectedMaterial = -1;  						}  					};    					buttonIndex++;  				}  			}
Magic Number,MatterHackers.MatterControl,SelectPartsOfPrinterToImport,C:\repos\MatterHackers_MatterControl\SetupWizard\ImportSettingsPage.cs,SelectPartsOfPrinterToImport,The following statement contains a magic number: if (settingsToImport.MaterialLayers.Count > 0)  			{  				container.AddChild(new TextWidget("Material Presets:")  				{  					TextColor = ActiveTheme.Instance.PrimaryTextColor'  					Margin = new BorderDouble(0' 3' 0' 15)'  				});    				int buttonIndex = 0;  				foreach (var materialSetting in settingsToImport.MaterialLayers)  				{  					RadioButton materialButton = new RadioButton(materialSetting.Name)  					{  						TextColor = ActiveTheme.Instance.PrimaryTextColor'  						Margin = new BorderDouble(5' 0)'  						HAnchor = HAnchor.ParentLeft'  					};    					container.AddChild(materialButton);    					int localButtonIndex = buttonIndex;  					materialButton.CheckedStateChanged += (s' e) =>  					{  						if (materialButton.Checked)  						{  							selectedMaterial = localButtonIndex;  						}  						else  						{  							selectedMaterial = -1;  						}  					};    					buttonIndex++;  				}  			}
Magic Number,MatterHackers.MatterControl,ImportSettingsPage,C:\repos\MatterHackers_MatterControl\SetupWizard\ImportSettingsPage.cs,ImportSettingsPage,The following statement contains a magic number: if (true)  			{  				container.AddChild(new TextWidget("Merge Into:")  				{  					TextColor = ActiveTheme.Instance.PrimaryTextColor'  					Margin = new BorderDouble(0' 0' 0' 5)'  				});    				// merge into current settings  				mergeButton = new RadioButton("Current".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor);  				mergeButton.Checked = true;  				container.AddChild(mergeButton);    				container.AddChild(new TextWidget("Create New:")  				{  					TextColor = ActiveTheme.Instance.PrimaryTextColor'  					Margin = new BorderDouble(0' 0' 0' 15)'  				});    				// add new profile  				newPrinterButton = new RadioButton("Printer".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor);  				container.AddChild(newPrinterButton);    				// add as quality preset  				newQualityPresetButton = new RadioButton("Quality preset".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor);  				container.AddChild(newQualityPresetButton);    				// add as material preset  				newMaterialPresetButton = new RadioButton("Material preset".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor);  				container.AddChild(newMaterialPresetButton);  			}  			else  			{  				// add new profile  				newPrinterButton = new RadioButton("Import as new printer profile".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor);  				newPrinterButton.Checked = true;  				container.AddChild(newPrinterButton);    				container.AddChild(  					CreateDetailInfo("Add a new printer profile to your list of available printers.\nThis will not change your current settings.")  					);    				// merge into current settings  				mergeButton = new RadioButton("Merge into current printer profile".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor);  				container.AddChild(mergeButton);    				container.AddChild(  					CreateDetailInfo("Merge settings and presets (if any) into your current profile. \nYou will still be able to revert to the factory settings at any time.")  					);    				// add as quality preset  				newQualityPresetButton = new RadioButton("Import settings as new QUALITY preset".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor);  				container.AddChild(newQualityPresetButton);    				container.AddChild(  					CreateDetailInfo("Add new quality preset with the settings from this import.")  					);    				// add as material preset  				newMaterialPresetButton = new RadioButton("Import settings as new MATERIAL preset".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor);  				container.AddChild(newMaterialPresetButton);    				container.AddChild(  					CreateDetailInfo("Add new material preset with the settings from this import.")  					);  			}
Magic Number,MatterHackers.MatterControl,ImportSettingsPage,C:\repos\MatterHackers_MatterControl\SetupWizard\ImportSettingsPage.cs,ImportSettingsPage,The following statement contains a magic number: if (true)  			{  				container.AddChild(new TextWidget("Merge Into:")  				{  					TextColor = ActiveTheme.Instance.PrimaryTextColor'  					Margin = new BorderDouble(0' 0' 0' 5)'  				});    				// merge into current settings  				mergeButton = new RadioButton("Current".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor);  				mergeButton.Checked = true;  				container.AddChild(mergeButton);    				container.AddChild(new TextWidget("Create New:")  				{  					TextColor = ActiveTheme.Instance.PrimaryTextColor'  					Margin = new BorderDouble(0' 0' 0' 15)'  				});    				// add new profile  				newPrinterButton = new RadioButton("Printer".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor);  				container.AddChild(newPrinterButton);    				// add as quality preset  				newQualityPresetButton = new RadioButton("Quality preset".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor);  				container.AddChild(newQualityPresetButton);    				// add as material preset  				newMaterialPresetButton = new RadioButton("Material preset".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor);  				container.AddChild(newMaterialPresetButton);  			}  			else  			{  				// add new profile  				newPrinterButton = new RadioButton("Import as new printer profile".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor);  				newPrinterButton.Checked = true;  				container.AddChild(newPrinterButton);    				container.AddChild(  					CreateDetailInfo("Add a new printer profile to your list of available printers.\nThis will not change your current settings.")  					);    				// merge into current settings  				mergeButton = new RadioButton("Merge into current printer profile".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor);  				container.AddChild(mergeButton);    				container.AddChild(  					CreateDetailInfo("Merge settings and presets (if any) into your current profile. \nYou will still be able to revert to the factory settings at any time.")  					);    				// add as quality preset  				newQualityPresetButton = new RadioButton("Import settings as new QUALITY preset".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor);  				container.AddChild(newQualityPresetButton);    				container.AddChild(  					CreateDetailInfo("Add new quality preset with the settings from this import.")  					);    				// add as material preset  				newMaterialPresetButton = new RadioButton("Import settings as new MATERIAL preset".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor);  				container.AddChild(newMaterialPresetButton);    				container.AddChild(  					CreateDetailInfo("Add new material preset with the settings from this import.")  					);  			}
Magic Number,MatterHackers.MatterControl,ImportSettingsPage,C:\repos\MatterHackers_MatterControl\SetupWizard\ImportSettingsPage.cs,CreateDetailInfo,The following statement contains a magic number: var container = new GuiWidget()  			{  				HAnchor = HAnchor.ParentLeftRight'  				VAnchor = VAnchor.FitToChildren'  				Margin = new BorderDouble(25' 15' 5' 5)'  			};
Magic Number,MatterHackers.MatterControl,ImportSettingsPage,C:\repos\MatterHackers_MatterControl\SetupWizard\ImportSettingsPage.cs,CreateDetailInfo,The following statement contains a magic number: var container = new GuiWidget()  			{  				HAnchor = HAnchor.ParentLeftRight'  				VAnchor = VAnchor.FitToChildren'  				Margin = new BorderDouble(25' 15' 5' 5)'  			};
Magic Number,MatterHackers.MatterControl,ImportSettingsPage,C:\repos\MatterHackers_MatterControl\SetupWizard\ImportSettingsPage.cs,CreateDetailInfo,The following statement contains a magic number: var container = new GuiWidget()  			{  				HAnchor = HAnchor.ParentLeftRight'  				VAnchor = VAnchor.FitToChildren'  				Margin = new BorderDouble(25' 15' 5' 5)'  			};
Magic Number,MatterHackers.MatterControl,ImportSettingsPage,C:\repos\MatterHackers_MatterControl\SetupWizard\ImportSettingsPage.cs,CreateDetailInfo,The following statement contains a magic number: var container = new GuiWidget()  			{  				HAnchor = HAnchor.ParentLeftRight'  				VAnchor = VAnchor.FitToChildren'  				Margin = new BorderDouble(25' 15' 5' 5)'  			};
Magic Number,MatterHackers.MatterControl,ExportSettingsPage,C:\repos\MatterHackers_MatterControl\SetupWizard\ExportSettingsPage.cs,CreateDetailInfo,The following statement contains a magic number: var container = new GuiWidget()  			{  				HAnchor = HAnchor.ParentLeftRight'  				VAnchor = VAnchor.FitToChildren'  				Margin = new BorderDouble(25' 15' 5' 5)'  			};
Magic Number,MatterHackers.MatterControl,ExportSettingsPage,C:\repos\MatterHackers_MatterControl\SetupWizard\ExportSettingsPage.cs,CreateDetailInfo,The following statement contains a magic number: var container = new GuiWidget()  			{  				HAnchor = HAnchor.ParentLeftRight'  				VAnchor = VAnchor.FitToChildren'  				Margin = new BorderDouble(25' 15' 5' 5)'  			};
Magic Number,MatterHackers.MatterControl,ExportSettingsPage,C:\repos\MatterHackers_MatterControl\SetupWizard\ExportSettingsPage.cs,CreateDetailInfo,The following statement contains a magic number: var container = new GuiWidget()  			{  				HAnchor = HAnchor.ParentLeftRight'  				VAnchor = VAnchor.FitToChildren'  				Margin = new BorderDouble(25' 15' 5' 5)'  			};
Magic Number,MatterHackers.MatterControl,ExportSettingsPage,C:\repos\MatterHackers_MatterControl\SetupWizard\ExportSettingsPage.cs,CreateDetailInfo,The following statement contains a magic number: var container = new GuiWidget()  			{  				HAnchor = HAnchor.ParentLeftRight'  				VAnchor = VAnchor.FitToChildren'  				Margin = new BorderDouble(25' 15' 5' 5)'  			};
Magic Number,MatterHackers.MatterControl,WizardPage,C:\repos\MatterHackers_MatterControl\SetupWizard\WizardPage.cs,WizardPage,The following statement contains a magic number: whiteImageButtonFactory = new TextImageButtonFactory()  			{  				normalFillColor = RGBA_Bytes.White'  				disabledFillColor = RGBA_Bytes.White'  				fontSize = 16'  				borderWidth = 1'    				normalBorderColor = new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 200)'  				hoverBorderColor = new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 200)'    				disabledTextColor = RGBA_Bytes.DarkGray'  				hoverTextColor = ActiveTheme.Instance.PrimaryTextColor'  				normalTextColor = RGBA_Bytes.Black'  				pressedTextColor = ActiveTheme.Instance.PrimaryTextColor'  				FixedWidth = 200  			};
Magic Number,MatterHackers.MatterControl,WizardPage,C:\repos\MatterHackers_MatterControl\SetupWizard\WizardPage.cs,WizardPage,The following statement contains a magic number: whiteImageButtonFactory = new TextImageButtonFactory()  			{  				normalFillColor = RGBA_Bytes.White'  				disabledFillColor = RGBA_Bytes.White'  				fontSize = 16'  				borderWidth = 1'    				normalBorderColor = new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 200)'  				hoverBorderColor = new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 200)'    				disabledTextColor = RGBA_Bytes.DarkGray'  				hoverTextColor = ActiveTheme.Instance.PrimaryTextColor'  				normalTextColor = RGBA_Bytes.Black'  				pressedTextColor = ActiveTheme.Instance.PrimaryTextColor'  				FixedWidth = 200  			};
Magic Number,MatterHackers.MatterControl,WizardPage,C:\repos\MatterHackers_MatterControl\SetupWizard\WizardPage.cs,WizardPage,The following statement contains a magic number: whiteImageButtonFactory = new TextImageButtonFactory()  			{  				normalFillColor = RGBA_Bytes.White'  				disabledFillColor = RGBA_Bytes.White'  				fontSize = 16'  				borderWidth = 1'    				normalBorderColor = new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 200)'  				hoverBorderColor = new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 200)'    				disabledTextColor = RGBA_Bytes.DarkGray'  				hoverTextColor = ActiveTheme.Instance.PrimaryTextColor'  				normalTextColor = RGBA_Bytes.Black'  				pressedTextColor = ActiveTheme.Instance.PrimaryTextColor'  				FixedWidth = 200  			};
Magic Number,MatterHackers.MatterControl,WizardPage,C:\repos\MatterHackers_MatterControl\SetupWizard\WizardPage.cs,WizardPage,The following statement contains a magic number: whiteImageButtonFactory = new TextImageButtonFactory()  			{  				normalFillColor = RGBA_Bytes.White'  				disabledFillColor = RGBA_Bytes.White'  				fontSize = 16'  				borderWidth = 1'    				normalBorderColor = new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 200)'  				hoverBorderColor = new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 200)'    				disabledTextColor = RGBA_Bytes.DarkGray'  				hoverTextColor = ActiveTheme.Instance.PrimaryTextColor'  				normalTextColor = RGBA_Bytes.Black'  				pressedTextColor = ActiveTheme.Instance.PrimaryTextColor'  				FixedWidth = 200  			};
Magic Number,MatterHackers.MatterControl,WizardPage,C:\repos\MatterHackers_MatterControl\SetupWizard\WizardPage.cs,WizardPage,The following statement contains a magic number: if (!UserSettings.Instance.IsTouchScreen)  			{  				textImageButtonFactory = new TextImageButtonFactory()  				{  					normalTextColor = ActiveTheme.Instance.PrimaryTextColor'  					hoverTextColor = ActiveTheme.Instance.PrimaryTextColor'  					disabledTextColor = ActiveTheme.Instance.PrimaryTextColor'  					pressedTextColor = ActiveTheme.Instance.PrimaryTextColor'  					borderWidth = 0  				};    				linkButtonFactory.textColor = ActiveTheme.Instance.PrimaryTextColor;  				linkButtonFactory.fontSize = 10;    				this.BackgroundColor = ActiveTheme.Instance.SecondaryBackgroundColor;  				this.Padding = new BorderDouble(0); //To be re-enabled once native borders are turned off  			}
Magic Number,MatterHackers.MatterControl,WizardPage,C:\repos\MatterHackers_MatterControl\SetupWizard\WizardPage.cs,WizardPage,The following statement contains a magic number: mainContainer = new FlowLayoutWidget(FlowDirection.TopToBottom)  			{  				Padding = new BorderDouble(12' 12' 12' 0)'  				BackgroundColor = ActiveTheme.Instance.PrimaryBackgroundColor  			};
Magic Number,MatterHackers.MatterControl,WizardPage,C:\repos\MatterHackers_MatterControl\SetupWizard\WizardPage.cs,WizardPage,The following statement contains a magic number: mainContainer = new FlowLayoutWidget(FlowDirection.TopToBottom)  			{  				Padding = new BorderDouble(12' 12' 12' 0)'  				BackgroundColor = ActiveTheme.Instance.PrimaryBackgroundColor  			};
Magic Number,MatterHackers.MatterControl,WizardPage,C:\repos\MatterHackers_MatterControl\SetupWizard\WizardPage.cs,WizardPage,The following statement contains a magic number: mainContainer = new FlowLayoutWidget(FlowDirection.TopToBottom)  			{  				Padding = new BorderDouble(12' 12' 12' 0)'  				BackgroundColor = ActiveTheme.Instance.PrimaryBackgroundColor  			};
Magic Number,MatterHackers.MatterControl,WizardPage,C:\repos\MatterHackers_MatterControl\SetupWizard\WizardPage.cs,WizardPage,The following statement contains a magic number: headerRow = new FlowLayoutWidget(FlowDirection.LeftToRight)  			{  				Margin = new BorderDouble(0' 3' 0' 0)'  				Padding = new BorderDouble(0' 12)'  				HAnchor = HAnchor.ParentLeftRight  			};
Magic Number,MatterHackers.MatterControl,WizardPage,C:\repos\MatterHackers_MatterControl\SetupWizard\WizardPage.cs,WizardPage,The following statement contains a magic number: headerRow = new FlowLayoutWidget(FlowDirection.LeftToRight)  			{  				Margin = new BorderDouble(0' 3' 0' 0)'  				Padding = new BorderDouble(0' 12)'  				HAnchor = HAnchor.ParentLeftRight  			};
Magic Number,MatterHackers.MatterControl,WizardPage,C:\repos\MatterHackers_MatterControl\SetupWizard\WizardPage.cs,WizardPage,The following statement contains a magic number: headerLabel = new TextWidget(unlocalizedTextForTitle.Localize()' pointSize: 24' textColor: ActiveTheme.Instance.SecondaryAccentColor)  			{  				AutoExpandBoundsToText = true  			};
Magic Number,MatterHackers.MatterControl,WizardPage,C:\repos\MatterHackers_MatterControl\SetupWizard\WizardPage.cs,WizardPage,The following statement contains a magic number: contentRow = new FlowLayoutWidget(FlowDirection.TopToBottom)  			{  				Padding = new BorderDouble(10)'  				BackgroundColor = ActiveTheme.Instance.SecondaryBackgroundColor'  				HAnchor = HAnchor.ParentLeftRight'  				VAnchor = VAnchor.ParentBottomTop  			};
Magic Number,MatterHackers.MatterControl,WizardPage,C:\repos\MatterHackers_MatterControl\SetupWizard\WizardPage.cs,WizardPage,The following statement contains a magic number: footerRow = new FlowLayoutWidget(FlowDirection.LeftToRight)  			{  				HAnchor = HAnchor.ParentLeft | HAnchor.ParentRight'  				Margin = new BorderDouble(0' 6)  			};
Magic Number,MatterHackers.MatterControl,WizardPage,C:\repos\MatterHackers_MatterControl\SetupWizard\WizardPage.cs,WizardPage,The following statement contains a magic number: if (!UserSettings.Instance.IsTouchScreen)  			{  				mainContainer.Padding = new BorderDouble(3' 5' 3' 5);  				headerRow.Padding = new BorderDouble(0' 3' 0' 3);    				headerLabel.PointSize = 14;  				headerLabel.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				contentRow.Padding = new BorderDouble(5);  				footerRow.Margin = new BorderDouble(0' 3);  			}
Magic Number,MatterHackers.MatterControl,WizardPage,C:\repos\MatterHackers_MatterControl\SetupWizard\WizardPage.cs,WizardPage,The following statement contains a magic number: if (!UserSettings.Instance.IsTouchScreen)  			{  				mainContainer.Padding = new BorderDouble(3' 5' 3' 5);  				headerRow.Padding = new BorderDouble(0' 3' 0' 3);    				headerLabel.PointSize = 14;  				headerLabel.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				contentRow.Padding = new BorderDouble(5);  				footerRow.Margin = new BorderDouble(0' 3);  			}
Magic Number,MatterHackers.MatterControl,WizardPage,C:\repos\MatterHackers_MatterControl\SetupWizard\WizardPage.cs,WizardPage,The following statement contains a magic number: if (!UserSettings.Instance.IsTouchScreen)  			{  				mainContainer.Padding = new BorderDouble(3' 5' 3' 5);  				headerRow.Padding = new BorderDouble(0' 3' 0' 3);    				headerLabel.PointSize = 14;  				headerLabel.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				contentRow.Padding = new BorderDouble(5);  				footerRow.Margin = new BorderDouble(0' 3);  			}
Magic Number,MatterHackers.MatterControl,WizardPage,C:\repos\MatterHackers_MatterControl\SetupWizard\WizardPage.cs,WizardPage,The following statement contains a magic number: if (!UserSettings.Instance.IsTouchScreen)  			{  				mainContainer.Padding = new BorderDouble(3' 5' 3' 5);  				headerRow.Padding = new BorderDouble(0' 3' 0' 3);    				headerLabel.PointSize = 14;  				headerLabel.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				contentRow.Padding = new BorderDouble(5);  				footerRow.Margin = new BorderDouble(0' 3);  			}
Magic Number,MatterHackers.MatterControl,WizardPage,C:\repos\MatterHackers_MatterControl\SetupWizard\WizardPage.cs,WizardPage,The following statement contains a magic number: if (!UserSettings.Instance.IsTouchScreen)  			{  				mainContainer.Padding = new BorderDouble(3' 5' 3' 5);  				headerRow.Padding = new BorderDouble(0' 3' 0' 3);    				headerLabel.PointSize = 14;  				headerLabel.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				contentRow.Padding = new BorderDouble(5);  				footerRow.Margin = new BorderDouble(0' 3);  			}
Magic Number,MatterHackers.MatterControl,WizardPage,C:\repos\MatterHackers_MatterControl\SetupWizard\WizardPage.cs,WizardPage,The following statement contains a magic number: if (!UserSettings.Instance.IsTouchScreen)  			{  				mainContainer.Padding = new BorderDouble(3' 5' 3' 5);  				headerRow.Padding = new BorderDouble(0' 3' 0' 3);    				headerLabel.PointSize = 14;  				headerLabel.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				contentRow.Padding = new BorderDouble(5);  				footerRow.Margin = new BorderDouble(0' 3);  			}
Magic Number,MatterHackers.MatterControl,WizardPage,C:\repos\MatterHackers_MatterControl\SetupWizard\WizardPage.cs,WizardPage,The following statement contains a magic number: if (!UserSettings.Instance.IsTouchScreen)  			{  				mainContainer.Padding = new BorderDouble(3' 5' 3' 5);  				headerRow.Padding = new BorderDouble(0' 3' 0' 3);    				headerLabel.PointSize = 14;  				headerLabel.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				contentRow.Padding = new BorderDouble(5);  				footerRow.Margin = new BorderDouble(0' 3);  			}
Magic Number,MatterHackers.MatterControl,WizardPage,C:\repos\MatterHackers_MatterControl\SetupWizard\WizardPage.cs,WizardPage,The following statement contains a magic number: if (!UserSettings.Instance.IsTouchScreen)  			{  				mainContainer.Padding = new BorderDouble(3' 5' 3' 5);  				headerRow.Padding = new BorderDouble(0' 3' 0' 3);    				headerLabel.PointSize = 14;  				headerLabel.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				contentRow.Padding = new BorderDouble(5);  				footerRow.Margin = new BorderDouble(0' 3);  			}
Magic Number,MatterHackers.MatterControl,WizardPage,C:\repos\MatterHackers_MatterControl\SetupWizard\WizardPage.cs,WizardPage,The following statement contains a magic number: if (!UserSettings.Instance.IsTouchScreen)  			{  				mainContainer.Padding = new BorderDouble(3' 5' 3' 5);  				headerRow.Padding = new BorderDouble(0' 3' 0' 3);    				headerLabel.PointSize = 14;  				headerLabel.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				contentRow.Padding = new BorderDouble(5);  				footerRow.Margin = new BorderDouble(0' 3);  			}
Magic Number,MatterHackers.MatterControl,SetupPrinterView,C:\repos\MatterHackers_MatterControl\SetupWizard\AndroidSetupOptionsPage.cs,SetupPrinterView,The following statement contains a magic number: var buttonContainer = new FlowLayoutWidget()  			{  				HAnchor = HAnchor.ParentLeftRight'  				Margin = new BorderDouble (0' 14)  			};
Magic Number,MatterHackers.MatterControl,SetupPrinterView,C:\repos\MatterHackers_MatterControl\SetupWizard\AndroidSetupOptionsPage.cs,SetupPrinterView,The following statement contains a magic number: disconnectButton.Margin = new BorderDouble(left: 12);
Magic Number,MatterHackers.MatterControl,SetupPrinterView,C:\repos\MatterHackers_MatterControl\SetupWizard\AndroidSetupOptionsPage.cs,SetupPrinterView,The following statement contains a magic number: connectionStatus = new TextWidget("Status:"' pointSize: 12' textColor: ActiveTheme.Instance.PrimaryTextColor)  			{  				HAnchor = HAnchor.ParentLeftRight  			};
Magic Number,MatterHackers.MatterControl,SetupAccountView,C:\repos\MatterHackers_MatterControl\SetupWizard\AndroidSetupOptionsPage.cs,SetupAccountView,The following statement contains a magic number: nameAndStatus.AddChild(new TextWidget(username' pointSize: 16' textColor: ActiveTheme.Instance.PrimaryTextColor));
Magic Number,MatterHackers.MatterControl,SetupAccountView,C:\repos\MatterHackers_MatterControl\SetupWizard\AndroidSetupOptionsPage.cs,SetupAccountView,The following statement contains a magic number: connectionStatus = new TextWidget(AuthenticationString' pointSize: 8' textColor: ActiveTheme.Instance.SecondaryTextColor)  			{  				Margin = new BorderDouble(5' 0' 0' 0)'  				AutoExpandBoundsToText = true'  			};
Magic Number,MatterHackers.MatterControl,SetupAccountView,C:\repos\MatterHackers_MatterControl\SetupWizard\AndroidSetupOptionsPage.cs,SetupAccountView,The following statement contains a magic number: connectionStatus = new TextWidget(AuthenticationString' pointSize: 8' textColor: ActiveTheme.Instance.SecondaryTextColor)  			{  				Margin = new BorderDouble(5' 0' 0' 0)'  				AutoExpandBoundsToText = true'  			};
Magic Number,MatterHackers.MatterControl,SetupAccountView,C:\repos\MatterHackers_MatterControl\SetupWizard\AndroidSetupOptionsPage.cs,SetupAccountView,The following statement contains a magic number: buttonContainer.Margin = new BorderDouble(0' 14);
Magic Number,MatterHackers.MatterControl,SetupAccountView,C:\repos\MatterHackers_MatterControl\SetupWizard\AndroidSetupOptionsPage.cs,SetupAccountView,The following statement contains a magic number: textImageButtonFactory.disabledTextColor = new RGBA_Bytes(textImageButtonFactory.normalTextColor' 100);
Magic Number,MatterHackers.MatterControl,SetupAccountView,C:\repos\MatterHackers_MatterControl\SetupWizard\AndroidSetupOptionsPage.cs,SetupAccountView,The following statement contains a magic number: redeemPurchaseButton.Margin = new BorderDouble(0' 0' 10' 0);
Magic Number,MatterHackers.MatterControl,SetupAccountView,C:\repos\MatterHackers_MatterControl\SetupWizard\AndroidSetupOptionsPage.cs,SetupAccountView,The following statement contains a magic number: redeemShareButton.Margin = new BorderDouble(0' 0' 10' 0);
Magic Number,MatterHackers.MatterControl,SetupAccountView,C:\repos\MatterHackers_MatterControl\SetupWizard\AndroidSetupOptionsPage.cs,SetupAccountView,The following statement contains a magic number: statusMessage = new TextWidget("Please wait..."' pointSize: 12' textColor: ActiveTheme.Instance.SecondaryAccentColor);
Magic Number,MatterHackers.MatterControl,SetupViewBase,C:\repos\MatterHackers_MatterControl\SetupWizard\AndroidSetupOptionsPage.cs,SetupViewBase,The following statement contains a magic number: this.Margin = new BorderDouble(2' 10' 2' 0);
Magic Number,MatterHackers.MatterControl,SetupViewBase,C:\repos\MatterHackers_MatterControl\SetupWizard\AndroidSetupOptionsPage.cs,SetupViewBase,The following statement contains a magic number: this.Margin = new BorderDouble(2' 10' 2' 0);
Magic Number,MatterHackers.MatterControl,SetupViewBase,C:\repos\MatterHackers_MatterControl\SetupWizard\AndroidSetupOptionsPage.cs,SetupViewBase,The following statement contains a magic number: this.Margin = new BorderDouble(2' 10' 2' 0);
Magic Number,MatterHackers.MatterControl,SetupViewBase,C:\repos\MatterHackers_MatterControl\SetupWizard\AndroidSetupOptionsPage.cs,SetupViewBase,The following statement contains a magic number: mainContainer = new FlowLayoutWidget(Agg.UI.FlowDirection.TopToBottom)  			{  				HAnchor = HAnchor.ParentLeftRight'  				Margin = new BorderDouble(6' 0' 0' 6)  			};
Magic Number,MatterHackers.MatterControl,SetupViewBase,C:\repos\MatterHackers_MatterControl\SetupWizard\AndroidSetupOptionsPage.cs,SetupViewBase,The following statement contains a magic number: mainContainer = new FlowLayoutWidget(Agg.UI.FlowDirection.TopToBottom)  			{  				HAnchor = HAnchor.ParentLeftRight'  				Margin = new BorderDouble(6' 0' 0' 6)  			};
Magic Number,MatterHackers.MatterControl,SetupWizardTroubleshooting,C:\repos\MatterHackers_MatterControl\SetupWizard\SetupWizardTroubleshooting.cs,RefreshStatus,The following statement contains a magic number: printerNameLabel.Margin = new BorderDouble(bottom: 10);
Magic Number,MatterHackers.MatterControl,SetupWizardTroubleshooting,C:\repos\MatterHackers_MatterControl\SetupWizard\SetupWizardTroubleshooting.cs,RefreshStatus,The following statement contains a magic number: if (CriteriaRow.ActiveErrorItem != null) {    				FlowLayoutWidget errorText = new FlowLayoutWidget () {  					Padding = new BorderDouble (0' 15)  				};    				errorText.AddChild(new TextWidget(CriteriaRow.ActiveErrorItem.ErrorText) {  					TextColor = ActiveTheme.Instance.PrimaryAccentColor  				});    				contentRow.AddChild(errorText);  			}
Magic Number,MatterHackers.MatterControl,CriteriaRow,C:\repos\MatterHackers_MatterControl\SetupWizard\SetupWizardTroubleshooting.cs,CriteriaRow,The following statement contains a magic number: base.Height = 40;
Magic Number,MatterHackers.MatterControl,CriteriaRow,C:\repos\MatterHackers_MatterControl\SetupWizard\SetupWizardTroubleshooting.cs,CriteriaRow,The following statement contains a magic number: if(stillSuccessful) {  					if(succeeded)  					{  						// Add checkmark image  						AddSuccessIcon();  					} else {  						// Add Fix button  						Button button  = buttonFactory.Generate(LocalizedString.Get(fixitText)'centerText:true);  						button.VAnchor = VAnchor.ParentCenter;  						button.Padding = new BorderDouble(3' 8);  						button.Click += (sender' e) => fixAction();  						base.AddChild(button);  					}  				}
Magic Number,MatterHackers.MatterControl,CriteriaRow,C:\repos\MatterHackers_MatterControl\SetupWizard\SetupWizardTroubleshooting.cs,CriteriaRow,The following statement contains a magic number: if(stillSuccessful) {  					if(succeeded)  					{  						// Add checkmark image  						AddSuccessIcon();  					} else {  						// Add Fix button  						Button button  = buttonFactory.Generate(LocalizedString.Get(fixitText)'centerText:true);  						button.VAnchor = VAnchor.ParentCenter;  						button.Padding = new BorderDouble(3' 8);  						button.Click += (sender' e) => fixAction();  						base.AddChild(button);  					}  				}
Magic Number,MatterHackers.MatterControl,CriteriaRow,C:\repos\MatterHackers_MatterControl\SetupWizard\SetupWizardTroubleshooting.cs,CriteriaRow,The following statement contains a magic number: if(stillSuccessful)   				{  					this.BackgroundColor = (criteriaCount % 2 == 0) ? RGBA_Bytes.Gray : toggleColor;  				}  				else  				{  					this.BackgroundColor = disabledBackColor;  				}
Magic Number,MatterHackers.MatterControl,SetupWizardWifi,C:\repos\MatterHackers_MatterControl\SetupWizard\SetupWizardWifi.cs,SetupWizardWifi,The following statement contains a magic number: contentRow.AddChild(new TextWidget("Wifi Setup".Localize() + ":"' 0' 0' labelFontSize)  			{  				TextColor = ActiveTheme.Instance.PrimaryTextColor'  				Margin = new BorderDouble(bottom: 10)  			});
Magic Number,MatterHackers.MatterControl,SetupWizardWifi,C:\repos\MatterHackers_MatterControl\SetupWizard\SetupWizardWifi.cs,SetupWizardWifi,The following statement contains a magic number: contentRow.AddChild(new TextWidget("Some features may require an internet connection.".Localize()' 0' 0' 12' textColor: ActiveTheme.Instance.PrimaryTextColor));
Magic Number,MatterHackers.MatterControl,SetupWizardWifi,C:\repos\MatterHackers_MatterControl\SetupWizard\SetupWizardWifi.cs,SetupWizardWifi,The following statement contains a magic number: contentRow.AddChild(new TextWidget("Would you like to setup Wifi?".Localize()' 0' 0' 12' textColor: ActiveTheme.Instance.PrimaryTextColor));
Magic Number,MatterHackers.MatterControl,SetupWizardWifi,C:\repos\MatterHackers_MatterControl\SetupWizard\SetupWizardWifi.cs,SetupWizardWifi,The following statement contains a magic number: var connectButtonContainer = new FlowLayoutWidget()  			{  				HAnchor = HAnchor.ParentLeftRight'  				Margin = new BorderDouble(0' 6)  			};
Magic Number,MatterHackers.MatterControl,SetupWizardWifi,C:\repos\MatterHackers_MatterControl\SetupWizard\SetupWizardWifi.cs,SetupWizardWifi,The following statement contains a magic number: configureButton.Margin = new BorderDouble(0' 0' 10' 0);
Magic Number,MatterHackers.MatterControl,WizardWindow,C:\repos\MatterHackers_MatterControl\SetupWizard\WizardWindow.cs,WizardWindow,The following statement contains a magic number: this.Padding = new BorderDouble(8);
Magic Number,MatterHackers.MatterControl,WizardWindow,C:\repos\MatterHackers_MatterControl\SetupWizard\WizardWindow.cs,WizardWindow,The following statement contains a magic number: this.MinimumSize = new Vector2(350 * GuiWidget.DeviceScale' 400 * GuiWidget.DeviceScale);
Magic Number,MatterHackers.MatterControl,WizardWindow,C:\repos\MatterHackers_MatterControl\SetupWizard\WizardWindow.cs,WizardWindow,The following statement contains a magic number: this.MinimumSize = new Vector2(350 * GuiWidget.DeviceScale' 400 * GuiWidget.DeviceScale);
Magic Number,MatterHackers.MatterControl,ExportToFolderFeedbackWindow,C:\repos\MatterHackers_MatterControl\Queue\OptionsMenu\ExportToFolderFeedbackWindow.cs,ExportToFolderFeedbackWindow,The following statement contains a magic number: feedback.Padding = new BorderDouble(5' 5);
Magic Number,MatterHackers.MatterControl,ExportToFolderFeedbackWindow,C:\repos\MatterHackers_MatterControl\Queue\OptionsMenu\ExportToFolderFeedbackWindow.cs,ExportToFolderFeedbackWindow,The following statement contains a magic number: feedback.Padding = new BorderDouble(5' 5);
Magic Number,MatterHackers.MatterControl,ExportToFolderFeedbackWindow,C:\repos\MatterHackers_MatterControl\Queue\OptionsMenu\ExportToFolderFeedbackWindow.cs,CreateNextLine,The following statement contains a magic number: nextLine.Margin = new BorderDouble(0' 2);
Magic Number,MatterHackers.MatterControl,EditLevelingSettingsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditLevelingSettingsWindow.cs,EditLevelingSettingsWindow,The following statement contains a magic number: topToBottom.Padding = new BorderDouble(3' 0' 3' 5);
Magic Number,MatterHackers.MatterControl,EditLevelingSettingsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditLevelingSettingsWindow.cs,EditLevelingSettingsWindow,The following statement contains a magic number: topToBottom.Padding = new BorderDouble(3' 0' 3' 5);
Magic Number,MatterHackers.MatterControl,EditLevelingSettingsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditLevelingSettingsWindow.cs,EditLevelingSettingsWindow,The following statement contains a magic number: topToBottom.Padding = new BorderDouble(3' 0' 3' 5);
Magic Number,MatterHackers.MatterControl,EditLevelingSettingsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditLevelingSettingsWindow.cs,EditLevelingSettingsWindow,The following statement contains a magic number: headerRow.Margin = new BorderDouble(0' 3' 0' 0);
Magic Number,MatterHackers.MatterControl,EditLevelingSettingsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditLevelingSettingsWindow.cs,EditLevelingSettingsWindow,The following statement contains a magic number: headerRow.Padding = new BorderDouble(0' 3' 0' 3);
Magic Number,MatterHackers.MatterControl,EditLevelingSettingsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditLevelingSettingsWindow.cs,EditLevelingSettingsWindow,The following statement contains a magic number: headerRow.Padding = new BorderDouble(0' 3' 0' 3);
Magic Number,MatterHackers.MatterControl,EditLevelingSettingsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditLevelingSettingsWindow.cs,EditLevelingSettingsWindow,The following statement contains a magic number: {  				string movementSpeedsLabel = LocalizedString.Get("Sampled Positions".Localize());  				TextWidget elementHeader = new TextWidget(string.Format("{0}:"' movementSpeedsLabel)' pointSize: 14);  				elementHeader.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				elementHeader.HAnchor = HAnchor.ParentLeftRight;  				elementHeader.VAnchor = Agg.UI.VAnchor.ParentBottom;    				headerRow.AddChild(elementHeader);  			}
Magic Number,MatterHackers.MatterControl,EditLevelingSettingsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditLevelingSettingsWindow.cs,EditLevelingSettingsWindow,The following statement contains a magic number: {  				presetsFormContainer.HAnchor = HAnchor.ParentLeftRight;  				presetsFormContainer.VAnchor = VAnchor.ParentBottomTop;  				presetsFormContainer.Padding = new BorderDouble(3);  				presetsFormContainer.BackgroundColor = ActiveTheme.Instance.SecondaryBackgroundColor;  			}
Magic Number,MatterHackers.MatterControl,EditLevelingSettingsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditLevelingSettingsWindow.cs,EditLevelingSettingsWindow,The following statement contains a magic number: textImageButtonFactory.FixedHeight = 30 * GuiWidget.DeviceScale;
Magic Number,MatterHackers.MatterControl,EditLevelingSettingsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditLevelingSettingsWindow.cs,EditLevelingSettingsWindow,The following statement contains a magic number: for (int row = 0; row < positions.Count; row++)  			{  				FlowLayoutWidget leftRightEdit = new FlowLayoutWidget();  				leftRightEdit.Padding = new BorderDouble(3);  				leftRightEdit.HAnchor |= Agg.UI.HAnchor.ParentLeftRight;  				TextWidget positionLabel;    				string whichPositionText = "Position".Localize();  				positionLabel = new TextWidget("{0} {1'-5}".FormatWith(whichPositionText' row + 1)' textColor: ActiveTheme.Instance.PrimaryTextColor);    				positionLabel.VAnchor = VAnchor.ParentCenter;  				leftRightEdit.AddChild(positionLabel);    				for (int axis = 0; axis < 3; axis++)  				{  					leftRightEdit.AddChild(new HorizontalSpacer());    					string axisName = "x";  					if (axis == 1) axisName = "y";  					else if (axis == 2) axisName = "z";    					TextWidget typeEdit = new TextWidget("  {0}: ".FormatWith(axisName)' textColor: ActiveTheme.Instance.PrimaryTextColor);  					typeEdit.VAnchor = VAnchor.ParentCenter;  					leftRightEdit.AddChild(typeEdit);    					int linkCompatibleRow = row;  					int linkCompatibleAxis = axis;  					MHNumberEdit valueEdit = new MHNumberEdit(positions[linkCompatibleRow][linkCompatibleAxis]' allowNegatives: true' allowDecimals: true' pixelWidth: 60' tabIndex: tab_index++);  					valueEdit.ActuallNumberEdit.InternalTextEditWidget.EditComplete += (sender' e) =>  					{  						Vector3 position = positions[linkCompatibleRow];  						position[linkCompatibleAxis] = valueEdit.ActuallNumberEdit.Value;  						positions[linkCompatibleRow] = position;  					};    					valueEdit.Margin = new BorderDouble(3);  					leftRightEdit.AddChild(valueEdit);  				}    				presetsFormContainer.AddChild(leftRightEdit);    				presetsFormContainer.AddChild(new CustomWidgets.HorizontalLine());  			}
Magic Number,MatterHackers.MatterControl,EditLevelingSettingsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditLevelingSettingsWindow.cs,EditLevelingSettingsWindow,The following statement contains a magic number: for (int row = 0; row < positions.Count; row++)  			{  				FlowLayoutWidget leftRightEdit = new FlowLayoutWidget();  				leftRightEdit.Padding = new BorderDouble(3);  				leftRightEdit.HAnchor |= Agg.UI.HAnchor.ParentLeftRight;  				TextWidget positionLabel;    				string whichPositionText = "Position".Localize();  				positionLabel = new TextWidget("{0} {1'-5}".FormatWith(whichPositionText' row + 1)' textColor: ActiveTheme.Instance.PrimaryTextColor);    				positionLabel.VAnchor = VAnchor.ParentCenter;  				leftRightEdit.AddChild(positionLabel);    				for (int axis = 0; axis < 3; axis++)  				{  					leftRightEdit.AddChild(new HorizontalSpacer());    					string axisName = "x";  					if (axis == 1) axisName = "y";  					else if (axis == 2) axisName = "z";    					TextWidget typeEdit = new TextWidget("  {0}: ".FormatWith(axisName)' textColor: ActiveTheme.Instance.PrimaryTextColor);  					typeEdit.VAnchor = VAnchor.ParentCenter;  					leftRightEdit.AddChild(typeEdit);    					int linkCompatibleRow = row;  					int linkCompatibleAxis = axis;  					MHNumberEdit valueEdit = new MHNumberEdit(positions[linkCompatibleRow][linkCompatibleAxis]' allowNegatives: true' allowDecimals: true' pixelWidth: 60' tabIndex: tab_index++);  					valueEdit.ActuallNumberEdit.InternalTextEditWidget.EditComplete += (sender' e) =>  					{  						Vector3 position = positions[linkCompatibleRow];  						position[linkCompatibleAxis] = valueEdit.ActuallNumberEdit.Value;  						positions[linkCompatibleRow] = position;  					};    					valueEdit.Margin = new BorderDouble(3);  					leftRightEdit.AddChild(valueEdit);  				}    				presetsFormContainer.AddChild(leftRightEdit);    				presetsFormContainer.AddChild(new CustomWidgets.HorizontalLine());  			}
Magic Number,MatterHackers.MatterControl,EditLevelingSettingsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditLevelingSettingsWindow.cs,EditLevelingSettingsWindow,The following statement contains a magic number: for (int row = 0; row < positions.Count; row++)  			{  				FlowLayoutWidget leftRightEdit = new FlowLayoutWidget();  				leftRightEdit.Padding = new BorderDouble(3);  				leftRightEdit.HAnchor |= Agg.UI.HAnchor.ParentLeftRight;  				TextWidget positionLabel;    				string whichPositionText = "Position".Localize();  				positionLabel = new TextWidget("{0} {1'-5}".FormatWith(whichPositionText' row + 1)' textColor: ActiveTheme.Instance.PrimaryTextColor);    				positionLabel.VAnchor = VAnchor.ParentCenter;  				leftRightEdit.AddChild(positionLabel);    				for (int axis = 0; axis < 3; axis++)  				{  					leftRightEdit.AddChild(new HorizontalSpacer());    					string axisName = "x";  					if (axis == 1) axisName = "y";  					else if (axis == 2) axisName = "z";    					TextWidget typeEdit = new TextWidget("  {0}: ".FormatWith(axisName)' textColor: ActiveTheme.Instance.PrimaryTextColor);  					typeEdit.VAnchor = VAnchor.ParentCenter;  					leftRightEdit.AddChild(typeEdit);    					int linkCompatibleRow = row;  					int linkCompatibleAxis = axis;  					MHNumberEdit valueEdit = new MHNumberEdit(positions[linkCompatibleRow][linkCompatibleAxis]' allowNegatives: true' allowDecimals: true' pixelWidth: 60' tabIndex: tab_index++);  					valueEdit.ActuallNumberEdit.InternalTextEditWidget.EditComplete += (sender' e) =>  					{  						Vector3 position = positions[linkCompatibleRow];  						position[linkCompatibleAxis] = valueEdit.ActuallNumberEdit.Value;  						positions[linkCompatibleRow] = position;  					};    					valueEdit.Margin = new BorderDouble(3);  					leftRightEdit.AddChild(valueEdit);  				}    				presetsFormContainer.AddChild(leftRightEdit);    				presetsFormContainer.AddChild(new CustomWidgets.HorizontalLine());  			}
Magic Number,MatterHackers.MatterControl,EditLevelingSettingsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditLevelingSettingsWindow.cs,EditLevelingSettingsWindow,The following statement contains a magic number: for (int row = 0; row < positions.Count; row++)  			{  				FlowLayoutWidget leftRightEdit = new FlowLayoutWidget();  				leftRightEdit.Padding = new BorderDouble(3);  				leftRightEdit.HAnchor |= Agg.UI.HAnchor.ParentLeftRight;  				TextWidget positionLabel;    				string whichPositionText = "Position".Localize();  				positionLabel = new TextWidget("{0} {1'-5}".FormatWith(whichPositionText' row + 1)' textColor: ActiveTheme.Instance.PrimaryTextColor);    				positionLabel.VAnchor = VAnchor.ParentCenter;  				leftRightEdit.AddChild(positionLabel);    				for (int axis = 0; axis < 3; axis++)  				{  					leftRightEdit.AddChild(new HorizontalSpacer());    					string axisName = "x";  					if (axis == 1) axisName = "y";  					else if (axis == 2) axisName = "z";    					TextWidget typeEdit = new TextWidget("  {0}: ".FormatWith(axisName)' textColor: ActiveTheme.Instance.PrimaryTextColor);  					typeEdit.VAnchor = VAnchor.ParentCenter;  					leftRightEdit.AddChild(typeEdit);    					int linkCompatibleRow = row;  					int linkCompatibleAxis = axis;  					MHNumberEdit valueEdit = new MHNumberEdit(positions[linkCompatibleRow][linkCompatibleAxis]' allowNegatives: true' allowDecimals: true' pixelWidth: 60' tabIndex: tab_index++);  					valueEdit.ActuallNumberEdit.InternalTextEditWidget.EditComplete += (sender' e) =>  					{  						Vector3 position = positions[linkCompatibleRow];  						position[linkCompatibleAxis] = valueEdit.ActuallNumberEdit.Value;  						positions[linkCompatibleRow] = position;  					};    					valueEdit.Margin = new BorderDouble(3);  					leftRightEdit.AddChild(valueEdit);  				}    				presetsFormContainer.AddChild(leftRightEdit);    				presetsFormContainer.AddChild(new CustomWidgets.HorizontalLine());  			}
Magic Number,MatterHackers.MatterControl,EditLevelingSettingsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditLevelingSettingsWindow.cs,EditLevelingSettingsWindow,The following statement contains a magic number: for (int row = 0; row < positions.Count; row++)  			{  				FlowLayoutWidget leftRightEdit = new FlowLayoutWidget();  				leftRightEdit.Padding = new BorderDouble(3);  				leftRightEdit.HAnchor |= Agg.UI.HAnchor.ParentLeftRight;  				TextWidget positionLabel;    				string whichPositionText = "Position".Localize();  				positionLabel = new TextWidget("{0} {1'-5}".FormatWith(whichPositionText' row + 1)' textColor: ActiveTheme.Instance.PrimaryTextColor);    				positionLabel.VAnchor = VAnchor.ParentCenter;  				leftRightEdit.AddChild(positionLabel);    				for (int axis = 0; axis < 3; axis++)  				{  					leftRightEdit.AddChild(new HorizontalSpacer());    					string axisName = "x";  					if (axis == 1) axisName = "y";  					else if (axis == 2) axisName = "z";    					TextWidget typeEdit = new TextWidget("  {0}: ".FormatWith(axisName)' textColor: ActiveTheme.Instance.PrimaryTextColor);  					typeEdit.VAnchor = VAnchor.ParentCenter;  					leftRightEdit.AddChild(typeEdit);    					int linkCompatibleRow = row;  					int linkCompatibleAxis = axis;  					MHNumberEdit valueEdit = new MHNumberEdit(positions[linkCompatibleRow][linkCompatibleAxis]' allowNegatives: true' allowDecimals: true' pixelWidth: 60' tabIndex: tab_index++);  					valueEdit.ActuallNumberEdit.InternalTextEditWidget.EditComplete += (sender' e) =>  					{  						Vector3 position = positions[linkCompatibleRow];  						position[linkCompatibleAxis] = valueEdit.ActuallNumberEdit.Value;  						positions[linkCompatibleRow] = position;  					};    					valueEdit.Margin = new BorderDouble(3);  					leftRightEdit.AddChild(valueEdit);  				}    				presetsFormContainer.AddChild(leftRightEdit);    				presetsFormContainer.AddChild(new CustomWidgets.HorizontalLine());  			}
Magic Number,MatterHackers.MatterControl,EditLevelingSettingsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditLevelingSettingsWindow.cs,EditLevelingSettingsWindow,The following statement contains a magic number: buttonRow.Padding = new BorderDouble(0' 3);
Magic Number,MatterHackers.MatterControl,CreateDiscreteMeshes,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\CreateDiscreteMeshes.cs,SplitIntoMeshesOnOrthographicZ,The following statement contains a magic number: buildVolume.x = Math.Max(buildVolume.x' partBounds.XSize + 2);
Magic Number,MatterHackers.MatterControl,CreateDiscreteMeshes,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\CreateDiscreteMeshes.cs,SplitIntoMeshesOnOrthographicZ,The following statement contains a magic number: buildVolume.y = Math.Max(buildVolume.y' partBounds.YSize + 2);
Magic Number,MatterHackers.MatterControl,CreateDiscreteMeshes,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\CreateDiscreteMeshes.cs,SplitIntoMeshesOnOrthographicZ,The following statement contains a magic number: buildVolume.z = Math.Max(buildVolume.z' partBounds.ZSize + 2);
Magic Number,MatterHackers.MatterControl,CreateDiscreteMeshes,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\CreateDiscreteMeshes.cs,SplitIntoMeshesOnOrthographicZ,The following statement contains a magic number: double scaleFactor = 5;
Magic Number,MatterHackers.MatterControl,CreateDiscreteMeshes,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\CreateDiscreteMeshes.cs,SplitIntoMeshesOnOrthographicZ,The following statement contains a magic number: Vector2 renderOffset = new Vector2(buildVolume.x / 2' buildVolume.y / 2) - new Vector2(partBounds.Center.x' partBounds.Center.y);
Magic Number,MatterHackers.MatterControl,CreateDiscreteMeshes,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\CreateDiscreteMeshes.cs,SplitIntoMeshesOnOrthographicZ,The following statement contains a magic number: Vector2 renderOffset = new Vector2(buildVolume.x / 2' buildVolume.y / 2) - new Vector2(partBounds.Center.x' partBounds.Center.y);
Magic Number,MatterHackers.MatterControl,CreateDiscreteMeshes,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\CreateDiscreteMeshes.cs,SplitIntoMeshesOnOrthographicZ,The following statement contains a magic number: if (reportProgress != null)  			{  				reportProgress(.2' ""' out continueProcessin);  			}
Magic Number,MatterHackers.MatterControl,CreateDiscreteMeshes,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\CreateDiscreteMeshes.cs,SplitIntoMeshesOnOrthographicZ,The following statement contains a magic number: foreach (Polygon polygon in discreteAreas)  			{  				graphics2D.Render(PlatingHelper.PolygonToPathStorage(polygon)' new RGBA_Bytes(rand.Next(128' 255)' rand.Next(128' 255)' rand.Next(128' 255)));  			}
Magic Number,MatterHackers.MatterControl,CreateDiscreteMeshes,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\CreateDiscreteMeshes.cs,SplitIntoMeshesOnOrthographicZ,The following statement contains a magic number: foreach (Polygon polygon in discreteAreas)  			{  				graphics2D.Render(PlatingHelper.PolygonToPathStorage(polygon)' new RGBA_Bytes(rand.Next(128' 255)' rand.Next(128' 255)' rand.Next(128' 255)));  			}
Magic Number,MatterHackers.MatterControl,CreateDiscreteMeshes,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\CreateDiscreteMeshes.cs,SplitIntoMeshesOnOrthographicZ,The following statement contains a magic number: foreach (Polygon polygon in discreteAreas)  			{  				graphics2D.Render(PlatingHelper.PolygonToPathStorage(polygon)' new RGBA_Bytes(rand.Next(128' 255)' rand.Next(128' 255)' rand.Next(128' 255)));  			}
Magic Number,MatterHackers.MatterControl,CreateDiscreteMeshes,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\CreateDiscreteMeshes.cs,SplitIntoMeshesOnOrthographicZ,The following statement contains a magic number: foreach (Polygon polygon in discreteAreas)  			{  				graphics2D.Render(PlatingHelper.PolygonToPathStorage(polygon)' new RGBA_Bytes(rand.Next(128' 255)' rand.Next(128' 255)' rand.Next(128' 255)));  			}
Magic Number,MatterHackers.MatterControl,CreateDiscreteMeshes,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\CreateDiscreteMeshes.cs,SplitIntoMeshesOnOrthographicZ,The following statement contains a magic number: foreach (Polygon polygon in discreteAreas)  			{  				graphics2D.Render(PlatingHelper.PolygonToPathStorage(polygon)' new RGBA_Bytes(rand.Next(128' 255)' rand.Next(128' 255)' rand.Next(128' 255)));  			}
Magic Number,MatterHackers.MatterControl,CreateDiscreteMeshes,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\CreateDiscreteMeshes.cs,SplitIntoMeshesOnOrthographicZ,The following statement contains a magic number: foreach (Polygon polygon in discreteAreas)  			{  				graphics2D.Render(PlatingHelper.PolygonToPathStorage(polygon)' new RGBA_Bytes(rand.Next(128' 255)' rand.Next(128' 255)' rand.Next(128' 255)));  			}
Magic Number,MatterHackers.MatterControl,CreateDiscreteMeshes,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\CreateDiscreteMeshes.cs,SplitIntoMeshesOnOrthographicZ,The following statement contains a magic number: if (reportProgress != null)  			{  				reportProgress(.5' ""' out continueProcessin);  			}
Magic Number,MatterHackers.MatterControl,CreateDiscreteMeshes,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\CreateDiscreteMeshes.cs,SplitIntoMeshesOnOrthographicZ,The following statement contains a magic number: if (reportProgress != null)  			{  				reportProgress(.8' ""' out continueProcessin);  			}
Magic Number,MatterHackers.MatterControl,CreateDiscreteMeshes,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\CreateDiscreteMeshes.cs,FindDistictObjectBounds,The following statement contains a magic number: MarchingSquaresByte marchingSquaresData = new MarchingSquaresByte(image' 5' 0);
Magic Number,MatterHackers.MatterControl,CreateDiscreteMeshes,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\CreateDiscreteMeshes.cs,FindDistictObjectBounds,The following statement contains a magic number: foreach (Polygon polygon in lineLoops)  			{  				foreach (IntPoint point in polygon)  				{  					min.X = Math.Min(point.X - 10' min.X);  					min.Y = Math.Min(point.Y - 10' min.Y);  					max.X = Math.Max(point.X + 10' max.X);  					max.Y = Math.Max(point.Y + 10' max.Y);  				}  			}
Magic Number,MatterHackers.MatterControl,CreateDiscreteMeshes,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\CreateDiscreteMeshes.cs,FindDistictObjectBounds,The following statement contains a magic number: foreach (Polygon polygon in lineLoops)  			{  				foreach (IntPoint point in polygon)  				{  					min.X = Math.Min(point.X - 10' min.X);  					min.Y = Math.Min(point.Y - 10' min.Y);  					max.X = Math.Max(point.X + 10' max.X);  					max.Y = Math.Max(point.Y + 10' max.Y);  				}  			}
Magic Number,MatterHackers.MatterControl,CreateDiscreteMeshes,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\CreateDiscreteMeshes.cs,FindDistictObjectBounds,The following statement contains a magic number: foreach (Polygon polygon in lineLoops)  			{  				foreach (IntPoint point in polygon)  				{  					min.X = Math.Min(point.X - 10' min.X);  					min.Y = Math.Min(point.Y - 10' min.Y);  					max.X = Math.Max(point.X + 10' max.X);  					max.Y = Math.Max(point.Y + 10' max.Y);  				}  			}
Magic Number,MatterHackers.MatterControl,CreateDiscreteMeshes,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\CreateDiscreteMeshes.cs,FindDistictObjectBounds,The following statement contains a magic number: foreach (Polygon polygon in lineLoops)  			{  				foreach (IntPoint point in polygon)  				{  					min.X = Math.Min(point.X - 10' min.X);  					min.Y = Math.Min(point.Y - 10' min.Y);  					max.X = Math.Max(point.X + 10' max.X);  					max.Y = Math.Max(point.Y + 10' max.Y);  				}  			}
Magic Number,MatterHackers.MatterControl,EditableNumberDisplay,C:\repos\MatterHackers_MatterControl\CustomWidgets\EditableNumberDisplay.cs,EditableNumberDisplay,The following statement contains a magic number: this.Margin = new BorderDouble(3' 0);
Magic Number,MatterHackers.MatterControl,EditableNumberDisplay,C:\repos\MatterHackers_MatterControl\CustomWidgets\EditableNumberDisplay.cs,EditableNumberDisplay,The following statement contains a magic number: clickableValueContainer.BorderColor = new RGBA_Bytes(255' 255' 255' 140);
Magic Number,MatterHackers.MatterControl,EditableNumberDisplay,C:\repos\MatterHackers_MatterControl\CustomWidgets\EditableNumberDisplay.cs,EditableNumberDisplay,The following statement contains a magic number: clickableValueContainer.BorderColor = new RGBA_Bytes(255' 255' 255' 140);
Magic Number,MatterHackers.MatterControl,EditableNumberDisplay,C:\repos\MatterHackers_MatterControl\CustomWidgets\EditableNumberDisplay.cs,EditableNumberDisplay,The following statement contains a magic number: clickableValueContainer.BorderColor = new RGBA_Bytes(255' 255' 255' 140);
Magic Number,MatterHackers.MatterControl,EditableNumberDisplay,C:\repos\MatterHackers_MatterControl\CustomWidgets\EditableNumberDisplay.cs,EditableNumberDisplay,The following statement contains a magic number: clickableValueContainer.BorderColor = new RGBA_Bytes(255' 255' 255' 140);
Magic Number,MatterHackers.MatterControl,EditableNumberDisplay,C:\repos\MatterHackers_MatterControl\CustomWidgets\EditableNumberDisplay.cs,EditableNumberDisplay,The following statement contains a magic number: clickableValueContainer.MouseEnterBounds += (sender' e) =>  			{  				clickableValueContainer.BorderWidth = 2;  				clickableValueContainer.BorderColor = new RGBA_Bytes(255' 255' 255' 255);  			};
Magic Number,MatterHackers.MatterControl,EditableNumberDisplay,C:\repos\MatterHackers_MatterControl\CustomWidgets\EditableNumberDisplay.cs,EditableNumberDisplay,The following statement contains a magic number: clickableValueContainer.MouseEnterBounds += (sender' e) =>  			{  				clickableValueContainer.BorderWidth = 2;  				clickableValueContainer.BorderColor = new RGBA_Bytes(255' 255' 255' 255);  			};
Magic Number,MatterHackers.MatterControl,EditableNumberDisplay,C:\repos\MatterHackers_MatterControl\CustomWidgets\EditableNumberDisplay.cs,EditableNumberDisplay,The following statement contains a magic number: clickableValueContainer.MouseEnterBounds += (sender' e) =>  			{  				clickableValueContainer.BorderWidth = 2;  				clickableValueContainer.BorderColor = new RGBA_Bytes(255' 255' 255' 255);  			};
Magic Number,MatterHackers.MatterControl,EditableNumberDisplay,C:\repos\MatterHackers_MatterControl\CustomWidgets\EditableNumberDisplay.cs,EditableNumberDisplay,The following statement contains a magic number: clickableValueContainer.MouseEnterBounds += (sender' e) =>  			{  				clickableValueContainer.BorderWidth = 2;  				clickableValueContainer.BorderColor = new RGBA_Bytes(255' 255' 255' 255);  			};
Magic Number,MatterHackers.MatterControl,EditableNumberDisplay,C:\repos\MatterHackers_MatterControl\CustomWidgets\EditableNumberDisplay.cs,EditableNumberDisplay,The following statement contains a magic number: clickableValueContainer.MouseEnterBounds += (sender' e) =>  			{  				clickableValueContainer.BorderWidth = 2;  				clickableValueContainer.BorderColor = new RGBA_Bytes(255' 255' 255' 255);  			};
Magic Number,MatterHackers.MatterControl,EditableNumberDisplay,C:\repos\MatterHackers_MatterControl\CustomWidgets\EditableNumberDisplay.cs,EditableNumberDisplay,The following statement contains a magic number: clickableValueContainer.MouseLeaveBounds += (sender' e) =>  			{  				clickableValueContainer.BorderWidth = 1;  				clickableValueContainer.BorderColor = new RGBA_Bytes(255' 255' 255' 140);  			};
Magic Number,MatterHackers.MatterControl,EditableNumberDisplay,C:\repos\MatterHackers_MatterControl\CustomWidgets\EditableNumberDisplay.cs,EditableNumberDisplay,The following statement contains a magic number: clickableValueContainer.MouseLeaveBounds += (sender' e) =>  			{  				clickableValueContainer.BorderWidth = 1;  				clickableValueContainer.BorderColor = new RGBA_Bytes(255' 255' 255' 140);  			};
Magic Number,MatterHackers.MatterControl,EditableNumberDisplay,C:\repos\MatterHackers_MatterControl\CustomWidgets\EditableNumberDisplay.cs,EditableNumberDisplay,The following statement contains a magic number: clickableValueContainer.MouseLeaveBounds += (sender' e) =>  			{  				clickableValueContainer.BorderWidth = 1;  				clickableValueContainer.BorderColor = new RGBA_Bytes(255' 255' 255' 140);  			};
Magic Number,MatterHackers.MatterControl,EditableNumberDisplay,C:\repos\MatterHackers_MatterControl\CustomWidgets\EditableNumberDisplay.cs,EditableNumberDisplay,The following statement contains a magic number: clickableValueContainer.MouseLeaveBounds += (sender' e) =>  			{  				clickableValueContainer.BorderWidth = 1;  				clickableValueContainer.BorderColor = new RGBA_Bytes(255' 255' 255' 140);  			};
Magic Number,MatterHackers.MatterControl,EditableNumberDisplay,C:\repos\MatterHackers_MatterControl\CustomWidgets\EditableNumberDisplay.cs,EditableNumberDisplay,The following statement contains a magic number: valueDisplay = new TextWidget(largestPossibleValue' pointSize: 12);
Magic Number,MatterHackers.MatterControl,EditableNumberDisplay,C:\repos\MatterHackers_MatterControl\CustomWidgets\EditableNumberDisplay.cs,EditableNumberDisplay,The following statement contains a magic number: valueDisplay.Margin = new BorderDouble(6);
Magic Number,MatterHackers.MatterControl,EditableNumberDisplay,C:\repos\MatterHackers_MatterControl\CustomWidgets\EditableNumberDisplay.cs,EditableNumberDisplay,The following statement contains a magic number: numberInputField = new MHNumberEdit(0' pixelWidth: 40' allowDecimals: true);
Magic Number,MatterHackers.MatterControl,EditableNumberDisplay,C:\repos\MatterHackers_MatterControl\CustomWidgets\EditableNumberDisplay.cs,EditableNumberDisplay,The following statement contains a magic number: numberInputField.Margin = new BorderDouble(left: 6);
Magic Number,MatterHackers.MatterControl,EditableNumberDisplay,C:\repos\MatterHackers_MatterControl\CustomWidgets\EditableNumberDisplay.cs,EditableNumberDisplay,The following statement contains a magic number: setButton.Margin = new BorderDouble(left: 6);
Magic Number,MatterHackers.MatterControl,PlatingHelper,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\PlatingHelper.cs,ArrangeMeshGroups,The following statement contains a magic number: for (int i = 0; i < asyncMeshGroups.Count; i++)  			{  				asyncMeshGroupTransforms[i] *= Matrix4X4.CreateTranslation(10000' 10000' 0);  			}
Magic Number,MatterHackers.MatterControl,PlatingHelper,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\PlatingHelper.cs,ArrangeMeshGroups,The following statement contains a magic number: for (int i = 0; i < asyncMeshGroups.Count; i++)  			{  				asyncMeshGroupTransforms[i] *= Matrix4X4.CreateTranslation(10000' 10000' 0);  			}
Magic Number,MatterHackers.MatterControl,PlatingHelper,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\PlatingHelper.cs,ArrangeMeshGroups,The following statement contains a magic number: {  				AxisAlignedBoundingBox bounds = asyncMeshGroups[0].GetAxisAlignedBoundingBox(asyncMeshGroupTransforms[0]);  				for (int i = 1; i < asyncMeshGroups.Count; i++)  				{  					bounds = AxisAlignedBoundingBox.Union(bounds' asyncMeshGroups[i].GetAxisAlignedBoundingBox(asyncMeshGroupTransforms[i]));  				}    				Vector3 boundsCenter = (bounds.maxXYZ + bounds.minXYZ) / 2;  				for (int i = 0; i < asyncMeshGroups.Count; i++)  				{  					asyncMeshGroupTransforms[i] *= Matrix4X4.CreateTranslation(-boundsCenter + new Vector3(0' 0' bounds.ZSize / 2));  				}  			}
Magic Number,MatterHackers.MatterControl,PlatingHelper,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\PlatingHelper.cs,ArrangeMeshGroups,The following statement contains a magic number: {  				AxisAlignedBoundingBox bounds = asyncMeshGroups[0].GetAxisAlignedBoundingBox(asyncMeshGroupTransforms[0]);  				for (int i = 1; i < asyncMeshGroups.Count; i++)  				{  					bounds = AxisAlignedBoundingBox.Union(bounds' asyncMeshGroups[i].GetAxisAlignedBoundingBox(asyncMeshGroupTransforms[i]));  				}    				Vector3 boundsCenter = (bounds.maxXYZ + bounds.minXYZ) / 2;  				for (int i = 0; i < asyncMeshGroups.Count; i++)  				{  					asyncMeshGroupTransforms[i] *= Matrix4X4.CreateTranslation(-boundsCenter + new Vector3(0' 0' bounds.ZSize / 2));  				}  			}
Magic Number,MatterHackers.MatterControl,PlatingHelper,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\PlatingHelper.cs,PlaceMeshGroupOnBed,The following statement contains a magic number: Vector3 boundsCenter = (bounds.maxXYZ + bounds.minXYZ) / 2;
Magic Number,MatterHackers.MatterControl,PlatingHelper,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\PlatingHelper.cs,PlaceMeshGroupOnBed,The following statement contains a magic number: meshTransforms[index] *= Matrix4X4.CreateTranslation(new Vector3(0' 0' -boundsCenter.z + bounds.ZSize / 2));
Magic Number,MatterHackers.MatterControl,PlatingHelper,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\PlatingHelper.cs,PlaceMeshAtHeight,The following statement contains a magic number: Vector3 boundsCenter = (bounds.maxXYZ + bounds.minXYZ) / 2;
Magic Number,MatterHackers.MatterControl,PlatingHelper,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\PlatingHelper.cs,PlaceMeshAtHeight,The following statement contains a magic number: meshTransforms[index] *= Matrix4X4.CreateTranslation(new Vector3(0' 0' zHeight - boundsCenter.z + bounds.ZSize / 2));
Magic Number,MatterHackers.MatterControl,PlatingHelper,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\PlatingHelper.cs,CenterMeshGroupXY,The following statement contains a magic number: Vector3 boundsCenter = (bounds.maxXYZ + bounds.minXYZ) / 2;
Magic Number,MatterHackers.MatterControl,PlatingHelper,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\PlatingHelper.cs,CenterMeshGroupXY,The following statement contains a magic number: meshTransforms[index] *= Matrix4X4.CreateTranslation(new Vector3(-boundsCenter.x + bounds.XSize / 2' -boundsCenter.y + bounds.YSize / 2' 0));
Magic Number,MatterHackers.MatterControl,PlatingHelper,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\PlatingHelper.cs,CenterMeshGroupXY,The following statement contains a magic number: meshTransforms[index] *= Matrix4X4.CreateTranslation(new Vector3(-boundsCenter.x + bounds.XSize / 2' -boundsCenter.y + bounds.YSize / 2' 0));
Magic Number,MatterHackers.MatterControl,PlatingHelper,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\PlatingHelper.cs,MoveMeshGroupToOpenPosition,The following statement contains a magic number: meshToMoveBounds.minXYZ -= new Vector3(2' 2' 0);
Magic Number,MatterHackers.MatterControl,PlatingHelper,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\PlatingHelper.cs,MoveMeshGroupToOpenPosition,The following statement contains a magic number: meshToMoveBounds.minXYZ -= new Vector3(2' 2' 0);
Magic Number,MatterHackers.MatterControl,PlatingHelper,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\PlatingHelper.cs,MoveMeshGroupToOpenPosition,The following statement contains a magic number: meshToMoveBounds.maxXYZ += new Vector3(2' 2' 0);
Magic Number,MatterHackers.MatterControl,PlatingHelper,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\PlatingHelper.cs,MoveMeshGroupToOpenPosition,The following statement contains a magic number: meshToMoveBounds.maxXYZ += new Vector3(2' 2' 0);
Magic Number,MatterHackers.MatterControl,PlatingHelper,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\PlatingHelper.cs,CheckPosition,The following statement contains a magic number: double xStepAmount = 5;
Magic Number,MatterHackers.MatterControl,PlatingHelper,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\PlatingHelper.cs,CheckPosition,The following statement contains a magic number: double yStepAmount = 5;
Magic Number,MatterHackers.MatterControl,PlatingHelper,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\PlatingHelper.cs,AddTraceDataForMesh,The following statement contains a magic number: foreach (Face face in mesh.Faces)  			{  				if (false)  				{  					MeshFaceTraceable triangle = new MeshFaceTraceable(face);  					allPolys.Add(triangle);  				}  				else  				{  					positions.Clear();  					foreach (Vertex vertex in face.Vertices())  					{  						positions.Add(vertex.Position);  					}    					// We should use the tessellator for this if it is greater than 3.  					Vector3 next = positions[1];  					for (int positionIndex = 2; positionIndex < positions.Count; positionIndex++)  					{  						TriangleShape triangle = new TriangleShape(positions[0]' next' positions[positionIndex]' null);  						allPolys.Add(triangle);  						next = positions[positionIndex];  					}  				}    				if (reportProgress != null)  				{  					if ((currentAction % 256) == 0 || needToUpdateProgressReport)  					{  						reportProgress(currentAction / (double)totalActionCount' "Creating Trace Polygons"' out continueProcessing);  						needToUpdateProgressReport = false;  					}  					currentAction++;  				}  			}
Magic Number,MatterHackers.MatterControl,PlatingHelper,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\PlatingHelper.cs,AddTraceDataForMesh,The following statement contains a magic number: foreach (Face face in mesh.Faces)  			{  				if (false)  				{  					MeshFaceTraceable triangle = new MeshFaceTraceable(face);  					allPolys.Add(triangle);  				}  				else  				{  					positions.Clear();  					foreach (Vertex vertex in face.Vertices())  					{  						positions.Add(vertex.Position);  					}    					// We should use the tessellator for this if it is greater than 3.  					Vector3 next = positions[1];  					for (int positionIndex = 2; positionIndex < positions.Count; positionIndex++)  					{  						TriangleShape triangle = new TriangleShape(positions[0]' next' positions[positionIndex]' null);  						allPolys.Add(triangle);  						next = positions[positionIndex];  					}  				}    				if (reportProgress != null)  				{  					if ((currentAction % 256) == 0 || needToUpdateProgressReport)  					{  						reportProgress(currentAction / (double)totalActionCount' "Creating Trace Polygons"' out continueProcessing);  						needToUpdateProgressReport = false;  					}  					currentAction++;  				}  			}
Magic Number,MatterHackers.MatterControl,MeshFaceTraceable,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\PlatingHelper.cs,GetClosestIntersection,The following statement contains a magic number: Vector3[] positions = new Vector3[3];
Magic Number,MatterHackers.MatterControl,MeshFaceTraceable,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\PlatingHelper.cs,GetClosestIntersection,The following statement contains a magic number: foreach (FaceEdge faceEdge in face.FaceEdges())  			{  				positions[index++] = faceEdge.firstVertex.Position;  				if(index==3)  				{  					break;  				}              }
Magic Number,MatterHackers.MatterControl,MeshFaceTraceable,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\PlatingHelper.cs,GetClosestIntersection,The following statement contains a magic number: Plane plane = new Plane(positions[0]' positions[1]' positions[2]);
Magic Number,MatterHackers.MatterControl,MeshFaceTraceable,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\PlatingHelper.cs,GetIntersectCost,The following statement contains a magic number: return 700;
Magic Number,MatterHackers.MatterControl,EditTemperaturePresetsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditTemperaturePresetsWindow.cs,EditTemperaturePresetsWindow,The following statement contains a magic number: topToBottom.Padding = new BorderDouble(3' 0' 3' 5);
Magic Number,MatterHackers.MatterControl,EditTemperaturePresetsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditTemperaturePresetsWindow.cs,EditTemperaturePresetsWindow,The following statement contains a magic number: topToBottom.Padding = new BorderDouble(3' 0' 3' 5);
Magic Number,MatterHackers.MatterControl,EditTemperaturePresetsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditTemperaturePresetsWindow.cs,EditTemperaturePresetsWindow,The following statement contains a magic number: topToBottom.Padding = new BorderDouble(3' 0' 3' 5);
Magic Number,MatterHackers.MatterControl,EditTemperaturePresetsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditTemperaturePresetsWindow.cs,EditTemperaturePresetsWindow,The following statement contains a magic number: headerRow.Margin = new BorderDouble(0' 3' 0' 0);
Magic Number,MatterHackers.MatterControl,EditTemperaturePresetsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditTemperaturePresetsWindow.cs,EditTemperaturePresetsWindow,The following statement contains a magic number: headerRow.Padding = new BorderDouble(0' 3' 0' 3);
Magic Number,MatterHackers.MatterControl,EditTemperaturePresetsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditTemperaturePresetsWindow.cs,EditTemperaturePresetsWindow,The following statement contains a magic number: headerRow.Padding = new BorderDouble(0' 3' 0' 3);
Magic Number,MatterHackers.MatterControl,EditTemperaturePresetsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditTemperaturePresetsWindow.cs,EditTemperaturePresetsWindow,The following statement contains a magic number: {  				string tempShortcutPresetLabel = "Temperature Shortcut Presets".Localize();  				string tempShortcutPresetLabelFull = string.Format("{0}:"' tempShortcutPresetLabel);  				TextWidget elementHeader = new TextWidget(tempShortcutPresetLabelFull' pointSize: 14);  				elementHeader.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				elementHeader.HAnchor = HAnchor.ParentLeftRight;  				elementHeader.VAnchor = Agg.UI.VAnchor.ParentBottom;    				headerRow.AddChild(elementHeader);  			}
Magic Number,MatterHackers.MatterControl,EditTemperaturePresetsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditTemperaturePresetsWindow.cs,EditTemperaturePresetsWindow,The following statement contains a magic number: {  				presetsFormContainer.HAnchor = HAnchor.ParentLeftRight;  				presetsFormContainer.VAnchor = VAnchor.ParentBottomTop;  				presetsFormContainer.Padding = new BorderDouble(3);  				presetsFormContainer.BackgroundColor = ActiveTheme.Instance.SecondaryBackgroundColor;  			}
Magic Number,MatterHackers.MatterControl,EditTemperaturePresetsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditTemperaturePresetsWindow.cs,EditTemperaturePresetsWindow,The following statement contains a magic number: textImageButtonFactory.FixedHeight = 30 * GuiWidget.DeviceScale;
Magic Number,MatterHackers.MatterControl,EditTemperaturePresetsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditTemperaturePresetsWindow.cs,EditTemperaturePresetsWindow,The following statement contains a magic number: TextWidget tempTypeLabel = new TextWidget(windowTitle' textColor: ActiveTheme.Instance.PrimaryTextColor' pointSize: 10);
Magic Number,MatterHackers.MatterControl,EditTemperaturePresetsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditTemperaturePresetsWindow.cs,EditTemperaturePresetsWindow,The following statement contains a magic number: tempTypeLabel.Margin = new BorderDouble(3);
Magic Number,MatterHackers.MatterControl,EditTemperaturePresetsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditTemperaturePresetsWindow.cs,EditTemperaturePresetsWindow,The following statement contains a magic number: leftRightLabels.Padding = new BorderDouble(3' 6);
Magic Number,MatterHackers.MatterControl,EditTemperaturePresetsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditTemperaturePresetsWindow.cs,EditTemperaturePresetsWindow,The following statement contains a magic number: leftRightLabels.Padding = new BorderDouble(3' 6);
Magic Number,MatterHackers.MatterControl,EditTemperaturePresetsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditTemperaturePresetsWindow.cs,EditTemperaturePresetsWindow,The following statement contains a magic number: labelLabelContainer.Width = 66;
Magic Number,MatterHackers.MatterControl,EditTemperaturePresetsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditTemperaturePresetsWindow.cs,EditTemperaturePresetsWindow,The following statement contains a magic number: labelLabelContainer.Height = 16;
Magic Number,MatterHackers.MatterControl,EditTemperaturePresetsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditTemperaturePresetsWindow.cs,EditTemperaturePresetsWindow,The following statement contains a magic number: labelLabelContainer.Margin = new BorderDouble(3' 0);
Magic Number,MatterHackers.MatterControl,EditTemperaturePresetsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditTemperaturePresetsWindow.cs,EditTemperaturePresetsWindow,The following statement contains a magic number: TextWidget labelLabel = new TextWidget(string.Format(labelLabelTxt)' textColor: ActiveTheme.Instance.PrimaryTextColor' pointSize: 10);
Magic Number,MatterHackers.MatterControl,EditTemperaturePresetsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditTemperaturePresetsWindow.cs,EditTemperaturePresetsWindow,The following statement contains a magic number: tempLabelContainer.Width = 66;
Magic Number,MatterHackers.MatterControl,EditTemperaturePresetsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditTemperaturePresetsWindow.cs,EditTemperaturePresetsWindow,The following statement contains a magic number: tempLabelContainer.Height = 16;
Magic Number,MatterHackers.MatterControl,EditTemperaturePresetsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditTemperaturePresetsWindow.cs,EditTemperaturePresetsWindow,The following statement contains a magic number: tempLabelContainer.Margin = new BorderDouble(3' 0);
Magic Number,MatterHackers.MatterControl,EditTemperaturePresetsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditTemperaturePresetsWindow.cs,EditTemperaturePresetsWindow,The following statement contains a magic number: TextWidget tempLabel = new TextWidget(string.Format("Temp (C)")' textColor: ActiveTheme.Instance.PrimaryTextColor' pointSize: 10);
Magic Number,MatterHackers.MatterControl,EditTemperaturePresetsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditTemperaturePresetsWindow.cs,EditTemperaturePresetsWindow,The following statement contains a magic number: for (int i = 0; i < settingsArray.Count() - 1; i += 2)  			{  				FlowLayoutWidget leftRightEdit = new FlowLayoutWidget();  				leftRightEdit.Padding = new BorderDouble(3);  				leftRightEdit.HAnchor |= Agg.UI.HAnchor.ParentLeftRight;  				string presetLabelTxt = "Preset".Localize();  				TextWidget label = new TextWidget(string.Format("{1} {0}"' preset_count' presetLabelTxt)' textColor: ActiveTheme.Instance.PrimaryTextColor);  				label.VAnchor = VAnchor.ParentCenter;  				leftRightEdit.AddChild(label);    				leftRightEdit.AddChild(new HorizontalSpacer());    				MHTextEditWidget typeEdit = new MHTextEditWidget(settingsArray[i]' pixelWidth: 60' tabIndex: tab_index++);    				typeEdit.Margin = new BorderDouble(3);  				leftRightEdit.AddChild(typeEdit);  				listWithValues.Add(typeEdit);    				double temperatureValue = 0;  				double.TryParse(settingsArray[i + 1]' out temperatureValue);  				MHNumberEdit valueEdit = new MHNumberEdit(temperatureValue' minValue: 0' pixelWidth: 60' tabIndex: tab_index++);  				valueEdit.Margin = new BorderDouble(3);  				leftRightEdit.AddChild(valueEdit);  				listWithValues.Add(valueEdit);    				//leftRightEdit.AddChild(textImageButtonFactory.Generate("Delete".Localize()));  				presetsFormContainer.AddChild(leftRightEdit);  				preset_count += 1;  			}
Magic Number,MatterHackers.MatterControl,EditTemperaturePresetsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditTemperaturePresetsWindow.cs,EditTemperaturePresetsWindow,The following statement contains a magic number: for (int i = 0; i < settingsArray.Count() - 1; i += 2)  			{  				FlowLayoutWidget leftRightEdit = new FlowLayoutWidget();  				leftRightEdit.Padding = new BorderDouble(3);  				leftRightEdit.HAnchor |= Agg.UI.HAnchor.ParentLeftRight;  				string presetLabelTxt = "Preset".Localize();  				TextWidget label = new TextWidget(string.Format("{1} {0}"' preset_count' presetLabelTxt)' textColor: ActiveTheme.Instance.PrimaryTextColor);  				label.VAnchor = VAnchor.ParentCenter;  				leftRightEdit.AddChild(label);    				leftRightEdit.AddChild(new HorizontalSpacer());    				MHTextEditWidget typeEdit = new MHTextEditWidget(settingsArray[i]' pixelWidth: 60' tabIndex: tab_index++);    				typeEdit.Margin = new BorderDouble(3);  				leftRightEdit.AddChild(typeEdit);  				listWithValues.Add(typeEdit);    				double temperatureValue = 0;  				double.TryParse(settingsArray[i + 1]' out temperatureValue);  				MHNumberEdit valueEdit = new MHNumberEdit(temperatureValue' minValue: 0' pixelWidth: 60' tabIndex: tab_index++);  				valueEdit.Margin = new BorderDouble(3);  				leftRightEdit.AddChild(valueEdit);  				listWithValues.Add(valueEdit);    				//leftRightEdit.AddChild(textImageButtonFactory.Generate("Delete".Localize()));  				presetsFormContainer.AddChild(leftRightEdit);  				preset_count += 1;  			}
Magic Number,MatterHackers.MatterControl,EditTemperaturePresetsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditTemperaturePresetsWindow.cs,EditTemperaturePresetsWindow,The following statement contains a magic number: for (int i = 0; i < settingsArray.Count() - 1; i += 2)  			{  				FlowLayoutWidget leftRightEdit = new FlowLayoutWidget();  				leftRightEdit.Padding = new BorderDouble(3);  				leftRightEdit.HAnchor |= Agg.UI.HAnchor.ParentLeftRight;  				string presetLabelTxt = "Preset".Localize();  				TextWidget label = new TextWidget(string.Format("{1} {0}"' preset_count' presetLabelTxt)' textColor: ActiveTheme.Instance.PrimaryTextColor);  				label.VAnchor = VAnchor.ParentCenter;  				leftRightEdit.AddChild(label);    				leftRightEdit.AddChild(new HorizontalSpacer());    				MHTextEditWidget typeEdit = new MHTextEditWidget(settingsArray[i]' pixelWidth: 60' tabIndex: tab_index++);    				typeEdit.Margin = new BorderDouble(3);  				leftRightEdit.AddChild(typeEdit);  				listWithValues.Add(typeEdit);    				double temperatureValue = 0;  				double.TryParse(settingsArray[i + 1]' out temperatureValue);  				MHNumberEdit valueEdit = new MHNumberEdit(temperatureValue' minValue: 0' pixelWidth: 60' tabIndex: tab_index++);  				valueEdit.Margin = new BorderDouble(3);  				leftRightEdit.AddChild(valueEdit);  				listWithValues.Add(valueEdit);    				//leftRightEdit.AddChild(textImageButtonFactory.Generate("Delete".Localize()));  				presetsFormContainer.AddChild(leftRightEdit);  				preset_count += 1;  			}
Magic Number,MatterHackers.MatterControl,EditTemperaturePresetsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditTemperaturePresetsWindow.cs,EditTemperaturePresetsWindow,The following statement contains a magic number: for (int i = 0; i < settingsArray.Count() - 1; i += 2)  			{  				FlowLayoutWidget leftRightEdit = new FlowLayoutWidget();  				leftRightEdit.Padding = new BorderDouble(3);  				leftRightEdit.HAnchor |= Agg.UI.HAnchor.ParentLeftRight;  				string presetLabelTxt = "Preset".Localize();  				TextWidget label = new TextWidget(string.Format("{1} {0}"' preset_count' presetLabelTxt)' textColor: ActiveTheme.Instance.PrimaryTextColor);  				label.VAnchor = VAnchor.ParentCenter;  				leftRightEdit.AddChild(label);    				leftRightEdit.AddChild(new HorizontalSpacer());    				MHTextEditWidget typeEdit = new MHTextEditWidget(settingsArray[i]' pixelWidth: 60' tabIndex: tab_index++);    				typeEdit.Margin = new BorderDouble(3);  				leftRightEdit.AddChild(typeEdit);  				listWithValues.Add(typeEdit);    				double temperatureValue = 0;  				double.TryParse(settingsArray[i + 1]' out temperatureValue);  				MHNumberEdit valueEdit = new MHNumberEdit(temperatureValue' minValue: 0' pixelWidth: 60' tabIndex: tab_index++);  				valueEdit.Margin = new BorderDouble(3);  				leftRightEdit.AddChild(valueEdit);  				listWithValues.Add(valueEdit);    				//leftRightEdit.AddChild(textImageButtonFactory.Generate("Delete".Localize()));  				presetsFormContainer.AddChild(leftRightEdit);  				preset_count += 1;  			}
Magic Number,MatterHackers.MatterControl,EditTemperaturePresetsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditTemperaturePresetsWindow.cs,EditTemperaturePresetsWindow,The following statement contains a magic number: for (int i = 0; i < settingsArray.Count() - 1; i += 2)  			{  				FlowLayoutWidget leftRightEdit = new FlowLayoutWidget();  				leftRightEdit.Padding = new BorderDouble(3);  				leftRightEdit.HAnchor |= Agg.UI.HAnchor.ParentLeftRight;  				string presetLabelTxt = "Preset".Localize();  				TextWidget label = new TextWidget(string.Format("{1} {0}"' preset_count' presetLabelTxt)' textColor: ActiveTheme.Instance.PrimaryTextColor);  				label.VAnchor = VAnchor.ParentCenter;  				leftRightEdit.AddChild(label);    				leftRightEdit.AddChild(new HorizontalSpacer());    				MHTextEditWidget typeEdit = new MHTextEditWidget(settingsArray[i]' pixelWidth: 60' tabIndex: tab_index++);    				typeEdit.Margin = new BorderDouble(3);  				leftRightEdit.AddChild(typeEdit);  				listWithValues.Add(typeEdit);    				double temperatureValue = 0;  				double.TryParse(settingsArray[i + 1]' out temperatureValue);  				MHNumberEdit valueEdit = new MHNumberEdit(temperatureValue' minValue: 0' pixelWidth: 60' tabIndex: tab_index++);  				valueEdit.Margin = new BorderDouble(3);  				leftRightEdit.AddChild(valueEdit);  				listWithValues.Add(valueEdit);    				//leftRightEdit.AddChild(textImageButtonFactory.Generate("Delete".Localize()));  				presetsFormContainer.AddChild(leftRightEdit);  				preset_count += 1;  			}
Magic Number,MatterHackers.MatterControl,EditTemperaturePresetsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditTemperaturePresetsWindow.cs,EditTemperaturePresetsWindow,The following statement contains a magic number: for (int i = 0; i < settingsArray.Count() - 1; i += 2)  			{  				FlowLayoutWidget leftRightEdit = new FlowLayoutWidget();  				leftRightEdit.Padding = new BorderDouble(3);  				leftRightEdit.HAnchor |= Agg.UI.HAnchor.ParentLeftRight;  				string presetLabelTxt = "Preset".Localize();  				TextWidget label = new TextWidget(string.Format("{1} {0}"' preset_count' presetLabelTxt)' textColor: ActiveTheme.Instance.PrimaryTextColor);  				label.VAnchor = VAnchor.ParentCenter;  				leftRightEdit.AddChild(label);    				leftRightEdit.AddChild(new HorizontalSpacer());    				MHTextEditWidget typeEdit = new MHTextEditWidget(settingsArray[i]' pixelWidth: 60' tabIndex: tab_index++);    				typeEdit.Margin = new BorderDouble(3);  				leftRightEdit.AddChild(typeEdit);  				listWithValues.Add(typeEdit);    				double temperatureValue = 0;  				double.TryParse(settingsArray[i + 1]' out temperatureValue);  				MHNumberEdit valueEdit = new MHNumberEdit(temperatureValue' minValue: 0' pixelWidth: 60' tabIndex: tab_index++);  				valueEdit.Margin = new BorderDouble(3);  				leftRightEdit.AddChild(valueEdit);  				listWithValues.Add(valueEdit);    				//leftRightEdit.AddChild(textImageButtonFactory.Generate("Delete".Localize()));  				presetsFormContainer.AddChild(leftRightEdit);  				preset_count += 1;  			}
Magic Number,MatterHackers.MatterControl,EditTemperaturePresetsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditTemperaturePresetsWindow.cs,EditTemperaturePresetsWindow,The following statement contains a magic number: {  				FlowLayoutWidget leftRightEdit = new FlowLayoutWidget();  				leftRightEdit.Padding = new BorderDouble(3);  				leftRightEdit.HAnchor |= Agg.UI.HAnchor.ParentLeftRight;    				TextWidget maxWidgetLabel = new TextWidget("Max Temp".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor);  				maxWidgetLabel.VAnchor = VAnchor.ParentCenter;  				leftRightEdit.AddChild(maxWidgetLabel);  				leftRightEdit.AddChild(new HorizontalSpacer());    				double maxTemperature = 0;  				double.TryParse(settingsArray[settingsArray.Count() - 1]' out maxTemperature);  				MHNumberEdit valueEdit = new MHNumberEdit(maxTemperature' minValue: 0' pixelWidth: 60' tabIndex: tab_index);  				valueEdit.Margin = new BorderDouble(3);  				leftRightEdit.AddChild(valueEdit);  				listWithValues.Add(valueEdit);    				presetsFormContainer.AddChild(leftRightEdit);  			}
Magic Number,MatterHackers.MatterControl,EditTemperaturePresetsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditTemperaturePresetsWindow.cs,EditTemperaturePresetsWindow,The following statement contains a magic number: {  				FlowLayoutWidget leftRightEdit = new FlowLayoutWidget();  				leftRightEdit.Padding = new BorderDouble(3);  				leftRightEdit.HAnchor |= Agg.UI.HAnchor.ParentLeftRight;    				TextWidget maxWidgetLabel = new TextWidget("Max Temp".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor);  				maxWidgetLabel.VAnchor = VAnchor.ParentCenter;  				leftRightEdit.AddChild(maxWidgetLabel);  				leftRightEdit.AddChild(new HorizontalSpacer());    				double maxTemperature = 0;  				double.TryParse(settingsArray[settingsArray.Count() - 1]' out maxTemperature);  				MHNumberEdit valueEdit = new MHNumberEdit(maxTemperature' minValue: 0' pixelWidth: 60' tabIndex: tab_index);  				valueEdit.Margin = new BorderDouble(3);  				leftRightEdit.AddChild(valueEdit);  				listWithValues.Add(valueEdit);    				presetsFormContainer.AddChild(leftRightEdit);  			}
Magic Number,MatterHackers.MatterControl,EditTemperaturePresetsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditTemperaturePresetsWindow.cs,EditTemperaturePresetsWindow,The following statement contains a magic number: {  				FlowLayoutWidget leftRightEdit = new FlowLayoutWidget();  				leftRightEdit.Padding = new BorderDouble(3);  				leftRightEdit.HAnchor |= Agg.UI.HAnchor.ParentLeftRight;    				TextWidget maxWidgetLabel = new TextWidget("Max Temp".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor);  				maxWidgetLabel.VAnchor = VAnchor.ParentCenter;  				leftRightEdit.AddChild(maxWidgetLabel);  				leftRightEdit.AddChild(new HorizontalSpacer());    				double maxTemperature = 0;  				double.TryParse(settingsArray[settingsArray.Count() - 1]' out maxTemperature);  				MHNumberEdit valueEdit = new MHNumberEdit(maxTemperature' minValue: 0' pixelWidth: 60' tabIndex: tab_index);  				valueEdit.Margin = new BorderDouble(3);  				leftRightEdit.AddChild(valueEdit);  				listWithValues.Add(valueEdit);    				presetsFormContainer.AddChild(leftRightEdit);  			}
Magic Number,MatterHackers.MatterControl,EditTemperaturePresetsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditTemperaturePresetsWindow.cs,EditTemperaturePresetsWindow,The following statement contains a magic number: MinimumSize = new Vector2(360' 300);
Magic Number,MatterHackers.MatterControl,EditTemperaturePresetsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditTemperaturePresetsWindow.cs,EditTemperaturePresetsWindow,The following statement contains a magic number: MinimumSize = new Vector2(360' 300);
Magic Number,MatterHackers.MatterControl,EditTemperaturePresetsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditTemperaturePresetsWindow.cs,EditTemperaturePresetsWindow,The following statement contains a magic number: buttonRow.Padding = new BorderDouble(0' 3);
Magic Number,MatterHackers.MatterControl,EditManualMovementSpeedsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditManualMovementSpeedsWindow.cs,EditManualMovementSpeedsWindow,The following statement contains a magic number: topToBottom.Padding = new BorderDouble(3' 0' 3' 5);
Magic Number,MatterHackers.MatterControl,EditManualMovementSpeedsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditManualMovementSpeedsWindow.cs,EditManualMovementSpeedsWindow,The following statement contains a magic number: topToBottom.Padding = new BorderDouble(3' 0' 3' 5);
Magic Number,MatterHackers.MatterControl,EditManualMovementSpeedsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditManualMovementSpeedsWindow.cs,EditManualMovementSpeedsWindow,The following statement contains a magic number: topToBottom.Padding = new BorderDouble(3' 0' 3' 5);
Magic Number,MatterHackers.MatterControl,EditManualMovementSpeedsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditManualMovementSpeedsWindow.cs,EditManualMovementSpeedsWindow,The following statement contains a magic number: headerRow.Margin = new BorderDouble(0' 3' 0' 0);
Magic Number,MatterHackers.MatterControl,EditManualMovementSpeedsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditManualMovementSpeedsWindow.cs,EditManualMovementSpeedsWindow,The following statement contains a magic number: headerRow.Padding = new BorderDouble(0' 3' 0' 3);
Magic Number,MatterHackers.MatterControl,EditManualMovementSpeedsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditManualMovementSpeedsWindow.cs,EditManualMovementSpeedsWindow,The following statement contains a magic number: headerRow.Padding = new BorderDouble(0' 3' 0' 3);
Magic Number,MatterHackers.MatterControl,EditManualMovementSpeedsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditManualMovementSpeedsWindow.cs,EditManualMovementSpeedsWindow,The following statement contains a magic number: {  				string movementSpeedsLabel = LocalizedString.Get("Movement Speeds Presets".Localize());  				TextWidget elementHeader = new TextWidget(string.Format("{0}:"' movementSpeedsLabel)' pointSize: 14);  				elementHeader.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				elementHeader.HAnchor = HAnchor.ParentLeftRight;  				elementHeader.VAnchor = Agg.UI.VAnchor.ParentBottom;    				headerRow.AddChild(elementHeader);  			}
Magic Number,MatterHackers.MatterControl,EditManualMovementSpeedsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditManualMovementSpeedsWindow.cs,EditManualMovementSpeedsWindow,The following statement contains a magic number: {  				presetsFormContainer.HAnchor = HAnchor.ParentLeftRight;  				presetsFormContainer.VAnchor = VAnchor.ParentBottomTop;  				presetsFormContainer.Padding = new BorderDouble(3);  				presetsFormContainer.BackgroundColor = ActiveTheme.Instance.SecondaryBackgroundColor;  			}
Magic Number,MatterHackers.MatterControl,EditManualMovementSpeedsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditManualMovementSpeedsWindow.cs,EditManualMovementSpeedsWindow,The following statement contains a magic number: textImageButtonFactory.FixedHeight = 30 * GuiWidget.DeviceScale;
Magic Number,MatterHackers.MatterControl,EditManualMovementSpeedsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditManualMovementSpeedsWindow.cs,EditManualMovementSpeedsWindow,The following statement contains a magic number: TextWidget tempTypeLabel = new TextWidget(windowTitle' textColor: ActiveTheme.Instance.PrimaryTextColor' pointSize: 10);
Magic Number,MatterHackers.MatterControl,EditManualMovementSpeedsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditManualMovementSpeedsWindow.cs,EditManualMovementSpeedsWindow,The following statement contains a magic number: tempTypeLabel.Margin = new BorderDouble(3);
Magic Number,MatterHackers.MatterControl,EditManualMovementSpeedsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditManualMovementSpeedsWindow.cs,EditManualMovementSpeedsWindow,The following statement contains a magic number: leftRightLabels.Padding = new BorderDouble(3' 6);
Magic Number,MatterHackers.MatterControl,EditManualMovementSpeedsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditManualMovementSpeedsWindow.cs,EditManualMovementSpeedsWindow,The following statement contains a magic number: leftRightLabels.Padding = new BorderDouble(3' 6);
Magic Number,MatterHackers.MatterControl,EditManualMovementSpeedsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditManualMovementSpeedsWindow.cs,EditManualMovementSpeedsWindow,The following statement contains a magic number: tempLabelContainer.Width = 76;
Magic Number,MatterHackers.MatterControl,EditManualMovementSpeedsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditManualMovementSpeedsWindow.cs,EditManualMovementSpeedsWindow,The following statement contains a magic number: tempLabelContainer.Height = 16;
Magic Number,MatterHackers.MatterControl,EditManualMovementSpeedsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditManualMovementSpeedsWindow.cs,EditManualMovementSpeedsWindow,The following statement contains a magic number: tempLabelContainer.Margin = new BorderDouble(3' 0);
Magic Number,MatterHackers.MatterControl,EditManualMovementSpeedsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditManualMovementSpeedsWindow.cs,EditManualMovementSpeedsWindow,The following statement contains a magic number: TextWidget tempLabel = new TextWidget("mm/s".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor' pointSize: 10);
Magic Number,MatterHackers.MatterControl,EditManualMovementSpeedsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditManualMovementSpeedsWindow.cs,EditManualMovementSpeedsWindow,The following statement contains a magic number: for (int i = 0; i < settingsArray.Count() - 1; i += 2)  			{  				FlowLayoutWidget leftRightEdit = new FlowLayoutWidget();  				leftRightEdit.Padding = new BorderDouble(3);  				leftRightEdit.HAnchor |= Agg.UI.HAnchor.ParentLeftRight;  				TextWidget axisLabel;  				if (settingsArray[i].StartsWith("e"))  				{  					axisLabel = new TextWidget(string.Format("{0}(s)"' "Extruder".Localize())' textColor: ActiveTheme.Instance.PrimaryTextColor);  				}  				else  				{  					axisLabel = new TextWidget(string.Format("{0} {1}"' "Axis".Localize()' settingsArray[i].ToUpper())' textColor: ActiveTheme.Instance.PrimaryTextColor);  				}  				axisLabel.VAnchor = VAnchor.ParentCenter;  				leftRightEdit.AddChild(axisLabel);    				leftRightEdit.AddChild(new HorizontalSpacer());    				axisLabels.Add(settingsArray[i]);    				double movementSpeed = 0;  				double.TryParse(settingsArray[i + 1]' out movementSpeed);  				movementSpeed = movementSpeed / 60.0;	// Convert from mm/min to mm/s  				MHNumberEdit valueEdit = new MHNumberEdit(movementSpeed' minValue: 0' pixelWidth: 60' tabIndex: tab_index++' allowDecimals: true);  				valueEdit.Margin = new BorderDouble(3);  				leftRightEdit.AddChild(valueEdit);  				valueEditors.Add(valueEdit);    				//leftRightEdit.AddChild(textImageButtonFactory.Generate("Delete".Localize()));  				presetsFormContainer.AddChild(leftRightEdit);  				preset_count += 1;  			}
Magic Number,MatterHackers.MatterControl,EditManualMovementSpeedsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditManualMovementSpeedsWindow.cs,EditManualMovementSpeedsWindow,The following statement contains a magic number: for (int i = 0; i < settingsArray.Count() - 1; i += 2)  			{  				FlowLayoutWidget leftRightEdit = new FlowLayoutWidget();  				leftRightEdit.Padding = new BorderDouble(3);  				leftRightEdit.HAnchor |= Agg.UI.HAnchor.ParentLeftRight;  				TextWidget axisLabel;  				if (settingsArray[i].StartsWith("e"))  				{  					axisLabel = new TextWidget(string.Format("{0}(s)"' "Extruder".Localize())' textColor: ActiveTheme.Instance.PrimaryTextColor);  				}  				else  				{  					axisLabel = new TextWidget(string.Format("{0} {1}"' "Axis".Localize()' settingsArray[i].ToUpper())' textColor: ActiveTheme.Instance.PrimaryTextColor);  				}  				axisLabel.VAnchor = VAnchor.ParentCenter;  				leftRightEdit.AddChild(axisLabel);    				leftRightEdit.AddChild(new HorizontalSpacer());    				axisLabels.Add(settingsArray[i]);    				double movementSpeed = 0;  				double.TryParse(settingsArray[i + 1]' out movementSpeed);  				movementSpeed = movementSpeed / 60.0;	// Convert from mm/min to mm/s  				MHNumberEdit valueEdit = new MHNumberEdit(movementSpeed' minValue: 0' pixelWidth: 60' tabIndex: tab_index++' allowDecimals: true);  				valueEdit.Margin = new BorderDouble(3);  				leftRightEdit.AddChild(valueEdit);  				valueEditors.Add(valueEdit);    				//leftRightEdit.AddChild(textImageButtonFactory.Generate("Delete".Localize()));  				presetsFormContainer.AddChild(leftRightEdit);  				preset_count += 1;  			}
Magic Number,MatterHackers.MatterControl,EditManualMovementSpeedsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditManualMovementSpeedsWindow.cs,EditManualMovementSpeedsWindow,The following statement contains a magic number: for (int i = 0; i < settingsArray.Count() - 1; i += 2)  			{  				FlowLayoutWidget leftRightEdit = new FlowLayoutWidget();  				leftRightEdit.Padding = new BorderDouble(3);  				leftRightEdit.HAnchor |= Agg.UI.HAnchor.ParentLeftRight;  				TextWidget axisLabel;  				if (settingsArray[i].StartsWith("e"))  				{  					axisLabel = new TextWidget(string.Format("{0}(s)"' "Extruder".Localize())' textColor: ActiveTheme.Instance.PrimaryTextColor);  				}  				else  				{  					axisLabel = new TextWidget(string.Format("{0} {1}"' "Axis".Localize()' settingsArray[i].ToUpper())' textColor: ActiveTheme.Instance.PrimaryTextColor);  				}  				axisLabel.VAnchor = VAnchor.ParentCenter;  				leftRightEdit.AddChild(axisLabel);    				leftRightEdit.AddChild(new HorizontalSpacer());    				axisLabels.Add(settingsArray[i]);    				double movementSpeed = 0;  				double.TryParse(settingsArray[i + 1]' out movementSpeed);  				movementSpeed = movementSpeed / 60.0;	// Convert from mm/min to mm/s  				MHNumberEdit valueEdit = new MHNumberEdit(movementSpeed' minValue: 0' pixelWidth: 60' tabIndex: tab_index++' allowDecimals: true);  				valueEdit.Margin = new BorderDouble(3);  				leftRightEdit.AddChild(valueEdit);  				valueEditors.Add(valueEdit);    				//leftRightEdit.AddChild(textImageButtonFactory.Generate("Delete".Localize()));  				presetsFormContainer.AddChild(leftRightEdit);  				preset_count += 1;  			}
Magic Number,MatterHackers.MatterControl,EditManualMovementSpeedsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditManualMovementSpeedsWindow.cs,EditManualMovementSpeedsWindow,The following statement contains a magic number: for (int i = 0; i < settingsArray.Count() - 1; i += 2)  			{  				FlowLayoutWidget leftRightEdit = new FlowLayoutWidget();  				leftRightEdit.Padding = new BorderDouble(3);  				leftRightEdit.HAnchor |= Agg.UI.HAnchor.ParentLeftRight;  				TextWidget axisLabel;  				if (settingsArray[i].StartsWith("e"))  				{  					axisLabel = new TextWidget(string.Format("{0}(s)"' "Extruder".Localize())' textColor: ActiveTheme.Instance.PrimaryTextColor);  				}  				else  				{  					axisLabel = new TextWidget(string.Format("{0} {1}"' "Axis".Localize()' settingsArray[i].ToUpper())' textColor: ActiveTheme.Instance.PrimaryTextColor);  				}  				axisLabel.VAnchor = VAnchor.ParentCenter;  				leftRightEdit.AddChild(axisLabel);    				leftRightEdit.AddChild(new HorizontalSpacer());    				axisLabels.Add(settingsArray[i]);    				double movementSpeed = 0;  				double.TryParse(settingsArray[i + 1]' out movementSpeed);  				movementSpeed = movementSpeed / 60.0;	// Convert from mm/min to mm/s  				MHNumberEdit valueEdit = new MHNumberEdit(movementSpeed' minValue: 0' pixelWidth: 60' tabIndex: tab_index++' allowDecimals: true);  				valueEdit.Margin = new BorderDouble(3);  				leftRightEdit.AddChild(valueEdit);  				valueEditors.Add(valueEdit);    				//leftRightEdit.AddChild(textImageButtonFactory.Generate("Delete".Localize()));  				presetsFormContainer.AddChild(leftRightEdit);  				preset_count += 1;  			}
Magic Number,MatterHackers.MatterControl,EditManualMovementSpeedsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditManualMovementSpeedsWindow.cs,EditManualMovementSpeedsWindow,The following statement contains a magic number: for (int i = 0; i < settingsArray.Count() - 1; i += 2)  			{  				FlowLayoutWidget leftRightEdit = new FlowLayoutWidget();  				leftRightEdit.Padding = new BorderDouble(3);  				leftRightEdit.HAnchor |= Agg.UI.HAnchor.ParentLeftRight;  				TextWidget axisLabel;  				if (settingsArray[i].StartsWith("e"))  				{  					axisLabel = new TextWidget(string.Format("{0}(s)"' "Extruder".Localize())' textColor: ActiveTheme.Instance.PrimaryTextColor);  				}  				else  				{  					axisLabel = new TextWidget(string.Format("{0} {1}"' "Axis".Localize()' settingsArray[i].ToUpper())' textColor: ActiveTheme.Instance.PrimaryTextColor);  				}  				axisLabel.VAnchor = VAnchor.ParentCenter;  				leftRightEdit.AddChild(axisLabel);    				leftRightEdit.AddChild(new HorizontalSpacer());    				axisLabels.Add(settingsArray[i]);    				double movementSpeed = 0;  				double.TryParse(settingsArray[i + 1]' out movementSpeed);  				movementSpeed = movementSpeed / 60.0;	// Convert from mm/min to mm/s  				MHNumberEdit valueEdit = new MHNumberEdit(movementSpeed' minValue: 0' pixelWidth: 60' tabIndex: tab_index++' allowDecimals: true);  				valueEdit.Margin = new BorderDouble(3);  				leftRightEdit.AddChild(valueEdit);  				valueEditors.Add(valueEdit);    				//leftRightEdit.AddChild(textImageButtonFactory.Generate("Delete".Localize()));  				presetsFormContainer.AddChild(leftRightEdit);  				preset_count += 1;  			}
Magic Number,MatterHackers.MatterControl,EditManualMovementSpeedsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditManualMovementSpeedsWindow.cs,EditManualMovementSpeedsWindow,The following statement contains a magic number: MinimumSize = new Vector2(260' 300);
Magic Number,MatterHackers.MatterControl,EditManualMovementSpeedsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditManualMovementSpeedsWindow.cs,EditManualMovementSpeedsWindow,The following statement contains a magic number: MinimumSize = new Vector2(260' 300);
Magic Number,MatterHackers.MatterControl,EditManualMovementSpeedsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditManualMovementSpeedsWindow.cs,EditManualMovementSpeedsWindow,The following statement contains a magic number: buttonRow.Padding = new BorderDouble(0' 3);
Magic Number,MatterHackers.MatterControl,EditManualMovementSpeedsWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditManualMovementSpeedsWindow.cs,DoSave_Click,The following statement contains a magic number: for (int i = 0; i < valueEditors.Count(); i++)  			{  				if (!first)  				{  					settingString.Append("'");  				}  				first = false;    				settingString.Append(axisLabels[i]);  				settingString.Append("'");    				double movementSpeed = 0;  				double.TryParse(valueEditors[i].Text' out movementSpeed);  				movementSpeed = movementSpeed * 60;	// Convert to mm/min    				settingString.Append(movementSpeed.ToString());  			}
Magic Number,MatterHackers.MatterControl,EditMacrosWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditMacrosWindow.cs,EditMacrosWindow,The following statement contains a magic number: MinimumSize = new Vector2(360' 420);
Magic Number,MatterHackers.MatterControl,EditMacrosWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\EditMacrosWindow.cs,EditMacrosWindow,The following statement contains a magic number: MinimumSize = new Vector2(360' 420);
Magic Number,MatterHackers.MatterControl,MacroDetailWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\EditMacrosWindow.cs,MacroDetailWidget,The following statement contains a magic number: linkButtonFactory.fontSize = 10;
Magic Number,MatterHackers.MatterControl,MacroDetailWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\EditMacrosWindow.cs,MacroDetailWidget,The following statement contains a magic number: topToBottom.Padding = new BorderDouble(3' 0' 3' 5);
Magic Number,MatterHackers.MatterControl,MacroDetailWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\EditMacrosWindow.cs,MacroDetailWidget,The following statement contains a magic number: topToBottom.Padding = new BorderDouble(3' 0' 3' 5);
Magic Number,MatterHackers.MatterControl,MacroDetailWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\EditMacrosWindow.cs,MacroDetailWidget,The following statement contains a magic number: topToBottom.Padding = new BorderDouble(3' 0' 3' 5);
Magic Number,MatterHackers.MatterControl,MacroDetailWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\EditMacrosWindow.cs,MacroDetailWidget,The following statement contains a magic number: headerRow.Margin = new BorderDouble(0' 3' 0' 0);
Magic Number,MatterHackers.MatterControl,MacroDetailWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\EditMacrosWindow.cs,MacroDetailWidget,The following statement contains a magic number: headerRow.Padding = new BorderDouble(0' 3' 0' 3);
Magic Number,MatterHackers.MatterControl,MacroDetailWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\EditMacrosWindow.cs,MacroDetailWidget,The following statement contains a magic number: headerRow.Padding = new BorderDouble(0' 3' 0' 3);
Magic Number,MatterHackers.MatterControl,MacroDetailWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\EditMacrosWindow.cs,MacroDetailWidget,The following statement contains a magic number: {  				string editMacroLabel = "Edit Macro".Localize();  				string editMacroLabelFull = string.Format("{0}:"' editMacroLabel);  				TextWidget elementHeader = new TextWidget(editMacroLabelFull' pointSize: 14);  				elementHeader.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				elementHeader.HAnchor = HAnchor.ParentLeftRight;  				elementHeader.VAnchor = Agg.UI.VAnchor.ParentBottom;  				headerRow.AddChild(elementHeader);  			}
Magic Number,MatterHackers.MatterControl,MacroDetailWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\EditMacrosWindow.cs,MacroDetailWidget,The following statement contains a magic number: {  				presetsFormContainer.HAnchor = HAnchor.ParentLeftRight;  				presetsFormContainer.VAnchor = VAnchor.ParentBottomTop;  				presetsFormContainer.Padding = new BorderDouble(3);  				presetsFormContainer.BackgroundColor = ActiveTheme.Instance.SecondaryBackgroundColor;  			}
Magic Number,MatterHackers.MatterControl,MacroDetailWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\EditMacrosWindow.cs,MacroDetailWidget,The following statement contains a magic number: buttonRow.Padding = new BorderDouble(0' 3);
Magic Number,MatterHackers.MatterControl,MacroDetailWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\EditMacrosWindow.cs,CreateMacroCommandContainer,The following statement contains a magic number: container.Margin = new BorderDouble(0' 5);
Magic Number,MatterHackers.MatterControl,MacroDetailWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\EditMacrosWindow.cs,CreateMacroCommandContainer,The following statement contains a magic number: BorderDouble elementMargin = new BorderDouble(top: 3);
Magic Number,MatterHackers.MatterControl,MacroDetailWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\EditMacrosWindow.cs,CreateMacroCommandContainer,The following statement contains a magic number: TextWidget macroCommandLabel = new TextWidget(macroCommandLabelTxtFull' 0' 0' 12);
Magic Number,MatterHackers.MatterControl,MacroDetailWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\EditMacrosWindow.cs,CreateMacroCommandContainer,The following statement contains a magic number: macroCommandInput = new MHTextEditWidget(windowController.ActiveMacro.GCode' pixelHeight: 120' multiLine: true' typeFace: ApplicationController.MonoSpacedTypeFace);
Magic Number,MatterHackers.MatterControl,MacroDetailWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\EditMacrosWindow.cs,CreateMacroCommandContainer,The following statement contains a magic number: macroCommandError = new TextWidget(shouldBeGCodeLabelFull' 0' 0' 10);
Magic Number,MatterHackers.MatterControl,MacroDetailWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\EditMacrosWindow.cs,CreateMacroNameContainer,The following statement contains a magic number: container.Margin = new BorderDouble(0' 5);
Magic Number,MatterHackers.MatterControl,MacroDetailWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\EditMacrosWindow.cs,CreateMacroNameContainer,The following statement contains a magic number: BorderDouble elementMargin = new BorderDouble(top: 3);
Magic Number,MatterHackers.MatterControl,MacroDetailWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\EditMacrosWindow.cs,CreateMacroNameContainer,The following statement contains a magic number: TextWidget macroNameLabel = new TextWidget(macroNameLabelTxtFull' 0' 0' 12);
Magic Number,MatterHackers.MatterControl,MacroDetailWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\EditMacrosWindow.cs,CreateMacroNameContainer,The following statement contains a magic number: macroNameError = new TextWidget(giveMacroANameLabelFull' 0' 0' 10);
Magic Number,MatterHackers.MatterControl,MacroDetailWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\EditMacrosWindow.cs,CreateMacroActionEdit,The following statement contains a magic number: container.Margin = new BorderDouble(0' 5);
Magic Number,MatterHackers.MatterControl,MacroDetailWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\EditMacrosWindow.cs,CreateMacroActionEdit,The following statement contains a magic number: BorderDouble elementMargin = new BorderDouble(top: 3);
Magic Number,MatterHackers.MatterControl,MacroListWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\EditMacrosWindow.cs,MacroListWidget,The following statement contains a magic number: linkButtonFactory.fontSize = 10;
Magic Number,MatterHackers.MatterControl,MacroListWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\EditMacrosWindow.cs,MacroListWidget,The following statement contains a magic number: topToBottom.Padding = new BorderDouble(3' 0' 3' 5);
Magic Number,MatterHackers.MatterControl,MacroListWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\EditMacrosWindow.cs,MacroListWidget,The following statement contains a magic number: topToBottom.Padding = new BorderDouble(3' 0' 3' 5);
Magic Number,MatterHackers.MatterControl,MacroListWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\EditMacrosWindow.cs,MacroListWidget,The following statement contains a magic number: topToBottom.Padding = new BorderDouble(3' 0' 3' 5);
Magic Number,MatterHackers.MatterControl,MacroListWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\EditMacrosWindow.cs,MacroListWidget,The following statement contains a magic number: headerRow.Margin = new BorderDouble(0' 3' 0' 0);
Magic Number,MatterHackers.MatterControl,MacroListWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\EditMacrosWindow.cs,MacroListWidget,The following statement contains a magic number: headerRow.Padding = new BorderDouble(0' 3' 0' 3);
Magic Number,MatterHackers.MatterControl,MacroListWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\EditMacrosWindow.cs,MacroListWidget,The following statement contains a magic number: headerRow.Padding = new BorderDouble(0' 3' 0' 3);
Magic Number,MatterHackers.MatterControl,MacroListWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\EditMacrosWindow.cs,MacroListWidget,The following statement contains a magic number: {  				string macroPresetsLabel = "Macro Presets".Localize();  				string macroPresetsLabelFull = string.Format("{0}:"' macroPresetsLabel);  				TextWidget elementHeader = new TextWidget(macroPresetsLabelFull' pointSize: 14);  				elementHeader.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				elementHeader.HAnchor = HAnchor.ParentLeftRight;  				elementHeader.VAnchor = Agg.UI.VAnchor.ParentBottom;  				headerRow.AddChild(elementHeader);  			}
Magic Number,MatterHackers.MatterControl,MacroListWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\EditMacrosWindow.cs,MacroListWidget,The following statement contains a magic number: {  				presetsFormContainer.HAnchor = HAnchor.ParentLeftRight;  				presetsFormContainer.VAnchor = VAnchor.ParentBottomTop;  				presetsFormContainer.Padding = new BorderDouble(3);  				presetsFormContainer.BackgroundColor = ActiveTheme.Instance.SecondaryBackgroundColor;  			}
Magic Number,MatterHackers.MatterControl,MacroListWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\EditMacrosWindow.cs,MacroListWidget,The following statement contains a magic number: if (ActiveSliceSettings.Instance?.Macros != null)  			{  				foreach (GCodeMacro macro in ActiveSliceSettings.Instance.Macros)  				{  					FlowLayoutWidget macroRow = new FlowLayoutWidget();  					macroRow.Margin = new BorderDouble(3' 0' 3' 3);  					macroRow.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					macroRow.Padding = new BorderDouble(3);  					macroRow.BackgroundColor = RGBA_Bytes.White;    					TextWidget buttonLabel = new TextWidget(GCodeMacro.FixMacroName(macro.Name));  					macroRow.AddChild(buttonLabel);    					macroRow.AddChild(new HorizontalSpacer());    					// You can't use the foreach variable inside the lambda functions directly or it will always be the last item.  					// We make a local variable to create a closure around it to ensure we get the correct instance  					var localMacroReference = macro;    					Button editLink = linkButtonFactory.Generate("edit".Localize());  					editLink.Margin = new BorderDouble(right: 5);  					editLink.Click += (sender' e) =>  					{  						windowController.ChangeToMacroDetail(localMacroReference);  					};  					macroRow.AddChild(editLink);    					Button removeLink = linkButtonFactory.Generate("remove".Localize());  					removeLink.Click += (sender' e) =>  					{  						ActiveSliceSettings.Instance.Macros.Remove(localMacroReference);    						windowController.RefreshMacros();  						windowController.ChangeToMacroList();  					};  					macroRow.AddChild(removeLink);    					presetsFormContainer.AddChild(macroRow);  				}  			}
Magic Number,MatterHackers.MatterControl,MacroListWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\EditMacrosWindow.cs,MacroListWidget,The following statement contains a magic number: if (ActiveSliceSettings.Instance?.Macros != null)  			{  				foreach (GCodeMacro macro in ActiveSliceSettings.Instance.Macros)  				{  					FlowLayoutWidget macroRow = new FlowLayoutWidget();  					macroRow.Margin = new BorderDouble(3' 0' 3' 3);  					macroRow.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					macroRow.Padding = new BorderDouble(3);  					macroRow.BackgroundColor = RGBA_Bytes.White;    					TextWidget buttonLabel = new TextWidget(GCodeMacro.FixMacroName(macro.Name));  					macroRow.AddChild(buttonLabel);    					macroRow.AddChild(new HorizontalSpacer());    					// You can't use the foreach variable inside the lambda functions directly or it will always be the last item.  					// We make a local variable to create a closure around it to ensure we get the correct instance  					var localMacroReference = macro;    					Button editLink = linkButtonFactory.Generate("edit".Localize());  					editLink.Margin = new BorderDouble(right: 5);  					editLink.Click += (sender' e) =>  					{  						windowController.ChangeToMacroDetail(localMacroReference);  					};  					macroRow.AddChild(editLink);    					Button removeLink = linkButtonFactory.Generate("remove".Localize());  					removeLink.Click += (sender' e) =>  					{  						ActiveSliceSettings.Instance.Macros.Remove(localMacroReference);    						windowController.RefreshMacros();  						windowController.ChangeToMacroList();  					};  					macroRow.AddChild(removeLink);    					presetsFormContainer.AddChild(macroRow);  				}  			}
Magic Number,MatterHackers.MatterControl,MacroListWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\EditMacrosWindow.cs,MacroListWidget,The following statement contains a magic number: if (ActiveSliceSettings.Instance?.Macros != null)  			{  				foreach (GCodeMacro macro in ActiveSliceSettings.Instance.Macros)  				{  					FlowLayoutWidget macroRow = new FlowLayoutWidget();  					macroRow.Margin = new BorderDouble(3' 0' 3' 3);  					macroRow.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					macroRow.Padding = new BorderDouble(3);  					macroRow.BackgroundColor = RGBA_Bytes.White;    					TextWidget buttonLabel = new TextWidget(GCodeMacro.FixMacroName(macro.Name));  					macroRow.AddChild(buttonLabel);    					macroRow.AddChild(new HorizontalSpacer());    					// You can't use the foreach variable inside the lambda functions directly or it will always be the last item.  					// We make a local variable to create a closure around it to ensure we get the correct instance  					var localMacroReference = macro;    					Button editLink = linkButtonFactory.Generate("edit".Localize());  					editLink.Margin = new BorderDouble(right: 5);  					editLink.Click += (sender' e) =>  					{  						windowController.ChangeToMacroDetail(localMacroReference);  					};  					macroRow.AddChild(editLink);    					Button removeLink = linkButtonFactory.Generate("remove".Localize());  					removeLink.Click += (sender' e) =>  					{  						ActiveSliceSettings.Instance.Macros.Remove(localMacroReference);    						windowController.RefreshMacros();  						windowController.ChangeToMacroList();  					};  					macroRow.AddChild(removeLink);    					presetsFormContainer.AddChild(macroRow);  				}  			}
Magic Number,MatterHackers.MatterControl,MacroListWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\EditMacrosWindow.cs,MacroListWidget,The following statement contains a magic number: if (ActiveSliceSettings.Instance?.Macros != null)  			{  				foreach (GCodeMacro macro in ActiveSliceSettings.Instance.Macros)  				{  					FlowLayoutWidget macroRow = new FlowLayoutWidget();  					macroRow.Margin = new BorderDouble(3' 0' 3' 3);  					macroRow.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					macroRow.Padding = new BorderDouble(3);  					macroRow.BackgroundColor = RGBA_Bytes.White;    					TextWidget buttonLabel = new TextWidget(GCodeMacro.FixMacroName(macro.Name));  					macroRow.AddChild(buttonLabel);    					macroRow.AddChild(new HorizontalSpacer());    					// You can't use the foreach variable inside the lambda functions directly or it will always be the last item.  					// We make a local variable to create a closure around it to ensure we get the correct instance  					var localMacroReference = macro;    					Button editLink = linkButtonFactory.Generate("edit".Localize());  					editLink.Margin = new BorderDouble(right: 5);  					editLink.Click += (sender' e) =>  					{  						windowController.ChangeToMacroDetail(localMacroReference);  					};  					macroRow.AddChild(editLink);    					Button removeLink = linkButtonFactory.Generate("remove".Localize());  					removeLink.Click += (sender' e) =>  					{  						ActiveSliceSettings.Instance.Macros.Remove(localMacroReference);    						windowController.RefreshMacros();  						windowController.ChangeToMacroList();  					};  					macroRow.AddChild(removeLink);    					presetsFormContainer.AddChild(macroRow);  				}  			}
Magic Number,MatterHackers.MatterControl,MacroListWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\EditMacrosWindow.cs,MacroListWidget,The following statement contains a magic number: if (ActiveSliceSettings.Instance?.Macros != null)  			{  				foreach (GCodeMacro macro in ActiveSliceSettings.Instance.Macros)  				{  					FlowLayoutWidget macroRow = new FlowLayoutWidget();  					macroRow.Margin = new BorderDouble(3' 0' 3' 3);  					macroRow.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					macroRow.Padding = new BorderDouble(3);  					macroRow.BackgroundColor = RGBA_Bytes.White;    					TextWidget buttonLabel = new TextWidget(GCodeMacro.FixMacroName(macro.Name));  					macroRow.AddChild(buttonLabel);    					macroRow.AddChild(new HorizontalSpacer());    					// You can't use the foreach variable inside the lambda functions directly or it will always be the last item.  					// We make a local variable to create a closure around it to ensure we get the correct instance  					var localMacroReference = macro;    					Button editLink = linkButtonFactory.Generate("edit".Localize());  					editLink.Margin = new BorderDouble(right: 5);  					editLink.Click += (sender' e) =>  					{  						windowController.ChangeToMacroDetail(localMacroReference);  					};  					macroRow.AddChild(editLink);    					Button removeLink = linkButtonFactory.Generate("remove".Localize());  					removeLink.Click += (sender' e) =>  					{  						ActiveSliceSettings.Instance.Macros.Remove(localMacroReference);    						windowController.RefreshMacros();  						windowController.ChangeToMacroList();  					};  					macroRow.AddChild(removeLink);    					presetsFormContainer.AddChild(macroRow);  				}  			}
Magic Number,MatterHackers.MatterControl,MacroListWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\EditMacrosWindow.cs,MacroListWidget,The following statement contains a magic number: buttonRow.Padding = new BorderDouble(0' 3);
Magic Number,MatterHackers.MatterControl,WidescreenPanel,C:\repos\MatterHackers_MatterControl\ApplicationView\WidescreenPanel.cs,WidescreenPanel,The following statement contains a magic number: Padding = new BorderDouble(4);
Magic Number,MatterHackers.MatterControl,WidescreenPanel,C:\repos\MatterHackers_MatterControl\ApplicationView\WidescreenPanel.cs,RecreateAllPanels,The following statement contains a magic number: if (numberOfPanels == 2)  			{  				LoadColumnTwo();  			}
Magic Number,MatterHackers.MatterControl,WidescreenPanel,C:\repos\MatterHackers_MatterControl\ApplicationView\WidescreenPanel.cs,SetColumnVisibility,The following statement contains a magic number: switch (numberOfPanels)  			{  				case 1:  					{  						ColumnTwo.Visible = false;  						ColumnOne.Visible = true;    						Padding = new BorderDouble(0);    						leftBorderLine.Visible = false;  					}  					break;    				case 2:  					Padding = new BorderDouble(4);  					ColumnOne.Visible = true;  					ColumnTwo.Visible = true;  					ColumnOne.HAnchor = HAnchor.AbsolutePosition;  					ColumnOne.Width = ColumnOneFixedWidth; // it can hold the slice settings so it needs to be bigger.  					ColumnOne.MinimumSize = new Vector2(Math.Max(compactSlidePanel.TabBarWidth' ColumnOneFixedWidth)' 0); //Ordering here matters - must go after children are added  					break;  			}
Magic Number,MatterHackers.MatterControl,WidescreenPanel,C:\repos\MatterHackers_MatterControl\ApplicationView\WidescreenPanel.cs,SetColumnVisibility,The following statement contains a magic number: switch (numberOfPanels)  			{  				case 1:  					{  						ColumnTwo.Visible = false;  						ColumnOne.Visible = true;    						Padding = new BorderDouble(0);    						leftBorderLine.Visible = false;  					}  					break;    				case 2:  					Padding = new BorderDouble(4);  					ColumnOne.Visible = true;  					ColumnTwo.Visible = true;  					ColumnOne.HAnchor = HAnchor.AbsolutePosition;  					ColumnOne.Width = ColumnOneFixedWidth; // it can hold the slice settings so it needs to be bigger.  					ColumnOne.MinimumSize = new Vector2(Math.Max(compactSlidePanel.TabBarWidth' ColumnOneFixedWidth)' 0); //Ordering here matters - must go after children are added  					break;  			}
Magic Number,MatterHackers.MatterControl,WidescreenPanel,C:\repos\MatterHackers_MatterControl\ApplicationView\WidescreenPanel.cs,RemovePanelsAndCreateEmpties,The following statement contains a magic number: leftBorderLine.Width = 15;
Magic Number,MatterHackers.MatterControl,WidescreenPanel,C:\repos\MatterHackers_MatterControl\ApplicationView\WidescreenPanel.cs,RemovePanelsAndCreateEmpties,The following statement contains a magic number: leftBorderLine.BeforeDraw += (widget' graphics2D) =>  			{  				RectangleDouble bounds = ((GuiWidget)widget).LocalBounds;  				bounds.Left += 3;  				bounds.Right -= 8;  				graphics2D.graphics2D.FillRectangle(bounds' new RGBA_Bytes(160' 160' 160));  			};
Magic Number,MatterHackers.MatterControl,WidescreenPanel,C:\repos\MatterHackers_MatterControl\ApplicationView\WidescreenPanel.cs,RemovePanelsAndCreateEmpties,The following statement contains a magic number: leftBorderLine.BeforeDraw += (widget' graphics2D) =>  			{  				RectangleDouble bounds = ((GuiWidget)widget).LocalBounds;  				bounds.Left += 3;  				bounds.Right -= 8;  				graphics2D.graphics2D.FillRectangle(bounds' new RGBA_Bytes(160' 160' 160));  			};
Magic Number,MatterHackers.MatterControl,WidescreenPanel,C:\repos\MatterHackers_MatterControl\ApplicationView\WidescreenPanel.cs,RemovePanelsAndCreateEmpties,The following statement contains a magic number: leftBorderLine.BeforeDraw += (widget' graphics2D) =>  			{  				RectangleDouble bounds = ((GuiWidget)widget).LocalBounds;  				bounds.Left += 3;  				bounds.Right -= 8;  				graphics2D.graphics2D.FillRectangle(bounds' new RGBA_Bytes(160' 160' 160));  			};
Magic Number,MatterHackers.MatterControl,WidescreenPanel,C:\repos\MatterHackers_MatterControl\ApplicationView\WidescreenPanel.cs,RemovePanelsAndCreateEmpties,The following statement contains a magic number: leftBorderLine.BeforeDraw += (widget' graphics2D) =>  			{  				RectangleDouble bounds = ((GuiWidget)widget).LocalBounds;  				bounds.Left += 3;  				bounds.Right -= 8;  				graphics2D.graphics2D.FillRectangle(bounds' new RGBA_Bytes(160' 160' 160));  			};
Magic Number,MatterHackers.MatterControl,WidescreenPanel,C:\repos\MatterHackers_MatterControl\ApplicationView\WidescreenPanel.cs,RemovePanelsAndCreateEmpties,The following statement contains a magic number: leftBorderLine.BeforeDraw += (widget' graphics2D) =>  			{  				RectangleDouble bounds = ((GuiWidget)widget).LocalBounds;  				bounds.Left += 3;  				bounds.Right -= 8;  				graphics2D.graphics2D.FillRectangle(bounds' new RGBA_Bytes(160' 160' 160));  			};
Magic Number,MatterHackers.MatterControl,UpdateNotificationMark,C:\repos\MatterHackers_MatterControl\ApplicationView\WidescreenPanel.cs,OnDraw,The following statement contains a magic number: graphics2D.Circle(Width / 2' Height / 2' Width / 2' RGBA_Bytes.White);
Magic Number,MatterHackers.MatterControl,UpdateNotificationMark,C:\repos\MatterHackers_MatterControl\ApplicationView\WidescreenPanel.cs,OnDraw,The following statement contains a magic number: graphics2D.Circle(Width / 2' Height / 2' Width / 2' RGBA_Bytes.White);
Magic Number,MatterHackers.MatterControl,UpdateNotificationMark,C:\repos\MatterHackers_MatterControl\ApplicationView\WidescreenPanel.cs,OnDraw,The following statement contains a magic number: graphics2D.Circle(Width / 2' Height / 2' Width / 2' RGBA_Bytes.White);
Magic Number,MatterHackers.MatterControl,UpdateNotificationMark,C:\repos\MatterHackers_MatterControl\ApplicationView\WidescreenPanel.cs,OnDraw,The following statement contains a magic number: graphics2D.Circle(Width / 2' Height / 2' Width / 2 - 1' RGBA_Bytes.Red);
Magic Number,MatterHackers.MatterControl,UpdateNotificationMark,C:\repos\MatterHackers_MatterControl\ApplicationView\WidescreenPanel.cs,OnDraw,The following statement contains a magic number: graphics2D.Circle(Width / 2' Height / 2' Width / 2 - 1' RGBA_Bytes.Red);
Magic Number,MatterHackers.MatterControl,UpdateNotificationMark,C:\repos\MatterHackers_MatterControl\ApplicationView\WidescreenPanel.cs,OnDraw,The following statement contains a magic number: graphics2D.Circle(Width / 2' Height / 2' Width / 2 - 1' RGBA_Bytes.Red);
Magic Number,MatterHackers.MatterControl,UpdateNotificationMark,C:\repos\MatterHackers_MatterControl\ApplicationView\WidescreenPanel.cs,OnDraw,The following statement contains a magic number: graphics2D.FillRectangle(Width / 2 - 1' Height / 2 - 3' Width / 2 + 1' Height / 2 + 3' RGBA_Bytes.White);
Magic Number,MatterHackers.MatterControl,UpdateNotificationMark,C:\repos\MatterHackers_MatterControl\ApplicationView\WidescreenPanel.cs,OnDraw,The following statement contains a magic number: graphics2D.FillRectangle(Width / 2 - 1' Height / 2 - 3' Width / 2 + 1' Height / 2 + 3' RGBA_Bytes.White);
Magic Number,MatterHackers.MatterControl,UpdateNotificationMark,C:\repos\MatterHackers_MatterControl\ApplicationView\WidescreenPanel.cs,OnDraw,The following statement contains a magic number: graphics2D.FillRectangle(Width / 2 - 1' Height / 2 - 3' Width / 2 + 1' Height / 2 + 3' RGBA_Bytes.White);
Magic Number,MatterHackers.MatterControl,UpdateNotificationMark,C:\repos\MatterHackers_MatterControl\ApplicationView\WidescreenPanel.cs,OnDraw,The following statement contains a magic number: graphics2D.FillRectangle(Width / 2 - 1' Height / 2 - 3' Width / 2 + 1' Height / 2 + 3' RGBA_Bytes.White);
Magic Number,MatterHackers.MatterControl,UpdateNotificationMark,C:\repos\MatterHackers_MatterControl\ApplicationView\WidescreenPanel.cs,OnDraw,The following statement contains a magic number: graphics2D.FillRectangle(Width / 2 - 1' Height / 2 - 3' Width / 2 + 1' Height / 2 + 3' RGBA_Bytes.White);
Magic Number,MatterHackers.MatterControl,UpdateNotificationMark,C:\repos\MatterHackers_MatterControl\ApplicationView\WidescreenPanel.cs,OnDraw,The following statement contains a magic number: graphics2D.FillRectangle(Width / 2 - 1' Height / 2 - 3' Width / 2 + 1' Height / 2 + 3' RGBA_Bytes.White);
Magic Number,MatterHackers.MatterControl,SavePartsSheetFeedbackWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\SavePartsSheetFeedbackWindow.cs,SavePartsSheetFeedbackWindow,The following statement contains a magic number: feedback.Padding = new BorderDouble(5' 5);
Magic Number,MatterHackers.MatterControl,SavePartsSheetFeedbackWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\SavePartsSheetFeedbackWindow.cs,SavePartsSheetFeedbackWindow,The following statement contains a magic number: feedback.Padding = new BorderDouble(5' 5);
Magic Number,MatterHackers.MatterControl,SavePartsSheetFeedbackWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\SavePartsSheetFeedbackWindow.cs,CreateNextLine,The following statement contains a magic number: nextLine.Margin = new BorderDouble(0' 2);
Magic Number,MatterHackers.MatterControl,ImageButtonFactory,C:\repos\MatterHackers_MatterControl\ControlElements\ImageButtonFactory.cs,CreateToggleSwitch,The following statement contains a magic number: ToggleSwitchView toggleView = new ToggleSwitchView(on' off'  				60 * GuiWidget.DeviceScale' 24 * GuiWidget.DeviceScale'  				ActiveTheme.Instance.PrimaryBackgroundColor'  				new RGBA_Bytes(220' 220' 220)'  				ActiveTheme.Instance.PrimaryAccentColor'  				ActiveTheme.Instance.PrimaryTextColor);
Magic Number,MatterHackers.MatterControl,ImageButtonFactory,C:\repos\MatterHackers_MatterControl\ControlElements\ImageButtonFactory.cs,CreateToggleSwitch,The following statement contains a magic number: ToggleSwitchView toggleView = new ToggleSwitchView(on' off'  				60 * GuiWidget.DeviceScale' 24 * GuiWidget.DeviceScale'  				ActiveTheme.Instance.PrimaryBackgroundColor'  				new RGBA_Bytes(220' 220' 220)'  				ActiveTheme.Instance.PrimaryAccentColor'  				ActiveTheme.Instance.PrimaryTextColor);
Magic Number,MatterHackers.MatterControl,ImageButtonFactory,C:\repos\MatterHackers_MatterControl\ControlElements\ImageButtonFactory.cs,CreateToggleSwitch,The following statement contains a magic number: ToggleSwitchView toggleView = new ToggleSwitchView(on' off'  				60 * GuiWidget.DeviceScale' 24 * GuiWidget.DeviceScale'  				ActiveTheme.Instance.PrimaryBackgroundColor'  				new RGBA_Bytes(220' 220' 220)'  				ActiveTheme.Instance.PrimaryAccentColor'  				ActiveTheme.Instance.PrimaryTextColor);
Magic Number,MatterHackers.MatterControl,ImageButtonFactory,C:\repos\MatterHackers_MatterControl\ControlElements\ImageButtonFactory.cs,CreateToggleSwitch,The following statement contains a magic number: ToggleSwitchView toggleView = new ToggleSwitchView(on' off'  				60 * GuiWidget.DeviceScale' 24 * GuiWidget.DeviceScale'  				ActiveTheme.Instance.PrimaryBackgroundColor'  				new RGBA_Bytes(220' 220' 220)'  				ActiveTheme.Instance.PrimaryAccentColor'  				ActiveTheme.Instance.PrimaryTextColor);
Magic Number,MatterHackers.MatterControl,ImageButtonFactory,C:\repos\MatterHackers_MatterControl\ControlElements\ImageButtonFactory.cs,CreateToggleSwitch,The following statement contains a magic number: ToggleSwitchView toggleView = new ToggleSwitchView(on' off'  				60 * GuiWidget.DeviceScale' 24 * GuiWidget.DeviceScale'  				ActiveTheme.Instance.PrimaryBackgroundColor'  				new RGBA_Bytes(220' 220' 220)'  				ActiveTheme.Instance.PrimaryAccentColor'  				ActiveTheme.Instance.PrimaryTextColor);
Magic Number,MatterHackers.MatterControl,PrintProgressBar,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintProgressBarWidget.cs,PrintProgressBar,The following statement contains a magic number: MinimumSize = new Vector2(0' 24);
Magic Number,MatterHackers.MatterControl,PrintProgressBar,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintProgressBarWidget.cs,PrintProgressBar,The following statement contains a magic number: container.Padding = new BorderDouble(6' 0);
Magic Number,MatterHackers.MatterControl,PrintProgressBar,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintProgressBarWidget.cs,PrintProgressBar,The following statement contains a magic number: printTimeElapsed = new TextWidget(""' pointSize: 11);
Magic Number,MatterHackers.MatterControl,PrintProgressBar,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintProgressBarWidget.cs,PrintProgressBar,The following statement contains a magic number: printTimeRemaining = new TextWidget(""' pointSize: 11);
Magic Number,MatterHackers.MatterControl,PrintProgressBar,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintProgressBarWidget.cs,UpdatePrintStatus,The following statement contains a magic number: if (PrinterConnectionAndCommunication.Instance.ActivePrintItem == null)  			{  				printTimeElapsed.Text = string.Format("");  				printTimeRemaining.Text = string.Format("");  			}  			else  			{  				int secondsPrinted = PrinterConnectionAndCommunication.Instance.SecondsPrinted;  				int hoursPrinted = (int)(secondsPrinted / (60 * 60));  				int minutesPrinted = (int)(secondsPrinted / 60 - hoursPrinted * 60);  				secondsPrinted = secondsPrinted % 60;    				if (secondsPrinted > 0)  				{  					if (hoursPrinted > 0)  					{  						printTimeElapsed.Text = string.Format("{0}:{1:00}:{2:00}"'  							hoursPrinted'  							minutesPrinted'  							secondsPrinted);  					}  					else  					{  						printTimeElapsed.Text = string.Format("{0}:{1:00}"'  							minutesPrinted'  							secondsPrinted);  					}  				}  				else  				{  					printTimeElapsed.Text = string.Format("");  				}    				string printPercentRemainingText = string.Format("{0:0.0}%"' currentPercent);    				if (PrinterConnectionAndCommunication.Instance.PrinterIsPrinting || PrinterConnectionAndCommunication.Instance.PrinterIsPaused)  				{  					printTimeRemaining.Text = printPercentRemainingText;  				}  				else if (PrinterConnectionAndCommunication.Instance.PrintIsFinished)  				{  					printTimeRemaining.Text = "Done!";  				}  				else  				{  					printTimeRemaining.Text = string.Format("");  				}  			}
Magic Number,MatterHackers.MatterControl,PrintProgressBar,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintProgressBarWidget.cs,UpdatePrintStatus,The following statement contains a magic number: if (PrinterConnectionAndCommunication.Instance.ActivePrintItem == null)  			{  				printTimeElapsed.Text = string.Format("");  				printTimeRemaining.Text = string.Format("");  			}  			else  			{  				int secondsPrinted = PrinterConnectionAndCommunication.Instance.SecondsPrinted;  				int hoursPrinted = (int)(secondsPrinted / (60 * 60));  				int minutesPrinted = (int)(secondsPrinted / 60 - hoursPrinted * 60);  				secondsPrinted = secondsPrinted % 60;    				if (secondsPrinted > 0)  				{  					if (hoursPrinted > 0)  					{  						printTimeElapsed.Text = string.Format("{0}:{1:00}:{2:00}"'  							hoursPrinted'  							minutesPrinted'  							secondsPrinted);  					}  					else  					{  						printTimeElapsed.Text = string.Format("{0}:{1:00}"'  							minutesPrinted'  							secondsPrinted);  					}  				}  				else  				{  					printTimeElapsed.Text = string.Format("");  				}    				string printPercentRemainingText = string.Format("{0:0.0}%"' currentPercent);    				if (PrinterConnectionAndCommunication.Instance.PrinterIsPrinting || PrinterConnectionAndCommunication.Instance.PrinterIsPaused)  				{  					printTimeRemaining.Text = printPercentRemainingText;  				}  				else if (PrinterConnectionAndCommunication.Instance.PrintIsFinished)  				{  					printTimeRemaining.Text = "Done!";  				}  				else  				{  					printTimeRemaining.Text = string.Format("");  				}  			}
Magic Number,MatterHackers.MatterControl,PrintProgressBar,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintProgressBarWidget.cs,UpdatePrintStatus,The following statement contains a magic number: if (PrinterConnectionAndCommunication.Instance.ActivePrintItem == null)  			{  				printTimeElapsed.Text = string.Format("");  				printTimeRemaining.Text = string.Format("");  			}  			else  			{  				int secondsPrinted = PrinterConnectionAndCommunication.Instance.SecondsPrinted;  				int hoursPrinted = (int)(secondsPrinted / (60 * 60));  				int minutesPrinted = (int)(secondsPrinted / 60 - hoursPrinted * 60);  				secondsPrinted = secondsPrinted % 60;    				if (secondsPrinted > 0)  				{  					if (hoursPrinted > 0)  					{  						printTimeElapsed.Text = string.Format("{0}:{1:00}:{2:00}"'  							hoursPrinted'  							minutesPrinted'  							secondsPrinted);  					}  					else  					{  						printTimeElapsed.Text = string.Format("{0}:{1:00}"'  							minutesPrinted'  							secondsPrinted);  					}  				}  				else  				{  					printTimeElapsed.Text = string.Format("");  				}    				string printPercentRemainingText = string.Format("{0:0.0}%"' currentPercent);    				if (PrinterConnectionAndCommunication.Instance.PrinterIsPrinting || PrinterConnectionAndCommunication.Instance.PrinterIsPaused)  				{  					printTimeRemaining.Text = printPercentRemainingText;  				}  				else if (PrinterConnectionAndCommunication.Instance.PrintIsFinished)  				{  					printTimeRemaining.Text = "Done!";  				}  				else  				{  					printTimeRemaining.Text = string.Format("");  				}  			}
Magic Number,MatterHackers.MatterControl,PrintProgressBar,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintProgressBarWidget.cs,UpdatePrintStatus,The following statement contains a magic number: if (PrinterConnectionAndCommunication.Instance.ActivePrintItem == null)  			{  				printTimeElapsed.Text = string.Format("");  				printTimeRemaining.Text = string.Format("");  			}  			else  			{  				int secondsPrinted = PrinterConnectionAndCommunication.Instance.SecondsPrinted;  				int hoursPrinted = (int)(secondsPrinted / (60 * 60));  				int minutesPrinted = (int)(secondsPrinted / 60 - hoursPrinted * 60);  				secondsPrinted = secondsPrinted % 60;    				if (secondsPrinted > 0)  				{  					if (hoursPrinted > 0)  					{  						printTimeElapsed.Text = string.Format("{0}:{1:00}:{2:00}"'  							hoursPrinted'  							minutesPrinted'  							secondsPrinted);  					}  					else  					{  						printTimeElapsed.Text = string.Format("{0}:{1:00}"'  							minutesPrinted'  							secondsPrinted);  					}  				}  				else  				{  					printTimeElapsed.Text = string.Format("");  				}    				string printPercentRemainingText = string.Format("{0:0.0}%"' currentPercent);    				if (PrinterConnectionAndCommunication.Instance.PrinterIsPrinting || PrinterConnectionAndCommunication.Instance.PrinterIsPaused)  				{  					printTimeRemaining.Text = printPercentRemainingText;  				}  				else if (PrinterConnectionAndCommunication.Instance.PrintIsFinished)  				{  					printTimeRemaining.Text = "Done!";  				}  				else  				{  					printTimeRemaining.Text = string.Format("");  				}  			}
Magic Number,MatterHackers.MatterControl,PrintProgressBar,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintProgressBarWidget.cs,UpdatePrintStatus,The following statement contains a magic number: if (PrinterConnectionAndCommunication.Instance.ActivePrintItem == null)  			{  				printTimeElapsed.Text = string.Format("");  				printTimeRemaining.Text = string.Format("");  			}  			else  			{  				int secondsPrinted = PrinterConnectionAndCommunication.Instance.SecondsPrinted;  				int hoursPrinted = (int)(secondsPrinted / (60 * 60));  				int minutesPrinted = (int)(secondsPrinted / 60 - hoursPrinted * 60);  				secondsPrinted = secondsPrinted % 60;    				if (secondsPrinted > 0)  				{  					if (hoursPrinted > 0)  					{  						printTimeElapsed.Text = string.Format("{0}:{1:00}:{2:00}"'  							hoursPrinted'  							minutesPrinted'  							secondsPrinted);  					}  					else  					{  						printTimeElapsed.Text = string.Format("{0}:{1:00}"'  							minutesPrinted'  							secondsPrinted);  					}  				}  				else  				{  					printTimeElapsed.Text = string.Format("");  				}    				string printPercentRemainingText = string.Format("{0:0.0}%"' currentPercent);    				if (PrinterConnectionAndCommunication.Instance.PrinterIsPrinting || PrinterConnectionAndCommunication.Instance.PrinterIsPaused)  				{  					printTimeRemaining.Text = printPercentRemainingText;  				}  				else if (PrinterConnectionAndCommunication.Instance.PrintIsFinished)  				{  					printTimeRemaining.Text = "Done!";  				}  				else  				{  					printTimeRemaining.Text = string.Format("");  				}  			}
Magic Number,MatterHackers.MatterControl,PrintProgressBar,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintProgressBarWidget.cs,OnDraw,The following statement contains a magic number: graphics2D.FillRectangle(0' 0' Width * currentPercent / 100' Height' completeColor);
Magic Number,MatterHackers.MatterControl,ExportToSdCardFeedbackWindow,C:\repos\MatterHackers_MatterControl\Queue\OptionsMenu\ExportToSdCardFeedbackWindow.cs,ExportToSdCardFeedbackWindow,The following statement contains a magic number: feedback.Padding = new BorderDouble(5' 5);
Magic Number,MatterHackers.MatterControl,ExportToSdCardFeedbackWindow,C:\repos\MatterHackers_MatterControl\Queue\OptionsMenu\ExportToSdCardFeedbackWindow.cs,ExportToSdCardFeedbackWindow,The following statement contains a magic number: feedback.Padding = new BorderDouble(5' 5);
Magic Number,MatterHackers.MatterControl,ExportToSdCardFeedbackWindow,C:\repos\MatterHackers_MatterControl\Queue\OptionsMenu\ExportToSdCardFeedbackWindow.cs,CreateNextLine,The following statement contains a magic number: nextLine.Margin = new BorderDouble(0' 2);
Magic Number,MatterHackers.MatterControl,StyledMessageBox,C:\repos\MatterHackers_MatterControl\ControlElements\StyledMessageBoxWindow.cs,ShowMessageBox,The following statement contains a magic number: StyledMessageBox messageBox = new StyledMessageBox(callback' message' caption' messageType' extraWidgetsToAdd' 400' 300' yesOk' no);
Magic Number,MatterHackers.MatterControl,StyledMessageBox,C:\repos\MatterHackers_MatterControl\ControlElements\StyledMessageBoxWindow.cs,ShowMessageBox,The following statement contains a magic number: StyledMessageBox messageBox = new StyledMessageBox(callback' message' caption' messageType' extraWidgetsToAdd' 400' 300' yesOk' no);
Magic Number,MatterHackers.MatterControl,StyledMessageBox,C:\repos\MatterHackers_MatterControl\ControlElements\StyledMessageBoxWindow.cs,StyledMessageBox,The following statement contains a magic number: if (UserSettings.Instance.IsTouchScreen)  			{  				extraTextScaling = 1.33333;  			}
Magic Number,MatterHackers.MatterControl,StyledMessageBox,C:\repos\MatterHackers_MatterControl\ControlElements\StyledMessageBoxWindow.cs,StyledMessageBox,The following statement contains a magic number: if (UserSettings.Instance.IsTouchScreen)  			{  				topToBottom.Padding = new BorderDouble(12' 12' 13' 8);  			}  			else  			{  				topToBottom.Padding = new BorderDouble(3' 0' 3' 5);  			}
Magic Number,MatterHackers.MatterControl,StyledMessageBox,C:\repos\MatterHackers_MatterControl\ControlElements\StyledMessageBoxWindow.cs,StyledMessageBox,The following statement contains a magic number: if (UserSettings.Instance.IsTouchScreen)  			{  				topToBottom.Padding = new BorderDouble(12' 12' 13' 8);  			}  			else  			{  				topToBottom.Padding = new BorderDouble(3' 0' 3' 5);  			}
Magic Number,MatterHackers.MatterControl,StyledMessageBox,C:\repos\MatterHackers_MatterControl\ControlElements\StyledMessageBoxWindow.cs,StyledMessageBox,The following statement contains a magic number: if (UserSettings.Instance.IsTouchScreen)  			{  				topToBottom.Padding = new BorderDouble(12' 12' 13' 8);  			}  			else  			{  				topToBottom.Padding = new BorderDouble(3' 0' 3' 5);  			}
Magic Number,MatterHackers.MatterControl,StyledMessageBox,C:\repos\MatterHackers_MatterControl\ControlElements\StyledMessageBoxWindow.cs,StyledMessageBox,The following statement contains a magic number: if (UserSettings.Instance.IsTouchScreen)  			{  				topToBottom.Padding = new BorderDouble(12' 12' 13' 8);  			}  			else  			{  				topToBottom.Padding = new BorderDouble(3' 0' 3' 5);  			}
Magic Number,MatterHackers.MatterControl,StyledMessageBox,C:\repos\MatterHackers_MatterControl\ControlElements\StyledMessageBoxWindow.cs,StyledMessageBox,The following statement contains a magic number: if (UserSettings.Instance.IsTouchScreen)  			{  				topToBottom.Padding = new BorderDouble(12' 12' 13' 8);  			}  			else  			{  				topToBottom.Padding = new BorderDouble(3' 0' 3' 5);  			}
Magic Number,MatterHackers.MatterControl,StyledMessageBox,C:\repos\MatterHackers_MatterControl\ControlElements\StyledMessageBoxWindow.cs,StyledMessageBox,The following statement contains a magic number: if (UserSettings.Instance.IsTouchScreen)  			{  				topToBottom.Padding = new BorderDouble(12' 12' 13' 8);  			}  			else  			{  				topToBottom.Padding = new BorderDouble(3' 0' 3' 5);  			}
Magic Number,MatterHackers.MatterControl,StyledMessageBox,C:\repos\MatterHackers_MatterControl\ControlElements\StyledMessageBoxWindow.cs,StyledMessageBox,The following statement contains a magic number: if (UserSettings.Instance.IsTouchScreen)  			{  				topToBottom.Padding = new BorderDouble(12' 12' 13' 8);  			}  			else  			{  				topToBottom.Padding = new BorderDouble(3' 0' 3' 5);  			}
Magic Number,MatterHackers.MatterControl,StyledMessageBox,C:\repos\MatterHackers_MatterControl\ControlElements\StyledMessageBoxWindow.cs,StyledMessageBox,The following statement contains a magic number: headerRow.Margin = new BorderDouble(0' 3' 0' 0);
Magic Number,MatterHackers.MatterControl,StyledMessageBox,C:\repos\MatterHackers_MatterControl\ControlElements\StyledMessageBoxWindow.cs,StyledMessageBox,The following statement contains a magic number: headerRow.Padding = new BorderDouble(0' 3' 0' 3);
Magic Number,MatterHackers.MatterControl,StyledMessageBox,C:\repos\MatterHackers_MatterControl\ControlElements\StyledMessageBoxWindow.cs,StyledMessageBox,The following statement contains a magic number: headerRow.Padding = new BorderDouble(0' 3' 0' 3);
Magic Number,MatterHackers.MatterControl,StyledMessageBox,C:\repos\MatterHackers_MatterControl\ControlElements\StyledMessageBoxWindow.cs,StyledMessageBox,The following statement contains a magic number: {  				TextWidget elementHeader = new TextWidget(windowTitle' pointSize: 14 * extraTextScaling);  				elementHeader.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				elementHeader.HAnchor = HAnchor.ParentLeftRight;  				elementHeader.VAnchor = Agg.UI.VAnchor.ParentBottom;    				headerRow.AddChild(elementHeader);  				topToBottom.AddChild(headerRow);  			}
Magic Number,MatterHackers.MatterControl,StyledMessageBox,C:\repos\MatterHackers_MatterControl\ControlElements\StyledMessageBoxWindow.cs,StyledMessageBox,The following statement contains a magic number: {  				middleRowContainer.HAnchor = HAnchor.ParentLeftRight;  				middleRowContainer.VAnchor = VAnchor.ParentBottomTop;  				// normally the padding for the middle container should be just (5) all around. The has extra top space  				middleRowContainer.Padding = new BorderDouble(5' 5' 5' 15);  				middleRowContainer.BackgroundColor = ActiveTheme.Instance.SecondaryBackgroundColor;  			}
Magic Number,MatterHackers.MatterControl,StyledMessageBox,C:\repos\MatterHackers_MatterControl\ControlElements\StyledMessageBoxWindow.cs,StyledMessageBox,The following statement contains a magic number: {  				middleRowContainer.HAnchor = HAnchor.ParentLeftRight;  				middleRowContainer.VAnchor = VAnchor.ParentBottomTop;  				// normally the padding for the middle container should be just (5) all around. The has extra top space  				middleRowContainer.Padding = new BorderDouble(5' 5' 5' 15);  				middleRowContainer.BackgroundColor = ActiveTheme.Instance.SecondaryBackgroundColor;  			}
Magic Number,MatterHackers.MatterControl,StyledMessageBox,C:\repos\MatterHackers_MatterControl\ControlElements\StyledMessageBoxWindow.cs,StyledMessageBox,The following statement contains a magic number: {  				middleRowContainer.HAnchor = HAnchor.ParentLeftRight;  				middleRowContainer.VAnchor = VAnchor.ParentBottomTop;  				// normally the padding for the middle container should be just (5) all around. The has extra top space  				middleRowContainer.Padding = new BorderDouble(5' 5' 5' 15);  				middleRowContainer.BackgroundColor = ActiveTheme.Instance.SecondaryBackgroundColor;  			}
Magic Number,MatterHackers.MatterControl,StyledMessageBox,C:\repos\MatterHackers_MatterControl\ControlElements\StyledMessageBoxWindow.cs,StyledMessageBox,The following statement contains a magic number: {  				middleRowContainer.HAnchor = HAnchor.ParentLeftRight;  				middleRowContainer.VAnchor = VAnchor.ParentBottomTop;  				// normally the padding for the middle container should be just (5) all around. The has extra top space  				middleRowContainer.Padding = new BorderDouble(5' 5' 5' 15);  				middleRowContainer.BackgroundColor = ActiveTheme.Instance.SecondaryBackgroundColor;  			}
Magic Number,MatterHackers.MatterControl,StyledMessageBox,C:\repos\MatterHackers_MatterControl\ControlElements\StyledMessageBoxWindow.cs,StyledMessageBox,The following statement contains a magic number: messageContainer = new TextWidget(message' textColor: ActiveTheme.Instance.PrimaryTextColor' pointSize: 12 * extraTextScaling);
Magic Number,MatterHackers.MatterControl,StyledMessageBox,C:\repos\MatterHackers_MatterControl\ControlElements\StyledMessageBoxWindow.cs,StyledMessageBox,The following statement contains a magic number: {  				BackgroundColor = ActiveTheme.Instance.PrimaryBackgroundColor;  				buttonRow.HAnchor = HAnchor.ParentLeftRight;  				buttonRow.Padding = new BorderDouble(0' 3);  			}
Magic Number,MatterHackers.MatterControl,StyledMessageBox,C:\repos\MatterHackers_MatterControl\ControlElements\StyledMessageBoxWindow.cs,AdjustTextWrap,The following statement contains a magic number: if (messageContainer != null)  			{  				double wrappingSize = middleRowContainer.Width - (middleRowContainer.Padding.Width + messageContainer.Margin.Width);  				if (wrappingSize > 0)  				{  					EnglishTextWrapping wrapper = new EnglishTextWrapping(12 * extraTextScaling * GuiWidget.DeviceScale);  					string wrappedMessage = wrapper.InsertCRs(unwrappedMessage' wrappingSize);  					messageContainer.Text = wrappedMessage;  				}  			}
Magic Number,MatterHackers.MatterControl,WizardControl,C:\repos\MatterHackers_MatterControl\CustomWidgets\WizardControl.cs,WizardControl,The following statement contains a magic number: if (UserSettings.Instance.IsTouchScreen)  			{  				extraTextScaling = 1.33333;  			}
Magic Number,MatterHackers.MatterControl,WizardControl,C:\repos\MatterHackers_MatterControl\CustomWidgets\WizardControl.cs,WizardControl,The following statement contains a magic number: if (UserSettings.Instance.IsTouchScreen)  			{  				topToBottom.Padding = new BorderDouble(12);  			}  			else  			{  				topToBottom.Padding = new BorderDouble(3' 0' 3' 5);  			}
Magic Number,MatterHackers.MatterControl,WizardControl,C:\repos\MatterHackers_MatterControl\CustomWidgets\WizardControl.cs,WizardControl,The following statement contains a magic number: if (UserSettings.Instance.IsTouchScreen)  			{  				topToBottom.Padding = new BorderDouble(12);  			}  			else  			{  				topToBottom.Padding = new BorderDouble(3' 0' 3' 5);  			}
Magic Number,MatterHackers.MatterControl,WizardControl,C:\repos\MatterHackers_MatterControl\CustomWidgets\WizardControl.cs,WizardControl,The following statement contains a magic number: if (UserSettings.Instance.IsTouchScreen)  			{  				topToBottom.Padding = new BorderDouble(12);  			}  			else  			{  				topToBottom.Padding = new BorderDouble(3' 0' 3' 5);  			}
Magic Number,MatterHackers.MatterControl,WizardControl,C:\repos\MatterHackers_MatterControl\CustomWidgets\WizardControl.cs,WizardControl,The following statement contains a magic number: if (UserSettings.Instance.IsTouchScreen)  			{  				topToBottom.Padding = new BorderDouble(12);  			}  			else  			{  				topToBottom.Padding = new BorderDouble(3' 0' 3' 5);  			}
Magic Number,MatterHackers.MatterControl,WizardControl,C:\repos\MatterHackers_MatterControl\CustomWidgets\WizardControl.cs,WizardControl,The following statement contains a magic number: headerRow.Margin = new BorderDouble(0' 3' 0' 0);
Magic Number,MatterHackers.MatterControl,WizardControl,C:\repos\MatterHackers_MatterControl\CustomWidgets\WizardControl.cs,WizardControl,The following statement contains a magic number: headerRow.Padding = new BorderDouble(0' 3' 0' 3);
Magic Number,MatterHackers.MatterControl,WizardControl,C:\repos\MatterHackers_MatterControl\CustomWidgets\WizardControl.cs,WizardControl,The following statement contains a magic number: headerRow.Padding = new BorderDouble(0' 3' 0' 3);
Magic Number,MatterHackers.MatterControl,WizardControl,C:\repos\MatterHackers_MatterControl\CustomWidgets\WizardControl.cs,WizardControl,The following statement contains a magic number: {  				string titleString = LocalizedString.Get("Title Stuff".Localize());  				stepDescriptionWidget = new TextWidget(titleString' pointSize: 14 * extraTextScaling);  				stepDescriptionWidget.AutoExpandBoundsToText = true;  				stepDescriptionWidget.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				stepDescriptionWidget.HAnchor = HAnchor.ParentLeftRight;  				stepDescriptionWidget.VAnchor = Agg.UI.VAnchor.ParentBottom;    				headerRow.AddChild(stepDescriptionWidget);  			}
Magic Number,MatterHackers.MatterControl,WizardControl,C:\repos\MatterHackers_MatterControl\CustomWidgets\WizardControl.cs,WizardControl,The following statement contains a magic number: textImageButtonFactory.disabledTextColor = new RGBA_Bytes(200' 200' 200);
Magic Number,MatterHackers.MatterControl,WizardControl,C:\repos\MatterHackers_MatterControl\CustomWidgets\WizardControl.cs,WizardControl,The following statement contains a magic number: textImageButtonFactory.disabledTextColor = new RGBA_Bytes(200' 200' 200);
Magic Number,MatterHackers.MatterControl,WizardControl,C:\repos\MatterHackers_MatterControl\CustomWidgets\WizardControl.cs,WizardControl,The following statement contains a magic number: textImageButtonFactory.disabledTextColor = new RGBA_Bytes(200' 200' 200);
Magic Number,MatterHackers.MatterControl,WizardControl,C:\repos\MatterHackers_MatterControl\CustomWidgets\WizardControl.cs,WizardControl,The following statement contains a magic number: bottomToTopLayout.Padding = new BorderDouble(3);
Magic Number,MatterHackers.MatterControl,WizardControl,C:\repos\MatterHackers_MatterControl\CustomWidgets\WizardControl.cs,WizardControl,The following statement contains a magic number: {  				FlowLayoutWidget buttonBar = new FlowLayoutWidget();  				buttonBar.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				buttonBar.Padding = new BorderDouble(0' 3);    				backButton = textImageButtonFactory.Generate("Back".Localize()' centerText: true);  				backButton.Click += back_Click;    				nextButton = textImageButtonFactory.Generate("Next".Localize()' centerText: true);  				nextButton.Name = "Next Button";  				nextButton.Click += next_Click;    				doneButton = textImageButtonFactory.Generate("Done".Localize()' centerText: true);  				doneButton.Name = "Done Button";  				doneButton.Click += done_Click;    				cancelButton = textImageButtonFactory.Generate("Cancel".Localize()' centerText: true);  				cancelButton.Click += done_Click;  				cancelButton.Name = "Cancel Button";    				buttonBar.AddChild(backButton);  				buttonBar.AddChild(nextButton);  				buttonBar.AddChild(new HorizontalSpacer());  				buttonBar.AddChild(doneButton);  				buttonBar.AddChild(cancelButton);    				topToBottom.AddChild(buttonBar);  			}
Magic Number,MatterHackers.MatterControl,TouchscreenView,C:\repos\MatterHackers_MatterControl\ApplicationView\MainApplicationWidget.cs,CreateAndAddChildren,The following statement contains a magic number: menuSeparator.Height = 12;
Magic Number,MatterHackers.MatterControl,TouchscreenView,C:\repos\MatterHackers_MatterControl\ApplicationView\MainApplicationWidget.cs,CreateAndAddChildren,The following statement contains a magic number: menuSeparator.MinimumSize = new Vector2(0' 12);
Magic Number,MatterHackers.MatterControl,DesktopView,C:\repos\MatterHackers_MatterControl\ApplicationView\MainApplicationWidget.cs,CreateAndAddChildren,The following statement contains a magic number: var menuSeparator = new GuiWidget()  			{  				BackgroundColor = new RGBA_Bytes(200' 200' 200)'  				Height = 2'  				HAnchor = HAnchor.ParentLeftRight'  				Margin = new BorderDouble(3' 6' 3' 3)  			};
Magic Number,MatterHackers.MatterControl,DesktopView,C:\repos\MatterHackers_MatterControl\ApplicationView\MainApplicationWidget.cs,CreateAndAddChildren,The following statement contains a magic number: var menuSeparator = new GuiWidget()  			{  				BackgroundColor = new RGBA_Bytes(200' 200' 200)'  				Height = 2'  				HAnchor = HAnchor.ParentLeftRight'  				Margin = new BorderDouble(3' 6' 3' 3)  			};
Magic Number,MatterHackers.MatterControl,DesktopView,C:\repos\MatterHackers_MatterControl\ApplicationView\MainApplicationWidget.cs,CreateAndAddChildren,The following statement contains a magic number: var menuSeparator = new GuiWidget()  			{  				BackgroundColor = new RGBA_Bytes(200' 200' 200)'  				Height = 2'  				HAnchor = HAnchor.ParentLeftRight'  				Margin = new BorderDouble(3' 6' 3' 3)  			};
Magic Number,MatterHackers.MatterControl,DesktopView,C:\repos\MatterHackers_MatterControl\ApplicationView\MainApplicationWidget.cs,CreateAndAddChildren,The following statement contains a magic number: var menuSeparator = new GuiWidget()  			{  				BackgroundColor = new RGBA_Bytes(200' 200' 200)'  				Height = 2'  				HAnchor = HAnchor.ParentLeftRight'  				Margin = new BorderDouble(3' 6' 3' 3)  			};
Magic Number,MatterHackers.MatterControl,DesktopView,C:\repos\MatterHackers_MatterControl\ApplicationView\MainApplicationWidget.cs,CreateAndAddChildren,The following statement contains a magic number: var menuSeparator = new GuiWidget()  			{  				BackgroundColor = new RGBA_Bytes(200' 200' 200)'  				Height = 2'  				HAnchor = HAnchor.ParentLeftRight'  				Margin = new BorderDouble(3' 6' 3' 3)  			};
Magic Number,MatterHackers.MatterControl,DesktopView,C:\repos\MatterHackers_MatterControl\ApplicationView\MainApplicationWidget.cs,CreateAndAddChildren,The following statement contains a magic number: var menuSeparator = new GuiWidget()  			{  				BackgroundColor = new RGBA_Bytes(200' 200' 200)'  				Height = 2'  				HAnchor = HAnchor.ParentLeftRight'  				Margin = new BorderDouble(3' 6' 3' 3)  			};
Magic Number,MatterHackers.MatterControl,DesktopView,C:\repos\MatterHackers_MatterControl\ApplicationView\MainApplicationWidget.cs,CreateAndAddChildren,The following statement contains a magic number: var menuSeparator = new GuiWidget()  			{  				BackgroundColor = new RGBA_Bytes(200' 200' 200)'  				Height = 2'  				HAnchor = HAnchor.ParentLeftRight'  				Margin = new BorderDouble(3' 6' 3' 3)  			};
Magic Number,MatterHackers.MatterControl,DesktopView,C:\repos\MatterHackers_MatterControl\ApplicationView\MainApplicationWidget.cs,CreateAndAddChildren,The following statement contains a magic number: var menuSeparator = new GuiWidget()  			{  				BackgroundColor = new RGBA_Bytes(200' 200' 200)'  				Height = 2'  				HAnchor = HAnchor.ParentLeftRight'  				Margin = new BorderDouble(3' 6' 3' 3)  			};
Magic Number,MatterHackers.MatterControl,ApplicationController,C:\repos\MatterHackers_MatterControl\ApplicationView\MainApplicationWidget.cs,OnLoadActions,The following statement contains a magic number: if (ActiveSliceSettings.Instance.PrinterSelected  				&& ActiveSliceSettings.Instance.GetValue<bool>(SettingsKey.auto_connect))  			{  				UiThread.RunOnIdle(() =>  				{  					//PrinterConnectionAndCommunication.Instance.HaltConnectionThread();  					PrinterConnectionAndCommunication.Instance.ConnectToActivePrinter();  				}' 2);  			}
Magic Number,MatterHackers.MatterControl,ApplicationController,C:\repos\MatterHackers_MatterControl\ApplicationView\MainApplicationWidget.cs,DownloadToImageAsync,The following statement contains a magic number: client.DownloadDataCompleted += (object sender' DownloadDataCompletedEventArgs e) =>  			{  				try // if we get a bad result we can get a target invocation exception. In that case just don't show anything  				{  					// scale the loaded image to the size of the target image  					byte[] raw = e.Result;  					Stream stream = new MemoryStream(raw);  					ImageBuffer unScaledImage = new ImageBuffer(10' 10);  					if (scaleToImageX)  					{  						StaticData.Instance.LoadImageData(stream' unScaledImage);  						// If the source image (the one we downloaded) is more than twice as big as our dest image.  						while (unScaledImage.Width > imageToLoadInto.Width * 2)  						{  							// The image sampler we use is a 2x2 filter so we need to scale by a max of 1/2 if we want to get good results.  							// So we scale as many times as we need to to get the Image to be the right size.  							// If this were going to be a non-uniform scale we could do the x and y separately to get better results.  							ImageBuffer halfImage = new ImageBuffer(unScaledImage.Width / 2' unScaledImage.Height / 2' 32' scalingBlender);  							halfImage.NewGraphics2D().Render(unScaledImage' 0' 0' 0' halfImage.Width / (double)unScaledImage.Width' halfImage.Height / (double)unScaledImage.Height);  							unScaledImage = halfImage;  						}  						  						double finalScale = imageToLoadInto.Width / (double)unScaledImage.Width;  						imageToLoadInto.Allocate(imageToLoadInto.Width' (int)(unScaledImage.Height * finalScale)' imageToLoadInto.Width * (imageToLoadInto.BitDepth / 8)' imageToLoadInto.BitDepth);  						imageToLoadInto.NewGraphics2D().Render(unScaledImage' 0' 0' 0' finalScale' finalScale);  					}  					else  					{  						StaticData.Instance.LoadImageData(stream' imageToLoadInto);  					}  					imageToLoadInto.MarkImageChanged();  				}  				catch  				{  				}  			};
Magic Number,MatterHackers.MatterControl,ApplicationController,C:\repos\MatterHackers_MatterControl\ApplicationView\MainApplicationWidget.cs,DownloadToImageAsync,The following statement contains a magic number: client.DownloadDataCompleted += (object sender' DownloadDataCompletedEventArgs e) =>  			{  				try // if we get a bad result we can get a target invocation exception. In that case just don't show anything  				{  					// scale the loaded image to the size of the target image  					byte[] raw = e.Result;  					Stream stream = new MemoryStream(raw);  					ImageBuffer unScaledImage = new ImageBuffer(10' 10);  					if (scaleToImageX)  					{  						StaticData.Instance.LoadImageData(stream' unScaledImage);  						// If the source image (the one we downloaded) is more than twice as big as our dest image.  						while (unScaledImage.Width > imageToLoadInto.Width * 2)  						{  							// The image sampler we use is a 2x2 filter so we need to scale by a max of 1/2 if we want to get good results.  							// So we scale as many times as we need to to get the Image to be the right size.  							// If this were going to be a non-uniform scale we could do the x and y separately to get better results.  							ImageBuffer halfImage = new ImageBuffer(unScaledImage.Width / 2' unScaledImage.Height / 2' 32' scalingBlender);  							halfImage.NewGraphics2D().Render(unScaledImage' 0' 0' 0' halfImage.Width / (double)unScaledImage.Width' halfImage.Height / (double)unScaledImage.Height);  							unScaledImage = halfImage;  						}  						  						double finalScale = imageToLoadInto.Width / (double)unScaledImage.Width;  						imageToLoadInto.Allocate(imageToLoadInto.Width' (int)(unScaledImage.Height * finalScale)' imageToLoadInto.Width * (imageToLoadInto.BitDepth / 8)' imageToLoadInto.BitDepth);  						imageToLoadInto.NewGraphics2D().Render(unScaledImage' 0' 0' 0' finalScale' finalScale);  					}  					else  					{  						StaticData.Instance.LoadImageData(stream' imageToLoadInto);  					}  					imageToLoadInto.MarkImageChanged();  				}  				catch  				{  				}  			};
Magic Number,MatterHackers.MatterControl,ApplicationController,C:\repos\MatterHackers_MatterControl\ApplicationView\MainApplicationWidget.cs,DownloadToImageAsync,The following statement contains a magic number: client.DownloadDataCompleted += (object sender' DownloadDataCompletedEventArgs e) =>  			{  				try // if we get a bad result we can get a target invocation exception. In that case just don't show anything  				{  					// scale the loaded image to the size of the target image  					byte[] raw = e.Result;  					Stream stream = new MemoryStream(raw);  					ImageBuffer unScaledImage = new ImageBuffer(10' 10);  					if (scaleToImageX)  					{  						StaticData.Instance.LoadImageData(stream' unScaledImage);  						// If the source image (the one we downloaded) is more than twice as big as our dest image.  						while (unScaledImage.Width > imageToLoadInto.Width * 2)  						{  							// The image sampler we use is a 2x2 filter so we need to scale by a max of 1/2 if we want to get good results.  							// So we scale as many times as we need to to get the Image to be the right size.  							// If this were going to be a non-uniform scale we could do the x and y separately to get better results.  							ImageBuffer halfImage = new ImageBuffer(unScaledImage.Width / 2' unScaledImage.Height / 2' 32' scalingBlender);  							halfImage.NewGraphics2D().Render(unScaledImage' 0' 0' 0' halfImage.Width / (double)unScaledImage.Width' halfImage.Height / (double)unScaledImage.Height);  							unScaledImage = halfImage;  						}  						  						double finalScale = imageToLoadInto.Width / (double)unScaledImage.Width;  						imageToLoadInto.Allocate(imageToLoadInto.Width' (int)(unScaledImage.Height * finalScale)' imageToLoadInto.Width * (imageToLoadInto.BitDepth / 8)' imageToLoadInto.BitDepth);  						imageToLoadInto.NewGraphics2D().Render(unScaledImage' 0' 0' 0' finalScale' finalScale);  					}  					else  					{  						StaticData.Instance.LoadImageData(stream' imageToLoadInto);  					}  					imageToLoadInto.MarkImageChanged();  				}  				catch  				{  				}  			};
Magic Number,MatterHackers.MatterControl,ApplicationController,C:\repos\MatterHackers_MatterControl\ApplicationView\MainApplicationWidget.cs,DownloadToImageAsync,The following statement contains a magic number: client.DownloadDataCompleted += (object sender' DownloadDataCompletedEventArgs e) =>  			{  				try // if we get a bad result we can get a target invocation exception. In that case just don't show anything  				{  					// scale the loaded image to the size of the target image  					byte[] raw = e.Result;  					Stream stream = new MemoryStream(raw);  					ImageBuffer unScaledImage = new ImageBuffer(10' 10);  					if (scaleToImageX)  					{  						StaticData.Instance.LoadImageData(stream' unScaledImage);  						// If the source image (the one we downloaded) is more than twice as big as our dest image.  						while (unScaledImage.Width > imageToLoadInto.Width * 2)  						{  							// The image sampler we use is a 2x2 filter so we need to scale by a max of 1/2 if we want to get good results.  							// So we scale as many times as we need to to get the Image to be the right size.  							// If this were going to be a non-uniform scale we could do the x and y separately to get better results.  							ImageBuffer halfImage = new ImageBuffer(unScaledImage.Width / 2' unScaledImage.Height / 2' 32' scalingBlender);  							halfImage.NewGraphics2D().Render(unScaledImage' 0' 0' 0' halfImage.Width / (double)unScaledImage.Width' halfImage.Height / (double)unScaledImage.Height);  							unScaledImage = halfImage;  						}  						  						double finalScale = imageToLoadInto.Width / (double)unScaledImage.Width;  						imageToLoadInto.Allocate(imageToLoadInto.Width' (int)(unScaledImage.Height * finalScale)' imageToLoadInto.Width * (imageToLoadInto.BitDepth / 8)' imageToLoadInto.BitDepth);  						imageToLoadInto.NewGraphics2D().Render(unScaledImage' 0' 0' 0' finalScale' finalScale);  					}  					else  					{  						StaticData.Instance.LoadImageData(stream' imageToLoadInto);  					}  					imageToLoadInto.MarkImageChanged();  				}  				catch  				{  				}  			};
Magic Number,MatterHackers.MatterControl,ApplicationController,C:\repos\MatterHackers_MatterControl\ApplicationView\MainApplicationWidget.cs,DownloadToImageAsync,The following statement contains a magic number: client.DownloadDataCompleted += (object sender' DownloadDataCompletedEventArgs e) =>  			{  				try // if we get a bad result we can get a target invocation exception. In that case just don't show anything  				{  					// scale the loaded image to the size of the target image  					byte[] raw = e.Result;  					Stream stream = new MemoryStream(raw);  					ImageBuffer unScaledImage = new ImageBuffer(10' 10);  					if (scaleToImageX)  					{  						StaticData.Instance.LoadImageData(stream' unScaledImage);  						// If the source image (the one we downloaded) is more than twice as big as our dest image.  						while (unScaledImage.Width > imageToLoadInto.Width * 2)  						{  							// The image sampler we use is a 2x2 filter so we need to scale by a max of 1/2 if we want to get good results.  							// So we scale as many times as we need to to get the Image to be the right size.  							// If this were going to be a non-uniform scale we could do the x and y separately to get better results.  							ImageBuffer halfImage = new ImageBuffer(unScaledImage.Width / 2' unScaledImage.Height / 2' 32' scalingBlender);  							halfImage.NewGraphics2D().Render(unScaledImage' 0' 0' 0' halfImage.Width / (double)unScaledImage.Width' halfImage.Height / (double)unScaledImage.Height);  							unScaledImage = halfImage;  						}  						  						double finalScale = imageToLoadInto.Width / (double)unScaledImage.Width;  						imageToLoadInto.Allocate(imageToLoadInto.Width' (int)(unScaledImage.Height * finalScale)' imageToLoadInto.Width * (imageToLoadInto.BitDepth / 8)' imageToLoadInto.BitDepth);  						imageToLoadInto.NewGraphics2D().Render(unScaledImage' 0' 0' 0' finalScale' finalScale);  					}  					else  					{  						StaticData.Instance.LoadImageData(stream' imageToLoadInto);  					}  					imageToLoadInto.MarkImageChanged();  				}  				catch  				{  				}  			};
Magic Number,MatterHackers.MatterControl,ApplicationController,C:\repos\MatterHackers_MatterControl\ApplicationView\MainApplicationWidget.cs,DownloadToImageAsync,The following statement contains a magic number: client.DownloadDataCompleted += (object sender' DownloadDataCompletedEventArgs e) =>  			{  				try // if we get a bad result we can get a target invocation exception. In that case just don't show anything  				{  					// scale the loaded image to the size of the target image  					byte[] raw = e.Result;  					Stream stream = new MemoryStream(raw);  					ImageBuffer unScaledImage = new ImageBuffer(10' 10);  					if (scaleToImageX)  					{  						StaticData.Instance.LoadImageData(stream' unScaledImage);  						// If the source image (the one we downloaded) is more than twice as big as our dest image.  						while (unScaledImage.Width > imageToLoadInto.Width * 2)  						{  							// The image sampler we use is a 2x2 filter so we need to scale by a max of 1/2 if we want to get good results.  							// So we scale as many times as we need to to get the Image to be the right size.  							// If this were going to be a non-uniform scale we could do the x and y separately to get better results.  							ImageBuffer halfImage = new ImageBuffer(unScaledImage.Width / 2' unScaledImage.Height / 2' 32' scalingBlender);  							halfImage.NewGraphics2D().Render(unScaledImage' 0' 0' 0' halfImage.Width / (double)unScaledImage.Width' halfImage.Height / (double)unScaledImage.Height);  							unScaledImage = halfImage;  						}  						  						double finalScale = imageToLoadInto.Width / (double)unScaledImage.Width;  						imageToLoadInto.Allocate(imageToLoadInto.Width' (int)(unScaledImage.Height * finalScale)' imageToLoadInto.Width * (imageToLoadInto.BitDepth / 8)' imageToLoadInto.BitDepth);  						imageToLoadInto.NewGraphics2D().Render(unScaledImage' 0' 0' 0' finalScale' finalScale);  					}  					else  					{  						StaticData.Instance.LoadImageData(stream' imageToLoadInto);  					}  					imageToLoadInto.MarkImageChanged();  				}  				catch  				{  				}  			};
Magic Number,MatterHackers.MatterControl,ApplicationController,C:\repos\MatterHackers_MatterControl\ApplicationView\MainApplicationWidget.cs,DownloadToImageAsync,The following statement contains a magic number: client.DownloadDataCompleted += (object sender' DownloadDataCompletedEventArgs e) =>  			{  				try // if we get a bad result we can get a target invocation exception. In that case just don't show anything  				{  					// scale the loaded image to the size of the target image  					byte[] raw = e.Result;  					Stream stream = new MemoryStream(raw);  					ImageBuffer unScaledImage = new ImageBuffer(10' 10);  					if (scaleToImageX)  					{  						StaticData.Instance.LoadImageData(stream' unScaledImage);  						// If the source image (the one we downloaded) is more than twice as big as our dest image.  						while (unScaledImage.Width > imageToLoadInto.Width * 2)  						{  							// The image sampler we use is a 2x2 filter so we need to scale by a max of 1/2 if we want to get good results.  							// So we scale as many times as we need to to get the Image to be the right size.  							// If this were going to be a non-uniform scale we could do the x and y separately to get better results.  							ImageBuffer halfImage = new ImageBuffer(unScaledImage.Width / 2' unScaledImage.Height / 2' 32' scalingBlender);  							halfImage.NewGraphics2D().Render(unScaledImage' 0' 0' 0' halfImage.Width / (double)unScaledImage.Width' halfImage.Height / (double)unScaledImage.Height);  							unScaledImage = halfImage;  						}  						  						double finalScale = imageToLoadInto.Width / (double)unScaledImage.Width;  						imageToLoadInto.Allocate(imageToLoadInto.Width' (int)(unScaledImage.Height * finalScale)' imageToLoadInto.Width * (imageToLoadInto.BitDepth / 8)' imageToLoadInto.BitDepth);  						imageToLoadInto.NewGraphics2D().Render(unScaledImage' 0' 0' 0' finalScale' finalScale);  					}  					else  					{  						StaticData.Instance.LoadImageData(stream' imageToLoadInto);  					}  					imageToLoadInto.MarkImageChanged();  				}  				catch  				{  				}  			};
Magic Number,MatterHackers.MatterControl,ApplicationController,C:\repos\MatterHackers_MatterControl\ApplicationView\MainApplicationWidget.cs,ConditionalCancelPrint,The following statement contains a magic number: if (PrinterConnectionAndCommunication.Instance.SecondsPrinted > 120)  			{  				StyledMessageBox.ShowMessageBox(  					(bool response) =>  					{  						if (response)  						{  							UiThread.RunOnIdle(() => PrinterConnectionAndCommunication.Instance.Stop());  							canceled = true;  						}    						canceled = false;  					}'  					"Cancel the current print?".Localize()'  					"Cancel Print?".Localize()'  					StyledMessageBox.MessageType.YES_NO'  					"Cancel Print".Localize()'  					"Continue Printing".Localize());  			}  			else  			{  				PrinterConnectionAndCommunication.Instance.Stop();  				canceled = false;  			}
Magic Number,MatterHackers.MatterControl,MHTextEditWidget,C:\repos\MatterHackers_MatterControl\ControlElements\MHTextEditWidget.cs,MHTextEditWidget,The following statement contains a magic number: Padding = new BorderDouble(3);
Magic Number,MatterHackers.MatterControl,MHNumberEdit,C:\repos\MatterHackers_MatterControl\ControlElements\MHTextEditWidget.cs,MHNumberEdit,The following statement contains a magic number: Padding = new BorderDouble(3);
Magic Number,MatterHackers.MatterControl,PartsSheet,C:\repos\MatterHackers_MatterControl\Queue\OptionsMenu\PartsSheetCreator.cs,PartsSheet,The following statement contains a magic number: SheetDpi = 300;
Magic Number,MatterHackers.MatterControl,PartsSheet,C:\repos\MatterHackers_MatterControl\Queue\OptionsMenu\PartsSheetCreator.cs,PartsSheet,The following statement contains a magic number: SheetSizeInches = new Vector2(8.5' 11);
Magic Number,MatterHackers.MatterControl,PartsSheet,C:\repos\MatterHackers_MatterControl\Queue\OptionsMenu\PartsSheetCreator.cs,PartsSheet,The following statement contains a magic number: SheetSizeInches = new Vector2(8.5' 11);
Magic Number,MatterHackers.MatterControl,PartsSheet,C:\repos\MatterHackers_MatterControl\Queue\OptionsMenu\PartsSheetCreator.cs,SavingFunction,The following statement contains a magic number: foreach (FileNameAndPresentationName queuePartFileName in queuPartFilesToAdd)  			{  				List<MeshGroup> loadedMeshGroups = null;  				if (File.Exists(queuePartFileName.fileName))  				{  					loadedMeshGroups = MeshFileIo.Load(queuePartFileName.fileName);  				}    				if (loadedMeshGroups != null)  				{  					bool firstMeshGroup = true;  					AxisAlignedBoundingBox aabb = null;  					foreach (MeshGroup meshGroup in loadedMeshGroups)  					{  						if (firstMeshGroup)  						{  							aabb = meshGroup.GetAxisAlignedBoundingBox();  							firstMeshGroup = false;  						}  						else  						{  							aabb = AxisAlignedBoundingBox.Union(aabb' meshGroup.GetAxisAlignedBoundingBox());  						}  					}  					RectangleDouble bounds2D = new RectangleDouble(aabb.minXYZ.x' aabb.minXYZ.y' aabb.maxXYZ.x' aabb.maxXYZ.y);  					double widthInMM = bounds2D.Width + PartMarginMM * 2;  					double textSpaceMM = 5;  					double heightMM = textSpaceMM + bounds2D.Height + PartMarginMM * 2;    					TypeFacePrinter typeFacePrinter = new TypeFacePrinter(queuePartFileName.presentationName' 28' Vector2.Zero' Justification.Center' Baseline.BoundsCenter);  					double sizeOfNameX = typeFacePrinter.GetSize().x + PartMarginPixels * 2;  					Vector2 sizeOfRender = new Vector2(widthInMM * PixelPerMM' heightMM * PixelPerMM);    					ImageBuffer imageOfPart = new ImageBuffer((int)(Math.Max(sizeOfNameX' sizeOfRender.x))' (int)(sizeOfRender.y));  					typeFacePrinter.Origin = new Vector2(imageOfPart.Width / 2' (textSpaceMM / 2) * PixelPerMM);    					Graphics2D partGraphics2D = imageOfPart.NewGraphics2D();    					RectangleDouble rectBounds = new RectangleDouble(0' 0' imageOfPart.Width' imageOfPart.Height);  					double strokeWidth = .5 * PixelPerMM;  					rectBounds.Inflate(-strokeWidth / 2);  					RoundedRect rect = new RoundedRect(rectBounds' PartMarginMM * PixelPerMM);  					partGraphics2D.Render(rect' RGBA_Bytes.LightGray);  					Stroke rectOutline = new Stroke(rect' strokeWidth);  					partGraphics2D.Render(rectOutline' RGBA_Bytes.DarkGray);    					foreach (MeshGroup meshGroup in loadedMeshGroups)  					{  						foreach (Mesh loadedMesh in meshGroup.Meshes)  						{  							PolygonMesh.Rendering.OrthographicZProjection.DrawTo(partGraphics2D' loadedMesh' new Vector2(-bounds2D.Left + PartMarginMM' -bounds2D.Bottom + textSpaceMM + PartMarginMM)' PixelPerMM' RGBA_Bytes.Black);  						}  					}  					partGraphics2D.Render(typeFacePrinter' RGBA_Bytes.Black);    					partImagesToPrint.Add(new PartImage(imageOfPart));    					countThatHaveBeenSaved++;  				}    				if (UpdateRemainingItems != null)  				{  					UpdateRemainingItems(this' new StringEventArgs(Path.GetFileName(queuePartFileName.presentationName)));  				}  			}
Magic Number,MatterHackers.MatterControl,PartsSheet,C:\repos\MatterHackers_MatterControl\Queue\OptionsMenu\PartsSheetCreator.cs,SavingFunction,The following statement contains a magic number: foreach (FileNameAndPresentationName queuePartFileName in queuPartFilesToAdd)  			{  				List<MeshGroup> loadedMeshGroups = null;  				if (File.Exists(queuePartFileName.fileName))  				{  					loadedMeshGroups = MeshFileIo.Load(queuePartFileName.fileName);  				}    				if (loadedMeshGroups != null)  				{  					bool firstMeshGroup = true;  					AxisAlignedBoundingBox aabb = null;  					foreach (MeshGroup meshGroup in loadedMeshGroups)  					{  						if (firstMeshGroup)  						{  							aabb = meshGroup.GetAxisAlignedBoundingBox();  							firstMeshGroup = false;  						}  						else  						{  							aabb = AxisAlignedBoundingBox.Union(aabb' meshGroup.GetAxisAlignedBoundingBox());  						}  					}  					RectangleDouble bounds2D = new RectangleDouble(aabb.minXYZ.x' aabb.minXYZ.y' aabb.maxXYZ.x' aabb.maxXYZ.y);  					double widthInMM = bounds2D.Width + PartMarginMM * 2;  					double textSpaceMM = 5;  					double heightMM = textSpaceMM + bounds2D.Height + PartMarginMM * 2;    					TypeFacePrinter typeFacePrinter = new TypeFacePrinter(queuePartFileName.presentationName' 28' Vector2.Zero' Justification.Center' Baseline.BoundsCenter);  					double sizeOfNameX = typeFacePrinter.GetSize().x + PartMarginPixels * 2;  					Vector2 sizeOfRender = new Vector2(widthInMM * PixelPerMM' heightMM * PixelPerMM);    					ImageBuffer imageOfPart = new ImageBuffer((int)(Math.Max(sizeOfNameX' sizeOfRender.x))' (int)(sizeOfRender.y));  					typeFacePrinter.Origin = new Vector2(imageOfPart.Width / 2' (textSpaceMM / 2) * PixelPerMM);    					Graphics2D partGraphics2D = imageOfPart.NewGraphics2D();    					RectangleDouble rectBounds = new RectangleDouble(0' 0' imageOfPart.Width' imageOfPart.Height);  					double strokeWidth = .5 * PixelPerMM;  					rectBounds.Inflate(-strokeWidth / 2);  					RoundedRect rect = new RoundedRect(rectBounds' PartMarginMM * PixelPerMM);  					partGraphics2D.Render(rect' RGBA_Bytes.LightGray);  					Stroke rectOutline = new Stroke(rect' strokeWidth);  					partGraphics2D.Render(rectOutline' RGBA_Bytes.DarkGray);    					foreach (MeshGroup meshGroup in loadedMeshGroups)  					{  						foreach (Mesh loadedMesh in meshGroup.Meshes)  						{  							PolygonMesh.Rendering.OrthographicZProjection.DrawTo(partGraphics2D' loadedMesh' new Vector2(-bounds2D.Left + PartMarginMM' -bounds2D.Bottom + textSpaceMM + PartMarginMM)' PixelPerMM' RGBA_Bytes.Black);  						}  					}  					partGraphics2D.Render(typeFacePrinter' RGBA_Bytes.Black);    					partImagesToPrint.Add(new PartImage(imageOfPart));    					countThatHaveBeenSaved++;  				}    				if (UpdateRemainingItems != null)  				{  					UpdateRemainingItems(this' new StringEventArgs(Path.GetFileName(queuePartFileName.presentationName)));  				}  			}
Magic Number,MatterHackers.MatterControl,PartsSheet,C:\repos\MatterHackers_MatterControl\Queue\OptionsMenu\PartsSheetCreator.cs,SavingFunction,The following statement contains a magic number: foreach (FileNameAndPresentationName queuePartFileName in queuPartFilesToAdd)  			{  				List<MeshGroup> loadedMeshGroups = null;  				if (File.Exists(queuePartFileName.fileName))  				{  					loadedMeshGroups = MeshFileIo.Load(queuePartFileName.fileName);  				}    				if (loadedMeshGroups != null)  				{  					bool firstMeshGroup = true;  					AxisAlignedBoundingBox aabb = null;  					foreach (MeshGroup meshGroup in loadedMeshGroups)  					{  						if (firstMeshGroup)  						{  							aabb = meshGroup.GetAxisAlignedBoundingBox();  							firstMeshGroup = false;  						}  						else  						{  							aabb = AxisAlignedBoundingBox.Union(aabb' meshGroup.GetAxisAlignedBoundingBox());  						}  					}  					RectangleDouble bounds2D = new RectangleDouble(aabb.minXYZ.x' aabb.minXYZ.y' aabb.maxXYZ.x' aabb.maxXYZ.y);  					double widthInMM = bounds2D.Width + PartMarginMM * 2;  					double textSpaceMM = 5;  					double heightMM = textSpaceMM + bounds2D.Height + PartMarginMM * 2;    					TypeFacePrinter typeFacePrinter = new TypeFacePrinter(queuePartFileName.presentationName' 28' Vector2.Zero' Justification.Center' Baseline.BoundsCenter);  					double sizeOfNameX = typeFacePrinter.GetSize().x + PartMarginPixels * 2;  					Vector2 sizeOfRender = new Vector2(widthInMM * PixelPerMM' heightMM * PixelPerMM);    					ImageBuffer imageOfPart = new ImageBuffer((int)(Math.Max(sizeOfNameX' sizeOfRender.x))' (int)(sizeOfRender.y));  					typeFacePrinter.Origin = new Vector2(imageOfPart.Width / 2' (textSpaceMM / 2) * PixelPerMM);    					Graphics2D partGraphics2D = imageOfPart.NewGraphics2D();    					RectangleDouble rectBounds = new RectangleDouble(0' 0' imageOfPart.Width' imageOfPart.Height);  					double strokeWidth = .5 * PixelPerMM;  					rectBounds.Inflate(-strokeWidth / 2);  					RoundedRect rect = new RoundedRect(rectBounds' PartMarginMM * PixelPerMM);  					partGraphics2D.Render(rect' RGBA_Bytes.LightGray);  					Stroke rectOutline = new Stroke(rect' strokeWidth);  					partGraphics2D.Render(rectOutline' RGBA_Bytes.DarkGray);    					foreach (MeshGroup meshGroup in loadedMeshGroups)  					{  						foreach (Mesh loadedMesh in meshGroup.Meshes)  						{  							PolygonMesh.Rendering.OrthographicZProjection.DrawTo(partGraphics2D' loadedMesh' new Vector2(-bounds2D.Left + PartMarginMM' -bounds2D.Bottom + textSpaceMM + PartMarginMM)' PixelPerMM' RGBA_Bytes.Black);  						}  					}  					partGraphics2D.Render(typeFacePrinter' RGBA_Bytes.Black);    					partImagesToPrint.Add(new PartImage(imageOfPart));    					countThatHaveBeenSaved++;  				}    				if (UpdateRemainingItems != null)  				{  					UpdateRemainingItems(this' new StringEventArgs(Path.GetFileName(queuePartFileName.presentationName)));  				}  			}
Magic Number,MatterHackers.MatterControl,PartsSheet,C:\repos\MatterHackers_MatterControl\Queue\OptionsMenu\PartsSheetCreator.cs,SavingFunction,The following statement contains a magic number: foreach (FileNameAndPresentationName queuePartFileName in queuPartFilesToAdd)  			{  				List<MeshGroup> loadedMeshGroups = null;  				if (File.Exists(queuePartFileName.fileName))  				{  					loadedMeshGroups = MeshFileIo.Load(queuePartFileName.fileName);  				}    				if (loadedMeshGroups != null)  				{  					bool firstMeshGroup = true;  					AxisAlignedBoundingBox aabb = null;  					foreach (MeshGroup meshGroup in loadedMeshGroups)  					{  						if (firstMeshGroup)  						{  							aabb = meshGroup.GetAxisAlignedBoundingBox();  							firstMeshGroup = false;  						}  						else  						{  							aabb = AxisAlignedBoundingBox.Union(aabb' meshGroup.GetAxisAlignedBoundingBox());  						}  					}  					RectangleDouble bounds2D = new RectangleDouble(aabb.minXYZ.x' aabb.minXYZ.y' aabb.maxXYZ.x' aabb.maxXYZ.y);  					double widthInMM = bounds2D.Width + PartMarginMM * 2;  					double textSpaceMM = 5;  					double heightMM = textSpaceMM + bounds2D.Height + PartMarginMM * 2;    					TypeFacePrinter typeFacePrinter = new TypeFacePrinter(queuePartFileName.presentationName' 28' Vector2.Zero' Justification.Center' Baseline.BoundsCenter);  					double sizeOfNameX = typeFacePrinter.GetSize().x + PartMarginPixels * 2;  					Vector2 sizeOfRender = new Vector2(widthInMM * PixelPerMM' heightMM * PixelPerMM);    					ImageBuffer imageOfPart = new ImageBuffer((int)(Math.Max(sizeOfNameX' sizeOfRender.x))' (int)(sizeOfRender.y));  					typeFacePrinter.Origin = new Vector2(imageOfPart.Width / 2' (textSpaceMM / 2) * PixelPerMM);    					Graphics2D partGraphics2D = imageOfPart.NewGraphics2D();    					RectangleDouble rectBounds = new RectangleDouble(0' 0' imageOfPart.Width' imageOfPart.Height);  					double strokeWidth = .5 * PixelPerMM;  					rectBounds.Inflate(-strokeWidth / 2);  					RoundedRect rect = new RoundedRect(rectBounds' PartMarginMM * PixelPerMM);  					partGraphics2D.Render(rect' RGBA_Bytes.LightGray);  					Stroke rectOutline = new Stroke(rect' strokeWidth);  					partGraphics2D.Render(rectOutline' RGBA_Bytes.DarkGray);    					foreach (MeshGroup meshGroup in loadedMeshGroups)  					{  						foreach (Mesh loadedMesh in meshGroup.Meshes)  						{  							PolygonMesh.Rendering.OrthographicZProjection.DrawTo(partGraphics2D' loadedMesh' new Vector2(-bounds2D.Left + PartMarginMM' -bounds2D.Bottom + textSpaceMM + PartMarginMM)' PixelPerMM' RGBA_Bytes.Black);  						}  					}  					partGraphics2D.Render(typeFacePrinter' RGBA_Bytes.Black);    					partImagesToPrint.Add(new PartImage(imageOfPart));    					countThatHaveBeenSaved++;  				}    				if (UpdateRemainingItems != null)  				{  					UpdateRemainingItems(this' new StringEventArgs(Path.GetFileName(queuePartFileName.presentationName)));  				}  			}
Magic Number,MatterHackers.MatterControl,PartsSheet,C:\repos\MatterHackers_MatterControl\Queue\OptionsMenu\PartsSheetCreator.cs,SavingFunction,The following statement contains a magic number: foreach (FileNameAndPresentationName queuePartFileName in queuPartFilesToAdd)  			{  				List<MeshGroup> loadedMeshGroups = null;  				if (File.Exists(queuePartFileName.fileName))  				{  					loadedMeshGroups = MeshFileIo.Load(queuePartFileName.fileName);  				}    				if (loadedMeshGroups != null)  				{  					bool firstMeshGroup = true;  					AxisAlignedBoundingBox aabb = null;  					foreach (MeshGroup meshGroup in loadedMeshGroups)  					{  						if (firstMeshGroup)  						{  							aabb = meshGroup.GetAxisAlignedBoundingBox();  							firstMeshGroup = false;  						}  						else  						{  							aabb = AxisAlignedBoundingBox.Union(aabb' meshGroup.GetAxisAlignedBoundingBox());  						}  					}  					RectangleDouble bounds2D = new RectangleDouble(aabb.minXYZ.x' aabb.minXYZ.y' aabb.maxXYZ.x' aabb.maxXYZ.y);  					double widthInMM = bounds2D.Width + PartMarginMM * 2;  					double textSpaceMM = 5;  					double heightMM = textSpaceMM + bounds2D.Height + PartMarginMM * 2;    					TypeFacePrinter typeFacePrinter = new TypeFacePrinter(queuePartFileName.presentationName' 28' Vector2.Zero' Justification.Center' Baseline.BoundsCenter);  					double sizeOfNameX = typeFacePrinter.GetSize().x + PartMarginPixels * 2;  					Vector2 sizeOfRender = new Vector2(widthInMM * PixelPerMM' heightMM * PixelPerMM);    					ImageBuffer imageOfPart = new ImageBuffer((int)(Math.Max(sizeOfNameX' sizeOfRender.x))' (int)(sizeOfRender.y));  					typeFacePrinter.Origin = new Vector2(imageOfPart.Width / 2' (textSpaceMM / 2) * PixelPerMM);    					Graphics2D partGraphics2D = imageOfPart.NewGraphics2D();    					RectangleDouble rectBounds = new RectangleDouble(0' 0' imageOfPart.Width' imageOfPart.Height);  					double strokeWidth = .5 * PixelPerMM;  					rectBounds.Inflate(-strokeWidth / 2);  					RoundedRect rect = new RoundedRect(rectBounds' PartMarginMM * PixelPerMM);  					partGraphics2D.Render(rect' RGBA_Bytes.LightGray);  					Stroke rectOutline = new Stroke(rect' strokeWidth);  					partGraphics2D.Render(rectOutline' RGBA_Bytes.DarkGray);    					foreach (MeshGroup meshGroup in loadedMeshGroups)  					{  						foreach (Mesh loadedMesh in meshGroup.Meshes)  						{  							PolygonMesh.Rendering.OrthographicZProjection.DrawTo(partGraphics2D' loadedMesh' new Vector2(-bounds2D.Left + PartMarginMM' -bounds2D.Bottom + textSpaceMM + PartMarginMM)' PixelPerMM' RGBA_Bytes.Black);  						}  					}  					partGraphics2D.Render(typeFacePrinter' RGBA_Bytes.Black);    					partImagesToPrint.Add(new PartImage(imageOfPart));    					countThatHaveBeenSaved++;  				}    				if (UpdateRemainingItems != null)  				{  					UpdateRemainingItems(this' new StringEventArgs(Path.GetFileName(queuePartFileName.presentationName)));  				}  			}
Magic Number,MatterHackers.MatterControl,PartsSheet,C:\repos\MatterHackers_MatterControl\Queue\OptionsMenu\PartsSheetCreator.cs,SavingFunction,The following statement contains a magic number: foreach (FileNameAndPresentationName queuePartFileName in queuPartFilesToAdd)  			{  				List<MeshGroup> loadedMeshGroups = null;  				if (File.Exists(queuePartFileName.fileName))  				{  					loadedMeshGroups = MeshFileIo.Load(queuePartFileName.fileName);  				}    				if (loadedMeshGroups != null)  				{  					bool firstMeshGroup = true;  					AxisAlignedBoundingBox aabb = null;  					foreach (MeshGroup meshGroup in loadedMeshGroups)  					{  						if (firstMeshGroup)  						{  							aabb = meshGroup.GetAxisAlignedBoundingBox();  							firstMeshGroup = false;  						}  						else  						{  							aabb = AxisAlignedBoundingBox.Union(aabb' meshGroup.GetAxisAlignedBoundingBox());  						}  					}  					RectangleDouble bounds2D = new RectangleDouble(aabb.minXYZ.x' aabb.minXYZ.y' aabb.maxXYZ.x' aabb.maxXYZ.y);  					double widthInMM = bounds2D.Width + PartMarginMM * 2;  					double textSpaceMM = 5;  					double heightMM = textSpaceMM + bounds2D.Height + PartMarginMM * 2;    					TypeFacePrinter typeFacePrinter = new TypeFacePrinter(queuePartFileName.presentationName' 28' Vector2.Zero' Justification.Center' Baseline.BoundsCenter);  					double sizeOfNameX = typeFacePrinter.GetSize().x + PartMarginPixels * 2;  					Vector2 sizeOfRender = new Vector2(widthInMM * PixelPerMM' heightMM * PixelPerMM);    					ImageBuffer imageOfPart = new ImageBuffer((int)(Math.Max(sizeOfNameX' sizeOfRender.x))' (int)(sizeOfRender.y));  					typeFacePrinter.Origin = new Vector2(imageOfPart.Width / 2' (textSpaceMM / 2) * PixelPerMM);    					Graphics2D partGraphics2D = imageOfPart.NewGraphics2D();    					RectangleDouble rectBounds = new RectangleDouble(0' 0' imageOfPart.Width' imageOfPart.Height);  					double strokeWidth = .5 * PixelPerMM;  					rectBounds.Inflate(-strokeWidth / 2);  					RoundedRect rect = new RoundedRect(rectBounds' PartMarginMM * PixelPerMM);  					partGraphics2D.Render(rect' RGBA_Bytes.LightGray);  					Stroke rectOutline = new Stroke(rect' strokeWidth);  					partGraphics2D.Render(rectOutline' RGBA_Bytes.DarkGray);    					foreach (MeshGroup meshGroup in loadedMeshGroups)  					{  						foreach (Mesh loadedMesh in meshGroup.Meshes)  						{  							PolygonMesh.Rendering.OrthographicZProjection.DrawTo(partGraphics2D' loadedMesh' new Vector2(-bounds2D.Left + PartMarginMM' -bounds2D.Bottom + textSpaceMM + PartMarginMM)' PixelPerMM' RGBA_Bytes.Black);  						}  					}  					partGraphics2D.Render(typeFacePrinter' RGBA_Bytes.Black);    					partImagesToPrint.Add(new PartImage(imageOfPart));    					countThatHaveBeenSaved++;  				}    				if (UpdateRemainingItems != null)  				{  					UpdateRemainingItems(this' new StringEventArgs(Path.GetFileName(queuePartFileName.presentationName)));  				}  			}
Magic Number,MatterHackers.MatterControl,PartsSheet,C:\repos\MatterHackers_MatterControl\Queue\OptionsMenu\PartsSheetCreator.cs,SavingFunction,The following statement contains a magic number: foreach (FileNameAndPresentationName queuePartFileName in queuPartFilesToAdd)  			{  				List<MeshGroup> loadedMeshGroups = null;  				if (File.Exists(queuePartFileName.fileName))  				{  					loadedMeshGroups = MeshFileIo.Load(queuePartFileName.fileName);  				}    				if (loadedMeshGroups != null)  				{  					bool firstMeshGroup = true;  					AxisAlignedBoundingBox aabb = null;  					foreach (MeshGroup meshGroup in loadedMeshGroups)  					{  						if (firstMeshGroup)  						{  							aabb = meshGroup.GetAxisAlignedBoundingBox();  							firstMeshGroup = false;  						}  						else  						{  							aabb = AxisAlignedBoundingBox.Union(aabb' meshGroup.GetAxisAlignedBoundingBox());  						}  					}  					RectangleDouble bounds2D = new RectangleDouble(aabb.minXYZ.x' aabb.minXYZ.y' aabb.maxXYZ.x' aabb.maxXYZ.y);  					double widthInMM = bounds2D.Width + PartMarginMM * 2;  					double textSpaceMM = 5;  					double heightMM = textSpaceMM + bounds2D.Height + PartMarginMM * 2;    					TypeFacePrinter typeFacePrinter = new TypeFacePrinter(queuePartFileName.presentationName' 28' Vector2.Zero' Justification.Center' Baseline.BoundsCenter);  					double sizeOfNameX = typeFacePrinter.GetSize().x + PartMarginPixels * 2;  					Vector2 sizeOfRender = new Vector2(widthInMM * PixelPerMM' heightMM * PixelPerMM);    					ImageBuffer imageOfPart = new ImageBuffer((int)(Math.Max(sizeOfNameX' sizeOfRender.x))' (int)(sizeOfRender.y));  					typeFacePrinter.Origin = new Vector2(imageOfPart.Width / 2' (textSpaceMM / 2) * PixelPerMM);    					Graphics2D partGraphics2D = imageOfPart.NewGraphics2D();    					RectangleDouble rectBounds = new RectangleDouble(0' 0' imageOfPart.Width' imageOfPart.Height);  					double strokeWidth = .5 * PixelPerMM;  					rectBounds.Inflate(-strokeWidth / 2);  					RoundedRect rect = new RoundedRect(rectBounds' PartMarginMM * PixelPerMM);  					partGraphics2D.Render(rect' RGBA_Bytes.LightGray);  					Stroke rectOutline = new Stroke(rect' strokeWidth);  					partGraphics2D.Render(rectOutline' RGBA_Bytes.DarkGray);    					foreach (MeshGroup meshGroup in loadedMeshGroups)  					{  						foreach (Mesh loadedMesh in meshGroup.Meshes)  						{  							PolygonMesh.Rendering.OrthographicZProjection.DrawTo(partGraphics2D' loadedMesh' new Vector2(-bounds2D.Left + PartMarginMM' -bounds2D.Bottom + textSpaceMM + PartMarginMM)' PixelPerMM' RGBA_Bytes.Black);  						}  					}  					partGraphics2D.Render(typeFacePrinter' RGBA_Bytes.Black);    					partImagesToPrint.Add(new PartImage(imageOfPart));    					countThatHaveBeenSaved++;  				}    				if (UpdateRemainingItems != null)  				{  					UpdateRemainingItems(this' new StringEventArgs(Path.GetFileName(queuePartFileName.presentationName)));  				}  			}
Magic Number,MatterHackers.MatterControl,PartsSheet,C:\repos\MatterHackers_MatterControl\Queue\OptionsMenu\PartsSheetCreator.cs,SavingFunction,The following statement contains a magic number: foreach (FileNameAndPresentationName queuePartFileName in queuPartFilesToAdd)  			{  				List<MeshGroup> loadedMeshGroups = null;  				if (File.Exists(queuePartFileName.fileName))  				{  					loadedMeshGroups = MeshFileIo.Load(queuePartFileName.fileName);  				}    				if (loadedMeshGroups != null)  				{  					bool firstMeshGroup = true;  					AxisAlignedBoundingBox aabb = null;  					foreach (MeshGroup meshGroup in loadedMeshGroups)  					{  						if (firstMeshGroup)  						{  							aabb = meshGroup.GetAxisAlignedBoundingBox();  							firstMeshGroup = false;  						}  						else  						{  							aabb = AxisAlignedBoundingBox.Union(aabb' meshGroup.GetAxisAlignedBoundingBox());  						}  					}  					RectangleDouble bounds2D = new RectangleDouble(aabb.minXYZ.x' aabb.minXYZ.y' aabb.maxXYZ.x' aabb.maxXYZ.y);  					double widthInMM = bounds2D.Width + PartMarginMM * 2;  					double textSpaceMM = 5;  					double heightMM = textSpaceMM + bounds2D.Height + PartMarginMM * 2;    					TypeFacePrinter typeFacePrinter = new TypeFacePrinter(queuePartFileName.presentationName' 28' Vector2.Zero' Justification.Center' Baseline.BoundsCenter);  					double sizeOfNameX = typeFacePrinter.GetSize().x + PartMarginPixels * 2;  					Vector2 sizeOfRender = new Vector2(widthInMM * PixelPerMM' heightMM * PixelPerMM);    					ImageBuffer imageOfPart = new ImageBuffer((int)(Math.Max(sizeOfNameX' sizeOfRender.x))' (int)(sizeOfRender.y));  					typeFacePrinter.Origin = new Vector2(imageOfPart.Width / 2' (textSpaceMM / 2) * PixelPerMM);    					Graphics2D partGraphics2D = imageOfPart.NewGraphics2D();    					RectangleDouble rectBounds = new RectangleDouble(0' 0' imageOfPart.Width' imageOfPart.Height);  					double strokeWidth = .5 * PixelPerMM;  					rectBounds.Inflate(-strokeWidth / 2);  					RoundedRect rect = new RoundedRect(rectBounds' PartMarginMM * PixelPerMM);  					partGraphics2D.Render(rect' RGBA_Bytes.LightGray);  					Stroke rectOutline = new Stroke(rect' strokeWidth);  					partGraphics2D.Render(rectOutline' RGBA_Bytes.DarkGray);    					foreach (MeshGroup meshGroup in loadedMeshGroups)  					{  						foreach (Mesh loadedMesh in meshGroup.Meshes)  						{  							PolygonMesh.Rendering.OrthographicZProjection.DrawTo(partGraphics2D' loadedMesh' new Vector2(-bounds2D.Left + PartMarginMM' -bounds2D.Bottom + textSpaceMM + PartMarginMM)' PixelPerMM' RGBA_Bytes.Black);  						}  					}  					partGraphics2D.Render(typeFacePrinter' RGBA_Bytes.Black);    					partImagesToPrint.Add(new PartImage(imageOfPart));    					countThatHaveBeenSaved++;  				}    				if (UpdateRemainingItems != null)  				{  					UpdateRemainingItems(this' new StringEventArgs(Path.GetFileName(queuePartFileName.presentationName)));  				}  			}
Magic Number,MatterHackers.MatterControl,PartsSheet,C:\repos\MatterHackers_MatterControl\Queue\OptionsMenu\PartsSheetCreator.cs,SavingFunction,The following statement contains a magic number: foreach (FileNameAndPresentationName queuePartFileName in queuPartFilesToAdd)  			{  				List<MeshGroup> loadedMeshGroups = null;  				if (File.Exists(queuePartFileName.fileName))  				{  					loadedMeshGroups = MeshFileIo.Load(queuePartFileName.fileName);  				}    				if (loadedMeshGroups != null)  				{  					bool firstMeshGroup = true;  					AxisAlignedBoundingBox aabb = null;  					foreach (MeshGroup meshGroup in loadedMeshGroups)  					{  						if (firstMeshGroup)  						{  							aabb = meshGroup.GetAxisAlignedBoundingBox();  							firstMeshGroup = false;  						}  						else  						{  							aabb = AxisAlignedBoundingBox.Union(aabb' meshGroup.GetAxisAlignedBoundingBox());  						}  					}  					RectangleDouble bounds2D = new RectangleDouble(aabb.minXYZ.x' aabb.minXYZ.y' aabb.maxXYZ.x' aabb.maxXYZ.y);  					double widthInMM = bounds2D.Width + PartMarginMM * 2;  					double textSpaceMM = 5;  					double heightMM = textSpaceMM + bounds2D.Height + PartMarginMM * 2;    					TypeFacePrinter typeFacePrinter = new TypeFacePrinter(queuePartFileName.presentationName' 28' Vector2.Zero' Justification.Center' Baseline.BoundsCenter);  					double sizeOfNameX = typeFacePrinter.GetSize().x + PartMarginPixels * 2;  					Vector2 sizeOfRender = new Vector2(widthInMM * PixelPerMM' heightMM * PixelPerMM);    					ImageBuffer imageOfPart = new ImageBuffer((int)(Math.Max(sizeOfNameX' sizeOfRender.x))' (int)(sizeOfRender.y));  					typeFacePrinter.Origin = new Vector2(imageOfPart.Width / 2' (textSpaceMM / 2) * PixelPerMM);    					Graphics2D partGraphics2D = imageOfPart.NewGraphics2D();    					RectangleDouble rectBounds = new RectangleDouble(0' 0' imageOfPart.Width' imageOfPart.Height);  					double strokeWidth = .5 * PixelPerMM;  					rectBounds.Inflate(-strokeWidth / 2);  					RoundedRect rect = new RoundedRect(rectBounds' PartMarginMM * PixelPerMM);  					partGraphics2D.Render(rect' RGBA_Bytes.LightGray);  					Stroke rectOutline = new Stroke(rect' strokeWidth);  					partGraphics2D.Render(rectOutline' RGBA_Bytes.DarkGray);    					foreach (MeshGroup meshGroup in loadedMeshGroups)  					{  						foreach (Mesh loadedMesh in meshGroup.Meshes)  						{  							PolygonMesh.Rendering.OrthographicZProjection.DrawTo(partGraphics2D' loadedMesh' new Vector2(-bounds2D.Left + PartMarginMM' -bounds2D.Bottom + textSpaceMM + PartMarginMM)' PixelPerMM' RGBA_Bytes.Black);  						}  					}  					partGraphics2D.Render(typeFacePrinter' RGBA_Bytes.Black);    					partImagesToPrint.Add(new PartImage(imageOfPart));    					countThatHaveBeenSaved++;  				}    				if (UpdateRemainingItems != null)  				{  					UpdateRemainingItems(this' new StringEventArgs(Path.GetFileName(queuePartFileName.presentationName)));  				}  			}
Magic Number,MatterHackers.MatterControl,PartsSheet,C:\repos\MatterHackers_MatterControl\Queue\OptionsMenu\PartsSheetCreator.cs,CreateOnePage,The following statement contains a magic number: ImageBuffer plateInventoryImage = new ImageBuffer((int)(300 * 8.5)' 300 * 11);
Magic Number,MatterHackers.MatterControl,PartsSheet,C:\repos\MatterHackers_MatterControl\Queue\OptionsMenu\PartsSheetCreator.cs,CreateOnePage,The following statement contains a magic number: ImageBuffer plateInventoryImage = new ImageBuffer((int)(300 * 8.5)' 300 * 11);
Magic Number,MatterHackers.MatterControl,PartsSheet,C:\repos\MatterHackers_MatterControl\Queue\OptionsMenu\PartsSheetCreator.cs,CreateOnePage,The following statement contains a magic number: ImageBuffer plateInventoryImage = new ImageBuffer((int)(300 * 8.5)' 300 * 11);
Magic Number,MatterHackers.MatterControl,PartsSheet,C:\repos\MatterHackers_MatterControl\Queue\OptionsMenu\PartsSheetCreator.cs,CreateOnePage,The following statement contains a magic number: ImageBuffer plateInventoryImage = new ImageBuffer((int)(300 * 8.5)' 300 * 11);
Magic Number,MatterHackers.MatterControl,PartsSheet,C:\repos\MatterHackers_MatterControl\Queue\OptionsMenu\PartsSheetCreator.cs,CreateOnePage,The following statement contains a magic number: while (nextPartToPrintIndex < partImagesToPrint.Count)  			{  				ImageBuffer image = partImagesToPrint[nextPartToPrintIndex].image;  				tallestHeight = Math.Max(tallestHeight' image.Height);    				if (partsOnLine.Count > 0 && offset.x + image.Width > plateInventoryImage.Width - PageMarginPixels.Right)  				{  					if (partsOnLine.Count == 1)  					{  						plateGraphics.Render(partsOnLine[0].image' plateInventoryImage.Width / 2 - partsOnLine[0].image.Width / 2' offset.y - tallestHeight);  					}  					else  					{  						foreach (PartImage partToDraw in partsOnLine)  						{  							plateGraphics.Render(partToDraw.image' partToDraw.xOffset' offset.y - tallestHeight);  						}  					}    					offset.x = PageMarginPixels.Left;  					offset.y -= (tallestHeight + PartPaddingPixels * 2);  					tallestHeight = 0;  					partsOnLine.Clear();  					if (offset.y - image.Height < PageMarginPixels.Bottom)  					{  						break;  					}  				}  				else  				{  					partImagesToPrint[nextPartToPrintIndex].xOffset = offset.x;  					partsOnLine.Add(partImagesToPrint[nextPartToPrintIndex]);  					//plateGraphics.Render(image' offset.x' offset.y - image.Height);  					offset.x += image.Width + PartPaddingPixels * 2;  					nextPartToPrintIndex++;  				}  			}
Magic Number,MatterHackers.MatterControl,PartsSheet,C:\repos\MatterHackers_MatterControl\Queue\OptionsMenu\PartsSheetCreator.cs,CreateOnePage,The following statement contains a magic number: while (nextPartToPrintIndex < partImagesToPrint.Count)  			{  				ImageBuffer image = partImagesToPrint[nextPartToPrintIndex].image;  				tallestHeight = Math.Max(tallestHeight' image.Height);    				if (partsOnLine.Count > 0 && offset.x + image.Width > plateInventoryImage.Width - PageMarginPixels.Right)  				{  					if (partsOnLine.Count == 1)  					{  						plateGraphics.Render(partsOnLine[0].image' plateInventoryImage.Width / 2 - partsOnLine[0].image.Width / 2' offset.y - tallestHeight);  					}  					else  					{  						foreach (PartImage partToDraw in partsOnLine)  						{  							plateGraphics.Render(partToDraw.image' partToDraw.xOffset' offset.y - tallestHeight);  						}  					}    					offset.x = PageMarginPixels.Left;  					offset.y -= (tallestHeight + PartPaddingPixels * 2);  					tallestHeight = 0;  					partsOnLine.Clear();  					if (offset.y - image.Height < PageMarginPixels.Bottom)  					{  						break;  					}  				}  				else  				{  					partImagesToPrint[nextPartToPrintIndex].xOffset = offset.x;  					partsOnLine.Add(partImagesToPrint[nextPartToPrintIndex]);  					//plateGraphics.Render(image' offset.x' offset.y - image.Height);  					offset.x += image.Width + PartPaddingPixels * 2;  					nextPartToPrintIndex++;  				}  			}
Magic Number,MatterHackers.MatterControl,PartsSheet,C:\repos\MatterHackers_MatterControl\Queue\OptionsMenu\PartsSheetCreator.cs,CreateOnePage,The following statement contains a magic number: while (nextPartToPrintIndex < partImagesToPrint.Count)  			{  				ImageBuffer image = partImagesToPrint[nextPartToPrintIndex].image;  				tallestHeight = Math.Max(tallestHeight' image.Height);    				if (partsOnLine.Count > 0 && offset.x + image.Width > plateInventoryImage.Width - PageMarginPixels.Right)  				{  					if (partsOnLine.Count == 1)  					{  						plateGraphics.Render(partsOnLine[0].image' plateInventoryImage.Width / 2 - partsOnLine[0].image.Width / 2' offset.y - tallestHeight);  					}  					else  					{  						foreach (PartImage partToDraw in partsOnLine)  						{  							plateGraphics.Render(partToDraw.image' partToDraw.xOffset' offset.y - tallestHeight);  						}  					}    					offset.x = PageMarginPixels.Left;  					offset.y -= (tallestHeight + PartPaddingPixels * 2);  					tallestHeight = 0;  					partsOnLine.Clear();  					if (offset.y - image.Height < PageMarginPixels.Bottom)  					{  						break;  					}  				}  				else  				{  					partImagesToPrint[nextPartToPrintIndex].xOffset = offset.x;  					partsOnLine.Add(partImagesToPrint[nextPartToPrintIndex]);  					//plateGraphics.Render(image' offset.x' offset.y - image.Height);  					offset.x += image.Width + PartPaddingPixels * 2;  					nextPartToPrintIndex++;  				}  			}
Magic Number,MatterHackers.MatterControl,PartsSheet,C:\repos\MatterHackers_MatterControl\Queue\OptionsMenu\PartsSheetCreator.cs,CreateOnePage,The following statement contains a magic number: while (nextPartToPrintIndex < partImagesToPrint.Count)  			{  				ImageBuffer image = partImagesToPrint[nextPartToPrintIndex].image;  				tallestHeight = Math.Max(tallestHeight' image.Height);    				if (partsOnLine.Count > 0 && offset.x + image.Width > plateInventoryImage.Width - PageMarginPixels.Right)  				{  					if (partsOnLine.Count == 1)  					{  						plateGraphics.Render(partsOnLine[0].image' plateInventoryImage.Width / 2 - partsOnLine[0].image.Width / 2' offset.y - tallestHeight);  					}  					else  					{  						foreach (PartImage partToDraw in partsOnLine)  						{  							plateGraphics.Render(partToDraw.image' partToDraw.xOffset' offset.y - tallestHeight);  						}  					}    					offset.x = PageMarginPixels.Left;  					offset.y -= (tallestHeight + PartPaddingPixels * 2);  					tallestHeight = 0;  					partsOnLine.Clear();  					if (offset.y - image.Height < PageMarginPixels.Bottom)  					{  						break;  					}  				}  				else  				{  					partImagesToPrint[nextPartToPrintIndex].xOffset = offset.x;  					partsOnLine.Add(partImagesToPrint[nextPartToPrintIndex]);  					//plateGraphics.Render(image' offset.x' offset.y - image.Height);  					offset.x += image.Width + PartPaddingPixels * 2;  					nextPartToPrintIndex++;  				}  			}
Magic Number,MatterHackers.MatterControl,PartsSheet,C:\repos\MatterHackers_MatterControl\Queue\OptionsMenu\PartsSheetCreator.cs,CreateOnePage,The following statement contains a magic number: TypeFacePrinter printer = new TypeFacePrinter(string.Format("{0}"' Path.GetFileNameWithoutExtension(pathAndFileToSaveTo))' 32' justification: Justification.Center);
Magic Number,MatterHackers.MatterControl,PartsSheet,C:\repos\MatterHackers_MatterControl\Queue\OptionsMenu\PartsSheetCreator.cs,CreateOnePage,The following statement contains a magic number: printer.Origin = new Vector2(plateGraphics.DestImage.Width / 2' 110);
Magic Number,MatterHackers.MatterControl,PartsSheet,C:\repos\MatterHackers_MatterControl\Queue\OptionsMenu\PartsSheetCreator.cs,CreateOnePage,The following statement contains a magic number: printer.Origin = new Vector2(plateGraphics.DestImage.Width / 2' 110);
Magic Number,MatterHackers.MatterControl,PartsSheet,C:\repos\MatterHackers_MatterControl\Queue\OptionsMenu\PartsSheetCreator.cs,CreateOnePage,The following statement contains a magic number: printer = new TypeFacePrinter(string.Format("Page {0}"' plateNumber)' 28' justification: Justification.Center);
Magic Number,MatterHackers.MatterControl,PartsSheet,C:\repos\MatterHackers_MatterControl\Queue\OptionsMenu\PartsSheetCreator.cs,CreateOnePage,The following statement contains a magic number: printer.Origin = new Vector2(plateGraphics.DestImage.Width / 2' 60);
Magic Number,MatterHackers.MatterControl,PartsSheet,C:\repos\MatterHackers_MatterControl\Queue\OptionsMenu\PartsSheetCreator.cs,CreateOnePage,The following statement contains a magic number: printer.Origin = new Vector2(plateGraphics.DestImage.Width / 2' 60);
Magic Number,MatterHackers.MatterControl,PartsSheet,C:\repos\MatterHackers_MatterControl\Queue\OptionsMenu\PartsSheetCreator.cs,PrintTopOfPage,The following statement contains a magic number: if (StaticData.Instance.FileExists(logoPathAndFile))  			{  				ImageBuffer logoImage = StaticData.Instance.LoadImage(logoPathAndFile);  				currentlyPrintingHeightPixels -= logoImage.Height;  				plateGraphics.Render(logoImage' (plateInventoryImage.Width - logoImage.Width) / 2' currentlyPrintingHeightPixels);  			}
Magic Number,MatterHackers.MatterControl,PartsSheet,C:\repos\MatterHackers_MatterControl\Queue\OptionsMenu\PartsSheetCreator.cs,PrintTopOfPage,The following statement contains a magic number: RectangleDouble lineBounds = new RectangleDouble(0' 0' plateInventoryImage.Width - PageMarginPixels.Left * 2' underlineHeightMM * PixelPerMM);
Magic Number,MatterHackers.MatterControl,PrintLevelingPlane,C:\repos\MatterHackers_MatterControl\PrinterControls\PrintLevelingPlane.cs,ApplyLeveling,The following statement contains a magic number: if ((lineBeingSent.StartsWith("G0") || lineBeingSent.StartsWith("G1"))  				&& lineBeingSent.Length > 2  				&& lineBeingSent[2] == ' ')  			{  				double extruderDelta = 0;  				GCodeFile.GetFirstNumberAfter("E"' lineBeingSent' ref extruderDelta);  				double feedRate = 0;  				GCodeFile.GetFirstNumberAfter("F"' lineBeingSent' ref feedRate);    				string newLine = "G1 ";    				if (lineBeingSent.Contains("X") || lineBeingSent.Contains("Y") || lineBeingSent.Contains("Z"))  				{  					Vector3 outPosition = PrintLevelingPlane.Instance.ApplyLeveling(currentDestination);  					if (movementMode == PrinterMachineInstruction.MovementTypes.Relative)  					{  						Vector3 relativeMove = Vector3.Zero;  						GCodeFile.GetFirstNumberAfter("X"' lineBeingSent' ref relativeMove.x);  						GCodeFile.GetFirstNumberAfter("Y"' lineBeingSent' ref relativeMove.y);  						GCodeFile.GetFirstNumberAfter("Z"' lineBeingSent' ref relativeMove.z);  						outPosition = PrintLevelingPlane.Instance.ApplyLevelingRotation(relativeMove);  					}    					newLine = newLine + String.Format("X{0:0.##} Y{1:0.##} Z{2:0.###}"' outPosition.x' outPosition.y' outPosition.z);  				}    				if (extruderDelta != 0)  				{  					newLine = newLine + String.Format(" E{0:0.###}"' extruderDelta);  				}  				if (feedRate != 0)  				{  					newLine = newLine + String.Format(" F{0:0.##}"' feedRate);  				}    				lineBeingSent = newLine;  			}
Magic Number,MatterHackers.MatterControl,PrintLevelingPlane,C:\repos\MatterHackers_MatterControl\PrinterControls\PrintLevelingPlane.cs,ApplyLeveling,The following statement contains a magic number: if ((lineBeingSent.StartsWith("G0") || lineBeingSent.StartsWith("G1"))  				&& lineBeingSent.Length > 2  				&& lineBeingSent[2] == ' ')  			{  				double extruderDelta = 0;  				GCodeFile.GetFirstNumberAfter("E"' lineBeingSent' ref extruderDelta);  				double feedRate = 0;  				GCodeFile.GetFirstNumberAfter("F"' lineBeingSent' ref feedRate);    				string newLine = "G1 ";    				if (lineBeingSent.Contains("X") || lineBeingSent.Contains("Y") || lineBeingSent.Contains("Z"))  				{  					Vector3 outPosition = PrintLevelingPlane.Instance.ApplyLeveling(currentDestination);  					if (movementMode == PrinterMachineInstruction.MovementTypes.Relative)  					{  						Vector3 relativeMove = Vector3.Zero;  						GCodeFile.GetFirstNumberAfter("X"' lineBeingSent' ref relativeMove.x);  						GCodeFile.GetFirstNumberAfter("Y"' lineBeingSent' ref relativeMove.y);  						GCodeFile.GetFirstNumberAfter("Z"' lineBeingSent' ref relativeMove.z);  						outPosition = PrintLevelingPlane.Instance.ApplyLevelingRotation(relativeMove);  					}    					newLine = newLine + String.Format("X{0:0.##} Y{1:0.##} Z{2:0.###}"' outPosition.x' outPosition.y' outPosition.z);  				}    				if (extruderDelta != 0)  				{  					newLine = newLine + String.Format(" E{0:0.###}"' extruderDelta);  				}  				if (feedRate != 0)  				{  					newLine = newLine + String.Format(" F{0:0.##}"' feedRate);  				}    				lineBeingSent = newLine;  			}
Magic Number,MatterHackers.MatterControl,TerminalWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\TerminalWindow\TerminalWindow.cs,Show,The following statement contains a magic number: if (connectionWindow == null)  			{  				terminalWasOpenOnAppClose = false;  				string windowSize = UserSettings.Instance.get(TerminalWindowSizeKey);  				int width = 400;  				int height = 300;  				if (windowSize != null && windowSize != "")  				{  					string[] sizes = windowSize.Split(''');  					width = Math.Max(int.Parse(sizes[0])' (int)minSize.x);  					height = Math.Max(int.Parse(sizes[1])' (int)minSize.y);  				}    				connectionWindow = new TerminalWindow(width' height);  				connectionWindow.Closed += (parentSender' e) =>  				{  					connectionWindow = null;  				};    				// start with the assumption we are open and only change this is we see it close  				UserSettings.Instance.Fields.SetBool(TerminalWindowLeftOpen' true);  			}  			else  			{  				connectionWindow.BringToFront();  			}
Magic Number,MatterHackers.MatterControl,TerminalWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\TerminalWindow\TerminalWindow.cs,Show,The following statement contains a magic number: if (connectionWindow == null)  			{  				terminalWasOpenOnAppClose = false;  				string windowSize = UserSettings.Instance.get(TerminalWindowSizeKey);  				int width = 400;  				int height = 300;  				if (windowSize != null && windowSize != "")  				{  					string[] sizes = windowSize.Split(''');  					width = Math.Max(int.Parse(sizes[0])' (int)minSize.x);  					height = Math.Max(int.Parse(sizes[1])' (int)minSize.y);  				}    				connectionWindow = new TerminalWindow(width' height);  				connectionWindow.Closed += (parentSender' e) =>  				{  					connectionWindow = null;  				};    				// start with the assumption we are open and only change this is we see it close  				UserSettings.Instance.Fields.SetBool(TerminalWindowLeftOpen' true);  			}  			else  			{  				connectionWindow.BringToFront();  			}
Magic Number,MatterHackers.MatterControl,TerminalWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\TerminalWindow\TerminalWindow.cs,TerminalWindow,The following statement contains a magic number: if (desktopPosition != null && desktopPosition != "")  			{  				string[] sizes = desktopPosition.Split(''');    				//If the desktop position is less than -10'-10' override  				int xpos = Math.Max(int.Parse(sizes[0])' -10);  				int ypos = Math.Max(int.Parse(sizes[1])' -10);  				DesktopPosition = new Point2D(xpos' ypos);  			}
Magic Number,MatterHackers.MatterControl,TerminalWindow,C:\repos\MatterHackers_MatterControl\PrinterControls\TerminalWindow\TerminalWindow.cs,TerminalWindow,The following statement contains a magic number: if (desktopPosition != null && desktopPosition != "")  			{  				string[] sizes = desktopPosition.Split(''');    				//If the desktop position is less than -10'-10' override  				int xpos = Math.Max(int.Parse(sizes[0])' -10);  				int ypos = Math.Max(int.Parse(sizes[1])' -10);  				DesktopPosition = new Point2D(xpos' ypos);  			}
Magic Number,MatterHackers.MatterControl,ManualPrinterControlsTouchScreen,C:\repos\MatterHackers_MatterControl\PrinterControls\ManualPrinterControls.cs,ManualPrinterControlsTouchScreen,The following statement contains a magic number: this.TabBar.Padding = new BorderDouble(4' 4);
Magic Number,MatterHackers.MatterControl,ManualPrinterControlsTouchScreen,C:\repos\MatterHackers_MatterControl\PrinterControls\ManualPrinterControls.cs,ManualPrinterControlsTouchScreen,The following statement contains a magic number: this.TabBar.Padding = new BorderDouble(4' 4);
Magic Number,MatterHackers.MatterControl,ManualPrinterControlsTouchScreen,C:\repos\MatterHackers_MatterControl\PrinterControls\ManualPrinterControls.cs,ManualPrinterControlsTouchScreen,The following statement contains a magic number: this.TabTextSize = 13;
Magic Number,MatterHackers.MatterControl,ManualPrinterControlsTouchScreen,C:\repos\MatterHackers_MatterControl\PrinterControls\ManualPrinterControls.cs,ManualPrinterControlsTouchScreen,The following statement contains a magic number: {  				GuiWidget actionContainerContainer = new GuiWidget();  				actionContainerContainer.Padding = new BorderDouble(6);  				actionContainerContainer.AnchorAll();    				actionControlsContainer = new ActionControls();  				actionControlsContainer.VAnchor = VAnchor.ParentTop;  				if (ActiveSliceSettings.Instance.ActionMacros().Any())  				{  					actionContainerContainer.AddChild(actionControlsContainer);  				}    				if (ActiveSliceSettings.Instance.ActionMacros().Any())  				{  					TabPage actionTabPage = new TabPage(actionContainerContainer' "Actions".Localize().ToUpper());  					this.AddTab(new SimpleTextTabWidget(actionTabPage' "Actions Tab"' TabTextSize'  						ActiveTheme.Instance.SecondaryAccentColor' new RGBA_Bytes()' unselectedTextColor' new RGBA_Bytes()));  				}  			}
Magic Number,MatterHackers.MatterControl,ManualPrinterControlsTouchScreen,C:\repos\MatterHackers_MatterControl\PrinterControls\ManualPrinterControls.cs,ManualPrinterControlsTouchScreen,The following statement contains a magic number: {  				GuiWidget temperatureContainerContainer = new GuiWidget();  				temperatureContainerContainer.Padding = new BorderDouble(6);  				temperatureContainerContainer.AnchorAll();    				temperatureControlsContainer = new TemperatureControls();  				temperatureControlsContainer.VAnchor |= VAnchor.ParentTop;    				temperatureContainerContainer.AddChild(temperatureControlsContainer);    				TabPage temperatureTabPage = new TabPage(temperatureContainerContainer' "Temperature".Localize().ToUpper());  				this.AddTab(new SimpleTextTabWidget(temperatureTabPage' "Temperature Tab"' TabTextSize'  					ActiveTheme.Instance.SecondaryAccentColor' new RGBA_Bytes()' unselectedTextColor' new RGBA_Bytes()));  			}
Magic Number,MatterHackers.MatterControl,ManualPrinterControlsTouchScreen,C:\repos\MatterHackers_MatterControl\PrinterControls\ManualPrinterControls.cs,ManualPrinterControlsTouchScreen,The following statement contains a magic number: {  				GuiWidget movementContainerContainer = new GuiWidget();  				movementContainerContainer.Padding = new BorderDouble(6);  				movementContainerContainer.AnchorAll();    				movementControlsContainer = new MovementControls();  				movementControlsContainer.VAnchor = VAnchor.ParentTop;    				movementContainerContainer.AddChild(movementControlsContainer);    				TabPage movementTabPage = new TabPage(movementContainerContainer' "Movement".Localize().ToUpper());  				this.AddTab(new SimpleTextTabWidget(movementTabPage' "Movement Tab"' TabTextSize'  					ActiveTheme.Instance.SecondaryAccentColor' new RGBA_Bytes()' unselectedTextColor' new RGBA_Bytes()));  			}
Magic Number,MatterHackers.MatterControl,ManualPrinterControlsTouchScreen,C:\repos\MatterHackers_MatterControl\PrinterControls\ManualPrinterControls.cs,ManualPrinterControlsTouchScreen,The following statement contains a magic number: {  				GuiWidget macrosContainerContainer = new GuiWidget();  				macrosContainerContainer.Padding = new BorderDouble(6);  				macrosContainerContainer.AnchorAll();    				macroControlsContainer = new MacroControls();  				macroControlsContainer.VAnchor |= VAnchor.ParentTop;  				macrosContainerContainer.AddChild(macroControlsContainer);      				TabPage macrosTabPage = new TabPage(macrosContainerContainer' "Macros".Localize().ToUpper());  				this.AddTab(new SimpleTextTabWidget(macrosTabPage' "Macros Tab"' TabTextSize'  					ActiveTheme.Instance.SecondaryAccentColor' new RGBA_Bytes()' unselectedTextColor' new RGBA_Bytes()));  			}
Magic Number,MatterHackers.MatterControl,ManualPrinterControlsTouchScreen,C:\repos\MatterHackers_MatterControl\PrinterControls\ManualPrinterControls.cs,ManualPrinterControlsTouchScreen,The following statement contains a magic number: if (ActiveSliceSettings.Instance.GetValue<bool>("has_fan"))  			{  				// add fan tab  				GuiWidget fanContainerContainer = new GuiWidget();  				fanContainerContainer.Padding = new BorderDouble(6);  				fanContainerContainer.AnchorAll();    				fanControlsContainer = new FanControls();  				fanControlsContainer.VAnchor = VAnchor.ParentTop;    				fanContainerContainer.AddChild(fanControlsContainer);    				TabPage fanTabPage = new TabPage(fanContainerContainer' "Fan Controls".Localize().ToUpper());  				this.AddTab(new SimpleTextTabWidget(fanTabPage' "Fan Controls Tab"' TabTextSize'  						ActiveTheme.Instance.SecondaryAccentColor' new RGBA_Bytes()' unselectedTextColor' new RGBA_Bytes()));  			}
Magic Number,MatterHackers.MatterControl,ManualPrinterControlsTouchScreen,C:\repos\MatterHackers_MatterControl\PrinterControls\ManualPrinterControls.cs,ManualPrinterControlsTouchScreen,The following statement contains a magic number: {  				GuiWidget tuningContainerContainer = new GuiWidget();  				tuningContainerContainer.Padding = new BorderDouble(6);  				tuningContainerContainer.AnchorAll();    				tuningAdjustmentControlsContainer = new AdjustmentControls();  				tuningAdjustmentControlsContainer.VAnchor = VAnchor.ParentTop;    				tuningContainerContainer.AddChild(tuningAdjustmentControlsContainer);    				TabPage tuningTabPage = new TabPage(tuningContainerContainer' "Tuning Adjust".Localize().ToUpper());  				this.AddTab(new SimpleTextTabWidget(tuningTabPage' "Tuning Tab"' TabTextSize'  					ActiveTheme.Instance.SecondaryAccentColor' new RGBA_Bytes()' unselectedTextColor' new RGBA_Bytes()));  			}
Magic Number,MatterHackers.MatterControl,ManualPrinterControlsTouchScreen,C:\repos\MatterHackers_MatterControl\PrinterControls\ManualPrinterControls.cs,ManualPrinterControlsTouchScreen,The following statement contains a magic number: {  				GuiWidget terminalContainerContainer = new GuiWidget();  				terminalContainerContainer.Padding = new BorderDouble(6);  				terminalContainerContainer.AnchorAll();    				terminalControlsContainer = new TerminalControls();  				terminalControlsContainer.VAnchor |= VAnchor.ParentBottomTop;    				terminalContainerContainer.AddChild(terminalControlsContainer);    				TabPage terminalTabPage = new TabPage(terminalContainerContainer' "Terminal".Localize().ToUpper());  				this.AddTab(new SimpleTextTabWidget(terminalTabPage' "Terminal Tab"' TabTextSize'  					ActiveTheme.Instance.SecondaryAccentColor' new RGBA_Bytes()' unselectedTextColor' new RGBA_Bytes()));  			}
Magic Number,MatterHackers.MatterControl,TemperatureControlBase,C:\repos\MatterHackers_MatterControl\PrinterControls\TemperatureIndicator.cs,SetDisplayAttributes,The following statement contains a magic number: this.textImageButtonFactory.FixedWidth = 38 * GuiWidget.DeviceScale;
Magic Number,MatterHackers.MatterControl,TemperatureControlBase,C:\repos\MatterHackers_MatterControl\PrinterControls\TemperatureIndicator.cs,SetDisplayAttributes,The following statement contains a magic number: this.textImageButtonFactory.FixedHeight = 20 * GuiWidget.DeviceScale;
Magic Number,MatterHackers.MatterControl,TemperatureControlBase,C:\repos\MatterHackers_MatterControl\PrinterControls\TemperatureIndicator.cs,SetDisplayAttributes,The following statement contains a magic number: this.textImageButtonFactory.fontSize = 10;
Magic Number,MatterHackers.MatterControl,TemperatureControlBase,C:\repos\MatterHackers_MatterControl\PrinterControls\TemperatureIndicator.cs,SetDisplayAttributes,The following statement contains a magic number: this.textImageButtonFactory.normalBorderColor = new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 200);
Magic Number,MatterHackers.MatterControl,TemperatureControlBase,C:\repos\MatterHackers_MatterControl\PrinterControls\TemperatureIndicator.cs,SetDisplayAttributes,The following statement contains a magic number: this.textImageButtonFactory.hoverBorderColor = new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 200);
Magic Number,MatterHackers.MatterControl,TemperatureControlBase,C:\repos\MatterHackers_MatterControl\PrinterControls\TemperatureIndicator.cs,AddChildElements,The following statement contains a magic number: controlRow.Margin = new BorderDouble(top: 2);
Magic Number,MatterHackers.MatterControl,TemperatureControlBase,C:\repos\MatterHackers_MatterControl\PrinterControls\TemperatureIndicator.cs,AddChildElements,The following statement contains a magic number: {  				// put in the temperature slider and preset buttons    				tempSliderContainer = new FlowLayoutWidget(Agg.UI.FlowDirection.TopToBottom);    				{  					GuiWidget sliderLabels = GetSliderLabels();    					tempSliderContainer.HAnchor = HAnchor.ParentLeftRight;  					tempSliderContainer.AddChild(sliderLabels);  					tempSliderContainer.Visible = false;  				}  				GuiWidget spacer = new GuiWidget(0' 10);  				spacer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;    				// put in the temperature indicators  				{  					FlowLayoutWidget temperatureIndicator = new FlowLayoutWidget();  					temperatureIndicator.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					temperatureIndicator.Margin = new BorderDouble(bottom: 0);  					temperatureIndicator.Padding = new BorderDouble(0' 3);    					// put in the actual temperature controls  					{  						var extruderActualIndicator = new FlowLayoutWidget(Agg.UI.FlowDirection.LeftToRight);    						extruderActualIndicator.Margin = new BorderDouble(3' 0);  						TextWidget extruderActualLabel = new TextWidget("Actual".Localize() + ": "' pointSize: 10);  						extruderActualLabel.TextColor = ActiveTheme.Instance.PrimaryTextColor;  						extruderActualLabel.VAnchor = VAnchor.ParentCenter;    						actualTempIndicator = new TextWidget(string.Format("{0:0.0}°C"' GetActualTemperature())' pointSize: 12);  						actualTempIndicator.AutoExpandBoundsToText = true;  						actualTempIndicator.TextColor = ActiveTheme.Instance.PrimaryTextColor;  						actualTempIndicator.VAnchor = VAnchor.ParentCenter;    						extruderActualIndicator.AddChild(extruderActualLabel);  						extruderActualIndicator.AddChild(actualTempIndicator);    						var extruderTargetLabel = new TextWidget("Target".Localize() + ": "' pointSize: 10);  						extruderTargetLabel.Margin = new BorderDouble(left: 10);  						extruderTargetLabel.TextColor = ActiveTheme.Instance.PrimaryTextColor;  						extruderTargetLabel.VAnchor = VAnchor.ParentCenter;    						extruderActualIndicator.AddChild(extruderTargetLabel);  						temperatureIndicator.AddChild(extruderActualIndicator);  					}    					// put in the target temperature controls  					temperatureIndicator.AddChild(GetTargetTemperatureDisplay());    					FlowLayoutWidget helperTextWidget = GetHelpTextWidget();    					LinkButtonFactory linkFactory = new LinkButtonFactory();  					linkFactory.textColor = ActiveTheme.Instance.PrimaryTextColor;  					linkFactory.fontSize = 10;    					Button helpTextLink = linkFactory.Generate("?");    					helpTextLink.Click += (sender' e) =>  					{  						helperTextWidget.Visible = !helperTextWidget.Visible;  					};    					this.presetButtonsContainer = GetPresetsContainer();  					temperatureIndicator.AddChild(new HorizontalSpacer());  					temperatureIndicator.AddChild(presetButtonsContainer);    					controlRow.AddChild(temperatureIndicator);  				}  			}
Magic Number,MatterHackers.MatterControl,TemperatureControlBase,C:\repos\MatterHackers_MatterControl\PrinterControls\TemperatureIndicator.cs,AddChildElements,The following statement contains a magic number: {  				// put in the temperature slider and preset buttons    				tempSliderContainer = new FlowLayoutWidget(Agg.UI.FlowDirection.TopToBottom);    				{  					GuiWidget sliderLabels = GetSliderLabels();    					tempSliderContainer.HAnchor = HAnchor.ParentLeftRight;  					tempSliderContainer.AddChild(sliderLabels);  					tempSliderContainer.Visible = false;  				}  				GuiWidget spacer = new GuiWidget(0' 10);  				spacer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;    				// put in the temperature indicators  				{  					FlowLayoutWidget temperatureIndicator = new FlowLayoutWidget();  					temperatureIndicator.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					temperatureIndicator.Margin = new BorderDouble(bottom: 0);  					temperatureIndicator.Padding = new BorderDouble(0' 3);    					// put in the actual temperature controls  					{  						var extruderActualIndicator = new FlowLayoutWidget(Agg.UI.FlowDirection.LeftToRight);    						extruderActualIndicator.Margin = new BorderDouble(3' 0);  						TextWidget extruderActualLabel = new TextWidget("Actual".Localize() + ": "' pointSize: 10);  						extruderActualLabel.TextColor = ActiveTheme.Instance.PrimaryTextColor;  						extruderActualLabel.VAnchor = VAnchor.ParentCenter;    						actualTempIndicator = new TextWidget(string.Format("{0:0.0}°C"' GetActualTemperature())' pointSize: 12);  						actualTempIndicator.AutoExpandBoundsToText = true;  						actualTempIndicator.TextColor = ActiveTheme.Instance.PrimaryTextColor;  						actualTempIndicator.VAnchor = VAnchor.ParentCenter;    						extruderActualIndicator.AddChild(extruderActualLabel);  						extruderActualIndicator.AddChild(actualTempIndicator);    						var extruderTargetLabel = new TextWidget("Target".Localize() + ": "' pointSize: 10);  						extruderTargetLabel.Margin = new BorderDouble(left: 10);  						extruderTargetLabel.TextColor = ActiveTheme.Instance.PrimaryTextColor;  						extruderTargetLabel.VAnchor = VAnchor.ParentCenter;    						extruderActualIndicator.AddChild(extruderTargetLabel);  						temperatureIndicator.AddChild(extruderActualIndicator);  					}    					// put in the target temperature controls  					temperatureIndicator.AddChild(GetTargetTemperatureDisplay());    					FlowLayoutWidget helperTextWidget = GetHelpTextWidget();    					LinkButtonFactory linkFactory = new LinkButtonFactory();  					linkFactory.textColor = ActiveTheme.Instance.PrimaryTextColor;  					linkFactory.fontSize = 10;    					Button helpTextLink = linkFactory.Generate("?");    					helpTextLink.Click += (sender' e) =>  					{  						helperTextWidget.Visible = !helperTextWidget.Visible;  					};    					this.presetButtonsContainer = GetPresetsContainer();  					temperatureIndicator.AddChild(new HorizontalSpacer());  					temperatureIndicator.AddChild(presetButtonsContainer);    					controlRow.AddChild(temperatureIndicator);  				}  			}
Magic Number,MatterHackers.MatterControl,TemperatureControlBase,C:\repos\MatterHackers_MatterControl\PrinterControls\TemperatureIndicator.cs,AddChildElements,The following statement contains a magic number: {  				// put in the temperature slider and preset buttons    				tempSliderContainer = new FlowLayoutWidget(Agg.UI.FlowDirection.TopToBottom);    				{  					GuiWidget sliderLabels = GetSliderLabels();    					tempSliderContainer.HAnchor = HAnchor.ParentLeftRight;  					tempSliderContainer.AddChild(sliderLabels);  					tempSliderContainer.Visible = false;  				}  				GuiWidget spacer = new GuiWidget(0' 10);  				spacer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;    				// put in the temperature indicators  				{  					FlowLayoutWidget temperatureIndicator = new FlowLayoutWidget();  					temperatureIndicator.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					temperatureIndicator.Margin = new BorderDouble(bottom: 0);  					temperatureIndicator.Padding = new BorderDouble(0' 3);    					// put in the actual temperature controls  					{  						var extruderActualIndicator = new FlowLayoutWidget(Agg.UI.FlowDirection.LeftToRight);    						extruderActualIndicator.Margin = new BorderDouble(3' 0);  						TextWidget extruderActualLabel = new TextWidget("Actual".Localize() + ": "' pointSize: 10);  						extruderActualLabel.TextColor = ActiveTheme.Instance.PrimaryTextColor;  						extruderActualLabel.VAnchor = VAnchor.ParentCenter;    						actualTempIndicator = new TextWidget(string.Format("{0:0.0}°C"' GetActualTemperature())' pointSize: 12);  						actualTempIndicator.AutoExpandBoundsToText = true;  						actualTempIndicator.TextColor = ActiveTheme.Instance.PrimaryTextColor;  						actualTempIndicator.VAnchor = VAnchor.ParentCenter;    						extruderActualIndicator.AddChild(extruderActualLabel);  						extruderActualIndicator.AddChild(actualTempIndicator);    						var extruderTargetLabel = new TextWidget("Target".Localize() + ": "' pointSize: 10);  						extruderTargetLabel.Margin = new BorderDouble(left: 10);  						extruderTargetLabel.TextColor = ActiveTheme.Instance.PrimaryTextColor;  						extruderTargetLabel.VAnchor = VAnchor.ParentCenter;    						extruderActualIndicator.AddChild(extruderTargetLabel);  						temperatureIndicator.AddChild(extruderActualIndicator);  					}    					// put in the target temperature controls  					temperatureIndicator.AddChild(GetTargetTemperatureDisplay());    					FlowLayoutWidget helperTextWidget = GetHelpTextWidget();    					LinkButtonFactory linkFactory = new LinkButtonFactory();  					linkFactory.textColor = ActiveTheme.Instance.PrimaryTextColor;  					linkFactory.fontSize = 10;    					Button helpTextLink = linkFactory.Generate("?");    					helpTextLink.Click += (sender' e) =>  					{  						helperTextWidget.Visible = !helperTextWidget.Visible;  					};    					this.presetButtonsContainer = GetPresetsContainer();  					temperatureIndicator.AddChild(new HorizontalSpacer());  					temperatureIndicator.AddChild(presetButtonsContainer);    					controlRow.AddChild(temperatureIndicator);  				}  			}
Magic Number,MatterHackers.MatterControl,TemperatureControlBase,C:\repos\MatterHackers_MatterControl\PrinterControls\TemperatureIndicator.cs,AddChildElements,The following statement contains a magic number: {  				// put in the temperature slider and preset buttons    				tempSliderContainer = new FlowLayoutWidget(Agg.UI.FlowDirection.TopToBottom);    				{  					GuiWidget sliderLabels = GetSliderLabels();    					tempSliderContainer.HAnchor = HAnchor.ParentLeftRight;  					tempSliderContainer.AddChild(sliderLabels);  					tempSliderContainer.Visible = false;  				}  				GuiWidget spacer = new GuiWidget(0' 10);  				spacer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;    				// put in the temperature indicators  				{  					FlowLayoutWidget temperatureIndicator = new FlowLayoutWidget();  					temperatureIndicator.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					temperatureIndicator.Margin = new BorderDouble(bottom: 0);  					temperatureIndicator.Padding = new BorderDouble(0' 3);    					// put in the actual temperature controls  					{  						var extruderActualIndicator = new FlowLayoutWidget(Agg.UI.FlowDirection.LeftToRight);    						extruderActualIndicator.Margin = new BorderDouble(3' 0);  						TextWidget extruderActualLabel = new TextWidget("Actual".Localize() + ": "' pointSize: 10);  						extruderActualLabel.TextColor = ActiveTheme.Instance.PrimaryTextColor;  						extruderActualLabel.VAnchor = VAnchor.ParentCenter;    						actualTempIndicator = new TextWidget(string.Format("{0:0.0}°C"' GetActualTemperature())' pointSize: 12);  						actualTempIndicator.AutoExpandBoundsToText = true;  						actualTempIndicator.TextColor = ActiveTheme.Instance.PrimaryTextColor;  						actualTempIndicator.VAnchor = VAnchor.ParentCenter;    						extruderActualIndicator.AddChild(extruderActualLabel);  						extruderActualIndicator.AddChild(actualTempIndicator);    						var extruderTargetLabel = new TextWidget("Target".Localize() + ": "' pointSize: 10);  						extruderTargetLabel.Margin = new BorderDouble(left: 10);  						extruderTargetLabel.TextColor = ActiveTheme.Instance.PrimaryTextColor;  						extruderTargetLabel.VAnchor = VAnchor.ParentCenter;    						extruderActualIndicator.AddChild(extruderTargetLabel);  						temperatureIndicator.AddChild(extruderActualIndicator);  					}    					// put in the target temperature controls  					temperatureIndicator.AddChild(GetTargetTemperatureDisplay());    					FlowLayoutWidget helperTextWidget = GetHelpTextWidget();    					LinkButtonFactory linkFactory = new LinkButtonFactory();  					linkFactory.textColor = ActiveTheme.Instance.PrimaryTextColor;  					linkFactory.fontSize = 10;    					Button helpTextLink = linkFactory.Generate("?");    					helpTextLink.Click += (sender' e) =>  					{  						helperTextWidget.Visible = !helperTextWidget.Visible;  					};    					this.presetButtonsContainer = GetPresetsContainer();  					temperatureIndicator.AddChild(new HorizontalSpacer());  					temperatureIndicator.AddChild(presetButtonsContainer);    					controlRow.AddChild(temperatureIndicator);  				}  			}
Magic Number,MatterHackers.MatterControl,TemperatureControlBase,C:\repos\MatterHackers_MatterControl\PrinterControls\TemperatureIndicator.cs,AddChildElements,The following statement contains a magic number: {  				// put in the temperature slider and preset buttons    				tempSliderContainer = new FlowLayoutWidget(Agg.UI.FlowDirection.TopToBottom);    				{  					GuiWidget sliderLabels = GetSliderLabels();    					tempSliderContainer.HAnchor = HAnchor.ParentLeftRight;  					tempSliderContainer.AddChild(sliderLabels);  					tempSliderContainer.Visible = false;  				}  				GuiWidget spacer = new GuiWidget(0' 10);  				spacer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;    				// put in the temperature indicators  				{  					FlowLayoutWidget temperatureIndicator = new FlowLayoutWidget();  					temperatureIndicator.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					temperatureIndicator.Margin = new BorderDouble(bottom: 0);  					temperatureIndicator.Padding = new BorderDouble(0' 3);    					// put in the actual temperature controls  					{  						var extruderActualIndicator = new FlowLayoutWidget(Agg.UI.FlowDirection.LeftToRight);    						extruderActualIndicator.Margin = new BorderDouble(3' 0);  						TextWidget extruderActualLabel = new TextWidget("Actual".Localize() + ": "' pointSize: 10);  						extruderActualLabel.TextColor = ActiveTheme.Instance.PrimaryTextColor;  						extruderActualLabel.VAnchor = VAnchor.ParentCenter;    						actualTempIndicator = new TextWidget(string.Format("{0:0.0}°C"' GetActualTemperature())' pointSize: 12);  						actualTempIndicator.AutoExpandBoundsToText = true;  						actualTempIndicator.TextColor = ActiveTheme.Instance.PrimaryTextColor;  						actualTempIndicator.VAnchor = VAnchor.ParentCenter;    						extruderActualIndicator.AddChild(extruderActualLabel);  						extruderActualIndicator.AddChild(actualTempIndicator);    						var extruderTargetLabel = new TextWidget("Target".Localize() + ": "' pointSize: 10);  						extruderTargetLabel.Margin = new BorderDouble(left: 10);  						extruderTargetLabel.TextColor = ActiveTheme.Instance.PrimaryTextColor;  						extruderTargetLabel.VAnchor = VAnchor.ParentCenter;    						extruderActualIndicator.AddChild(extruderTargetLabel);  						temperatureIndicator.AddChild(extruderActualIndicator);  					}    					// put in the target temperature controls  					temperatureIndicator.AddChild(GetTargetTemperatureDisplay());    					FlowLayoutWidget helperTextWidget = GetHelpTextWidget();    					LinkButtonFactory linkFactory = new LinkButtonFactory();  					linkFactory.textColor = ActiveTheme.Instance.PrimaryTextColor;  					linkFactory.fontSize = 10;    					Button helpTextLink = linkFactory.Generate("?");    					helpTextLink.Click += (sender' e) =>  					{  						helperTextWidget.Visible = !helperTextWidget.Visible;  					};    					this.presetButtonsContainer = GetPresetsContainer();  					temperatureIndicator.AddChild(new HorizontalSpacer());  					temperatureIndicator.AddChild(presetButtonsContainer);    					controlRow.AddChild(temperatureIndicator);  				}  			}
Magic Number,MatterHackers.MatterControl,TemperatureControlBase,C:\repos\MatterHackers_MatterControl\PrinterControls\TemperatureIndicator.cs,AddChildElements,The following statement contains a magic number: {  				// put in the temperature slider and preset buttons    				tempSliderContainer = new FlowLayoutWidget(Agg.UI.FlowDirection.TopToBottom);    				{  					GuiWidget sliderLabels = GetSliderLabels();    					tempSliderContainer.HAnchor = HAnchor.ParentLeftRight;  					tempSliderContainer.AddChild(sliderLabels);  					tempSliderContainer.Visible = false;  				}  				GuiWidget spacer = new GuiWidget(0' 10);  				spacer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;    				// put in the temperature indicators  				{  					FlowLayoutWidget temperatureIndicator = new FlowLayoutWidget();  					temperatureIndicator.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					temperatureIndicator.Margin = new BorderDouble(bottom: 0);  					temperatureIndicator.Padding = new BorderDouble(0' 3);    					// put in the actual temperature controls  					{  						var extruderActualIndicator = new FlowLayoutWidget(Agg.UI.FlowDirection.LeftToRight);    						extruderActualIndicator.Margin = new BorderDouble(3' 0);  						TextWidget extruderActualLabel = new TextWidget("Actual".Localize() + ": "' pointSize: 10);  						extruderActualLabel.TextColor = ActiveTheme.Instance.PrimaryTextColor;  						extruderActualLabel.VAnchor = VAnchor.ParentCenter;    						actualTempIndicator = new TextWidget(string.Format("{0:0.0}°C"' GetActualTemperature())' pointSize: 12);  						actualTempIndicator.AutoExpandBoundsToText = true;  						actualTempIndicator.TextColor = ActiveTheme.Instance.PrimaryTextColor;  						actualTempIndicator.VAnchor = VAnchor.ParentCenter;    						extruderActualIndicator.AddChild(extruderActualLabel);  						extruderActualIndicator.AddChild(actualTempIndicator);    						var extruderTargetLabel = new TextWidget("Target".Localize() + ": "' pointSize: 10);  						extruderTargetLabel.Margin = new BorderDouble(left: 10);  						extruderTargetLabel.TextColor = ActiveTheme.Instance.PrimaryTextColor;  						extruderTargetLabel.VAnchor = VAnchor.ParentCenter;    						extruderActualIndicator.AddChild(extruderTargetLabel);  						temperatureIndicator.AddChild(extruderActualIndicator);  					}    					// put in the target temperature controls  					temperatureIndicator.AddChild(GetTargetTemperatureDisplay());    					FlowLayoutWidget helperTextWidget = GetHelpTextWidget();    					LinkButtonFactory linkFactory = new LinkButtonFactory();  					linkFactory.textColor = ActiveTheme.Instance.PrimaryTextColor;  					linkFactory.fontSize = 10;    					Button helpTextLink = linkFactory.Generate("?");    					helpTextLink.Click += (sender' e) =>  					{  						helperTextWidget.Visible = !helperTextWidget.Visible;  					};    					this.presetButtonsContainer = GetPresetsContainer();  					temperatureIndicator.AddChild(new HorizontalSpacer());  					temperatureIndicator.AddChild(presetButtonsContainer);    					controlRow.AddChild(temperatureIndicator);  				}  			}
Magic Number,MatterHackers.MatterControl,TemperatureControlBase,C:\repos\MatterHackers_MatterControl\PrinterControls\TemperatureIndicator.cs,AddChildElements,The following statement contains a magic number: {  				// put in the temperature slider and preset buttons    				tempSliderContainer = new FlowLayoutWidget(Agg.UI.FlowDirection.TopToBottom);    				{  					GuiWidget sliderLabels = GetSliderLabels();    					tempSliderContainer.HAnchor = HAnchor.ParentLeftRight;  					tempSliderContainer.AddChild(sliderLabels);  					tempSliderContainer.Visible = false;  				}  				GuiWidget spacer = new GuiWidget(0' 10);  				spacer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;    				// put in the temperature indicators  				{  					FlowLayoutWidget temperatureIndicator = new FlowLayoutWidget();  					temperatureIndicator.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					temperatureIndicator.Margin = new BorderDouble(bottom: 0);  					temperatureIndicator.Padding = new BorderDouble(0' 3);    					// put in the actual temperature controls  					{  						var extruderActualIndicator = new FlowLayoutWidget(Agg.UI.FlowDirection.LeftToRight);    						extruderActualIndicator.Margin = new BorderDouble(3' 0);  						TextWidget extruderActualLabel = new TextWidget("Actual".Localize() + ": "' pointSize: 10);  						extruderActualLabel.TextColor = ActiveTheme.Instance.PrimaryTextColor;  						extruderActualLabel.VAnchor = VAnchor.ParentCenter;    						actualTempIndicator = new TextWidget(string.Format("{0:0.0}°C"' GetActualTemperature())' pointSize: 12);  						actualTempIndicator.AutoExpandBoundsToText = true;  						actualTempIndicator.TextColor = ActiveTheme.Instance.PrimaryTextColor;  						actualTempIndicator.VAnchor = VAnchor.ParentCenter;    						extruderActualIndicator.AddChild(extruderActualLabel);  						extruderActualIndicator.AddChild(actualTempIndicator);    						var extruderTargetLabel = new TextWidget("Target".Localize() + ": "' pointSize: 10);  						extruderTargetLabel.Margin = new BorderDouble(left: 10);  						extruderTargetLabel.TextColor = ActiveTheme.Instance.PrimaryTextColor;  						extruderTargetLabel.VAnchor = VAnchor.ParentCenter;    						extruderActualIndicator.AddChild(extruderTargetLabel);  						temperatureIndicator.AddChild(extruderActualIndicator);  					}    					// put in the target temperature controls  					temperatureIndicator.AddChild(GetTargetTemperatureDisplay());    					FlowLayoutWidget helperTextWidget = GetHelpTextWidget();    					LinkButtonFactory linkFactory = new LinkButtonFactory();  					linkFactory.textColor = ActiveTheme.Instance.PrimaryTextColor;  					linkFactory.fontSize = 10;    					Button helpTextLink = linkFactory.Generate("?");    					helpTextLink.Click += (sender' e) =>  					{  						helperTextWidget.Visible = !helperTextWidget.Visible;  					};    					this.presetButtonsContainer = GetPresetsContainer();  					temperatureIndicator.AddChild(new HorizontalSpacer());  					temperatureIndicator.AddChild(presetButtonsContainer);    					controlRow.AddChild(temperatureIndicator);  				}  			}
Magic Number,MatterHackers.MatterControl,TemperatureControlBase,C:\repos\MatterHackers_MatterControl\PrinterControls\TemperatureIndicator.cs,AddChildElements,The following statement contains a magic number: {  				// put in the temperature slider and preset buttons    				tempSliderContainer = new FlowLayoutWidget(Agg.UI.FlowDirection.TopToBottom);    				{  					GuiWidget sliderLabels = GetSliderLabels();    					tempSliderContainer.HAnchor = HAnchor.ParentLeftRight;  					tempSliderContainer.AddChild(sliderLabels);  					tempSliderContainer.Visible = false;  				}  				GuiWidget spacer = new GuiWidget(0' 10);  				spacer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;    				// put in the temperature indicators  				{  					FlowLayoutWidget temperatureIndicator = new FlowLayoutWidget();  					temperatureIndicator.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					temperatureIndicator.Margin = new BorderDouble(bottom: 0);  					temperatureIndicator.Padding = new BorderDouble(0' 3);    					// put in the actual temperature controls  					{  						var extruderActualIndicator = new FlowLayoutWidget(Agg.UI.FlowDirection.LeftToRight);    						extruderActualIndicator.Margin = new BorderDouble(3' 0);  						TextWidget extruderActualLabel = new TextWidget("Actual".Localize() + ": "' pointSize: 10);  						extruderActualLabel.TextColor = ActiveTheme.Instance.PrimaryTextColor;  						extruderActualLabel.VAnchor = VAnchor.ParentCenter;    						actualTempIndicator = new TextWidget(string.Format("{0:0.0}°C"' GetActualTemperature())' pointSize: 12);  						actualTempIndicator.AutoExpandBoundsToText = true;  						actualTempIndicator.TextColor = ActiveTheme.Instance.PrimaryTextColor;  						actualTempIndicator.VAnchor = VAnchor.ParentCenter;    						extruderActualIndicator.AddChild(extruderActualLabel);  						extruderActualIndicator.AddChild(actualTempIndicator);    						var extruderTargetLabel = new TextWidget("Target".Localize() + ": "' pointSize: 10);  						extruderTargetLabel.Margin = new BorderDouble(left: 10);  						extruderTargetLabel.TextColor = ActiveTheme.Instance.PrimaryTextColor;  						extruderTargetLabel.VAnchor = VAnchor.ParentCenter;    						extruderActualIndicator.AddChild(extruderTargetLabel);  						temperatureIndicator.AddChild(extruderActualIndicator);  					}    					// put in the target temperature controls  					temperatureIndicator.AddChild(GetTargetTemperatureDisplay());    					FlowLayoutWidget helperTextWidget = GetHelpTextWidget();    					LinkButtonFactory linkFactory = new LinkButtonFactory();  					linkFactory.textColor = ActiveTheme.Instance.PrimaryTextColor;  					linkFactory.fontSize = 10;    					Button helpTextLink = linkFactory.Generate("?");    					helpTextLink.Click += (sender' e) =>  					{  						helperTextWidget.Visible = !helperTextWidget.Visible;  					};    					this.presetButtonsContainer = GetPresetsContainer();  					temperatureIndicator.AddChild(new HorizontalSpacer());  					temperatureIndicator.AddChild(presetButtonsContainer);    					controlRow.AddChild(temperatureIndicator);  				}  			}
Magic Number,MatterHackers.MatterControl,TemperatureControlBase,C:\repos\MatterHackers_MatterControl\PrinterControls\TemperatureIndicator.cs,GetPresetsContainer,The following statement contains a magic number: presetsContainer.Margin = new BorderDouble(3' 0);
Magic Number,MatterHackers.MatterControl,TemperatureControlBase,C:\repos\MatterHackers_MatterControl\PrinterControls\TemperatureIndicator.cs,GetPresetsContainer,The following statement contains a magic number: TextWidget presetsLabel = new TextWidget(presetsLabelTxtFull' pointSize: 10);
Magic Number,MatterHackers.MatterControl,TemperatureControlBase,C:\repos\MatterHackers_MatterControl\PrinterControls\TemperatureIndicator.cs,GetPresetsContainer,The following statement contains a magic number: presetsLabel.Margin = new BorderDouble(right: 5);
Magic Number,MatterHackers.MatterControl,TemperatureControlBase,C:\repos\MatterHackers_MatterControl\PrinterControls\TemperatureIndicator.cs,GetPresetsContainer,The following statement contains a magic number: foreach (KeyValuePair<double' string> keyValue in labels)  			{  				Button tempButton = textImageButtonFactory.Generate(keyValue.Value);  				tempButton.Margin = new BorderDouble(right: 5);  				presetsContainer.AddChild(tempButton);    				// We push the value into a temp double so that the function will not point to a shared keyValue instance.  				double temp = keyValue.Key;  				tempButton.Click += (sender' e) =>  				{  					UiThread.RunOnIdle(() =>  					{  						SetTargetTemperature(temp);  						tempSliderContainer.Visible = false;  					});  				};  			}
Magic Number,MatterHackers.MatterControl,TemperatureControlBase,C:\repos\MatterHackers_MatterControl\PrinterControls\TemperatureIndicator.cs,GetPresetsContainer,The following statement contains a magic number: this.textImageButtonFactory.FixedWidth = 76 * GuiWidget.DeviceScale;
Magic Number,MatterHackers.MatterControl,TemperatureControlBase,C:\repos\MatterHackers_MatterControl\PrinterControls\TemperatureIndicator.cs,GetPresetsContainer,The following statement contains a magic number: {  				Button tempButton = textImageButtonFactory.Generate("Preheat".Localize().ToUpper());  				tempButton.Margin = new BorderDouble(right: 5);  				presetsContainer.AddChild(tempButton);    				// We push the value into a temp double so that the function will not point to a shared keyValue instance.  				tempButton.Click += (sender' e) =>  				{  					UiThread.RunOnIdle(() =>  					{  						SetTargetTemperature(GetPreheatTemperature());  						tempSliderContainer.Visible = false;  					});  				};  			}
Magic Number,MatterHackers.MatterControl,TemperatureControlBase,C:\repos\MatterHackers_MatterControl\PrinterControls\TemperatureIndicator.cs,GetPresetsContainer,The following statement contains a magic number: this.textImageButtonFactory.FixedWidth = 38 * GuiWidget.DeviceScale;
Magic Number,MatterHackers.MatterControl,TemperatureControlBase,C:\repos\MatterHackers_MatterControl\PrinterControls\TemperatureIndicator.cs,GetTargetTemperatureDisplay,The following statement contains a magic number: targetTemperatureDisplay = new EditableNumberDisplay(textImageButtonFactory' string.Format("{0:0.0}°C"' GetTargetTemperature())' string.Format("{0:0.0}°C"' 240.2));
Magic Number,MatterHackers.MatterControl,TemperatureControlBase,C:\repos\MatterHackers_MatterControl\PrinterControls\TemperatureIndicator.cs,GetHelpTextWidget,The following statement contains a magic number: double textRegionWidth = 260 * GuiWidget.DeviceScale;
Magic Number,MatterHackers.MatterControl,TemperatureControlBase,C:\repos\MatterHackers_MatterControl\PrinterControls\TemperatureIndicator.cs,GetHelpTextWidget,The following statement contains a magic number: allText.Margin = new BorderDouble(3);
Magic Number,MatterHackers.MatterControl,TemperatureControlBase,C:\repos\MatterHackers_MatterControl\PrinterControls\TemperatureIndicator.cs,GetHelpTextWidget,The following statement contains a magic number: allText.Padding = new BorderDouble(3);
Magic Number,MatterHackers.MatterControl,TemperatureControlBase,C:\repos\MatterHackers_MatterControl\PrinterControls\TemperatureIndicator.cs,GetHelpTextWidget,The following statement contains a magic number: double helpPointSize = 10;
Magic Number,MatterHackers.MatterControl,TemperatureControlBase,C:\repos\MatterHackers_MatterControl\PrinterControls\TemperatureIndicator.cs,GetTemperaturePresetLabels,The following statement contains a magic number: for (int i = 0; i < labelItems.Length / 2; i++)  			{  				string name = labelItems[i * 2];  				double temp;  				double.TryParse(labelItems[i * 2 + 1]' out temp);    				//Ignore temp values that already exits  				if (temp > 0 && !labels.ContainsKey(temp))  				{  					labels.Add(temp' name);  				}  			}
Magic Number,MatterHackers.MatterControl,TemperatureControlBase,C:\repos\MatterHackers_MatterControl\PrinterControls\TemperatureIndicator.cs,GetTemperaturePresetLabels,The following statement contains a magic number: for (int i = 0; i < labelItems.Length / 2; i++)  			{  				string name = labelItems[i * 2];  				double temp;  				double.TryParse(labelItems[i * 2 + 1]' out temp);    				//Ignore temp values that already exits  				if (temp > 0 && !labels.ContainsKey(temp))  				{  					labels.Add(temp' name);  				}  			}
Magic Number,MatterHackers.MatterControl,TemperatureControlBase,C:\repos\MatterHackers_MatterControl\PrinterControls\TemperatureIndicator.cs,GetTemperaturePresetLabels,The following statement contains a magic number: for (int i = 0; i < labelItems.Length / 2; i++)  			{  				string name = labelItems[i * 2];  				double temp;  				double.TryParse(labelItems[i * 2 + 1]' out temp);    				//Ignore temp values that already exits  				if (temp > 0 && !labels.ContainsKey(temp))  				{  					labels.Add(temp' name);  				}  			}
Magic Number,MatterHackers.MatterControl,TemperatureControlBase,C:\repos\MatterHackers_MatterControl\PrinterControls\TemperatureIndicator.cs,GetSliderLabels,The following statement contains a magic number: sliderLabels.Height = 20 * GuiWidget.DeviceScale;
Magic Number,MatterHackers.MatterControl,TemperatureControlBase,C:\repos\MatterHackers_MatterControl\PrinterControls\TemperatureIndicator.cs,GetSliderLabels,The following statement contains a magic number: {  				double buttonOffset = -10 * GuiWidget.DeviceScale;  				var offPosition = buttonOffset;    				tempOffButton = textImageButtonFactory.Generate("Off".Localize());  				tempOffButton.OriginRelativeParent = new Vector2(offPosition' 0);    				//sliderLabels.AddChild(tempOffButton);    				SortedDictionary<double' string> labels = GetTemperaturePresetLabels();    				bool firstElement = true;  				double minButtonPosition = 0;  				foreach (KeyValuePair<double' string> keyValue in labels)  				{  					if (firstElement)  					{  						minButtonPosition = buttonOffset;  						firstElement = false;  					}  					else  					{  						double wantedButtonPosition = buttonOffset;  						minButtonPosition = Math.Max(minButtonPosition + textImageButtonFactory.FixedWidth + 3' wantedButtonPosition);  					}  					Button tempButton = textImageButtonFactory.Generate(keyValue.Value);  					tempButton.OriginRelativeParent = new Vector2(minButtonPosition' 0);    					sliderLabels.AddChild(tempButton);    					// We push the value into a temp double so that the function will not point to a shared keyValue instance.  					double temp = keyValue.Key;  					tempButton.Click += (sender' e) =>  					{  						SetTargetTemperature(temp);  						tempSliderContainer.Visible = false;  					};  				}  			}
Magic Number,MatterHackers.MatterControl,TemperatureControlBase,C:\repos\MatterHackers_MatterControl\PrinterControls\TemperatureIndicator.cs,GetSliderLabels,The following statement contains a magic number: {  				double buttonOffset = -10 * GuiWidget.DeviceScale;  				var offPosition = buttonOffset;    				tempOffButton = textImageButtonFactory.Generate("Off".Localize());  				tempOffButton.OriginRelativeParent = new Vector2(offPosition' 0);    				//sliderLabels.AddChild(tempOffButton);    				SortedDictionary<double' string> labels = GetTemperaturePresetLabels();    				bool firstElement = true;  				double minButtonPosition = 0;  				foreach (KeyValuePair<double' string> keyValue in labels)  				{  					if (firstElement)  					{  						minButtonPosition = buttonOffset;  						firstElement = false;  					}  					else  					{  						double wantedButtonPosition = buttonOffset;  						minButtonPosition = Math.Max(minButtonPosition + textImageButtonFactory.FixedWidth + 3' wantedButtonPosition);  					}  					Button tempButton = textImageButtonFactory.Generate(keyValue.Value);  					tempButton.OriginRelativeParent = new Vector2(minButtonPosition' 0);    					sliderLabels.AddChild(tempButton);    					// We push the value into a temp double so that the function will not point to a shared keyValue instance.  					double temp = keyValue.Key;  					tempButton.Click += (sender' e) =>  					{  						SetTargetTemperature(temp);  						tempSliderContainer.Visible = false;  					};  				}  			}
Magic Number,MatterHackers.MatterControl,ExtruderTemperatureControlWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\TemperatureIndicator.cs,SetTargetTemperature,The following statement contains a magic number: UiThread.RunOnIdle(() =>  			{  				double goalTemp = (int)(targetTemp + .5);  				if (PrinterConnectionAndCommunication.Instance.PrinterIsPrinting  					&& PrinterConnectionAndCommunication.Instance.PrintingState == PrinterConnectionAndCommunication.DetailedPrintingState.HeatingExtruder  					&& goalTemp != PrinterConnectionAndCommunication.Instance.GetTargetExtruderTemperature(extruderIndex0Based))  				{  					string sliceSettingsNote = "Note: Slice Settings are applied before the print actually starts. Changes while printing will not effect the active print.";  					string message = string.Format("The extruder is currently heating and its target temperature cannot be changed until it reaches {0}°C.\n\nYou can set the starting extruder temperature in 'Slice Settings' -> 'Filament'.\n\n{1}"' PrinterConnectionAndCommunication.Instance.GetTargetExtruderTemperature(extruderIndex0Based)' sliceSettingsNote);  					StyledMessageBox.ShowMessageBox(null' message' "Waiting For Extruder To Heat");  				}  				else  				{  					PrinterConnectionAndCommunication.Instance.SetTargetExtruderTemperature(extruderIndex0Based' (int)(targetTemp + .5));  					string displayString = string.Format("{0:0.0}°C"' PrinterConnectionAndCommunication.Instance.GetTargetExtruderTemperature(extruderIndex0Based));  					targetTemperatureDisplay.SetDisplayString(displayString);  				}  			});
Magic Number,MatterHackers.MatterControl,ExtruderTemperatureControlWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\TemperatureIndicator.cs,SetTargetTemperature,The following statement contains a magic number: UiThread.RunOnIdle(() =>  			{  				double goalTemp = (int)(targetTemp + .5);  				if (PrinterConnectionAndCommunication.Instance.PrinterIsPrinting  					&& PrinterConnectionAndCommunication.Instance.PrintingState == PrinterConnectionAndCommunication.DetailedPrintingState.HeatingExtruder  					&& goalTemp != PrinterConnectionAndCommunication.Instance.GetTargetExtruderTemperature(extruderIndex0Based))  				{  					string sliceSettingsNote = "Note: Slice Settings are applied before the print actually starts. Changes while printing will not effect the active print.";  					string message = string.Format("The extruder is currently heating and its target temperature cannot be changed until it reaches {0}°C.\n\nYou can set the starting extruder temperature in 'Slice Settings' -> 'Filament'.\n\n{1}"' PrinterConnectionAndCommunication.Instance.GetTargetExtruderTemperature(extruderIndex0Based)' sliceSettingsNote);  					StyledMessageBox.ShowMessageBox(null' message' "Waiting For Extruder To Heat");  				}  				else  				{  					PrinterConnectionAndCommunication.Instance.SetTargetExtruderTemperature(extruderIndex0Based' (int)(targetTemp + .5));  					string displayString = string.Format("{0:0.0}°C"' PrinterConnectionAndCommunication.Instance.GetTargetExtruderTemperature(extruderIndex0Based));  					targetTemperatureDisplay.SetDisplayString(displayString);  				}  			});
Magic Number,MatterHackers.MatterControl,BedTemperatureControlWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\TemperatureIndicator.cs,SetTargetTemperature,The following statement contains a magic number: double goalTemp = (int)(targetTemp + .5);
Magic Number,MatterHackers.MatterControl,JogControls,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,JogControls,The following statement contains a magic number: double distanceBetweenControls = 12;
Magic Number,MatterHackers.MatterControl,JogControls,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,JogControls,The following statement contains a magic number: double buttonSeparationDistance = 10;
Magic Number,MatterHackers.MatterControl,JogControls,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,JogControls,The following statement contains a magic number: {  				FlowLayoutWidget allControlsLeftToRight = new FlowLayoutWidget();    				FlowLayoutWidget xYZWithDistance = new FlowLayoutWidget(FlowDirection.TopToBottom);  				{  					FlowLayoutWidget xYZControls = new FlowLayoutWidget();  					{  						GuiWidget xyGrid = CreateXYGridControl(colors' distanceBetweenControls' buttonSeparationDistance);  						xYZControls.AddChild(xyGrid);    						FlowLayoutWidget zButtons = CreateZButtons(XYZColors.zColor' buttonSeparationDistance' out zPlusControl' out zMinusControl);  						zButtons.VAnchor = Agg.UI.VAnchor.ParentBottom;  						xYZControls.AddChild(zButtons);  						xYZWithDistance.AddChild(xYZControls);  					}    					this.KeyDown += (sender' e) =>  					{  						if (hotKeyButton == null ||                               !hotKeyButton.Checked)  						{  							return;  						}    						double moveAmountPositive = AxisMoveAmount;  						double moveAmountNegative = -AxisMoveAmount;  						int eMoveAmountPositive = EAxisMoveAmount;  						int eMoveAmountNegative = -EAxisMoveAmount;    						if (OsInformation.OperatingSystem == OSType.Windows  							|| OsInformation.OperatingSystem == OSType.Mac)  						{  							if (e.KeyCode == Keys.Z)  							{  								PrinterConnectionAndCommunication.Instance.HomeAxis(PrinterConnectionAndCommunication.Axis.Z);  							}  							else if (e.KeyCode == Keys.Y)  							{  								PrinterConnectionAndCommunication.Instance.HomeAxis(PrinterConnectionAndCommunication.Axis.Y);  							}  							else if (e.KeyCode == Keys.X)  							{  								PrinterConnectionAndCommunication.Instance.HomeAxis(PrinterConnectionAndCommunication.Axis.X);  							}  							else if (e.KeyCode == Keys.Left)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.X' moveAmountNegative' MovementControls.XSpeed);  							}  							else if (e.KeyCode == Keys.Right)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.X' moveAmountPositive' MovementControls.XSpeed);  							}  							else if (e.KeyCode == Keys.Up)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Y' moveAmountPositive' MovementControls.YSpeed);  							}  							else if (e.KeyCode == Keys.Down)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Y' moveAmountNegative' MovementControls.YSpeed);  							}  							else if (e.KeyCode == Keys.E)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.E' eMoveAmountPositive' MovementControls.EFeedRate(0));  							}  							else if (e.KeyCode == Keys.R)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.E' eMoveAmountNegative' MovementControls.EFeedRate(0));  							}  						}    						if (OsInformation.OperatingSystem == OSType.Windows)  						{  							if (e.KeyCode == Keys.Home)  							{  								PrinterConnectionAndCommunication.Instance.HomeAxis(PrinterConnectionAndCommunication.Axis.XYZ);  							}  							else if (e.KeyCode == Keys.PageUp)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Z' moveAmountPositive' MovementControls.ZSpeed);  							}  							else if (e.KeyCode == Keys.PageDown)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Z' moveAmountNegative' MovementControls.ZSpeed);  							}  						}  						else if (OsInformation.OperatingSystem == OSType.Mac)  						{  							if (e.KeyCode == (Keys.Back | Keys.Cancel))  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Z' moveAmountPositive' MovementControls.ZSpeed);  							}  							else if (e.KeyCode == Keys.Clear)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Z' moveAmountNegative' MovementControls.ZSpeed);  							}  						}  					};    					// add in some movement radio buttons  					FlowLayoutWidget setMoveDistanceControl = new FlowLayoutWidget();  					TextWidget buttonsLabel = new TextWidget("Distance:"' textColor: RGBA_Bytes.White);  					buttonsLabel.VAnchor = Agg.UI.VAnchor.ParentCenter;  					//setMoveDistanceControl.AddChild(buttonsLabel);    					{  						TextImageButtonFactory buttonFactory = new TextImageButtonFactory();  						buttonFactory.FixedHeight = 20 * GuiWidget.DeviceScale;  						buttonFactory.FixedWidth = 30 * GuiWidget.DeviceScale;  						buttonFactory.fontSize = 8;  						buttonFactory.Margin = new BorderDouble(0);  						buttonFactory.checkedBorderColor = ActiveTheme.Instance.PrimaryTextColor;    						FlowLayoutWidget moveRadioButtons = new FlowLayoutWidget();    						var radioList = new ObservableCollection<GuiWidget>();    						movePointZeroTwoMmButton = buttonFactory.GenerateRadioButton("0.02");  						movePointZeroTwoMmButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  						movePointZeroTwoMmButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetXYZMoveAmount(.02); };  						movePointZeroTwoMmButton.SiblingRadioButtonList = radioList;  						moveRadioButtons.AddChild(movePointZeroTwoMmButton);    						RadioButton pointOneButton = buttonFactory.GenerateRadioButton("0.1");  						pointOneButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  						pointOneButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetXYZMoveAmount(.1); };  						pointOneButton.SiblingRadioButtonList = radioList;  						moveRadioButtons.AddChild(pointOneButton);    						moveOneMmButton = buttonFactory.GenerateRadioButton("1");  						moveOneMmButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  						moveOneMmButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetXYZMoveAmount(1); };  						moveOneMmButton.SiblingRadioButtonList = radioList;  						moveRadioButtons.AddChild(moveOneMmButton);    						tooBigForBabyStepping = new DisableableWidget()  						{  							VAnchor = VAnchor.FitToChildren'  							HAnchor = HAnchor.FitToChildren  						};    						var tooBigFlowLayout = new FlowLayoutWidget();  						tooBigForBabyStepping.AddChild(tooBigFlowLayout);    						tenButton = buttonFactory.GenerateRadioButton("10");  						tenButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  						tenButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetXYZMoveAmount(10); };  						tenButton.SiblingRadioButtonList = radioList;  						tooBigFlowLayout.AddChild(tenButton);    						oneHundredButton = buttonFactory.GenerateRadioButton("100");  						oneHundredButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  						oneHundredButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetXYZMoveAmount(100); };  						oneHundredButton.SiblingRadioButtonList = radioList;  						tooBigFlowLayout.AddChild(oneHundredButton);    						moveRadioButtons.AddChild(tooBigForBabyStepping);    						tenButton.Checked = true;  						moveRadioButtons.Margin = new BorderDouble(0' 3);    						setMoveDistanceControl.AddChild(moveRadioButtons);    						TextWidget mmLabel = new TextWidget("mm"' textColor: ActiveTheme.Instance.PrimaryTextColor' pointSize: 8);  						mmLabel.Margin = new BorderDouble(left: 10);  						mmLabel.VAnchor = Agg.UI.VAnchor.ParentCenter;    						tooBigFlowLayout.AddChild(mmLabel);  					}    					setMoveDistanceControl.HAnchor = Agg.UI.HAnchor.ParentLeft;  					xYZWithDistance.AddChild(setMoveDistanceControl);  				}    				allControlsLeftToRight.AddChild(xYZWithDistance);    #if !__ANDROID__  				allControlsLeftToRight.AddChild(GetHotkeyControlContainer());  #endif  				GuiWidget barBetweenZAndE = new GuiWidget(2' 2);  				barBetweenZAndE.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  				barBetweenZAndE.BackgroundColor = RGBA_Bytes.White;  				barBetweenZAndE.Margin = new BorderDouble(distanceBetweenControls' 5);  				allControlsLeftToRight.AddChild(barBetweenZAndE);    				FlowLayoutWidget eButtons = CreateEButtons(buttonSeparationDistance);  				disableableEButtons = new DisableableWidget()  				{  					Name = "disableableEButtons"'  					HAnchor = HAnchor.FitToChildren'  					VAnchor = VAnchor.FitToChildren | VAnchor.ParentTop'  				};  				disableableEButtons.AddChild(eButtons);    				allControlsLeftToRight.AddChild(disableableEButtons);  				allControlsTopToBottom.AddChild(allControlsLeftToRight);  			}
Magic Number,MatterHackers.MatterControl,JogControls,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,JogControls,The following statement contains a magic number: {  				FlowLayoutWidget allControlsLeftToRight = new FlowLayoutWidget();    				FlowLayoutWidget xYZWithDistance = new FlowLayoutWidget(FlowDirection.TopToBottom);  				{  					FlowLayoutWidget xYZControls = new FlowLayoutWidget();  					{  						GuiWidget xyGrid = CreateXYGridControl(colors' distanceBetweenControls' buttonSeparationDistance);  						xYZControls.AddChild(xyGrid);    						FlowLayoutWidget zButtons = CreateZButtons(XYZColors.zColor' buttonSeparationDistance' out zPlusControl' out zMinusControl);  						zButtons.VAnchor = Agg.UI.VAnchor.ParentBottom;  						xYZControls.AddChild(zButtons);  						xYZWithDistance.AddChild(xYZControls);  					}    					this.KeyDown += (sender' e) =>  					{  						if (hotKeyButton == null ||                               !hotKeyButton.Checked)  						{  							return;  						}    						double moveAmountPositive = AxisMoveAmount;  						double moveAmountNegative = -AxisMoveAmount;  						int eMoveAmountPositive = EAxisMoveAmount;  						int eMoveAmountNegative = -EAxisMoveAmount;    						if (OsInformation.OperatingSystem == OSType.Windows  							|| OsInformation.OperatingSystem == OSType.Mac)  						{  							if (e.KeyCode == Keys.Z)  							{  								PrinterConnectionAndCommunication.Instance.HomeAxis(PrinterConnectionAndCommunication.Axis.Z);  							}  							else if (e.KeyCode == Keys.Y)  							{  								PrinterConnectionAndCommunication.Instance.HomeAxis(PrinterConnectionAndCommunication.Axis.Y);  							}  							else if (e.KeyCode == Keys.X)  							{  								PrinterConnectionAndCommunication.Instance.HomeAxis(PrinterConnectionAndCommunication.Axis.X);  							}  							else if (e.KeyCode == Keys.Left)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.X' moveAmountNegative' MovementControls.XSpeed);  							}  							else if (e.KeyCode == Keys.Right)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.X' moveAmountPositive' MovementControls.XSpeed);  							}  							else if (e.KeyCode == Keys.Up)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Y' moveAmountPositive' MovementControls.YSpeed);  							}  							else if (e.KeyCode == Keys.Down)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Y' moveAmountNegative' MovementControls.YSpeed);  							}  							else if (e.KeyCode == Keys.E)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.E' eMoveAmountPositive' MovementControls.EFeedRate(0));  							}  							else if (e.KeyCode == Keys.R)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.E' eMoveAmountNegative' MovementControls.EFeedRate(0));  							}  						}    						if (OsInformation.OperatingSystem == OSType.Windows)  						{  							if (e.KeyCode == Keys.Home)  							{  								PrinterConnectionAndCommunication.Instance.HomeAxis(PrinterConnectionAndCommunication.Axis.XYZ);  							}  							else if (e.KeyCode == Keys.PageUp)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Z' moveAmountPositive' MovementControls.ZSpeed);  							}  							else if (e.KeyCode == Keys.PageDown)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Z' moveAmountNegative' MovementControls.ZSpeed);  							}  						}  						else if (OsInformation.OperatingSystem == OSType.Mac)  						{  							if (e.KeyCode == (Keys.Back | Keys.Cancel))  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Z' moveAmountPositive' MovementControls.ZSpeed);  							}  							else if (e.KeyCode == Keys.Clear)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Z' moveAmountNegative' MovementControls.ZSpeed);  							}  						}  					};    					// add in some movement radio buttons  					FlowLayoutWidget setMoveDistanceControl = new FlowLayoutWidget();  					TextWidget buttonsLabel = new TextWidget("Distance:"' textColor: RGBA_Bytes.White);  					buttonsLabel.VAnchor = Agg.UI.VAnchor.ParentCenter;  					//setMoveDistanceControl.AddChild(buttonsLabel);    					{  						TextImageButtonFactory buttonFactory = new TextImageButtonFactory();  						buttonFactory.FixedHeight = 20 * GuiWidget.DeviceScale;  						buttonFactory.FixedWidth = 30 * GuiWidget.DeviceScale;  						buttonFactory.fontSize = 8;  						buttonFactory.Margin = new BorderDouble(0);  						buttonFactory.checkedBorderColor = ActiveTheme.Instance.PrimaryTextColor;    						FlowLayoutWidget moveRadioButtons = new FlowLayoutWidget();    						var radioList = new ObservableCollection<GuiWidget>();    						movePointZeroTwoMmButton = buttonFactory.GenerateRadioButton("0.02");  						movePointZeroTwoMmButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  						movePointZeroTwoMmButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetXYZMoveAmount(.02); };  						movePointZeroTwoMmButton.SiblingRadioButtonList = radioList;  						moveRadioButtons.AddChild(movePointZeroTwoMmButton);    						RadioButton pointOneButton = buttonFactory.GenerateRadioButton("0.1");  						pointOneButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  						pointOneButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetXYZMoveAmount(.1); };  						pointOneButton.SiblingRadioButtonList = radioList;  						moveRadioButtons.AddChild(pointOneButton);    						moveOneMmButton = buttonFactory.GenerateRadioButton("1");  						moveOneMmButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  						moveOneMmButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetXYZMoveAmount(1); };  						moveOneMmButton.SiblingRadioButtonList = radioList;  						moveRadioButtons.AddChild(moveOneMmButton);    						tooBigForBabyStepping = new DisableableWidget()  						{  							VAnchor = VAnchor.FitToChildren'  							HAnchor = HAnchor.FitToChildren  						};    						var tooBigFlowLayout = new FlowLayoutWidget();  						tooBigForBabyStepping.AddChild(tooBigFlowLayout);    						tenButton = buttonFactory.GenerateRadioButton("10");  						tenButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  						tenButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetXYZMoveAmount(10); };  						tenButton.SiblingRadioButtonList = radioList;  						tooBigFlowLayout.AddChild(tenButton);    						oneHundredButton = buttonFactory.GenerateRadioButton("100");  						oneHundredButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  						oneHundredButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetXYZMoveAmount(100); };  						oneHundredButton.SiblingRadioButtonList = radioList;  						tooBigFlowLayout.AddChild(oneHundredButton);    						moveRadioButtons.AddChild(tooBigForBabyStepping);    						tenButton.Checked = true;  						moveRadioButtons.Margin = new BorderDouble(0' 3);    						setMoveDistanceControl.AddChild(moveRadioButtons);    						TextWidget mmLabel = new TextWidget("mm"' textColor: ActiveTheme.Instance.PrimaryTextColor' pointSize: 8);  						mmLabel.Margin = new BorderDouble(left: 10);  						mmLabel.VAnchor = Agg.UI.VAnchor.ParentCenter;    						tooBigFlowLayout.AddChild(mmLabel);  					}    					setMoveDistanceControl.HAnchor = Agg.UI.HAnchor.ParentLeft;  					xYZWithDistance.AddChild(setMoveDistanceControl);  				}    				allControlsLeftToRight.AddChild(xYZWithDistance);    #if !__ANDROID__  				allControlsLeftToRight.AddChild(GetHotkeyControlContainer());  #endif  				GuiWidget barBetweenZAndE = new GuiWidget(2' 2);  				barBetweenZAndE.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  				barBetweenZAndE.BackgroundColor = RGBA_Bytes.White;  				barBetweenZAndE.Margin = new BorderDouble(distanceBetweenControls' 5);  				allControlsLeftToRight.AddChild(barBetweenZAndE);    				FlowLayoutWidget eButtons = CreateEButtons(buttonSeparationDistance);  				disableableEButtons = new DisableableWidget()  				{  					Name = "disableableEButtons"'  					HAnchor = HAnchor.FitToChildren'  					VAnchor = VAnchor.FitToChildren | VAnchor.ParentTop'  				};  				disableableEButtons.AddChild(eButtons);    				allControlsLeftToRight.AddChild(disableableEButtons);  				allControlsTopToBottom.AddChild(allControlsLeftToRight);  			}
Magic Number,MatterHackers.MatterControl,JogControls,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,JogControls,The following statement contains a magic number: {  				FlowLayoutWidget allControlsLeftToRight = new FlowLayoutWidget();    				FlowLayoutWidget xYZWithDistance = new FlowLayoutWidget(FlowDirection.TopToBottom);  				{  					FlowLayoutWidget xYZControls = new FlowLayoutWidget();  					{  						GuiWidget xyGrid = CreateXYGridControl(colors' distanceBetweenControls' buttonSeparationDistance);  						xYZControls.AddChild(xyGrid);    						FlowLayoutWidget zButtons = CreateZButtons(XYZColors.zColor' buttonSeparationDistance' out zPlusControl' out zMinusControl);  						zButtons.VAnchor = Agg.UI.VAnchor.ParentBottom;  						xYZControls.AddChild(zButtons);  						xYZWithDistance.AddChild(xYZControls);  					}    					this.KeyDown += (sender' e) =>  					{  						if (hotKeyButton == null ||                               !hotKeyButton.Checked)  						{  							return;  						}    						double moveAmountPositive = AxisMoveAmount;  						double moveAmountNegative = -AxisMoveAmount;  						int eMoveAmountPositive = EAxisMoveAmount;  						int eMoveAmountNegative = -EAxisMoveAmount;    						if (OsInformation.OperatingSystem == OSType.Windows  							|| OsInformation.OperatingSystem == OSType.Mac)  						{  							if (e.KeyCode == Keys.Z)  							{  								PrinterConnectionAndCommunication.Instance.HomeAxis(PrinterConnectionAndCommunication.Axis.Z);  							}  							else if (e.KeyCode == Keys.Y)  							{  								PrinterConnectionAndCommunication.Instance.HomeAxis(PrinterConnectionAndCommunication.Axis.Y);  							}  							else if (e.KeyCode == Keys.X)  							{  								PrinterConnectionAndCommunication.Instance.HomeAxis(PrinterConnectionAndCommunication.Axis.X);  							}  							else if (e.KeyCode == Keys.Left)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.X' moveAmountNegative' MovementControls.XSpeed);  							}  							else if (e.KeyCode == Keys.Right)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.X' moveAmountPositive' MovementControls.XSpeed);  							}  							else if (e.KeyCode == Keys.Up)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Y' moveAmountPositive' MovementControls.YSpeed);  							}  							else if (e.KeyCode == Keys.Down)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Y' moveAmountNegative' MovementControls.YSpeed);  							}  							else if (e.KeyCode == Keys.E)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.E' eMoveAmountPositive' MovementControls.EFeedRate(0));  							}  							else if (e.KeyCode == Keys.R)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.E' eMoveAmountNegative' MovementControls.EFeedRate(0));  							}  						}    						if (OsInformation.OperatingSystem == OSType.Windows)  						{  							if (e.KeyCode == Keys.Home)  							{  								PrinterConnectionAndCommunication.Instance.HomeAxis(PrinterConnectionAndCommunication.Axis.XYZ);  							}  							else if (e.KeyCode == Keys.PageUp)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Z' moveAmountPositive' MovementControls.ZSpeed);  							}  							else if (e.KeyCode == Keys.PageDown)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Z' moveAmountNegative' MovementControls.ZSpeed);  							}  						}  						else if (OsInformation.OperatingSystem == OSType.Mac)  						{  							if (e.KeyCode == (Keys.Back | Keys.Cancel))  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Z' moveAmountPositive' MovementControls.ZSpeed);  							}  							else if (e.KeyCode == Keys.Clear)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Z' moveAmountNegative' MovementControls.ZSpeed);  							}  						}  					};    					// add in some movement radio buttons  					FlowLayoutWidget setMoveDistanceControl = new FlowLayoutWidget();  					TextWidget buttonsLabel = new TextWidget("Distance:"' textColor: RGBA_Bytes.White);  					buttonsLabel.VAnchor = Agg.UI.VAnchor.ParentCenter;  					//setMoveDistanceControl.AddChild(buttonsLabel);    					{  						TextImageButtonFactory buttonFactory = new TextImageButtonFactory();  						buttonFactory.FixedHeight = 20 * GuiWidget.DeviceScale;  						buttonFactory.FixedWidth = 30 * GuiWidget.DeviceScale;  						buttonFactory.fontSize = 8;  						buttonFactory.Margin = new BorderDouble(0);  						buttonFactory.checkedBorderColor = ActiveTheme.Instance.PrimaryTextColor;    						FlowLayoutWidget moveRadioButtons = new FlowLayoutWidget();    						var radioList = new ObservableCollection<GuiWidget>();    						movePointZeroTwoMmButton = buttonFactory.GenerateRadioButton("0.02");  						movePointZeroTwoMmButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  						movePointZeroTwoMmButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetXYZMoveAmount(.02); };  						movePointZeroTwoMmButton.SiblingRadioButtonList = radioList;  						moveRadioButtons.AddChild(movePointZeroTwoMmButton);    						RadioButton pointOneButton = buttonFactory.GenerateRadioButton("0.1");  						pointOneButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  						pointOneButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetXYZMoveAmount(.1); };  						pointOneButton.SiblingRadioButtonList = radioList;  						moveRadioButtons.AddChild(pointOneButton);    						moveOneMmButton = buttonFactory.GenerateRadioButton("1");  						moveOneMmButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  						moveOneMmButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetXYZMoveAmount(1); };  						moveOneMmButton.SiblingRadioButtonList = radioList;  						moveRadioButtons.AddChild(moveOneMmButton);    						tooBigForBabyStepping = new DisableableWidget()  						{  							VAnchor = VAnchor.FitToChildren'  							HAnchor = HAnchor.FitToChildren  						};    						var tooBigFlowLayout = new FlowLayoutWidget();  						tooBigForBabyStepping.AddChild(tooBigFlowLayout);    						tenButton = buttonFactory.GenerateRadioButton("10");  						tenButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  						tenButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetXYZMoveAmount(10); };  						tenButton.SiblingRadioButtonList = radioList;  						tooBigFlowLayout.AddChild(tenButton);    						oneHundredButton = buttonFactory.GenerateRadioButton("100");  						oneHundredButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  						oneHundredButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetXYZMoveAmount(100); };  						oneHundredButton.SiblingRadioButtonList = radioList;  						tooBigFlowLayout.AddChild(oneHundredButton);    						moveRadioButtons.AddChild(tooBigForBabyStepping);    						tenButton.Checked = true;  						moveRadioButtons.Margin = new BorderDouble(0' 3);    						setMoveDistanceControl.AddChild(moveRadioButtons);    						TextWidget mmLabel = new TextWidget("mm"' textColor: ActiveTheme.Instance.PrimaryTextColor' pointSize: 8);  						mmLabel.Margin = new BorderDouble(left: 10);  						mmLabel.VAnchor = Agg.UI.VAnchor.ParentCenter;    						tooBigFlowLayout.AddChild(mmLabel);  					}    					setMoveDistanceControl.HAnchor = Agg.UI.HAnchor.ParentLeft;  					xYZWithDistance.AddChild(setMoveDistanceControl);  				}    				allControlsLeftToRight.AddChild(xYZWithDistance);    #if !__ANDROID__  				allControlsLeftToRight.AddChild(GetHotkeyControlContainer());  #endif  				GuiWidget barBetweenZAndE = new GuiWidget(2' 2);  				barBetweenZAndE.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  				barBetweenZAndE.BackgroundColor = RGBA_Bytes.White;  				barBetweenZAndE.Margin = new BorderDouble(distanceBetweenControls' 5);  				allControlsLeftToRight.AddChild(barBetweenZAndE);    				FlowLayoutWidget eButtons = CreateEButtons(buttonSeparationDistance);  				disableableEButtons = new DisableableWidget()  				{  					Name = "disableableEButtons"'  					HAnchor = HAnchor.FitToChildren'  					VAnchor = VAnchor.FitToChildren | VAnchor.ParentTop'  				};  				disableableEButtons.AddChild(eButtons);    				allControlsLeftToRight.AddChild(disableableEButtons);  				allControlsTopToBottom.AddChild(allControlsLeftToRight);  			}
Magic Number,MatterHackers.MatterControl,JogControls,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,JogControls,The following statement contains a magic number: {  				FlowLayoutWidget allControlsLeftToRight = new FlowLayoutWidget();    				FlowLayoutWidget xYZWithDistance = new FlowLayoutWidget(FlowDirection.TopToBottom);  				{  					FlowLayoutWidget xYZControls = new FlowLayoutWidget();  					{  						GuiWidget xyGrid = CreateXYGridControl(colors' distanceBetweenControls' buttonSeparationDistance);  						xYZControls.AddChild(xyGrid);    						FlowLayoutWidget zButtons = CreateZButtons(XYZColors.zColor' buttonSeparationDistance' out zPlusControl' out zMinusControl);  						zButtons.VAnchor = Agg.UI.VAnchor.ParentBottom;  						xYZControls.AddChild(zButtons);  						xYZWithDistance.AddChild(xYZControls);  					}    					this.KeyDown += (sender' e) =>  					{  						if (hotKeyButton == null ||                               !hotKeyButton.Checked)  						{  							return;  						}    						double moveAmountPositive = AxisMoveAmount;  						double moveAmountNegative = -AxisMoveAmount;  						int eMoveAmountPositive = EAxisMoveAmount;  						int eMoveAmountNegative = -EAxisMoveAmount;    						if (OsInformation.OperatingSystem == OSType.Windows  							|| OsInformation.OperatingSystem == OSType.Mac)  						{  							if (e.KeyCode == Keys.Z)  							{  								PrinterConnectionAndCommunication.Instance.HomeAxis(PrinterConnectionAndCommunication.Axis.Z);  							}  							else if (e.KeyCode == Keys.Y)  							{  								PrinterConnectionAndCommunication.Instance.HomeAxis(PrinterConnectionAndCommunication.Axis.Y);  							}  							else if (e.KeyCode == Keys.X)  							{  								PrinterConnectionAndCommunication.Instance.HomeAxis(PrinterConnectionAndCommunication.Axis.X);  							}  							else if (e.KeyCode == Keys.Left)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.X' moveAmountNegative' MovementControls.XSpeed);  							}  							else if (e.KeyCode == Keys.Right)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.X' moveAmountPositive' MovementControls.XSpeed);  							}  							else if (e.KeyCode == Keys.Up)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Y' moveAmountPositive' MovementControls.YSpeed);  							}  							else if (e.KeyCode == Keys.Down)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Y' moveAmountNegative' MovementControls.YSpeed);  							}  							else if (e.KeyCode == Keys.E)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.E' eMoveAmountPositive' MovementControls.EFeedRate(0));  							}  							else if (e.KeyCode == Keys.R)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.E' eMoveAmountNegative' MovementControls.EFeedRate(0));  							}  						}    						if (OsInformation.OperatingSystem == OSType.Windows)  						{  							if (e.KeyCode == Keys.Home)  							{  								PrinterConnectionAndCommunication.Instance.HomeAxis(PrinterConnectionAndCommunication.Axis.XYZ);  							}  							else if (e.KeyCode == Keys.PageUp)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Z' moveAmountPositive' MovementControls.ZSpeed);  							}  							else if (e.KeyCode == Keys.PageDown)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Z' moveAmountNegative' MovementControls.ZSpeed);  							}  						}  						else if (OsInformation.OperatingSystem == OSType.Mac)  						{  							if (e.KeyCode == (Keys.Back | Keys.Cancel))  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Z' moveAmountPositive' MovementControls.ZSpeed);  							}  							else if (e.KeyCode == Keys.Clear)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Z' moveAmountNegative' MovementControls.ZSpeed);  							}  						}  					};    					// add in some movement radio buttons  					FlowLayoutWidget setMoveDistanceControl = new FlowLayoutWidget();  					TextWidget buttonsLabel = new TextWidget("Distance:"' textColor: RGBA_Bytes.White);  					buttonsLabel.VAnchor = Agg.UI.VAnchor.ParentCenter;  					//setMoveDistanceControl.AddChild(buttonsLabel);    					{  						TextImageButtonFactory buttonFactory = new TextImageButtonFactory();  						buttonFactory.FixedHeight = 20 * GuiWidget.DeviceScale;  						buttonFactory.FixedWidth = 30 * GuiWidget.DeviceScale;  						buttonFactory.fontSize = 8;  						buttonFactory.Margin = new BorderDouble(0);  						buttonFactory.checkedBorderColor = ActiveTheme.Instance.PrimaryTextColor;    						FlowLayoutWidget moveRadioButtons = new FlowLayoutWidget();    						var radioList = new ObservableCollection<GuiWidget>();    						movePointZeroTwoMmButton = buttonFactory.GenerateRadioButton("0.02");  						movePointZeroTwoMmButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  						movePointZeroTwoMmButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetXYZMoveAmount(.02); };  						movePointZeroTwoMmButton.SiblingRadioButtonList = radioList;  						moveRadioButtons.AddChild(movePointZeroTwoMmButton);    						RadioButton pointOneButton = buttonFactory.GenerateRadioButton("0.1");  						pointOneButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  						pointOneButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetXYZMoveAmount(.1); };  						pointOneButton.SiblingRadioButtonList = radioList;  						moveRadioButtons.AddChild(pointOneButton);    						moveOneMmButton = buttonFactory.GenerateRadioButton("1");  						moveOneMmButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  						moveOneMmButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetXYZMoveAmount(1); };  						moveOneMmButton.SiblingRadioButtonList = radioList;  						moveRadioButtons.AddChild(moveOneMmButton);    						tooBigForBabyStepping = new DisableableWidget()  						{  							VAnchor = VAnchor.FitToChildren'  							HAnchor = HAnchor.FitToChildren  						};    						var tooBigFlowLayout = new FlowLayoutWidget();  						tooBigForBabyStepping.AddChild(tooBigFlowLayout);    						tenButton = buttonFactory.GenerateRadioButton("10");  						tenButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  						tenButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetXYZMoveAmount(10); };  						tenButton.SiblingRadioButtonList = radioList;  						tooBigFlowLayout.AddChild(tenButton);    						oneHundredButton = buttonFactory.GenerateRadioButton("100");  						oneHundredButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  						oneHundredButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetXYZMoveAmount(100); };  						oneHundredButton.SiblingRadioButtonList = radioList;  						tooBigFlowLayout.AddChild(oneHundredButton);    						moveRadioButtons.AddChild(tooBigForBabyStepping);    						tenButton.Checked = true;  						moveRadioButtons.Margin = new BorderDouble(0' 3);    						setMoveDistanceControl.AddChild(moveRadioButtons);    						TextWidget mmLabel = new TextWidget("mm"' textColor: ActiveTheme.Instance.PrimaryTextColor' pointSize: 8);  						mmLabel.Margin = new BorderDouble(left: 10);  						mmLabel.VAnchor = Agg.UI.VAnchor.ParentCenter;    						tooBigFlowLayout.AddChild(mmLabel);  					}    					setMoveDistanceControl.HAnchor = Agg.UI.HAnchor.ParentLeft;  					xYZWithDistance.AddChild(setMoveDistanceControl);  				}    				allControlsLeftToRight.AddChild(xYZWithDistance);    #if !__ANDROID__  				allControlsLeftToRight.AddChild(GetHotkeyControlContainer());  #endif  				GuiWidget barBetweenZAndE = new GuiWidget(2' 2);  				barBetweenZAndE.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  				barBetweenZAndE.BackgroundColor = RGBA_Bytes.White;  				barBetweenZAndE.Margin = new BorderDouble(distanceBetweenControls' 5);  				allControlsLeftToRight.AddChild(barBetweenZAndE);    				FlowLayoutWidget eButtons = CreateEButtons(buttonSeparationDistance);  				disableableEButtons = new DisableableWidget()  				{  					Name = "disableableEButtons"'  					HAnchor = HAnchor.FitToChildren'  					VAnchor = VAnchor.FitToChildren | VAnchor.ParentTop'  				};  				disableableEButtons.AddChild(eButtons);    				allControlsLeftToRight.AddChild(disableableEButtons);  				allControlsTopToBottom.AddChild(allControlsLeftToRight);  			}
Magic Number,MatterHackers.MatterControl,JogControls,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,JogControls,The following statement contains a magic number: {  				FlowLayoutWidget allControlsLeftToRight = new FlowLayoutWidget();    				FlowLayoutWidget xYZWithDistance = new FlowLayoutWidget(FlowDirection.TopToBottom);  				{  					FlowLayoutWidget xYZControls = new FlowLayoutWidget();  					{  						GuiWidget xyGrid = CreateXYGridControl(colors' distanceBetweenControls' buttonSeparationDistance);  						xYZControls.AddChild(xyGrid);    						FlowLayoutWidget zButtons = CreateZButtons(XYZColors.zColor' buttonSeparationDistance' out zPlusControl' out zMinusControl);  						zButtons.VAnchor = Agg.UI.VAnchor.ParentBottom;  						xYZControls.AddChild(zButtons);  						xYZWithDistance.AddChild(xYZControls);  					}    					this.KeyDown += (sender' e) =>  					{  						if (hotKeyButton == null ||                               !hotKeyButton.Checked)  						{  							return;  						}    						double moveAmountPositive = AxisMoveAmount;  						double moveAmountNegative = -AxisMoveAmount;  						int eMoveAmountPositive = EAxisMoveAmount;  						int eMoveAmountNegative = -EAxisMoveAmount;    						if (OsInformation.OperatingSystem == OSType.Windows  							|| OsInformation.OperatingSystem == OSType.Mac)  						{  							if (e.KeyCode == Keys.Z)  							{  								PrinterConnectionAndCommunication.Instance.HomeAxis(PrinterConnectionAndCommunication.Axis.Z);  							}  							else if (e.KeyCode == Keys.Y)  							{  								PrinterConnectionAndCommunication.Instance.HomeAxis(PrinterConnectionAndCommunication.Axis.Y);  							}  							else if (e.KeyCode == Keys.X)  							{  								PrinterConnectionAndCommunication.Instance.HomeAxis(PrinterConnectionAndCommunication.Axis.X);  							}  							else if (e.KeyCode == Keys.Left)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.X' moveAmountNegative' MovementControls.XSpeed);  							}  							else if (e.KeyCode == Keys.Right)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.X' moveAmountPositive' MovementControls.XSpeed);  							}  							else if (e.KeyCode == Keys.Up)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Y' moveAmountPositive' MovementControls.YSpeed);  							}  							else if (e.KeyCode == Keys.Down)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Y' moveAmountNegative' MovementControls.YSpeed);  							}  							else if (e.KeyCode == Keys.E)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.E' eMoveAmountPositive' MovementControls.EFeedRate(0));  							}  							else if (e.KeyCode == Keys.R)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.E' eMoveAmountNegative' MovementControls.EFeedRate(0));  							}  						}    						if (OsInformation.OperatingSystem == OSType.Windows)  						{  							if (e.KeyCode == Keys.Home)  							{  								PrinterConnectionAndCommunication.Instance.HomeAxis(PrinterConnectionAndCommunication.Axis.XYZ);  							}  							else if (e.KeyCode == Keys.PageUp)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Z' moveAmountPositive' MovementControls.ZSpeed);  							}  							else if (e.KeyCode == Keys.PageDown)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Z' moveAmountNegative' MovementControls.ZSpeed);  							}  						}  						else if (OsInformation.OperatingSystem == OSType.Mac)  						{  							if (e.KeyCode == (Keys.Back | Keys.Cancel))  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Z' moveAmountPositive' MovementControls.ZSpeed);  							}  							else if (e.KeyCode == Keys.Clear)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Z' moveAmountNegative' MovementControls.ZSpeed);  							}  						}  					};    					// add in some movement radio buttons  					FlowLayoutWidget setMoveDistanceControl = new FlowLayoutWidget();  					TextWidget buttonsLabel = new TextWidget("Distance:"' textColor: RGBA_Bytes.White);  					buttonsLabel.VAnchor = Agg.UI.VAnchor.ParentCenter;  					//setMoveDistanceControl.AddChild(buttonsLabel);    					{  						TextImageButtonFactory buttonFactory = new TextImageButtonFactory();  						buttonFactory.FixedHeight = 20 * GuiWidget.DeviceScale;  						buttonFactory.FixedWidth = 30 * GuiWidget.DeviceScale;  						buttonFactory.fontSize = 8;  						buttonFactory.Margin = new BorderDouble(0);  						buttonFactory.checkedBorderColor = ActiveTheme.Instance.PrimaryTextColor;    						FlowLayoutWidget moveRadioButtons = new FlowLayoutWidget();    						var radioList = new ObservableCollection<GuiWidget>();    						movePointZeroTwoMmButton = buttonFactory.GenerateRadioButton("0.02");  						movePointZeroTwoMmButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  						movePointZeroTwoMmButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetXYZMoveAmount(.02); };  						movePointZeroTwoMmButton.SiblingRadioButtonList = radioList;  						moveRadioButtons.AddChild(movePointZeroTwoMmButton);    						RadioButton pointOneButton = buttonFactory.GenerateRadioButton("0.1");  						pointOneButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  						pointOneButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetXYZMoveAmount(.1); };  						pointOneButton.SiblingRadioButtonList = radioList;  						moveRadioButtons.AddChild(pointOneButton);    						moveOneMmButton = buttonFactory.GenerateRadioButton("1");  						moveOneMmButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  						moveOneMmButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetXYZMoveAmount(1); };  						moveOneMmButton.SiblingRadioButtonList = radioList;  						moveRadioButtons.AddChild(moveOneMmButton);    						tooBigForBabyStepping = new DisableableWidget()  						{  							VAnchor = VAnchor.FitToChildren'  							HAnchor = HAnchor.FitToChildren  						};    						var tooBigFlowLayout = new FlowLayoutWidget();  						tooBigForBabyStepping.AddChild(tooBigFlowLayout);    						tenButton = buttonFactory.GenerateRadioButton("10");  						tenButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  						tenButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetXYZMoveAmount(10); };  						tenButton.SiblingRadioButtonList = radioList;  						tooBigFlowLayout.AddChild(tenButton);    						oneHundredButton = buttonFactory.GenerateRadioButton("100");  						oneHundredButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  						oneHundredButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetXYZMoveAmount(100); };  						oneHundredButton.SiblingRadioButtonList = radioList;  						tooBigFlowLayout.AddChild(oneHundredButton);    						moveRadioButtons.AddChild(tooBigForBabyStepping);    						tenButton.Checked = true;  						moveRadioButtons.Margin = new BorderDouble(0' 3);    						setMoveDistanceControl.AddChild(moveRadioButtons);    						TextWidget mmLabel = new TextWidget("mm"' textColor: ActiveTheme.Instance.PrimaryTextColor' pointSize: 8);  						mmLabel.Margin = new BorderDouble(left: 10);  						mmLabel.VAnchor = Agg.UI.VAnchor.ParentCenter;    						tooBigFlowLayout.AddChild(mmLabel);  					}    					setMoveDistanceControl.HAnchor = Agg.UI.HAnchor.ParentLeft;  					xYZWithDistance.AddChild(setMoveDistanceControl);  				}    				allControlsLeftToRight.AddChild(xYZWithDistance);    #if !__ANDROID__  				allControlsLeftToRight.AddChild(GetHotkeyControlContainer());  #endif  				GuiWidget barBetweenZAndE = new GuiWidget(2' 2);  				barBetweenZAndE.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  				barBetweenZAndE.BackgroundColor = RGBA_Bytes.White;  				barBetweenZAndE.Margin = new BorderDouble(distanceBetweenControls' 5);  				allControlsLeftToRight.AddChild(barBetweenZAndE);    				FlowLayoutWidget eButtons = CreateEButtons(buttonSeparationDistance);  				disableableEButtons = new DisableableWidget()  				{  					Name = "disableableEButtons"'  					HAnchor = HAnchor.FitToChildren'  					VAnchor = VAnchor.FitToChildren | VAnchor.ParentTop'  				};  				disableableEButtons.AddChild(eButtons);    				allControlsLeftToRight.AddChild(disableableEButtons);  				allControlsTopToBottom.AddChild(allControlsLeftToRight);  			}
Magic Number,MatterHackers.MatterControl,JogControls,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,JogControls,The following statement contains a magic number: {  				FlowLayoutWidget allControlsLeftToRight = new FlowLayoutWidget();    				FlowLayoutWidget xYZWithDistance = new FlowLayoutWidget(FlowDirection.TopToBottom);  				{  					FlowLayoutWidget xYZControls = new FlowLayoutWidget();  					{  						GuiWidget xyGrid = CreateXYGridControl(colors' distanceBetweenControls' buttonSeparationDistance);  						xYZControls.AddChild(xyGrid);    						FlowLayoutWidget zButtons = CreateZButtons(XYZColors.zColor' buttonSeparationDistance' out zPlusControl' out zMinusControl);  						zButtons.VAnchor = Agg.UI.VAnchor.ParentBottom;  						xYZControls.AddChild(zButtons);  						xYZWithDistance.AddChild(xYZControls);  					}    					this.KeyDown += (sender' e) =>  					{  						if (hotKeyButton == null ||                               !hotKeyButton.Checked)  						{  							return;  						}    						double moveAmountPositive = AxisMoveAmount;  						double moveAmountNegative = -AxisMoveAmount;  						int eMoveAmountPositive = EAxisMoveAmount;  						int eMoveAmountNegative = -EAxisMoveAmount;    						if (OsInformation.OperatingSystem == OSType.Windows  							|| OsInformation.OperatingSystem == OSType.Mac)  						{  							if (e.KeyCode == Keys.Z)  							{  								PrinterConnectionAndCommunication.Instance.HomeAxis(PrinterConnectionAndCommunication.Axis.Z);  							}  							else if (e.KeyCode == Keys.Y)  							{  								PrinterConnectionAndCommunication.Instance.HomeAxis(PrinterConnectionAndCommunication.Axis.Y);  							}  							else if (e.KeyCode == Keys.X)  							{  								PrinterConnectionAndCommunication.Instance.HomeAxis(PrinterConnectionAndCommunication.Axis.X);  							}  							else if (e.KeyCode == Keys.Left)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.X' moveAmountNegative' MovementControls.XSpeed);  							}  							else if (e.KeyCode == Keys.Right)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.X' moveAmountPositive' MovementControls.XSpeed);  							}  							else if (e.KeyCode == Keys.Up)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Y' moveAmountPositive' MovementControls.YSpeed);  							}  							else if (e.KeyCode == Keys.Down)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Y' moveAmountNegative' MovementControls.YSpeed);  							}  							else if (e.KeyCode == Keys.E)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.E' eMoveAmountPositive' MovementControls.EFeedRate(0));  							}  							else if (e.KeyCode == Keys.R)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.E' eMoveAmountNegative' MovementControls.EFeedRate(0));  							}  						}    						if (OsInformation.OperatingSystem == OSType.Windows)  						{  							if (e.KeyCode == Keys.Home)  							{  								PrinterConnectionAndCommunication.Instance.HomeAxis(PrinterConnectionAndCommunication.Axis.XYZ);  							}  							else if (e.KeyCode == Keys.PageUp)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Z' moveAmountPositive' MovementControls.ZSpeed);  							}  							else if (e.KeyCode == Keys.PageDown)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Z' moveAmountNegative' MovementControls.ZSpeed);  							}  						}  						else if (OsInformation.OperatingSystem == OSType.Mac)  						{  							if (e.KeyCode == (Keys.Back | Keys.Cancel))  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Z' moveAmountPositive' MovementControls.ZSpeed);  							}  							else if (e.KeyCode == Keys.Clear)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Z' moveAmountNegative' MovementControls.ZSpeed);  							}  						}  					};    					// add in some movement radio buttons  					FlowLayoutWidget setMoveDistanceControl = new FlowLayoutWidget();  					TextWidget buttonsLabel = new TextWidget("Distance:"' textColor: RGBA_Bytes.White);  					buttonsLabel.VAnchor = Agg.UI.VAnchor.ParentCenter;  					//setMoveDistanceControl.AddChild(buttonsLabel);    					{  						TextImageButtonFactory buttonFactory = new TextImageButtonFactory();  						buttonFactory.FixedHeight = 20 * GuiWidget.DeviceScale;  						buttonFactory.FixedWidth = 30 * GuiWidget.DeviceScale;  						buttonFactory.fontSize = 8;  						buttonFactory.Margin = new BorderDouble(0);  						buttonFactory.checkedBorderColor = ActiveTheme.Instance.PrimaryTextColor;    						FlowLayoutWidget moveRadioButtons = new FlowLayoutWidget();    						var radioList = new ObservableCollection<GuiWidget>();    						movePointZeroTwoMmButton = buttonFactory.GenerateRadioButton("0.02");  						movePointZeroTwoMmButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  						movePointZeroTwoMmButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetXYZMoveAmount(.02); };  						movePointZeroTwoMmButton.SiblingRadioButtonList = radioList;  						moveRadioButtons.AddChild(movePointZeroTwoMmButton);    						RadioButton pointOneButton = buttonFactory.GenerateRadioButton("0.1");  						pointOneButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  						pointOneButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetXYZMoveAmount(.1); };  						pointOneButton.SiblingRadioButtonList = radioList;  						moveRadioButtons.AddChild(pointOneButton);    						moveOneMmButton = buttonFactory.GenerateRadioButton("1");  						moveOneMmButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  						moveOneMmButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetXYZMoveAmount(1); };  						moveOneMmButton.SiblingRadioButtonList = radioList;  						moveRadioButtons.AddChild(moveOneMmButton);    						tooBigForBabyStepping = new DisableableWidget()  						{  							VAnchor = VAnchor.FitToChildren'  							HAnchor = HAnchor.FitToChildren  						};    						var tooBigFlowLayout = new FlowLayoutWidget();  						tooBigForBabyStepping.AddChild(tooBigFlowLayout);    						tenButton = buttonFactory.GenerateRadioButton("10");  						tenButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  						tenButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetXYZMoveAmount(10); };  						tenButton.SiblingRadioButtonList = radioList;  						tooBigFlowLayout.AddChild(tenButton);    						oneHundredButton = buttonFactory.GenerateRadioButton("100");  						oneHundredButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  						oneHundredButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetXYZMoveAmount(100); };  						oneHundredButton.SiblingRadioButtonList = radioList;  						tooBigFlowLayout.AddChild(oneHundredButton);    						moveRadioButtons.AddChild(tooBigForBabyStepping);    						tenButton.Checked = true;  						moveRadioButtons.Margin = new BorderDouble(0' 3);    						setMoveDistanceControl.AddChild(moveRadioButtons);    						TextWidget mmLabel = new TextWidget("mm"' textColor: ActiveTheme.Instance.PrimaryTextColor' pointSize: 8);  						mmLabel.Margin = new BorderDouble(left: 10);  						mmLabel.VAnchor = Agg.UI.VAnchor.ParentCenter;    						tooBigFlowLayout.AddChild(mmLabel);  					}    					setMoveDistanceControl.HAnchor = Agg.UI.HAnchor.ParentLeft;  					xYZWithDistance.AddChild(setMoveDistanceControl);  				}    				allControlsLeftToRight.AddChild(xYZWithDistance);    #if !__ANDROID__  				allControlsLeftToRight.AddChild(GetHotkeyControlContainer());  #endif  				GuiWidget barBetweenZAndE = new GuiWidget(2' 2);  				barBetweenZAndE.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  				barBetweenZAndE.BackgroundColor = RGBA_Bytes.White;  				barBetweenZAndE.Margin = new BorderDouble(distanceBetweenControls' 5);  				allControlsLeftToRight.AddChild(barBetweenZAndE);    				FlowLayoutWidget eButtons = CreateEButtons(buttonSeparationDistance);  				disableableEButtons = new DisableableWidget()  				{  					Name = "disableableEButtons"'  					HAnchor = HAnchor.FitToChildren'  					VAnchor = VAnchor.FitToChildren | VAnchor.ParentTop'  				};  				disableableEButtons.AddChild(eButtons);    				allControlsLeftToRight.AddChild(disableableEButtons);  				allControlsTopToBottom.AddChild(allControlsLeftToRight);  			}
Magic Number,MatterHackers.MatterControl,JogControls,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,JogControls,The following statement contains a magic number: {  				FlowLayoutWidget allControlsLeftToRight = new FlowLayoutWidget();    				FlowLayoutWidget xYZWithDistance = new FlowLayoutWidget(FlowDirection.TopToBottom);  				{  					FlowLayoutWidget xYZControls = new FlowLayoutWidget();  					{  						GuiWidget xyGrid = CreateXYGridControl(colors' distanceBetweenControls' buttonSeparationDistance);  						xYZControls.AddChild(xyGrid);    						FlowLayoutWidget zButtons = CreateZButtons(XYZColors.zColor' buttonSeparationDistance' out zPlusControl' out zMinusControl);  						zButtons.VAnchor = Agg.UI.VAnchor.ParentBottom;  						xYZControls.AddChild(zButtons);  						xYZWithDistance.AddChild(xYZControls);  					}    					this.KeyDown += (sender' e) =>  					{  						if (hotKeyButton == null ||                               !hotKeyButton.Checked)  						{  							return;  						}    						double moveAmountPositive = AxisMoveAmount;  						double moveAmountNegative = -AxisMoveAmount;  						int eMoveAmountPositive = EAxisMoveAmount;  						int eMoveAmountNegative = -EAxisMoveAmount;    						if (OsInformation.OperatingSystem == OSType.Windows  							|| OsInformation.OperatingSystem == OSType.Mac)  						{  							if (e.KeyCode == Keys.Z)  							{  								PrinterConnectionAndCommunication.Instance.HomeAxis(PrinterConnectionAndCommunication.Axis.Z);  							}  							else if (e.KeyCode == Keys.Y)  							{  								PrinterConnectionAndCommunication.Instance.HomeAxis(PrinterConnectionAndCommunication.Axis.Y);  							}  							else if (e.KeyCode == Keys.X)  							{  								PrinterConnectionAndCommunication.Instance.HomeAxis(PrinterConnectionAndCommunication.Axis.X);  							}  							else if (e.KeyCode == Keys.Left)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.X' moveAmountNegative' MovementControls.XSpeed);  							}  							else if (e.KeyCode == Keys.Right)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.X' moveAmountPositive' MovementControls.XSpeed);  							}  							else if (e.KeyCode == Keys.Up)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Y' moveAmountPositive' MovementControls.YSpeed);  							}  							else if (e.KeyCode == Keys.Down)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Y' moveAmountNegative' MovementControls.YSpeed);  							}  							else if (e.KeyCode == Keys.E)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.E' eMoveAmountPositive' MovementControls.EFeedRate(0));  							}  							else if (e.KeyCode == Keys.R)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.E' eMoveAmountNegative' MovementControls.EFeedRate(0));  							}  						}    						if (OsInformation.OperatingSystem == OSType.Windows)  						{  							if (e.KeyCode == Keys.Home)  							{  								PrinterConnectionAndCommunication.Instance.HomeAxis(PrinterConnectionAndCommunication.Axis.XYZ);  							}  							else if (e.KeyCode == Keys.PageUp)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Z' moveAmountPositive' MovementControls.ZSpeed);  							}  							else if (e.KeyCode == Keys.PageDown)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Z' moveAmountNegative' MovementControls.ZSpeed);  							}  						}  						else if (OsInformation.OperatingSystem == OSType.Mac)  						{  							if (e.KeyCode == (Keys.Back | Keys.Cancel))  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Z' moveAmountPositive' MovementControls.ZSpeed);  							}  							else if (e.KeyCode == Keys.Clear)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Z' moveAmountNegative' MovementControls.ZSpeed);  							}  						}  					};    					// add in some movement radio buttons  					FlowLayoutWidget setMoveDistanceControl = new FlowLayoutWidget();  					TextWidget buttonsLabel = new TextWidget("Distance:"' textColor: RGBA_Bytes.White);  					buttonsLabel.VAnchor = Agg.UI.VAnchor.ParentCenter;  					//setMoveDistanceControl.AddChild(buttonsLabel);    					{  						TextImageButtonFactory buttonFactory = new TextImageButtonFactory();  						buttonFactory.FixedHeight = 20 * GuiWidget.DeviceScale;  						buttonFactory.FixedWidth = 30 * GuiWidget.DeviceScale;  						buttonFactory.fontSize = 8;  						buttonFactory.Margin = new BorderDouble(0);  						buttonFactory.checkedBorderColor = ActiveTheme.Instance.PrimaryTextColor;    						FlowLayoutWidget moveRadioButtons = new FlowLayoutWidget();    						var radioList = new ObservableCollection<GuiWidget>();    						movePointZeroTwoMmButton = buttonFactory.GenerateRadioButton("0.02");  						movePointZeroTwoMmButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  						movePointZeroTwoMmButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetXYZMoveAmount(.02); };  						movePointZeroTwoMmButton.SiblingRadioButtonList = radioList;  						moveRadioButtons.AddChild(movePointZeroTwoMmButton);    						RadioButton pointOneButton = buttonFactory.GenerateRadioButton("0.1");  						pointOneButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  						pointOneButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetXYZMoveAmount(.1); };  						pointOneButton.SiblingRadioButtonList = radioList;  						moveRadioButtons.AddChild(pointOneButton);    						moveOneMmButton = buttonFactory.GenerateRadioButton("1");  						moveOneMmButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  						moveOneMmButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetXYZMoveAmount(1); };  						moveOneMmButton.SiblingRadioButtonList = radioList;  						moveRadioButtons.AddChild(moveOneMmButton);    						tooBigForBabyStepping = new DisableableWidget()  						{  							VAnchor = VAnchor.FitToChildren'  							HAnchor = HAnchor.FitToChildren  						};    						var tooBigFlowLayout = new FlowLayoutWidget();  						tooBigForBabyStepping.AddChild(tooBigFlowLayout);    						tenButton = buttonFactory.GenerateRadioButton("10");  						tenButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  						tenButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetXYZMoveAmount(10); };  						tenButton.SiblingRadioButtonList = radioList;  						tooBigFlowLayout.AddChild(tenButton);    						oneHundredButton = buttonFactory.GenerateRadioButton("100");  						oneHundredButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  						oneHundredButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetXYZMoveAmount(100); };  						oneHundredButton.SiblingRadioButtonList = radioList;  						tooBigFlowLayout.AddChild(oneHundredButton);    						moveRadioButtons.AddChild(tooBigForBabyStepping);    						tenButton.Checked = true;  						moveRadioButtons.Margin = new BorderDouble(0' 3);    						setMoveDistanceControl.AddChild(moveRadioButtons);    						TextWidget mmLabel = new TextWidget("mm"' textColor: ActiveTheme.Instance.PrimaryTextColor' pointSize: 8);  						mmLabel.Margin = new BorderDouble(left: 10);  						mmLabel.VAnchor = Agg.UI.VAnchor.ParentCenter;    						tooBigFlowLayout.AddChild(mmLabel);  					}    					setMoveDistanceControl.HAnchor = Agg.UI.HAnchor.ParentLeft;  					xYZWithDistance.AddChild(setMoveDistanceControl);  				}    				allControlsLeftToRight.AddChild(xYZWithDistance);    #if !__ANDROID__  				allControlsLeftToRight.AddChild(GetHotkeyControlContainer());  #endif  				GuiWidget barBetweenZAndE = new GuiWidget(2' 2);  				barBetweenZAndE.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  				barBetweenZAndE.BackgroundColor = RGBA_Bytes.White;  				barBetweenZAndE.Margin = new BorderDouble(distanceBetweenControls' 5);  				allControlsLeftToRight.AddChild(barBetweenZAndE);    				FlowLayoutWidget eButtons = CreateEButtons(buttonSeparationDistance);  				disableableEButtons = new DisableableWidget()  				{  					Name = "disableableEButtons"'  					HAnchor = HAnchor.FitToChildren'  					VAnchor = VAnchor.FitToChildren | VAnchor.ParentTop'  				};  				disableableEButtons.AddChild(eButtons);    				allControlsLeftToRight.AddChild(disableableEButtons);  				allControlsTopToBottom.AddChild(allControlsLeftToRight);  			}
Magic Number,MatterHackers.MatterControl,JogControls,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,JogControls,The following statement contains a magic number: {  				FlowLayoutWidget allControlsLeftToRight = new FlowLayoutWidget();    				FlowLayoutWidget xYZWithDistance = new FlowLayoutWidget(FlowDirection.TopToBottom);  				{  					FlowLayoutWidget xYZControls = new FlowLayoutWidget();  					{  						GuiWidget xyGrid = CreateXYGridControl(colors' distanceBetweenControls' buttonSeparationDistance);  						xYZControls.AddChild(xyGrid);    						FlowLayoutWidget zButtons = CreateZButtons(XYZColors.zColor' buttonSeparationDistance' out zPlusControl' out zMinusControl);  						zButtons.VAnchor = Agg.UI.VAnchor.ParentBottom;  						xYZControls.AddChild(zButtons);  						xYZWithDistance.AddChild(xYZControls);  					}    					this.KeyDown += (sender' e) =>  					{  						if (hotKeyButton == null ||                               !hotKeyButton.Checked)  						{  							return;  						}    						double moveAmountPositive = AxisMoveAmount;  						double moveAmountNegative = -AxisMoveAmount;  						int eMoveAmountPositive = EAxisMoveAmount;  						int eMoveAmountNegative = -EAxisMoveAmount;    						if (OsInformation.OperatingSystem == OSType.Windows  							|| OsInformation.OperatingSystem == OSType.Mac)  						{  							if (e.KeyCode == Keys.Z)  							{  								PrinterConnectionAndCommunication.Instance.HomeAxis(PrinterConnectionAndCommunication.Axis.Z);  							}  							else if (e.KeyCode == Keys.Y)  							{  								PrinterConnectionAndCommunication.Instance.HomeAxis(PrinterConnectionAndCommunication.Axis.Y);  							}  							else if (e.KeyCode == Keys.X)  							{  								PrinterConnectionAndCommunication.Instance.HomeAxis(PrinterConnectionAndCommunication.Axis.X);  							}  							else if (e.KeyCode == Keys.Left)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.X' moveAmountNegative' MovementControls.XSpeed);  							}  							else if (e.KeyCode == Keys.Right)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.X' moveAmountPositive' MovementControls.XSpeed);  							}  							else if (e.KeyCode == Keys.Up)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Y' moveAmountPositive' MovementControls.YSpeed);  							}  							else if (e.KeyCode == Keys.Down)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Y' moveAmountNegative' MovementControls.YSpeed);  							}  							else if (e.KeyCode == Keys.E)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.E' eMoveAmountPositive' MovementControls.EFeedRate(0));  							}  							else if (e.KeyCode == Keys.R)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.E' eMoveAmountNegative' MovementControls.EFeedRate(0));  							}  						}    						if (OsInformation.OperatingSystem == OSType.Windows)  						{  							if (e.KeyCode == Keys.Home)  							{  								PrinterConnectionAndCommunication.Instance.HomeAxis(PrinterConnectionAndCommunication.Axis.XYZ);  							}  							else if (e.KeyCode == Keys.PageUp)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Z' moveAmountPositive' MovementControls.ZSpeed);  							}  							else if (e.KeyCode == Keys.PageDown)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Z' moveAmountNegative' MovementControls.ZSpeed);  							}  						}  						else if (OsInformation.OperatingSystem == OSType.Mac)  						{  							if (e.KeyCode == (Keys.Back | Keys.Cancel))  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Z' moveAmountPositive' MovementControls.ZSpeed);  							}  							else if (e.KeyCode == Keys.Clear)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Z' moveAmountNegative' MovementControls.ZSpeed);  							}  						}  					};    					// add in some movement radio buttons  					FlowLayoutWidget setMoveDistanceControl = new FlowLayoutWidget();  					TextWidget buttonsLabel = new TextWidget("Distance:"' textColor: RGBA_Bytes.White);  					buttonsLabel.VAnchor = Agg.UI.VAnchor.ParentCenter;  					//setMoveDistanceControl.AddChild(buttonsLabel);    					{  						TextImageButtonFactory buttonFactory = new TextImageButtonFactory();  						buttonFactory.FixedHeight = 20 * GuiWidget.DeviceScale;  						buttonFactory.FixedWidth = 30 * GuiWidget.DeviceScale;  						buttonFactory.fontSize = 8;  						buttonFactory.Margin = new BorderDouble(0);  						buttonFactory.checkedBorderColor = ActiveTheme.Instance.PrimaryTextColor;    						FlowLayoutWidget moveRadioButtons = new FlowLayoutWidget();    						var radioList = new ObservableCollection<GuiWidget>();    						movePointZeroTwoMmButton = buttonFactory.GenerateRadioButton("0.02");  						movePointZeroTwoMmButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  						movePointZeroTwoMmButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetXYZMoveAmount(.02); };  						movePointZeroTwoMmButton.SiblingRadioButtonList = radioList;  						moveRadioButtons.AddChild(movePointZeroTwoMmButton);    						RadioButton pointOneButton = buttonFactory.GenerateRadioButton("0.1");  						pointOneButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  						pointOneButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetXYZMoveAmount(.1); };  						pointOneButton.SiblingRadioButtonList = radioList;  						moveRadioButtons.AddChild(pointOneButton);    						moveOneMmButton = buttonFactory.GenerateRadioButton("1");  						moveOneMmButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  						moveOneMmButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetXYZMoveAmount(1); };  						moveOneMmButton.SiblingRadioButtonList = radioList;  						moveRadioButtons.AddChild(moveOneMmButton);    						tooBigForBabyStepping = new DisableableWidget()  						{  							VAnchor = VAnchor.FitToChildren'  							HAnchor = HAnchor.FitToChildren  						};    						var tooBigFlowLayout = new FlowLayoutWidget();  						tooBigForBabyStepping.AddChild(tooBigFlowLayout);    						tenButton = buttonFactory.GenerateRadioButton("10");  						tenButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  						tenButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetXYZMoveAmount(10); };  						tenButton.SiblingRadioButtonList = radioList;  						tooBigFlowLayout.AddChild(tenButton);    						oneHundredButton = buttonFactory.GenerateRadioButton("100");  						oneHundredButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  						oneHundredButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetXYZMoveAmount(100); };  						oneHundredButton.SiblingRadioButtonList = radioList;  						tooBigFlowLayout.AddChild(oneHundredButton);    						moveRadioButtons.AddChild(tooBigForBabyStepping);    						tenButton.Checked = true;  						moveRadioButtons.Margin = new BorderDouble(0' 3);    						setMoveDistanceControl.AddChild(moveRadioButtons);    						TextWidget mmLabel = new TextWidget("mm"' textColor: ActiveTheme.Instance.PrimaryTextColor' pointSize: 8);  						mmLabel.Margin = new BorderDouble(left: 10);  						mmLabel.VAnchor = Agg.UI.VAnchor.ParentCenter;    						tooBigFlowLayout.AddChild(mmLabel);  					}    					setMoveDistanceControl.HAnchor = Agg.UI.HAnchor.ParentLeft;  					xYZWithDistance.AddChild(setMoveDistanceControl);  				}    				allControlsLeftToRight.AddChild(xYZWithDistance);    #if !__ANDROID__  				allControlsLeftToRight.AddChild(GetHotkeyControlContainer());  #endif  				GuiWidget barBetweenZAndE = new GuiWidget(2' 2);  				barBetweenZAndE.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  				barBetweenZAndE.BackgroundColor = RGBA_Bytes.White;  				barBetweenZAndE.Margin = new BorderDouble(distanceBetweenControls' 5);  				allControlsLeftToRight.AddChild(barBetweenZAndE);    				FlowLayoutWidget eButtons = CreateEButtons(buttonSeparationDistance);  				disableableEButtons = new DisableableWidget()  				{  					Name = "disableableEButtons"'  					HAnchor = HAnchor.FitToChildren'  					VAnchor = VAnchor.FitToChildren | VAnchor.ParentTop'  				};  				disableableEButtons.AddChild(eButtons);    				allControlsLeftToRight.AddChild(disableableEButtons);  				allControlsTopToBottom.AddChild(allControlsLeftToRight);  			}
Magic Number,MatterHackers.MatterControl,JogControls,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,JogControls,The following statement contains a magic number: {  				FlowLayoutWidget allControlsLeftToRight = new FlowLayoutWidget();    				FlowLayoutWidget xYZWithDistance = new FlowLayoutWidget(FlowDirection.TopToBottom);  				{  					FlowLayoutWidget xYZControls = new FlowLayoutWidget();  					{  						GuiWidget xyGrid = CreateXYGridControl(colors' distanceBetweenControls' buttonSeparationDistance);  						xYZControls.AddChild(xyGrid);    						FlowLayoutWidget zButtons = CreateZButtons(XYZColors.zColor' buttonSeparationDistance' out zPlusControl' out zMinusControl);  						zButtons.VAnchor = Agg.UI.VAnchor.ParentBottom;  						xYZControls.AddChild(zButtons);  						xYZWithDistance.AddChild(xYZControls);  					}    					this.KeyDown += (sender' e) =>  					{  						if (hotKeyButton == null ||                               !hotKeyButton.Checked)  						{  							return;  						}    						double moveAmountPositive = AxisMoveAmount;  						double moveAmountNegative = -AxisMoveAmount;  						int eMoveAmountPositive = EAxisMoveAmount;  						int eMoveAmountNegative = -EAxisMoveAmount;    						if (OsInformation.OperatingSystem == OSType.Windows  							|| OsInformation.OperatingSystem == OSType.Mac)  						{  							if (e.KeyCode == Keys.Z)  							{  								PrinterConnectionAndCommunication.Instance.HomeAxis(PrinterConnectionAndCommunication.Axis.Z);  							}  							else if (e.KeyCode == Keys.Y)  							{  								PrinterConnectionAndCommunication.Instance.HomeAxis(PrinterConnectionAndCommunication.Axis.Y);  							}  							else if (e.KeyCode == Keys.X)  							{  								PrinterConnectionAndCommunication.Instance.HomeAxis(PrinterConnectionAndCommunication.Axis.X);  							}  							else if (e.KeyCode == Keys.Left)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.X' moveAmountNegative' MovementControls.XSpeed);  							}  							else if (e.KeyCode == Keys.Right)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.X' moveAmountPositive' MovementControls.XSpeed);  							}  							else if (e.KeyCode == Keys.Up)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Y' moveAmountPositive' MovementControls.YSpeed);  							}  							else if (e.KeyCode == Keys.Down)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Y' moveAmountNegative' MovementControls.YSpeed);  							}  							else if (e.KeyCode == Keys.E)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.E' eMoveAmountPositive' MovementControls.EFeedRate(0));  							}  							else if (e.KeyCode == Keys.R)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.E' eMoveAmountNegative' MovementControls.EFeedRate(0));  							}  						}    						if (OsInformation.OperatingSystem == OSType.Windows)  						{  							if (e.KeyCode == Keys.Home)  							{  								PrinterConnectionAndCommunication.Instance.HomeAxis(PrinterConnectionAndCommunication.Axis.XYZ);  							}  							else if (e.KeyCode == Keys.PageUp)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Z' moveAmountPositive' MovementControls.ZSpeed);  							}  							else if (e.KeyCode == Keys.PageDown)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Z' moveAmountNegative' MovementControls.ZSpeed);  							}  						}  						else if (OsInformation.OperatingSystem == OSType.Mac)  						{  							if (e.KeyCode == (Keys.Back | Keys.Cancel))  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Z' moveAmountPositive' MovementControls.ZSpeed);  							}  							else if (e.KeyCode == Keys.Clear)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Z' moveAmountNegative' MovementControls.ZSpeed);  							}  						}  					};    					// add in some movement radio buttons  					FlowLayoutWidget setMoveDistanceControl = new FlowLayoutWidget();  					TextWidget buttonsLabel = new TextWidget("Distance:"' textColor: RGBA_Bytes.White);  					buttonsLabel.VAnchor = Agg.UI.VAnchor.ParentCenter;  					//setMoveDistanceControl.AddChild(buttonsLabel);    					{  						TextImageButtonFactory buttonFactory = new TextImageButtonFactory();  						buttonFactory.FixedHeight = 20 * GuiWidget.DeviceScale;  						buttonFactory.FixedWidth = 30 * GuiWidget.DeviceScale;  						buttonFactory.fontSize = 8;  						buttonFactory.Margin = new BorderDouble(0);  						buttonFactory.checkedBorderColor = ActiveTheme.Instance.PrimaryTextColor;    						FlowLayoutWidget moveRadioButtons = new FlowLayoutWidget();    						var radioList = new ObservableCollection<GuiWidget>();    						movePointZeroTwoMmButton = buttonFactory.GenerateRadioButton("0.02");  						movePointZeroTwoMmButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  						movePointZeroTwoMmButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetXYZMoveAmount(.02); };  						movePointZeroTwoMmButton.SiblingRadioButtonList = radioList;  						moveRadioButtons.AddChild(movePointZeroTwoMmButton);    						RadioButton pointOneButton = buttonFactory.GenerateRadioButton("0.1");  						pointOneButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  						pointOneButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetXYZMoveAmount(.1); };  						pointOneButton.SiblingRadioButtonList = radioList;  						moveRadioButtons.AddChild(pointOneButton);    						moveOneMmButton = buttonFactory.GenerateRadioButton("1");  						moveOneMmButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  						moveOneMmButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetXYZMoveAmount(1); };  						moveOneMmButton.SiblingRadioButtonList = radioList;  						moveRadioButtons.AddChild(moveOneMmButton);    						tooBigForBabyStepping = new DisableableWidget()  						{  							VAnchor = VAnchor.FitToChildren'  							HAnchor = HAnchor.FitToChildren  						};    						var tooBigFlowLayout = new FlowLayoutWidget();  						tooBigForBabyStepping.AddChild(tooBigFlowLayout);    						tenButton = buttonFactory.GenerateRadioButton("10");  						tenButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  						tenButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetXYZMoveAmount(10); };  						tenButton.SiblingRadioButtonList = radioList;  						tooBigFlowLayout.AddChild(tenButton);    						oneHundredButton = buttonFactory.GenerateRadioButton("100");  						oneHundredButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  						oneHundredButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetXYZMoveAmount(100); };  						oneHundredButton.SiblingRadioButtonList = radioList;  						tooBigFlowLayout.AddChild(oneHundredButton);    						moveRadioButtons.AddChild(tooBigForBabyStepping);    						tenButton.Checked = true;  						moveRadioButtons.Margin = new BorderDouble(0' 3);    						setMoveDistanceControl.AddChild(moveRadioButtons);    						TextWidget mmLabel = new TextWidget("mm"' textColor: ActiveTheme.Instance.PrimaryTextColor' pointSize: 8);  						mmLabel.Margin = new BorderDouble(left: 10);  						mmLabel.VAnchor = Agg.UI.VAnchor.ParentCenter;    						tooBigFlowLayout.AddChild(mmLabel);  					}    					setMoveDistanceControl.HAnchor = Agg.UI.HAnchor.ParentLeft;  					xYZWithDistance.AddChild(setMoveDistanceControl);  				}    				allControlsLeftToRight.AddChild(xYZWithDistance);    #if !__ANDROID__  				allControlsLeftToRight.AddChild(GetHotkeyControlContainer());  #endif  				GuiWidget barBetweenZAndE = new GuiWidget(2' 2);  				barBetweenZAndE.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  				barBetweenZAndE.BackgroundColor = RGBA_Bytes.White;  				barBetweenZAndE.Margin = new BorderDouble(distanceBetweenControls' 5);  				allControlsLeftToRight.AddChild(barBetweenZAndE);    				FlowLayoutWidget eButtons = CreateEButtons(buttonSeparationDistance);  				disableableEButtons = new DisableableWidget()  				{  					Name = "disableableEButtons"'  					HAnchor = HAnchor.FitToChildren'  					VAnchor = VAnchor.FitToChildren | VAnchor.ParentTop'  				};  				disableableEButtons.AddChild(eButtons);    				allControlsLeftToRight.AddChild(disableableEButtons);  				allControlsTopToBottom.AddChild(allControlsLeftToRight);  			}
Magic Number,MatterHackers.MatterControl,JogControls,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,JogControls,The following statement contains a magic number: {  				FlowLayoutWidget allControlsLeftToRight = new FlowLayoutWidget();    				FlowLayoutWidget xYZWithDistance = new FlowLayoutWidget(FlowDirection.TopToBottom);  				{  					FlowLayoutWidget xYZControls = new FlowLayoutWidget();  					{  						GuiWidget xyGrid = CreateXYGridControl(colors' distanceBetweenControls' buttonSeparationDistance);  						xYZControls.AddChild(xyGrid);    						FlowLayoutWidget zButtons = CreateZButtons(XYZColors.zColor' buttonSeparationDistance' out zPlusControl' out zMinusControl);  						zButtons.VAnchor = Agg.UI.VAnchor.ParentBottom;  						xYZControls.AddChild(zButtons);  						xYZWithDistance.AddChild(xYZControls);  					}    					this.KeyDown += (sender' e) =>  					{  						if (hotKeyButton == null ||                               !hotKeyButton.Checked)  						{  							return;  						}    						double moveAmountPositive = AxisMoveAmount;  						double moveAmountNegative = -AxisMoveAmount;  						int eMoveAmountPositive = EAxisMoveAmount;  						int eMoveAmountNegative = -EAxisMoveAmount;    						if (OsInformation.OperatingSystem == OSType.Windows  							|| OsInformation.OperatingSystem == OSType.Mac)  						{  							if (e.KeyCode == Keys.Z)  							{  								PrinterConnectionAndCommunication.Instance.HomeAxis(PrinterConnectionAndCommunication.Axis.Z);  							}  							else if (e.KeyCode == Keys.Y)  							{  								PrinterConnectionAndCommunication.Instance.HomeAxis(PrinterConnectionAndCommunication.Axis.Y);  							}  							else if (e.KeyCode == Keys.X)  							{  								PrinterConnectionAndCommunication.Instance.HomeAxis(PrinterConnectionAndCommunication.Axis.X);  							}  							else if (e.KeyCode == Keys.Left)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.X' moveAmountNegative' MovementControls.XSpeed);  							}  							else if (e.KeyCode == Keys.Right)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.X' moveAmountPositive' MovementControls.XSpeed);  							}  							else if (e.KeyCode == Keys.Up)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Y' moveAmountPositive' MovementControls.YSpeed);  							}  							else if (e.KeyCode == Keys.Down)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Y' moveAmountNegative' MovementControls.YSpeed);  							}  							else if (e.KeyCode == Keys.E)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.E' eMoveAmountPositive' MovementControls.EFeedRate(0));  							}  							else if (e.KeyCode == Keys.R)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.E' eMoveAmountNegative' MovementControls.EFeedRate(0));  							}  						}    						if (OsInformation.OperatingSystem == OSType.Windows)  						{  							if (e.KeyCode == Keys.Home)  							{  								PrinterConnectionAndCommunication.Instance.HomeAxis(PrinterConnectionAndCommunication.Axis.XYZ);  							}  							else if (e.KeyCode == Keys.PageUp)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Z' moveAmountPositive' MovementControls.ZSpeed);  							}  							else if (e.KeyCode == Keys.PageDown)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Z' moveAmountNegative' MovementControls.ZSpeed);  							}  						}  						else if (OsInformation.OperatingSystem == OSType.Mac)  						{  							if (e.KeyCode == (Keys.Back | Keys.Cancel))  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Z' moveAmountPositive' MovementControls.ZSpeed);  							}  							else if (e.KeyCode == Keys.Clear)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Z' moveAmountNegative' MovementControls.ZSpeed);  							}  						}  					};    					// add in some movement radio buttons  					FlowLayoutWidget setMoveDistanceControl = new FlowLayoutWidget();  					TextWidget buttonsLabel = new TextWidget("Distance:"' textColor: RGBA_Bytes.White);  					buttonsLabel.VAnchor = Agg.UI.VAnchor.ParentCenter;  					//setMoveDistanceControl.AddChild(buttonsLabel);    					{  						TextImageButtonFactory buttonFactory = new TextImageButtonFactory();  						buttonFactory.FixedHeight = 20 * GuiWidget.DeviceScale;  						buttonFactory.FixedWidth = 30 * GuiWidget.DeviceScale;  						buttonFactory.fontSize = 8;  						buttonFactory.Margin = new BorderDouble(0);  						buttonFactory.checkedBorderColor = ActiveTheme.Instance.PrimaryTextColor;    						FlowLayoutWidget moveRadioButtons = new FlowLayoutWidget();    						var radioList = new ObservableCollection<GuiWidget>();    						movePointZeroTwoMmButton = buttonFactory.GenerateRadioButton("0.02");  						movePointZeroTwoMmButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  						movePointZeroTwoMmButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetXYZMoveAmount(.02); };  						movePointZeroTwoMmButton.SiblingRadioButtonList = radioList;  						moveRadioButtons.AddChild(movePointZeroTwoMmButton);    						RadioButton pointOneButton = buttonFactory.GenerateRadioButton("0.1");  						pointOneButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  						pointOneButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetXYZMoveAmount(.1); };  						pointOneButton.SiblingRadioButtonList = radioList;  						moveRadioButtons.AddChild(pointOneButton);    						moveOneMmButton = buttonFactory.GenerateRadioButton("1");  						moveOneMmButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  						moveOneMmButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetXYZMoveAmount(1); };  						moveOneMmButton.SiblingRadioButtonList = radioList;  						moveRadioButtons.AddChild(moveOneMmButton);    						tooBigForBabyStepping = new DisableableWidget()  						{  							VAnchor = VAnchor.FitToChildren'  							HAnchor = HAnchor.FitToChildren  						};    						var tooBigFlowLayout = new FlowLayoutWidget();  						tooBigForBabyStepping.AddChild(tooBigFlowLayout);    						tenButton = buttonFactory.GenerateRadioButton("10");  						tenButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  						tenButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetXYZMoveAmount(10); };  						tenButton.SiblingRadioButtonList = radioList;  						tooBigFlowLayout.AddChild(tenButton);    						oneHundredButton = buttonFactory.GenerateRadioButton("100");  						oneHundredButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  						oneHundredButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetXYZMoveAmount(100); };  						oneHundredButton.SiblingRadioButtonList = radioList;  						tooBigFlowLayout.AddChild(oneHundredButton);    						moveRadioButtons.AddChild(tooBigForBabyStepping);    						tenButton.Checked = true;  						moveRadioButtons.Margin = new BorderDouble(0' 3);    						setMoveDistanceControl.AddChild(moveRadioButtons);    						TextWidget mmLabel = new TextWidget("mm"' textColor: ActiveTheme.Instance.PrimaryTextColor' pointSize: 8);  						mmLabel.Margin = new BorderDouble(left: 10);  						mmLabel.VAnchor = Agg.UI.VAnchor.ParentCenter;    						tooBigFlowLayout.AddChild(mmLabel);  					}    					setMoveDistanceControl.HAnchor = Agg.UI.HAnchor.ParentLeft;  					xYZWithDistance.AddChild(setMoveDistanceControl);  				}    				allControlsLeftToRight.AddChild(xYZWithDistance);    #if !__ANDROID__  				allControlsLeftToRight.AddChild(GetHotkeyControlContainer());  #endif  				GuiWidget barBetweenZAndE = new GuiWidget(2' 2);  				barBetweenZAndE.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  				barBetweenZAndE.BackgroundColor = RGBA_Bytes.White;  				barBetweenZAndE.Margin = new BorderDouble(distanceBetweenControls' 5);  				allControlsLeftToRight.AddChild(barBetweenZAndE);    				FlowLayoutWidget eButtons = CreateEButtons(buttonSeparationDistance);  				disableableEButtons = new DisableableWidget()  				{  					Name = "disableableEButtons"'  					HAnchor = HAnchor.FitToChildren'  					VAnchor = VAnchor.FitToChildren | VAnchor.ParentTop'  				};  				disableableEButtons.AddChild(eButtons);    				allControlsLeftToRight.AddChild(disableableEButtons);  				allControlsTopToBottom.AddChild(allControlsLeftToRight);  			}
Magic Number,MatterHackers.MatterControl,JogControls,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,JogControls,The following statement contains a magic number: {  				FlowLayoutWidget allControlsLeftToRight = new FlowLayoutWidget();    				FlowLayoutWidget xYZWithDistance = new FlowLayoutWidget(FlowDirection.TopToBottom);  				{  					FlowLayoutWidget xYZControls = new FlowLayoutWidget();  					{  						GuiWidget xyGrid = CreateXYGridControl(colors' distanceBetweenControls' buttonSeparationDistance);  						xYZControls.AddChild(xyGrid);    						FlowLayoutWidget zButtons = CreateZButtons(XYZColors.zColor' buttonSeparationDistance' out zPlusControl' out zMinusControl);  						zButtons.VAnchor = Agg.UI.VAnchor.ParentBottom;  						xYZControls.AddChild(zButtons);  						xYZWithDistance.AddChild(xYZControls);  					}    					this.KeyDown += (sender' e) =>  					{  						if (hotKeyButton == null ||                               !hotKeyButton.Checked)  						{  							return;  						}    						double moveAmountPositive = AxisMoveAmount;  						double moveAmountNegative = -AxisMoveAmount;  						int eMoveAmountPositive = EAxisMoveAmount;  						int eMoveAmountNegative = -EAxisMoveAmount;    						if (OsInformation.OperatingSystem == OSType.Windows  							|| OsInformation.OperatingSystem == OSType.Mac)  						{  							if (e.KeyCode == Keys.Z)  							{  								PrinterConnectionAndCommunication.Instance.HomeAxis(PrinterConnectionAndCommunication.Axis.Z);  							}  							else if (e.KeyCode == Keys.Y)  							{  								PrinterConnectionAndCommunication.Instance.HomeAxis(PrinterConnectionAndCommunication.Axis.Y);  							}  							else if (e.KeyCode == Keys.X)  							{  								PrinterConnectionAndCommunication.Instance.HomeAxis(PrinterConnectionAndCommunication.Axis.X);  							}  							else if (e.KeyCode == Keys.Left)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.X' moveAmountNegative' MovementControls.XSpeed);  							}  							else if (e.KeyCode == Keys.Right)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.X' moveAmountPositive' MovementControls.XSpeed);  							}  							else if (e.KeyCode == Keys.Up)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Y' moveAmountPositive' MovementControls.YSpeed);  							}  							else if (e.KeyCode == Keys.Down)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Y' moveAmountNegative' MovementControls.YSpeed);  							}  							else if (e.KeyCode == Keys.E)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.E' eMoveAmountPositive' MovementControls.EFeedRate(0));  							}  							else if (e.KeyCode == Keys.R)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.E' eMoveAmountNegative' MovementControls.EFeedRate(0));  							}  						}    						if (OsInformation.OperatingSystem == OSType.Windows)  						{  							if (e.KeyCode == Keys.Home)  							{  								PrinterConnectionAndCommunication.Instance.HomeAxis(PrinterConnectionAndCommunication.Axis.XYZ);  							}  							else if (e.KeyCode == Keys.PageUp)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Z' moveAmountPositive' MovementControls.ZSpeed);  							}  							else if (e.KeyCode == Keys.PageDown)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Z' moveAmountNegative' MovementControls.ZSpeed);  							}  						}  						else if (OsInformation.OperatingSystem == OSType.Mac)  						{  							if (e.KeyCode == (Keys.Back | Keys.Cancel))  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Z' moveAmountPositive' MovementControls.ZSpeed);  							}  							else if (e.KeyCode == Keys.Clear)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Z' moveAmountNegative' MovementControls.ZSpeed);  							}  						}  					};    					// add in some movement radio buttons  					FlowLayoutWidget setMoveDistanceControl = new FlowLayoutWidget();  					TextWidget buttonsLabel = new TextWidget("Distance:"' textColor: RGBA_Bytes.White);  					buttonsLabel.VAnchor = Agg.UI.VAnchor.ParentCenter;  					//setMoveDistanceControl.AddChild(buttonsLabel);    					{  						TextImageButtonFactory buttonFactory = new TextImageButtonFactory();  						buttonFactory.FixedHeight = 20 * GuiWidget.DeviceScale;  						buttonFactory.FixedWidth = 30 * GuiWidget.DeviceScale;  						buttonFactory.fontSize = 8;  						buttonFactory.Margin = new BorderDouble(0);  						buttonFactory.checkedBorderColor = ActiveTheme.Instance.PrimaryTextColor;    						FlowLayoutWidget moveRadioButtons = new FlowLayoutWidget();    						var radioList = new ObservableCollection<GuiWidget>();    						movePointZeroTwoMmButton = buttonFactory.GenerateRadioButton("0.02");  						movePointZeroTwoMmButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  						movePointZeroTwoMmButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetXYZMoveAmount(.02); };  						movePointZeroTwoMmButton.SiblingRadioButtonList = radioList;  						moveRadioButtons.AddChild(movePointZeroTwoMmButton);    						RadioButton pointOneButton = buttonFactory.GenerateRadioButton("0.1");  						pointOneButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  						pointOneButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetXYZMoveAmount(.1); };  						pointOneButton.SiblingRadioButtonList = radioList;  						moveRadioButtons.AddChild(pointOneButton);    						moveOneMmButton = buttonFactory.GenerateRadioButton("1");  						moveOneMmButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  						moveOneMmButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetXYZMoveAmount(1); };  						moveOneMmButton.SiblingRadioButtonList = radioList;  						moveRadioButtons.AddChild(moveOneMmButton);    						tooBigForBabyStepping = new DisableableWidget()  						{  							VAnchor = VAnchor.FitToChildren'  							HAnchor = HAnchor.FitToChildren  						};    						var tooBigFlowLayout = new FlowLayoutWidget();  						tooBigForBabyStepping.AddChild(tooBigFlowLayout);    						tenButton = buttonFactory.GenerateRadioButton("10");  						tenButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  						tenButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetXYZMoveAmount(10); };  						tenButton.SiblingRadioButtonList = radioList;  						tooBigFlowLayout.AddChild(tenButton);    						oneHundredButton = buttonFactory.GenerateRadioButton("100");  						oneHundredButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  						oneHundredButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetXYZMoveAmount(100); };  						oneHundredButton.SiblingRadioButtonList = radioList;  						tooBigFlowLayout.AddChild(oneHundredButton);    						moveRadioButtons.AddChild(tooBigForBabyStepping);    						tenButton.Checked = true;  						moveRadioButtons.Margin = new BorderDouble(0' 3);    						setMoveDistanceControl.AddChild(moveRadioButtons);    						TextWidget mmLabel = new TextWidget("mm"' textColor: ActiveTheme.Instance.PrimaryTextColor' pointSize: 8);  						mmLabel.Margin = new BorderDouble(left: 10);  						mmLabel.VAnchor = Agg.UI.VAnchor.ParentCenter;    						tooBigFlowLayout.AddChild(mmLabel);  					}    					setMoveDistanceControl.HAnchor = Agg.UI.HAnchor.ParentLeft;  					xYZWithDistance.AddChild(setMoveDistanceControl);  				}    				allControlsLeftToRight.AddChild(xYZWithDistance);    #if !__ANDROID__  				allControlsLeftToRight.AddChild(GetHotkeyControlContainer());  #endif  				GuiWidget barBetweenZAndE = new GuiWidget(2' 2);  				barBetweenZAndE.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  				barBetweenZAndE.BackgroundColor = RGBA_Bytes.White;  				barBetweenZAndE.Margin = new BorderDouble(distanceBetweenControls' 5);  				allControlsLeftToRight.AddChild(barBetweenZAndE);    				FlowLayoutWidget eButtons = CreateEButtons(buttonSeparationDistance);  				disableableEButtons = new DisableableWidget()  				{  					Name = "disableableEButtons"'  					HAnchor = HAnchor.FitToChildren'  					VAnchor = VAnchor.FitToChildren | VAnchor.ParentTop'  				};  				disableableEButtons.AddChild(eButtons);    				allControlsLeftToRight.AddChild(disableableEButtons);  				allControlsTopToBottom.AddChild(allControlsLeftToRight);  			}
Magic Number,MatterHackers.MatterControl,JogControls,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,JogControls,The following statement contains a magic number: {  				FlowLayoutWidget allControlsLeftToRight = new FlowLayoutWidget();    				FlowLayoutWidget xYZWithDistance = new FlowLayoutWidget(FlowDirection.TopToBottom);  				{  					FlowLayoutWidget xYZControls = new FlowLayoutWidget();  					{  						GuiWidget xyGrid = CreateXYGridControl(colors' distanceBetweenControls' buttonSeparationDistance);  						xYZControls.AddChild(xyGrid);    						FlowLayoutWidget zButtons = CreateZButtons(XYZColors.zColor' buttonSeparationDistance' out zPlusControl' out zMinusControl);  						zButtons.VAnchor = Agg.UI.VAnchor.ParentBottom;  						xYZControls.AddChild(zButtons);  						xYZWithDistance.AddChild(xYZControls);  					}    					this.KeyDown += (sender' e) =>  					{  						if (hotKeyButton == null ||                               !hotKeyButton.Checked)  						{  							return;  						}    						double moveAmountPositive = AxisMoveAmount;  						double moveAmountNegative = -AxisMoveAmount;  						int eMoveAmountPositive = EAxisMoveAmount;  						int eMoveAmountNegative = -EAxisMoveAmount;    						if (OsInformation.OperatingSystem == OSType.Windows  							|| OsInformation.OperatingSystem == OSType.Mac)  						{  							if (e.KeyCode == Keys.Z)  							{  								PrinterConnectionAndCommunication.Instance.HomeAxis(PrinterConnectionAndCommunication.Axis.Z);  							}  							else if (e.KeyCode == Keys.Y)  							{  								PrinterConnectionAndCommunication.Instance.HomeAxis(PrinterConnectionAndCommunication.Axis.Y);  							}  							else if (e.KeyCode == Keys.X)  							{  								PrinterConnectionAndCommunication.Instance.HomeAxis(PrinterConnectionAndCommunication.Axis.X);  							}  							else if (e.KeyCode == Keys.Left)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.X' moveAmountNegative' MovementControls.XSpeed);  							}  							else if (e.KeyCode == Keys.Right)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.X' moveAmountPositive' MovementControls.XSpeed);  							}  							else if (e.KeyCode == Keys.Up)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Y' moveAmountPositive' MovementControls.YSpeed);  							}  							else if (e.KeyCode == Keys.Down)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Y' moveAmountNegative' MovementControls.YSpeed);  							}  							else if (e.KeyCode == Keys.E)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.E' eMoveAmountPositive' MovementControls.EFeedRate(0));  							}  							else if (e.KeyCode == Keys.R)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.E' eMoveAmountNegative' MovementControls.EFeedRate(0));  							}  						}    						if (OsInformation.OperatingSystem == OSType.Windows)  						{  							if (e.KeyCode == Keys.Home)  							{  								PrinterConnectionAndCommunication.Instance.HomeAxis(PrinterConnectionAndCommunication.Axis.XYZ);  							}  							else if (e.KeyCode == Keys.PageUp)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Z' moveAmountPositive' MovementControls.ZSpeed);  							}  							else if (e.KeyCode == Keys.PageDown)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Z' moveAmountNegative' MovementControls.ZSpeed);  							}  						}  						else if (OsInformation.OperatingSystem == OSType.Mac)  						{  							if (e.KeyCode == (Keys.Back | Keys.Cancel))  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Z' moveAmountPositive' MovementControls.ZSpeed);  							}  							else if (e.KeyCode == Keys.Clear)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Z' moveAmountNegative' MovementControls.ZSpeed);  							}  						}  					};    					// add in some movement radio buttons  					FlowLayoutWidget setMoveDistanceControl = new FlowLayoutWidget();  					TextWidget buttonsLabel = new TextWidget("Distance:"' textColor: RGBA_Bytes.White);  					buttonsLabel.VAnchor = Agg.UI.VAnchor.ParentCenter;  					//setMoveDistanceControl.AddChild(buttonsLabel);    					{  						TextImageButtonFactory buttonFactory = new TextImageButtonFactory();  						buttonFactory.FixedHeight = 20 * GuiWidget.DeviceScale;  						buttonFactory.FixedWidth = 30 * GuiWidget.DeviceScale;  						buttonFactory.fontSize = 8;  						buttonFactory.Margin = new BorderDouble(0);  						buttonFactory.checkedBorderColor = ActiveTheme.Instance.PrimaryTextColor;    						FlowLayoutWidget moveRadioButtons = new FlowLayoutWidget();    						var radioList = new ObservableCollection<GuiWidget>();    						movePointZeroTwoMmButton = buttonFactory.GenerateRadioButton("0.02");  						movePointZeroTwoMmButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  						movePointZeroTwoMmButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetXYZMoveAmount(.02); };  						movePointZeroTwoMmButton.SiblingRadioButtonList = radioList;  						moveRadioButtons.AddChild(movePointZeroTwoMmButton);    						RadioButton pointOneButton = buttonFactory.GenerateRadioButton("0.1");  						pointOneButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  						pointOneButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetXYZMoveAmount(.1); };  						pointOneButton.SiblingRadioButtonList = radioList;  						moveRadioButtons.AddChild(pointOneButton);    						moveOneMmButton = buttonFactory.GenerateRadioButton("1");  						moveOneMmButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  						moveOneMmButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetXYZMoveAmount(1); };  						moveOneMmButton.SiblingRadioButtonList = radioList;  						moveRadioButtons.AddChild(moveOneMmButton);    						tooBigForBabyStepping = new DisableableWidget()  						{  							VAnchor = VAnchor.FitToChildren'  							HAnchor = HAnchor.FitToChildren  						};    						var tooBigFlowLayout = new FlowLayoutWidget();  						tooBigForBabyStepping.AddChild(tooBigFlowLayout);    						tenButton = buttonFactory.GenerateRadioButton("10");  						tenButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  						tenButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetXYZMoveAmount(10); };  						tenButton.SiblingRadioButtonList = radioList;  						tooBigFlowLayout.AddChild(tenButton);    						oneHundredButton = buttonFactory.GenerateRadioButton("100");  						oneHundredButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  						oneHundredButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetXYZMoveAmount(100); };  						oneHundredButton.SiblingRadioButtonList = radioList;  						tooBigFlowLayout.AddChild(oneHundredButton);    						moveRadioButtons.AddChild(tooBigForBabyStepping);    						tenButton.Checked = true;  						moveRadioButtons.Margin = new BorderDouble(0' 3);    						setMoveDistanceControl.AddChild(moveRadioButtons);    						TextWidget mmLabel = new TextWidget("mm"' textColor: ActiveTheme.Instance.PrimaryTextColor' pointSize: 8);  						mmLabel.Margin = new BorderDouble(left: 10);  						mmLabel.VAnchor = Agg.UI.VAnchor.ParentCenter;    						tooBigFlowLayout.AddChild(mmLabel);  					}    					setMoveDistanceControl.HAnchor = Agg.UI.HAnchor.ParentLeft;  					xYZWithDistance.AddChild(setMoveDistanceControl);  				}    				allControlsLeftToRight.AddChild(xYZWithDistance);    #if !__ANDROID__  				allControlsLeftToRight.AddChild(GetHotkeyControlContainer());  #endif  				GuiWidget barBetweenZAndE = new GuiWidget(2' 2);  				barBetweenZAndE.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  				barBetweenZAndE.BackgroundColor = RGBA_Bytes.White;  				barBetweenZAndE.Margin = new BorderDouble(distanceBetweenControls' 5);  				allControlsLeftToRight.AddChild(barBetweenZAndE);    				FlowLayoutWidget eButtons = CreateEButtons(buttonSeparationDistance);  				disableableEButtons = new DisableableWidget()  				{  					Name = "disableableEButtons"'  					HAnchor = HAnchor.FitToChildren'  					VAnchor = VAnchor.FitToChildren | VAnchor.ParentTop'  				};  				disableableEButtons.AddChild(eButtons);    				allControlsLeftToRight.AddChild(disableableEButtons);  				allControlsTopToBottom.AddChild(allControlsLeftToRight);  			}
Magic Number,MatterHackers.MatterControl,JogControls,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,JogControls,The following statement contains a magic number: {  				FlowLayoutWidget allControlsLeftToRight = new FlowLayoutWidget();    				FlowLayoutWidget xYZWithDistance = new FlowLayoutWidget(FlowDirection.TopToBottom);  				{  					FlowLayoutWidget xYZControls = new FlowLayoutWidget();  					{  						GuiWidget xyGrid = CreateXYGridControl(colors' distanceBetweenControls' buttonSeparationDistance);  						xYZControls.AddChild(xyGrid);    						FlowLayoutWidget zButtons = CreateZButtons(XYZColors.zColor' buttonSeparationDistance' out zPlusControl' out zMinusControl);  						zButtons.VAnchor = Agg.UI.VAnchor.ParentBottom;  						xYZControls.AddChild(zButtons);  						xYZWithDistance.AddChild(xYZControls);  					}    					this.KeyDown += (sender' e) =>  					{  						if (hotKeyButton == null ||                               !hotKeyButton.Checked)  						{  							return;  						}    						double moveAmountPositive = AxisMoveAmount;  						double moveAmountNegative = -AxisMoveAmount;  						int eMoveAmountPositive = EAxisMoveAmount;  						int eMoveAmountNegative = -EAxisMoveAmount;    						if (OsInformation.OperatingSystem == OSType.Windows  							|| OsInformation.OperatingSystem == OSType.Mac)  						{  							if (e.KeyCode == Keys.Z)  							{  								PrinterConnectionAndCommunication.Instance.HomeAxis(PrinterConnectionAndCommunication.Axis.Z);  							}  							else if (e.KeyCode == Keys.Y)  							{  								PrinterConnectionAndCommunication.Instance.HomeAxis(PrinterConnectionAndCommunication.Axis.Y);  							}  							else if (e.KeyCode == Keys.X)  							{  								PrinterConnectionAndCommunication.Instance.HomeAxis(PrinterConnectionAndCommunication.Axis.X);  							}  							else if (e.KeyCode == Keys.Left)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.X' moveAmountNegative' MovementControls.XSpeed);  							}  							else if (e.KeyCode == Keys.Right)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.X' moveAmountPositive' MovementControls.XSpeed);  							}  							else if (e.KeyCode == Keys.Up)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Y' moveAmountPositive' MovementControls.YSpeed);  							}  							else if (e.KeyCode == Keys.Down)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Y' moveAmountNegative' MovementControls.YSpeed);  							}  							else if (e.KeyCode == Keys.E)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.E' eMoveAmountPositive' MovementControls.EFeedRate(0));  							}  							else if (e.KeyCode == Keys.R)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.E' eMoveAmountNegative' MovementControls.EFeedRate(0));  							}  						}    						if (OsInformation.OperatingSystem == OSType.Windows)  						{  							if (e.KeyCode == Keys.Home)  							{  								PrinterConnectionAndCommunication.Instance.HomeAxis(PrinterConnectionAndCommunication.Axis.XYZ);  							}  							else if (e.KeyCode == Keys.PageUp)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Z' moveAmountPositive' MovementControls.ZSpeed);  							}  							else if (e.KeyCode == Keys.PageDown)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Z' moveAmountNegative' MovementControls.ZSpeed);  							}  						}  						else if (OsInformation.OperatingSystem == OSType.Mac)  						{  							if (e.KeyCode == (Keys.Back | Keys.Cancel))  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Z' moveAmountPositive' MovementControls.ZSpeed);  							}  							else if (e.KeyCode == Keys.Clear)  							{  								PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Z' moveAmountNegative' MovementControls.ZSpeed);  							}  						}  					};    					// add in some movement radio buttons  					FlowLayoutWidget setMoveDistanceControl = new FlowLayoutWidget();  					TextWidget buttonsLabel = new TextWidget("Distance:"' textColor: RGBA_Bytes.White);  					buttonsLabel.VAnchor = Agg.UI.VAnchor.ParentCenter;  					//setMoveDistanceControl.AddChild(buttonsLabel);    					{  						TextImageButtonFactory buttonFactory = new TextImageButtonFactory();  						buttonFactory.FixedHeight = 20 * GuiWidget.DeviceScale;  						buttonFactory.FixedWidth = 30 * GuiWidget.DeviceScale;  						buttonFactory.fontSize = 8;  						buttonFactory.Margin = new BorderDouble(0);  						buttonFactory.checkedBorderColor = ActiveTheme.Instance.PrimaryTextColor;    						FlowLayoutWidget moveRadioButtons = new FlowLayoutWidget();    						var radioList = new ObservableCollection<GuiWidget>();    						movePointZeroTwoMmButton = buttonFactory.GenerateRadioButton("0.02");  						movePointZeroTwoMmButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  						movePointZeroTwoMmButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetXYZMoveAmount(.02); };  						movePointZeroTwoMmButton.SiblingRadioButtonList = radioList;  						moveRadioButtons.AddChild(movePointZeroTwoMmButton);    						RadioButton pointOneButton = buttonFactory.GenerateRadioButton("0.1");  						pointOneButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  						pointOneButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetXYZMoveAmount(.1); };  						pointOneButton.SiblingRadioButtonList = radioList;  						moveRadioButtons.AddChild(pointOneButton);    						moveOneMmButton = buttonFactory.GenerateRadioButton("1");  						moveOneMmButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  						moveOneMmButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetXYZMoveAmount(1); };  						moveOneMmButton.SiblingRadioButtonList = radioList;  						moveRadioButtons.AddChild(moveOneMmButton);    						tooBigForBabyStepping = new DisableableWidget()  						{  							VAnchor = VAnchor.FitToChildren'  							HAnchor = HAnchor.FitToChildren  						};    						var tooBigFlowLayout = new FlowLayoutWidget();  						tooBigForBabyStepping.AddChild(tooBigFlowLayout);    						tenButton = buttonFactory.GenerateRadioButton("10");  						tenButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  						tenButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetXYZMoveAmount(10); };  						tenButton.SiblingRadioButtonList = radioList;  						tooBigFlowLayout.AddChild(tenButton);    						oneHundredButton = buttonFactory.GenerateRadioButton("100");  						oneHundredButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  						oneHundredButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetXYZMoveAmount(100); };  						oneHundredButton.SiblingRadioButtonList = radioList;  						tooBigFlowLayout.AddChild(oneHundredButton);    						moveRadioButtons.AddChild(tooBigForBabyStepping);    						tenButton.Checked = true;  						moveRadioButtons.Margin = new BorderDouble(0' 3);    						setMoveDistanceControl.AddChild(moveRadioButtons);    						TextWidget mmLabel = new TextWidget("mm"' textColor: ActiveTheme.Instance.PrimaryTextColor' pointSize: 8);  						mmLabel.Margin = new BorderDouble(left: 10);  						mmLabel.VAnchor = Agg.UI.VAnchor.ParentCenter;    						tooBigFlowLayout.AddChild(mmLabel);  					}    					setMoveDistanceControl.HAnchor = Agg.UI.HAnchor.ParentLeft;  					xYZWithDistance.AddChild(setMoveDistanceControl);  				}    				allControlsLeftToRight.AddChild(xYZWithDistance);    #if !__ANDROID__  				allControlsLeftToRight.AddChild(GetHotkeyControlContainer());  #endif  				GuiWidget barBetweenZAndE = new GuiWidget(2' 2);  				barBetweenZAndE.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  				barBetweenZAndE.BackgroundColor = RGBA_Bytes.White;  				barBetweenZAndE.Margin = new BorderDouble(distanceBetweenControls' 5);  				allControlsLeftToRight.AddChild(barBetweenZAndE);    				FlowLayoutWidget eButtons = CreateEButtons(buttonSeparationDistance);  				disableableEButtons = new DisableableWidget()  				{  					Name = "disableableEButtons"'  					HAnchor = HAnchor.FitToChildren'  					VAnchor = VAnchor.FitToChildren | VAnchor.ParentTop'  				};  				disableableEButtons.AddChild(eButtons);    				allControlsLeftToRight.AddChild(disableableEButtons);  				allControlsTopToBottom.AddChild(allControlsLeftToRight);  			}
Magic Number,MatterHackers.MatterControl,JogControls,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,JogControls,The following statement contains a magic number: Margin = new BorderDouble(3);
Magic Number,MatterHackers.MatterControl,JogControls,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,GetHotkeyControlContainer,The following statement contains a magic number: hotKeyButtonFactory.FixedHeight = 20 * GuiWidget.DeviceScale;
Magic Number,MatterHackers.MatterControl,JogControls,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,GetHotkeyControlContainer,The following statement contains a magic number: hotKeyButtonFactory.FixedWidth = 30 * GuiWidget.DeviceScale;
Magic Number,MatterHackers.MatterControl,JogControls,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,GetHotkeyControlContainer,The following statement contains a magic number: hotKeyButtonFactory.fontSize = 8;
Magic Number,MatterHackers.MatterControl,JogControls,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,GetHotkeyControlContainer,The following statement contains a magic number: hotkeyControlContainer.Margin = new BorderDouble(left: 10);
Magic Number,MatterHackers.MatterControl,JogControls,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,GetHotkeyControlContainer,The following statement contains a magic number: hotKeyButton = hotKeyButtonFactory.GenerateRadioButton(""' StaticData.Instance.LoadIcon("hot_key_small_white.png"' 19' 12).InvertLightness());
Magic Number,MatterHackers.MatterControl,JogControls,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,GetHotkeyControlContainer,The following statement contains a magic number: hotKeyButton = hotKeyButtonFactory.GenerateRadioButton(""' StaticData.Instance.LoadIcon("hot_key_small_white.png"' 19' 12).InvertLightness());
Magic Number,MatterHackers.MatterControl,JogControls,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,GetHotkeyControlContainer,The following statement contains a magic number: hotKeyButton.Margin = new BorderDouble(5);
Magic Number,MatterHackers.MatterControl,JogControls,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,CreateEButtons,The following statement contains a magic number: {  				FlowLayoutWidget eMinusButtonAndText = new FlowLayoutWidget();  				BorderDouble extrusionMargin = new BorderDouble(4' 0' 4' 0);    				if (extruderCount == 1)  				{  					ExtrudeButton eMinusControl = CreateExtrudeButton("E-"' MovementControls.EFeedRate(0)' 0' moveButtonFactory);  					eMinusControl.Margin = extrusionMargin;  					eMinusControl.ToolTipText = "Retract filament".Localize();  					eMinusButtonAndText.AddChild(eMinusControl);  					eMinusButtons.Add(eMinusControl);  				}  				else  				{  					for (int i = 0; i < extruderCount; i++)  					{  						ExtrudeButton eMinusControl = CreateExtrudeButton($"E{i + 1}-"' MovementControls.EFeedRate(0)' i' moveButtonFactory);  						eMinusControl.ToolTipText = "Retract filament".Localize();  						eMinusControl.Margin = extrusionMargin;  						eMinusButtonAndText.AddChild(eMinusControl);  						eMinusButtons.Add(eMinusControl);  					}  				}    				TextWidget eMinusControlLabel = new TextWidget("Retract".Localize()' pointSize: 11);  				eMinusControlLabel.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				eMinusControlLabel.VAnchor = Agg.UI.VAnchor.ParentCenter;  				eMinusButtonAndText.AddChild(eMinusControlLabel);  				eButtons.AddChild(eMinusButtonAndText);    				eMinusButtonAndText.HAnchor = HAnchor.FitToChildren;  				eMinusButtonAndText.VAnchor = VAnchor.FitToChildren;    				FlowLayoutWidget buttonSpacerContainer = new FlowLayoutWidget();  				for (int i = 0; i < extruderCount; i++)  				{  					GuiWidget eSpacer = new GuiWidget(2' buttonSeparationDistance);  					double buttonWidth = eMinusButtons[i].Width + 6;    					eSpacer.Margin = new BorderDouble((buttonWidth / 2)' 0' ((buttonWidth) / 2)' 0);  					eSpacer.BackgroundColor = XYZColors.eColor;  					buttonSpacerContainer.AddChild(eSpacer);  				}    				eButtons.AddChild(buttonSpacerContainer);    				buttonSpacerContainer.HAnchor = HAnchor.FitToChildren;  				buttonSpacerContainer.VAnchor = VAnchor.FitToChildren;    				FlowLayoutWidget ePlusButtonAndText = new FlowLayoutWidget();  				if (extruderCount == 1)  				{  					ExtrudeButton ePlusControl = CreateExtrudeButton("E+"' MovementControls.EFeedRate(0)' 0' moveButtonFactory);  					ePlusControl.Margin = extrusionMargin;  					ePlusControl.ToolTipText = "Extrude filament".Localize();  					ePlusButtonAndText.AddChild(ePlusControl);  					ePlusButtons.Add(ePlusControl);  				}  				else  				{  					for (int i = 0; i < extruderCount; i++)  					{  						ExtrudeButton ePlusControl = CreateExtrudeButton($"E{i + 1}+"' MovementControls.EFeedRate(0)' i' moveButtonFactory);  						ePlusControl.Margin = extrusionMargin;  						ePlusControl.ToolTipText = "Extrude filament".Localize();  						ePlusButtonAndText.AddChild(ePlusControl);  						ePlusButtons.Add(ePlusControl);  					}  				}    				TextWidget ePlusControlLabel = new TextWidget("Extrude".Localize()' pointSize: 11);  				ePlusControlLabel.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				ePlusControlLabel.VAnchor = Agg.UI.VAnchor.ParentCenter;  				ePlusButtonAndText.AddChild(ePlusControlLabel);  				eButtons.AddChild(ePlusButtonAndText);  				ePlusButtonAndText.HAnchor = HAnchor.FitToChildren;  				ePlusButtonAndText.VAnchor = VAnchor.FitToChildren;  			}
Magic Number,MatterHackers.MatterControl,JogControls,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,CreateEButtons,The following statement contains a magic number: {  				FlowLayoutWidget eMinusButtonAndText = new FlowLayoutWidget();  				BorderDouble extrusionMargin = new BorderDouble(4' 0' 4' 0);    				if (extruderCount == 1)  				{  					ExtrudeButton eMinusControl = CreateExtrudeButton("E-"' MovementControls.EFeedRate(0)' 0' moveButtonFactory);  					eMinusControl.Margin = extrusionMargin;  					eMinusControl.ToolTipText = "Retract filament".Localize();  					eMinusButtonAndText.AddChild(eMinusControl);  					eMinusButtons.Add(eMinusControl);  				}  				else  				{  					for (int i = 0; i < extruderCount; i++)  					{  						ExtrudeButton eMinusControl = CreateExtrudeButton($"E{i + 1}-"' MovementControls.EFeedRate(0)' i' moveButtonFactory);  						eMinusControl.ToolTipText = "Retract filament".Localize();  						eMinusControl.Margin = extrusionMargin;  						eMinusButtonAndText.AddChild(eMinusControl);  						eMinusButtons.Add(eMinusControl);  					}  				}    				TextWidget eMinusControlLabel = new TextWidget("Retract".Localize()' pointSize: 11);  				eMinusControlLabel.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				eMinusControlLabel.VAnchor = Agg.UI.VAnchor.ParentCenter;  				eMinusButtonAndText.AddChild(eMinusControlLabel);  				eButtons.AddChild(eMinusButtonAndText);    				eMinusButtonAndText.HAnchor = HAnchor.FitToChildren;  				eMinusButtonAndText.VAnchor = VAnchor.FitToChildren;    				FlowLayoutWidget buttonSpacerContainer = new FlowLayoutWidget();  				for (int i = 0; i < extruderCount; i++)  				{  					GuiWidget eSpacer = new GuiWidget(2' buttonSeparationDistance);  					double buttonWidth = eMinusButtons[i].Width + 6;    					eSpacer.Margin = new BorderDouble((buttonWidth / 2)' 0' ((buttonWidth) / 2)' 0);  					eSpacer.BackgroundColor = XYZColors.eColor;  					buttonSpacerContainer.AddChild(eSpacer);  				}    				eButtons.AddChild(buttonSpacerContainer);    				buttonSpacerContainer.HAnchor = HAnchor.FitToChildren;  				buttonSpacerContainer.VAnchor = VAnchor.FitToChildren;    				FlowLayoutWidget ePlusButtonAndText = new FlowLayoutWidget();  				if (extruderCount == 1)  				{  					ExtrudeButton ePlusControl = CreateExtrudeButton("E+"' MovementControls.EFeedRate(0)' 0' moveButtonFactory);  					ePlusControl.Margin = extrusionMargin;  					ePlusControl.ToolTipText = "Extrude filament".Localize();  					ePlusButtonAndText.AddChild(ePlusControl);  					ePlusButtons.Add(ePlusControl);  				}  				else  				{  					for (int i = 0; i < extruderCount; i++)  					{  						ExtrudeButton ePlusControl = CreateExtrudeButton($"E{i + 1}+"' MovementControls.EFeedRate(0)' i' moveButtonFactory);  						ePlusControl.Margin = extrusionMargin;  						ePlusControl.ToolTipText = "Extrude filament".Localize();  						ePlusButtonAndText.AddChild(ePlusControl);  						ePlusButtons.Add(ePlusControl);  					}  				}    				TextWidget ePlusControlLabel = new TextWidget("Extrude".Localize()' pointSize: 11);  				ePlusControlLabel.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				ePlusControlLabel.VAnchor = Agg.UI.VAnchor.ParentCenter;  				ePlusButtonAndText.AddChild(ePlusControlLabel);  				eButtons.AddChild(ePlusButtonAndText);  				ePlusButtonAndText.HAnchor = HAnchor.FitToChildren;  				ePlusButtonAndText.VAnchor = VAnchor.FitToChildren;  			}
Magic Number,MatterHackers.MatterControl,JogControls,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,CreateEButtons,The following statement contains a magic number: {  				FlowLayoutWidget eMinusButtonAndText = new FlowLayoutWidget();  				BorderDouble extrusionMargin = new BorderDouble(4' 0' 4' 0);    				if (extruderCount == 1)  				{  					ExtrudeButton eMinusControl = CreateExtrudeButton("E-"' MovementControls.EFeedRate(0)' 0' moveButtonFactory);  					eMinusControl.Margin = extrusionMargin;  					eMinusControl.ToolTipText = "Retract filament".Localize();  					eMinusButtonAndText.AddChild(eMinusControl);  					eMinusButtons.Add(eMinusControl);  				}  				else  				{  					for (int i = 0; i < extruderCount; i++)  					{  						ExtrudeButton eMinusControl = CreateExtrudeButton($"E{i + 1}-"' MovementControls.EFeedRate(0)' i' moveButtonFactory);  						eMinusControl.ToolTipText = "Retract filament".Localize();  						eMinusControl.Margin = extrusionMargin;  						eMinusButtonAndText.AddChild(eMinusControl);  						eMinusButtons.Add(eMinusControl);  					}  				}    				TextWidget eMinusControlLabel = new TextWidget("Retract".Localize()' pointSize: 11);  				eMinusControlLabel.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				eMinusControlLabel.VAnchor = Agg.UI.VAnchor.ParentCenter;  				eMinusButtonAndText.AddChild(eMinusControlLabel);  				eButtons.AddChild(eMinusButtonAndText);    				eMinusButtonAndText.HAnchor = HAnchor.FitToChildren;  				eMinusButtonAndText.VAnchor = VAnchor.FitToChildren;    				FlowLayoutWidget buttonSpacerContainer = new FlowLayoutWidget();  				for (int i = 0; i < extruderCount; i++)  				{  					GuiWidget eSpacer = new GuiWidget(2' buttonSeparationDistance);  					double buttonWidth = eMinusButtons[i].Width + 6;    					eSpacer.Margin = new BorderDouble((buttonWidth / 2)' 0' ((buttonWidth) / 2)' 0);  					eSpacer.BackgroundColor = XYZColors.eColor;  					buttonSpacerContainer.AddChild(eSpacer);  				}    				eButtons.AddChild(buttonSpacerContainer);    				buttonSpacerContainer.HAnchor = HAnchor.FitToChildren;  				buttonSpacerContainer.VAnchor = VAnchor.FitToChildren;    				FlowLayoutWidget ePlusButtonAndText = new FlowLayoutWidget();  				if (extruderCount == 1)  				{  					ExtrudeButton ePlusControl = CreateExtrudeButton("E+"' MovementControls.EFeedRate(0)' 0' moveButtonFactory);  					ePlusControl.Margin = extrusionMargin;  					ePlusControl.ToolTipText = "Extrude filament".Localize();  					ePlusButtonAndText.AddChild(ePlusControl);  					ePlusButtons.Add(ePlusControl);  				}  				else  				{  					for (int i = 0; i < extruderCount; i++)  					{  						ExtrudeButton ePlusControl = CreateExtrudeButton($"E{i + 1}+"' MovementControls.EFeedRate(0)' i' moveButtonFactory);  						ePlusControl.Margin = extrusionMargin;  						ePlusControl.ToolTipText = "Extrude filament".Localize();  						ePlusButtonAndText.AddChild(ePlusControl);  						ePlusButtons.Add(ePlusControl);  					}  				}    				TextWidget ePlusControlLabel = new TextWidget("Extrude".Localize()' pointSize: 11);  				ePlusControlLabel.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				ePlusControlLabel.VAnchor = Agg.UI.VAnchor.ParentCenter;  				ePlusButtonAndText.AddChild(ePlusControlLabel);  				eButtons.AddChild(ePlusButtonAndText);  				ePlusButtonAndText.HAnchor = HAnchor.FitToChildren;  				ePlusButtonAndText.VAnchor = VAnchor.FitToChildren;  			}
Magic Number,MatterHackers.MatterControl,JogControls,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,CreateEButtons,The following statement contains a magic number: {  				FlowLayoutWidget eMinusButtonAndText = new FlowLayoutWidget();  				BorderDouble extrusionMargin = new BorderDouble(4' 0' 4' 0);    				if (extruderCount == 1)  				{  					ExtrudeButton eMinusControl = CreateExtrudeButton("E-"' MovementControls.EFeedRate(0)' 0' moveButtonFactory);  					eMinusControl.Margin = extrusionMargin;  					eMinusControl.ToolTipText = "Retract filament".Localize();  					eMinusButtonAndText.AddChild(eMinusControl);  					eMinusButtons.Add(eMinusControl);  				}  				else  				{  					for (int i = 0; i < extruderCount; i++)  					{  						ExtrudeButton eMinusControl = CreateExtrudeButton($"E{i + 1}-"' MovementControls.EFeedRate(0)' i' moveButtonFactory);  						eMinusControl.ToolTipText = "Retract filament".Localize();  						eMinusControl.Margin = extrusionMargin;  						eMinusButtonAndText.AddChild(eMinusControl);  						eMinusButtons.Add(eMinusControl);  					}  				}    				TextWidget eMinusControlLabel = new TextWidget("Retract".Localize()' pointSize: 11);  				eMinusControlLabel.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				eMinusControlLabel.VAnchor = Agg.UI.VAnchor.ParentCenter;  				eMinusButtonAndText.AddChild(eMinusControlLabel);  				eButtons.AddChild(eMinusButtonAndText);    				eMinusButtonAndText.HAnchor = HAnchor.FitToChildren;  				eMinusButtonAndText.VAnchor = VAnchor.FitToChildren;    				FlowLayoutWidget buttonSpacerContainer = new FlowLayoutWidget();  				for (int i = 0; i < extruderCount; i++)  				{  					GuiWidget eSpacer = new GuiWidget(2' buttonSeparationDistance);  					double buttonWidth = eMinusButtons[i].Width + 6;    					eSpacer.Margin = new BorderDouble((buttonWidth / 2)' 0' ((buttonWidth) / 2)' 0);  					eSpacer.BackgroundColor = XYZColors.eColor;  					buttonSpacerContainer.AddChild(eSpacer);  				}    				eButtons.AddChild(buttonSpacerContainer);    				buttonSpacerContainer.HAnchor = HAnchor.FitToChildren;  				buttonSpacerContainer.VAnchor = VAnchor.FitToChildren;    				FlowLayoutWidget ePlusButtonAndText = new FlowLayoutWidget();  				if (extruderCount == 1)  				{  					ExtrudeButton ePlusControl = CreateExtrudeButton("E+"' MovementControls.EFeedRate(0)' 0' moveButtonFactory);  					ePlusControl.Margin = extrusionMargin;  					ePlusControl.ToolTipText = "Extrude filament".Localize();  					ePlusButtonAndText.AddChild(ePlusControl);  					ePlusButtons.Add(ePlusControl);  				}  				else  				{  					for (int i = 0; i < extruderCount; i++)  					{  						ExtrudeButton ePlusControl = CreateExtrudeButton($"E{i + 1}+"' MovementControls.EFeedRate(0)' i' moveButtonFactory);  						ePlusControl.Margin = extrusionMargin;  						ePlusControl.ToolTipText = "Extrude filament".Localize();  						ePlusButtonAndText.AddChild(ePlusControl);  						ePlusButtons.Add(ePlusControl);  					}  				}    				TextWidget ePlusControlLabel = new TextWidget("Extrude".Localize()' pointSize: 11);  				ePlusControlLabel.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				ePlusControlLabel.VAnchor = Agg.UI.VAnchor.ParentCenter;  				ePlusButtonAndText.AddChild(ePlusControlLabel);  				eButtons.AddChild(ePlusButtonAndText);  				ePlusButtonAndText.HAnchor = HAnchor.FitToChildren;  				ePlusButtonAndText.VAnchor = VAnchor.FitToChildren;  			}
Magic Number,MatterHackers.MatterControl,JogControls,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,CreateEButtons,The following statement contains a magic number: {  				FlowLayoutWidget eMinusButtonAndText = new FlowLayoutWidget();  				BorderDouble extrusionMargin = new BorderDouble(4' 0' 4' 0);    				if (extruderCount == 1)  				{  					ExtrudeButton eMinusControl = CreateExtrudeButton("E-"' MovementControls.EFeedRate(0)' 0' moveButtonFactory);  					eMinusControl.Margin = extrusionMargin;  					eMinusControl.ToolTipText = "Retract filament".Localize();  					eMinusButtonAndText.AddChild(eMinusControl);  					eMinusButtons.Add(eMinusControl);  				}  				else  				{  					for (int i = 0; i < extruderCount; i++)  					{  						ExtrudeButton eMinusControl = CreateExtrudeButton($"E{i + 1}-"' MovementControls.EFeedRate(0)' i' moveButtonFactory);  						eMinusControl.ToolTipText = "Retract filament".Localize();  						eMinusControl.Margin = extrusionMargin;  						eMinusButtonAndText.AddChild(eMinusControl);  						eMinusButtons.Add(eMinusControl);  					}  				}    				TextWidget eMinusControlLabel = new TextWidget("Retract".Localize()' pointSize: 11);  				eMinusControlLabel.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				eMinusControlLabel.VAnchor = Agg.UI.VAnchor.ParentCenter;  				eMinusButtonAndText.AddChild(eMinusControlLabel);  				eButtons.AddChild(eMinusButtonAndText);    				eMinusButtonAndText.HAnchor = HAnchor.FitToChildren;  				eMinusButtonAndText.VAnchor = VAnchor.FitToChildren;    				FlowLayoutWidget buttonSpacerContainer = new FlowLayoutWidget();  				for (int i = 0; i < extruderCount; i++)  				{  					GuiWidget eSpacer = new GuiWidget(2' buttonSeparationDistance);  					double buttonWidth = eMinusButtons[i].Width + 6;    					eSpacer.Margin = new BorderDouble((buttonWidth / 2)' 0' ((buttonWidth) / 2)' 0);  					eSpacer.BackgroundColor = XYZColors.eColor;  					buttonSpacerContainer.AddChild(eSpacer);  				}    				eButtons.AddChild(buttonSpacerContainer);    				buttonSpacerContainer.HAnchor = HAnchor.FitToChildren;  				buttonSpacerContainer.VAnchor = VAnchor.FitToChildren;    				FlowLayoutWidget ePlusButtonAndText = new FlowLayoutWidget();  				if (extruderCount == 1)  				{  					ExtrudeButton ePlusControl = CreateExtrudeButton("E+"' MovementControls.EFeedRate(0)' 0' moveButtonFactory);  					ePlusControl.Margin = extrusionMargin;  					ePlusControl.ToolTipText = "Extrude filament".Localize();  					ePlusButtonAndText.AddChild(ePlusControl);  					ePlusButtons.Add(ePlusControl);  				}  				else  				{  					for (int i = 0; i < extruderCount; i++)  					{  						ExtrudeButton ePlusControl = CreateExtrudeButton($"E{i + 1}+"' MovementControls.EFeedRate(0)' i' moveButtonFactory);  						ePlusControl.Margin = extrusionMargin;  						ePlusControl.ToolTipText = "Extrude filament".Localize();  						ePlusButtonAndText.AddChild(ePlusControl);  						ePlusButtons.Add(ePlusControl);  					}  				}    				TextWidget ePlusControlLabel = new TextWidget("Extrude".Localize()' pointSize: 11);  				ePlusControlLabel.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				ePlusControlLabel.VAnchor = Agg.UI.VAnchor.ParentCenter;  				ePlusButtonAndText.AddChild(ePlusControlLabel);  				eButtons.AddChild(ePlusButtonAndText);  				ePlusButtonAndText.HAnchor = HAnchor.FitToChildren;  				ePlusButtonAndText.VAnchor = VAnchor.FitToChildren;  			}
Magic Number,MatterHackers.MatterControl,JogControls,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,CreateEButtons,The following statement contains a magic number: {  				FlowLayoutWidget eMinusButtonAndText = new FlowLayoutWidget();  				BorderDouble extrusionMargin = new BorderDouble(4' 0' 4' 0);    				if (extruderCount == 1)  				{  					ExtrudeButton eMinusControl = CreateExtrudeButton("E-"' MovementControls.EFeedRate(0)' 0' moveButtonFactory);  					eMinusControl.Margin = extrusionMargin;  					eMinusControl.ToolTipText = "Retract filament".Localize();  					eMinusButtonAndText.AddChild(eMinusControl);  					eMinusButtons.Add(eMinusControl);  				}  				else  				{  					for (int i = 0; i < extruderCount; i++)  					{  						ExtrudeButton eMinusControl = CreateExtrudeButton($"E{i + 1}-"' MovementControls.EFeedRate(0)' i' moveButtonFactory);  						eMinusControl.ToolTipText = "Retract filament".Localize();  						eMinusControl.Margin = extrusionMargin;  						eMinusButtonAndText.AddChild(eMinusControl);  						eMinusButtons.Add(eMinusControl);  					}  				}    				TextWidget eMinusControlLabel = new TextWidget("Retract".Localize()' pointSize: 11);  				eMinusControlLabel.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				eMinusControlLabel.VAnchor = Agg.UI.VAnchor.ParentCenter;  				eMinusButtonAndText.AddChild(eMinusControlLabel);  				eButtons.AddChild(eMinusButtonAndText);    				eMinusButtonAndText.HAnchor = HAnchor.FitToChildren;  				eMinusButtonAndText.VAnchor = VAnchor.FitToChildren;    				FlowLayoutWidget buttonSpacerContainer = new FlowLayoutWidget();  				for (int i = 0; i < extruderCount; i++)  				{  					GuiWidget eSpacer = new GuiWidget(2' buttonSeparationDistance);  					double buttonWidth = eMinusButtons[i].Width + 6;    					eSpacer.Margin = new BorderDouble((buttonWidth / 2)' 0' ((buttonWidth) / 2)' 0);  					eSpacer.BackgroundColor = XYZColors.eColor;  					buttonSpacerContainer.AddChild(eSpacer);  				}    				eButtons.AddChild(buttonSpacerContainer);    				buttonSpacerContainer.HAnchor = HAnchor.FitToChildren;  				buttonSpacerContainer.VAnchor = VAnchor.FitToChildren;    				FlowLayoutWidget ePlusButtonAndText = new FlowLayoutWidget();  				if (extruderCount == 1)  				{  					ExtrudeButton ePlusControl = CreateExtrudeButton("E+"' MovementControls.EFeedRate(0)' 0' moveButtonFactory);  					ePlusControl.Margin = extrusionMargin;  					ePlusControl.ToolTipText = "Extrude filament".Localize();  					ePlusButtonAndText.AddChild(ePlusControl);  					ePlusButtons.Add(ePlusControl);  				}  				else  				{  					for (int i = 0; i < extruderCount; i++)  					{  						ExtrudeButton ePlusControl = CreateExtrudeButton($"E{i + 1}+"' MovementControls.EFeedRate(0)' i' moveButtonFactory);  						ePlusControl.Margin = extrusionMargin;  						ePlusControl.ToolTipText = "Extrude filament".Localize();  						ePlusButtonAndText.AddChild(ePlusControl);  						ePlusButtons.Add(ePlusControl);  					}  				}    				TextWidget ePlusControlLabel = new TextWidget("Extrude".Localize()' pointSize: 11);  				ePlusControlLabel.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				ePlusControlLabel.VAnchor = Agg.UI.VAnchor.ParentCenter;  				ePlusButtonAndText.AddChild(ePlusControlLabel);  				eButtons.AddChild(ePlusButtonAndText);  				ePlusButtonAndText.HAnchor = HAnchor.FitToChildren;  				ePlusButtonAndText.VAnchor = VAnchor.FitToChildren;  			}
Magic Number,MatterHackers.MatterControl,JogControls,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,CreateEButtons,The following statement contains a magic number: {  				FlowLayoutWidget eMinusButtonAndText = new FlowLayoutWidget();  				BorderDouble extrusionMargin = new BorderDouble(4' 0' 4' 0);    				if (extruderCount == 1)  				{  					ExtrudeButton eMinusControl = CreateExtrudeButton("E-"' MovementControls.EFeedRate(0)' 0' moveButtonFactory);  					eMinusControl.Margin = extrusionMargin;  					eMinusControl.ToolTipText = "Retract filament".Localize();  					eMinusButtonAndText.AddChild(eMinusControl);  					eMinusButtons.Add(eMinusControl);  				}  				else  				{  					for (int i = 0; i < extruderCount; i++)  					{  						ExtrudeButton eMinusControl = CreateExtrudeButton($"E{i + 1}-"' MovementControls.EFeedRate(0)' i' moveButtonFactory);  						eMinusControl.ToolTipText = "Retract filament".Localize();  						eMinusControl.Margin = extrusionMargin;  						eMinusButtonAndText.AddChild(eMinusControl);  						eMinusButtons.Add(eMinusControl);  					}  				}    				TextWidget eMinusControlLabel = new TextWidget("Retract".Localize()' pointSize: 11);  				eMinusControlLabel.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				eMinusControlLabel.VAnchor = Agg.UI.VAnchor.ParentCenter;  				eMinusButtonAndText.AddChild(eMinusControlLabel);  				eButtons.AddChild(eMinusButtonAndText);    				eMinusButtonAndText.HAnchor = HAnchor.FitToChildren;  				eMinusButtonAndText.VAnchor = VAnchor.FitToChildren;    				FlowLayoutWidget buttonSpacerContainer = new FlowLayoutWidget();  				for (int i = 0; i < extruderCount; i++)  				{  					GuiWidget eSpacer = new GuiWidget(2' buttonSeparationDistance);  					double buttonWidth = eMinusButtons[i].Width + 6;    					eSpacer.Margin = new BorderDouble((buttonWidth / 2)' 0' ((buttonWidth) / 2)' 0);  					eSpacer.BackgroundColor = XYZColors.eColor;  					buttonSpacerContainer.AddChild(eSpacer);  				}    				eButtons.AddChild(buttonSpacerContainer);    				buttonSpacerContainer.HAnchor = HAnchor.FitToChildren;  				buttonSpacerContainer.VAnchor = VAnchor.FitToChildren;    				FlowLayoutWidget ePlusButtonAndText = new FlowLayoutWidget();  				if (extruderCount == 1)  				{  					ExtrudeButton ePlusControl = CreateExtrudeButton("E+"' MovementControls.EFeedRate(0)' 0' moveButtonFactory);  					ePlusControl.Margin = extrusionMargin;  					ePlusControl.ToolTipText = "Extrude filament".Localize();  					ePlusButtonAndText.AddChild(ePlusControl);  					ePlusButtons.Add(ePlusControl);  				}  				else  				{  					for (int i = 0; i < extruderCount; i++)  					{  						ExtrudeButton ePlusControl = CreateExtrudeButton($"E{i + 1}+"' MovementControls.EFeedRate(0)' i' moveButtonFactory);  						ePlusControl.Margin = extrusionMargin;  						ePlusControl.ToolTipText = "Extrude filament".Localize();  						ePlusButtonAndText.AddChild(ePlusControl);  						ePlusButtons.Add(ePlusControl);  					}  				}    				TextWidget ePlusControlLabel = new TextWidget("Extrude".Localize()' pointSize: 11);  				ePlusControlLabel.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				ePlusControlLabel.VAnchor = Agg.UI.VAnchor.ParentCenter;  				ePlusButtonAndText.AddChild(ePlusControlLabel);  				eButtons.AddChild(ePlusButtonAndText);  				ePlusButtonAndText.HAnchor = HAnchor.FitToChildren;  				ePlusButtonAndText.VAnchor = VAnchor.FitToChildren;  			}
Magic Number,MatterHackers.MatterControl,JogControls,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,CreateEButtons,The following statement contains a magic number: {  				FlowLayoutWidget eMinusButtonAndText = new FlowLayoutWidget();  				BorderDouble extrusionMargin = new BorderDouble(4' 0' 4' 0);    				if (extruderCount == 1)  				{  					ExtrudeButton eMinusControl = CreateExtrudeButton("E-"' MovementControls.EFeedRate(0)' 0' moveButtonFactory);  					eMinusControl.Margin = extrusionMargin;  					eMinusControl.ToolTipText = "Retract filament".Localize();  					eMinusButtonAndText.AddChild(eMinusControl);  					eMinusButtons.Add(eMinusControl);  				}  				else  				{  					for (int i = 0; i < extruderCount; i++)  					{  						ExtrudeButton eMinusControl = CreateExtrudeButton($"E{i + 1}-"' MovementControls.EFeedRate(0)' i' moveButtonFactory);  						eMinusControl.ToolTipText = "Retract filament".Localize();  						eMinusControl.Margin = extrusionMargin;  						eMinusButtonAndText.AddChild(eMinusControl);  						eMinusButtons.Add(eMinusControl);  					}  				}    				TextWidget eMinusControlLabel = new TextWidget("Retract".Localize()' pointSize: 11);  				eMinusControlLabel.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				eMinusControlLabel.VAnchor = Agg.UI.VAnchor.ParentCenter;  				eMinusButtonAndText.AddChild(eMinusControlLabel);  				eButtons.AddChild(eMinusButtonAndText);    				eMinusButtonAndText.HAnchor = HAnchor.FitToChildren;  				eMinusButtonAndText.VAnchor = VAnchor.FitToChildren;    				FlowLayoutWidget buttonSpacerContainer = new FlowLayoutWidget();  				for (int i = 0; i < extruderCount; i++)  				{  					GuiWidget eSpacer = new GuiWidget(2' buttonSeparationDistance);  					double buttonWidth = eMinusButtons[i].Width + 6;    					eSpacer.Margin = new BorderDouble((buttonWidth / 2)' 0' ((buttonWidth) / 2)' 0);  					eSpacer.BackgroundColor = XYZColors.eColor;  					buttonSpacerContainer.AddChild(eSpacer);  				}    				eButtons.AddChild(buttonSpacerContainer);    				buttonSpacerContainer.HAnchor = HAnchor.FitToChildren;  				buttonSpacerContainer.VAnchor = VAnchor.FitToChildren;    				FlowLayoutWidget ePlusButtonAndText = new FlowLayoutWidget();  				if (extruderCount == 1)  				{  					ExtrudeButton ePlusControl = CreateExtrudeButton("E+"' MovementControls.EFeedRate(0)' 0' moveButtonFactory);  					ePlusControl.Margin = extrusionMargin;  					ePlusControl.ToolTipText = "Extrude filament".Localize();  					ePlusButtonAndText.AddChild(ePlusControl);  					ePlusButtons.Add(ePlusControl);  				}  				else  				{  					for (int i = 0; i < extruderCount; i++)  					{  						ExtrudeButton ePlusControl = CreateExtrudeButton($"E{i + 1}+"' MovementControls.EFeedRate(0)' i' moveButtonFactory);  						ePlusControl.Margin = extrusionMargin;  						ePlusControl.ToolTipText = "Extrude filament".Localize();  						ePlusButtonAndText.AddChild(ePlusControl);  						ePlusButtons.Add(ePlusControl);  					}  				}    				TextWidget ePlusControlLabel = new TextWidget("Extrude".Localize()' pointSize: 11);  				ePlusControlLabel.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				ePlusControlLabel.VAnchor = Agg.UI.VAnchor.ParentCenter;  				ePlusButtonAndText.AddChild(ePlusControlLabel);  				eButtons.AddChild(ePlusButtonAndText);  				ePlusButtonAndText.HAnchor = HAnchor.FitToChildren;  				ePlusButtonAndText.VAnchor = VAnchor.FitToChildren;  			}
Magic Number,MatterHackers.MatterControl,JogControls,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,CreateEButtons,The following statement contains a magic number: eButtons.AddChild(new GuiWidget(10' 6));
Magic Number,MatterHackers.MatterControl,JogControls,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,CreateEButtons,The following statement contains a magic number: eButtons.AddChild(new GuiWidget(10' 6));
Magic Number,MatterHackers.MatterControl,JogControls,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,CreateEButtons,The following statement contains a magic number: {  				var buttonFactory = new TextImageButtonFactory()  				{  					FixedHeight = 20 * GuiWidget.DeviceScale'  					FixedWidth = 30 * GuiWidget.DeviceScale'  					fontSize = 8'  					Margin = 0  				};  				buttonFactory.checkedBorderColor = ActiveTheme.Instance.PrimaryTextColor;    				var moveRadioButtons = new FlowLayoutWidget();  				RadioButton oneButton = buttonFactory.GenerateRadioButton("1");  				oneButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  				oneButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetEMoveAmount(1); };  				moveRadioButtons.AddChild(oneButton);  				RadioButton tenButton = buttonFactory.GenerateRadioButton("10");  				tenButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  				tenButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetEMoveAmount(10); };  				moveRadioButtons.AddChild(tenButton);  				RadioButton oneHundredButton = buttonFactory.GenerateRadioButton("100");  				oneHundredButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  				oneHundredButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetEMoveAmount(100); };  				moveRadioButtons.AddChild(oneHundredButton);  				tenButton.Checked = true;  				moveRadioButtons.Margin = new BorderDouble(0' 3);  				setMoveDistanceControl.AddChild(moveRadioButtons);  			}
Magic Number,MatterHackers.MatterControl,JogControls,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,CreateEButtons,The following statement contains a magic number: {  				var buttonFactory = new TextImageButtonFactory()  				{  					FixedHeight = 20 * GuiWidget.DeviceScale'  					FixedWidth = 30 * GuiWidget.DeviceScale'  					fontSize = 8'  					Margin = 0  				};  				buttonFactory.checkedBorderColor = ActiveTheme.Instance.PrimaryTextColor;    				var moveRadioButtons = new FlowLayoutWidget();  				RadioButton oneButton = buttonFactory.GenerateRadioButton("1");  				oneButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  				oneButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetEMoveAmount(1); };  				moveRadioButtons.AddChild(oneButton);  				RadioButton tenButton = buttonFactory.GenerateRadioButton("10");  				tenButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  				tenButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetEMoveAmount(10); };  				moveRadioButtons.AddChild(tenButton);  				RadioButton oneHundredButton = buttonFactory.GenerateRadioButton("100");  				oneHundredButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  				oneHundredButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetEMoveAmount(100); };  				moveRadioButtons.AddChild(oneHundredButton);  				tenButton.Checked = true;  				moveRadioButtons.Margin = new BorderDouble(0' 3);  				setMoveDistanceControl.AddChild(moveRadioButtons);  			}
Magic Number,MatterHackers.MatterControl,JogControls,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,CreateEButtons,The following statement contains a magic number: {  				var buttonFactory = new TextImageButtonFactory()  				{  					FixedHeight = 20 * GuiWidget.DeviceScale'  					FixedWidth = 30 * GuiWidget.DeviceScale'  					fontSize = 8'  					Margin = 0  				};  				buttonFactory.checkedBorderColor = ActiveTheme.Instance.PrimaryTextColor;    				var moveRadioButtons = new FlowLayoutWidget();  				RadioButton oneButton = buttonFactory.GenerateRadioButton("1");  				oneButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  				oneButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetEMoveAmount(1); };  				moveRadioButtons.AddChild(oneButton);  				RadioButton tenButton = buttonFactory.GenerateRadioButton("10");  				tenButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  				tenButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetEMoveAmount(10); };  				moveRadioButtons.AddChild(tenButton);  				RadioButton oneHundredButton = buttonFactory.GenerateRadioButton("100");  				oneHundredButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  				oneHundredButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetEMoveAmount(100); };  				moveRadioButtons.AddChild(oneHundredButton);  				tenButton.Checked = true;  				moveRadioButtons.Margin = new BorderDouble(0' 3);  				setMoveDistanceControl.AddChild(moveRadioButtons);  			}
Magic Number,MatterHackers.MatterControl,JogControls,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,CreateEButtons,The following statement contains a magic number: {  				var buttonFactory = new TextImageButtonFactory()  				{  					FixedHeight = 20 * GuiWidget.DeviceScale'  					FixedWidth = 30 * GuiWidget.DeviceScale'  					fontSize = 8'  					Margin = 0  				};  				buttonFactory.checkedBorderColor = ActiveTheme.Instance.PrimaryTextColor;    				var moveRadioButtons = new FlowLayoutWidget();  				RadioButton oneButton = buttonFactory.GenerateRadioButton("1");  				oneButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  				oneButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetEMoveAmount(1); };  				moveRadioButtons.AddChild(oneButton);  				RadioButton tenButton = buttonFactory.GenerateRadioButton("10");  				tenButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  				tenButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetEMoveAmount(10); };  				moveRadioButtons.AddChild(tenButton);  				RadioButton oneHundredButton = buttonFactory.GenerateRadioButton("100");  				oneHundredButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  				oneHundredButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetEMoveAmount(100); };  				moveRadioButtons.AddChild(oneHundredButton);  				tenButton.Checked = true;  				moveRadioButtons.Margin = new BorderDouble(0' 3);  				setMoveDistanceControl.AddChild(moveRadioButtons);  			}
Magic Number,MatterHackers.MatterControl,JogControls,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,CreateEButtons,The following statement contains a magic number: {  				var buttonFactory = new TextImageButtonFactory()  				{  					FixedHeight = 20 * GuiWidget.DeviceScale'  					FixedWidth = 30 * GuiWidget.DeviceScale'  					fontSize = 8'  					Margin = 0  				};  				buttonFactory.checkedBorderColor = ActiveTheme.Instance.PrimaryTextColor;    				var moveRadioButtons = new FlowLayoutWidget();  				RadioButton oneButton = buttonFactory.GenerateRadioButton("1");  				oneButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  				oneButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetEMoveAmount(1); };  				moveRadioButtons.AddChild(oneButton);  				RadioButton tenButton = buttonFactory.GenerateRadioButton("10");  				tenButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  				tenButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetEMoveAmount(10); };  				moveRadioButtons.AddChild(tenButton);  				RadioButton oneHundredButton = buttonFactory.GenerateRadioButton("100");  				oneHundredButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  				oneHundredButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetEMoveAmount(100); };  				moveRadioButtons.AddChild(oneHundredButton);  				tenButton.Checked = true;  				moveRadioButtons.Margin = new BorderDouble(0' 3);  				setMoveDistanceControl.AddChild(moveRadioButtons);  			}
Magic Number,MatterHackers.MatterControl,JogControls,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,CreateEButtons,The following statement contains a magic number: {  				var buttonFactory = new TextImageButtonFactory()  				{  					FixedHeight = 20 * GuiWidget.DeviceScale'  					FixedWidth = 30 * GuiWidget.DeviceScale'  					fontSize = 8'  					Margin = 0  				};  				buttonFactory.checkedBorderColor = ActiveTheme.Instance.PrimaryTextColor;    				var moveRadioButtons = new FlowLayoutWidget();  				RadioButton oneButton = buttonFactory.GenerateRadioButton("1");  				oneButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  				oneButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetEMoveAmount(1); };  				moveRadioButtons.AddChild(oneButton);  				RadioButton tenButton = buttonFactory.GenerateRadioButton("10");  				tenButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  				tenButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetEMoveAmount(10); };  				moveRadioButtons.AddChild(tenButton);  				RadioButton oneHundredButton = buttonFactory.GenerateRadioButton("100");  				oneHundredButton.VAnchor = Agg.UI.VAnchor.ParentCenter;  				oneHundredButton.CheckedStateChanged += (sender' e) => { if (((RadioButton)sender).Checked) SetEMoveAmount(100); };  				moveRadioButtons.AddChild(oneHundredButton);  				tenButton.Checked = true;  				moveRadioButtons.Margin = new BorderDouble(0' 3);  				setMoveDistanceControl.AddChild(moveRadioButtons);  			}
Magic Number,MatterHackers.MatterControl,JogControls,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,CreateEButtons,The following statement contains a magic number: var mmLabel = new TextWidget("mm"' textColor: ActiveTheme.Instance.PrimaryTextColor' pointSize: 8);
Magic Number,MatterHackers.MatterControl,JogControls,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,CreateEButtons,The following statement contains a magic number: mmLabel.Margin = new BorderDouble(left: 10);
Magic Number,MatterHackers.MatterControl,JogControls,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,CreateMoveButton,The following statement contains a magic number: button.Height = (levelingButtons ? 45 : 40) * GuiWidget.DeviceScale;
Magic Number,MatterHackers.MatterControl,JogControls,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,CreateMoveButton,The following statement contains a magic number: button.Height = (levelingButtons ? 45 : 40) * GuiWidget.DeviceScale;
Magic Number,MatterHackers.MatterControl,JogControls,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,CreateMoveButton,The following statement contains a magic number: button.Width = (levelingButtons ? 90 : 40) * GuiWidget.DeviceScale;
Magic Number,MatterHackers.MatterControl,JogControls,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,CreateMoveButton,The following statement contains a magic number: button.Width = (levelingButtons ? 90 : 40) * GuiWidget.DeviceScale;
Magic Number,MatterHackers.MatterControl,JogControls,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,CreateExtrudeButton,The following statement contains a magic number: button.Height = 40 * GuiWidget.DeviceScale;
Magic Number,MatterHackers.MatterControl,JogControls,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,CreateExtrudeButton,The following statement contains a magic number: button.Width = 40 * GuiWidget.DeviceScale;
Magic Number,MatterHackers.MatterControl,JogControls,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,CreateZButtons,The following statement contains a magic number: {  				MoveButtonFactory moveButtonFactory = new MoveButtonFactory();  				moveButtonFactory.Colors.Fill.Normal = color;    				zPlusControl = CreateMoveButton("Z+"' PrinterConnectionAndCommunication.Axis.Z' MovementControls.ZSpeed' levelingButtons' moveButtonFactory);  				zPlusControl.Name = "Move Z positive".Localize();  				zPlusControl.ToolTipText = "Move Z positive".Localize();  				zButtons.AddChild(zPlusControl);    				GuiWidget spacer = new GuiWidget(2' buttonSeparationDistance);  				spacer.HAnchor = Agg.UI.HAnchor.ParentCenter;  				spacer.BackgroundColor = XYZColors.zColor;  				zButtons.AddChild(spacer);    				zMinusControl = CreateMoveButton("Z-"' PrinterConnectionAndCommunication.Axis.Z' MovementControls.ZSpeed' levelingButtons' moveButtonFactory);  				zMinusControl.ToolTipText = "Move Z negative".Localize();  				zButtons.AddChild(zMinusControl);  			}
Magic Number,MatterHackers.MatterControl,JogControls,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,CreateZButtons,The following statement contains a magic number: zButtons.Margin = new BorderDouble(0' 5);
Magic Number,MatterHackers.MatterControl,JogControls,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,CreateXYGridControl,The following statement contains a magic number: {  				FlowLayoutWidget xButtons = new FlowLayoutWidget();  				{  					moveButtonFactory.Colors.Fill.Normal = XYZColors.xColor;  					xButtons.HAnchor |= Agg.UI.HAnchor.ParentCenter;  					xButtons.VAnchor |= Agg.UI.VAnchor.ParentCenter;    					xMinusControl = CreateMoveButton("X-"' PrinterConnectionAndCommunication.Axis.X' MovementControls.XSpeed' false' moveButtonFactory);  					xMinusControl.ToolTipText = "Move X negative".Localize();  					xButtons.AddChild(xMinusControl);    					GuiWidget spacer = new GuiWidget(xMinusControl.Width + buttonSeparationDistance * 2' 2);  					spacer.VAnchor = Agg.UI.VAnchor.ParentCenter;  					spacer.BackgroundColor = XYZColors.xColor;  					xButtons.AddChild(spacer);    					xPlusControl = CreateMoveButton("X+"' PrinterConnectionAndCommunication.Axis.X' MovementControls.XSpeed' false' moveButtonFactory);  					xPlusControl.ToolTipText = "Move X positive".Localize();  					xButtons.AddChild(xPlusControl);  				}  				xyGrid.AddChild(xButtons);    				FlowLayoutWidget yButtons = new FlowLayoutWidget(FlowDirection.TopToBottom);  				{  					moveButtonFactory.Colors.Fill.Normal = XYZColors.yColor;  					yButtons.HAnchor |= Agg.UI.HAnchor.ParentCenter;  					yButtons.VAnchor |= Agg.UI.VAnchor.ParentCenter;  					yPlusControl = CreateMoveButton("Y+"' PrinterConnectionAndCommunication.Axis.Y' MovementControls.YSpeed' false' moveButtonFactory);  					yPlusControl.ToolTipText = "Move Y positive".Localize();  					yButtons.AddChild(yPlusControl);    					GuiWidget spacer = new GuiWidget(2' buttonSeparationDistance);  					spacer.HAnchor = Agg.UI.HAnchor.ParentCenter;  					spacer.BackgroundColor = XYZColors.yColor;  					yButtons.AddChild(spacer);    					yMinusControl = CreateMoveButton("Y-"' PrinterConnectionAndCommunication.Axis.Y' MovementControls.YSpeed' false' moveButtonFactory);  					yMinusControl.ToolTipText = "Move Y negative".Localize();  					yButtons.AddChild(yMinusControl);  				}  				xyGrid.AddChild(yButtons);  			}
Magic Number,MatterHackers.MatterControl,JogControls,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,CreateXYGridControl,The following statement contains a magic number: {  				FlowLayoutWidget xButtons = new FlowLayoutWidget();  				{  					moveButtonFactory.Colors.Fill.Normal = XYZColors.xColor;  					xButtons.HAnchor |= Agg.UI.HAnchor.ParentCenter;  					xButtons.VAnchor |= Agg.UI.VAnchor.ParentCenter;    					xMinusControl = CreateMoveButton("X-"' PrinterConnectionAndCommunication.Axis.X' MovementControls.XSpeed' false' moveButtonFactory);  					xMinusControl.ToolTipText = "Move X negative".Localize();  					xButtons.AddChild(xMinusControl);    					GuiWidget spacer = new GuiWidget(xMinusControl.Width + buttonSeparationDistance * 2' 2);  					spacer.VAnchor = Agg.UI.VAnchor.ParentCenter;  					spacer.BackgroundColor = XYZColors.xColor;  					xButtons.AddChild(spacer);    					xPlusControl = CreateMoveButton("X+"' PrinterConnectionAndCommunication.Axis.X' MovementControls.XSpeed' false' moveButtonFactory);  					xPlusControl.ToolTipText = "Move X positive".Localize();  					xButtons.AddChild(xPlusControl);  				}  				xyGrid.AddChild(xButtons);    				FlowLayoutWidget yButtons = new FlowLayoutWidget(FlowDirection.TopToBottom);  				{  					moveButtonFactory.Colors.Fill.Normal = XYZColors.yColor;  					yButtons.HAnchor |= Agg.UI.HAnchor.ParentCenter;  					yButtons.VAnchor |= Agg.UI.VAnchor.ParentCenter;  					yPlusControl = CreateMoveButton("Y+"' PrinterConnectionAndCommunication.Axis.Y' MovementControls.YSpeed' false' moveButtonFactory);  					yPlusControl.ToolTipText = "Move Y positive".Localize();  					yButtons.AddChild(yPlusControl);    					GuiWidget spacer = new GuiWidget(2' buttonSeparationDistance);  					spacer.HAnchor = Agg.UI.HAnchor.ParentCenter;  					spacer.BackgroundColor = XYZColors.yColor;  					yButtons.AddChild(spacer);    					yMinusControl = CreateMoveButton("Y-"' PrinterConnectionAndCommunication.Axis.Y' MovementControls.YSpeed' false' moveButtonFactory);  					yMinusControl.ToolTipText = "Move Y negative".Localize();  					yButtons.AddChild(yMinusControl);  				}  				xyGrid.AddChild(yButtons);  			}
Magic Number,MatterHackers.MatterControl,JogControls,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,CreateXYGridControl,The following statement contains a magic number: {  				FlowLayoutWidget xButtons = new FlowLayoutWidget();  				{  					moveButtonFactory.Colors.Fill.Normal = XYZColors.xColor;  					xButtons.HAnchor |= Agg.UI.HAnchor.ParentCenter;  					xButtons.VAnchor |= Agg.UI.VAnchor.ParentCenter;    					xMinusControl = CreateMoveButton("X-"' PrinterConnectionAndCommunication.Axis.X' MovementControls.XSpeed' false' moveButtonFactory);  					xMinusControl.ToolTipText = "Move X negative".Localize();  					xButtons.AddChild(xMinusControl);    					GuiWidget spacer = new GuiWidget(xMinusControl.Width + buttonSeparationDistance * 2' 2);  					spacer.VAnchor = Agg.UI.VAnchor.ParentCenter;  					spacer.BackgroundColor = XYZColors.xColor;  					xButtons.AddChild(spacer);    					xPlusControl = CreateMoveButton("X+"' PrinterConnectionAndCommunication.Axis.X' MovementControls.XSpeed' false' moveButtonFactory);  					xPlusControl.ToolTipText = "Move X positive".Localize();  					xButtons.AddChild(xPlusControl);  				}  				xyGrid.AddChild(xButtons);    				FlowLayoutWidget yButtons = new FlowLayoutWidget(FlowDirection.TopToBottom);  				{  					moveButtonFactory.Colors.Fill.Normal = XYZColors.yColor;  					yButtons.HAnchor |= Agg.UI.HAnchor.ParentCenter;  					yButtons.VAnchor |= Agg.UI.VAnchor.ParentCenter;  					yPlusControl = CreateMoveButton("Y+"' PrinterConnectionAndCommunication.Axis.Y' MovementControls.YSpeed' false' moveButtonFactory);  					yPlusControl.ToolTipText = "Move Y positive".Localize();  					yButtons.AddChild(yPlusControl);    					GuiWidget spacer = new GuiWidget(2' buttonSeparationDistance);  					spacer.HAnchor = Agg.UI.HAnchor.ParentCenter;  					spacer.BackgroundColor = XYZColors.yColor;  					yButtons.AddChild(spacer);    					yMinusControl = CreateMoveButton("Y-"' PrinterConnectionAndCommunication.Axis.Y' MovementControls.YSpeed' false' moveButtonFactory);  					yMinusControl.ToolTipText = "Move Y negative".Localize();  					yButtons.AddChild(yMinusControl);  				}  				xyGrid.AddChild(yButtons);  			}
Magic Number,MatterHackers.MatterControl,JogControls,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,CreateXYGridControl,The following statement contains a magic number: xyGrid.Margin = new BorderDouble(0' 5' distanceBetweenControls' 5);
Magic Number,MatterHackers.MatterControl,JogControls,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,CreateXYGridControl,The following statement contains a magic number: xyGrid.Margin = new BorderDouble(0' 5' distanceBetweenControls' 5);
Magic Number,MatterHackers.MatterControl,MoveButtonWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,MoveButtonWidget,The following statement contains a magic number: this.borderColor = new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 200);
Magic Number,MatterHackers.MatterControl,MoveButtonWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\XYZJogControls.cs,MoveButtonWidget,The following statement contains a magic number: if (label != "")  				{  					TextWidget textWidget = new TextWidget(label' pointSize: fontSize)  					{  						VAnchor = VAnchor.ParentCenter'  						HAnchor = HAnchor.ParentCenter'  						TextColor = textColor'  						Padding = new BorderDouble(3' 0)  					};  					this.AddChild(textWidget);  				}
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,PartThumbnailWidget,The following statement contains a magic number: this.Padding = new BorderDouble(5);
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,PartThumbnailWidget,The following statement contains a magic number: switch (size)  			{  				case ImageSizes.Size50x50:  					this.Width = 50 * GuiWidget.DeviceScale;  					this.Height = 50 * GuiWidget.DeviceScale;  					break;    				case ImageSizes.Size115x115:  					this.Width = 115 * GuiWidget.DeviceScale;  					this.Height = 115 * GuiWidget.DeviceScale;  					break;    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,PartThumbnailWidget,The following statement contains a magic number: switch (size)  			{  				case ImageSizes.Size50x50:  					this.Width = 50 * GuiWidget.DeviceScale;  					this.Height = 50 * GuiWidget.DeviceScale;  					break;    				case ImageSizes.Size115x115:  					this.Width = 115 * GuiWidget.DeviceScale;  					this.Height = 115 * GuiWidget.DeviceScale;  					break;    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,PartThumbnailWidget,The following statement contains a magic number: switch (size)  			{  				case ImageSizes.Size50x50:  					this.Width = 50 * GuiWidget.DeviceScale;  					this.Height = 50 * GuiWidget.DeviceScale;  					break;    				case ImageSizes.Size115x115:  					this.Width = 115 * GuiWidget.DeviceScale;  					this.Height = 115 * GuiWidget.DeviceScale;  					break;    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,PartThumbnailWidget,The following statement contains a magic number: switch (size)  			{  				case ImageSizes.Size50x50:  					this.Width = 50 * GuiWidget.DeviceScale;  					this.Height = 50 * GuiWidget.DeviceScale;  					break;    				case ImageSizes.Size115x115:  					this.Width = 115 * GuiWidget.DeviceScale;  					this.Height = 115 * GuiWidget.DeviceScale;  					break;    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,OnDraw,The following statement contains a magic number: graphics2D.Render(thumbnailImage' Width / 2 - thumbnailImage.Width / 2' Height / 2 - thumbnailImage.Height / 2);
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,OnDraw,The following statement contains a magic number: graphics2D.Render(thumbnailImage' Width / 2 - thumbnailImage.Width / 2' Height / 2 - thumbnailImage.Height / 2);
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,OnDraw,The following statement contains a magic number: graphics2D.Render(thumbnailImage' Width / 2 - thumbnailImage.Width / 2' Height / 2 - thumbnailImage.Height / 2);
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,OnDraw,The following statement contains a magic number: graphics2D.Render(thumbnailImage' Width / 2 - thumbnailImage.Width / 2' Height / 2 - thumbnailImage.Height / 2);
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,BuildImageFromMeshGroups,The following statement contains a magic number: if (loadedMeshGroups != null  				&& loadedMeshGroups.Count > 0  				&& loadedMeshGroups[0].Meshes != null  				&& loadedMeshGroups[0].Meshes[0] != null)  			{  				ImageBuffer tempImage = new ImageBuffer(size.x' size.y);  				Graphics2D partGraphics2D = tempImage.NewGraphics2D();  				partGraphics2D.Clear(new RGBA_Bytes());    				AxisAlignedBoundingBox aabb = loadedMeshGroups[0].GetAxisAlignedBoundingBox();  				for (int meshGroupIndex = 1; meshGroupIndex < loadedMeshGroups.Count; meshGroupIndex++)  				{  					aabb = AxisAlignedBoundingBox.Union(aabb' loadedMeshGroups[meshGroupIndex].GetAxisAlignedBoundingBox());  				}  				double maxSize = Math.Max(aabb.XSize' aabb.YSize);  				double scale = size.x / (maxSize * 1.2);  				RectangleDouble bounds2D = new RectangleDouble(aabb.minXYZ.x' aabb.minXYZ.y' aabb.maxXYZ.x' aabb.maxXYZ.y);  				foreach (MeshGroup meshGroup in loadedMeshGroups)  				{  					foreach (Mesh loadedMesh in meshGroup.Meshes)  					{  						PolygonMesh.Rendering.OrthographicZProjection.DrawTo(partGraphics2D' loadedMesh'  							new Vector2((size.x / scale - bounds2D.Width) / 2 - bounds2D.Left'  								(size.y / scale - bounds2D.Height) / 2 - bounds2D.Bottom)'  							scale' RGBA_Bytes.White);  					}  				}    				if (File.Exists("RunUnitTests.txt"))  				{  					foreach (Mesh loadedMesh in loadedMeshGroups[0].Meshes)  					{  						List<MeshEdge> nonManifoldEdges = loadedMesh.GetNonManifoldEdges();  						if (nonManifoldEdges.Count > 0)  						{  							partGraphics2D.Circle(size.x / 4' size.x / 4' size.x / 8' RGBA_Bytes.Red);  						}  					}  				}    				tempImage.SetRecieveBlender(new BlenderPreMultBGRA());  				AllWhite.DoAllWhite(tempImage);    				// and give it back  				return tempImage;  			}
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,BuildImageFromMeshGroups,The following statement contains a magic number: if (loadedMeshGroups != null  				&& loadedMeshGroups.Count > 0  				&& loadedMeshGroups[0].Meshes != null  				&& loadedMeshGroups[0].Meshes[0] != null)  			{  				ImageBuffer tempImage = new ImageBuffer(size.x' size.y);  				Graphics2D partGraphics2D = tempImage.NewGraphics2D();  				partGraphics2D.Clear(new RGBA_Bytes());    				AxisAlignedBoundingBox aabb = loadedMeshGroups[0].GetAxisAlignedBoundingBox();  				for (int meshGroupIndex = 1; meshGroupIndex < loadedMeshGroups.Count; meshGroupIndex++)  				{  					aabb = AxisAlignedBoundingBox.Union(aabb' loadedMeshGroups[meshGroupIndex].GetAxisAlignedBoundingBox());  				}  				double maxSize = Math.Max(aabb.XSize' aabb.YSize);  				double scale = size.x / (maxSize * 1.2);  				RectangleDouble bounds2D = new RectangleDouble(aabb.minXYZ.x' aabb.minXYZ.y' aabb.maxXYZ.x' aabb.maxXYZ.y);  				foreach (MeshGroup meshGroup in loadedMeshGroups)  				{  					foreach (Mesh loadedMesh in meshGroup.Meshes)  					{  						PolygonMesh.Rendering.OrthographicZProjection.DrawTo(partGraphics2D' loadedMesh'  							new Vector2((size.x / scale - bounds2D.Width) / 2 - bounds2D.Left'  								(size.y / scale - bounds2D.Height) / 2 - bounds2D.Bottom)'  							scale' RGBA_Bytes.White);  					}  				}    				if (File.Exists("RunUnitTests.txt"))  				{  					foreach (Mesh loadedMesh in loadedMeshGroups[0].Meshes)  					{  						List<MeshEdge> nonManifoldEdges = loadedMesh.GetNonManifoldEdges();  						if (nonManifoldEdges.Count > 0)  						{  							partGraphics2D.Circle(size.x / 4' size.x / 4' size.x / 8' RGBA_Bytes.Red);  						}  					}  				}    				tempImage.SetRecieveBlender(new BlenderPreMultBGRA());  				AllWhite.DoAllWhite(tempImage);    				// and give it back  				return tempImage;  			}
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,BuildImageFromMeshGroups,The following statement contains a magic number: if (loadedMeshGroups != null  				&& loadedMeshGroups.Count > 0  				&& loadedMeshGroups[0].Meshes != null  				&& loadedMeshGroups[0].Meshes[0] != null)  			{  				ImageBuffer tempImage = new ImageBuffer(size.x' size.y);  				Graphics2D partGraphics2D = tempImage.NewGraphics2D();  				partGraphics2D.Clear(new RGBA_Bytes());    				AxisAlignedBoundingBox aabb = loadedMeshGroups[0].GetAxisAlignedBoundingBox();  				for (int meshGroupIndex = 1; meshGroupIndex < loadedMeshGroups.Count; meshGroupIndex++)  				{  					aabb = AxisAlignedBoundingBox.Union(aabb' loadedMeshGroups[meshGroupIndex].GetAxisAlignedBoundingBox());  				}  				double maxSize = Math.Max(aabb.XSize' aabb.YSize);  				double scale = size.x / (maxSize * 1.2);  				RectangleDouble bounds2D = new RectangleDouble(aabb.minXYZ.x' aabb.minXYZ.y' aabb.maxXYZ.x' aabb.maxXYZ.y);  				foreach (MeshGroup meshGroup in loadedMeshGroups)  				{  					foreach (Mesh loadedMesh in meshGroup.Meshes)  					{  						PolygonMesh.Rendering.OrthographicZProjection.DrawTo(partGraphics2D' loadedMesh'  							new Vector2((size.x / scale - bounds2D.Width) / 2 - bounds2D.Left'  								(size.y / scale - bounds2D.Height) / 2 - bounds2D.Bottom)'  							scale' RGBA_Bytes.White);  					}  				}    				if (File.Exists("RunUnitTests.txt"))  				{  					foreach (Mesh loadedMesh in loadedMeshGroups[0].Meshes)  					{  						List<MeshEdge> nonManifoldEdges = loadedMesh.GetNonManifoldEdges();  						if (nonManifoldEdges.Count > 0)  						{  							partGraphics2D.Circle(size.x / 4' size.x / 4' size.x / 8' RGBA_Bytes.Red);  						}  					}  				}    				tempImage.SetRecieveBlender(new BlenderPreMultBGRA());  				AllWhite.DoAllWhite(tempImage);    				// and give it back  				return tempImage;  			}
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,BuildImageFromMeshGroups,The following statement contains a magic number: if (loadedMeshGroups != null  				&& loadedMeshGroups.Count > 0  				&& loadedMeshGroups[0].Meshes != null  				&& loadedMeshGroups[0].Meshes[0] != null)  			{  				ImageBuffer tempImage = new ImageBuffer(size.x' size.y);  				Graphics2D partGraphics2D = tempImage.NewGraphics2D();  				partGraphics2D.Clear(new RGBA_Bytes());    				AxisAlignedBoundingBox aabb = loadedMeshGroups[0].GetAxisAlignedBoundingBox();  				for (int meshGroupIndex = 1; meshGroupIndex < loadedMeshGroups.Count; meshGroupIndex++)  				{  					aabb = AxisAlignedBoundingBox.Union(aabb' loadedMeshGroups[meshGroupIndex].GetAxisAlignedBoundingBox());  				}  				double maxSize = Math.Max(aabb.XSize' aabb.YSize);  				double scale = size.x / (maxSize * 1.2);  				RectangleDouble bounds2D = new RectangleDouble(aabb.minXYZ.x' aabb.minXYZ.y' aabb.maxXYZ.x' aabb.maxXYZ.y);  				foreach (MeshGroup meshGroup in loadedMeshGroups)  				{  					foreach (Mesh loadedMesh in meshGroup.Meshes)  					{  						PolygonMesh.Rendering.OrthographicZProjection.DrawTo(partGraphics2D' loadedMesh'  							new Vector2((size.x / scale - bounds2D.Width) / 2 - bounds2D.Left'  								(size.y / scale - bounds2D.Height) / 2 - bounds2D.Bottom)'  							scale' RGBA_Bytes.White);  					}  				}    				if (File.Exists("RunUnitTests.txt"))  				{  					foreach (Mesh loadedMesh in loadedMeshGroups[0].Meshes)  					{  						List<MeshEdge> nonManifoldEdges = loadedMesh.GetNonManifoldEdges();  						if (nonManifoldEdges.Count > 0)  						{  							partGraphics2D.Circle(size.x / 4' size.x / 4' size.x / 8' RGBA_Bytes.Red);  						}  					}  				}    				tempImage.SetRecieveBlender(new BlenderPreMultBGRA());  				AllWhite.DoAllWhite(tempImage);    				// and give it back  				return tempImage;  			}
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,BuildImageFromMeshGroups,The following statement contains a magic number: if (loadedMeshGroups != null  				&& loadedMeshGroups.Count > 0  				&& loadedMeshGroups[0].Meshes != null  				&& loadedMeshGroups[0].Meshes[0] != null)  			{  				ImageBuffer tempImage = new ImageBuffer(size.x' size.y);  				Graphics2D partGraphics2D = tempImage.NewGraphics2D();  				partGraphics2D.Clear(new RGBA_Bytes());    				AxisAlignedBoundingBox aabb = loadedMeshGroups[0].GetAxisAlignedBoundingBox();  				for (int meshGroupIndex = 1; meshGroupIndex < loadedMeshGroups.Count; meshGroupIndex++)  				{  					aabb = AxisAlignedBoundingBox.Union(aabb' loadedMeshGroups[meshGroupIndex].GetAxisAlignedBoundingBox());  				}  				double maxSize = Math.Max(aabb.XSize' aabb.YSize);  				double scale = size.x / (maxSize * 1.2);  				RectangleDouble bounds2D = new RectangleDouble(aabb.minXYZ.x' aabb.minXYZ.y' aabb.maxXYZ.x' aabb.maxXYZ.y);  				foreach (MeshGroup meshGroup in loadedMeshGroups)  				{  					foreach (Mesh loadedMesh in meshGroup.Meshes)  					{  						PolygonMesh.Rendering.OrthographicZProjection.DrawTo(partGraphics2D' loadedMesh'  							new Vector2((size.x / scale - bounds2D.Width) / 2 - bounds2D.Left'  								(size.y / scale - bounds2D.Height) / 2 - bounds2D.Bottom)'  							scale' RGBA_Bytes.White);  					}  				}    				if (File.Exists("RunUnitTests.txt"))  				{  					foreach (Mesh loadedMesh in loadedMeshGroups[0].Meshes)  					{  						List<MeshEdge> nonManifoldEdges = loadedMesh.GetNonManifoldEdges();  						if (nonManifoldEdges.Count > 0)  						{  							partGraphics2D.Circle(size.x / 4' size.x / 4' size.x / 8' RGBA_Bytes.Red);  						}  					}  				}    				tempImage.SetRecieveBlender(new BlenderPreMultBGRA());  				AllWhite.DoAllWhite(tempImage);    				// and give it back  				return tempImage;  			}
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,BuildImageFromMeshGroups,The following statement contains a magic number: if (loadedMeshGroups != null  				&& loadedMeshGroups.Count > 0  				&& loadedMeshGroups[0].Meshes != null  				&& loadedMeshGroups[0].Meshes[0] != null)  			{  				ImageBuffer tempImage = new ImageBuffer(size.x' size.y);  				Graphics2D partGraphics2D = tempImage.NewGraphics2D();  				partGraphics2D.Clear(new RGBA_Bytes());    				AxisAlignedBoundingBox aabb = loadedMeshGroups[0].GetAxisAlignedBoundingBox();  				for (int meshGroupIndex = 1; meshGroupIndex < loadedMeshGroups.Count; meshGroupIndex++)  				{  					aabb = AxisAlignedBoundingBox.Union(aabb' loadedMeshGroups[meshGroupIndex].GetAxisAlignedBoundingBox());  				}  				double maxSize = Math.Max(aabb.XSize' aabb.YSize);  				double scale = size.x / (maxSize * 1.2);  				RectangleDouble bounds2D = new RectangleDouble(aabb.minXYZ.x' aabb.minXYZ.y' aabb.maxXYZ.x' aabb.maxXYZ.y);  				foreach (MeshGroup meshGroup in loadedMeshGroups)  				{  					foreach (Mesh loadedMesh in meshGroup.Meshes)  					{  						PolygonMesh.Rendering.OrthographicZProjection.DrawTo(partGraphics2D' loadedMesh'  							new Vector2((size.x / scale - bounds2D.Width) / 2 - bounds2D.Left'  								(size.y / scale - bounds2D.Height) / 2 - bounds2D.Bottom)'  							scale' RGBA_Bytes.White);  					}  				}    				if (File.Exists("RunUnitTests.txt"))  				{  					foreach (Mesh loadedMesh in loadedMeshGroups[0].Meshes)  					{  						List<MeshEdge> nonManifoldEdges = loadedMesh.GetNonManifoldEdges();  						if (nonManifoldEdges.Count > 0)  						{  							partGraphics2D.Circle(size.x / 4' size.x / 4' size.x / 8' RGBA_Bytes.Red);  						}  					}  				}    				tempImage.SetRecieveBlender(new BlenderPreMultBGRA());  				AllWhite.DoAllWhite(tempImage);    				// and give it back  				return tempImage;  			}
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,Is32Bit,The following statement contains a magic number: if (IntPtr.Size == 4)  			{  				return true;  			}
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,CreateThumbnail,The following statement contains a magic number: switch (renderType)  			{  				case RenderType.RAY_TRACE:  					{  						ThumbnailTracer tracer = new ThumbnailTracer(loadedMeshGroups' BigRenderSize.x' BigRenderSize.y);  						tracer.DoTrace();    						bigRender = tracer.destImage;  					}  					break;    				case RenderType.PERSPECTIVE:  					{  						ThumbnailTracer tracer = new ThumbnailTracer(loadedMeshGroups' BigRenderSize.x' BigRenderSize.y);  						this.thumbnailImage = new ImageBuffer(this.buildingThumbnailImage);  						this.thumbnailImage.NewGraphics2D().Clear(new RGBA_Bytes(255' 255' 255' 0));    						bigRender = new ImageBuffer(BigRenderSize.x' BigRenderSize.y);    						foreach (MeshGroup meshGroup in loadedMeshGroups)  						{  							double minZ = double.MaxValue;  							double maxZ = double.MinValue;  							foreach (Mesh loadedMesh in meshGroup.Meshes)  							{  								tracer.GetMinMaxZ(loadedMesh' ref minZ' ref maxZ);  							}    							foreach (Mesh loadedMesh in meshGroup.Meshes)  							{  								tracer.DrawTo(bigRender.NewGraphics2D()' loadedMesh' RGBA_Bytes.White' minZ' maxZ);  							}  						}    						if (bigRender == null)  						{  							bigRender = new ImageBuffer(this.noThumbnailImage);  						}  					}  					break;    				case RenderType.NONE:  				case RenderType.ORTHOGROPHIC:    					this.thumbnailImage = new ImageBuffer(this.buildingThumbnailImage);  					this.thumbnailImage.NewGraphics2D().Clear(new RGBA_Bytes(255' 255' 255' 0));  					bigRender = BuildImageFromMeshGroups(loadedMeshGroups' stlHashCode' BigRenderSize);  					if (bigRender == null)  					{  						bigRender = new ImageBuffer(this.noThumbnailImage);  					}  					break;  			}
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,CreateThumbnail,The following statement contains a magic number: switch (renderType)  			{  				case RenderType.RAY_TRACE:  					{  						ThumbnailTracer tracer = new ThumbnailTracer(loadedMeshGroups' BigRenderSize.x' BigRenderSize.y);  						tracer.DoTrace();    						bigRender = tracer.destImage;  					}  					break;    				case RenderType.PERSPECTIVE:  					{  						ThumbnailTracer tracer = new ThumbnailTracer(loadedMeshGroups' BigRenderSize.x' BigRenderSize.y);  						this.thumbnailImage = new ImageBuffer(this.buildingThumbnailImage);  						this.thumbnailImage.NewGraphics2D().Clear(new RGBA_Bytes(255' 255' 255' 0));    						bigRender = new ImageBuffer(BigRenderSize.x' BigRenderSize.y);    						foreach (MeshGroup meshGroup in loadedMeshGroups)  						{  							double minZ = double.MaxValue;  							double maxZ = double.MinValue;  							foreach (Mesh loadedMesh in meshGroup.Meshes)  							{  								tracer.GetMinMaxZ(loadedMesh' ref minZ' ref maxZ);  							}    							foreach (Mesh loadedMesh in meshGroup.Meshes)  							{  								tracer.DrawTo(bigRender.NewGraphics2D()' loadedMesh' RGBA_Bytes.White' minZ' maxZ);  							}  						}    						if (bigRender == null)  						{  							bigRender = new ImageBuffer(this.noThumbnailImage);  						}  					}  					break;    				case RenderType.NONE:  				case RenderType.ORTHOGROPHIC:    					this.thumbnailImage = new ImageBuffer(this.buildingThumbnailImage);  					this.thumbnailImage.NewGraphics2D().Clear(new RGBA_Bytes(255' 255' 255' 0));  					bigRender = BuildImageFromMeshGroups(loadedMeshGroups' stlHashCode' BigRenderSize);  					if (bigRender == null)  					{  						bigRender = new ImageBuffer(this.noThumbnailImage);  					}  					break;  			}
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,CreateThumbnail,The following statement contains a magic number: switch (renderType)  			{  				case RenderType.RAY_TRACE:  					{  						ThumbnailTracer tracer = new ThumbnailTracer(loadedMeshGroups' BigRenderSize.x' BigRenderSize.y);  						tracer.DoTrace();    						bigRender = tracer.destImage;  					}  					break;    				case RenderType.PERSPECTIVE:  					{  						ThumbnailTracer tracer = new ThumbnailTracer(loadedMeshGroups' BigRenderSize.x' BigRenderSize.y);  						this.thumbnailImage = new ImageBuffer(this.buildingThumbnailImage);  						this.thumbnailImage.NewGraphics2D().Clear(new RGBA_Bytes(255' 255' 255' 0));    						bigRender = new ImageBuffer(BigRenderSize.x' BigRenderSize.y);    						foreach (MeshGroup meshGroup in loadedMeshGroups)  						{  							double minZ = double.MaxValue;  							double maxZ = double.MinValue;  							foreach (Mesh loadedMesh in meshGroup.Meshes)  							{  								tracer.GetMinMaxZ(loadedMesh' ref minZ' ref maxZ);  							}    							foreach (Mesh loadedMesh in meshGroup.Meshes)  							{  								tracer.DrawTo(bigRender.NewGraphics2D()' loadedMesh' RGBA_Bytes.White' minZ' maxZ);  							}  						}    						if (bigRender == null)  						{  							bigRender = new ImageBuffer(this.noThumbnailImage);  						}  					}  					break;    				case RenderType.NONE:  				case RenderType.ORTHOGROPHIC:    					this.thumbnailImage = new ImageBuffer(this.buildingThumbnailImage);  					this.thumbnailImage.NewGraphics2D().Clear(new RGBA_Bytes(255' 255' 255' 0));  					bigRender = BuildImageFromMeshGroups(loadedMeshGroups' stlHashCode' BigRenderSize);  					if (bigRender == null)  					{  						bigRender = new ImageBuffer(this.noThumbnailImage);  					}  					break;  			}
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,CreateThumbnail,The following statement contains a magic number: switch (renderType)  			{  				case RenderType.RAY_TRACE:  					{  						ThumbnailTracer tracer = new ThumbnailTracer(loadedMeshGroups' BigRenderSize.x' BigRenderSize.y);  						tracer.DoTrace();    						bigRender = tracer.destImage;  					}  					break;    				case RenderType.PERSPECTIVE:  					{  						ThumbnailTracer tracer = new ThumbnailTracer(loadedMeshGroups' BigRenderSize.x' BigRenderSize.y);  						this.thumbnailImage = new ImageBuffer(this.buildingThumbnailImage);  						this.thumbnailImage.NewGraphics2D().Clear(new RGBA_Bytes(255' 255' 255' 0));    						bigRender = new ImageBuffer(BigRenderSize.x' BigRenderSize.y);    						foreach (MeshGroup meshGroup in loadedMeshGroups)  						{  							double minZ = double.MaxValue;  							double maxZ = double.MinValue;  							foreach (Mesh loadedMesh in meshGroup.Meshes)  							{  								tracer.GetMinMaxZ(loadedMesh' ref minZ' ref maxZ);  							}    							foreach (Mesh loadedMesh in meshGroup.Meshes)  							{  								tracer.DrawTo(bigRender.NewGraphics2D()' loadedMesh' RGBA_Bytes.White' minZ' maxZ);  							}  						}    						if (bigRender == null)  						{  							bigRender = new ImageBuffer(this.noThumbnailImage);  						}  					}  					break;    				case RenderType.NONE:  				case RenderType.ORTHOGROPHIC:    					this.thumbnailImage = new ImageBuffer(this.buildingThumbnailImage);  					this.thumbnailImage.NewGraphics2D().Clear(new RGBA_Bytes(255' 255' 255' 0));  					bigRender = BuildImageFromMeshGroups(loadedMeshGroups' stlHashCode' BigRenderSize);  					if (bigRender == null)  					{  						bigRender = new ImageBuffer(this.noThumbnailImage);  					}  					break;  			}
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,CreateThumbnail,The following statement contains a magic number: switch (renderType)  			{  				case RenderType.RAY_TRACE:  					{  						ThumbnailTracer tracer = new ThumbnailTracer(loadedMeshGroups' BigRenderSize.x' BigRenderSize.y);  						tracer.DoTrace();    						bigRender = tracer.destImage;  					}  					break;    				case RenderType.PERSPECTIVE:  					{  						ThumbnailTracer tracer = new ThumbnailTracer(loadedMeshGroups' BigRenderSize.x' BigRenderSize.y);  						this.thumbnailImage = new ImageBuffer(this.buildingThumbnailImage);  						this.thumbnailImage.NewGraphics2D().Clear(new RGBA_Bytes(255' 255' 255' 0));    						bigRender = new ImageBuffer(BigRenderSize.x' BigRenderSize.y);    						foreach (MeshGroup meshGroup in loadedMeshGroups)  						{  							double minZ = double.MaxValue;  							double maxZ = double.MinValue;  							foreach (Mesh loadedMesh in meshGroup.Meshes)  							{  								tracer.GetMinMaxZ(loadedMesh' ref minZ' ref maxZ);  							}    							foreach (Mesh loadedMesh in meshGroup.Meshes)  							{  								tracer.DrawTo(bigRender.NewGraphics2D()' loadedMesh' RGBA_Bytes.White' minZ' maxZ);  							}  						}    						if (bigRender == null)  						{  							bigRender = new ImageBuffer(this.noThumbnailImage);  						}  					}  					break;    				case RenderType.NONE:  				case RenderType.ORTHOGROPHIC:    					this.thumbnailImage = new ImageBuffer(this.buildingThumbnailImage);  					this.thumbnailImage.NewGraphics2D().Clear(new RGBA_Bytes(255' 255' 255' 0));  					bigRender = BuildImageFromMeshGroups(loadedMeshGroups' stlHashCode' BigRenderSize);  					if (bigRender == null)  					{  						bigRender = new ImageBuffer(this.noThumbnailImage);  					}  					break;  			}
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,CreateThumbnail,The following statement contains a magic number: switch (renderType)  			{  				case RenderType.RAY_TRACE:  					{  						ThumbnailTracer tracer = new ThumbnailTracer(loadedMeshGroups' BigRenderSize.x' BigRenderSize.y);  						tracer.DoTrace();    						bigRender = tracer.destImage;  					}  					break;    				case RenderType.PERSPECTIVE:  					{  						ThumbnailTracer tracer = new ThumbnailTracer(loadedMeshGroups' BigRenderSize.x' BigRenderSize.y);  						this.thumbnailImage = new ImageBuffer(this.buildingThumbnailImage);  						this.thumbnailImage.NewGraphics2D().Clear(new RGBA_Bytes(255' 255' 255' 0));    						bigRender = new ImageBuffer(BigRenderSize.x' BigRenderSize.y);    						foreach (MeshGroup meshGroup in loadedMeshGroups)  						{  							double minZ = double.MaxValue;  							double maxZ = double.MinValue;  							foreach (Mesh loadedMesh in meshGroup.Meshes)  							{  								tracer.GetMinMaxZ(loadedMesh' ref minZ' ref maxZ);  							}    							foreach (Mesh loadedMesh in meshGroup.Meshes)  							{  								tracer.DrawTo(bigRender.NewGraphics2D()' loadedMesh' RGBA_Bytes.White' minZ' maxZ);  							}  						}    						if (bigRender == null)  						{  							bigRender = new ImageBuffer(this.noThumbnailImage);  						}  					}  					break;    				case RenderType.NONE:  				case RenderType.ORTHOGROPHIC:    					this.thumbnailImage = new ImageBuffer(this.buildingThumbnailImage);  					this.thumbnailImage.NewGraphics2D().Clear(new RGBA_Bytes(255' 255' 255' 0));  					bigRender = BuildImageFromMeshGroups(loadedMeshGroups' stlHashCode' BigRenderSize);  					if (bigRender == null)  					{  						bigRender = new ImageBuffer(this.noThumbnailImage);  					}  					break;  			}
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,onEnter,The following statement contains a magic number: HoverBorderColor = new RGBA_Bytes(255' 255' 255);
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,onEnter,The following statement contains a magic number: HoverBorderColor = new RGBA_Bytes(255' 255' 255);
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,onEnter,The following statement contains a magic number: HoverBorderColor = new RGBA_Bytes(255' 255' 255);
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,GetImageForItem,The following statement contains a magic number: if (itemWrapper.FileLocation == QueueData.SdCardFileName)  			{  				ImageBuffer sdCardImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_115x115"' partExtension)).InvertLightness();  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				graphics.Render(sdCardImage' width / 2 - sdCardImage.Width / 2' height / 2 - sdCardImage.Height / 2);  				Ellipse outline = new Ellipse(new Vector2(width / 2.0' height / 2.0)' width / 2 - width / 12);  				graphics.Render(new Stroke(outline' width / 12)' RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (Path.GetExtension(itemWrapper.FileLocation).ToUpper() == ".GCODE")  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				Ellipse outline = new Ellipse(center' width / 2 - width / 12);  				graphics.Render(new Stroke(outline' width / 12)' RGBA_Bytes.White);  				graphics.DrawString("GCode"' center.x' center.y' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (!File.Exists(itemWrapper.FileLocation))  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				graphics.DrawString("Missing"' center.x' center.y' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (MeshIsTooBigToLoad(itemWrapper.FileLocation))  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				double yOffset = 8 * width / 50 * GuiWidget.DeviceScale * 2;  				graphics.DrawString("Reduce\nPolygons\nto\nRender"' center.x' center.y + yOffset' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,GetImageForItem,The following statement contains a magic number: if (itemWrapper.FileLocation == QueueData.SdCardFileName)  			{  				ImageBuffer sdCardImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_115x115"' partExtension)).InvertLightness();  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				graphics.Render(sdCardImage' width / 2 - sdCardImage.Width / 2' height / 2 - sdCardImage.Height / 2);  				Ellipse outline = new Ellipse(new Vector2(width / 2.0' height / 2.0)' width / 2 - width / 12);  				graphics.Render(new Stroke(outline' width / 12)' RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (Path.GetExtension(itemWrapper.FileLocation).ToUpper() == ".GCODE")  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				Ellipse outline = new Ellipse(center' width / 2 - width / 12);  				graphics.Render(new Stroke(outline' width / 12)' RGBA_Bytes.White);  				graphics.DrawString("GCode"' center.x' center.y' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (!File.Exists(itemWrapper.FileLocation))  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				graphics.DrawString("Missing"' center.x' center.y' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (MeshIsTooBigToLoad(itemWrapper.FileLocation))  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				double yOffset = 8 * width / 50 * GuiWidget.DeviceScale * 2;  				graphics.DrawString("Reduce\nPolygons\nto\nRender"' center.x' center.y + yOffset' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,GetImageForItem,The following statement contains a magic number: if (itemWrapper.FileLocation == QueueData.SdCardFileName)  			{  				ImageBuffer sdCardImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_115x115"' partExtension)).InvertLightness();  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				graphics.Render(sdCardImage' width / 2 - sdCardImage.Width / 2' height / 2 - sdCardImage.Height / 2);  				Ellipse outline = new Ellipse(new Vector2(width / 2.0' height / 2.0)' width / 2 - width / 12);  				graphics.Render(new Stroke(outline' width / 12)' RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (Path.GetExtension(itemWrapper.FileLocation).ToUpper() == ".GCODE")  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				Ellipse outline = new Ellipse(center' width / 2 - width / 12);  				graphics.Render(new Stroke(outline' width / 12)' RGBA_Bytes.White);  				graphics.DrawString("GCode"' center.x' center.y' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (!File.Exists(itemWrapper.FileLocation))  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				graphics.DrawString("Missing"' center.x' center.y' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (MeshIsTooBigToLoad(itemWrapper.FileLocation))  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				double yOffset = 8 * width / 50 * GuiWidget.DeviceScale * 2;  				graphics.DrawString("Reduce\nPolygons\nto\nRender"' center.x' center.y + yOffset' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,GetImageForItem,The following statement contains a magic number: if (itemWrapper.FileLocation == QueueData.SdCardFileName)  			{  				ImageBuffer sdCardImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_115x115"' partExtension)).InvertLightness();  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				graphics.Render(sdCardImage' width / 2 - sdCardImage.Width / 2' height / 2 - sdCardImage.Height / 2);  				Ellipse outline = new Ellipse(new Vector2(width / 2.0' height / 2.0)' width / 2 - width / 12);  				graphics.Render(new Stroke(outline' width / 12)' RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (Path.GetExtension(itemWrapper.FileLocation).ToUpper() == ".GCODE")  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				Ellipse outline = new Ellipse(center' width / 2 - width / 12);  				graphics.Render(new Stroke(outline' width / 12)' RGBA_Bytes.White);  				graphics.DrawString("GCode"' center.x' center.y' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (!File.Exists(itemWrapper.FileLocation))  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				graphics.DrawString("Missing"' center.x' center.y' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (MeshIsTooBigToLoad(itemWrapper.FileLocation))  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				double yOffset = 8 * width / 50 * GuiWidget.DeviceScale * 2;  				graphics.DrawString("Reduce\nPolygons\nto\nRender"' center.x' center.y + yOffset' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,GetImageForItem,The following statement contains a magic number: if (itemWrapper.FileLocation == QueueData.SdCardFileName)  			{  				ImageBuffer sdCardImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_115x115"' partExtension)).InvertLightness();  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				graphics.Render(sdCardImage' width / 2 - sdCardImage.Width / 2' height / 2 - sdCardImage.Height / 2);  				Ellipse outline = new Ellipse(new Vector2(width / 2.0' height / 2.0)' width / 2 - width / 12);  				graphics.Render(new Stroke(outline' width / 12)' RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (Path.GetExtension(itemWrapper.FileLocation).ToUpper() == ".GCODE")  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				Ellipse outline = new Ellipse(center' width / 2 - width / 12);  				graphics.Render(new Stroke(outline' width / 12)' RGBA_Bytes.White);  				graphics.DrawString("GCode"' center.x' center.y' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (!File.Exists(itemWrapper.FileLocation))  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				graphics.DrawString("Missing"' center.x' center.y' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (MeshIsTooBigToLoad(itemWrapper.FileLocation))  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				double yOffset = 8 * width / 50 * GuiWidget.DeviceScale * 2;  				graphics.DrawString("Reduce\nPolygons\nto\nRender"' center.x' center.y + yOffset' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,GetImageForItem,The following statement contains a magic number: if (itemWrapper.FileLocation == QueueData.SdCardFileName)  			{  				ImageBuffer sdCardImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_115x115"' partExtension)).InvertLightness();  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				graphics.Render(sdCardImage' width / 2 - sdCardImage.Width / 2' height / 2 - sdCardImage.Height / 2);  				Ellipse outline = new Ellipse(new Vector2(width / 2.0' height / 2.0)' width / 2 - width / 12);  				graphics.Render(new Stroke(outline' width / 12)' RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (Path.GetExtension(itemWrapper.FileLocation).ToUpper() == ".GCODE")  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				Ellipse outline = new Ellipse(center' width / 2 - width / 12);  				graphics.Render(new Stroke(outline' width / 12)' RGBA_Bytes.White);  				graphics.DrawString("GCode"' center.x' center.y' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (!File.Exists(itemWrapper.FileLocation))  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				graphics.DrawString("Missing"' center.x' center.y' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (MeshIsTooBigToLoad(itemWrapper.FileLocation))  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				double yOffset = 8 * width / 50 * GuiWidget.DeviceScale * 2;  				graphics.DrawString("Reduce\nPolygons\nto\nRender"' center.x' center.y + yOffset' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,GetImageForItem,The following statement contains a magic number: if (itemWrapper.FileLocation == QueueData.SdCardFileName)  			{  				ImageBuffer sdCardImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_115x115"' partExtension)).InvertLightness();  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				graphics.Render(sdCardImage' width / 2 - sdCardImage.Width / 2' height / 2 - sdCardImage.Height / 2);  				Ellipse outline = new Ellipse(new Vector2(width / 2.0' height / 2.0)' width / 2 - width / 12);  				graphics.Render(new Stroke(outline' width / 12)' RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (Path.GetExtension(itemWrapper.FileLocation).ToUpper() == ".GCODE")  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				Ellipse outline = new Ellipse(center' width / 2 - width / 12);  				graphics.Render(new Stroke(outline' width / 12)' RGBA_Bytes.White);  				graphics.DrawString("GCode"' center.x' center.y' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (!File.Exists(itemWrapper.FileLocation))  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				graphics.DrawString("Missing"' center.x' center.y' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (MeshIsTooBigToLoad(itemWrapper.FileLocation))  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				double yOffset = 8 * width / 50 * GuiWidget.DeviceScale * 2;  				graphics.DrawString("Reduce\nPolygons\nto\nRender"' center.x' center.y + yOffset' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,GetImageForItem,The following statement contains a magic number: if (itemWrapper.FileLocation == QueueData.SdCardFileName)  			{  				ImageBuffer sdCardImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_115x115"' partExtension)).InvertLightness();  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				graphics.Render(sdCardImage' width / 2 - sdCardImage.Width / 2' height / 2 - sdCardImage.Height / 2);  				Ellipse outline = new Ellipse(new Vector2(width / 2.0' height / 2.0)' width / 2 - width / 12);  				graphics.Render(new Stroke(outline' width / 12)' RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (Path.GetExtension(itemWrapper.FileLocation).ToUpper() == ".GCODE")  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				Ellipse outline = new Ellipse(center' width / 2 - width / 12);  				graphics.Render(new Stroke(outline' width / 12)' RGBA_Bytes.White);  				graphics.DrawString("GCode"' center.x' center.y' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (!File.Exists(itemWrapper.FileLocation))  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				graphics.DrawString("Missing"' center.x' center.y' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (MeshIsTooBigToLoad(itemWrapper.FileLocation))  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				double yOffset = 8 * width / 50 * GuiWidget.DeviceScale * 2;  				graphics.DrawString("Reduce\nPolygons\nto\nRender"' center.x' center.y + yOffset' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,GetImageForItem,The following statement contains a magic number: if (itemWrapper.FileLocation == QueueData.SdCardFileName)  			{  				ImageBuffer sdCardImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_115x115"' partExtension)).InvertLightness();  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				graphics.Render(sdCardImage' width / 2 - sdCardImage.Width / 2' height / 2 - sdCardImage.Height / 2);  				Ellipse outline = new Ellipse(new Vector2(width / 2.0' height / 2.0)' width / 2 - width / 12);  				graphics.Render(new Stroke(outline' width / 12)' RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (Path.GetExtension(itemWrapper.FileLocation).ToUpper() == ".GCODE")  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				Ellipse outline = new Ellipse(center' width / 2 - width / 12);  				graphics.Render(new Stroke(outline' width / 12)' RGBA_Bytes.White);  				graphics.DrawString("GCode"' center.x' center.y' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (!File.Exists(itemWrapper.FileLocation))  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				graphics.DrawString("Missing"' center.x' center.y' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (MeshIsTooBigToLoad(itemWrapper.FileLocation))  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				double yOffset = 8 * width / 50 * GuiWidget.DeviceScale * 2;  				graphics.DrawString("Reduce\nPolygons\nto\nRender"' center.x' center.y + yOffset' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,GetImageForItem,The following statement contains a magic number: if (itemWrapper.FileLocation == QueueData.SdCardFileName)  			{  				ImageBuffer sdCardImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_115x115"' partExtension)).InvertLightness();  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				graphics.Render(sdCardImage' width / 2 - sdCardImage.Width / 2' height / 2 - sdCardImage.Height / 2);  				Ellipse outline = new Ellipse(new Vector2(width / 2.0' height / 2.0)' width / 2 - width / 12);  				graphics.Render(new Stroke(outline' width / 12)' RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (Path.GetExtension(itemWrapper.FileLocation).ToUpper() == ".GCODE")  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				Ellipse outline = new Ellipse(center' width / 2 - width / 12);  				graphics.Render(new Stroke(outline' width / 12)' RGBA_Bytes.White);  				graphics.DrawString("GCode"' center.x' center.y' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (!File.Exists(itemWrapper.FileLocation))  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				graphics.DrawString("Missing"' center.x' center.y' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (MeshIsTooBigToLoad(itemWrapper.FileLocation))  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				double yOffset = 8 * width / 50 * GuiWidget.DeviceScale * 2;  				graphics.DrawString("Reduce\nPolygons\nto\nRender"' center.x' center.y + yOffset' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,GetImageForItem,The following statement contains a magic number: if (itemWrapper.FileLocation == QueueData.SdCardFileName)  			{  				ImageBuffer sdCardImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_115x115"' partExtension)).InvertLightness();  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				graphics.Render(sdCardImage' width / 2 - sdCardImage.Width / 2' height / 2 - sdCardImage.Height / 2);  				Ellipse outline = new Ellipse(new Vector2(width / 2.0' height / 2.0)' width / 2 - width / 12);  				graphics.Render(new Stroke(outline' width / 12)' RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (Path.GetExtension(itemWrapper.FileLocation).ToUpper() == ".GCODE")  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				Ellipse outline = new Ellipse(center' width / 2 - width / 12);  				graphics.Render(new Stroke(outline' width / 12)' RGBA_Bytes.White);  				graphics.DrawString("GCode"' center.x' center.y' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (!File.Exists(itemWrapper.FileLocation))  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				graphics.DrawString("Missing"' center.x' center.y' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (MeshIsTooBigToLoad(itemWrapper.FileLocation))  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				double yOffset = 8 * width / 50 * GuiWidget.DeviceScale * 2;  				graphics.DrawString("Reduce\nPolygons\nto\nRender"' center.x' center.y + yOffset' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,GetImageForItem,The following statement contains a magic number: if (itemWrapper.FileLocation == QueueData.SdCardFileName)  			{  				ImageBuffer sdCardImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_115x115"' partExtension)).InvertLightness();  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				graphics.Render(sdCardImage' width / 2 - sdCardImage.Width / 2' height / 2 - sdCardImage.Height / 2);  				Ellipse outline = new Ellipse(new Vector2(width / 2.0' height / 2.0)' width / 2 - width / 12);  				graphics.Render(new Stroke(outline' width / 12)' RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (Path.GetExtension(itemWrapper.FileLocation).ToUpper() == ".GCODE")  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				Ellipse outline = new Ellipse(center' width / 2 - width / 12);  				graphics.Render(new Stroke(outline' width / 12)' RGBA_Bytes.White);  				graphics.DrawString("GCode"' center.x' center.y' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (!File.Exists(itemWrapper.FileLocation))  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				graphics.DrawString("Missing"' center.x' center.y' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (MeshIsTooBigToLoad(itemWrapper.FileLocation))  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				double yOffset = 8 * width / 50 * GuiWidget.DeviceScale * 2;  				graphics.DrawString("Reduce\nPolygons\nto\nRender"' center.x' center.y + yOffset' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,GetImageForItem,The following statement contains a magic number: if (itemWrapper.FileLocation == QueueData.SdCardFileName)  			{  				ImageBuffer sdCardImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_115x115"' partExtension)).InvertLightness();  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				graphics.Render(sdCardImage' width / 2 - sdCardImage.Width / 2' height / 2 - sdCardImage.Height / 2);  				Ellipse outline = new Ellipse(new Vector2(width / 2.0' height / 2.0)' width / 2 - width / 12);  				graphics.Render(new Stroke(outline' width / 12)' RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (Path.GetExtension(itemWrapper.FileLocation).ToUpper() == ".GCODE")  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				Ellipse outline = new Ellipse(center' width / 2 - width / 12);  				graphics.Render(new Stroke(outline' width / 12)' RGBA_Bytes.White);  				graphics.DrawString("GCode"' center.x' center.y' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (!File.Exists(itemWrapper.FileLocation))  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				graphics.DrawString("Missing"' center.x' center.y' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (MeshIsTooBigToLoad(itemWrapper.FileLocation))  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				double yOffset = 8 * width / 50 * GuiWidget.DeviceScale * 2;  				graphics.DrawString("Reduce\nPolygons\nto\nRender"' center.x' center.y + yOffset' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,GetImageForItem,The following statement contains a magic number: if (itemWrapper.FileLocation == QueueData.SdCardFileName)  			{  				ImageBuffer sdCardImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_115x115"' partExtension)).InvertLightness();  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				graphics.Render(sdCardImage' width / 2 - sdCardImage.Width / 2' height / 2 - sdCardImage.Height / 2);  				Ellipse outline = new Ellipse(new Vector2(width / 2.0' height / 2.0)' width / 2 - width / 12);  				graphics.Render(new Stroke(outline' width / 12)' RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (Path.GetExtension(itemWrapper.FileLocation).ToUpper() == ".GCODE")  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				Ellipse outline = new Ellipse(center' width / 2 - width / 12);  				graphics.Render(new Stroke(outline' width / 12)' RGBA_Bytes.White);  				graphics.DrawString("GCode"' center.x' center.y' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (!File.Exists(itemWrapper.FileLocation))  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				graphics.DrawString("Missing"' center.x' center.y' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (MeshIsTooBigToLoad(itemWrapper.FileLocation))  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				double yOffset = 8 * width / 50 * GuiWidget.DeviceScale * 2;  				graphics.DrawString("Reduce\nPolygons\nto\nRender"' center.x' center.y + yOffset' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,GetImageForItem,The following statement contains a magic number: if (itemWrapper.FileLocation == QueueData.SdCardFileName)  			{  				ImageBuffer sdCardImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_115x115"' partExtension)).InvertLightness();  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				graphics.Render(sdCardImage' width / 2 - sdCardImage.Width / 2' height / 2 - sdCardImage.Height / 2);  				Ellipse outline = new Ellipse(new Vector2(width / 2.0' height / 2.0)' width / 2 - width / 12);  				graphics.Render(new Stroke(outline' width / 12)' RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (Path.GetExtension(itemWrapper.FileLocation).ToUpper() == ".GCODE")  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				Ellipse outline = new Ellipse(center' width / 2 - width / 12);  				graphics.Render(new Stroke(outline' width / 12)' RGBA_Bytes.White);  				graphics.DrawString("GCode"' center.x' center.y' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (!File.Exists(itemWrapper.FileLocation))  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				graphics.DrawString("Missing"' center.x' center.y' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (MeshIsTooBigToLoad(itemWrapper.FileLocation))  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				double yOffset = 8 * width / 50 * GuiWidget.DeviceScale * 2;  				graphics.DrawString("Reduce\nPolygons\nto\nRender"' center.x' center.y + yOffset' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,GetImageForItem,The following statement contains a magic number: if (itemWrapper.FileLocation == QueueData.SdCardFileName)  			{  				ImageBuffer sdCardImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_115x115"' partExtension)).InvertLightness();  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				graphics.Render(sdCardImage' width / 2 - sdCardImage.Width / 2' height / 2 - sdCardImage.Height / 2);  				Ellipse outline = new Ellipse(new Vector2(width / 2.0' height / 2.0)' width / 2 - width / 12);  				graphics.Render(new Stroke(outline' width / 12)' RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (Path.GetExtension(itemWrapper.FileLocation).ToUpper() == ".GCODE")  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				Ellipse outline = new Ellipse(center' width / 2 - width / 12);  				graphics.Render(new Stroke(outline' width / 12)' RGBA_Bytes.White);  				graphics.DrawString("GCode"' center.x' center.y' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (!File.Exists(itemWrapper.FileLocation))  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				graphics.DrawString("Missing"' center.x' center.y' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (MeshIsTooBigToLoad(itemWrapper.FileLocation))  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				double yOffset = 8 * width / 50 * GuiWidget.DeviceScale * 2;  				graphics.DrawString("Reduce\nPolygons\nto\nRender"' center.x' center.y + yOffset' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,GetImageForItem,The following statement contains a magic number: if (itemWrapper.FileLocation == QueueData.SdCardFileName)  			{  				ImageBuffer sdCardImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_115x115"' partExtension)).InvertLightness();  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				graphics.Render(sdCardImage' width / 2 - sdCardImage.Width / 2' height / 2 - sdCardImage.Height / 2);  				Ellipse outline = new Ellipse(new Vector2(width / 2.0' height / 2.0)' width / 2 - width / 12);  				graphics.Render(new Stroke(outline' width / 12)' RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (Path.GetExtension(itemWrapper.FileLocation).ToUpper() == ".GCODE")  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				Ellipse outline = new Ellipse(center' width / 2 - width / 12);  				graphics.Render(new Stroke(outline' width / 12)' RGBA_Bytes.White);  				graphics.DrawString("GCode"' center.x' center.y' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (!File.Exists(itemWrapper.FileLocation))  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				graphics.DrawString("Missing"' center.x' center.y' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (MeshIsTooBigToLoad(itemWrapper.FileLocation))  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				double yOffset = 8 * width / 50 * GuiWidget.DeviceScale * 2;  				graphics.DrawString("Reduce\nPolygons\nto\nRender"' center.x' center.y + yOffset' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,GetImageForItem,The following statement contains a magic number: if (itemWrapper.FileLocation == QueueData.SdCardFileName)  			{  				ImageBuffer sdCardImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_115x115"' partExtension)).InvertLightness();  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				graphics.Render(sdCardImage' width / 2 - sdCardImage.Width / 2' height / 2 - sdCardImage.Height / 2);  				Ellipse outline = new Ellipse(new Vector2(width / 2.0' height / 2.0)' width / 2 - width / 12);  				graphics.Render(new Stroke(outline' width / 12)' RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (Path.GetExtension(itemWrapper.FileLocation).ToUpper() == ".GCODE")  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				Ellipse outline = new Ellipse(center' width / 2 - width / 12);  				graphics.Render(new Stroke(outline' width / 12)' RGBA_Bytes.White);  				graphics.DrawString("GCode"' center.x' center.y' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (!File.Exists(itemWrapper.FileLocation))  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				graphics.DrawString("Missing"' center.x' center.y' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (MeshIsTooBigToLoad(itemWrapper.FileLocation))  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				double yOffset = 8 * width / 50 * GuiWidget.DeviceScale * 2;  				graphics.DrawString("Reduce\nPolygons\nto\nRender"' center.x' center.y + yOffset' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,GetImageForItem,The following statement contains a magic number: if (itemWrapper.FileLocation == QueueData.SdCardFileName)  			{  				ImageBuffer sdCardImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_115x115"' partExtension)).InvertLightness();  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				graphics.Render(sdCardImage' width / 2 - sdCardImage.Width / 2' height / 2 - sdCardImage.Height / 2);  				Ellipse outline = new Ellipse(new Vector2(width / 2.0' height / 2.0)' width / 2 - width / 12);  				graphics.Render(new Stroke(outline' width / 12)' RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (Path.GetExtension(itemWrapper.FileLocation).ToUpper() == ".GCODE")  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				Ellipse outline = new Ellipse(center' width / 2 - width / 12);  				graphics.Render(new Stroke(outline' width / 12)' RGBA_Bytes.White);  				graphics.DrawString("GCode"' center.x' center.y' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (!File.Exists(itemWrapper.FileLocation))  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				graphics.DrawString("Missing"' center.x' center.y' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (MeshIsTooBigToLoad(itemWrapper.FileLocation))  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				double yOffset = 8 * width / 50 * GuiWidget.DeviceScale * 2;  				graphics.DrawString("Reduce\nPolygons\nto\nRender"' center.x' center.y + yOffset' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,GetImageForItem,The following statement contains a magic number: if (itemWrapper.FileLocation == QueueData.SdCardFileName)  			{  				ImageBuffer sdCardImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_115x115"' partExtension)).InvertLightness();  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				graphics.Render(sdCardImage' width / 2 - sdCardImage.Width / 2' height / 2 - sdCardImage.Height / 2);  				Ellipse outline = new Ellipse(new Vector2(width / 2.0' height / 2.0)' width / 2 - width / 12);  				graphics.Render(new Stroke(outline' width / 12)' RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (Path.GetExtension(itemWrapper.FileLocation).ToUpper() == ".GCODE")  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				Ellipse outline = new Ellipse(center' width / 2 - width / 12);  				graphics.Render(new Stroke(outline' width / 12)' RGBA_Bytes.White);  				graphics.DrawString("GCode"' center.x' center.y' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (!File.Exists(itemWrapper.FileLocation))  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				graphics.DrawString("Missing"' center.x' center.y' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (MeshIsTooBigToLoad(itemWrapper.FileLocation))  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				double yOffset = 8 * width / 50 * GuiWidget.DeviceScale * 2;  				graphics.DrawString("Reduce\nPolygons\nto\nRender"' center.x' center.y + yOffset' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,GetImageForItem,The following statement contains a magic number: if (itemWrapper.FileLocation == QueueData.SdCardFileName)  			{  				ImageBuffer sdCardImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_115x115"' partExtension)).InvertLightness();  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				graphics.Render(sdCardImage' width / 2 - sdCardImage.Width / 2' height / 2 - sdCardImage.Height / 2);  				Ellipse outline = new Ellipse(new Vector2(width / 2.0' height / 2.0)' width / 2 - width / 12);  				graphics.Render(new Stroke(outline' width / 12)' RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (Path.GetExtension(itemWrapper.FileLocation).ToUpper() == ".GCODE")  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				Ellipse outline = new Ellipse(center' width / 2 - width / 12);  				graphics.Render(new Stroke(outline' width / 12)' RGBA_Bytes.White);  				graphics.DrawString("GCode"' center.x' center.y' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (!File.Exists(itemWrapper.FileLocation))  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				graphics.DrawString("Missing"' center.x' center.y' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (MeshIsTooBigToLoad(itemWrapper.FileLocation))  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				double yOffset = 8 * width / 50 * GuiWidget.DeviceScale * 2;  				graphics.DrawString("Reduce\nPolygons\nto\nRender"' center.x' center.y + yOffset' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,GetImageForItem,The following statement contains a magic number: if (itemWrapper.FileLocation == QueueData.SdCardFileName)  			{  				ImageBuffer sdCardImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_115x115"' partExtension)).InvertLightness();  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				graphics.Render(sdCardImage' width / 2 - sdCardImage.Width / 2' height / 2 - sdCardImage.Height / 2);  				Ellipse outline = new Ellipse(new Vector2(width / 2.0' height / 2.0)' width / 2 - width / 12);  				graphics.Render(new Stroke(outline' width / 12)' RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (Path.GetExtension(itemWrapper.FileLocation).ToUpper() == ".GCODE")  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				Ellipse outline = new Ellipse(center' width / 2 - width / 12);  				graphics.Render(new Stroke(outline' width / 12)' RGBA_Bytes.White);  				graphics.DrawString("GCode"' center.x' center.y' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (!File.Exists(itemWrapper.FileLocation))  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				graphics.DrawString("Missing"' center.x' center.y' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (MeshIsTooBigToLoad(itemWrapper.FileLocation))  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				double yOffset = 8 * width / 50 * GuiWidget.DeviceScale * 2;  				graphics.DrawString("Reduce\nPolygons\nto\nRender"' center.x' center.y + yOffset' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,GetImageForItem,The following statement contains a magic number: if (itemWrapper.FileLocation == QueueData.SdCardFileName)  			{  				ImageBuffer sdCardImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_115x115"' partExtension)).InvertLightness();  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				graphics.Render(sdCardImage' width / 2 - sdCardImage.Width / 2' height / 2 - sdCardImage.Height / 2);  				Ellipse outline = new Ellipse(new Vector2(width / 2.0' height / 2.0)' width / 2 - width / 12);  				graphics.Render(new Stroke(outline' width / 12)' RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (Path.GetExtension(itemWrapper.FileLocation).ToUpper() == ".GCODE")  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				Ellipse outline = new Ellipse(center' width / 2 - width / 12);  				graphics.Render(new Stroke(outline' width / 12)' RGBA_Bytes.White);  				graphics.DrawString("GCode"' center.x' center.y' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (!File.Exists(itemWrapper.FileLocation))  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				graphics.DrawString("Missing"' center.x' center.y' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (MeshIsTooBigToLoad(itemWrapper.FileLocation))  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				double yOffset = 8 * width / 50 * GuiWidget.DeviceScale * 2;  				graphics.DrawString("Reduce\nPolygons\nto\nRender"' center.x' center.y + yOffset' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,GetImageForItem,The following statement contains a magic number: if (itemWrapper.FileLocation == QueueData.SdCardFileName)  			{  				ImageBuffer sdCardImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_115x115"' partExtension)).InvertLightness();  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				graphics.Render(sdCardImage' width / 2 - sdCardImage.Width / 2' height / 2 - sdCardImage.Height / 2);  				Ellipse outline = new Ellipse(new Vector2(width / 2.0' height / 2.0)' width / 2 - width / 12);  				graphics.Render(new Stroke(outline' width / 12)' RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (Path.GetExtension(itemWrapper.FileLocation).ToUpper() == ".GCODE")  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				Ellipse outline = new Ellipse(center' width / 2 - width / 12);  				graphics.Render(new Stroke(outline' width / 12)' RGBA_Bytes.White);  				graphics.DrawString("GCode"' center.x' center.y' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (!File.Exists(itemWrapper.FileLocation))  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				graphics.DrawString("Missing"' center.x' center.y' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (MeshIsTooBigToLoad(itemWrapper.FileLocation))  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				double yOffset = 8 * width / 50 * GuiWidget.DeviceScale * 2;  				graphics.DrawString("Reduce\nPolygons\nto\nRender"' center.x' center.y + yOffset' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,GetImageForItem,The following statement contains a magic number: if (itemWrapper.FileLocation == QueueData.SdCardFileName)  			{  				ImageBuffer sdCardImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_115x115"' partExtension)).InvertLightness();  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				graphics.Render(sdCardImage' width / 2 - sdCardImage.Width / 2' height / 2 - sdCardImage.Height / 2);  				Ellipse outline = new Ellipse(new Vector2(width / 2.0' height / 2.0)' width / 2 - width / 12);  				graphics.Render(new Stroke(outline' width / 12)' RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (Path.GetExtension(itemWrapper.FileLocation).ToUpper() == ".GCODE")  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				Ellipse outline = new Ellipse(center' width / 2 - width / 12);  				graphics.Render(new Stroke(outline' width / 12)' RGBA_Bytes.White);  				graphics.DrawString("GCode"' center.x' center.y' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (!File.Exists(itemWrapper.FileLocation))  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				graphics.DrawString("Missing"' center.x' center.y' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (MeshIsTooBigToLoad(itemWrapper.FileLocation))  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				double yOffset = 8 * width / 50 * GuiWidget.DeviceScale * 2;  				graphics.DrawString("Reduce\nPolygons\nto\nRender"' center.x' center.y + yOffset' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,GetImageForItem,The following statement contains a magic number: if (itemWrapper.FileLocation == QueueData.SdCardFileName)  			{  				ImageBuffer sdCardImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_115x115"' partExtension)).InvertLightness();  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				graphics.Render(sdCardImage' width / 2 - sdCardImage.Width / 2' height / 2 - sdCardImage.Height / 2);  				Ellipse outline = new Ellipse(new Vector2(width / 2.0' height / 2.0)' width / 2 - width / 12);  				graphics.Render(new Stroke(outline' width / 12)' RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (Path.GetExtension(itemWrapper.FileLocation).ToUpper() == ".GCODE")  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				Ellipse outline = new Ellipse(center' width / 2 - width / 12);  				graphics.Render(new Stroke(outline' width / 12)' RGBA_Bytes.White);  				graphics.DrawString("GCode"' center.x' center.y' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (!File.Exists(itemWrapper.FileLocation))  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				graphics.DrawString("Missing"' center.x' center.y' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (MeshIsTooBigToLoad(itemWrapper.FileLocation))  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				double yOffset = 8 * width / 50 * GuiWidget.DeviceScale * 2;  				graphics.DrawString("Reduce\nPolygons\nto\nRender"' center.x' center.y + yOffset' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,GetImageForItem,The following statement contains a magic number: if (itemWrapper.FileLocation == QueueData.SdCardFileName)  			{  				ImageBuffer sdCardImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_115x115"' partExtension)).InvertLightness();  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				graphics.Render(sdCardImage' width / 2 - sdCardImage.Width / 2' height / 2 - sdCardImage.Height / 2);  				Ellipse outline = new Ellipse(new Vector2(width / 2.0' height / 2.0)' width / 2 - width / 12);  				graphics.Render(new Stroke(outline' width / 12)' RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (Path.GetExtension(itemWrapper.FileLocation).ToUpper() == ".GCODE")  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				Ellipse outline = new Ellipse(center' width / 2 - width / 12);  				graphics.Render(new Stroke(outline' width / 12)' RGBA_Bytes.White);  				graphics.DrawString("GCode"' center.x' center.y' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (!File.Exists(itemWrapper.FileLocation))  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				graphics.DrawString("Missing"' center.x' center.y' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}  			else if (MeshIsTooBigToLoad(itemWrapper.FileLocation))  			{  				thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(width / 2.0' height / 2.0);  				double yOffset = 8 * width / 50 * GuiWidget.DeviceScale * 2;  				graphics.DrawString("Reduce\nPolygons\nto\nRender"' center.x' center.y + yOffset' 8 * width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);  				return thumbnailImage;  			}
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,SetImageFast,The following statement contains a magic number: if (this.ItemWrapper.FileLocation == QueueData.SdCardFileName)  			{  				switch (this.Size)  				{  					case ImageSizes.Size115x115:  						{  							this.thumbnailImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_115x115"' partExtension)).InvertLightness();  						}  						break;    					case ImageSizes.Size50x50:  						{  							this.thumbnailImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_50x50"' partExtension)).InvertLightness();  						}  						break;    					default:  						throw new NotImplementedException();  				}  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Ellipse outline = new Ellipse(new Vector2(Width / 2.0' Height / 2.0)' Width / 2 - Width / 12);  				graphics.Render(new Stroke(outline' Width / 12)' RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}  			else if (Path.GetExtension(this.ItemWrapper.FileLocation).ToUpper() == ".GCODE")  			{  				this.thumbnailImage = new ImageBuffer((int)Width' (int)Height);  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(Width / 2.0' Height / 2.0);  				Ellipse outline = new Ellipse(center' Width / 2 - Width / 12);  				graphics.Render(new Stroke(outline' Width / 12)' RGBA_Bytes.White);  				graphics.DrawString("GCode"' center.x' center.y' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}  			else if (!File.Exists(this.ItemWrapper.FileLocation))  			{  				this.thumbnailImage = new ImageBuffer((int)Width' (int)Height);  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(Width / 2.0' Height / 2.0);  				graphics.DrawString("Missing"' center.x' center.y' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}  			else if (MeshIsTooBigToLoad(this.ItemWrapper.FileLocation))  			{  				this.thumbnailImage = new ImageBuffer((int)Width' (int)Height);  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(Width / 2.0' Height / 2.0);  				double yOffset = 8 * Width / 50 * GuiWidget.DeviceScale * 2;  				graphics.DrawString("Reduce\nPolygons\nto\nRender"' center.x' center.y + yOffset' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,SetImageFast,The following statement contains a magic number: if (this.ItemWrapper.FileLocation == QueueData.SdCardFileName)  			{  				switch (this.Size)  				{  					case ImageSizes.Size115x115:  						{  							this.thumbnailImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_115x115"' partExtension)).InvertLightness();  						}  						break;    					case ImageSizes.Size50x50:  						{  							this.thumbnailImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_50x50"' partExtension)).InvertLightness();  						}  						break;    					default:  						throw new NotImplementedException();  				}  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Ellipse outline = new Ellipse(new Vector2(Width / 2.0' Height / 2.0)' Width / 2 - Width / 12);  				graphics.Render(new Stroke(outline' Width / 12)' RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}  			else if (Path.GetExtension(this.ItemWrapper.FileLocation).ToUpper() == ".GCODE")  			{  				this.thumbnailImage = new ImageBuffer((int)Width' (int)Height);  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(Width / 2.0' Height / 2.0);  				Ellipse outline = new Ellipse(center' Width / 2 - Width / 12);  				graphics.Render(new Stroke(outline' Width / 12)' RGBA_Bytes.White);  				graphics.DrawString("GCode"' center.x' center.y' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}  			else if (!File.Exists(this.ItemWrapper.FileLocation))  			{  				this.thumbnailImage = new ImageBuffer((int)Width' (int)Height);  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(Width / 2.0' Height / 2.0);  				graphics.DrawString("Missing"' center.x' center.y' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}  			else if (MeshIsTooBigToLoad(this.ItemWrapper.FileLocation))  			{  				this.thumbnailImage = new ImageBuffer((int)Width' (int)Height);  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(Width / 2.0' Height / 2.0);  				double yOffset = 8 * Width / 50 * GuiWidget.DeviceScale * 2;  				graphics.DrawString("Reduce\nPolygons\nto\nRender"' center.x' center.y + yOffset' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,SetImageFast,The following statement contains a magic number: if (this.ItemWrapper.FileLocation == QueueData.SdCardFileName)  			{  				switch (this.Size)  				{  					case ImageSizes.Size115x115:  						{  							this.thumbnailImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_115x115"' partExtension)).InvertLightness();  						}  						break;    					case ImageSizes.Size50x50:  						{  							this.thumbnailImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_50x50"' partExtension)).InvertLightness();  						}  						break;    					default:  						throw new NotImplementedException();  				}  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Ellipse outline = new Ellipse(new Vector2(Width / 2.0' Height / 2.0)' Width / 2 - Width / 12);  				graphics.Render(new Stroke(outline' Width / 12)' RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}  			else if (Path.GetExtension(this.ItemWrapper.FileLocation).ToUpper() == ".GCODE")  			{  				this.thumbnailImage = new ImageBuffer((int)Width' (int)Height);  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(Width / 2.0' Height / 2.0);  				Ellipse outline = new Ellipse(center' Width / 2 - Width / 12);  				graphics.Render(new Stroke(outline' Width / 12)' RGBA_Bytes.White);  				graphics.DrawString("GCode"' center.x' center.y' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}  			else if (!File.Exists(this.ItemWrapper.FileLocation))  			{  				this.thumbnailImage = new ImageBuffer((int)Width' (int)Height);  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(Width / 2.0' Height / 2.0);  				graphics.DrawString("Missing"' center.x' center.y' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}  			else if (MeshIsTooBigToLoad(this.ItemWrapper.FileLocation))  			{  				this.thumbnailImage = new ImageBuffer((int)Width' (int)Height);  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(Width / 2.0' Height / 2.0);  				double yOffset = 8 * Width / 50 * GuiWidget.DeviceScale * 2;  				graphics.DrawString("Reduce\nPolygons\nto\nRender"' center.x' center.y + yOffset' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,SetImageFast,The following statement contains a magic number: if (this.ItemWrapper.FileLocation == QueueData.SdCardFileName)  			{  				switch (this.Size)  				{  					case ImageSizes.Size115x115:  						{  							this.thumbnailImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_115x115"' partExtension)).InvertLightness();  						}  						break;    					case ImageSizes.Size50x50:  						{  							this.thumbnailImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_50x50"' partExtension)).InvertLightness();  						}  						break;    					default:  						throw new NotImplementedException();  				}  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Ellipse outline = new Ellipse(new Vector2(Width / 2.0' Height / 2.0)' Width / 2 - Width / 12);  				graphics.Render(new Stroke(outline' Width / 12)' RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}  			else if (Path.GetExtension(this.ItemWrapper.FileLocation).ToUpper() == ".GCODE")  			{  				this.thumbnailImage = new ImageBuffer((int)Width' (int)Height);  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(Width / 2.0' Height / 2.0);  				Ellipse outline = new Ellipse(center' Width / 2 - Width / 12);  				graphics.Render(new Stroke(outline' Width / 12)' RGBA_Bytes.White);  				graphics.DrawString("GCode"' center.x' center.y' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}  			else if (!File.Exists(this.ItemWrapper.FileLocation))  			{  				this.thumbnailImage = new ImageBuffer((int)Width' (int)Height);  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(Width / 2.0' Height / 2.0);  				graphics.DrawString("Missing"' center.x' center.y' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}  			else if (MeshIsTooBigToLoad(this.ItemWrapper.FileLocation))  			{  				this.thumbnailImage = new ImageBuffer((int)Width' (int)Height);  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(Width / 2.0' Height / 2.0);  				double yOffset = 8 * Width / 50 * GuiWidget.DeviceScale * 2;  				graphics.DrawString("Reduce\nPolygons\nto\nRender"' center.x' center.y + yOffset' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,SetImageFast,The following statement contains a magic number: if (this.ItemWrapper.FileLocation == QueueData.SdCardFileName)  			{  				switch (this.Size)  				{  					case ImageSizes.Size115x115:  						{  							this.thumbnailImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_115x115"' partExtension)).InvertLightness();  						}  						break;    					case ImageSizes.Size50x50:  						{  							this.thumbnailImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_50x50"' partExtension)).InvertLightness();  						}  						break;    					default:  						throw new NotImplementedException();  				}  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Ellipse outline = new Ellipse(new Vector2(Width / 2.0' Height / 2.0)' Width / 2 - Width / 12);  				graphics.Render(new Stroke(outline' Width / 12)' RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}  			else if (Path.GetExtension(this.ItemWrapper.FileLocation).ToUpper() == ".GCODE")  			{  				this.thumbnailImage = new ImageBuffer((int)Width' (int)Height);  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(Width / 2.0' Height / 2.0);  				Ellipse outline = new Ellipse(center' Width / 2 - Width / 12);  				graphics.Render(new Stroke(outline' Width / 12)' RGBA_Bytes.White);  				graphics.DrawString("GCode"' center.x' center.y' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}  			else if (!File.Exists(this.ItemWrapper.FileLocation))  			{  				this.thumbnailImage = new ImageBuffer((int)Width' (int)Height);  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(Width / 2.0' Height / 2.0);  				graphics.DrawString("Missing"' center.x' center.y' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}  			else if (MeshIsTooBigToLoad(this.ItemWrapper.FileLocation))  			{  				this.thumbnailImage = new ImageBuffer((int)Width' (int)Height);  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(Width / 2.0' Height / 2.0);  				double yOffset = 8 * Width / 50 * GuiWidget.DeviceScale * 2;  				graphics.DrawString("Reduce\nPolygons\nto\nRender"' center.x' center.y + yOffset' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,SetImageFast,The following statement contains a magic number: if (this.ItemWrapper.FileLocation == QueueData.SdCardFileName)  			{  				switch (this.Size)  				{  					case ImageSizes.Size115x115:  						{  							this.thumbnailImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_115x115"' partExtension)).InvertLightness();  						}  						break;    					case ImageSizes.Size50x50:  						{  							this.thumbnailImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_50x50"' partExtension)).InvertLightness();  						}  						break;    					default:  						throw new NotImplementedException();  				}  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Ellipse outline = new Ellipse(new Vector2(Width / 2.0' Height / 2.0)' Width / 2 - Width / 12);  				graphics.Render(new Stroke(outline' Width / 12)' RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}  			else if (Path.GetExtension(this.ItemWrapper.FileLocation).ToUpper() == ".GCODE")  			{  				this.thumbnailImage = new ImageBuffer((int)Width' (int)Height);  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(Width / 2.0' Height / 2.0);  				Ellipse outline = new Ellipse(center' Width / 2 - Width / 12);  				graphics.Render(new Stroke(outline' Width / 12)' RGBA_Bytes.White);  				graphics.DrawString("GCode"' center.x' center.y' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}  			else if (!File.Exists(this.ItemWrapper.FileLocation))  			{  				this.thumbnailImage = new ImageBuffer((int)Width' (int)Height);  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(Width / 2.0' Height / 2.0);  				graphics.DrawString("Missing"' center.x' center.y' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}  			else if (MeshIsTooBigToLoad(this.ItemWrapper.FileLocation))  			{  				this.thumbnailImage = new ImageBuffer((int)Width' (int)Height);  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(Width / 2.0' Height / 2.0);  				double yOffset = 8 * Width / 50 * GuiWidget.DeviceScale * 2;  				graphics.DrawString("Reduce\nPolygons\nto\nRender"' center.x' center.y + yOffset' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,SetImageFast,The following statement contains a magic number: if (this.ItemWrapper.FileLocation == QueueData.SdCardFileName)  			{  				switch (this.Size)  				{  					case ImageSizes.Size115x115:  						{  							this.thumbnailImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_115x115"' partExtension)).InvertLightness();  						}  						break;    					case ImageSizes.Size50x50:  						{  							this.thumbnailImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_50x50"' partExtension)).InvertLightness();  						}  						break;    					default:  						throw new NotImplementedException();  				}  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Ellipse outline = new Ellipse(new Vector2(Width / 2.0' Height / 2.0)' Width / 2 - Width / 12);  				graphics.Render(new Stroke(outline' Width / 12)' RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}  			else if (Path.GetExtension(this.ItemWrapper.FileLocation).ToUpper() == ".GCODE")  			{  				this.thumbnailImage = new ImageBuffer((int)Width' (int)Height);  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(Width / 2.0' Height / 2.0);  				Ellipse outline = new Ellipse(center' Width / 2 - Width / 12);  				graphics.Render(new Stroke(outline' Width / 12)' RGBA_Bytes.White);  				graphics.DrawString("GCode"' center.x' center.y' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}  			else if (!File.Exists(this.ItemWrapper.FileLocation))  			{  				this.thumbnailImage = new ImageBuffer((int)Width' (int)Height);  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(Width / 2.0' Height / 2.0);  				graphics.DrawString("Missing"' center.x' center.y' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}  			else if (MeshIsTooBigToLoad(this.ItemWrapper.FileLocation))  			{  				this.thumbnailImage = new ImageBuffer((int)Width' (int)Height);  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(Width / 2.0' Height / 2.0);  				double yOffset = 8 * Width / 50 * GuiWidget.DeviceScale * 2;  				graphics.DrawString("Reduce\nPolygons\nto\nRender"' center.x' center.y + yOffset' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,SetImageFast,The following statement contains a magic number: if (this.ItemWrapper.FileLocation == QueueData.SdCardFileName)  			{  				switch (this.Size)  				{  					case ImageSizes.Size115x115:  						{  							this.thumbnailImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_115x115"' partExtension)).InvertLightness();  						}  						break;    					case ImageSizes.Size50x50:  						{  							this.thumbnailImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_50x50"' partExtension)).InvertLightness();  						}  						break;    					default:  						throw new NotImplementedException();  				}  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Ellipse outline = new Ellipse(new Vector2(Width / 2.0' Height / 2.0)' Width / 2 - Width / 12);  				graphics.Render(new Stroke(outline' Width / 12)' RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}  			else if (Path.GetExtension(this.ItemWrapper.FileLocation).ToUpper() == ".GCODE")  			{  				this.thumbnailImage = new ImageBuffer((int)Width' (int)Height);  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(Width / 2.0' Height / 2.0);  				Ellipse outline = new Ellipse(center' Width / 2 - Width / 12);  				graphics.Render(new Stroke(outline' Width / 12)' RGBA_Bytes.White);  				graphics.DrawString("GCode"' center.x' center.y' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}  			else if (!File.Exists(this.ItemWrapper.FileLocation))  			{  				this.thumbnailImage = new ImageBuffer((int)Width' (int)Height);  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(Width / 2.0' Height / 2.0);  				graphics.DrawString("Missing"' center.x' center.y' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}  			else if (MeshIsTooBigToLoad(this.ItemWrapper.FileLocation))  			{  				this.thumbnailImage = new ImageBuffer((int)Width' (int)Height);  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(Width / 2.0' Height / 2.0);  				double yOffset = 8 * Width / 50 * GuiWidget.DeviceScale * 2;  				graphics.DrawString("Reduce\nPolygons\nto\nRender"' center.x' center.y + yOffset' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,SetImageFast,The following statement contains a magic number: if (this.ItemWrapper.FileLocation == QueueData.SdCardFileName)  			{  				switch (this.Size)  				{  					case ImageSizes.Size115x115:  						{  							this.thumbnailImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_115x115"' partExtension)).InvertLightness();  						}  						break;    					case ImageSizes.Size50x50:  						{  							this.thumbnailImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_50x50"' partExtension)).InvertLightness();  						}  						break;    					default:  						throw new NotImplementedException();  				}  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Ellipse outline = new Ellipse(new Vector2(Width / 2.0' Height / 2.0)' Width / 2 - Width / 12);  				graphics.Render(new Stroke(outline' Width / 12)' RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}  			else if (Path.GetExtension(this.ItemWrapper.FileLocation).ToUpper() == ".GCODE")  			{  				this.thumbnailImage = new ImageBuffer((int)Width' (int)Height);  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(Width / 2.0' Height / 2.0);  				Ellipse outline = new Ellipse(center' Width / 2 - Width / 12);  				graphics.Render(new Stroke(outline' Width / 12)' RGBA_Bytes.White);  				graphics.DrawString("GCode"' center.x' center.y' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}  			else if (!File.Exists(this.ItemWrapper.FileLocation))  			{  				this.thumbnailImage = new ImageBuffer((int)Width' (int)Height);  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(Width / 2.0' Height / 2.0);  				graphics.DrawString("Missing"' center.x' center.y' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}  			else if (MeshIsTooBigToLoad(this.ItemWrapper.FileLocation))  			{  				this.thumbnailImage = new ImageBuffer((int)Width' (int)Height);  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(Width / 2.0' Height / 2.0);  				double yOffset = 8 * Width / 50 * GuiWidget.DeviceScale * 2;  				graphics.DrawString("Reduce\nPolygons\nto\nRender"' center.x' center.y + yOffset' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,SetImageFast,The following statement contains a magic number: if (this.ItemWrapper.FileLocation == QueueData.SdCardFileName)  			{  				switch (this.Size)  				{  					case ImageSizes.Size115x115:  						{  							this.thumbnailImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_115x115"' partExtension)).InvertLightness();  						}  						break;    					case ImageSizes.Size50x50:  						{  							this.thumbnailImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_50x50"' partExtension)).InvertLightness();  						}  						break;    					default:  						throw new NotImplementedException();  				}  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Ellipse outline = new Ellipse(new Vector2(Width / 2.0' Height / 2.0)' Width / 2 - Width / 12);  				graphics.Render(new Stroke(outline' Width / 12)' RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}  			else if (Path.GetExtension(this.ItemWrapper.FileLocation).ToUpper() == ".GCODE")  			{  				this.thumbnailImage = new ImageBuffer((int)Width' (int)Height);  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(Width / 2.0' Height / 2.0);  				Ellipse outline = new Ellipse(center' Width / 2 - Width / 12);  				graphics.Render(new Stroke(outline' Width / 12)' RGBA_Bytes.White);  				graphics.DrawString("GCode"' center.x' center.y' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}  			else if (!File.Exists(this.ItemWrapper.FileLocation))  			{  				this.thumbnailImage = new ImageBuffer((int)Width' (int)Height);  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(Width / 2.0' Height / 2.0);  				graphics.DrawString("Missing"' center.x' center.y' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}  			else if (MeshIsTooBigToLoad(this.ItemWrapper.FileLocation))  			{  				this.thumbnailImage = new ImageBuffer((int)Width' (int)Height);  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(Width / 2.0' Height / 2.0);  				double yOffset = 8 * Width / 50 * GuiWidget.DeviceScale * 2;  				graphics.DrawString("Reduce\nPolygons\nto\nRender"' center.x' center.y + yOffset' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,SetImageFast,The following statement contains a magic number: if (this.ItemWrapper.FileLocation == QueueData.SdCardFileName)  			{  				switch (this.Size)  				{  					case ImageSizes.Size115x115:  						{  							this.thumbnailImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_115x115"' partExtension)).InvertLightness();  						}  						break;    					case ImageSizes.Size50x50:  						{  							this.thumbnailImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_50x50"' partExtension)).InvertLightness();  						}  						break;    					default:  						throw new NotImplementedException();  				}  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Ellipse outline = new Ellipse(new Vector2(Width / 2.0' Height / 2.0)' Width / 2 - Width / 12);  				graphics.Render(new Stroke(outline' Width / 12)' RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}  			else if (Path.GetExtension(this.ItemWrapper.FileLocation).ToUpper() == ".GCODE")  			{  				this.thumbnailImage = new ImageBuffer((int)Width' (int)Height);  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(Width / 2.0' Height / 2.0);  				Ellipse outline = new Ellipse(center' Width / 2 - Width / 12);  				graphics.Render(new Stroke(outline' Width / 12)' RGBA_Bytes.White);  				graphics.DrawString("GCode"' center.x' center.y' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}  			else if (!File.Exists(this.ItemWrapper.FileLocation))  			{  				this.thumbnailImage = new ImageBuffer((int)Width' (int)Height);  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(Width / 2.0' Height / 2.0);  				graphics.DrawString("Missing"' center.x' center.y' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}  			else if (MeshIsTooBigToLoad(this.ItemWrapper.FileLocation))  			{  				this.thumbnailImage = new ImageBuffer((int)Width' (int)Height);  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(Width / 2.0' Height / 2.0);  				double yOffset = 8 * Width / 50 * GuiWidget.DeviceScale * 2;  				graphics.DrawString("Reduce\nPolygons\nto\nRender"' center.x' center.y + yOffset' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,SetImageFast,The following statement contains a magic number: if (this.ItemWrapper.FileLocation == QueueData.SdCardFileName)  			{  				switch (this.Size)  				{  					case ImageSizes.Size115x115:  						{  							this.thumbnailImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_115x115"' partExtension)).InvertLightness();  						}  						break;    					case ImageSizes.Size50x50:  						{  							this.thumbnailImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_50x50"' partExtension)).InvertLightness();  						}  						break;    					default:  						throw new NotImplementedException();  				}  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Ellipse outline = new Ellipse(new Vector2(Width / 2.0' Height / 2.0)' Width / 2 - Width / 12);  				graphics.Render(new Stroke(outline' Width / 12)' RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}  			else if (Path.GetExtension(this.ItemWrapper.FileLocation).ToUpper() == ".GCODE")  			{  				this.thumbnailImage = new ImageBuffer((int)Width' (int)Height);  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(Width / 2.0' Height / 2.0);  				Ellipse outline = new Ellipse(center' Width / 2 - Width / 12);  				graphics.Render(new Stroke(outline' Width / 12)' RGBA_Bytes.White);  				graphics.DrawString("GCode"' center.x' center.y' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}  			else if (!File.Exists(this.ItemWrapper.FileLocation))  			{  				this.thumbnailImage = new ImageBuffer((int)Width' (int)Height);  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(Width / 2.0' Height / 2.0);  				graphics.DrawString("Missing"' center.x' center.y' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}  			else if (MeshIsTooBigToLoad(this.ItemWrapper.FileLocation))  			{  				this.thumbnailImage = new ImageBuffer((int)Width' (int)Height);  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(Width / 2.0' Height / 2.0);  				double yOffset = 8 * Width / 50 * GuiWidget.DeviceScale * 2;  				graphics.DrawString("Reduce\nPolygons\nto\nRender"' center.x' center.y + yOffset' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,SetImageFast,The following statement contains a magic number: if (this.ItemWrapper.FileLocation == QueueData.SdCardFileName)  			{  				switch (this.Size)  				{  					case ImageSizes.Size115x115:  						{  							this.thumbnailImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_115x115"' partExtension)).InvertLightness();  						}  						break;    					case ImageSizes.Size50x50:  						{  							this.thumbnailImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_50x50"' partExtension)).InvertLightness();  						}  						break;    					default:  						throw new NotImplementedException();  				}  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Ellipse outline = new Ellipse(new Vector2(Width / 2.0' Height / 2.0)' Width / 2 - Width / 12);  				graphics.Render(new Stroke(outline' Width / 12)' RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}  			else if (Path.GetExtension(this.ItemWrapper.FileLocation).ToUpper() == ".GCODE")  			{  				this.thumbnailImage = new ImageBuffer((int)Width' (int)Height);  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(Width / 2.0' Height / 2.0);  				Ellipse outline = new Ellipse(center' Width / 2 - Width / 12);  				graphics.Render(new Stroke(outline' Width / 12)' RGBA_Bytes.White);  				graphics.DrawString("GCode"' center.x' center.y' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}  			else if (!File.Exists(this.ItemWrapper.FileLocation))  			{  				this.thumbnailImage = new ImageBuffer((int)Width' (int)Height);  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(Width / 2.0' Height / 2.0);  				graphics.DrawString("Missing"' center.x' center.y' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}  			else if (MeshIsTooBigToLoad(this.ItemWrapper.FileLocation))  			{  				this.thumbnailImage = new ImageBuffer((int)Width' (int)Height);  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(Width / 2.0' Height / 2.0);  				double yOffset = 8 * Width / 50 * GuiWidget.DeviceScale * 2;  				graphics.DrawString("Reduce\nPolygons\nto\nRender"' center.x' center.y + yOffset' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,SetImageFast,The following statement contains a magic number: if (this.ItemWrapper.FileLocation == QueueData.SdCardFileName)  			{  				switch (this.Size)  				{  					case ImageSizes.Size115x115:  						{  							this.thumbnailImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_115x115"' partExtension)).InvertLightness();  						}  						break;    					case ImageSizes.Size50x50:  						{  							this.thumbnailImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_50x50"' partExtension)).InvertLightness();  						}  						break;    					default:  						throw new NotImplementedException();  				}  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Ellipse outline = new Ellipse(new Vector2(Width / 2.0' Height / 2.0)' Width / 2 - Width / 12);  				graphics.Render(new Stroke(outline' Width / 12)' RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}  			else if (Path.GetExtension(this.ItemWrapper.FileLocation).ToUpper() == ".GCODE")  			{  				this.thumbnailImage = new ImageBuffer((int)Width' (int)Height);  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(Width / 2.0' Height / 2.0);  				Ellipse outline = new Ellipse(center' Width / 2 - Width / 12);  				graphics.Render(new Stroke(outline' Width / 12)' RGBA_Bytes.White);  				graphics.DrawString("GCode"' center.x' center.y' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}  			else if (!File.Exists(this.ItemWrapper.FileLocation))  			{  				this.thumbnailImage = new ImageBuffer((int)Width' (int)Height);  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(Width / 2.0' Height / 2.0);  				graphics.DrawString("Missing"' center.x' center.y' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}  			else if (MeshIsTooBigToLoad(this.ItemWrapper.FileLocation))  			{  				this.thumbnailImage = new ImageBuffer((int)Width' (int)Height);  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(Width / 2.0' Height / 2.0);  				double yOffset = 8 * Width / 50 * GuiWidget.DeviceScale * 2;  				graphics.DrawString("Reduce\nPolygons\nto\nRender"' center.x' center.y + yOffset' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,SetImageFast,The following statement contains a magic number: if (this.ItemWrapper.FileLocation == QueueData.SdCardFileName)  			{  				switch (this.Size)  				{  					case ImageSizes.Size115x115:  						{  							this.thumbnailImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_115x115"' partExtension)).InvertLightness();  						}  						break;    					case ImageSizes.Size50x50:  						{  							this.thumbnailImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_50x50"' partExtension)).InvertLightness();  						}  						break;    					default:  						throw new NotImplementedException();  				}  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Ellipse outline = new Ellipse(new Vector2(Width / 2.0' Height / 2.0)' Width / 2 - Width / 12);  				graphics.Render(new Stroke(outline' Width / 12)' RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}  			else if (Path.GetExtension(this.ItemWrapper.FileLocation).ToUpper() == ".GCODE")  			{  				this.thumbnailImage = new ImageBuffer((int)Width' (int)Height);  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(Width / 2.0' Height / 2.0);  				Ellipse outline = new Ellipse(center' Width / 2 - Width / 12);  				graphics.Render(new Stroke(outline' Width / 12)' RGBA_Bytes.White);  				graphics.DrawString("GCode"' center.x' center.y' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}  			else if (!File.Exists(this.ItemWrapper.FileLocation))  			{  				this.thumbnailImage = new ImageBuffer((int)Width' (int)Height);  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(Width / 2.0' Height / 2.0);  				graphics.DrawString("Missing"' center.x' center.y' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}  			else if (MeshIsTooBigToLoad(this.ItemWrapper.FileLocation))  			{  				this.thumbnailImage = new ImageBuffer((int)Width' (int)Height);  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(Width / 2.0' Height / 2.0);  				double yOffset = 8 * Width / 50 * GuiWidget.DeviceScale * 2;  				graphics.DrawString("Reduce\nPolygons\nto\nRender"' center.x' center.y + yOffset' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,SetImageFast,The following statement contains a magic number: if (this.ItemWrapper.FileLocation == QueueData.SdCardFileName)  			{  				switch (this.Size)  				{  					case ImageSizes.Size115x115:  						{  							this.thumbnailImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_115x115"' partExtension)).InvertLightness();  						}  						break;    					case ImageSizes.Size50x50:  						{  							this.thumbnailImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_50x50"' partExtension)).InvertLightness();  						}  						break;    					default:  						throw new NotImplementedException();  				}  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Ellipse outline = new Ellipse(new Vector2(Width / 2.0' Height / 2.0)' Width / 2 - Width / 12);  				graphics.Render(new Stroke(outline' Width / 12)' RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}  			else if (Path.GetExtension(this.ItemWrapper.FileLocation).ToUpper() == ".GCODE")  			{  				this.thumbnailImage = new ImageBuffer((int)Width' (int)Height);  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(Width / 2.0' Height / 2.0);  				Ellipse outline = new Ellipse(center' Width / 2 - Width / 12);  				graphics.Render(new Stroke(outline' Width / 12)' RGBA_Bytes.White);  				graphics.DrawString("GCode"' center.x' center.y' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}  			else if (!File.Exists(this.ItemWrapper.FileLocation))  			{  				this.thumbnailImage = new ImageBuffer((int)Width' (int)Height);  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(Width / 2.0' Height / 2.0);  				graphics.DrawString("Missing"' center.x' center.y' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}  			else if (MeshIsTooBigToLoad(this.ItemWrapper.FileLocation))  			{  				this.thumbnailImage = new ImageBuffer((int)Width' (int)Height);  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(Width / 2.0' Height / 2.0);  				double yOffset = 8 * Width / 50 * GuiWidget.DeviceScale * 2;  				graphics.DrawString("Reduce\nPolygons\nto\nRender"' center.x' center.y + yOffset' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,SetImageFast,The following statement contains a magic number: if (this.ItemWrapper.FileLocation == QueueData.SdCardFileName)  			{  				switch (this.Size)  				{  					case ImageSizes.Size115x115:  						{  							this.thumbnailImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_115x115"' partExtension)).InvertLightness();  						}  						break;    					case ImageSizes.Size50x50:  						{  							this.thumbnailImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_50x50"' partExtension)).InvertLightness();  						}  						break;    					default:  						throw new NotImplementedException();  				}  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Ellipse outline = new Ellipse(new Vector2(Width / 2.0' Height / 2.0)' Width / 2 - Width / 12);  				graphics.Render(new Stroke(outline' Width / 12)' RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}  			else if (Path.GetExtension(this.ItemWrapper.FileLocation).ToUpper() == ".GCODE")  			{  				this.thumbnailImage = new ImageBuffer((int)Width' (int)Height);  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(Width / 2.0' Height / 2.0);  				Ellipse outline = new Ellipse(center' Width / 2 - Width / 12);  				graphics.Render(new Stroke(outline' Width / 12)' RGBA_Bytes.White);  				graphics.DrawString("GCode"' center.x' center.y' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}  			else if (!File.Exists(this.ItemWrapper.FileLocation))  			{  				this.thumbnailImage = new ImageBuffer((int)Width' (int)Height);  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(Width / 2.0' Height / 2.0);  				graphics.DrawString("Missing"' center.x' center.y' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}  			else if (MeshIsTooBigToLoad(this.ItemWrapper.FileLocation))  			{  				this.thumbnailImage = new ImageBuffer((int)Width' (int)Height);  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(Width / 2.0' Height / 2.0);  				double yOffset = 8 * Width / 50 * GuiWidget.DeviceScale * 2;  				graphics.DrawString("Reduce\nPolygons\nto\nRender"' center.x' center.y + yOffset' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,SetImageFast,The following statement contains a magic number: if (this.ItemWrapper.FileLocation == QueueData.SdCardFileName)  			{  				switch (this.Size)  				{  					case ImageSizes.Size115x115:  						{  							this.thumbnailImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_115x115"' partExtension)).InvertLightness();  						}  						break;    					case ImageSizes.Size50x50:  						{  							this.thumbnailImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_50x50"' partExtension)).InvertLightness();  						}  						break;    					default:  						throw new NotImplementedException();  				}  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Ellipse outline = new Ellipse(new Vector2(Width / 2.0' Height / 2.0)' Width / 2 - Width / 12);  				graphics.Render(new Stroke(outline' Width / 12)' RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}  			else if (Path.GetExtension(this.ItemWrapper.FileLocation).ToUpper() == ".GCODE")  			{  				this.thumbnailImage = new ImageBuffer((int)Width' (int)Height);  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(Width / 2.0' Height / 2.0);  				Ellipse outline = new Ellipse(center' Width / 2 - Width / 12);  				graphics.Render(new Stroke(outline' Width / 12)' RGBA_Bytes.White);  				graphics.DrawString("GCode"' center.x' center.y' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}  			else if (!File.Exists(this.ItemWrapper.FileLocation))  			{  				this.thumbnailImage = new ImageBuffer((int)Width' (int)Height);  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(Width / 2.0' Height / 2.0);  				graphics.DrawString("Missing"' center.x' center.y' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}  			else if (MeshIsTooBigToLoad(this.ItemWrapper.FileLocation))  			{  				this.thumbnailImage = new ImageBuffer((int)Width' (int)Height);  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(Width / 2.0' Height / 2.0);  				double yOffset = 8 * Width / 50 * GuiWidget.DeviceScale * 2;  				graphics.DrawString("Reduce\nPolygons\nto\nRender"' center.x' center.y + yOffset' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,SetImageFast,The following statement contains a magic number: if (this.ItemWrapper.FileLocation == QueueData.SdCardFileName)  			{  				switch (this.Size)  				{  					case ImageSizes.Size115x115:  						{  							this.thumbnailImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_115x115"' partExtension)).InvertLightness();  						}  						break;    					case ImageSizes.Size50x50:  						{  							this.thumbnailImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_50x50"' partExtension)).InvertLightness();  						}  						break;    					default:  						throw new NotImplementedException();  				}  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Ellipse outline = new Ellipse(new Vector2(Width / 2.0' Height / 2.0)' Width / 2 - Width / 12);  				graphics.Render(new Stroke(outline' Width / 12)' RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}  			else if (Path.GetExtension(this.ItemWrapper.FileLocation).ToUpper() == ".GCODE")  			{  				this.thumbnailImage = new ImageBuffer((int)Width' (int)Height);  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(Width / 2.0' Height / 2.0);  				Ellipse outline = new Ellipse(center' Width / 2 - Width / 12);  				graphics.Render(new Stroke(outline' Width / 12)' RGBA_Bytes.White);  				graphics.DrawString("GCode"' center.x' center.y' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}  			else if (!File.Exists(this.ItemWrapper.FileLocation))  			{  				this.thumbnailImage = new ImageBuffer((int)Width' (int)Height);  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(Width / 2.0' Height / 2.0);  				graphics.DrawString("Missing"' center.x' center.y' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}  			else if (MeshIsTooBigToLoad(this.ItemWrapper.FileLocation))  			{  				this.thumbnailImage = new ImageBuffer((int)Width' (int)Height);  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(Width / 2.0' Height / 2.0);  				double yOffset = 8 * Width / 50 * GuiWidget.DeviceScale * 2;  				graphics.DrawString("Reduce\nPolygons\nto\nRender"' center.x' center.y + yOffset' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,SetImageFast,The following statement contains a magic number: if (this.ItemWrapper.FileLocation == QueueData.SdCardFileName)  			{  				switch (this.Size)  				{  					case ImageSizes.Size115x115:  						{  							this.thumbnailImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_115x115"' partExtension)).InvertLightness();  						}  						break;    					case ImageSizes.Size50x50:  						{  							this.thumbnailImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_50x50"' partExtension)).InvertLightness();  						}  						break;    					default:  						throw new NotImplementedException();  				}  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Ellipse outline = new Ellipse(new Vector2(Width / 2.0' Height / 2.0)' Width / 2 - Width / 12);  				graphics.Render(new Stroke(outline' Width / 12)' RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}  			else if (Path.GetExtension(this.ItemWrapper.FileLocation).ToUpper() == ".GCODE")  			{  				this.thumbnailImage = new ImageBuffer((int)Width' (int)Height);  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(Width / 2.0' Height / 2.0);  				Ellipse outline = new Ellipse(center' Width / 2 - Width / 12);  				graphics.Render(new Stroke(outline' Width / 12)' RGBA_Bytes.White);  				graphics.DrawString("GCode"' center.x' center.y' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}  			else if (!File.Exists(this.ItemWrapper.FileLocation))  			{  				this.thumbnailImage = new ImageBuffer((int)Width' (int)Height);  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(Width / 2.0' Height / 2.0);  				graphics.DrawString("Missing"' center.x' center.y' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}  			else if (MeshIsTooBigToLoad(this.ItemWrapper.FileLocation))  			{  				this.thumbnailImage = new ImageBuffer((int)Width' (int)Height);  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(Width / 2.0' Height / 2.0);  				double yOffset = 8 * Width / 50 * GuiWidget.DeviceScale * 2;  				graphics.DrawString("Reduce\nPolygons\nto\nRender"' center.x' center.y + yOffset' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,SetImageFast,The following statement contains a magic number: if (this.ItemWrapper.FileLocation == QueueData.SdCardFileName)  			{  				switch (this.Size)  				{  					case ImageSizes.Size115x115:  						{  							this.thumbnailImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_115x115"' partExtension)).InvertLightness();  						}  						break;    					case ImageSizes.Size50x50:  						{  							this.thumbnailImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_50x50"' partExtension)).InvertLightness();  						}  						break;    					default:  						throw new NotImplementedException();  				}  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Ellipse outline = new Ellipse(new Vector2(Width / 2.0' Height / 2.0)' Width / 2 - Width / 12);  				graphics.Render(new Stroke(outline' Width / 12)' RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}  			else if (Path.GetExtension(this.ItemWrapper.FileLocation).ToUpper() == ".GCODE")  			{  				this.thumbnailImage = new ImageBuffer((int)Width' (int)Height);  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(Width / 2.0' Height / 2.0);  				Ellipse outline = new Ellipse(center' Width / 2 - Width / 12);  				graphics.Render(new Stroke(outline' Width / 12)' RGBA_Bytes.White);  				graphics.DrawString("GCode"' center.x' center.y' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}  			else if (!File.Exists(this.ItemWrapper.FileLocation))  			{  				this.thumbnailImage = new ImageBuffer((int)Width' (int)Height);  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(Width / 2.0' Height / 2.0);  				graphics.DrawString("Missing"' center.x' center.y' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}  			else if (MeshIsTooBigToLoad(this.ItemWrapper.FileLocation))  			{  				this.thumbnailImage = new ImageBuffer((int)Width' (int)Height);  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(Width / 2.0' Height / 2.0);  				double yOffset = 8 * Width / 50 * GuiWidget.DeviceScale * 2;  				graphics.DrawString("Reduce\nPolygons\nto\nRender"' center.x' center.y + yOffset' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,SetImageFast,The following statement contains a magic number: if (this.ItemWrapper.FileLocation == QueueData.SdCardFileName)  			{  				switch (this.Size)  				{  					case ImageSizes.Size115x115:  						{  							this.thumbnailImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_115x115"' partExtension)).InvertLightness();  						}  						break;    					case ImageSizes.Size50x50:  						{  							this.thumbnailImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_50x50"' partExtension)).InvertLightness();  						}  						break;    					default:  						throw new NotImplementedException();  				}  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Ellipse outline = new Ellipse(new Vector2(Width / 2.0' Height / 2.0)' Width / 2 - Width / 12);  				graphics.Render(new Stroke(outline' Width / 12)' RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}  			else if (Path.GetExtension(this.ItemWrapper.FileLocation).ToUpper() == ".GCODE")  			{  				this.thumbnailImage = new ImageBuffer((int)Width' (int)Height);  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(Width / 2.0' Height / 2.0);  				Ellipse outline = new Ellipse(center' Width / 2 - Width / 12);  				graphics.Render(new Stroke(outline' Width / 12)' RGBA_Bytes.White);  				graphics.DrawString("GCode"' center.x' center.y' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}  			else if (!File.Exists(this.ItemWrapper.FileLocation))  			{  				this.thumbnailImage = new ImageBuffer((int)Width' (int)Height);  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(Width / 2.0' Height / 2.0);  				graphics.DrawString("Missing"' center.x' center.y' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}  			else if (MeshIsTooBigToLoad(this.ItemWrapper.FileLocation))  			{  				this.thumbnailImage = new ImageBuffer((int)Width' (int)Height);  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(Width / 2.0' Height / 2.0);  				double yOffset = 8 * Width / 50 * GuiWidget.DeviceScale * 2;  				graphics.DrawString("Reduce\nPolygons\nto\nRender"' center.x' center.y + yOffset' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}
Magic Number,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,SetImageFast,The following statement contains a magic number: if (this.ItemWrapper.FileLocation == QueueData.SdCardFileName)  			{  				switch (this.Size)  				{  					case ImageSizes.Size115x115:  						{  							this.thumbnailImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_115x115"' partExtension)).InvertLightness();  						}  						break;    					case ImageSizes.Size50x50:  						{  							this.thumbnailImage = StaticData.Instance.LoadIcon(Path.ChangeExtension("icon_sd_card_50x50"' partExtension)).InvertLightness();  						}  						break;    					default:  						throw new NotImplementedException();  				}  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Ellipse outline = new Ellipse(new Vector2(Width / 2.0' Height / 2.0)' Width / 2 - Width / 12);  				graphics.Render(new Stroke(outline' Width / 12)' RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}  			else if (Path.GetExtension(this.ItemWrapper.FileLocation).ToUpper() == ".GCODE")  			{  				this.thumbnailImage = new ImageBuffer((int)Width' (int)Height);  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(Width / 2.0' Height / 2.0);  				Ellipse outline = new Ellipse(center' Width / 2 - Width / 12);  				graphics.Render(new Stroke(outline' Width / 12)' RGBA_Bytes.White);  				graphics.DrawString("GCode"' center.x' center.y' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}  			else if (!File.Exists(this.ItemWrapper.FileLocation))  			{  				this.thumbnailImage = new ImageBuffer((int)Width' (int)Height);  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(Width / 2.0' Height / 2.0);  				graphics.DrawString("Missing"' center.x' center.y' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}  			else if (MeshIsTooBigToLoad(this.ItemWrapper.FileLocation))  			{  				this.thumbnailImage = new ImageBuffer((int)Width' (int)Height);  				this.thumbnailImage.SetRecieveBlender(new BlenderPreMultBGRA());  				Graphics2D graphics = this.thumbnailImage.NewGraphics2D();  				Vector2 center = new Vector2(Width / 2.0' Height / 2.0);  				double yOffset = 8 * Width / 50 * GuiWidget.DeviceScale * 2;  				graphics.DrawString("Reduce\nPolygons\nto\nRender"' center.x' center.y + yOffset' 8 * Width / 50' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: RGBA_Bytes.White);    				UiThread.RunOnIdle(this.EnsureImageUpdated);  				return true;  			}
Magic Number,MatterHackers.MatterControl,AllWhite,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,DoAllWhite,The following statement contains a magic number: switch (imageA.BitDepth)  			{  				case 32:  					{  						int height = imageA.Height;  						int width = imageA.Width;  						byte[] resultBuffer = result.GetBuffer();  						byte[] imageABuffer = imageA.GetBuffer();  						for (int y = 0; y < height; y++)  						{  							int offsetA = imageA.GetBufferOffsetY(y);  							int offsetResult = result.GetBufferOffsetY(y);    							for (int x = 0; x < width; x++)  							{  								int alpha = imageABuffer[offsetA+3];  								if (alpha > 0)  								{  									resultBuffer[offsetResult++] = (byte)255; offsetA++;  									resultBuffer[offsetResult++] = (byte)255; offsetA++;  									resultBuffer[offsetResult++] = (byte)255; offsetA++;  									resultBuffer[offsetResult++] = (byte)alpha; offsetA++;  								}  								else  								{  									resultBuffer[offsetResult++] = (byte)0; offsetA++;  									resultBuffer[offsetResult++] = (byte)0; offsetA++;  									resultBuffer[offsetResult++] = (byte)0; offsetA++;  									resultBuffer[offsetResult++] = (byte)0; offsetA++;  								}  							}  						}  						result.SetRecieveBlender(new BlenderPreMultBGRA());  					}  					break;    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterHackers.MatterControl,AllWhite,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,DoAllWhite,The following statement contains a magic number: switch (imageA.BitDepth)  			{  				case 32:  					{  						int height = imageA.Height;  						int width = imageA.Width;  						byte[] resultBuffer = result.GetBuffer();  						byte[] imageABuffer = imageA.GetBuffer();  						for (int y = 0; y < height; y++)  						{  							int offsetA = imageA.GetBufferOffsetY(y);  							int offsetResult = result.GetBufferOffsetY(y);    							for (int x = 0; x < width; x++)  							{  								int alpha = imageABuffer[offsetA+3];  								if (alpha > 0)  								{  									resultBuffer[offsetResult++] = (byte)255; offsetA++;  									resultBuffer[offsetResult++] = (byte)255; offsetA++;  									resultBuffer[offsetResult++] = (byte)255; offsetA++;  									resultBuffer[offsetResult++] = (byte)alpha; offsetA++;  								}  								else  								{  									resultBuffer[offsetResult++] = (byte)0; offsetA++;  									resultBuffer[offsetResult++] = (byte)0; offsetA++;  									resultBuffer[offsetResult++] = (byte)0; offsetA++;  									resultBuffer[offsetResult++] = (byte)0; offsetA++;  								}  							}  						}  						result.SetRecieveBlender(new BlenderPreMultBGRA());  					}  					break;    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterHackers.MatterControl,AllWhite,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,DoAllWhite,The following statement contains a magic number: switch (imageA.BitDepth)  			{  				case 32:  					{  						int height = imageA.Height;  						int width = imageA.Width;  						byte[] resultBuffer = result.GetBuffer();  						byte[] imageABuffer = imageA.GetBuffer();  						for (int y = 0; y < height; y++)  						{  							int offsetA = imageA.GetBufferOffsetY(y);  							int offsetResult = result.GetBufferOffsetY(y);    							for (int x = 0; x < width; x++)  							{  								int alpha = imageABuffer[offsetA+3];  								if (alpha > 0)  								{  									resultBuffer[offsetResult++] = (byte)255; offsetA++;  									resultBuffer[offsetResult++] = (byte)255; offsetA++;  									resultBuffer[offsetResult++] = (byte)255; offsetA++;  									resultBuffer[offsetResult++] = (byte)alpha; offsetA++;  								}  								else  								{  									resultBuffer[offsetResult++] = (byte)0; offsetA++;  									resultBuffer[offsetResult++] = (byte)0; offsetA++;  									resultBuffer[offsetResult++] = (byte)0; offsetA++;  									resultBuffer[offsetResult++] = (byte)0; offsetA++;  								}  							}  						}  						result.SetRecieveBlender(new BlenderPreMultBGRA());  					}  					break;    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterHackers.MatterControl,AllWhite,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,DoAllWhite,The following statement contains a magic number: switch (imageA.BitDepth)  			{  				case 32:  					{  						int height = imageA.Height;  						int width = imageA.Width;  						byte[] resultBuffer = result.GetBuffer();  						byte[] imageABuffer = imageA.GetBuffer();  						for (int y = 0; y < height; y++)  						{  							int offsetA = imageA.GetBufferOffsetY(y);  							int offsetResult = result.GetBufferOffsetY(y);    							for (int x = 0; x < width; x++)  							{  								int alpha = imageABuffer[offsetA+3];  								if (alpha > 0)  								{  									resultBuffer[offsetResult++] = (byte)255; offsetA++;  									resultBuffer[offsetResult++] = (byte)255; offsetA++;  									resultBuffer[offsetResult++] = (byte)255; offsetA++;  									resultBuffer[offsetResult++] = (byte)alpha; offsetA++;  								}  								else  								{  									resultBuffer[offsetResult++] = (byte)0; offsetA++;  									resultBuffer[offsetResult++] = (byte)0; offsetA++;  									resultBuffer[offsetResult++] = (byte)0; offsetA++;  									resultBuffer[offsetResult++] = (byte)0; offsetA++;  								}  							}  						}  						result.SetRecieveBlender(new BlenderPreMultBGRA());  					}  					break;    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterHackers.MatterControl,AllWhite,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,DoAllWhite,The following statement contains a magic number: switch (imageA.BitDepth)  			{  				case 32:  					{  						int height = imageA.Height;  						int width = imageA.Width;  						byte[] resultBuffer = result.GetBuffer();  						byte[] imageABuffer = imageA.GetBuffer();  						for (int y = 0; y < height; y++)  						{  							int offsetA = imageA.GetBufferOffsetY(y);  							int offsetResult = result.GetBufferOffsetY(y);    							for (int x = 0; x < width; x++)  							{  								int alpha = imageABuffer[offsetA+3];  								if (alpha > 0)  								{  									resultBuffer[offsetResult++] = (byte)255; offsetA++;  									resultBuffer[offsetResult++] = (byte)255; offsetA++;  									resultBuffer[offsetResult++] = (byte)255; offsetA++;  									resultBuffer[offsetResult++] = (byte)alpha; offsetA++;  								}  								else  								{  									resultBuffer[offsetResult++] = (byte)0; offsetA++;  									resultBuffer[offsetResult++] = (byte)0; offsetA++;  									resultBuffer[offsetResult++] = (byte)0; offsetA++;  									resultBuffer[offsetResult++] = (byte)0; offsetA++;  								}  							}  						}  						result.SetRecieveBlender(new BlenderPreMultBGRA());  					}  					break;    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterHackers.MatterControl,MatterControlApplication,C:\repos\MatterHackers_MatterControl\MatterControlApplication.cs,MatterControlApplication,The following statement contains a magic number: if (UserSettings.Instance.IsTouchScreen)  			{  				GuiWidget.DeviceScale = 1.3;  				SystemWindow.ShareSingleOsWindow = true;  			}
Magic Number,MatterHackers.MatterControl,MatterControlApplication,C:\repos\MatterHackers_MatterControl\MatterControlApplication.cs,MatterControlApplication,The following statement contains a magic number: if (!string.IsNullOrEmpty(desktopPosition))  			{  				string[] sizes = desktopPosition.Split(''');    				//If the desktop position is less than -10'-10' override  				int xpos = Math.Max(int.Parse(sizes[0])' -10);  				int ypos = Math.Max(int.Parse(sizes[1])' -10);    				DesktopPosition = new Point2D(xpos' ypos);  			}  			else  			{  				DesktopPosition = new Point2D(-1' -1);  			}
Magic Number,MatterHackers.MatterControl,MatterControlApplication,C:\repos\MatterHackers_MatterControl\MatterControlApplication.cs,MatterControlApplication,The following statement contains a magic number: if (!string.IsNullOrEmpty(desktopPosition))  			{  				string[] sizes = desktopPosition.Split(''');    				//If the desktop position is less than -10'-10' override  				int xpos = Math.Max(int.Parse(sizes[0])' -10);  				int ypos = Math.Max(int.Parse(sizes[1])' -10);    				DesktopPosition = new Point2D(xpos' ypos);  			}  			else  			{  				DesktopPosition = new Point2D(-1' -1);  			}
Magic Number,MatterHackers.MatterControl,MatterControlApplication,C:\repos\MatterHackers_MatterControl\MatterControlApplication.cs,TakePhoto,The following statement contains a magic number: ImageBuffer noCameraImage = new ImageBuffer(640' 480);
Magic Number,MatterHackers.MatterControl,MatterControlApplication,C:\repos\MatterHackers_MatterControl\MatterControlApplication.cs,TakePhoto,The following statement contains a magic number: ImageBuffer noCameraImage = new ImageBuffer(640' 480);
Magic Number,MatterHackers.MatterControl,MatterControlApplication,C:\repos\MatterHackers_MatterControl\MatterControlApplication.cs,TakePhoto,The following statement contains a magic number: graphics.DrawString("No Camera Detected"' 320' 240' pointSize: 24' justification: Agg.Font.Justification.Center);
Magic Number,MatterHackers.MatterControl,MatterControlApplication,C:\repos\MatterHackers_MatterControl\MatterControlApplication.cs,TakePhoto,The following statement contains a magic number: graphics.DrawString("No Camera Detected"' 320' 240' pointSize: 24' justification: Agg.Font.Justification.Center);
Magic Number,MatterHackers.MatterControl,MatterControlApplication,C:\repos\MatterHackers_MatterControl\MatterControlApplication.cs,TakePhoto,The following statement contains a magic number: graphics.DrawString("No Camera Detected"' 320' 240' pointSize: 24' justification: Agg.Font.Justification.Center);
Magic Number,MatterHackers.MatterControl,MatterControlApplication,C:\repos\MatterHackers_MatterControl\MatterControlApplication.cs,TakePhoto,The following statement contains a magic number: graphics.DrawString(DateTime.Now.ToString()' 320' 200' pointSize: 12' justification: Agg.Font.Justification.Center);
Magic Number,MatterHackers.MatterControl,MatterControlApplication,C:\repos\MatterHackers_MatterControl\MatterControlApplication.cs,TakePhoto,The following statement contains a magic number: graphics.DrawString(DateTime.Now.ToString()' 320' 200' pointSize: 12' justification: Agg.Font.Justification.Center);
Magic Number,MatterHackers.MatterControl,MatterControlApplication,C:\repos\MatterHackers_MatterControl\MatterControlApplication.cs,TakePhoto,The following statement contains a magic number: graphics.DrawString(DateTime.Now.ToString()' 320' 200' pointSize: 12' justification: Agg.Font.Justification.Center);
Magic Number,MatterHackers.MatterControl,MatterControlApplication,C:\repos\MatterHackers_MatterControl\MatterControlApplication.cs,CreateInstance,The following statement contains a magic number: if (UserSettings.Instance.IsTouchScreen)  			{  				minSize = new Vector2(800' 480);  			}
Magic Number,MatterHackers.MatterControl,MatterControlApplication,C:\repos\MatterHackers_MatterControl\MatterControlApplication.cs,CreateInstance,The following statement contains a magic number: if (UserSettings.Instance.IsTouchScreen)  			{  				minSize = new Vector2(800' 480);  			}
Magic Number,MatterHackers.MatterControl,MatterControlApplication,C:\repos\MatterHackers_MatterControl\MatterControlApplication.cs,CreateInstance,The following statement contains a magic number: if (windowSize != null && windowSize != "")  			{  				// try and open our window matching the last size that we had for it.  				string[] sizes = windowSize.Split(''');    				width = Math.Max(int.Parse(sizes[0])' (int)minSize.x + 1);  				height = Math.Max(int.Parse(sizes[1])' (int)minSize.y + 1);  			}  			else // try to set it to a big size or the min size  			{  				Point2D desktopSize = OsInformation.DesktopSize;    				if (overrideWidth != -1)  				{  					width = overrideWidth;  				}  				else // try to set it to a good size  				{  					if (width < desktopSize.x)  					{  						width = 1280;  					}  				}    				if (overrideHeight != -1)  				{  					height = overrideHeight;  				}  				else  				{  					if (height < desktopSize.y)  					{  						height = 720;  					}  				}  			}
Magic Number,MatterHackers.MatterControl,MatterControlApplication,C:\repos\MatterHackers_MatterControl\MatterControlApplication.cs,CreateInstance,The following statement contains a magic number: if (windowSize != null && windowSize != "")  			{  				// try and open our window matching the last size that we had for it.  				string[] sizes = windowSize.Split(''');    				width = Math.Max(int.Parse(sizes[0])' (int)minSize.x + 1);  				height = Math.Max(int.Parse(sizes[1])' (int)minSize.y + 1);  			}  			else // try to set it to a big size or the min size  			{  				Point2D desktopSize = OsInformation.DesktopSize;    				if (overrideWidth != -1)  				{  					width = overrideWidth;  				}  				else // try to set it to a good size  				{  					if (width < desktopSize.x)  					{  						width = 1280;  					}  				}    				if (overrideHeight != -1)  				{  					height = overrideHeight;  				}  				else  				{  					if (height < desktopSize.y)  					{  						height = 720;  					}  				}  			}
Magic Number,MatterHackers.MatterControl,MatterControlApplication,C:\repos\MatterHackers_MatterControl\MatterControlApplication.cs,WriteTestGCodeFile,The following statement contains a magic number: using (StreamWriter file = new StreamWriter("PerformanceTest.gcode"))  			{  				//int loops = 150000;  				int loops = 150;  				int steps = 200;  				double radius = 50;  				Vector2 center = new Vector2(150' 100);    				file.WriteLine("G28 ; home all axes");  				file.WriteLine("G90 ; use absolute coordinates");  				file.WriteLine("G21 ; set units to millimeters");  				file.WriteLine("G92 E0");  				file.WriteLine("G1 F7800");  				file.WriteLine("G1 Z" + (5).ToString());  				WriteMove(file' center);    				for (int loop = 0; loop < loops; loop++)  				{  					for (int step = 0; step < steps; step++)  					{  						Vector2 nextPosition = new Vector2(radius' 0);  						nextPosition.Rotate(MathHelper.Tau / steps * step);  						WriteMove(file' center + nextPosition);  					}  				}    				file.WriteLine("M84     ; disable motors");  			}
Magic Number,MatterHackers.MatterControl,MatterControlApplication,C:\repos\MatterHackers_MatterControl\MatterControlApplication.cs,WriteTestGCodeFile,The following statement contains a magic number: using (StreamWriter file = new StreamWriter("PerformanceTest.gcode"))  			{  				//int loops = 150000;  				int loops = 150;  				int steps = 200;  				double radius = 50;  				Vector2 center = new Vector2(150' 100);    				file.WriteLine("G28 ; home all axes");  				file.WriteLine("G90 ; use absolute coordinates");  				file.WriteLine("G21 ; set units to millimeters");  				file.WriteLine("G92 E0");  				file.WriteLine("G1 F7800");  				file.WriteLine("G1 Z" + (5).ToString());  				WriteMove(file' center);    				for (int loop = 0; loop < loops; loop++)  				{  					for (int step = 0; step < steps; step++)  					{  						Vector2 nextPosition = new Vector2(radius' 0);  						nextPosition.Rotate(MathHelper.Tau / steps * step);  						WriteMove(file' center + nextPosition);  					}  				}    				file.WriteLine("M84     ; disable motors");  			}
Magic Number,MatterHackers.MatterControl,MatterControlApplication,C:\repos\MatterHackers_MatterControl\MatterControlApplication.cs,WriteTestGCodeFile,The following statement contains a magic number: using (StreamWriter file = new StreamWriter("PerformanceTest.gcode"))  			{  				//int loops = 150000;  				int loops = 150;  				int steps = 200;  				double radius = 50;  				Vector2 center = new Vector2(150' 100);    				file.WriteLine("G28 ; home all axes");  				file.WriteLine("G90 ; use absolute coordinates");  				file.WriteLine("G21 ; set units to millimeters");  				file.WriteLine("G92 E0");  				file.WriteLine("G1 F7800");  				file.WriteLine("G1 Z" + (5).ToString());  				WriteMove(file' center);    				for (int loop = 0; loop < loops; loop++)  				{  					for (int step = 0; step < steps; step++)  					{  						Vector2 nextPosition = new Vector2(radius' 0);  						nextPosition.Rotate(MathHelper.Tau / steps * step);  						WriteMove(file' center + nextPosition);  					}  				}    				file.WriteLine("M84     ; disable motors");  			}
Magic Number,MatterHackers.MatterControl,MatterControlApplication,C:\repos\MatterHackers_MatterControl\MatterControlApplication.cs,WriteTestGCodeFile,The following statement contains a magic number: using (StreamWriter file = new StreamWriter("PerformanceTest.gcode"))  			{  				//int loops = 150000;  				int loops = 150;  				int steps = 200;  				double radius = 50;  				Vector2 center = new Vector2(150' 100);    				file.WriteLine("G28 ; home all axes");  				file.WriteLine("G90 ; use absolute coordinates");  				file.WriteLine("G21 ; set units to millimeters");  				file.WriteLine("G92 E0");  				file.WriteLine("G1 F7800");  				file.WriteLine("G1 Z" + (5).ToString());  				WriteMove(file' center);    				for (int loop = 0; loop < loops; loop++)  				{  					for (int step = 0; step < steps; step++)  					{  						Vector2 nextPosition = new Vector2(radius' 0);  						nextPosition.Rotate(MathHelper.Tau / steps * step);  						WriteMove(file' center + nextPosition);  					}  				}    				file.WriteLine("M84     ; disable motors");  			}
Magic Number,MatterHackers.MatterControl,MatterControlApplication,C:\repos\MatterHackers_MatterControl\MatterControlApplication.cs,WriteTestGCodeFile,The following statement contains a magic number: using (StreamWriter file = new StreamWriter("PerformanceTest.gcode"))  			{  				//int loops = 150000;  				int loops = 150;  				int steps = 200;  				double radius = 50;  				Vector2 center = new Vector2(150' 100);    				file.WriteLine("G28 ; home all axes");  				file.WriteLine("G90 ; use absolute coordinates");  				file.WriteLine("G21 ; set units to millimeters");  				file.WriteLine("G92 E0");  				file.WriteLine("G1 F7800");  				file.WriteLine("G1 Z" + (5).ToString());  				WriteMove(file' center);    				for (int loop = 0; loop < loops; loop++)  				{  					for (int step = 0; step < steps; step++)  					{  						Vector2 nextPosition = new Vector2(radius' 0);  						nextPosition.Rotate(MathHelper.Tau / steps * step);  						WriteMove(file' center + nextPosition);  					}  				}    				file.WriteLine("M84     ; disable motors");  			}
Magic Number,MatterHackers.MatterControl,MatterControlApplication,C:\repos\MatterHackers_MatterControl\MatterControlApplication.cs,WriteTestGCodeFile,The following statement contains a magic number: using (StreamWriter file = new StreamWriter("PerformanceTest.gcode"))  			{  				//int loops = 150000;  				int loops = 150;  				int steps = 200;  				double radius = 50;  				Vector2 center = new Vector2(150' 100);    				file.WriteLine("G28 ; home all axes");  				file.WriteLine("G90 ; use absolute coordinates");  				file.WriteLine("G21 ; set units to millimeters");  				file.WriteLine("G92 E0");  				file.WriteLine("G1 F7800");  				file.WriteLine("G1 Z" + (5).ToString());  				WriteMove(file' center);    				for (int loop = 0; loop < loops; loop++)  				{  					for (int step = 0; step < steps; step++)  					{  						Vector2 nextPosition = new Vector2(radius' 0);  						nextPosition.Rotate(MathHelper.Tau / steps * step);  						WriteMove(file' center + nextPosition);  					}  				}    				file.WriteLine("M84     ; disable motors");  			}
Magic Number,MatterHackers.MatterControl,MatterControlApplication,C:\repos\MatterHackers_MatterControl\MatterControlApplication.cs,OnClosed,The following statement contains a magic number: if (RestartOnClose)  			{  				string appPathAndFile = System.Reflection.Assembly.GetExecutingAssembly().Location;  				string pathToAppFolder = Path.GetDirectoryName(appPathAndFile);    				ProcessStartInfo runAppLauncherStartInfo = new ProcessStartInfo();  				runAppLauncherStartInfo.Arguments = "\"{0}\" \"{1}\"".FormatWith(appPathAndFile' 1000);  				runAppLauncherStartInfo.FileName = Path.Combine(pathToAppFolder' "Launcher.exe");  				runAppLauncherStartInfo.WindowStyle = ProcessWindowStyle.Hidden;  				runAppLauncherStartInfo.CreateNoWindow = true;    				Process.Start(runAppLauncherStartInfo);  			}
Magic Number,MatterHackers.MatterControl,MatterControlApplication,C:\repos\MatterHackers_MatterControl\MatterControlApplication.cs,HtmlWindowTest,The following statement contains a magic number: try  			{  				SystemWindow htmlTestWindow = new SystemWindow(640' 480);  				string htmlContent = "";  				if (true)  				{  					string releaseNotesFile = Path.Combine("C:\\Users\\lbrubaker\\Downloads"' "test1.html");  					htmlContent = File.ReadAllText(releaseNotesFile);  				}  				else  				{  					WebClient webClient = new WebClient();  					htmlContent = webClient.DownloadString("http://www.matterhackers.com/s/store?q=pla");  				}    				HtmlWidget content = new HtmlWidget(htmlContent' RGBA_Bytes.Black);  				content.AddChild(new GuiWidget()  				{  					HAnchor = HAnchor.AbsolutePosition'  					VAnchor = VAnchor.ParentBottomTop  				});  				content.VAnchor |= VAnchor.ParentTop;  				content.BackgroundColor = RGBA_Bytes.White;  				htmlTestWindow.AddChild(content);  				htmlTestWindow.BackgroundColor = RGBA_Bytes.Cyan;  				UiThread.RunOnIdle((state) =>  				{  					htmlTestWindow.ShowAsSystemWindow();  				}' 1);  			}  			catch  			{  				int stop = 1;  			}
Magic Number,MatterHackers.MatterControl,MatterControlApplication,C:\repos\MatterHackers_MatterControl\MatterControlApplication.cs,HtmlWindowTest,The following statement contains a magic number: try  			{  				SystemWindow htmlTestWindow = new SystemWindow(640' 480);  				string htmlContent = "";  				if (true)  				{  					string releaseNotesFile = Path.Combine("C:\\Users\\lbrubaker\\Downloads"' "test1.html");  					htmlContent = File.ReadAllText(releaseNotesFile);  				}  				else  				{  					WebClient webClient = new WebClient();  					htmlContent = webClient.DownloadString("http://www.matterhackers.com/s/store?q=pla");  				}    				HtmlWidget content = new HtmlWidget(htmlContent' RGBA_Bytes.Black);  				content.AddChild(new GuiWidget()  				{  					HAnchor = HAnchor.AbsolutePosition'  					VAnchor = VAnchor.ParentBottomTop  				});  				content.VAnchor |= VAnchor.ParentTop;  				content.BackgroundColor = RGBA_Bytes.White;  				htmlTestWindow.AddChild(content);  				htmlTestWindow.BackgroundColor = RGBA_Bytes.Cyan;  				UiThread.RunOnIdle((state) =>  				{  					htmlTestWindow.ShowAsSystemWindow();  				}' 1);  			}  			catch  			{  				int stop = 1;  			}
Magic Number,MatterHackers.MatterControl,ProjectFileHandler,C:\repos\MatterHackers_MatterControl\Utilities\ProjectFileHandler.cs,ExportToProjectArchive,The following statement contains a magic number: if (File.Exists(savedFileName))  			{  				try  				{  					File.Delete(savedFileName);  				}  				catch (Exception ex)  				{  					string directory = Path.GetDirectoryName(savedFileName);  					string fileName = Path.GetFileNameWithoutExtension(savedFileName);  					string extension = Path.GetExtension(savedFileName);  					string candidatePath;    					for (int i = 1; i < 20; i++)  					{  						candidatePath = Path.Combine(directory' string.Format("{0}({1}){2}"' fileName' i' extension));  						if (!File.Exists(candidatePath))  						{  							File.Move(savedFileName' candidatePath);  							break;  						}  					}  				}  			}
Magic Number,MatterHackers.MatterControl,RequestManager,C:\repos\MatterHackers_MatterControl\Utilities\WebUtilities\RequestManager.cs,GenerateRequest,The following statement contains a magic number: if (method == "POST")  			{  				// Convert POST data to a byte array.  				byte[] byteArray = Encoding.UTF8.GetBytes(content);  				// Set the ContentType property of the WebRequest.  				request.ContentType = "application/json";  				// Set the ContentLength property of the WebRequest.  				request.ContentLength = byteArray.Length;  				// Get the request stream.  				Stream dataStream = null;  				try  				{  					dataStream = request.GetRequestStream();  					// Write the data to the request stream.  					dataStream.Write(byteArray' 0' byteArray.Length);  					// Close the Stream object.  					dataStream.Close();  				}  				catch (WebException ex)  				{  					if(ex.Status == WebExceptionStatus.Timeout)  					{  						LastResponse = JsonConvert.SerializeObject(new { status = "error"' statuscode = 408 });  					}  					Console.WriteLine("Web exception occurred. Status code: {0}"' ex.Status);  				}  				catch (IOException ioException)  				{  					Console.WriteLine("Web exception occurred. Message: {0}"' ioException.Message);  				}  				catch (Exception e)  				{  					MatterControlApplication.Instance.ReportException(e);  				}  			}
Magic Number,MatterHackers.MatterControl,AboutWidget,C:\repos\MatterHackers_MatterControl\AboutPage\AboutWidget.cs,AboutWidget,The following statement contains a magic number: this.Padding = new BorderDouble(5);
Magic Number,MatterHackers.MatterControl,AboutWidget,C:\repos\MatterHackers_MatterControl\AboutPage\AboutWidget.cs,AboutWidget,The following statement contains a magic number: customInfoTopToBottom.Padding = new BorderDouble(5' 10' 5' 0);
Magic Number,MatterHackers.MatterControl,AboutWidget,C:\repos\MatterHackers_MatterControl\AboutPage\AboutWidget.cs,AboutWidget,The following statement contains a magic number: customInfoTopToBottom.Padding = new BorderDouble(5' 10' 5' 0);
Magic Number,MatterHackers.MatterControl,AboutWidget,C:\repos\MatterHackers_MatterControl\AboutPage\AboutWidget.cs,AboutWidget,The following statement contains a magic number: customInfoTopToBottom.Padding = new BorderDouble(5' 10' 5' 0);
Magic Number,MatterHackers.MatterControl,AboutWidget,C:\repos\MatterHackers_MatterControl\AboutPage\AboutWidget.cs,AboutWidget,The following statement contains a magic number: customInfoTopToBottom.AddChild(new GuiWidget(1' 10));
Magic Number,MatterHackers.MatterControl,ThemeColorSelectorWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\ThemeColorSelectorWidget.cs,ThemeColorSelectorWidget,The following statement contains a magic number: this.Padding = new BorderDouble(2' 0);
Magic Number,MatterHackers.MatterControl,ThemeColorSelectorWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\ThemeColorSelectorWidget.cs,ThemeColorSelectorWidget,The following statement contains a magic number: for (int x = 0; x < themeCount / 2; x++)  			{  				var columnContainer = new FlowLayoutWidget(Agg.UI.FlowDirection.TopToBottom)  				{  					Width = containerHeight  				};  				columnContainer.AddChild(CreateThemeButton(allThemes[index]));    				int secondRowIndex = index + themeCount / 2;  				columnContainer.AddChild(CreateThemeButton(allThemes[secondRowIndex]));    				this.AddChild(columnContainer);    				index++;  			}
Magic Number,MatterHackers.MatterControl,ThemeColorSelectorWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\ThemeColorSelectorWidget.cs,ThemeColorSelectorWidget,The following statement contains a magic number: for (int x = 0; x < themeCount / 2; x++)  			{  				var columnContainer = new FlowLayoutWidget(Agg.UI.FlowDirection.TopToBottom)  				{  					Width = containerHeight  				};  				columnContainer.AddChild(CreateThemeButton(allThemes[index]));    				int secondRowIndex = index + themeCount / 2;  				columnContainer.AddChild(CreateThemeButton(allThemes[secondRowIndex]));    				this.AddChild(columnContainer);    				index++;  			}
Magic Number,MatterHackers.MatterControl,ThemeColorSelectorWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\ThemeColorSelectorWidget.cs,ThemeColorSelectorWidget,The following statement contains a magic number: this.Width = containerHeight * (themeCount / 2);
Magic Number,MatterHackers.MatterControl,TextImageWidget,C:\repos\MatterHackers_MatterControl\ControlElements\TextImageButtonFactory.cs,TextImageWidget,The following statement contains a magic number: if (label != "")  			{  				textWidget.VAnchor = VAnchor.ParentCenter;  				textWidget.TextColor = textColor;  				textWidget.Padding = new BorderDouble(3' 0);  				container.AddChild(textWidget);  			}
Magic Number,MatterHackers.MatterControl,TextImageButtonFactory,C:\repos\MatterHackers_MatterControl\ControlElements\TextImageButtonFactory.cs,GenerateGroupBoxLabelWithEdit,The following statement contains a magic number: editButton.Margin = new BorderDouble(2' 2' 2' 0);
Magic Number,MatterHackers.MatterControl,TextImageButtonFactory,C:\repos\MatterHackers_MatterControl\ControlElements\TextImageButtonFactory.cs,GenerateGroupBoxLabelWithEdit,The following statement contains a magic number: editButton.Margin = new BorderDouble(2' 2' 2' 0);
Magic Number,MatterHackers.MatterControl,TextImageButtonFactory,C:\repos\MatterHackers_MatterControl\ControlElements\TextImageButtonFactory.cs,GenerateGroupBoxLabelWithEdit,The following statement contains a magic number: editButton.Margin = new BorderDouble(2' 2' 2' 0);
Magic Number,MatterHackers.MatterControl,TextImageButtonFactory,C:\repos\MatterHackers_MatterControl\ControlElements\TextImageButtonFactory.cs,GetThemedEditButton,The following statement contains a magic number: ImageBuffer normalImage = StaticData.Instance.LoadIcon("icon_edit.png"' 16' 16);
Magic Number,MatterHackers.MatterControl,TextImageButtonFactory,C:\repos\MatterHackers_MatterControl\ControlElements\TextImageButtonFactory.cs,GetThemedEditButton,The following statement contains a magic number: ImageBuffer normalImage = StaticData.Instance.LoadIcon("icon_edit.png"' 16' 16);
Magic Number,MatterHackers.MatterControl,TextImageButtonFactory,C:\repos\MatterHackers_MatterControl\ControlElements\TextImageButtonFactory.cs,GetThemedEditButton,The following statement contains a magic number: if (ActiveTheme.Instance.IsDarkTheme)  			{  				editButton = new Button(0' 0' new ButtonViewThreeImage(  					SetToColor.CreateSetToColor(normalImage' RGBA_Bytes.White.AdjustLightness(.8).GetAsRGBA_Bytes())'  					SetToColor.CreateSetToColor(normalImage' RGBA_Bytes.White.AdjustLightness(.9).GetAsRGBA_Bytes())'  					SetToColor.CreateSetToColor(normalImage' RGBA_Bytes.White.AdjustLightness(1).GetAsRGBA_Bytes())));  			}  			else  			{  				editButton = new Button(0' 0' new ButtonViewThreeImage(  					SetToColor.CreateSetToColor(normalImage' RGBA_Bytes.White.AdjustLightness(.4).GetAsRGBA_Bytes())'  					SetToColor.CreateSetToColor(normalImage' RGBA_Bytes.White.AdjustLightness(.2).GetAsRGBA_Bytes())'  					SetToColor.CreateSetToColor(normalImage' RGBA_Bytes.White.AdjustLightness(0).GetAsRGBA_Bytes())));  			}
Magic Number,MatterHackers.MatterControl,TextImageButtonFactory,C:\repos\MatterHackers_MatterControl\ControlElements\TextImageButtonFactory.cs,GetThemedEditButton,The following statement contains a magic number: if (ActiveTheme.Instance.IsDarkTheme)  			{  				editButton = new Button(0' 0' new ButtonViewThreeImage(  					SetToColor.CreateSetToColor(normalImage' RGBA_Bytes.White.AdjustLightness(.8).GetAsRGBA_Bytes())'  					SetToColor.CreateSetToColor(normalImage' RGBA_Bytes.White.AdjustLightness(.9).GetAsRGBA_Bytes())'  					SetToColor.CreateSetToColor(normalImage' RGBA_Bytes.White.AdjustLightness(1).GetAsRGBA_Bytes())));  			}  			else  			{  				editButton = new Button(0' 0' new ButtonViewThreeImage(  					SetToColor.CreateSetToColor(normalImage' RGBA_Bytes.White.AdjustLightness(.4).GetAsRGBA_Bytes())'  					SetToColor.CreateSetToColor(normalImage' RGBA_Bytes.White.AdjustLightness(.2).GetAsRGBA_Bytes())'  					SetToColor.CreateSetToColor(normalImage' RGBA_Bytes.White.AdjustLightness(0).GetAsRGBA_Bytes())));  			}
Magic Number,MatterHackers.MatterControl,TextImageButtonFactory,C:\repos\MatterHackers_MatterControl\ControlElements\TextImageButtonFactory.cs,GetThemedEditButton,The following statement contains a magic number: if (ActiveTheme.Instance.IsDarkTheme)  			{  				editButton = new Button(0' 0' new ButtonViewThreeImage(  					SetToColor.CreateSetToColor(normalImage' RGBA_Bytes.White.AdjustLightness(.8).GetAsRGBA_Bytes())'  					SetToColor.CreateSetToColor(normalImage' RGBA_Bytes.White.AdjustLightness(.9).GetAsRGBA_Bytes())'  					SetToColor.CreateSetToColor(normalImage' RGBA_Bytes.White.AdjustLightness(1).GetAsRGBA_Bytes())));  			}  			else  			{  				editButton = new Button(0' 0' new ButtonViewThreeImage(  					SetToColor.CreateSetToColor(normalImage' RGBA_Bytes.White.AdjustLightness(.4).GetAsRGBA_Bytes())'  					SetToColor.CreateSetToColor(normalImage' RGBA_Bytes.White.AdjustLightness(.2).GetAsRGBA_Bytes())'  					SetToColor.CreateSetToColor(normalImage' RGBA_Bytes.White.AdjustLightness(0).GetAsRGBA_Bytes())));  			}
Magic Number,MatterHackers.MatterControl,TextImageButtonFactory,C:\repos\MatterHackers_MatterControl\ControlElements\TextImageButtonFactory.cs,GetThemedEditButton,The following statement contains a magic number: if (ActiveTheme.Instance.IsDarkTheme)  			{  				editButton = new Button(0' 0' new ButtonViewThreeImage(  					SetToColor.CreateSetToColor(normalImage' RGBA_Bytes.White.AdjustLightness(.8).GetAsRGBA_Bytes())'  					SetToColor.CreateSetToColor(normalImage' RGBA_Bytes.White.AdjustLightness(.9).GetAsRGBA_Bytes())'  					SetToColor.CreateSetToColor(normalImage' RGBA_Bytes.White.AdjustLightness(1).GetAsRGBA_Bytes())));  			}  			else  			{  				editButton = new Button(0' 0' new ButtonViewThreeImage(  					SetToColor.CreateSetToColor(normalImage' RGBA_Bytes.White.AdjustLightness(.4).GetAsRGBA_Bytes())'  					SetToColor.CreateSetToColor(normalImage' RGBA_Bytes.White.AdjustLightness(.2).GetAsRGBA_Bytes())'  					SetToColor.CreateSetToColor(normalImage' RGBA_Bytes.White.AdjustLightness(0).GetAsRGBA_Bytes())));  			}
Magic Number,MatterHackers.MatterControl,TextImageButtonFactory,C:\repos\MatterHackers_MatterControl\ControlElements\TextImageButtonFactory.cs,GenerateGroupBoxLabelWithEdit,The following statement contains a magic number: editButton.Margin = new BorderDouble(2' 2' 2' 0);
Magic Number,MatterHackers.MatterControl,TextImageButtonFactory,C:\repos\MatterHackers_MatterControl\ControlElements\TextImageButtonFactory.cs,GenerateGroupBoxLabelWithEdit,The following statement contains a magic number: editButton.Margin = new BorderDouble(2' 2' 2' 0);
Magic Number,MatterHackers.MatterControl,TextImageButtonFactory,C:\repos\MatterHackers_MatterControl\ControlElements\TextImageButtonFactory.cs,GenerateGroupBoxLabelWithEdit,The following statement contains a magic number: editButton.Margin = new BorderDouble(2' 2' 2' 0);
Magic Number,MatterHackers.MatterControl,TextImageButtonFactory,C:\repos\MatterHackers_MatterControl\ControlElements\TextImageButtonFactory.cs,GenerateGroupBoxLabelWithEdit,The following statement contains a magic number: TextWidget textLabel = new TextWidget(label' textColor: ActiveTheme.Instance.PrimaryTextColor' pointSize: 12);
Magic Number,MatterHackers.MatterControl,TextImageButtonFactory,C:\repos\MatterHackers_MatterControl\ControlElements\TextImageButtonFactory.cs,getButtonView,The following statement contains a magic number: if (disabledImage == null && normalImage != null)  			{  				// Generate the disabled image by lowering the alpha  				disabledImage = normalImage.Multiply(new RGBA_Bytes(255' 255' 255' 150));  			}
Magic Number,MatterHackers.MatterControl,TextImageButtonFactory,C:\repos\MatterHackers_MatterControl\ControlElements\TextImageButtonFactory.cs,getButtonView,The following statement contains a magic number: if (disabledImage == null && normalImage != null)  			{  				// Generate the disabled image by lowering the alpha  				disabledImage = normalImage.Multiply(new RGBA_Bytes(255' 255' 255' 150));  			}
Magic Number,MatterHackers.MatterControl,TextImageButtonFactory,C:\repos\MatterHackers_MatterControl\ControlElements\TextImageButtonFactory.cs,getButtonView,The following statement contains a magic number: if (disabledImage == null && normalImage != null)  			{  				// Generate the disabled image by lowering the alpha  				disabledImage = normalImage.Multiply(new RGBA_Bytes(255' 255' 255' 150));  			}
Magic Number,MatterHackers.MatterControl,TextImageButtonFactory,C:\repos\MatterHackers_MatterControl\ControlElements\TextImageButtonFactory.cs,getButtonView,The following statement contains a magic number: if (disabledImage == null && normalImage != null)  			{  				// Generate the disabled image by lowering the alpha  				disabledImage = normalImage.Multiply(new RGBA_Bytes(255' 255' 255' 150));  			}
Magic Number,MatterHackers.MatterControl,SaveAsWindow,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\SaveAsWindow.cs,SaveAsWindow,The following statement contains a magic number: topToBottom.Padding = new BorderDouble(3' 0' 3' 5);
Magic Number,MatterHackers.MatterControl,SaveAsWindow,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\SaveAsWindow.cs,SaveAsWindow,The following statement contains a magic number: topToBottom.Padding = new BorderDouble(3' 0' 3' 5);
Magic Number,MatterHackers.MatterControl,SaveAsWindow,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\SaveAsWindow.cs,SaveAsWindow,The following statement contains a magic number: topToBottom.Padding = new BorderDouble(3' 0' 3' 5);
Magic Number,MatterHackers.MatterControl,SaveAsWindow,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\SaveAsWindow.cs,SaveAsWindow,The following statement contains a magic number: headerRow.Margin = new BorderDouble(0' 3' 0' 0);
Magic Number,MatterHackers.MatterControl,SaveAsWindow,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\SaveAsWindow.cs,SaveAsWindow,The following statement contains a magic number: headerRow.Padding = new BorderDouble(0' 3' 0' 3);
Magic Number,MatterHackers.MatterControl,SaveAsWindow,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\SaveAsWindow.cs,SaveAsWindow,The following statement contains a magic number: headerRow.Padding = new BorderDouble(0' 3' 0' 3);
Magic Number,MatterHackers.MatterControl,SaveAsWindow,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\SaveAsWindow.cs,SaveAsWindow,The following statement contains a magic number: {  				string saveAsLabel = "Save New Design".Localize() + ":";  				TextWidget elementHeader = new TextWidget(saveAsLabel' pointSize: 14);  				elementHeader.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				elementHeader.HAnchor = HAnchor.ParentLeftRight;  				elementHeader.VAnchor = Agg.UI.VAnchor.ParentBottom;    				headerRow.AddChild(elementHeader);  				topToBottom.AddChild(headerRow);  			}
Magic Number,MatterHackers.MatterControl,SaveAsWindow,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\SaveAsWindow.cs,SaveAsWindow,The following statement contains a magic number: {  				middleRowContainer.HAnchor = HAnchor.ParentLeftRight;  				middleRowContainer.VAnchor = VAnchor.ParentBottomTop;  				middleRowContainer.Padding = new BorderDouble(5);  				middleRowContainer.BackgroundColor = ActiveTheme.Instance.SecondaryBackgroundColor;  			}
Magic Number,MatterHackers.MatterControl,SaveAsWindow,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\SaveAsWindow.cs,SaveAsWindow,The following statement contains a magic number: {  				//Adds text box and check box to the above container  				GuiWidget chooseWindow = new GuiWidget(10' 30);  				chooseWindow.HAnchor = HAnchor.ParentLeftRight;  				chooseWindow.VAnchor = VAnchor.ParentBottomTop;  				chooseWindow.Margin = new BorderDouble(5);  				chooseWindow.BackgroundColor = ActiveTheme.Instance.PrimaryBackgroundColor;  				chooseWindow.Padding = new BorderDouble(3);  				chooseWindow.AddChild(librarySelectorWidget);    				middleRowContainer.AddChild(chooseWindow);  			}
Magic Number,MatterHackers.MatterControl,SaveAsWindow,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\SaveAsWindow.cs,SaveAsWindow,The following statement contains a magic number: {  				//Adds text box and check box to the above container  				GuiWidget chooseWindow = new GuiWidget(10' 30);  				chooseWindow.HAnchor = HAnchor.ParentLeftRight;  				chooseWindow.VAnchor = VAnchor.ParentBottomTop;  				chooseWindow.Margin = new BorderDouble(5);  				chooseWindow.BackgroundColor = ActiveTheme.Instance.PrimaryBackgroundColor;  				chooseWindow.Padding = new BorderDouble(3);  				chooseWindow.AddChild(librarySelectorWidget);    				middleRowContainer.AddChild(chooseWindow);  			}
Magic Number,MatterHackers.MatterControl,SaveAsWindow,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\SaveAsWindow.cs,SaveAsWindow,The following statement contains a magic number: {  				//Adds text box and check box to the above container  				GuiWidget chooseWindow = new GuiWidget(10' 30);  				chooseWindow.HAnchor = HAnchor.ParentLeftRight;  				chooseWindow.VAnchor = VAnchor.ParentBottomTop;  				chooseWindow.Margin = new BorderDouble(5);  				chooseWindow.BackgroundColor = ActiveTheme.Instance.PrimaryBackgroundColor;  				chooseWindow.Padding = new BorderDouble(3);  				chooseWindow.AddChild(librarySelectorWidget);    				middleRowContainer.AddChild(chooseWindow);  			}
Magic Number,MatterHackers.MatterControl,SaveAsWindow,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\SaveAsWindow.cs,SaveAsWindow,The following statement contains a magic number: {  				//Adds text box and check box to the above container  				GuiWidget chooseWindow = new GuiWidget(10' 30);  				chooseWindow.HAnchor = HAnchor.ParentLeftRight;  				chooseWindow.VAnchor = VAnchor.ParentBottomTop;  				chooseWindow.Margin = new BorderDouble(5);  				chooseWindow.BackgroundColor = ActiveTheme.Instance.PrimaryBackgroundColor;  				chooseWindow.Padding = new BorderDouble(3);  				chooseWindow.AddChild(librarySelectorWidget);    				middleRowContainer.AddChild(chooseWindow);  			}
Magic Number,MatterHackers.MatterControl,SaveAsWindow,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\SaveAsWindow.cs,SaveAsWindow,The following statement contains a magic number: if(getNewName)  			{  				string fileNameLabel = "Design Name".Localize();  				TextWidget fileNameHeader = new TextWidget(fileNameLabel' pointSize: 12);  				fileNameHeader.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				fileNameHeader.Margin = new BorderDouble(5);  				fileNameHeader.HAnchor = HAnchor.ParentLeft;    				//Adds text box and check box to the above container  				textToAddWidget = new MHTextEditWidget(""' pixelWidth: 300' messageWhenEmptyAndNotSelected: "Enter a Design Name Here".Localize());  				textToAddWidget.HAnchor = HAnchor.ParentLeftRight;  				textToAddWidget.Margin = new BorderDouble(5);  				textToAddWidget.ActualTextEditWidget.EnterPressed += new KeyEventHandler(ActualTextEditWidget_EnterPressed);    				middleRowContainer.AddChild(fileNameHeader);  				middleRowContainer.AddChild(textToAddWidget);  			}
Magic Number,MatterHackers.MatterControl,SaveAsWindow,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\SaveAsWindow.cs,SaveAsWindow,The following statement contains a magic number: if(getNewName)  			{  				string fileNameLabel = "Design Name".Localize();  				TextWidget fileNameHeader = new TextWidget(fileNameLabel' pointSize: 12);  				fileNameHeader.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				fileNameHeader.Margin = new BorderDouble(5);  				fileNameHeader.HAnchor = HAnchor.ParentLeft;    				//Adds text box and check box to the above container  				textToAddWidget = new MHTextEditWidget(""' pixelWidth: 300' messageWhenEmptyAndNotSelected: "Enter a Design Name Here".Localize());  				textToAddWidget.HAnchor = HAnchor.ParentLeftRight;  				textToAddWidget.Margin = new BorderDouble(5);  				textToAddWidget.ActualTextEditWidget.EnterPressed += new KeyEventHandler(ActualTextEditWidget_EnterPressed);    				middleRowContainer.AddChild(fileNameHeader);  				middleRowContainer.AddChild(textToAddWidget);  			}
Magic Number,MatterHackers.MatterControl,SaveAsWindow,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\SaveAsWindow.cs,SaveAsWindow,The following statement contains a magic number: if(getNewName)  			{  				string fileNameLabel = "Design Name".Localize();  				TextWidget fileNameHeader = new TextWidget(fileNameLabel' pointSize: 12);  				fileNameHeader.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				fileNameHeader.Margin = new BorderDouble(5);  				fileNameHeader.HAnchor = HAnchor.ParentLeft;    				//Adds text box and check box to the above container  				textToAddWidget = new MHTextEditWidget(""' pixelWidth: 300' messageWhenEmptyAndNotSelected: "Enter a Design Name Here".Localize());  				textToAddWidget.HAnchor = HAnchor.ParentLeftRight;  				textToAddWidget.Margin = new BorderDouble(5);  				textToAddWidget.ActualTextEditWidget.EnterPressed += new KeyEventHandler(ActualTextEditWidget_EnterPressed);    				middleRowContainer.AddChild(fileNameHeader);  				middleRowContainer.AddChild(textToAddWidget);  			}
Magic Number,MatterHackers.MatterControl,SaveAsWindow,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\SaveAsWindow.cs,SaveAsWindow,The following statement contains a magic number: if(getNewName)  			{  				string fileNameLabel = "Design Name".Localize();  				TextWidget fileNameHeader = new TextWidget(fileNameLabel' pointSize: 12);  				fileNameHeader.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				fileNameHeader.Margin = new BorderDouble(5);  				fileNameHeader.HAnchor = HAnchor.ParentLeft;    				//Adds text box and check box to the above container  				textToAddWidget = new MHTextEditWidget(""' pixelWidth: 300' messageWhenEmptyAndNotSelected: "Enter a Design Name Here".Localize());  				textToAddWidget.HAnchor = HAnchor.ParentLeftRight;  				textToAddWidget.Margin = new BorderDouble(5);  				textToAddWidget.ActualTextEditWidget.EnterPressed += new KeyEventHandler(ActualTextEditWidget_EnterPressed);    				middleRowContainer.AddChild(fileNameHeader);  				middleRowContainer.AddChild(textToAddWidget);  			}
Magic Number,MatterHackers.MatterControl,SaveAsWindow,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\SaveAsWindow.cs,SaveAsWindow,The following statement contains a magic number: {  				BackgroundColor = ActiveTheme.Instance.PrimaryBackgroundColor;  				buttonRow.HAnchor = HAnchor.ParentLeftRight;  				buttonRow.Padding = new BorderDouble(0' 3);  			}
Magic Number,MatterHackers.MatterControl,SplitButton,C:\repos\MatterHackers_MatterControl\CustomWidgets\SplitButton.cs,CreateDefaultButton,The following statement contains a magic number: buttonFactory.FixedHeight = 30 * GuiWidget.DeviceScale;
Magic Number,MatterHackers.MatterControl,SplitButton,C:\repos\MatterHackers_MatterControl\CustomWidgets\SplitButton.cs,CreateDefaultButton,The following statement contains a magic number: buttonFactory.hoverFillColor = new RGBA_Bytes(255' 255' 255' 200);
Magic Number,MatterHackers.MatterControl,SplitButton,C:\repos\MatterHackers_MatterControl\CustomWidgets\SplitButton.cs,CreateDefaultButton,The following statement contains a magic number: buttonFactory.hoverFillColor = new RGBA_Bytes(255' 255' 255' 200);
Magic Number,MatterHackers.MatterControl,SplitButton,C:\repos\MatterHackers_MatterControl\CustomWidgets\SplitButton.cs,CreateDefaultButton,The following statement contains a magic number: buttonFactory.hoverFillColor = new RGBA_Bytes(255' 255' 255' 200);
Magic Number,MatterHackers.MatterControl,SplitButton,C:\repos\MatterHackers_MatterControl\CustomWidgets\SplitButton.cs,CreateDefaultButton,The following statement contains a magic number: buttonFactory.hoverFillColor = new RGBA_Bytes(255' 255' 255' 200);
Magic Number,MatterHackers.MatterControl,SplitButton,C:\repos\MatterHackers_MatterControl\CustomWidgets\SplitButton.cs,CreateDefaultButton,The following statement contains a magic number: buttonFactory.normalBorderColor = new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 200);
Magic Number,MatterHackers.MatterControl,SplitButton,C:\repos\MatterHackers_MatterControl\CustomWidgets\SplitButton.cs,CreateDefaultButton,The following statement contains a magic number: buttonFactory.hoverBorderColor = new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 200);
Magic Number,MatterHackers.MatterControl,DropDownButtonBase,C:\repos\MatterHackers_MatterControl\ControlElements\DropDownMenuFactory.cs,DropDownButtonBase,The following statement contains a magic number: GuiWidget arrow = new GuiWidget(20' height);
Magic Number,MatterHackers.MatterControl.AboutPage,CheckForUpdateWindow,C:\repos\MatterHackers_MatterControl\AboutPage\CheckForUpdateWindow.cs,CheckForUpdateWindow,The following statement contains a magic number: linkButtonFactory.fontSize = 10;
Magic Number,MatterHackers.MatterControl.AboutPage,CheckForUpdateWindow,C:\repos\MatterHackers_MatterControl\AboutPage\CheckForUpdateWindow.cs,CheckForUpdateWindow,The following statement contains a magic number: Padding = new BorderDouble(left: 5' right: 5);
Magic Number,MatterHackers.MatterControl.AboutPage,CheckForUpdateWindow,C:\repos\MatterHackers_MatterControl\AboutPage\CheckForUpdateWindow.cs,CheckForUpdateWindow,The following statement contains a magic number: Padding = new BorderDouble(left: 5' right: 5);
Magic Number,MatterHackers.MatterControl.AboutPage,CheckForUpdateWindow,C:\repos\MatterHackers_MatterControl\AboutPage\CheckForUpdateWindow.cs,CheckForUpdateWindow,The following statement contains a magic number: currentFeedAndDropDownContainer.Margin = new BorderDouble(0'5'0'0);
Magic Number,MatterHackers.MatterControl.AboutPage,CheckForUpdateWindow,C:\repos\MatterHackers_MatterControl\AboutPage\CheckForUpdateWindow.cs,CheckForUpdateWindow,The following statement contains a magic number: TextWidget checkUpdateLabel = new TextWidget("Check for Update".Localize()' pointSize: 20);
Magic Number,MatterHackers.MatterControl.AboutPage,CheckForUpdateWindow,C:\repos\MatterHackers_MatterControl\AboutPage\CheckForUpdateWindow.cs,CheckForUpdateWindow,The following statement contains a magic number: if (UpdateControlData.Instance.UpdateRequired)  			{  				checkUpdateLabel = new TextWidget("Update Required".Localize()' pointSize: 20);  			}
Magic Number,MatterHackers.MatterControl.AboutPage,CheckForUpdateWindow,C:\repos\MatterHackers_MatterControl\AboutPage\CheckForUpdateWindow.cs,CheckForUpdateWindow,The following statement contains a magic number: checkUpdateLabel.Margin = new BorderDouble(2' 10' 10' 5);
Magic Number,MatterHackers.MatterControl.AboutPage,CheckForUpdateWindow,C:\repos\MatterHackers_MatterControl\AboutPage\CheckForUpdateWindow.cs,CheckForUpdateWindow,The following statement contains a magic number: checkUpdateLabel.Margin = new BorderDouble(2' 10' 10' 5);
Magic Number,MatterHackers.MatterControl.AboutPage,CheckForUpdateWindow,C:\repos\MatterHackers_MatterControl\AboutPage\CheckForUpdateWindow.cs,CheckForUpdateWindow,The following statement contains a magic number: checkUpdateLabel.Margin = new BorderDouble(2' 10' 10' 5);
Magic Number,MatterHackers.MatterControl.AboutPage,CheckForUpdateWindow,C:\repos\MatterHackers_MatterControl\AboutPage\CheckForUpdateWindow.cs,CheckForUpdateWindow,The following statement contains a magic number: checkUpdateLabel.Margin = new BorderDouble(2' 10' 10' 5);
Magic Number,MatterHackers.MatterControl.AboutPage,CheckForUpdateWindow,C:\repos\MatterHackers_MatterControl\AboutPage\CheckForUpdateWindow.cs,CheckForUpdateWindow,The following statement contains a magic number: TextWidget feedLabel = new TextWidget(fullCurrentFeedLabel' pointSize: 12);
Magic Number,MatterHackers.MatterControl.AboutPage,CheckForUpdateWindow,C:\repos\MatterHackers_MatterControl\AboutPage\CheckForUpdateWindow.cs,CheckForUpdateWindow,The following statement contains a magic number: feedLabel.Margin = new BorderDouble(left: 5);
Magic Number,MatterHackers.MatterControl.AboutPage,CheckForUpdateWindow,C:\repos\MatterHackers_MatterControl\AboutPage\CheckForUpdateWindow.cs,CheckForUpdateWindow,The following statement contains a magic number: releaseOptionsDropList = new DropDownList("Development"' maxHeight: 200);
Magic Number,MatterHackers.MatterControl.AboutPage,CheckForUpdateWindow,C:\repos\MatterHackers_MatterControl\AboutPage\CheckForUpdateWindow.cs,CheckForUpdateWindow,The following statement contains a magic number: currentBuildInfo.Margin = new BorderDouble(left: 5'bottom: 15' top: 20);
Magic Number,MatterHackers.MatterControl.AboutPage,CheckForUpdateWindow,C:\repos\MatterHackers_MatterControl\AboutPage\CheckForUpdateWindow.cs,CheckForUpdateWindow,The following statement contains a magic number: currentBuildInfo.Margin = new BorderDouble(left: 5'bottom: 15' top: 20);
Magic Number,MatterHackers.MatterControl.AboutPage,CheckForUpdateWindow,C:\repos\MatterHackers_MatterControl\AboutPage\CheckForUpdateWindow.cs,CheckForUpdateWindow,The following statement contains a magic number: currentBuildInfo.Margin = new BorderDouble(left: 5'bottom: 15' top: 20);
Magic Number,MatterHackers.MatterControl.AboutPage,CheckForUpdateWindow,C:\repos\MatterHackers_MatterControl\AboutPage\CheckForUpdateWindow.cs,CheckForUpdateWindow,The following statement contains a magic number: additionalInfoContainer.Padding = new BorderDouble(left: 6' top: 6);
Magic Number,MatterHackers.MatterControl.AboutPage,CheckForUpdateWindow,C:\repos\MatterHackers_MatterControl\AboutPage\CheckForUpdateWindow.cs,CheckForUpdateWindow,The following statement contains a magic number: additionalInfoContainer.Padding = new BorderDouble(left: 6' top: 6);
Magic Number,MatterHackers.MatterControl.AboutPage,CheckForUpdateWindow,C:\repos\MatterHackers_MatterControl\AboutPage\CheckForUpdateWindow.cs,CheckForUpdateWindow,The following statement contains a magic number: updateChannelLabel.Margin = new BorderDouble(bottom: 20);
Magic Number,MatterHackers.MatterControl.AboutPage,CheckForUpdateWindow,C:\repos\MatterHackers_MatterControl\AboutPage\CheckForUpdateWindow.cs,CheckForUpdateWindow,The following statement contains a magic number: stableInfoLabel.Margin = new BorderDouble(bottom:10);
Magic Number,MatterHackers.MatterControl.AboutPage,CheckForUpdateWindow,C:\repos\MatterHackers_MatterControl\AboutPage\CheckForUpdateWindow.cs,CheckForUpdateWindow,The following statement contains a magic number: betaInfoLabel.Margin = new BorderDouble(bottom: 10);
Magic Number,MatterHackers.MatterControl.AboutPage,CheckForUpdateWindow,C:\repos\MatterHackers_MatterControl\AboutPage\CheckForUpdateWindow.cs,CheckForUpdateWindow,The following statement contains a magic number: alphaInfoLabel.Margin = new BorderDouble(bottom: 10);
Magic Number,MatterHackers.MatterControl.AboutPage,CheckForUpdateWindow,C:\repos\MatterHackers_MatterControl\AboutPage\CheckForUpdateWindow.cs,CheckForUpdateWindow,The following statement contains a magic number: whatsThisLink.Margin = new BorderDouble(left: 6);
Magic Number,MatterHackers.MatterControl.ActionBar,TouchScreenPrintStatusRow,C:\repos\MatterHackers_MatterControl\ActionBar\TouchScreenPrintStatusRow.cs,TouchScreenPrintStatusRow,The following statement contains a magic number: this.Padding = new BorderDouble(0' 0' 6' 6);
Magic Number,MatterHackers.MatterControl.ActionBar,TouchScreenPrintStatusRow,C:\repos\MatterHackers_MatterControl\ActionBar\TouchScreenPrintStatusRow.cs,TouchScreenPrintStatusRow,The following statement contains a magic number: this.Padding = new BorderDouble(0' 0' 6' 6);
Magic Number,MatterHackers.MatterControl.ActionBar,TouchScreenPrintStatusRow,C:\repos\MatterHackers_MatterControl\ActionBar\TouchScreenPrintStatusRow.cs,TouchScreenPrintStatusRow,The following statement contains a magic number: this.Margin = new BorderDouble(6' 3' 0' 0);
Magic Number,MatterHackers.MatterControl.ActionBar,TouchScreenPrintStatusRow,C:\repos\MatterHackers_MatterControl\ActionBar\TouchScreenPrintStatusRow.cs,TouchScreenPrintStatusRow,The following statement contains a magic number: this.Margin = new BorderDouble(6' 3' 0' 0);
Magic Number,MatterHackers.MatterControl.ActionBar,TouchScreenPrintStatusRow,C:\repos\MatterHackers_MatterControl\ActionBar\TouchScreenPrintStatusRow.cs,OnMouseUp,The following statement contains a magic number: int boxSize = 20;
Magic Number,MatterHackers.MatterControl.ActionBar,TouchScreenPrintStatusRow,C:\repos\MatterHackers_MatterControl\ActionBar\TouchScreenPrintStatusRow.cs,AddChildElements,The following statement contains a magic number: tempWidgets.Width = 120;
Magic Number,MatterHackers.MatterControl.ActionBar,TouchScreenPrintStatusRow,C:\repos\MatterHackers_MatterControl\ActionBar\TouchScreenPrintStatusRow.cs,AddChildElements,The following statement contains a magic number: tempWidgets.AddChild(new GuiWidget(6' 6));
Magic Number,MatterHackers.MatterControl.ActionBar,TouchScreenPrintStatusRow,C:\repos\MatterHackers_MatterControl\ActionBar\TouchScreenPrintStatusRow.cs,AddChildElements,The following statement contains a magic number: tempWidgets.AddChild(new GuiWidget(6' 6));
Magic Number,MatterHackers.MatterControl.ActionBar,TouchScreenPrintStatusRow,C:\repos\MatterHackers_MatterControl\ActionBar\TouchScreenPrintStatusRow.cs,AddChildElements,The following statement contains a magic number: tempWidgets.AddChild(new GuiWidget(6' 6));
Magic Number,MatterHackers.MatterControl.ActionBar,TouchScreenPrintStatusRow,C:\repos\MatterHackers_MatterControl\ActionBar\TouchScreenPrintStatusRow.cs,AddChildElements,The following statement contains a magic number: tempWidgets.AddChild(new GuiWidget(6' 6));
Magic Number,MatterHackers.MatterControl.ActionBar,TouchScreenPrintStatusRow,C:\repos\MatterHackers_MatterControl\ActionBar\TouchScreenPrintStatusRow.cs,AddChildElements,The following statement contains a magic number: setupButton.Margin = new BorderDouble(left: 6);
Magic Number,MatterHackers.MatterControl.ActionBar,TouchScreenPrintStatusRow,C:\repos\MatterHackers_MatterControl\ActionBar\TouchScreenPrintStatusRow.cs,AddChildElements,The following statement contains a magic number: this.Height = 80;
Magic Number,MatterHackers.MatterControl.ActionBar,TouchScreenPrintStatusRow,C:\repos\MatterHackers_MatterControl\ActionBar\TouchScreenPrintStatusRow.cs,CreateActivePrinterInfoWidget,The following statement contains a magic number: container.Margin = new BorderDouble(6' 0' 6' 0);
Magic Number,MatterHackers.MatterControl.ActionBar,TouchScreenPrintStatusRow,C:\repos\MatterHackers_MatterControl\ActionBar\TouchScreenPrintStatusRow.cs,CreateActivePrinterInfoWidget,The following statement contains a magic number: container.Margin = new BorderDouble(6' 0' 6' 0);
Magic Number,MatterHackers.MatterControl.ActionBar,TouchScreenPrintStatusRow,C:\repos\MatterHackers_MatterControl\ActionBar\TouchScreenPrintStatusRow.cs,CreateActivePrinterInfoWidget,The following statement contains a magic number: container.Height = 80;
Magic Number,MatterHackers.MatterControl.ActionBar,TouchScreenPrintStatusRow,C:\repos\MatterHackers_MatterControl\ActionBar\TouchScreenPrintStatusRow.cs,CreateActivePrinterInfoWidget,The following statement contains a magic number: activePrintLabel = getPrintStatusLabel("Next Print".Localize() + ":"' pointSize: 11);
Magic Number,MatterHackers.MatterControl.ActionBar,TouchScreenPrintStatusRow,C:\repos\MatterHackers_MatterControl\ActionBar\TouchScreenPrintStatusRow.cs,CreateActivePrinterInfoWidget,The following statement contains a magic number: activePrintPreviewImage.BorderWidth = 3;
Magic Number,MatterHackers.MatterControl.ActionBar,TouchScreenPrintStatusRow,C:\repos\MatterHackers_MatterControl\ActionBar\TouchScreenPrintStatusRow.cs,CreateActivePrinterInfoWidget,The following statement contains a magic number: labelContainer.Margin = new BorderDouble(8' 0' 0' 4);
Magic Number,MatterHackers.MatterControl.ActionBar,TouchScreenPrintStatusRow,C:\repos\MatterHackers_MatterControl\ActionBar\TouchScreenPrintStatusRow.cs,CreateActivePrinterInfoWidget,The following statement contains a magic number: labelContainer.Margin = new BorderDouble(8' 0' 0' 4);
Magic Number,MatterHackers.MatterControl.ActionBar,TouchScreenPrintStatusRow,C:\repos\MatterHackers_MatterControl\ActionBar\TouchScreenPrintStatusRow.cs,CreateActivePrinterInfoWidget,The following statement contains a magic number: {  				activePrintName = getPrintStatusLabel("this is the biggest name we will allow"' pointSize: 14);  				activePrintName.AutoExpandBoundsToText = false;    				activePrintStatus = getPrintStatusLabel("this is the biggest label we will allow - bigger"' pointSize: 11);  				activePrintStatus.AutoExpandBoundsToText = false;  				activePrintStatus.Text = "";  				activePrintStatus.Margin = new BorderDouble(top: 3);    				labelContainer.AddChild(activePrintName);  				labelContainer.AddChild(activePrintStatus);  			}
Magic Number,MatterHackers.MatterControl.ActionBar,TouchScreenPrintStatusRow,C:\repos\MatterHackers_MatterControl\ActionBar\TouchScreenPrintStatusRow.cs,CreateActivePrinterInfoWidget,The following statement contains a magic number: {  				activePrintName = getPrintStatusLabel("this is the biggest name we will allow"' pointSize: 14);  				activePrintName.AutoExpandBoundsToText = false;    				activePrintStatus = getPrintStatusLabel("this is the biggest label we will allow - bigger"' pointSize: 11);  				activePrintStatus.AutoExpandBoundsToText = false;  				activePrintStatus.Text = "";  				activePrintStatus.Margin = new BorderDouble(top: 3);    				labelContainer.AddChild(activePrintName);  				labelContainer.AddChild(activePrintStatus);  			}
Magic Number,MatterHackers.MatterControl.ActionBar,TouchScreenPrintStatusRow,C:\repos\MatterHackers_MatterControl\ActionBar\TouchScreenPrintStatusRow.cs,CreateActivePrinterInfoWidget,The following statement contains a magic number: {  				activePrintName = getPrintStatusLabel("this is the biggest name we will allow"' pointSize: 14);  				activePrintName.AutoExpandBoundsToText = false;    				activePrintStatus = getPrintStatusLabel("this is the biggest label we will allow - bigger"' pointSize: 11);  				activePrintStatus.AutoExpandBoundsToText = false;  				activePrintStatus.Text = "";  				activePrintStatus.Margin = new BorderDouble(top: 3);    				labelContainer.AddChild(activePrintName);  				labelContainer.AddChild(activePrintStatus);  			}
Magic Number,MatterHackers.MatterControl.ActionBar,TouchScreenPrintStatusRow,C:\repos\MatterHackers_MatterControl\ActionBar\TouchScreenPrintStatusRow.cs,GetAutoLevelIndicator,The following statement contains a magic number: autoLevelButton.Margin = new Agg.BorderDouble(top: 3);
Magic Number,MatterHackers.MatterControl.ActionBar,TouchScreenPrintStatusRow,C:\repos\MatterHackers_MatterControl\ActionBar\TouchScreenPrintStatusRow.cs,UpdatePrintStatus,The following statement contains a magic number: if (PrinterConnectionAndCommunication.Instance.ActivePrintItem != null)  			{  				int totalSecondsInPrint = PrinterConnectionAndCommunication.Instance.TotalSecondsInPrint;    				int totalHoursInPrint = (int)(totalSecondsInPrint / (60 * 60));  				int totalMinutesInPrint = (int)(totalSecondsInPrint / 60 - totalHoursInPrint * 60);  				totalSecondsInPrint = totalSecondsInPrint % 60;    				string estimatedTimeLabel = "Est. Print Time".Localize();  				string calculatingLabel = "Calculating...".Localize();  				string totalPrintTimeText;    				if (totalSecondsInPrint > 0)  				{  					if (totalHoursInPrint > 0)  					{  						totalPrintTimeText = $"{estimatedTimeLabel}: {totalHoursInPrint}h {totalMinutesInPrint:00}m {totalSecondsInPrint:00}s";  					}  					else  					{  						totalPrintTimeText = $"{estimatedTimeLabel}: {totalMinutesInPrint}m {totalSecondsInPrint:00}s";  					}  				}  				else  				{  					if (totalSecondsInPrint < 0)  					{  						totalPrintTimeText = "Streaming GCode...".Localize();  					}  					else  					{  						totalPrintTimeText = $"{estimatedTimeLabel}: {calculatingLabel}";  					}  				}    				activePrintLabel.Text = "Next Print".Localize() + ":";    				switch (PrinterConnectionAndCommunication.Instance.CommunicationState)  				{  					case PrinterConnectionAndCommunication.CommunicationStates.PreparingToPrint:  						activePrintLabel.Text = "Preparing To Print".Localize() + ":";  						break;    					case PrinterConnectionAndCommunication.CommunicationStates.Printing:  						activePrintLabel.Text = PrinterConnectionAndCommunication.Instance.PrintingStateString;  						activePrintStatus.Text = totalPrintTimeText;  						break;    					case PrinterConnectionAndCommunication.CommunicationStates.Paused:  						activePrintLabel.Text = "Printing Paused".Localize() + ":";  						activePrintStatus.Text = totalPrintTimeText;  						break;    					case PrinterConnectionAndCommunication.CommunicationStates.FinishedPrint:  						activePrintLabel.Text = "Done Printing".Localize() + ":";  						activePrintStatus.Text = totalPrintTimeText;  						break;    					case PrinterConnectionAndCommunication.CommunicationStates.Disconnected:  						activePrintStatus.Text = "Not connected. Press 'Connect' to enable printing.".Localize();  						break;    					case PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect:  						activePrintStatus.Text = "Attempting to Connect".Localize() + "...";  						break;    					case PrinterConnectionAndCommunication.CommunicationStates.ConnectionLost:  					case PrinterConnectionAndCommunication.CommunicationStates.FailedToConnect:  						activePrintStatus.Text = "Connection Failed".Localize() + ": " + PrinterConnectionAndCommunication.Instance.ConnectionFailureMessage;  						break;    					default:  						activePrintStatus.Text = ActiveSliceSettings.Instance.PrinterSelected ? "" : "Select a Printer.".Localize();  						break;  				}  			}  			else  			{  				activePrintLabel.Text = "Next Print".Localize() + ":";  				activePrintStatus.Text = "Press 'Add' to choose an item to print".Localize();  			}
Magic Number,MatterHackers.MatterControl.ActionBar,TouchScreenPrintStatusRow,C:\repos\MatterHackers_MatterControl\ActionBar\TouchScreenPrintStatusRow.cs,UpdatePrintStatus,The following statement contains a magic number: if (PrinterConnectionAndCommunication.Instance.ActivePrintItem != null)  			{  				int totalSecondsInPrint = PrinterConnectionAndCommunication.Instance.TotalSecondsInPrint;    				int totalHoursInPrint = (int)(totalSecondsInPrint / (60 * 60));  				int totalMinutesInPrint = (int)(totalSecondsInPrint / 60 - totalHoursInPrint * 60);  				totalSecondsInPrint = totalSecondsInPrint % 60;    				string estimatedTimeLabel = "Est. Print Time".Localize();  				string calculatingLabel = "Calculating...".Localize();  				string totalPrintTimeText;    				if (totalSecondsInPrint > 0)  				{  					if (totalHoursInPrint > 0)  					{  						totalPrintTimeText = $"{estimatedTimeLabel}: {totalHoursInPrint}h {totalMinutesInPrint:00}m {totalSecondsInPrint:00}s";  					}  					else  					{  						totalPrintTimeText = $"{estimatedTimeLabel}: {totalMinutesInPrint}m {totalSecondsInPrint:00}s";  					}  				}  				else  				{  					if (totalSecondsInPrint < 0)  					{  						totalPrintTimeText = "Streaming GCode...".Localize();  					}  					else  					{  						totalPrintTimeText = $"{estimatedTimeLabel}: {calculatingLabel}";  					}  				}    				activePrintLabel.Text = "Next Print".Localize() + ":";    				switch (PrinterConnectionAndCommunication.Instance.CommunicationState)  				{  					case PrinterConnectionAndCommunication.CommunicationStates.PreparingToPrint:  						activePrintLabel.Text = "Preparing To Print".Localize() + ":";  						break;    					case PrinterConnectionAndCommunication.CommunicationStates.Printing:  						activePrintLabel.Text = PrinterConnectionAndCommunication.Instance.PrintingStateString;  						activePrintStatus.Text = totalPrintTimeText;  						break;    					case PrinterConnectionAndCommunication.CommunicationStates.Paused:  						activePrintLabel.Text = "Printing Paused".Localize() + ":";  						activePrintStatus.Text = totalPrintTimeText;  						break;    					case PrinterConnectionAndCommunication.CommunicationStates.FinishedPrint:  						activePrintLabel.Text = "Done Printing".Localize() + ":";  						activePrintStatus.Text = totalPrintTimeText;  						break;    					case PrinterConnectionAndCommunication.CommunicationStates.Disconnected:  						activePrintStatus.Text = "Not connected. Press 'Connect' to enable printing.".Localize();  						break;    					case PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect:  						activePrintStatus.Text = "Attempting to Connect".Localize() + "...";  						break;    					case PrinterConnectionAndCommunication.CommunicationStates.ConnectionLost:  					case PrinterConnectionAndCommunication.CommunicationStates.FailedToConnect:  						activePrintStatus.Text = "Connection Failed".Localize() + ": " + PrinterConnectionAndCommunication.Instance.ConnectionFailureMessage;  						break;    					default:  						activePrintStatus.Text = ActiveSliceSettings.Instance.PrinterSelected ? "" : "Select a Printer.".Localize();  						break;  				}  			}  			else  			{  				activePrintLabel.Text = "Next Print".Localize() + ":";  				activePrintStatus.Text = "Press 'Add' to choose an item to print".Localize();  			}
Magic Number,MatterHackers.MatterControl.ActionBar,TouchScreenPrintStatusRow,C:\repos\MatterHackers_MatterControl\ActionBar\TouchScreenPrintStatusRow.cs,UpdatePrintStatus,The following statement contains a magic number: if (PrinterConnectionAndCommunication.Instance.ActivePrintItem != null)  			{  				int totalSecondsInPrint = PrinterConnectionAndCommunication.Instance.TotalSecondsInPrint;    				int totalHoursInPrint = (int)(totalSecondsInPrint / (60 * 60));  				int totalMinutesInPrint = (int)(totalSecondsInPrint / 60 - totalHoursInPrint * 60);  				totalSecondsInPrint = totalSecondsInPrint % 60;    				string estimatedTimeLabel = "Est. Print Time".Localize();  				string calculatingLabel = "Calculating...".Localize();  				string totalPrintTimeText;    				if (totalSecondsInPrint > 0)  				{  					if (totalHoursInPrint > 0)  					{  						totalPrintTimeText = $"{estimatedTimeLabel}: {totalHoursInPrint}h {totalMinutesInPrint:00}m {totalSecondsInPrint:00}s";  					}  					else  					{  						totalPrintTimeText = $"{estimatedTimeLabel}: {totalMinutesInPrint}m {totalSecondsInPrint:00}s";  					}  				}  				else  				{  					if (totalSecondsInPrint < 0)  					{  						totalPrintTimeText = "Streaming GCode...".Localize();  					}  					else  					{  						totalPrintTimeText = $"{estimatedTimeLabel}: {calculatingLabel}";  					}  				}    				activePrintLabel.Text = "Next Print".Localize() + ":";    				switch (PrinterConnectionAndCommunication.Instance.CommunicationState)  				{  					case PrinterConnectionAndCommunication.CommunicationStates.PreparingToPrint:  						activePrintLabel.Text = "Preparing To Print".Localize() + ":";  						break;    					case PrinterConnectionAndCommunication.CommunicationStates.Printing:  						activePrintLabel.Text = PrinterConnectionAndCommunication.Instance.PrintingStateString;  						activePrintStatus.Text = totalPrintTimeText;  						break;    					case PrinterConnectionAndCommunication.CommunicationStates.Paused:  						activePrintLabel.Text = "Printing Paused".Localize() + ":";  						activePrintStatus.Text = totalPrintTimeText;  						break;    					case PrinterConnectionAndCommunication.CommunicationStates.FinishedPrint:  						activePrintLabel.Text = "Done Printing".Localize() + ":";  						activePrintStatus.Text = totalPrintTimeText;  						break;    					case PrinterConnectionAndCommunication.CommunicationStates.Disconnected:  						activePrintStatus.Text = "Not connected. Press 'Connect' to enable printing.".Localize();  						break;    					case PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect:  						activePrintStatus.Text = "Attempting to Connect".Localize() + "...";  						break;    					case PrinterConnectionAndCommunication.CommunicationStates.ConnectionLost:  					case PrinterConnectionAndCommunication.CommunicationStates.FailedToConnect:  						activePrintStatus.Text = "Connection Failed".Localize() + ": " + PrinterConnectionAndCommunication.Instance.ConnectionFailureMessage;  						break;    					default:  						activePrintStatus.Text = ActiveSliceSettings.Instance.PrinterSelected ? "" : "Select a Printer.".Localize();  						break;  				}  			}  			else  			{  				activePrintLabel.Text = "Next Print".Localize() + ":";  				activePrintStatus.Text = "Press 'Add' to choose an item to print".Localize();  			}
Magic Number,MatterHackers.MatterControl.ActionBar,TouchScreenPrintStatusRow,C:\repos\MatterHackers_MatterControl\ActionBar\TouchScreenPrintStatusRow.cs,UpdatePrintStatus,The following statement contains a magic number: if (PrinterConnectionAndCommunication.Instance.ActivePrintItem != null)  			{  				int totalSecondsInPrint = PrinterConnectionAndCommunication.Instance.TotalSecondsInPrint;    				int totalHoursInPrint = (int)(totalSecondsInPrint / (60 * 60));  				int totalMinutesInPrint = (int)(totalSecondsInPrint / 60 - totalHoursInPrint * 60);  				totalSecondsInPrint = totalSecondsInPrint % 60;    				string estimatedTimeLabel = "Est. Print Time".Localize();  				string calculatingLabel = "Calculating...".Localize();  				string totalPrintTimeText;    				if (totalSecondsInPrint > 0)  				{  					if (totalHoursInPrint > 0)  					{  						totalPrintTimeText = $"{estimatedTimeLabel}: {totalHoursInPrint}h {totalMinutesInPrint:00}m {totalSecondsInPrint:00}s";  					}  					else  					{  						totalPrintTimeText = $"{estimatedTimeLabel}: {totalMinutesInPrint}m {totalSecondsInPrint:00}s";  					}  				}  				else  				{  					if (totalSecondsInPrint < 0)  					{  						totalPrintTimeText = "Streaming GCode...".Localize();  					}  					else  					{  						totalPrintTimeText = $"{estimatedTimeLabel}: {calculatingLabel}";  					}  				}    				activePrintLabel.Text = "Next Print".Localize() + ":";    				switch (PrinterConnectionAndCommunication.Instance.CommunicationState)  				{  					case PrinterConnectionAndCommunication.CommunicationStates.PreparingToPrint:  						activePrintLabel.Text = "Preparing To Print".Localize() + ":";  						break;    					case PrinterConnectionAndCommunication.CommunicationStates.Printing:  						activePrintLabel.Text = PrinterConnectionAndCommunication.Instance.PrintingStateString;  						activePrintStatus.Text = totalPrintTimeText;  						break;    					case PrinterConnectionAndCommunication.CommunicationStates.Paused:  						activePrintLabel.Text = "Printing Paused".Localize() + ":";  						activePrintStatus.Text = totalPrintTimeText;  						break;    					case PrinterConnectionAndCommunication.CommunicationStates.FinishedPrint:  						activePrintLabel.Text = "Done Printing".Localize() + ":";  						activePrintStatus.Text = totalPrintTimeText;  						break;    					case PrinterConnectionAndCommunication.CommunicationStates.Disconnected:  						activePrintStatus.Text = "Not connected. Press 'Connect' to enable printing.".Localize();  						break;    					case PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect:  						activePrintStatus.Text = "Attempting to Connect".Localize() + "...";  						break;    					case PrinterConnectionAndCommunication.CommunicationStates.ConnectionLost:  					case PrinterConnectionAndCommunication.CommunicationStates.FailedToConnect:  						activePrintStatus.Text = "Connection Failed".Localize() + ": " + PrinterConnectionAndCommunication.Instance.ConnectionFailureMessage;  						break;    					default:  						activePrintStatus.Text = ActiveSliceSettings.Instance.PrinterSelected ? "" : "Select a Printer.".Localize();  						break;  				}  			}  			else  			{  				activePrintLabel.Text = "Next Print".Localize() + ":";  				activePrintStatus.Text = "Press 'Add' to choose an item to print".Localize();  			}
Magic Number,MatterHackers.MatterControl.ActionBar,TouchScreenPrintStatusRow,C:\repos\MatterHackers_MatterControl\ActionBar\TouchScreenPrintStatusRow.cs,UpdatePrintStatus,The following statement contains a magic number: if (PrinterConnectionAndCommunication.Instance.ActivePrintItem != null)  			{  				int totalSecondsInPrint = PrinterConnectionAndCommunication.Instance.TotalSecondsInPrint;    				int totalHoursInPrint = (int)(totalSecondsInPrint / (60 * 60));  				int totalMinutesInPrint = (int)(totalSecondsInPrint / 60 - totalHoursInPrint * 60);  				totalSecondsInPrint = totalSecondsInPrint % 60;    				string estimatedTimeLabel = "Est. Print Time".Localize();  				string calculatingLabel = "Calculating...".Localize();  				string totalPrintTimeText;    				if (totalSecondsInPrint > 0)  				{  					if (totalHoursInPrint > 0)  					{  						totalPrintTimeText = $"{estimatedTimeLabel}: {totalHoursInPrint}h {totalMinutesInPrint:00}m {totalSecondsInPrint:00}s";  					}  					else  					{  						totalPrintTimeText = $"{estimatedTimeLabel}: {totalMinutesInPrint}m {totalSecondsInPrint:00}s";  					}  				}  				else  				{  					if (totalSecondsInPrint < 0)  					{  						totalPrintTimeText = "Streaming GCode...".Localize();  					}  					else  					{  						totalPrintTimeText = $"{estimatedTimeLabel}: {calculatingLabel}";  					}  				}    				activePrintLabel.Text = "Next Print".Localize() + ":";    				switch (PrinterConnectionAndCommunication.Instance.CommunicationState)  				{  					case PrinterConnectionAndCommunication.CommunicationStates.PreparingToPrint:  						activePrintLabel.Text = "Preparing To Print".Localize() + ":";  						break;    					case PrinterConnectionAndCommunication.CommunicationStates.Printing:  						activePrintLabel.Text = PrinterConnectionAndCommunication.Instance.PrintingStateString;  						activePrintStatus.Text = totalPrintTimeText;  						break;    					case PrinterConnectionAndCommunication.CommunicationStates.Paused:  						activePrintLabel.Text = "Printing Paused".Localize() + ":";  						activePrintStatus.Text = totalPrintTimeText;  						break;    					case PrinterConnectionAndCommunication.CommunicationStates.FinishedPrint:  						activePrintLabel.Text = "Done Printing".Localize() + ":";  						activePrintStatus.Text = totalPrintTimeText;  						break;    					case PrinterConnectionAndCommunication.CommunicationStates.Disconnected:  						activePrintStatus.Text = "Not connected. Press 'Connect' to enable printing.".Localize();  						break;    					case PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect:  						activePrintStatus.Text = "Attempting to Connect".Localize() + "...";  						break;    					case PrinterConnectionAndCommunication.CommunicationStates.ConnectionLost:  					case PrinterConnectionAndCommunication.CommunicationStates.FailedToConnect:  						activePrintStatus.Text = "Connection Failed".Localize() + ": " + PrinterConnectionAndCommunication.Instance.ConnectionFailureMessage;  						break;    					default:  						activePrintStatus.Text = ActiveSliceSettings.Instance.PrinterSelected ? "" : "Select a Printer.".Localize();  						break;  				}  			}  			else  			{  				activePrintLabel.Text = "Next Print".Localize() + ":";  				activePrintStatus.Text = "Press 'Add' to choose an item to print".Localize();  			}
Magic Number,MatterHackers.MatterControl.ActionBar,TemperatureWidgetBed,C:\repos\MatterHackers_MatterControl\ActionBar\TemperatureWidgetBed.cs,DisplayCurrentTemperature,The following statement contains a magic number: if (PrinterConnectionAndCommunication.Instance.TargetBedTemperature > 0)  			{  				if ((int)(PrinterConnectionAndCommunication.Instance.TargetBedTemperature + 0.5) < (int)(PrinterConnectionAndCommunication.Instance.ActualBedTemperature + 0.5))  				{  					tempDirectionIndicator = "↓";  				}  				else if ((int)(PrinterConnectionAndCommunication.Instance.TargetBedTemperature + 0.5) > (int)(PrinterConnectionAndCommunication.Instance.ActualBedTemperature + 0.5))  				{  					tempDirectionIndicator = "↑";  				}  			}
Magic Number,MatterHackers.MatterControl.ActionBar,TemperatureWidgetBed,C:\repos\MatterHackers_MatterControl\ActionBar\TemperatureWidgetBed.cs,DisplayCurrentTemperature,The following statement contains a magic number: if (PrinterConnectionAndCommunication.Instance.TargetBedTemperature > 0)  			{  				if ((int)(PrinterConnectionAndCommunication.Instance.TargetBedTemperature + 0.5) < (int)(PrinterConnectionAndCommunication.Instance.ActualBedTemperature + 0.5))  				{  					tempDirectionIndicator = "↓";  				}  				else if ((int)(PrinterConnectionAndCommunication.Instance.TargetBedTemperature + 0.5) > (int)(PrinterConnectionAndCommunication.Instance.ActualBedTemperature + 0.5))  				{  					tempDirectionIndicator = "↑";  				}  			}
Magic Number,MatterHackers.MatterControl.ActionBar,TemperatureWidgetBed,C:\repos\MatterHackers_MatterControl\ActionBar\TemperatureWidgetBed.cs,DisplayCurrentTemperature,The following statement contains a magic number: if (PrinterConnectionAndCommunication.Instance.TargetBedTemperature > 0)  			{  				if ((int)(PrinterConnectionAndCommunication.Instance.TargetBedTemperature + 0.5) < (int)(PrinterConnectionAndCommunication.Instance.ActualBedTemperature + 0.5))  				{  					tempDirectionIndicator = "↓";  				}  				else if ((int)(PrinterConnectionAndCommunication.Instance.TargetBedTemperature + 0.5) > (int)(PrinterConnectionAndCommunication.Instance.ActualBedTemperature + 0.5))  				{  					tempDirectionIndicator = "↑";  				}  			}
Magic Number,MatterHackers.MatterControl.ActionBar,TemperatureWidgetBed,C:\repos\MatterHackers_MatterControl\ActionBar\TemperatureWidgetBed.cs,DisplayCurrentTemperature,The following statement contains a magic number: if (PrinterConnectionAndCommunication.Instance.TargetBedTemperature > 0)  			{  				if ((int)(PrinterConnectionAndCommunication.Instance.TargetBedTemperature + 0.5) < (int)(PrinterConnectionAndCommunication.Instance.ActualBedTemperature + 0.5))  				{  					tempDirectionIndicator = "↓";  				}  				else if ((int)(PrinterConnectionAndCommunication.Instance.TargetBedTemperature + 0.5) > (int)(PrinterConnectionAndCommunication.Instance.ActualBedTemperature + 0.5))  				{  					tempDirectionIndicator = "↑";  				}  			}
Magic Number,MatterHackers.MatterControl.ActionBar,TemperatureWidgetBed,C:\repos\MatterHackers_MatterControl\ActionBar\TemperatureWidgetBed.cs,SetTargetTemperature,The following statement contains a magic number: if (targetTemp != 0)  			{  				double goalTemp = (int)(targetTemp + .5);  				if (PrinterConnectionAndCommunication.Instance.PrinterIsPrinting  					&& PrinterConnectionAndCommunication.Instance.PrintingState == PrinterConnectionAndCommunication.DetailedPrintingState.HeatingBed  					&& goalTemp != PrinterConnectionAndCommunication.Instance.TargetBedTemperature)  				{  					string message = string.Format(waitingForBedToHeatMessage' PrinterConnectionAndCommunication.Instance.TargetBedTemperature' sliceSettingsNote);  					StyledMessageBox.ShowMessageBox(null' message' waitingForBedToHeatTitle);  				}  				else  				{  					PrinterConnectionAndCommunication.Instance.TargetBedTemperature = (int)(targetTemp + .5);  				}  			}
Magic Number,MatterHackers.MatterControl.ActionBar,TemperatureWidgetBed,C:\repos\MatterHackers_MatterControl\ActionBar\TemperatureWidgetBed.cs,SetTargetTemperature,The following statement contains a magic number: if (targetTemp != 0)  			{  				double goalTemp = (int)(targetTemp + .5);  				if (PrinterConnectionAndCommunication.Instance.PrinterIsPrinting  					&& PrinterConnectionAndCommunication.Instance.PrintingState == PrinterConnectionAndCommunication.DetailedPrintingState.HeatingBed  					&& goalTemp != PrinterConnectionAndCommunication.Instance.TargetBedTemperature)  				{  					string message = string.Format(waitingForBedToHeatMessage' PrinterConnectionAndCommunication.Instance.TargetBedTemperature' sliceSettingsNote);  					StyledMessageBox.ShowMessageBox(null' message' waitingForBedToHeatTitle);  				}  				else  				{  					PrinterConnectionAndCommunication.Instance.TargetBedTemperature = (int)(targetTemp + .5);  				}  			}
Magic Number,MatterHackers.MatterControl.ActionBar,PrintActionRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintActionRow.cs,PrintActionRow,The following statement contains a magic number: textImageButtonFactory = new TextImageButtonFactory()  			{  				normalTextColor = RGBA_Bytes.White'  				disabledTextColor = RGBA_Bytes.LightGray'  				hoverTextColor = RGBA_Bytes.White'  				pressedTextColor = RGBA_Bytes.White'  				AllowThemeToAdjustImage = false'  				borderWidth = 1'  				FixedHeight = 52 * GuiWidget.DeviceScale'  				fontSize = 14'  				normalBorderColor = new RGBA_Bytes(255' 255' 255' 100)'  				hoverBorderColor = new RGBA_Bytes(255' 255' 255' 100)  			};
Magic Number,MatterHackers.MatterControl.ActionBar,PrintActionRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintActionRow.cs,PrintActionRow,The following statement contains a magic number: textImageButtonFactory = new TextImageButtonFactory()  			{  				normalTextColor = RGBA_Bytes.White'  				disabledTextColor = RGBA_Bytes.LightGray'  				hoverTextColor = RGBA_Bytes.White'  				pressedTextColor = RGBA_Bytes.White'  				AllowThemeToAdjustImage = false'  				borderWidth = 1'  				FixedHeight = 52 * GuiWidget.DeviceScale'  				fontSize = 14'  				normalBorderColor = new RGBA_Bytes(255' 255' 255' 100)'  				hoverBorderColor = new RGBA_Bytes(255' 255' 255' 100)  			};
Magic Number,MatterHackers.MatterControl.ActionBar,PrintActionRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintActionRow.cs,PrintActionRow,The following statement contains a magic number: textImageButtonFactory = new TextImageButtonFactory()  			{  				normalTextColor = RGBA_Bytes.White'  				disabledTextColor = RGBA_Bytes.LightGray'  				hoverTextColor = RGBA_Bytes.White'  				pressedTextColor = RGBA_Bytes.White'  				AllowThemeToAdjustImage = false'  				borderWidth = 1'  				FixedHeight = 52 * GuiWidget.DeviceScale'  				fontSize = 14'  				normalBorderColor = new RGBA_Bytes(255' 255' 255' 100)'  				hoverBorderColor = new RGBA_Bytes(255' 255' 255' 100)  			};
Magic Number,MatterHackers.MatterControl.ActionBar,PrintActionRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintActionRow.cs,PrintActionRow,The following statement contains a magic number: textImageButtonFactory = new TextImageButtonFactory()  			{  				normalTextColor = RGBA_Bytes.White'  				disabledTextColor = RGBA_Bytes.LightGray'  				hoverTextColor = RGBA_Bytes.White'  				pressedTextColor = RGBA_Bytes.White'  				AllowThemeToAdjustImage = false'  				borderWidth = 1'  				FixedHeight = 52 * GuiWidget.DeviceScale'  				fontSize = 14'  				normalBorderColor = new RGBA_Bytes(255' 255' 255' 100)'  				hoverBorderColor = new RGBA_Bytes(255' 255' 255' 100)  			};
Magic Number,MatterHackers.MatterControl.ActionBar,PrintActionRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintActionRow.cs,PrintActionRow,The following statement contains a magic number: textImageButtonFactory = new TextImageButtonFactory()  			{  				normalTextColor = RGBA_Bytes.White'  				disabledTextColor = RGBA_Bytes.LightGray'  				hoverTextColor = RGBA_Bytes.White'  				pressedTextColor = RGBA_Bytes.White'  				AllowThemeToAdjustImage = false'  				borderWidth = 1'  				FixedHeight = 52 * GuiWidget.DeviceScale'  				fontSize = 14'  				normalBorderColor = new RGBA_Bytes(255' 255' 255' 100)'  				hoverBorderColor = new RGBA_Bytes(255' 255' 255' 100)  			};
Magic Number,MatterHackers.MatterControl.ActionBar,PrintActionRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintActionRow.cs,PrintActionRow,The following statement contains a magic number: textImageButtonFactory = new TextImageButtonFactory()  			{  				normalTextColor = RGBA_Bytes.White'  				disabledTextColor = RGBA_Bytes.LightGray'  				hoverTextColor = RGBA_Bytes.White'  				pressedTextColor = RGBA_Bytes.White'  				AllowThemeToAdjustImage = false'  				borderWidth = 1'  				FixedHeight = 52 * GuiWidget.DeviceScale'  				fontSize = 14'  				normalBorderColor = new RGBA_Bytes(255' 255' 255' 100)'  				hoverBorderColor = new RGBA_Bytes(255' 255' 255' 100)  			};
Magic Number,MatterHackers.MatterControl.ActionBar,PrintActionRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintActionRow.cs,PrintActionRow,The following statement contains a magic number: textImageButtonFactory = new TextImageButtonFactory()  			{  				normalTextColor = RGBA_Bytes.White'  				disabledTextColor = RGBA_Bytes.LightGray'  				hoverTextColor = RGBA_Bytes.White'  				pressedTextColor = RGBA_Bytes.White'  				AllowThemeToAdjustImage = false'  				borderWidth = 1'  				FixedHeight = 52 * GuiWidget.DeviceScale'  				fontSize = 14'  				normalBorderColor = new RGBA_Bytes(255' 255' 255' 100)'  				hoverBorderColor = new RGBA_Bytes(255' 255' 255' 100)  			};
Magic Number,MatterHackers.MatterControl.ActionBar,PrintActionRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintActionRow.cs,PrintActionRow,The following statement contains a magic number: textImageButtonFactory = new TextImageButtonFactory()  			{  				normalTextColor = RGBA_Bytes.White'  				disabledTextColor = RGBA_Bytes.LightGray'  				hoverTextColor = RGBA_Bytes.White'  				pressedTextColor = RGBA_Bytes.White'  				AllowThemeToAdjustImage = false'  				borderWidth = 1'  				FixedHeight = 52 * GuiWidget.DeviceScale'  				fontSize = 14'  				normalBorderColor = new RGBA_Bytes(255' 255' 255' 100)'  				hoverBorderColor = new RGBA_Bytes(255' 255' 255' 100)  			};
Magic Number,MatterHackers.MatterControl.ActionBar,PrintActionRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintActionRow.cs,PrintActionRow,The following statement contains a magic number: textImageButtonFactory = new TextImageButtonFactory()  			{  				normalTextColor = RGBA_Bytes.White'  				disabledTextColor = RGBA_Bytes.LightGray'  				hoverTextColor = RGBA_Bytes.White'  				pressedTextColor = RGBA_Bytes.White'  				AllowThemeToAdjustImage = false'  				borderWidth = 1'  				FixedHeight = 52 * GuiWidget.DeviceScale'  				fontSize = 14'  				normalBorderColor = new RGBA_Bytes(255' 255' 255' 100)'  				hoverBorderColor = new RGBA_Bytes(255' 255' 255' 100)  			};
Magic Number,MatterHackers.MatterControl.ActionBar,PrintActionRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintActionRow.cs,PrintActionRow,The following statement contains a magic number: textImageButtonFactory = new TextImageButtonFactory()  			{  				normalTextColor = RGBA_Bytes.White'  				disabledTextColor = RGBA_Bytes.LightGray'  				hoverTextColor = RGBA_Bytes.White'  				pressedTextColor = RGBA_Bytes.White'  				AllowThemeToAdjustImage = false'  				borderWidth = 1'  				FixedHeight = 52 * GuiWidget.DeviceScale'  				fontSize = 14'  				normalBorderColor = new RGBA_Bytes(255' 255' 255' 100)'  				hoverBorderColor = new RGBA_Bytes(255' 255' 255' 100)  			};
Magic Number,MatterHackers.MatterControl.ActionBar,PrintActionRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintActionRow.cs,AddChildElements,The following statement contains a magic number: addButton = textImageButtonFactory.GenerateTooltipButton("Add".Localize()' StaticData.Instance.LoadIcon("icon_circle_plus.png"'32'32).InvertLightness());
Magic Number,MatterHackers.MatterControl.ActionBar,PrintActionRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintActionRow.cs,AddChildElements,The following statement contains a magic number: addButton = textImageButtonFactory.GenerateTooltipButton("Add".Localize()' StaticData.Instance.LoadIcon("icon_circle_plus.png"'32'32).InvertLightness());
Magic Number,MatterHackers.MatterControl.ActionBar,PrintActionRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintActionRow.cs,AddChildElements,The following statement contains a magic number: addButton.Margin = new BorderDouble(6' 6' 6' 3);
Magic Number,MatterHackers.MatterControl.ActionBar,PrintActionRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintActionRow.cs,AddChildElements,The following statement contains a magic number: addButton.Margin = new BorderDouble(6' 6' 6' 3);
Magic Number,MatterHackers.MatterControl.ActionBar,PrintActionRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintActionRow.cs,AddChildElements,The following statement contains a magic number: addButton.Margin = new BorderDouble(6' 6' 6' 3);
Magic Number,MatterHackers.MatterControl.ActionBar,PrintActionRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintActionRow.cs,AddChildElements,The following statement contains a magic number: addButton.Margin = new BorderDouble(6' 6' 6' 3);
Magic Number,MatterHackers.MatterControl.ActionBar,PrintActionRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintActionRow.cs,AddChildElements,The following statement contains a magic number: startButton = textImageButtonFactory.GenerateTooltipButton("Print".Localize()' StaticData.Instance.LoadIcon("icon_play_32x32.png"'32'32).InvertLightness());
Magic Number,MatterHackers.MatterControl.ActionBar,PrintActionRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintActionRow.cs,AddChildElements,The following statement contains a magic number: startButton = textImageButtonFactory.GenerateTooltipButton("Print".Localize()' StaticData.Instance.LoadIcon("icon_play_32x32.png"'32'32).InvertLightness());
Magic Number,MatterHackers.MatterControl.ActionBar,PrintActionRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintActionRow.cs,AddChildElements,The following statement contains a magic number: startButton.Margin = new BorderDouble(6' 6' 6' 3);
Magic Number,MatterHackers.MatterControl.ActionBar,PrintActionRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintActionRow.cs,AddChildElements,The following statement contains a magic number: startButton.Margin = new BorderDouble(6' 6' 6' 3);
Magic Number,MatterHackers.MatterControl.ActionBar,PrintActionRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintActionRow.cs,AddChildElements,The following statement contains a magic number: startButton.Margin = new BorderDouble(6' 6' 6' 3);
Magic Number,MatterHackers.MatterControl.ActionBar,PrintActionRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintActionRow.cs,AddChildElements,The following statement contains a magic number: startButton.Margin = new BorderDouble(6' 6' 6' 3);
Magic Number,MatterHackers.MatterControl.ActionBar,PrintActionRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintActionRow.cs,AddChildElements,The following statement contains a magic number: finishSetupButton.Margin = new BorderDouble(6' 6' 6' 3);
Magic Number,MatterHackers.MatterControl.ActionBar,PrintActionRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintActionRow.cs,AddChildElements,The following statement contains a magic number: finishSetupButton.Margin = new BorderDouble(6' 6' 6' 3);
Magic Number,MatterHackers.MatterControl.ActionBar,PrintActionRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintActionRow.cs,AddChildElements,The following statement contains a magic number: finishSetupButton.Margin = new BorderDouble(6' 6' 6' 3);
Magic Number,MatterHackers.MatterControl.ActionBar,PrintActionRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintActionRow.cs,AddChildElements,The following statement contains a magic number: finishSetupButton.Margin = new BorderDouble(6' 6' 6' 3);
Magic Number,MatterHackers.MatterControl.ActionBar,PrintActionRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintActionRow.cs,AddChildElements,The following statement contains a magic number: touchScreenConnectButton = textImageButtonFactory.GenerateTooltipButton("Connect".Localize()' StaticData.Instance.LoadIcon("connect.png"' 32'32).InvertLightness());
Magic Number,MatterHackers.MatterControl.ActionBar,PrintActionRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintActionRow.cs,AddChildElements,The following statement contains a magic number: touchScreenConnectButton = textImageButtonFactory.GenerateTooltipButton("Connect".Localize()' StaticData.Instance.LoadIcon("connect.png"' 32'32).InvertLightness());
Magic Number,MatterHackers.MatterControl.ActionBar,PrintActionRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintActionRow.cs,AddChildElements,The following statement contains a magic number: touchScreenConnectButton.Margin = new BorderDouble(6' 6' 6' 3);
Magic Number,MatterHackers.MatterControl.ActionBar,PrintActionRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintActionRow.cs,AddChildElements,The following statement contains a magic number: touchScreenConnectButton.Margin = new BorderDouble(6' 6' 6' 3);
Magic Number,MatterHackers.MatterControl.ActionBar,PrintActionRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintActionRow.cs,AddChildElements,The following statement contains a magic number: touchScreenConnectButton.Margin = new BorderDouble(6' 6' 6' 3);
Magic Number,MatterHackers.MatterControl.ActionBar,PrintActionRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintActionRow.cs,AddChildElements,The following statement contains a magic number: touchScreenConnectButton.Margin = new BorderDouble(6' 6' 6' 3);
Magic Number,MatterHackers.MatterControl.ActionBar,PrintActionRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintActionRow.cs,AddChildElements,The following statement contains a magic number: addPrinterButton.Margin = new BorderDouble(6' 6' 6' 3);
Magic Number,MatterHackers.MatterControl.ActionBar,PrintActionRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintActionRow.cs,AddChildElements,The following statement contains a magic number: addPrinterButton.Margin = new BorderDouble(6' 6' 6' 3);
Magic Number,MatterHackers.MatterControl.ActionBar,PrintActionRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintActionRow.cs,AddChildElements,The following statement contains a magic number: addPrinterButton.Margin = new BorderDouble(6' 6' 6' 3);
Magic Number,MatterHackers.MatterControl.ActionBar,PrintActionRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintActionRow.cs,AddChildElements,The following statement contains a magic number: addPrinterButton.Margin = new BorderDouble(6' 6' 6' 3);
Magic Number,MatterHackers.MatterControl.ActionBar,PrintActionRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintActionRow.cs,AddChildElements,The following statement contains a magic number: selectPrinterButton.Margin = new BorderDouble(6' 6' 6' 3);
Magic Number,MatterHackers.MatterControl.ActionBar,PrintActionRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintActionRow.cs,AddChildElements,The following statement contains a magic number: selectPrinterButton.Margin = new BorderDouble(6' 6' 6' 3);
Magic Number,MatterHackers.MatterControl.ActionBar,PrintActionRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintActionRow.cs,AddChildElements,The following statement contains a magic number: selectPrinterButton.Margin = new BorderDouble(6' 6' 6' 3);
Magic Number,MatterHackers.MatterControl.ActionBar,PrintActionRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintActionRow.cs,AddChildElements,The following statement contains a magic number: selectPrinterButton.Margin = new BorderDouble(6' 6' 6' 3);
Magic Number,MatterHackers.MatterControl.ActionBar,PrintActionRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintActionRow.cs,AddChildElements,The following statement contains a magic number: resetConnectionButton = textImageButtonFactory.GenerateTooltipButton("Reset".Localize()' StaticData.Instance.LoadIcon("e_stop4.png"' 32'32).InvertLightness());
Magic Number,MatterHackers.MatterControl.ActionBar,PrintActionRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintActionRow.cs,AddChildElements,The following statement contains a magic number: resetConnectionButton = textImageButtonFactory.GenerateTooltipButton("Reset".Localize()' StaticData.Instance.LoadIcon("e_stop4.png"' 32'32).InvertLightness());
Magic Number,MatterHackers.MatterControl.ActionBar,PrintActionRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintActionRow.cs,AddChildElements,The following statement contains a magic number: resetConnectionButton.Margin = new BorderDouble(6' 6' 6' 3);
Magic Number,MatterHackers.MatterControl.ActionBar,PrintActionRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintActionRow.cs,AddChildElements,The following statement contains a magic number: resetConnectionButton.Margin = new BorderDouble(6' 6' 6' 3);
Magic Number,MatterHackers.MatterControl.ActionBar,PrintActionRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintActionRow.cs,AddChildElements,The following statement contains a magic number: resetConnectionButton.Margin = new BorderDouble(6' 6' 6' 3);
Magic Number,MatterHackers.MatterControl.ActionBar,PrintActionRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintActionRow.cs,AddChildElements,The following statement contains a magic number: resetConnectionButton.Margin = new BorderDouble(6' 6' 6' 3);
Magic Number,MatterHackers.MatterControl.ActionBar,PrintActionRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintActionRow.cs,AddChildElements,The following statement contains a magic number: this.Margin = new BorderDouble(0' 0' 10' 0);
Magic Number,MatterHackers.MatterControl.ActionBar,PrintActionRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintActionRow.cs,makeButton,The following statement contains a magic number: button.Margin = new BorderDouble(0' 6' 6' 3);
Magic Number,MatterHackers.MatterControl.ActionBar,PrintActionRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintActionRow.cs,makeButton,The following statement contains a magic number: button.Margin = new BorderDouble(0' 6' 6' 3);
Magic Number,MatterHackers.MatterControl.ActionBar,PrintActionRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintActionRow.cs,makeButton,The following statement contains a magic number: button.Margin = new BorderDouble(0' 6' 6' 3);
Magic Number,MatterHackers.MatterControl.ActionBar,PrinterConnectAndSelectControl,C:\repos\MatterHackers_MatterControl\ActionBar\PrinterConnectAndSelectControl.cs,AddChildElements,The following statement contains a magic number: if (ActiveTheme.Instance.IsDarkTheme)  			{  				actionBarButtonFactory.normalBorderColor = new RGBA_Bytes(77' 77' 77);  			}  			else  			{  				actionBarButtonFactory.normalBorderColor = new RGBA_Bytes(190' 190' 190);  			}
Magic Number,MatterHackers.MatterControl.ActionBar,PrinterConnectAndSelectControl,C:\repos\MatterHackers_MatterControl\ActionBar\PrinterConnectAndSelectControl.cs,AddChildElements,The following statement contains a magic number: if (ActiveTheme.Instance.IsDarkTheme)  			{  				actionBarButtonFactory.normalBorderColor = new RGBA_Bytes(77' 77' 77);  			}  			else  			{  				actionBarButtonFactory.normalBorderColor = new RGBA_Bytes(190' 190' 190);  			}
Magic Number,MatterHackers.MatterControl.ActionBar,PrinterConnectAndSelectControl,C:\repos\MatterHackers_MatterControl\ActionBar\PrinterConnectAndSelectControl.cs,AddChildElements,The following statement contains a magic number: if (ActiveTheme.Instance.IsDarkTheme)  			{  				actionBarButtonFactory.normalBorderColor = new RGBA_Bytes(77' 77' 77);  			}  			else  			{  				actionBarButtonFactory.normalBorderColor = new RGBA_Bytes(190' 190' 190);  			}
Magic Number,MatterHackers.MatterControl.ActionBar,PrinterConnectAndSelectControl,C:\repos\MatterHackers_MatterControl\ActionBar\PrinterConnectAndSelectControl.cs,AddChildElements,The following statement contains a magic number: if (ActiveTheme.Instance.IsDarkTheme)  			{  				actionBarButtonFactory.normalBorderColor = new RGBA_Bytes(77' 77' 77);  			}  			else  			{  				actionBarButtonFactory.normalBorderColor = new RGBA_Bytes(190' 190' 190);  			}
Magic Number,MatterHackers.MatterControl.ActionBar,PrinterConnectAndSelectControl,C:\repos\MatterHackers_MatterControl\ActionBar\PrinterConnectAndSelectControl.cs,AddChildElements,The following statement contains a magic number: if (ActiveTheme.Instance.IsDarkTheme)  			{  				actionBarButtonFactory.normalBorderColor = new RGBA_Bytes(77' 77' 77);  			}  			else  			{  				actionBarButtonFactory.normalBorderColor = new RGBA_Bytes(190' 190' 190);  			}
Magic Number,MatterHackers.MatterControl.ActionBar,PrinterConnectAndSelectControl,C:\repos\MatterHackers_MatterControl\ActionBar\PrinterConnectAndSelectControl.cs,AddChildElements,The following statement contains a magic number: if (ActiveTheme.Instance.IsDarkTheme)  			{  				actionBarButtonFactory.normalBorderColor = new RGBA_Bytes(77' 77' 77);  			}  			else  			{  				actionBarButtonFactory.normalBorderColor = new RGBA_Bytes(190' 190' 190);  			}
Magic Number,MatterHackers.MatterControl.ActionBar,PrinterConnectAndSelectControl,C:\repos\MatterHackers_MatterControl\ActionBar\PrinterConnectAndSelectControl.cs,AddChildElements,The following statement contains a magic number: actionBarButtonFactory.hoverBorderColor = new RGBA_Bytes(128' 128' 128);
Magic Number,MatterHackers.MatterControl.ActionBar,PrinterConnectAndSelectControl,C:\repos\MatterHackers_MatterControl\ActionBar\PrinterConnectAndSelectControl.cs,AddChildElements,The following statement contains a magic number: actionBarButtonFactory.hoverBorderColor = new RGBA_Bytes(128' 128' 128);
Magic Number,MatterHackers.MatterControl.ActionBar,PrinterConnectAndSelectControl,C:\repos\MatterHackers_MatterControl\ActionBar\PrinterConnectAndSelectControl.cs,AddChildElements,The following statement contains a magic number: actionBarButtonFactory.hoverBorderColor = new RGBA_Bytes(128' 128' 128);
Magic Number,MatterHackers.MatterControl.ActionBar,PrinterConnectAndSelectControl,C:\repos\MatterHackers_MatterControl\ActionBar\PrinterConnectAndSelectControl.cs,AddChildElements,The following statement contains a magic number: {  				var normalImage = StaticData.Instance.LoadIcon("connect.png"' 32' 32);    				// Create the image button with the normal and disabled ImageBuffers  				connectPrinterButton = actionBarButtonFactory.Generate("Connect".Localize().ToUpper()' normalImage);  				connectPrinterButton.Name = "Connect to printer button";  				connectPrinterButton.ToolTipText = "Connect to the currently selected printer".Localize();  				connectPrinterButton.Margin = new BorderDouble(6' 0' 3' 3);    				connectPrinterButton.VAnchor = VAnchor.ParentTop;  				connectPrinterButton.Cursor = Cursors.Hand;  				connectPrinterButton.Click += (s' e) =>  				{  					Button buttonClicked = ((Button)s);  					if (buttonClicked.Enabled)  					{  						if (ActiveSliceSettings.Instance.PrinterSelected)  						{  							UserRequestedConnectToActivePrinter();  						}  					}  				};    				disconnectPrinterButton = actionBarButtonFactory.Generate("Disconnect".Localize().ToUpper()' StaticData.Instance.LoadIcon("connect.png"' 32' 32));  				disconnectPrinterButton.Name = "Disconnect from printer button";  				disconnectPrinterButton.ToolTipText = "Disconnect from current printer".Localize();  				disconnectPrinterButton.Margin = new BorderDouble(6' 0' 3' 3);  				disconnectPrinterButton.VAnchor = VAnchor.ParentTop;  				disconnectPrinterButton.Cursor = Cursors.Hand;  				disconnectPrinterButton.Click += (s' e) => UiThread.RunOnIdle(OnIdleDisconnect);    				actionBarButtonFactory.invertImageLocation = true;    				this.AddChild(connectPrinterButton);  				this.AddChild(disconnectPrinterButton);  			}
Magic Number,MatterHackers.MatterControl.ActionBar,PrinterConnectAndSelectControl,C:\repos\MatterHackers_MatterControl\ActionBar\PrinterConnectAndSelectControl.cs,AddChildElements,The following statement contains a magic number: {  				var normalImage = StaticData.Instance.LoadIcon("connect.png"' 32' 32);    				// Create the image button with the normal and disabled ImageBuffers  				connectPrinterButton = actionBarButtonFactory.Generate("Connect".Localize().ToUpper()' normalImage);  				connectPrinterButton.Name = "Connect to printer button";  				connectPrinterButton.ToolTipText = "Connect to the currently selected printer".Localize();  				connectPrinterButton.Margin = new BorderDouble(6' 0' 3' 3);    				connectPrinterButton.VAnchor = VAnchor.ParentTop;  				connectPrinterButton.Cursor = Cursors.Hand;  				connectPrinterButton.Click += (s' e) =>  				{  					Button buttonClicked = ((Button)s);  					if (buttonClicked.Enabled)  					{  						if (ActiveSliceSettings.Instance.PrinterSelected)  						{  							UserRequestedConnectToActivePrinter();  						}  					}  				};    				disconnectPrinterButton = actionBarButtonFactory.Generate("Disconnect".Localize().ToUpper()' StaticData.Instance.LoadIcon("connect.png"' 32' 32));  				disconnectPrinterButton.Name = "Disconnect from printer button";  				disconnectPrinterButton.ToolTipText = "Disconnect from current printer".Localize();  				disconnectPrinterButton.Margin = new BorderDouble(6' 0' 3' 3);  				disconnectPrinterButton.VAnchor = VAnchor.ParentTop;  				disconnectPrinterButton.Cursor = Cursors.Hand;  				disconnectPrinterButton.Click += (s' e) => UiThread.RunOnIdle(OnIdleDisconnect);    				actionBarButtonFactory.invertImageLocation = true;    				this.AddChild(connectPrinterButton);  				this.AddChild(disconnectPrinterButton);  			}
Magic Number,MatterHackers.MatterControl.ActionBar,PrinterConnectAndSelectControl,C:\repos\MatterHackers_MatterControl\ActionBar\PrinterConnectAndSelectControl.cs,AddChildElements,The following statement contains a magic number: {  				var normalImage = StaticData.Instance.LoadIcon("connect.png"' 32' 32);    				// Create the image button with the normal and disabled ImageBuffers  				connectPrinterButton = actionBarButtonFactory.Generate("Connect".Localize().ToUpper()' normalImage);  				connectPrinterButton.Name = "Connect to printer button";  				connectPrinterButton.ToolTipText = "Connect to the currently selected printer".Localize();  				connectPrinterButton.Margin = new BorderDouble(6' 0' 3' 3);    				connectPrinterButton.VAnchor = VAnchor.ParentTop;  				connectPrinterButton.Cursor = Cursors.Hand;  				connectPrinterButton.Click += (s' e) =>  				{  					Button buttonClicked = ((Button)s);  					if (buttonClicked.Enabled)  					{  						if (ActiveSliceSettings.Instance.PrinterSelected)  						{  							UserRequestedConnectToActivePrinter();  						}  					}  				};    				disconnectPrinterButton = actionBarButtonFactory.Generate("Disconnect".Localize().ToUpper()' StaticData.Instance.LoadIcon("connect.png"' 32' 32));  				disconnectPrinterButton.Name = "Disconnect from printer button";  				disconnectPrinterButton.ToolTipText = "Disconnect from current printer".Localize();  				disconnectPrinterButton.Margin = new BorderDouble(6' 0' 3' 3);  				disconnectPrinterButton.VAnchor = VAnchor.ParentTop;  				disconnectPrinterButton.Cursor = Cursors.Hand;  				disconnectPrinterButton.Click += (s' e) => UiThread.RunOnIdle(OnIdleDisconnect);    				actionBarButtonFactory.invertImageLocation = true;    				this.AddChild(connectPrinterButton);  				this.AddChild(disconnectPrinterButton);  			}
Magic Number,MatterHackers.MatterControl.ActionBar,PrinterConnectAndSelectControl,C:\repos\MatterHackers_MatterControl\ActionBar\PrinterConnectAndSelectControl.cs,AddChildElements,The following statement contains a magic number: {  				var normalImage = StaticData.Instance.LoadIcon("connect.png"' 32' 32);    				// Create the image button with the normal and disabled ImageBuffers  				connectPrinterButton = actionBarButtonFactory.Generate("Connect".Localize().ToUpper()' normalImage);  				connectPrinterButton.Name = "Connect to printer button";  				connectPrinterButton.ToolTipText = "Connect to the currently selected printer".Localize();  				connectPrinterButton.Margin = new BorderDouble(6' 0' 3' 3);    				connectPrinterButton.VAnchor = VAnchor.ParentTop;  				connectPrinterButton.Cursor = Cursors.Hand;  				connectPrinterButton.Click += (s' e) =>  				{  					Button buttonClicked = ((Button)s);  					if (buttonClicked.Enabled)  					{  						if (ActiveSliceSettings.Instance.PrinterSelected)  						{  							UserRequestedConnectToActivePrinter();  						}  					}  				};    				disconnectPrinterButton = actionBarButtonFactory.Generate("Disconnect".Localize().ToUpper()' StaticData.Instance.LoadIcon("connect.png"' 32' 32));  				disconnectPrinterButton.Name = "Disconnect from printer button";  				disconnectPrinterButton.ToolTipText = "Disconnect from current printer".Localize();  				disconnectPrinterButton.Margin = new BorderDouble(6' 0' 3' 3);  				disconnectPrinterButton.VAnchor = VAnchor.ParentTop;  				disconnectPrinterButton.Cursor = Cursors.Hand;  				disconnectPrinterButton.Click += (s' e) => UiThread.RunOnIdle(OnIdleDisconnect);    				actionBarButtonFactory.invertImageLocation = true;    				this.AddChild(connectPrinterButton);  				this.AddChild(disconnectPrinterButton);  			}
Magic Number,MatterHackers.MatterControl.ActionBar,PrinterConnectAndSelectControl,C:\repos\MatterHackers_MatterControl\ActionBar\PrinterConnectAndSelectControl.cs,AddChildElements,The following statement contains a magic number: {  				var normalImage = StaticData.Instance.LoadIcon("connect.png"' 32' 32);    				// Create the image button with the normal and disabled ImageBuffers  				connectPrinterButton = actionBarButtonFactory.Generate("Connect".Localize().ToUpper()' normalImage);  				connectPrinterButton.Name = "Connect to printer button";  				connectPrinterButton.ToolTipText = "Connect to the currently selected printer".Localize();  				connectPrinterButton.Margin = new BorderDouble(6' 0' 3' 3);    				connectPrinterButton.VAnchor = VAnchor.ParentTop;  				connectPrinterButton.Cursor = Cursors.Hand;  				connectPrinterButton.Click += (s' e) =>  				{  					Button buttonClicked = ((Button)s);  					if (buttonClicked.Enabled)  					{  						if (ActiveSliceSettings.Instance.PrinterSelected)  						{  							UserRequestedConnectToActivePrinter();  						}  					}  				};    				disconnectPrinterButton = actionBarButtonFactory.Generate("Disconnect".Localize().ToUpper()' StaticData.Instance.LoadIcon("connect.png"' 32' 32));  				disconnectPrinterButton.Name = "Disconnect from printer button";  				disconnectPrinterButton.ToolTipText = "Disconnect from current printer".Localize();  				disconnectPrinterButton.Margin = new BorderDouble(6' 0' 3' 3);  				disconnectPrinterButton.VAnchor = VAnchor.ParentTop;  				disconnectPrinterButton.Cursor = Cursors.Hand;  				disconnectPrinterButton.Click += (s' e) => UiThread.RunOnIdle(OnIdleDisconnect);    				actionBarButtonFactory.invertImageLocation = true;    				this.AddChild(connectPrinterButton);  				this.AddChild(disconnectPrinterButton);  			}
Magic Number,MatterHackers.MatterControl.ActionBar,PrinterConnectAndSelectControl,C:\repos\MatterHackers_MatterControl\ActionBar\PrinterConnectAndSelectControl.cs,AddChildElements,The following statement contains a magic number: {  				var normalImage = StaticData.Instance.LoadIcon("connect.png"' 32' 32);    				// Create the image button with the normal and disabled ImageBuffers  				connectPrinterButton = actionBarButtonFactory.Generate("Connect".Localize().ToUpper()' normalImage);  				connectPrinterButton.Name = "Connect to printer button";  				connectPrinterButton.ToolTipText = "Connect to the currently selected printer".Localize();  				connectPrinterButton.Margin = new BorderDouble(6' 0' 3' 3);    				connectPrinterButton.VAnchor = VAnchor.ParentTop;  				connectPrinterButton.Cursor = Cursors.Hand;  				connectPrinterButton.Click += (s' e) =>  				{  					Button buttonClicked = ((Button)s);  					if (buttonClicked.Enabled)  					{  						if (ActiveSliceSettings.Instance.PrinterSelected)  						{  							UserRequestedConnectToActivePrinter();  						}  					}  				};    				disconnectPrinterButton = actionBarButtonFactory.Generate("Disconnect".Localize().ToUpper()' StaticData.Instance.LoadIcon("connect.png"' 32' 32));  				disconnectPrinterButton.Name = "Disconnect from printer button";  				disconnectPrinterButton.ToolTipText = "Disconnect from current printer".Localize();  				disconnectPrinterButton.Margin = new BorderDouble(6' 0' 3' 3);  				disconnectPrinterButton.VAnchor = VAnchor.ParentTop;  				disconnectPrinterButton.Cursor = Cursors.Hand;  				disconnectPrinterButton.Click += (s' e) => UiThread.RunOnIdle(OnIdleDisconnect);    				actionBarButtonFactory.invertImageLocation = true;    				this.AddChild(connectPrinterButton);  				this.AddChild(disconnectPrinterButton);  			}
Magic Number,MatterHackers.MatterControl.ActionBar,PrinterConnectAndSelectControl,C:\repos\MatterHackers_MatterControl\ActionBar\PrinterConnectAndSelectControl.cs,AddChildElements,The following statement contains a magic number: {  				var normalImage = StaticData.Instance.LoadIcon("connect.png"' 32' 32);    				// Create the image button with the normal and disabled ImageBuffers  				connectPrinterButton = actionBarButtonFactory.Generate("Connect".Localize().ToUpper()' normalImage);  				connectPrinterButton.Name = "Connect to printer button";  				connectPrinterButton.ToolTipText = "Connect to the currently selected printer".Localize();  				connectPrinterButton.Margin = new BorderDouble(6' 0' 3' 3);    				connectPrinterButton.VAnchor = VAnchor.ParentTop;  				connectPrinterButton.Cursor = Cursors.Hand;  				connectPrinterButton.Click += (s' e) =>  				{  					Button buttonClicked = ((Button)s);  					if (buttonClicked.Enabled)  					{  						if (ActiveSliceSettings.Instance.PrinterSelected)  						{  							UserRequestedConnectToActivePrinter();  						}  					}  				};    				disconnectPrinterButton = actionBarButtonFactory.Generate("Disconnect".Localize().ToUpper()' StaticData.Instance.LoadIcon("connect.png"' 32' 32));  				disconnectPrinterButton.Name = "Disconnect from printer button";  				disconnectPrinterButton.ToolTipText = "Disconnect from current printer".Localize();  				disconnectPrinterButton.Margin = new BorderDouble(6' 0' 3' 3);  				disconnectPrinterButton.VAnchor = VAnchor.ParentTop;  				disconnectPrinterButton.Cursor = Cursors.Hand;  				disconnectPrinterButton.Click += (s' e) => UiThread.RunOnIdle(OnIdleDisconnect);    				actionBarButtonFactory.invertImageLocation = true;    				this.AddChild(connectPrinterButton);  				this.AddChild(disconnectPrinterButton);  			}
Magic Number,MatterHackers.MatterControl.ActionBar,PrinterConnectAndSelectControl,C:\repos\MatterHackers_MatterControl\ActionBar\PrinterConnectAndSelectControl.cs,AddChildElements,The following statement contains a magic number: {  				var normalImage = StaticData.Instance.LoadIcon("connect.png"' 32' 32);    				// Create the image button with the normal and disabled ImageBuffers  				connectPrinterButton = actionBarButtonFactory.Generate("Connect".Localize().ToUpper()' normalImage);  				connectPrinterButton.Name = "Connect to printer button";  				connectPrinterButton.ToolTipText = "Connect to the currently selected printer".Localize();  				connectPrinterButton.Margin = new BorderDouble(6' 0' 3' 3);    				connectPrinterButton.VAnchor = VAnchor.ParentTop;  				connectPrinterButton.Cursor = Cursors.Hand;  				connectPrinterButton.Click += (s' e) =>  				{  					Button buttonClicked = ((Button)s);  					if (buttonClicked.Enabled)  					{  						if (ActiveSliceSettings.Instance.PrinterSelected)  						{  							UserRequestedConnectToActivePrinter();  						}  					}  				};    				disconnectPrinterButton = actionBarButtonFactory.Generate("Disconnect".Localize().ToUpper()' StaticData.Instance.LoadIcon("connect.png"' 32' 32));  				disconnectPrinterButton.Name = "Disconnect from printer button";  				disconnectPrinterButton.ToolTipText = "Disconnect from current printer".Localize();  				disconnectPrinterButton.Margin = new BorderDouble(6' 0' 3' 3);  				disconnectPrinterButton.VAnchor = VAnchor.ParentTop;  				disconnectPrinterButton.Cursor = Cursors.Hand;  				disconnectPrinterButton.Click += (s' e) => UiThread.RunOnIdle(OnIdleDisconnect);    				actionBarButtonFactory.invertImageLocation = true;    				this.AddChild(connectPrinterButton);  				this.AddChild(disconnectPrinterButton);  			}
Magic Number,MatterHackers.MatterControl.ActionBar,PrinterConnectAndSelectControl,C:\repos\MatterHackers_MatterControl\ActionBar\PrinterConnectAndSelectControl.cs,AddChildElements,The following statement contains a magic number: {  				var normalImage = StaticData.Instance.LoadIcon("connect.png"' 32' 32);    				// Create the image button with the normal and disabled ImageBuffers  				connectPrinterButton = actionBarButtonFactory.Generate("Connect".Localize().ToUpper()' normalImage);  				connectPrinterButton.Name = "Connect to printer button";  				connectPrinterButton.ToolTipText = "Connect to the currently selected printer".Localize();  				connectPrinterButton.Margin = new BorderDouble(6' 0' 3' 3);    				connectPrinterButton.VAnchor = VAnchor.ParentTop;  				connectPrinterButton.Cursor = Cursors.Hand;  				connectPrinterButton.Click += (s' e) =>  				{  					Button buttonClicked = ((Button)s);  					if (buttonClicked.Enabled)  					{  						if (ActiveSliceSettings.Instance.PrinterSelected)  						{  							UserRequestedConnectToActivePrinter();  						}  					}  				};    				disconnectPrinterButton = actionBarButtonFactory.Generate("Disconnect".Localize().ToUpper()' StaticData.Instance.LoadIcon("connect.png"' 32' 32));  				disconnectPrinterButton.Name = "Disconnect from printer button";  				disconnectPrinterButton.ToolTipText = "Disconnect from current printer".Localize();  				disconnectPrinterButton.Margin = new BorderDouble(6' 0' 3' 3);  				disconnectPrinterButton.VAnchor = VAnchor.ParentTop;  				disconnectPrinterButton.Cursor = Cursors.Hand;  				disconnectPrinterButton.Click += (s' e) => UiThread.RunOnIdle(OnIdleDisconnect);    				actionBarButtonFactory.invertImageLocation = true;    				this.AddChild(connectPrinterButton);  				this.AddChild(disconnectPrinterButton);  			}
Magic Number,MatterHackers.MatterControl.ActionBar,PrinterConnectAndSelectControl,C:\repos\MatterHackers_MatterControl\ActionBar\PrinterConnectAndSelectControl.cs,AddChildElements,The following statement contains a magic number: {  				var normalImage = StaticData.Instance.LoadIcon("connect.png"' 32' 32);    				// Create the image button with the normal and disabled ImageBuffers  				connectPrinterButton = actionBarButtonFactory.Generate("Connect".Localize().ToUpper()' normalImage);  				connectPrinterButton.Name = "Connect to printer button";  				connectPrinterButton.ToolTipText = "Connect to the currently selected printer".Localize();  				connectPrinterButton.Margin = new BorderDouble(6' 0' 3' 3);    				connectPrinterButton.VAnchor = VAnchor.ParentTop;  				connectPrinterButton.Cursor = Cursors.Hand;  				connectPrinterButton.Click += (s' e) =>  				{  					Button buttonClicked = ((Button)s);  					if (buttonClicked.Enabled)  					{  						if (ActiveSliceSettings.Instance.PrinterSelected)  						{  							UserRequestedConnectToActivePrinter();  						}  					}  				};    				disconnectPrinterButton = actionBarButtonFactory.Generate("Disconnect".Localize().ToUpper()' StaticData.Instance.LoadIcon("connect.png"' 32' 32));  				disconnectPrinterButton.Name = "Disconnect from printer button";  				disconnectPrinterButton.ToolTipText = "Disconnect from current printer".Localize();  				disconnectPrinterButton.Margin = new BorderDouble(6' 0' 3' 3);  				disconnectPrinterButton.VAnchor = VAnchor.ParentTop;  				disconnectPrinterButton.Cursor = Cursors.Hand;  				disconnectPrinterButton.Click += (s' e) => UiThread.RunOnIdle(OnIdleDisconnect);    				actionBarButtonFactory.invertImageLocation = true;    				this.AddChild(connectPrinterButton);  				this.AddChild(disconnectPrinterButton);  			}
Magic Number,MatterHackers.MatterControl.ActionBar,PrinterConnectAndSelectControl,C:\repos\MatterHackers_MatterControl\ActionBar\PrinterConnectAndSelectControl.cs,AddChildElements,The following statement contains a magic number: {  				GuiWidget container = new GuiWidget()  				{  					HAnchor = HAnchor.ParentLeftRight'  					VAnchor = VAnchor.FitToChildren'  				};    				FlowLayoutWidget printerSelectorAndEditButton = new FlowLayoutWidget()  				{  					HAnchor = HAnchor.ParentLeftRight'  				};    				printerSelector = new PrinterSelector()  				{  					HAnchor = HAnchor.ParentLeftRight'  					Cursor = Cursors.Hand'  					Margin = new BorderDouble(0' 6' 0' 3)  				};  				printerSelector.AddPrinter += (s' e) => WizardWindow.ShowPrinterSetup(true);  				// make sure the control can get smaller but maintains its height  				printerSelector.MinimumSize = new Vector2(0' connectPrinterButton.MinimumSize.y);  				printerSelectorAndEditButton.AddChild(printerSelector);    				editPrinterButton = TextImageButtonFactory.GetThemedEditButton();  				editPrinterButton.Name = "Edit Printer Button";  				editPrinterButton.VAnchor = VAnchor.ParentCenter;  				editPrinterButton.Click += UiNavigation.OpenEditPrinterWizard_Click;  				printerSelectorAndEditButton.AddChild(editPrinterButton);    				container.AddChild(printerSelectorAndEditButton);  				printerSelectorAndEditOverlay = new GuiWidget()  				{  					HAnchor = HAnchor.ParentLeftRight'  					VAnchor = VAnchor.ParentBottomTop'  					Selectable = false'  				};  				container.AddChild(printerSelectorAndEditOverlay);    				this.AddChild(container);  			}
Magic Number,MatterHackers.MatterControl.ActionBar,PrinterConnectAndSelectControl,C:\repos\MatterHackers_MatterControl\ActionBar\PrinterConnectAndSelectControl.cs,AddChildElements,The following statement contains a magic number: {  				GuiWidget container = new GuiWidget()  				{  					HAnchor = HAnchor.ParentLeftRight'  					VAnchor = VAnchor.FitToChildren'  				};    				FlowLayoutWidget printerSelectorAndEditButton = new FlowLayoutWidget()  				{  					HAnchor = HAnchor.ParentLeftRight'  				};    				printerSelector = new PrinterSelector()  				{  					HAnchor = HAnchor.ParentLeftRight'  					Cursor = Cursors.Hand'  					Margin = new BorderDouble(0' 6' 0' 3)  				};  				printerSelector.AddPrinter += (s' e) => WizardWindow.ShowPrinterSetup(true);  				// make sure the control can get smaller but maintains its height  				printerSelector.MinimumSize = new Vector2(0' connectPrinterButton.MinimumSize.y);  				printerSelectorAndEditButton.AddChild(printerSelector);    				editPrinterButton = TextImageButtonFactory.GetThemedEditButton();  				editPrinterButton.Name = "Edit Printer Button";  				editPrinterButton.VAnchor = VAnchor.ParentCenter;  				editPrinterButton.Click += UiNavigation.OpenEditPrinterWizard_Click;  				printerSelectorAndEditButton.AddChild(editPrinterButton);    				container.AddChild(printerSelectorAndEditButton);  				printerSelectorAndEditOverlay = new GuiWidget()  				{  					HAnchor = HAnchor.ParentLeftRight'  					VAnchor = VAnchor.ParentBottomTop'  					Selectable = false'  				};  				container.AddChild(printerSelectorAndEditOverlay);    				this.AddChild(container);  			}
Magic Number,MatterHackers.MatterControl.ActionBar,PrinterConnectAndSelectControl,C:\repos\MatterHackers_MatterControl\ActionBar\PrinterConnectAndSelectControl.cs,AddChildElements,The following statement contains a magic number: {  				string resetConnectionText = "Reset\nConnection".Localize().ToUpper();  				Button resetConnectionButton = actionBarButtonFactory.Generate(resetConnectionText' "e_stop4.png");  				resetConnectionButton.Margin = new BorderDouble(6' 0' 3' 3);  				this.AddChild(resetConnectionButton);    				resetConnectionButton.Click += (s' e) =>   				{  					UiThread.RunOnIdle(PrinterConnectionAndCommunication.Instance.RebootBoard);  				};  				resetConnectionButton.Visible = ActiveSliceSettings.Instance.GetValue<bool>(SettingsKey.show_reset_connection);    				ActiveSliceSettings.SettingChanged.RegisterEvent((sender' e) =>   				{  					StringEventArgs stringEvent = e as StringEventArgs;  					if (stringEvent != null)  					{  						if (stringEvent.Data == SettingsKey.show_reset_connection)  						{  							resetConnectionButton.Visible = ActiveSliceSettings.Instance.GetValue<bool>(SettingsKey.show_reset_connection);  						}  					}  				}' ref unregisterEvents);  			}
Magic Number,MatterHackers.MatterControl.ActionBar,PrinterConnectAndSelectControl,C:\repos\MatterHackers_MatterControl\ActionBar\PrinterConnectAndSelectControl.cs,AddChildElements,The following statement contains a magic number: {  				string resetConnectionText = "Reset\nConnection".Localize().ToUpper();  				Button resetConnectionButton = actionBarButtonFactory.Generate(resetConnectionText' "e_stop4.png");  				resetConnectionButton.Margin = new BorderDouble(6' 0' 3' 3);  				this.AddChild(resetConnectionButton);    				resetConnectionButton.Click += (s' e) =>   				{  					UiThread.RunOnIdle(PrinterConnectionAndCommunication.Instance.RebootBoard);  				};  				resetConnectionButton.Visible = ActiveSliceSettings.Instance.GetValue<bool>(SettingsKey.show_reset_connection);    				ActiveSliceSettings.SettingChanged.RegisterEvent((sender' e) =>   				{  					StringEventArgs stringEvent = e as StringEventArgs;  					if (stringEvent != null)  					{  						if (stringEvent.Data == SettingsKey.show_reset_connection)  						{  							resetConnectionButton.Visible = ActiveSliceSettings.Instance.GetValue<bool>(SettingsKey.show_reset_connection);  						}  					}  				}' ref unregisterEvents);  			}
Magic Number,MatterHackers.MatterControl.ActionBar,PrinterConnectAndSelectControl,C:\repos\MatterHackers_MatterControl\ActionBar\PrinterConnectAndSelectControl.cs,AddChildElements,The following statement contains a magic number: {  				string resetConnectionText = "Reset\nConnection".Localize().ToUpper();  				Button resetConnectionButton = actionBarButtonFactory.Generate(resetConnectionText' "e_stop4.png");  				resetConnectionButton.Margin = new BorderDouble(6' 0' 3' 3);  				this.AddChild(resetConnectionButton);    				resetConnectionButton.Click += (s' e) =>   				{  					UiThread.RunOnIdle(PrinterConnectionAndCommunication.Instance.RebootBoard);  				};  				resetConnectionButton.Visible = ActiveSliceSettings.Instance.GetValue<bool>(SettingsKey.show_reset_connection);    				ActiveSliceSettings.SettingChanged.RegisterEvent((sender' e) =>   				{  					StringEventArgs stringEvent = e as StringEventArgs;  					if (stringEvent != null)  					{  						if (stringEvent.Data == SettingsKey.show_reset_connection)  						{  							resetConnectionButton.Visible = ActiveSliceSettings.Instance.GetValue<bool>(SettingsKey.show_reset_connection);  						}  					}  				}' ref unregisterEvents);  			}
Magic Number,MatterHackers.MatterControl.ActionBar,PrinterConnectAndSelectControl,C:\repos\MatterHackers_MatterControl\ActionBar\PrinterConnectAndSelectControl.cs,SetConnectionButtonVisibleState,The following statement contains a magic number: if(printerIsPrintigOrPause)  			{  				printerSelectorAndEditOverlay.BackgroundColor = new RGBA_Bytes(ActiveTheme.Instance.PrimaryBackgroundColor' 150);  			}  			else  			{  				printerSelectorAndEditOverlay.BackgroundColor = new RGBA_Bytes(0' 0' 0' 0);  			}
Magic Number,MatterHackers.MatterControl.ActionBar,PrintStatusRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintStatusRow.cs,PrintStatusRow,The following statement contains a magic number: this.Margin = new BorderDouble(6' 3' 6' 6);
Magic Number,MatterHackers.MatterControl.ActionBar,PrintStatusRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintStatusRow.cs,PrintStatusRow,The following statement contains a magic number: this.Margin = new BorderDouble(6' 3' 6' 6);
Magic Number,MatterHackers.MatterControl.ActionBar,PrintStatusRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintStatusRow.cs,PrintStatusRow,The following statement contains a magic number: this.Margin = new BorderDouble(6' 3' 6' 6);
Magic Number,MatterHackers.MatterControl.ActionBar,PrintStatusRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintStatusRow.cs,PrintStatusRow,The following statement contains a magic number: this.Margin = new BorderDouble(6' 3' 6' 6);
Magic Number,MatterHackers.MatterControl.ActionBar,PrintStatusRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintStatusRow.cs,AddChildElements,The following statement contains a magic number: activePrintPreviewImage.BorderWidth = 3;
Magic Number,MatterHackers.MatterControl.ActionBar,PrintStatusRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintStatusRow.cs,AddChildElements,The following statement contains a magic number: temperatureWidgets.Margin = new BorderDouble(left: 6);
Magic Number,MatterHackers.MatterControl.ActionBar,PrintStatusRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintStatusRow.cs,AddChildElements,The following statement contains a magic number: iconContainer.Margin = new BorderDouble(top: 3);
Magic Number,MatterHackers.MatterControl.ActionBar,PrintStatusRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintStatusRow.cs,CreateActivePrinterInfoWidget,The following statement contains a magic number: container.Margin = new BorderDouble(6' 0' 6' 0);
Magic Number,MatterHackers.MatterControl.ActionBar,PrintStatusRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintStatusRow.cs,CreateActivePrinterInfoWidget,The following statement contains a magic number: container.Margin = new BorderDouble(6' 0' 6' 0);
Magic Number,MatterHackers.MatterControl.ActionBar,PrintStatusRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintStatusRow.cs,CreateActivePrinterInfoWidget,The following statement contains a magic number: activePrintLabel = getPrintStatusLabel("Next Print".Localize() + ":"' pointSize: 11);
Magic Number,MatterHackers.MatterControl.ActionBar,PrintStatusRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintStatusRow.cs,CreateActivePrinterInfoWidget,The following statement contains a magic number: activePrintName = getPrintStatusLabel("this is the biggest name we will allow"' pointSize: 14);
Magic Number,MatterHackers.MatterControl.ActionBar,PrintStatusRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintStatusRow.cs,CreateActivePrinterInfoWidget,The following statement contains a magic number: activePrintStatus = getPrintStatusLabel("this is the biggest label we will allow - bigger"' pointSize: 11);
Magic Number,MatterHackers.MatterControl.ActionBar,PrintStatusRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintStatusRow.cs,CreateActivePrinterInfoWidget,The following statement contains a magic number: activePrintStatus.Margin = new BorderDouble(top: 3);
Magic Number,MatterHackers.MatterControl.ActionBar,PrintStatusRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintStatusRow.cs,GetAutoLevelIndicator,The following statement contains a magic number: ImageBuffer levelingImage = StaticData.Instance.LoadIcon("leveling_32x32.png"' 16' 16).InvertLightness();
Magic Number,MatterHackers.MatterControl.ActionBar,PrintStatusRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintStatusRow.cs,GetAutoLevelIndicator,The following statement contains a magic number: ImageBuffer levelingImage = StaticData.Instance.LoadIcon("leveling_32x32.png"' 16' 16).InvertLightness();
Magic Number,MatterHackers.MatterControl.ActionBar,PrintStatusRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintStatusRow.cs,GetAutoLevelIndicator,The following statement contains a magic number: autoLevelButton.Margin = new Agg.BorderDouble(top: 3);
Magic Number,MatterHackers.MatterControl.ActionBar,PrintStatusRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintStatusRow.cs,UpdatePrintStatus,The following statement contains a magic number: if (PrinterConnectionAndCommunication.Instance.ActivePrintItem != null)  			{  				int totalSecondsInPrint = PrinterConnectionAndCommunication.Instance.TotalSecondsInPrint;    				int totalHoursInPrint = (int)(totalSecondsInPrint / (60 * 60));  				int totalMinutesInPrint = (int)(totalSecondsInPrint / 60 - totalHoursInPrint * 60);  				totalSecondsInPrint = totalSecondsInPrint % 60;    				string estimatedTimeLabel = "Estimated Print Time".Localize();  				string calculatingLabel = "Calculating...".Localize();  				string totalPrintTimeText;    				if (totalSecondsInPrint > 0)  				{  					if (totalHoursInPrint > 0)  					{  						totalPrintTimeText = $"{estimatedTimeLabel}: {totalHoursInPrint}h {totalMinutesInPrint:00}m {totalSecondsInPrint:00}s";  					}  					else  					{  						totalPrintTimeText = $"{estimatedTimeLabel}: {totalMinutesInPrint}m {totalSecondsInPrint:00}s";  					}  				}  				else  				{  					if (totalSecondsInPrint < 0)  					{  						totalPrintTimeText = "Streaming GCode...".Localize();  					}  					else  					{  						totalPrintTimeText = $"{estimatedTimeLabel}: {calculatingLabel}";  					}  				}    				switch (PrinterConnectionAndCommunication.Instance.CommunicationState)  				{  					case PrinterConnectionAndCommunication.CommunicationStates.PreparingToPrint:  						printLabel = "Preparing To Print".Localize() + ":";  						break;    					case PrinterConnectionAndCommunication.CommunicationStates.Printing:  						printLabel = PrinterConnectionAndCommunication.Instance.PrintingStateString;  						printerStatus = totalPrintTimeText;  						break;    					case PrinterConnectionAndCommunication.CommunicationStates.Paused:  						printLabel = "Printing Paused".Localize() + ":";  						printerStatus = totalPrintTimeText;  						break;    					case PrinterConnectionAndCommunication.CommunicationStates.FinishedPrint:  						printLabel = "Done Printing".Localize() + ":";  						printerStatus = totalPrintTimeText;  						break;    					case PrinterConnectionAndCommunication.CommunicationStates.Disconnected:  						printerStatus = "Not connected. Press 'Connect' to enable printing.".Localize();  						break;    					case PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect:  						printerStatus = "Attempting to Connect".Localize() + "...";  						break;    					case PrinterConnectionAndCommunication.CommunicationStates.ConnectionLost:  					case PrinterConnectionAndCommunication.CommunicationStates.FailedToConnect:  						printerStatus = "Connection Failed".Localize() + ": " + PrinterConnectionAndCommunication.Instance.ConnectionFailureMessage;  						break;    					default:  						printerStatus = ActiveSliceSettings.Instance.PrinterSelected ? "" : "Select a Printer.".Localize();  						break;  				}  			}  			else  			{  				printLabel = "Next Print".Localize() + ":";  				printerStatus = "Press 'Add' to choose an item to print".Localize();  			}
Magic Number,MatterHackers.MatterControl.ActionBar,PrintStatusRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintStatusRow.cs,UpdatePrintStatus,The following statement contains a magic number: if (PrinterConnectionAndCommunication.Instance.ActivePrintItem != null)  			{  				int totalSecondsInPrint = PrinterConnectionAndCommunication.Instance.TotalSecondsInPrint;    				int totalHoursInPrint = (int)(totalSecondsInPrint / (60 * 60));  				int totalMinutesInPrint = (int)(totalSecondsInPrint / 60 - totalHoursInPrint * 60);  				totalSecondsInPrint = totalSecondsInPrint % 60;    				string estimatedTimeLabel = "Estimated Print Time".Localize();  				string calculatingLabel = "Calculating...".Localize();  				string totalPrintTimeText;    				if (totalSecondsInPrint > 0)  				{  					if (totalHoursInPrint > 0)  					{  						totalPrintTimeText = $"{estimatedTimeLabel}: {totalHoursInPrint}h {totalMinutesInPrint:00}m {totalSecondsInPrint:00}s";  					}  					else  					{  						totalPrintTimeText = $"{estimatedTimeLabel}: {totalMinutesInPrint}m {totalSecondsInPrint:00}s";  					}  				}  				else  				{  					if (totalSecondsInPrint < 0)  					{  						totalPrintTimeText = "Streaming GCode...".Localize();  					}  					else  					{  						totalPrintTimeText = $"{estimatedTimeLabel}: {calculatingLabel}";  					}  				}    				switch (PrinterConnectionAndCommunication.Instance.CommunicationState)  				{  					case PrinterConnectionAndCommunication.CommunicationStates.PreparingToPrint:  						printLabel = "Preparing To Print".Localize() + ":";  						break;    					case PrinterConnectionAndCommunication.CommunicationStates.Printing:  						printLabel = PrinterConnectionAndCommunication.Instance.PrintingStateString;  						printerStatus = totalPrintTimeText;  						break;    					case PrinterConnectionAndCommunication.CommunicationStates.Paused:  						printLabel = "Printing Paused".Localize() + ":";  						printerStatus = totalPrintTimeText;  						break;    					case PrinterConnectionAndCommunication.CommunicationStates.FinishedPrint:  						printLabel = "Done Printing".Localize() + ":";  						printerStatus = totalPrintTimeText;  						break;    					case PrinterConnectionAndCommunication.CommunicationStates.Disconnected:  						printerStatus = "Not connected. Press 'Connect' to enable printing.".Localize();  						break;    					case PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect:  						printerStatus = "Attempting to Connect".Localize() + "...";  						break;    					case PrinterConnectionAndCommunication.CommunicationStates.ConnectionLost:  					case PrinterConnectionAndCommunication.CommunicationStates.FailedToConnect:  						printerStatus = "Connection Failed".Localize() + ": " + PrinterConnectionAndCommunication.Instance.ConnectionFailureMessage;  						break;    					default:  						printerStatus = ActiveSliceSettings.Instance.PrinterSelected ? "" : "Select a Printer.".Localize();  						break;  				}  			}  			else  			{  				printLabel = "Next Print".Localize() + ":";  				printerStatus = "Press 'Add' to choose an item to print".Localize();  			}
Magic Number,MatterHackers.MatterControl.ActionBar,PrintStatusRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintStatusRow.cs,UpdatePrintStatus,The following statement contains a magic number: if (PrinterConnectionAndCommunication.Instance.ActivePrintItem != null)  			{  				int totalSecondsInPrint = PrinterConnectionAndCommunication.Instance.TotalSecondsInPrint;    				int totalHoursInPrint = (int)(totalSecondsInPrint / (60 * 60));  				int totalMinutesInPrint = (int)(totalSecondsInPrint / 60 - totalHoursInPrint * 60);  				totalSecondsInPrint = totalSecondsInPrint % 60;    				string estimatedTimeLabel = "Estimated Print Time".Localize();  				string calculatingLabel = "Calculating...".Localize();  				string totalPrintTimeText;    				if (totalSecondsInPrint > 0)  				{  					if (totalHoursInPrint > 0)  					{  						totalPrintTimeText = $"{estimatedTimeLabel}: {totalHoursInPrint}h {totalMinutesInPrint:00}m {totalSecondsInPrint:00}s";  					}  					else  					{  						totalPrintTimeText = $"{estimatedTimeLabel}: {totalMinutesInPrint}m {totalSecondsInPrint:00}s";  					}  				}  				else  				{  					if (totalSecondsInPrint < 0)  					{  						totalPrintTimeText = "Streaming GCode...".Localize();  					}  					else  					{  						totalPrintTimeText = $"{estimatedTimeLabel}: {calculatingLabel}";  					}  				}    				switch (PrinterConnectionAndCommunication.Instance.CommunicationState)  				{  					case PrinterConnectionAndCommunication.CommunicationStates.PreparingToPrint:  						printLabel = "Preparing To Print".Localize() + ":";  						break;    					case PrinterConnectionAndCommunication.CommunicationStates.Printing:  						printLabel = PrinterConnectionAndCommunication.Instance.PrintingStateString;  						printerStatus = totalPrintTimeText;  						break;    					case PrinterConnectionAndCommunication.CommunicationStates.Paused:  						printLabel = "Printing Paused".Localize() + ":";  						printerStatus = totalPrintTimeText;  						break;    					case PrinterConnectionAndCommunication.CommunicationStates.FinishedPrint:  						printLabel = "Done Printing".Localize() + ":";  						printerStatus = totalPrintTimeText;  						break;    					case PrinterConnectionAndCommunication.CommunicationStates.Disconnected:  						printerStatus = "Not connected. Press 'Connect' to enable printing.".Localize();  						break;    					case PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect:  						printerStatus = "Attempting to Connect".Localize() + "...";  						break;    					case PrinterConnectionAndCommunication.CommunicationStates.ConnectionLost:  					case PrinterConnectionAndCommunication.CommunicationStates.FailedToConnect:  						printerStatus = "Connection Failed".Localize() + ": " + PrinterConnectionAndCommunication.Instance.ConnectionFailureMessage;  						break;    					default:  						printerStatus = ActiveSliceSettings.Instance.PrinterSelected ? "" : "Select a Printer.".Localize();  						break;  				}  			}  			else  			{  				printLabel = "Next Print".Localize() + ":";  				printerStatus = "Press 'Add' to choose an item to print".Localize();  			}
Magic Number,MatterHackers.MatterControl.ActionBar,PrintStatusRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintStatusRow.cs,UpdatePrintStatus,The following statement contains a magic number: if (PrinterConnectionAndCommunication.Instance.ActivePrintItem != null)  			{  				int totalSecondsInPrint = PrinterConnectionAndCommunication.Instance.TotalSecondsInPrint;    				int totalHoursInPrint = (int)(totalSecondsInPrint / (60 * 60));  				int totalMinutesInPrint = (int)(totalSecondsInPrint / 60 - totalHoursInPrint * 60);  				totalSecondsInPrint = totalSecondsInPrint % 60;    				string estimatedTimeLabel = "Estimated Print Time".Localize();  				string calculatingLabel = "Calculating...".Localize();  				string totalPrintTimeText;    				if (totalSecondsInPrint > 0)  				{  					if (totalHoursInPrint > 0)  					{  						totalPrintTimeText = $"{estimatedTimeLabel}: {totalHoursInPrint}h {totalMinutesInPrint:00}m {totalSecondsInPrint:00}s";  					}  					else  					{  						totalPrintTimeText = $"{estimatedTimeLabel}: {totalMinutesInPrint}m {totalSecondsInPrint:00}s";  					}  				}  				else  				{  					if (totalSecondsInPrint < 0)  					{  						totalPrintTimeText = "Streaming GCode...".Localize();  					}  					else  					{  						totalPrintTimeText = $"{estimatedTimeLabel}: {calculatingLabel}";  					}  				}    				switch (PrinterConnectionAndCommunication.Instance.CommunicationState)  				{  					case PrinterConnectionAndCommunication.CommunicationStates.PreparingToPrint:  						printLabel = "Preparing To Print".Localize() + ":";  						break;    					case PrinterConnectionAndCommunication.CommunicationStates.Printing:  						printLabel = PrinterConnectionAndCommunication.Instance.PrintingStateString;  						printerStatus = totalPrintTimeText;  						break;    					case PrinterConnectionAndCommunication.CommunicationStates.Paused:  						printLabel = "Printing Paused".Localize() + ":";  						printerStatus = totalPrintTimeText;  						break;    					case PrinterConnectionAndCommunication.CommunicationStates.FinishedPrint:  						printLabel = "Done Printing".Localize() + ":";  						printerStatus = totalPrintTimeText;  						break;    					case PrinterConnectionAndCommunication.CommunicationStates.Disconnected:  						printerStatus = "Not connected. Press 'Connect' to enable printing.".Localize();  						break;    					case PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect:  						printerStatus = "Attempting to Connect".Localize() + "...";  						break;    					case PrinterConnectionAndCommunication.CommunicationStates.ConnectionLost:  					case PrinterConnectionAndCommunication.CommunicationStates.FailedToConnect:  						printerStatus = "Connection Failed".Localize() + ": " + PrinterConnectionAndCommunication.Instance.ConnectionFailureMessage;  						break;    					default:  						printerStatus = ActiveSliceSettings.Instance.PrinterSelected ? "" : "Select a Printer.".Localize();  						break;  				}  			}  			else  			{  				printLabel = "Next Print".Localize() + ":";  				printerStatus = "Press 'Add' to choose an item to print".Localize();  			}
Magic Number,MatterHackers.MatterControl.ActionBar,PrintStatusRow,C:\repos\MatterHackers_MatterControl\ActionBar\PrintStatusRow.cs,UpdatePrintStatus,The following statement contains a magic number: if (PrinterConnectionAndCommunication.Instance.ActivePrintItem != null)  			{  				int totalSecondsInPrint = PrinterConnectionAndCommunication.Instance.TotalSecondsInPrint;    				int totalHoursInPrint = (int)(totalSecondsInPrint / (60 * 60));  				int totalMinutesInPrint = (int)(totalSecondsInPrint / 60 - totalHoursInPrint * 60);  				totalSecondsInPrint = totalSecondsInPrint % 60;    				string estimatedTimeLabel = "Estimated Print Time".Localize();  				string calculatingLabel = "Calculating...".Localize();  				string totalPrintTimeText;    				if (totalSecondsInPrint > 0)  				{  					if (totalHoursInPrint > 0)  					{  						totalPrintTimeText = $"{estimatedTimeLabel}: {totalHoursInPrint}h {totalMinutesInPrint:00}m {totalSecondsInPrint:00}s";  					}  					else  					{  						totalPrintTimeText = $"{estimatedTimeLabel}: {totalMinutesInPrint}m {totalSecondsInPrint:00}s";  					}  				}  				else  				{  					if (totalSecondsInPrint < 0)  					{  						totalPrintTimeText = "Streaming GCode...".Localize();  					}  					else  					{  						totalPrintTimeText = $"{estimatedTimeLabel}: {calculatingLabel}";  					}  				}    				switch (PrinterConnectionAndCommunication.Instance.CommunicationState)  				{  					case PrinterConnectionAndCommunication.CommunicationStates.PreparingToPrint:  						printLabel = "Preparing To Print".Localize() + ":";  						break;    					case PrinterConnectionAndCommunication.CommunicationStates.Printing:  						printLabel = PrinterConnectionAndCommunication.Instance.PrintingStateString;  						printerStatus = totalPrintTimeText;  						break;    					case PrinterConnectionAndCommunication.CommunicationStates.Paused:  						printLabel = "Printing Paused".Localize() + ":";  						printerStatus = totalPrintTimeText;  						break;    					case PrinterConnectionAndCommunication.CommunicationStates.FinishedPrint:  						printLabel = "Done Printing".Localize() + ":";  						printerStatus = totalPrintTimeText;  						break;    					case PrinterConnectionAndCommunication.CommunicationStates.Disconnected:  						printerStatus = "Not connected. Press 'Connect' to enable printing.".Localize();  						break;    					case PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect:  						printerStatus = "Attempting to Connect".Localize() + "...";  						break;    					case PrinterConnectionAndCommunication.CommunicationStates.ConnectionLost:  					case PrinterConnectionAndCommunication.CommunicationStates.FailedToConnect:  						printerStatus = "Connection Failed".Localize() + ": " + PrinterConnectionAndCommunication.Instance.ConnectionFailureMessage;  						break;    					default:  						printerStatus = ActiveSliceSettings.Instance.PrinterSelected ? "" : "Select a Printer.".Localize();  						break;  				}  			}  			else  			{  				printLabel = "Next Print".Localize() + ":";  				printerStatus = "Press 'Add' to choose an item to print".Localize();  			}
Magic Number,MatterHackers.MatterControl.ActionBar,TemperatureWidgetBase,C:\repos\MatterHackers_MatterControl\ActionBar\TemperatureWidgetBase.cs,TemperatureWidgetBase,The following statement contains a magic number: this.BackgroundColor = new RGBA_Bytes(255' 255' 255' 200);
Magic Number,MatterHackers.MatterControl.ActionBar,TemperatureWidgetBase,C:\repos\MatterHackers_MatterControl\ActionBar\TemperatureWidgetBase.cs,TemperatureWidgetBase,The following statement contains a magic number: this.BackgroundColor = new RGBA_Bytes(255' 255' 255' 200);
Magic Number,MatterHackers.MatterControl.ActionBar,TemperatureWidgetBase,C:\repos\MatterHackers_MatterControl\ActionBar\TemperatureWidgetBase.cs,TemperatureWidgetBase,The following statement contains a magic number: this.BackgroundColor = new RGBA_Bytes(255' 255' 255' 200);
Magic Number,MatterHackers.MatterControl.ActionBar,TemperatureWidgetBase,C:\repos\MatterHackers_MatterControl\ActionBar\TemperatureWidgetBase.cs,TemperatureWidgetBase,The following statement contains a magic number: this.BackgroundColor = new RGBA_Bytes(255' 255' 255' 200);
Magic Number,MatterHackers.MatterControl.ActionBar,TemperatureWidgetBase,C:\repos\MatterHackers_MatterControl\ActionBar\TemperatureWidgetBase.cs,TemperatureWidgetBase,The following statement contains a magic number: this.Margin = new BorderDouble(0' 2) * GuiWidget.DeviceScale;
Magic Number,MatterHackers.MatterControl.ActionBar,TemperatureWidgetBase,C:\repos\MatterHackers_MatterControl\ActionBar\TemperatureWidgetBase.cs,TemperatureWidgetBase,The following statement contains a magic number: temperatureTypeName = new TextWidget(""' pointSize: 8)  			{  				AutoExpandBoundsToText = true'  				HAnchor = HAnchor.ParentCenter'  				VAnchor = VAnchor.ParentTop'  				Margin = new BorderDouble(0' 3)'  				TextColor = ActiveTheme.Instance.SecondaryAccentColor'  				Visible = false  			};
Magic Number,MatterHackers.MatterControl.ActionBar,TemperatureWidgetBase,C:\repos\MatterHackers_MatterControl\ActionBar\TemperatureWidgetBase.cs,TemperatureWidgetBase,The following statement contains a magic number: temperatureTypeName = new TextWidget(""' pointSize: 8)  			{  				AutoExpandBoundsToText = true'  				HAnchor = HAnchor.ParentCenter'  				VAnchor = VAnchor.ParentTop'  				Margin = new BorderDouble(0' 3)'  				TextColor = ActiveTheme.Instance.SecondaryAccentColor'  				Visible = false  			};
Magic Number,MatterHackers.MatterControl.ActionBar,TemperatureWidgetBase,C:\repos\MatterHackers_MatterControl\ActionBar\TemperatureWidgetBase.cs,TemperatureWidgetBase,The following statement contains a magic number: currentTempIndicator = new TextWidget(textValue' pointSize: 11)  			{  				TextColor = ActiveTheme.Instance.PrimaryAccentColor'  				HAnchor = HAnchor.ParentCenter'  				VAnchor = VAnchor.ParentCenter'  				AutoExpandBoundsToText = true  			};
Magic Number,MatterHackers.MatterControl.ActionBar,TemperatureWidgetBase,C:\repos\MatterHackers_MatterControl\ActionBar\TemperatureWidgetBase.cs,TemperatureWidgetBase,The following statement contains a magic number: var buttonContainer = new GuiWidget()  			{  				HAnchor = Agg.UI.HAnchor.ParentLeftRight'  				Height = 18 * GuiWidget.DeviceScale  			};
Magic Number,MatterHackers.MatterControl.ActionBar,TemperatureWidgetExtruder,C:\repos\MatterHackers_MatterControl\ActionBar\TemperatureWidgetExtruder.cs,DisplayCurrentTemperature,The following statement contains a magic number: if (PrinterConnectionAndCommunication.Instance.GetTargetExtruderTemperature(extruderIndex) > 0)  			{  				if ((int)(PrinterConnectionAndCommunication.Instance.GetTargetExtruderTemperature(extruderIndex) + 0.5) < (int)(PrinterConnectionAndCommunication.Instance.GetActualExtruderTemperature(extruderIndex) + 0.5))  				{  					tempDirectionIndicator = "↓";  				}  				else if ((int)(PrinterConnectionAndCommunication.Instance.GetTargetExtruderTemperature(extruderIndex) + 0.5) > (int)(PrinterConnectionAndCommunication.Instance.GetActualExtruderTemperature(extruderIndex) + 0.5))  				{  					tempDirectionIndicator = "↑";  				}  			}
Magic Number,MatterHackers.MatterControl.ActionBar,TemperatureWidgetExtruder,C:\repos\MatterHackers_MatterControl\ActionBar\TemperatureWidgetExtruder.cs,DisplayCurrentTemperature,The following statement contains a magic number: if (PrinterConnectionAndCommunication.Instance.GetTargetExtruderTemperature(extruderIndex) > 0)  			{  				if ((int)(PrinterConnectionAndCommunication.Instance.GetTargetExtruderTemperature(extruderIndex) + 0.5) < (int)(PrinterConnectionAndCommunication.Instance.GetActualExtruderTemperature(extruderIndex) + 0.5))  				{  					tempDirectionIndicator = "↓";  				}  				else if ((int)(PrinterConnectionAndCommunication.Instance.GetTargetExtruderTemperature(extruderIndex) + 0.5) > (int)(PrinterConnectionAndCommunication.Instance.GetActualExtruderTemperature(extruderIndex) + 0.5))  				{  					tempDirectionIndicator = "↑";  				}  			}
Magic Number,MatterHackers.MatterControl.ActionBar,TemperatureWidgetExtruder,C:\repos\MatterHackers_MatterControl\ActionBar\TemperatureWidgetExtruder.cs,DisplayCurrentTemperature,The following statement contains a magic number: if (PrinterConnectionAndCommunication.Instance.GetTargetExtruderTemperature(extruderIndex) > 0)  			{  				if ((int)(PrinterConnectionAndCommunication.Instance.GetTargetExtruderTemperature(extruderIndex) + 0.5) < (int)(PrinterConnectionAndCommunication.Instance.GetActualExtruderTemperature(extruderIndex) + 0.5))  				{  					tempDirectionIndicator = "↓";  				}  				else if ((int)(PrinterConnectionAndCommunication.Instance.GetTargetExtruderTemperature(extruderIndex) + 0.5) > (int)(PrinterConnectionAndCommunication.Instance.GetActualExtruderTemperature(extruderIndex) + 0.5))  				{  					tempDirectionIndicator = "↑";  				}  			}
Magic Number,MatterHackers.MatterControl.ActionBar,TemperatureWidgetExtruder,C:\repos\MatterHackers_MatterControl\ActionBar\TemperatureWidgetExtruder.cs,DisplayCurrentTemperature,The following statement contains a magic number: if (PrinterConnectionAndCommunication.Instance.GetTargetExtruderTemperature(extruderIndex) > 0)  			{  				if ((int)(PrinterConnectionAndCommunication.Instance.GetTargetExtruderTemperature(extruderIndex) + 0.5) < (int)(PrinterConnectionAndCommunication.Instance.GetActualExtruderTemperature(extruderIndex) + 0.5))  				{  					tempDirectionIndicator = "↓";  				}  				else if ((int)(PrinterConnectionAndCommunication.Instance.GetTargetExtruderTemperature(extruderIndex) + 0.5) > (int)(PrinterConnectionAndCommunication.Instance.GetActualExtruderTemperature(extruderIndex) + 0.5))  				{  					tempDirectionIndicator = "↑";  				}  			}
Magic Number,MatterHackers.MatterControl.ActionBar,TemperatureWidgetExtruder,C:\repos\MatterHackers_MatterControl\ActionBar\TemperatureWidgetExtruder.cs,SetTargetTemperature,The following statement contains a magic number: if (double.TryParse(ActiveSliceSettings.Instance.GetValue(SettingsKey.temperature)' out targetTemp))  			{  				double goalTemp = (int)(targetTemp + .5);  				if (PrinterConnectionAndCommunication.Instance.PrinterIsPrinting  					&& PrinterConnectionAndCommunication.Instance.PrintingState == PrinterConnectionAndCommunication.DetailedPrintingState.HeatingExtruder  					&& goalTemp != PrinterConnectionAndCommunication.Instance.GetTargetExtruderTemperature(extruderIndex))  				{  					string message = string.Format(waitingForExtruderToHeatMessage' PrinterConnectionAndCommunication.Instance.GetTargetExtruderTemperature(extruderIndex)' sliceSettingsNote);  					StyledMessageBox.ShowMessageBox(null' message' "Waiting For Extruder To Heat".Localize());  				}  				else  				{  					PrinterConnectionAndCommunication.Instance.SetTargetExtruderTemperature(extruderIndex' (int)(targetTemp + .5));  				}  			}
Magic Number,MatterHackers.MatterControl.ActionBar,TemperatureWidgetExtruder,C:\repos\MatterHackers_MatterControl\ActionBar\TemperatureWidgetExtruder.cs,SetTargetTemperature,The following statement contains a magic number: if (double.TryParse(ActiveSliceSettings.Instance.GetValue(SettingsKey.temperature)' out targetTemp))  			{  				double goalTemp = (int)(targetTemp + .5);  				if (PrinterConnectionAndCommunication.Instance.PrinterIsPrinting  					&& PrinterConnectionAndCommunication.Instance.PrintingState == PrinterConnectionAndCommunication.DetailedPrintingState.HeatingExtruder  					&& goalTemp != PrinterConnectionAndCommunication.Instance.GetTargetExtruderTemperature(extruderIndex))  				{  					string message = string.Format(waitingForExtruderToHeatMessage' PrinterConnectionAndCommunication.Instance.GetTargetExtruderTemperature(extruderIndex)' sliceSettingsNote);  					StyledMessageBox.ShowMessageBox(null' message' "Waiting For Extruder To Heat".Localize());  				}  				else  				{  					PrinterConnectionAndCommunication.Instance.SetTargetExtruderTemperature(extruderIndex' (int)(targetTemp + .5));  				}  			}
Magic Number,MatterHackers.MatterControl.ConfigurationPage,ApplicationSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\ApplicationSettings\ApplicationSettingsView.cs,GetClearHistoryControl,The following statement contains a magic number: buttonRow.Margin = new BorderDouble(3' 4);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,ApplicationSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\ApplicationSettings\ApplicationSettingsView.cs,GetClearHistoryControl,The following statement contains a magic number: buttonRow.Margin = new BorderDouble(3' 4);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,ApplicationSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\ApplicationSettings\ApplicationSettingsView.cs,SetDisplayAttributes,The following statement contains a magic number: this.Margin = new BorderDouble(2' 4' 2' 0);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,ApplicationSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\ApplicationSettings\ApplicationSettingsView.cs,SetDisplayAttributes,The following statement contains a magic number: this.Margin = new BorderDouble(2' 4' 2' 0);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,ApplicationSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\ApplicationSettings\ApplicationSettingsView.cs,SetDisplayAttributes,The following statement contains a magic number: this.Margin = new BorderDouble(2' 4' 2' 0);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,ApplicationSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\ApplicationSettings\ApplicationSettingsView.cs,SetDisplayAttributes,The following statement contains a magic number: this.textImageButtonFactory.fontSize = 11;
Magic Number,MatterHackers.MatterControl.ConfigurationPage,ApplicationSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\ApplicationSettings\ApplicationSettingsView.cs,SetDisplayAttributes,The following statement contains a magic number: this.linkButtonFactory.fontSize = 11;
Magic Number,MatterHackers.MatterControl.ConfigurationPage,ApplicationSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\ApplicationSettings\ApplicationSettingsView.cs,GetThemeControl,The following statement contains a magic number: buttonRow.Margin = new BorderDouble(0' 6);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,ApplicationSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\ApplicationSettings\ApplicationSettingsView.cs,GetThemeControl,The following statement contains a magic number: colorSelectorContainer.Margin = new BorderDouble(top: 4);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,ApplicationSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\ApplicationSettings\ApplicationSettingsView.cs,GetThemeControl,The following statement contains a magic number: currentColorThemeBorder.Padding = new BorderDouble(5);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,ApplicationSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\ApplicationSettings\ApplicationSettingsView.cs,GetThemeControl,The following statement contains a magic number: currentColorThemeBorder.Width = 80;
Magic Number,MatterHackers.MatterControl.ConfigurationPage,ApplicationSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\ApplicationSettings\ApplicationSettingsView.cs,GetThemeControl,The following statement contains a magic number: themeSelector.Margin = new BorderDouble(right: 5);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,ApplicationSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\ApplicationSettings\ApplicationSettingsView.cs,GetDisplayControl,The following statement contains a magic number: buttonRow.Margin = new BorderDouble(top: 4);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,ApplicationSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\ApplicationSettings\ApplicationSettingsView.cs,GetDisplayControl,The following statement contains a magic number: displayControlRestartButton.Margin = new BorderDouble(right: 6);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,ApplicationSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\ApplicationSettings\ApplicationSettingsView.cs,GetDisplayControl,The following statement contains a magic number: optionsContainer.Margin = new BorderDouble(bottom: 6);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,ApplicationSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\ApplicationSettings\ApplicationSettingsView.cs,GetDisplayControl,The following statement contains a magic number: DropDownList interfaceOptionsDropList = new DropDownList("Development"' maxHeight: 200);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,ApplicationSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\ApplicationSettings\ApplicationSettingsView.cs,GetDisplayControl,The following statement contains a magic number: optionsContainer.Width = 200;
Magic Number,MatterHackers.MatterControl.ConfigurationPage,ApplicationSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\ApplicationSettings\ApplicationSettingsView.cs,GetModeControl,The following statement contains a magic number: buttonRow.Margin = new BorderDouble(top: 4);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,ApplicationSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\ApplicationSettings\ApplicationSettingsView.cs,GetModeControl,The following statement contains a magic number: optionsContainer.Margin = new BorderDouble(bottom: 6);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,ApplicationSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\ApplicationSettings\ApplicationSettingsView.cs,GetModeControl,The following statement contains a magic number: DropDownList interfaceModeDropList = new DropDownList("Standard"' maxHeight: 200);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,ApplicationSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\ApplicationSettings\ApplicationSettingsView.cs,GetModeControl,The following statement contains a magic number: optionsContainer.Width = 200;
Magic Number,MatterHackers.MatterControl.ConfigurationPage,ApplicationSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\ApplicationSettings\ApplicationSettingsView.cs,GetUpdateControl,The following statement contains a magic number: buttonRow.Margin = new BorderDouble(top: 4);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,ApplicationSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\ApplicationSettings\ApplicationSettingsView.cs,GetUpdateControl,The following statement contains a magic number: configureUpdateFeedButton.Margin = new BorderDouble(left: 6);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,ApplicationSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\ApplicationSettings\ApplicationSettingsView.cs,GetUpdateControl,The following statement contains a magic number: optionsContainer.Margin = new BorderDouble(bottom: 6);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,ApplicationSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\ApplicationSettings\ApplicationSettingsView.cs,GetUpdateControl,The following statement contains a magic number: releaseOptionsDropList = new DropDownList("Development"' maxHeight: 200);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,ApplicationSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\ApplicationSettings\ApplicationSettingsView.cs,GetUpdateControl,The following statement contains a magic number: optionsContainer.Width = 200;
Magic Number,MatterHackers.MatterControl.ConfigurationPage,ApplicationSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\ApplicationSettings\ApplicationSettingsView.cs,GetLanguageControl,The following statement contains a magic number: buttonRow.Margin = new BorderDouble(top: 4);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,ApplicationSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\ApplicationSettings\ApplicationSettingsView.cs,GetLanguageControl,The following statement contains a magic number: optionsContainer.Margin = new BorderDouble(bottom: 6);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,ApplicationSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\ApplicationSettings\ApplicationSettingsView.cs,GetLanguageControl,The following statement contains a magic number: optionsContainer.Width = 200;
Magic Number,MatterHackers.MatterControl.ConfigurationPage,ApplicationSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\ApplicationSettings\ApplicationSettingsView.cs,GetLanguageControl,The following statement contains a magic number: languageRestartButton.Margin = new BorderDouble(right: 6);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,ApplicationSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\ApplicationSettings\ApplicationSettingsView.cs,GetSliceEngineControl,The following statement contains a magic number: buttonRow.Margin = new BorderDouble(top: 4);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,ApplicationSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\ApplicationSettings\ApplicationSettingsView.cs,GetSliceEngineControl,The following statement contains a magic number: optionsContainer.Margin = new BorderDouble(bottom: 6);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,ApplicationSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\ApplicationSettings\ApplicationSettingsView.cs,GetSliceEngineControl,The following statement contains a magic number: optionsContainer.Width = 200;
Magic Number,MatterHackers.MatterControl.ConfigurationPage,ApplicationSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\ApplicationSettings\ApplicationSettingsView.cs,GetThumbnailRenderingControl,The following statement contains a magic number: buttonRow.Margin = new BorderDouble(top: 4);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,ApplicationSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\ApplicationSettings\ApplicationSettingsView.cs,GetThumbnailRenderingControl,The following statement contains a magic number: optionsContainer.Margin = new BorderDouble(bottom: 6);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,ApplicationSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\ApplicationSettings\ApplicationSettingsView.cs,GetThumbnailRenderingControl,The following statement contains a magic number: DropDownList interfaceOptionsDropList = new DropDownList("Development"' maxHeight: 200);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,ApplicationSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\ApplicationSettings\ApplicationSettingsView.cs,GetThumbnailRenderingControl,The following statement contains a magic number: optionsContainer.Width = 200;
Magic Number,MatterHackers.MatterControl.ConfigurationPage,CloudSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\CloudSettings\CloudSettingsView.cs,SetDisplayAttributes,The following statement contains a magic number: this.Margin = new BorderDouble(2' 4' 2' 0);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,CloudSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\CloudSettings\CloudSettingsView.cs,SetDisplayAttributes,The following statement contains a magic number: this.Margin = new BorderDouble(2' 4' 2' 0);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,CloudSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\CloudSettings\CloudSettingsView.cs,SetDisplayAttributes,The following statement contains a magic number: this.Margin = new BorderDouble(2' 4' 2' 0);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,CloudSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\CloudSettings\CloudSettingsView.cs,SetDisplayAttributes,The following statement contains a magic number: this.textImageButtonFactory.fontSize = 11;
Magic Number,MatterHackers.MatterControl.ConfigurationPage,CloudSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\CloudSettings\CloudSettingsView.cs,SetDisplayAttributes,The following statement contains a magic number: this.linkButtonFactory.fontSize = 11;
Magic Number,MatterHackers.MatterControl.ConfigurationPage,CloudSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\CloudSettings\CloudSettingsView.cs,GetCloudSyncDashboardControls,The following statement contains a magic number: int iconSize = (int)(24 * GuiWidget.DeviceScale);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,CloudSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\CloudSettings\CloudSettingsView.cs,GetCloudSyncDashboardControls,The following statement contains a magic number: cloudSyncIcon.Margin = new BorderDouble(right: 6' bottom: 6);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,CloudSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\CloudSettings\CloudSettingsView.cs,GetCloudSyncDashboardControls,The following statement contains a magic number: cloudSyncIcon.Margin = new BorderDouble(right: 6' bottom: 6);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,CloudSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\CloudSettings\CloudSettingsView.cs,GetCloudSyncDashboardControls,The following statement contains a magic number: linkButtonFactory.fontSize = 10;
Magic Number,MatterHackers.MatterControl.ConfigurationPage,CloudSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\CloudSettings\CloudSettingsView.cs,GetNotificationControls,The following statement contains a magic number: int iconSize = (int)(24 * GuiWidget.DeviceScale);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,CloudSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\CloudSettings\CloudSettingsView.cs,GetNotificationControls,The following statement contains a magic number: notificationSettingsIcon.Margin = new BorderDouble(right: 6' bottom: 6);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,CloudSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\CloudSettings\CloudSettingsView.cs,GetNotificationControls,The following statement contains a magic number: notificationSettingsIcon.Margin = new BorderDouble(right: 6' bottom: 6);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,CloudSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\CloudSettings\CloudSettingsView.cs,GetNotificationControls,The following statement contains a magic number: configureNotificationSettingsButton.Margin = new BorderDouble(left: 6);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,CloudSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\CloudSettings\CloudSettingsView.cs,GetNotificationControls,The following statement contains a magic number: printNotificationsSwitchContainer.Margin = new BorderDouble(left: 16);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,CalibrationSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\CalibrationSettings\CalibrationSettingsView.cs,GetAutoLevelControl,The following statement contains a magic number: buttonRow.Margin = new BorderDouble(0' 4);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,CalibrationSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\CalibrationSettings\CalibrationSettingsView.cs,GetAutoLevelControl,The following statement contains a magic number: ImageBuffer levelingImage = StaticData.Instance.LoadIcon("leveling_32x32.png"' 24' 24).InvertLightness();
Magic Number,MatterHackers.MatterControl.ConfigurationPage,CalibrationSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\CalibrationSettings\CalibrationSettingsView.cs,GetAutoLevelControl,The following statement contains a magic number: ImageBuffer levelingImage = StaticData.Instance.LoadIcon("leveling_32x32.png"' 24' 24).InvertLightness();
Magic Number,MatterHackers.MatterControl.ConfigurationPage,CalibrationSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\CalibrationSettings\CalibrationSettingsView.cs,GetAutoLevelControl,The following statement contains a magic number: levelingIcon.Margin = new BorderDouble(right: 6);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,CalibrationSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\CalibrationSettings\CalibrationSettingsView.cs,GetAutoLevelControl,The following statement contains a magic number: editButton.Margin = new BorderDouble(2' 2' 2' 0);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,CalibrationSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\CalibrationSettings\CalibrationSettingsView.cs,GetAutoLevelControl,The following statement contains a magic number: editButton.Margin = new BorderDouble(2' 2' 2' 0);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,CalibrationSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\CalibrationSettings\CalibrationSettingsView.cs,GetAutoLevelControl,The following statement contains a magic number: editButton.Margin = new BorderDouble(2' 2' 2' 0);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,CalibrationSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\CalibrationSettings\CalibrationSettingsView.cs,GetAutoLevelControl,The following statement contains a magic number: runPrintLevelingButton.Margin = new BorderDouble(left: 6);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,CalibrationSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\CalibrationSettings\CalibrationSettingsView.cs,GetAutoLevelControl,The following statement contains a magic number: printLevelingSwitch.Margin = new BorderDouble(left: 16);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,HardwareSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrinterSettings\PrinterSettingsView.cs,GetCameraControl,The following statement contains a magic number: buttonRow.Margin = new BorderDouble(0' 4);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,HardwareSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrinterSettings\PrinterSettingsView.cs,GetCameraControl,The following statement contains a magic number: ImageBuffer cameraIconImage = StaticData.Instance.LoadIcon("camera-24x24.png"'24'24).InvertLightness();
Magic Number,MatterHackers.MatterControl.ConfigurationPage,HardwareSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrinterSettings\PrinterSettingsView.cs,GetCameraControl,The following statement contains a magic number: ImageBuffer cameraIconImage = StaticData.Instance.LoadIcon("camera-24x24.png"'24'24).InvertLightness();
Magic Number,MatterHackers.MatterControl.ConfigurationPage,HardwareSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrinterSettings\PrinterSettingsView.cs,GetCameraControl,The following statement contains a magic number: int iconSize = (int)(24 * GuiWidget.DeviceScale);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,HardwareSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrinterSettings\PrinterSettingsView.cs,GetCameraControl,The following statement contains a magic number: cameraIcon.Margin = new BorderDouble(right: 6);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,HardwareSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrinterSettings\PrinterSettingsView.cs,GetCameraControl,The following statement contains a magic number: openCameraButton.Margin = new BorderDouble(left: 6);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,HardwareSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrinterSettings\PrinterSettingsView.cs,GetCameraControl,The following statement contains a magic number: if (ApplicationSettings.Instance.get(ApplicationSettingsKey.HardwareHasCamera) == "true")  			{  				GuiWidget publishImageSwitchContainer = new FlowLayoutWidget();  				publishImageSwitchContainer.VAnchor = VAnchor.ParentCenter;  				publishImageSwitchContainer.Margin = new BorderDouble(left: 16);    				CheckBox toggleSwitch = ImageButtonFactory.CreateToggleSwitch(ActiveSliceSettings.Instance.GetValue<bool>(SettingsKey.publish_bed_image));  				toggleSwitch.CheckedStateChanged += (sender' e) =>  				{  					CheckBox thisControl = sender as CheckBox;  					ActiveSliceSettings.Instance.SetValue(SettingsKey.publish_bed_image' thisControl.Checked ? "1" : "0");  				};  				publishImageSwitchContainer.AddChild(toggleSwitch);    				publishImageSwitchContainer.SetBoundsToEncloseChildren();    				buttonRow.AddChild(publishImageSwitchContainer);  			}
Magic Number,MatterHackers.MatterControl.ConfigurationPage,HardwareSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrinterSettings\PrinterSettingsView.cs,GetGcodeTerminalControl,The following statement contains a magic number: buttonRow.Margin = new BorderDouble(0' 4);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,HardwareSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrinterSettings\PrinterSettingsView.cs,GetGcodeTerminalControl,The following statement contains a magic number: ImageBuffer terminalSettingsImage = StaticData.Instance.LoadIcon("terminal-24x24.png"' 24' 24).InvertLightness();
Magic Number,MatterHackers.MatterControl.ConfigurationPage,HardwareSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrinterSettings\PrinterSettingsView.cs,GetGcodeTerminalControl,The following statement contains a magic number: ImageBuffer terminalSettingsImage = StaticData.Instance.LoadIcon("terminal-24x24.png"' 24' 24).InvertLightness();
Magic Number,MatterHackers.MatterControl.ConfigurationPage,HardwareSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrinterSettings\PrinterSettingsView.cs,GetGcodeTerminalControl,The following statement contains a magic number: int iconSize = (int)(24 * GuiWidget.DeviceScale);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,HardwareSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrinterSettings\PrinterSettingsView.cs,GetGcodeTerminalControl,The following statement contains a magic number: terminalIcon.Margin = new BorderDouble(right: 6' bottom: 6);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,HardwareSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrinterSettings\PrinterSettingsView.cs,GetGcodeTerminalControl,The following statement contains a magic number: terminalIcon.Margin = new BorderDouble(right: 6' bottom: 6);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,HardwareSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrinterSettings\PrinterSettingsView.cs,GetEEPromControl,The following statement contains a magic number: buttonRow.Margin = new BorderDouble(0' 4);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,HardwareSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrinterSettings\PrinterSettingsView.cs,GetEEPromControl,The following statement contains a magic number: ImageBuffer levelingImage = StaticData.Instance.LoadIcon("leveling_32x32.png"' 24' 24);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,HardwareSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrinterSettings\PrinterSettingsView.cs,GetEEPromControl,The following statement contains a magic number: ImageBuffer levelingImage = StaticData.Instance.LoadIcon("leveling_32x32.png"' 24' 24);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,HardwareSettingsWidget,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrinterSettings\PrinterSettingsView.cs,GetEEPromControl,The following statement contains a magic number: levelingIcon.Margin = new BorderDouble(right: 6);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,SettingsViewBase,C:\repos\MatterHackers_MatterControl\ConfigurationPage\SettingsViewBase.cs,SettingsViewBase,The following statement contains a magic number: mainContainer.Margin = new BorderDouble(left: 6);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,SettingsViewBase,C:\repos\MatterHackers_MatterControl\ConfigurationPage\SettingsViewBase.cs,SetDisplayAttributes,The following statement contains a magic number: this.separatorLineColor = new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 100);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,SettingsViewBase,C:\repos\MatterHackers_MatterControl\ConfigurationPage\SettingsViewBase.cs,SetDisplayAttributes,The following statement contains a magic number: this.Margin = new BorderDouble(2' 4' 2' 0);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,SettingsViewBase,C:\repos\MatterHackers_MatterControl\ConfigurationPage\SettingsViewBase.cs,SetDisplayAttributes,The following statement contains a magic number: this.Margin = new BorderDouble(2' 4' 2' 0);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,SettingsViewBase,C:\repos\MatterHackers_MatterControl\ConfigurationPage\SettingsViewBase.cs,SetDisplayAttributes,The following statement contains a magic number: this.Margin = new BorderDouble(2' 4' 2' 0);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,SettingsViewBase,C:\repos\MatterHackers_MatterControl\ConfigurationPage\SettingsViewBase.cs,SetDisplayAttributes,The following statement contains a magic number: this.textImageButtonFactory.normalBorderColor = new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 200);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,SettingsViewBase,C:\repos\MatterHackers_MatterControl\ConfigurationPage\SettingsViewBase.cs,SetDisplayAttributes,The following statement contains a magic number: this.textImageButtonFactory.hoverBorderColor = new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 200);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,SettingsViewBase,C:\repos\MatterHackers_MatterControl\ConfigurationPage\SettingsViewBase.cs,SetDisplayAttributes,The following statement contains a magic number: this.textImageButtonFactory.disabledBorderColor = new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 100);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,SettingsViewBase,C:\repos\MatterHackers_MatterControl\ConfigurationPage\SettingsViewBase.cs,SetDisplayAttributes,The following statement contains a magic number: this.textImageButtonFactory.disabledTextColor = new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 100);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,SettingsViewBase,C:\repos\MatterHackers_MatterControl\ConfigurationPage\SettingsViewBase.cs,SetDisplayAttributes,The following statement contains a magic number: this.textImageButtonFactory.fontSize = 11;
Magic Number,MatterHackers.MatterControl.ConfigurationPage,SettingsViewBase,C:\repos\MatterHackers_MatterControl\ConfigurationPage\SettingsViewBase.cs,SetDisplayAttributes,The following statement contains a magic number: this.linkButtonFactory.fontSize = 11;
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,LevelWizardRadialBase,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\LevelWizard7PointRadial.cs,LevelWizardRadialBase,The following statement contains a magic number: double bedRadius = Math.Min(ActiveSliceSettings.Instance.GetValue<Vector2>(SettingsKey.bed_size).x' ActiveSliceSettings.Instance.GetValue<Vector2>(SettingsKey.bed_size).y) / 2;
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,LevelWizard7PointRadial,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\LevelWizard7PointRadial.cs,ApplyLeveling,The following statement contains a magic number: if (settings?.GetValue<bool>(SettingsKey.print_leveling_enabled) == true                  && (lineBeingSent.StartsWith("G0 ") || lineBeingSent.StartsWith("G1 "))                  && lineBeingSent.Length > 2                  && lineBeingSent[2] == ' ')              {                  PrintLevelingData levelingData = ActiveSliceSettings.Instance.Helpers.GetPrintLevelingData();                  return GetLevelingFunctions(numberOfRadialSamples' levelingData' ActiveSliceSettings.Instance.GetValue<Vector2>(SettingsKey.print_center))                      .DoApplyLeveling(lineBeingSent' currentDestination' movementMode);              }
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,LevelWizard7PointRadial,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\LevelWizard7PointRadial.cs,ApplyLeveling,The following statement contains a magic number: if (settings?.GetValue<bool>(SettingsKey.print_leveling_enabled) == true                  && (lineBeingSent.StartsWith("G0 ") || lineBeingSent.StartsWith("G1 "))                  && lineBeingSent.Length > 2                  && lineBeingSent[2] == ' ')              {                  PrintLevelingData levelingData = ActiveSliceSettings.Instance.Helpers.GetPrintLevelingData();                  return GetLevelingFunctions(numberOfRadialSamples' levelingData' ActiveSliceSettings.Instance.GetValue<Vector2>(SettingsKey.print_center))                      .DoApplyLeveling(lineBeingSent' currentDestination' movementMode);              }
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,LevelWizard13PointRadial,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\LevelWizard13PointRadial.cs,ApplyLeveling,The following statement contains a magic number: if (settings?.GetValue<bool>(SettingsKey.print_leveling_enabled) == true                  && (lineBeingSent.StartsWith("G0 ") || lineBeingSent.StartsWith("G1 "))                  && lineBeingSent.Length > 2                  && lineBeingSent[2] == ' ')              {                  return GetLevelingFunctions(numberOfRadialSamples' settings.Helpers.GetPrintLevelingData()' ActiveSliceSettings.Instance.GetValue<Vector2>(SettingsKey.print_center))                      .DoApplyLeveling(lineBeingSent' currentDestination' movementMode);              }
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,LevelWizard13PointRadial,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\LevelWizard13PointRadial.cs,ApplyLeveling,The following statement contains a magic number: if (settings?.GetValue<bool>(SettingsKey.print_leveling_enabled) == true                  && (lineBeingSent.StartsWith("G0 ") || lineBeingSent.StartsWith("G1 "))                  && lineBeingSent.Length > 2                  && lineBeingSent[2] == ' ')              {                  return GetLevelingFunctions(numberOfRadialSamples' settings.Helpers.GetPrintLevelingData()' ActiveSliceSettings.Instance.GetValue<Vector2>(SettingsKey.print_center))                      .DoApplyLeveling(lineBeingSent' currentDestination' movementMode);              }
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,LevelWizard3Point,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\LevelWizard3Point.cs,LevelWizard3Point,The following statement contains a magic number: List<ProbePosition> probePositions = new List<ProbePosition>(3);
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,LevelWizard3Point,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\LevelWizard3Point.cs,LevelWizard3Point,The following statement contains a magic number: Vector2 probeFrontRight = LevelWizardBase.GetPrintLevelPositionToSample(2);
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,LevelWizard3Point,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\LevelWizard3Point.cs,LevelWizard3Point,The following statement contains a magic number: printLevelWizard.AddPage(new GetCoarseBedHeight(printLevelWizard' new Vector3(probeFrontRight' startProbeHeight)' string.Format("{0} {1} 3 - {2}"' GetStepString()' positionLabel' lowPrecisionLabel)' probePositions' 2' allowLessThanZero));
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,LevelWizard3Point,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\LevelWizard3Point.cs,LevelWizard3Point,The following statement contains a magic number: printLevelWizard.AddPage(new GetFineBedHeight(string.Format("{0} {1} 3 - {2}"' GetStepString()' positionLabel' medPrecisionLabel)' probePositions'2' allowLessThanZero));
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,LevelWizard3Point,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\LevelWizard3Point.cs,LevelWizard3Point,The following statement contains a magic number: printLevelWizard.AddPage(new GetUltraFineBedHeight(string.Format("{0} {1} 3 - {2}"' GetStepString()' positionLabel' highPrecisionLabel)' probePositions'2' allowLessThanZero));
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,LevelWizardBase,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\LevelWizardBase.cs,GetPrintLevelPositionToSample,The following statement contains a magic number: switch (ActiveSliceSettings.Instance.GetValue<BedShape>(SettingsKey.bed_shape))  			{  				case BedShape.Circular:  					Vector2 firstPosition = new Vector2(printCenter.x' printCenter.y + (bedSize.y / 2) * .5);  					switch (index)  					{  						case 0:  							return firstPosition;    						case 1:  							return Vector2.Rotate(firstPosition' MathHelper.Tau / 3);    						case 2:  							return Vector2.Rotate(firstPosition' MathHelper.Tau * 2 / 3);    						default:  							throw new IndexOutOfRangeException();  					}    				case BedShape.Rectangular:  				default:  					switch (index)  					{  						case 0:  							return new Vector2(printCenter.x' printCenter.y + (bedSize.y / 2) * .8);    						case 1:  							return new Vector2(printCenter.x - (bedSize.x / 2) * .8' printCenter.y - (bedSize.y / 2) * .8);    						case 2:  							return new Vector2(printCenter.x + (bedSize.x / 2) * .8' printCenter.y - (bedSize.y / 2) * .8);    						default:  							throw new IndexOutOfRangeException();  					}  			}
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,LevelWizardBase,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\LevelWizardBase.cs,GetPrintLevelPositionToSample,The following statement contains a magic number: switch (ActiveSliceSettings.Instance.GetValue<BedShape>(SettingsKey.bed_shape))  			{  				case BedShape.Circular:  					Vector2 firstPosition = new Vector2(printCenter.x' printCenter.y + (bedSize.y / 2) * .5);  					switch (index)  					{  						case 0:  							return firstPosition;    						case 1:  							return Vector2.Rotate(firstPosition' MathHelper.Tau / 3);    						case 2:  							return Vector2.Rotate(firstPosition' MathHelper.Tau * 2 / 3);    						default:  							throw new IndexOutOfRangeException();  					}    				case BedShape.Rectangular:  				default:  					switch (index)  					{  						case 0:  							return new Vector2(printCenter.x' printCenter.y + (bedSize.y / 2) * .8);    						case 1:  							return new Vector2(printCenter.x - (bedSize.x / 2) * .8' printCenter.y - (bedSize.y / 2) * .8);    						case 2:  							return new Vector2(printCenter.x + (bedSize.x / 2) * .8' printCenter.y - (bedSize.y / 2) * .8);    						default:  							throw new IndexOutOfRangeException();  					}  			}
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,LevelWizardBase,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\LevelWizardBase.cs,GetPrintLevelPositionToSample,The following statement contains a magic number: switch (ActiveSliceSettings.Instance.GetValue<BedShape>(SettingsKey.bed_shape))  			{  				case BedShape.Circular:  					Vector2 firstPosition = new Vector2(printCenter.x' printCenter.y + (bedSize.y / 2) * .5);  					switch (index)  					{  						case 0:  							return firstPosition;    						case 1:  							return Vector2.Rotate(firstPosition' MathHelper.Tau / 3);    						case 2:  							return Vector2.Rotate(firstPosition' MathHelper.Tau * 2 / 3);    						default:  							throw new IndexOutOfRangeException();  					}    				case BedShape.Rectangular:  				default:  					switch (index)  					{  						case 0:  							return new Vector2(printCenter.x' printCenter.y + (bedSize.y / 2) * .8);    						case 1:  							return new Vector2(printCenter.x - (bedSize.x / 2) * .8' printCenter.y - (bedSize.y / 2) * .8);    						case 2:  							return new Vector2(printCenter.x + (bedSize.x / 2) * .8' printCenter.y - (bedSize.y / 2) * .8);    						default:  							throw new IndexOutOfRangeException();  					}  			}
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,LevelWizardBase,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\LevelWizardBase.cs,GetPrintLevelPositionToSample,The following statement contains a magic number: switch (ActiveSliceSettings.Instance.GetValue<BedShape>(SettingsKey.bed_shape))  			{  				case BedShape.Circular:  					Vector2 firstPosition = new Vector2(printCenter.x' printCenter.y + (bedSize.y / 2) * .5);  					switch (index)  					{  						case 0:  							return firstPosition;    						case 1:  							return Vector2.Rotate(firstPosition' MathHelper.Tau / 3);    						case 2:  							return Vector2.Rotate(firstPosition' MathHelper.Tau * 2 / 3);    						default:  							throw new IndexOutOfRangeException();  					}    				case BedShape.Rectangular:  				default:  					switch (index)  					{  						case 0:  							return new Vector2(printCenter.x' printCenter.y + (bedSize.y / 2) * .8);    						case 1:  							return new Vector2(printCenter.x - (bedSize.x / 2) * .8' printCenter.y - (bedSize.y / 2) * .8);    						case 2:  							return new Vector2(printCenter.x + (bedSize.x / 2) * .8' printCenter.y - (bedSize.y / 2) * .8);    						default:  							throw new IndexOutOfRangeException();  					}  			}
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,LevelWizardBase,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\LevelWizardBase.cs,GetPrintLevelPositionToSample,The following statement contains a magic number: switch (ActiveSliceSettings.Instance.GetValue<BedShape>(SettingsKey.bed_shape))  			{  				case BedShape.Circular:  					Vector2 firstPosition = new Vector2(printCenter.x' printCenter.y + (bedSize.y / 2) * .5);  					switch (index)  					{  						case 0:  							return firstPosition;    						case 1:  							return Vector2.Rotate(firstPosition' MathHelper.Tau / 3);    						case 2:  							return Vector2.Rotate(firstPosition' MathHelper.Tau * 2 / 3);    						default:  							throw new IndexOutOfRangeException();  					}    				case BedShape.Rectangular:  				default:  					switch (index)  					{  						case 0:  							return new Vector2(printCenter.x' printCenter.y + (bedSize.y / 2) * .8);    						case 1:  							return new Vector2(printCenter.x - (bedSize.x / 2) * .8' printCenter.y - (bedSize.y / 2) * .8);    						case 2:  							return new Vector2(printCenter.x + (bedSize.x / 2) * .8' printCenter.y - (bedSize.y / 2) * .8);    						default:  							throw new IndexOutOfRangeException();  					}  			}
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,LevelWizardBase,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\LevelWizardBase.cs,GetPrintLevelPositionToSample,The following statement contains a magic number: switch (ActiveSliceSettings.Instance.GetValue<BedShape>(SettingsKey.bed_shape))  			{  				case BedShape.Circular:  					Vector2 firstPosition = new Vector2(printCenter.x' printCenter.y + (bedSize.y / 2) * .5);  					switch (index)  					{  						case 0:  							return firstPosition;    						case 1:  							return Vector2.Rotate(firstPosition' MathHelper.Tau / 3);    						case 2:  							return Vector2.Rotate(firstPosition' MathHelper.Tau * 2 / 3);    						default:  							throw new IndexOutOfRangeException();  					}    				case BedShape.Rectangular:  				default:  					switch (index)  					{  						case 0:  							return new Vector2(printCenter.x' printCenter.y + (bedSize.y / 2) * .8);    						case 1:  							return new Vector2(printCenter.x - (bedSize.x / 2) * .8' printCenter.y - (bedSize.y / 2) * .8);    						case 2:  							return new Vector2(printCenter.x + (bedSize.x / 2) * .8' printCenter.y - (bedSize.y / 2) * .8);    						default:  							throw new IndexOutOfRangeException();  					}  			}
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,LevelWizardBase,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\LevelWizardBase.cs,GetPrintLevelPositionToSample,The following statement contains a magic number: switch (ActiveSliceSettings.Instance.GetValue<BedShape>(SettingsKey.bed_shape))  			{  				case BedShape.Circular:  					Vector2 firstPosition = new Vector2(printCenter.x' printCenter.y + (bedSize.y / 2) * .5);  					switch (index)  					{  						case 0:  							return firstPosition;    						case 1:  							return Vector2.Rotate(firstPosition' MathHelper.Tau / 3);    						case 2:  							return Vector2.Rotate(firstPosition' MathHelper.Tau * 2 / 3);    						default:  							throw new IndexOutOfRangeException();  					}    				case BedShape.Rectangular:  				default:  					switch (index)  					{  						case 0:  							return new Vector2(printCenter.x' printCenter.y + (bedSize.y / 2) * .8);    						case 1:  							return new Vector2(printCenter.x - (bedSize.x / 2) * .8' printCenter.y - (bedSize.y / 2) * .8);    						case 2:  							return new Vector2(printCenter.x + (bedSize.x / 2) * .8' printCenter.y - (bedSize.y / 2) * .8);    						default:  							throw new IndexOutOfRangeException();  					}  			}
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,LevelWizardBase,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\LevelWizardBase.cs,GetPrintLevelPositionToSample,The following statement contains a magic number: switch (ActiveSliceSettings.Instance.GetValue<BedShape>(SettingsKey.bed_shape))  			{  				case BedShape.Circular:  					Vector2 firstPosition = new Vector2(printCenter.x' printCenter.y + (bedSize.y / 2) * .5);  					switch (index)  					{  						case 0:  							return firstPosition;    						case 1:  							return Vector2.Rotate(firstPosition' MathHelper.Tau / 3);    						case 2:  							return Vector2.Rotate(firstPosition' MathHelper.Tau * 2 / 3);    						default:  							throw new IndexOutOfRangeException();  					}    				case BedShape.Rectangular:  				default:  					switch (index)  					{  						case 0:  							return new Vector2(printCenter.x' printCenter.y + (bedSize.y / 2) * .8);    						case 1:  							return new Vector2(printCenter.x - (bedSize.x / 2) * .8' printCenter.y - (bedSize.y / 2) * .8);    						case 2:  							return new Vector2(printCenter.x + (bedSize.x / 2) * .8' printCenter.y - (bedSize.y / 2) * .8);    						default:  							throw new IndexOutOfRangeException();  					}  			}
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,LevelWizardBase,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\LevelWizardBase.cs,GetPrintLevelPositionToSample,The following statement contains a magic number: switch (ActiveSliceSettings.Instance.GetValue<BedShape>(SettingsKey.bed_shape))  			{  				case BedShape.Circular:  					Vector2 firstPosition = new Vector2(printCenter.x' printCenter.y + (bedSize.y / 2) * .5);  					switch (index)  					{  						case 0:  							return firstPosition;    						case 1:  							return Vector2.Rotate(firstPosition' MathHelper.Tau / 3);    						case 2:  							return Vector2.Rotate(firstPosition' MathHelper.Tau * 2 / 3);    						default:  							throw new IndexOutOfRangeException();  					}    				case BedShape.Rectangular:  				default:  					switch (index)  					{  						case 0:  							return new Vector2(printCenter.x' printCenter.y + (bedSize.y / 2) * .8);    						case 1:  							return new Vector2(printCenter.x - (bedSize.x / 2) * .8' printCenter.y - (bedSize.y / 2) * .8);    						case 2:  							return new Vector2(printCenter.x + (bedSize.x / 2) * .8' printCenter.y - (bedSize.y / 2) * .8);    						default:  							throw new IndexOutOfRangeException();  					}  			}
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,LevelWizardBase,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\LevelWizardBase.cs,GetPrintLevelPositionToSample,The following statement contains a magic number: switch (ActiveSliceSettings.Instance.GetValue<BedShape>(SettingsKey.bed_shape))  			{  				case BedShape.Circular:  					Vector2 firstPosition = new Vector2(printCenter.x' printCenter.y + (bedSize.y / 2) * .5);  					switch (index)  					{  						case 0:  							return firstPosition;    						case 1:  							return Vector2.Rotate(firstPosition' MathHelper.Tau / 3);    						case 2:  							return Vector2.Rotate(firstPosition' MathHelper.Tau * 2 / 3);    						default:  							throw new IndexOutOfRangeException();  					}    				case BedShape.Rectangular:  				default:  					switch (index)  					{  						case 0:  							return new Vector2(printCenter.x' printCenter.y + (bedSize.y / 2) * .8);    						case 1:  							return new Vector2(printCenter.x - (bedSize.x / 2) * .8' printCenter.y - (bedSize.y / 2) * .8);    						case 2:  							return new Vector2(printCenter.x + (bedSize.x / 2) * .8' printCenter.y - (bedSize.y / 2) * .8);    						default:  							throw new IndexOutOfRangeException();  					}  			}
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,LevelWizardBase,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\LevelWizardBase.cs,GetPrintLevelPositionToSample,The following statement contains a magic number: switch (ActiveSliceSettings.Instance.GetValue<BedShape>(SettingsKey.bed_shape))  			{  				case BedShape.Circular:  					Vector2 firstPosition = new Vector2(printCenter.x' printCenter.y + (bedSize.y / 2) * .5);  					switch (index)  					{  						case 0:  							return firstPosition;    						case 1:  							return Vector2.Rotate(firstPosition' MathHelper.Tau / 3);    						case 2:  							return Vector2.Rotate(firstPosition' MathHelper.Tau * 2 / 3);    						default:  							throw new IndexOutOfRangeException();  					}    				case BedShape.Rectangular:  				default:  					switch (index)  					{  						case 0:  							return new Vector2(printCenter.x' printCenter.y + (bedSize.y / 2) * .8);    						case 1:  							return new Vector2(printCenter.x - (bedSize.x / 2) * .8' printCenter.y - (bedSize.y / 2) * .8);    						case 2:  							return new Vector2(printCenter.x + (bedSize.x / 2) * .8' printCenter.y - (bedSize.y / 2) * .8);    						default:  							throw new IndexOutOfRangeException();  					}  			}
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,LevelWizardBase,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\LevelWizardBase.cs,GetPrintLevelPositionToSample,The following statement contains a magic number: switch (ActiveSliceSettings.Instance.GetValue<BedShape>(SettingsKey.bed_shape))  			{  				case BedShape.Circular:  					Vector2 firstPosition = new Vector2(printCenter.x' printCenter.y + (bedSize.y / 2) * .5);  					switch (index)  					{  						case 0:  							return firstPosition;    						case 1:  							return Vector2.Rotate(firstPosition' MathHelper.Tau / 3);    						case 2:  							return Vector2.Rotate(firstPosition' MathHelper.Tau * 2 / 3);    						default:  							throw new IndexOutOfRangeException();  					}    				case BedShape.Rectangular:  				default:  					switch (index)  					{  						case 0:  							return new Vector2(printCenter.x' printCenter.y + (bedSize.y / 2) * .8);    						case 1:  							return new Vector2(printCenter.x - (bedSize.x / 2) * .8' printCenter.y - (bedSize.y / 2) * .8);    						case 2:  							return new Vector2(printCenter.x + (bedSize.x / 2) * .8' printCenter.y - (bedSize.y / 2) * .8);    						default:  							throw new IndexOutOfRangeException();  					}  			}
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,LevelWizardBase,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\LevelWizardBase.cs,GetPrintLevelPositionToSample,The following statement contains a magic number: switch (ActiveSliceSettings.Instance.GetValue<BedShape>(SettingsKey.bed_shape))  			{  				case BedShape.Circular:  					Vector2 firstPosition = new Vector2(printCenter.x' printCenter.y + (bedSize.y / 2) * .5);  					switch (index)  					{  						case 0:  							return firstPosition;    						case 1:  							return Vector2.Rotate(firstPosition' MathHelper.Tau / 3);    						case 2:  							return Vector2.Rotate(firstPosition' MathHelper.Tau * 2 / 3);    						default:  							throw new IndexOutOfRangeException();  					}    				case BedShape.Rectangular:  				default:  					switch (index)  					{  						case 0:  							return new Vector2(printCenter.x' printCenter.y + (bedSize.y / 2) * .8);    						case 1:  							return new Vector2(printCenter.x - (bedSize.x / 2) * .8' printCenter.y - (bedSize.y / 2) * .8);    						case 2:  							return new Vector2(printCenter.x + (bedSize.x / 2) * .8' printCenter.y - (bedSize.y / 2) * .8);    						default:  							throw new IndexOutOfRangeException();  					}  			}
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,LevelWizardBase,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\LevelWizardBase.cs,GetPrintLevelPositionToSample,The following statement contains a magic number: switch (ActiveSliceSettings.Instance.GetValue<BedShape>(SettingsKey.bed_shape))  			{  				case BedShape.Circular:  					Vector2 firstPosition = new Vector2(printCenter.x' printCenter.y + (bedSize.y / 2) * .5);  					switch (index)  					{  						case 0:  							return firstPosition;    						case 1:  							return Vector2.Rotate(firstPosition' MathHelper.Tau / 3);    						case 2:  							return Vector2.Rotate(firstPosition' MathHelper.Tau * 2 / 3);    						default:  							throw new IndexOutOfRangeException();  					}    				case BedShape.Rectangular:  				default:  					switch (index)  					{  						case 0:  							return new Vector2(printCenter.x' printCenter.y + (bedSize.y / 2) * .8);    						case 1:  							return new Vector2(printCenter.x - (bedSize.x / 2) * .8' printCenter.y - (bedSize.y / 2) * .8);    						case 2:  							return new Vector2(printCenter.x + (bedSize.x / 2) * .8' printCenter.y - (bedSize.y / 2) * .8);    						default:  							throw new IndexOutOfRangeException();  					}  			}
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,LevelWizardBase,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\LevelWizardBase.cs,GetPrintLevelPositionToSample,The following statement contains a magic number: switch (ActiveSliceSettings.Instance.GetValue<BedShape>(SettingsKey.bed_shape))  			{  				case BedShape.Circular:  					Vector2 firstPosition = new Vector2(printCenter.x' printCenter.y + (bedSize.y / 2) * .5);  					switch (index)  					{  						case 0:  							return firstPosition;    						case 1:  							return Vector2.Rotate(firstPosition' MathHelper.Tau / 3);    						case 2:  							return Vector2.Rotate(firstPosition' MathHelper.Tau * 2 / 3);    						default:  							throw new IndexOutOfRangeException();  					}    				case BedShape.Rectangular:  				default:  					switch (index)  					{  						case 0:  							return new Vector2(printCenter.x' printCenter.y + (bedSize.y / 2) * .8);    						case 1:  							return new Vector2(printCenter.x - (bedSize.x / 2) * .8' printCenter.y - (bedSize.y / 2) * .8);    						case 2:  							return new Vector2(printCenter.x + (bedSize.x / 2) * .8' printCenter.y - (bedSize.y / 2) * .8);    						default:  							throw new IndexOutOfRangeException();  					}  			}
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,LevelWizardBase,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\LevelWizardBase.cs,GetPrintLevelPositionToSample,The following statement contains a magic number: switch (ActiveSliceSettings.Instance.GetValue<BedShape>(SettingsKey.bed_shape))  			{  				case BedShape.Circular:  					Vector2 firstPosition = new Vector2(printCenter.x' printCenter.y + (bedSize.y / 2) * .5);  					switch (index)  					{  						case 0:  							return firstPosition;    						case 1:  							return Vector2.Rotate(firstPosition' MathHelper.Tau / 3);    						case 2:  							return Vector2.Rotate(firstPosition' MathHelper.Tau * 2 / 3);    						default:  							throw new IndexOutOfRangeException();  					}    				case BedShape.Rectangular:  				default:  					switch (index)  					{  						case 0:  							return new Vector2(printCenter.x' printCenter.y + (bedSize.y / 2) * .8);    						case 1:  							return new Vector2(printCenter.x - (bedSize.x / 2) * .8' printCenter.y - (bedSize.y / 2) * .8);    						case 2:  							return new Vector2(printCenter.x + (bedSize.x / 2) * .8' printCenter.y - (bedSize.y / 2) * .8);    						default:  							throw new IndexOutOfRangeException();  					}  			}
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,LevelWizardBase,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\LevelWizardBase.cs,GetPrintLevelPositionToSample,The following statement contains a magic number: switch (ActiveSliceSettings.Instance.GetValue<BedShape>(SettingsKey.bed_shape))  			{  				case BedShape.Circular:  					Vector2 firstPosition = new Vector2(printCenter.x' printCenter.y + (bedSize.y / 2) * .5);  					switch (index)  					{  						case 0:  							return firstPosition;    						case 1:  							return Vector2.Rotate(firstPosition' MathHelper.Tau / 3);    						case 2:  							return Vector2.Rotate(firstPosition' MathHelper.Tau * 2 / 3);    						default:  							throw new IndexOutOfRangeException();  					}    				case BedShape.Rectangular:  				default:  					switch (index)  					{  						case 0:  							return new Vector2(printCenter.x' printCenter.y + (bedSize.y / 2) * .8);    						case 1:  							return new Vector2(printCenter.x - (bedSize.x / 2) * .8' printCenter.y - (bedSize.y / 2) * .8);    						case 2:  							return new Vector2(printCenter.x + (bedSize.x / 2) * .8' printCenter.y - (bedSize.y / 2) * .8);    						default:  							throw new IndexOutOfRangeException();  					}  			}
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,PrintLevelingData,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\PrintLevelingData.cs,ParseDepricatedPrintLevelingMeasuredPositions,The following statement contains a magic number: SampledPositions = new List<Vector3>(3);
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,PrintLevelingData,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\PrintLevelingData.cs,ParseDepricatedPrintLevelingMeasuredPositions,The following statement contains a magic number: if (depricatedPositionsCsv3ByXYZ != null)  			{  				string[] lines = depricatedPositionsCsv3ByXYZ.Split(''');  				if (lines.Length == 9)  				{  					for (int i = 0; i < 3; i++)  					{  						Vector3 position = new Vector3();    						position.x = double.Parse(lines[0 * 3 + i]);  						position.y = double.Parse(lines[1 * 3 + i]);  						position.z = double.Parse(lines[2 * 3 + i]);    						SampledPositions.Add(position);  					}  				}  			}
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,PrintLevelingData,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\PrintLevelingData.cs,ParseDepricatedPrintLevelingMeasuredPositions,The following statement contains a magic number: if (depricatedPositionsCsv3ByXYZ != null)  			{  				string[] lines = depricatedPositionsCsv3ByXYZ.Split(''');  				if (lines.Length == 9)  				{  					for (int i = 0; i < 3; i++)  					{  						Vector3 position = new Vector3();    						position.x = double.Parse(lines[0 * 3 + i]);  						position.y = double.Parse(lines[1 * 3 + i]);  						position.z = double.Parse(lines[2 * 3 + i]);    						SampledPositions.Add(position);  					}  				}  			}
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,PrintLevelingData,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\PrintLevelingData.cs,ParseDepricatedPrintLevelingMeasuredPositions,The following statement contains a magic number: if (depricatedPositionsCsv3ByXYZ != null)  			{  				string[] lines = depricatedPositionsCsv3ByXYZ.Split(''');  				if (lines.Length == 9)  				{  					for (int i = 0; i < 3; i++)  					{  						Vector3 position = new Vector3();    						position.x = double.Parse(lines[0 * 3 + i]);  						position.y = double.Parse(lines[1 * 3 + i]);  						position.z = double.Parse(lines[2 * 3 + i]);    						SampledPositions.Add(position);  					}  				}  			}
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,PrintLevelingData,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\PrintLevelingData.cs,ParseDepricatedPrintLevelingMeasuredPositions,The following statement contains a magic number: if (depricatedPositionsCsv3ByXYZ != null)  			{  				string[] lines = depricatedPositionsCsv3ByXYZ.Split(''');  				if (lines.Length == 9)  				{  					for (int i = 0; i < 3; i++)  					{  						Vector3 position = new Vector3();    						position.x = double.Parse(lines[0 * 3 + i]);  						position.y = double.Parse(lines[1 * 3 + i]);  						position.z = double.Parse(lines[2 * 3 + i]);    						SampledPositions.Add(position);  					}  				}  			}
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,PrintLevelingData,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\PrintLevelingData.cs,ParseDepricatedPrintLevelingMeasuredPositions,The following statement contains a magic number: if (depricatedPositionsCsv3ByXYZ != null)  			{  				string[] lines = depricatedPositionsCsv3ByXYZ.Split(''');  				if (lines.Length == 9)  				{  					for (int i = 0; i < 3; i++)  					{  						Vector3 position = new Vector3();    						position.x = double.Parse(lines[0 * 3 + i]);  						position.y = double.Parse(lines[1 * 3 + i]);  						position.z = double.Parse(lines[2 * 3 + i]);    						SampledPositions.Add(position);  					}  				}  			}
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,PrintLevelingData,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\PrintLevelingData.cs,ParseDepricatedPrintLevelingMeasuredPositions,The following statement contains a magic number: if (depricatedPositionsCsv3ByXYZ != null)  			{  				string[] lines = depricatedPositionsCsv3ByXYZ.Split(''');  				if (lines.Length == 9)  				{  					for (int i = 0; i < 3; i++)  					{  						Vector3 position = new Vector3();    						position.x = double.Parse(lines[0 * 3 + i]);  						position.y = double.Parse(lines[1 * 3 + i]);  						position.z = double.Parse(lines[2 * 3 + i]);    						SampledPositions.Add(position);  					}  				}  			}
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,PrintLevelingData,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\PrintLevelingData.cs,HasBeenRunAndEnabled,The following statement contains a magic number: switch (CurrentPrinterLevelingSystem)  			{  				case PrintLevelingData.LevelingSystem.Probe3Points:  					if (SampledPositions.Count != 3) // different criteria for what is not initialized  					{  						return false;  					}  					break;    				case PrintLevelingData.LevelingSystem.Probe7PointRadial:  					if (SampledPositions.Count != 7) // different criteria for what is not initialized  					{  						return false;  					}  					break;    				case PrintLevelingData.LevelingSystem.Probe13PointRadial:  					if (SampledPositions.Count != 13) // different criteria for what is not initialized  					{  						return false;  					}  					break;    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,PrintLevelingData,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\PrintLevelingData.cs,HasBeenRunAndEnabled,The following statement contains a magic number: switch (CurrentPrinterLevelingSystem)  			{  				case PrintLevelingData.LevelingSystem.Probe3Points:  					if (SampledPositions.Count != 3) // different criteria for what is not initialized  					{  						return false;  					}  					break;    				case PrintLevelingData.LevelingSystem.Probe7PointRadial:  					if (SampledPositions.Count != 7) // different criteria for what is not initialized  					{  						return false;  					}  					break;    				case PrintLevelingData.LevelingSystem.Probe13PointRadial:  					if (SampledPositions.Count != 13) // different criteria for what is not initialized  					{  						return false;  					}  					break;    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,PrintLevelingData,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\PrintLevelingData.cs,HasBeenRunAndEnabled,The following statement contains a magic number: switch (CurrentPrinterLevelingSystem)  			{  				case PrintLevelingData.LevelingSystem.Probe3Points:  					if (SampledPositions.Count != 3) // different criteria for what is not initialized  					{  						return false;  					}  					break;    				case PrintLevelingData.LevelingSystem.Probe7PointRadial:  					if (SampledPositions.Count != 7) // different criteria for what is not initialized  					{  						return false;  					}  					break;    				case PrintLevelingData.LevelingSystem.Probe13PointRadial:  					if (SampledPositions.Count != 13) // different criteria for what is not initialized  					{  						return false;  					}  					break;    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,LastPage3PointInstructions,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\PrintLevelPages.cs,PageIsBecomingActive,The following statement contains a magic number: levelingData.SampledPositions.Add(probePositions[2].position - paperWidth);
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,GettingThirdPointFor2PointCalibration,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\PrintLevelPages.cs,FinishedProbe,The following statement contains a magic number: if (currentEvent != null)  			{  				if (currentEvent.Data.Contains("endstops hit"))  				{  					PrinterConnectionAndCommunication.Instance.ReadLine.UnregisterEvent(FinishedProbe' ref unregisterEvents);  					int zStringPos = currentEvent.Data.LastIndexOf("Z:");  					string zProbeHeight = currentEvent.Data.Substring(zStringPos + 2);  					probePosition.position = new Vector3(probeStartPosition.x' probeStartPosition.y' double.Parse(zProbeHeight));  					PrinterConnectionAndCommunication.Instance.MoveAbsolute(probeStartPosition' ActiveSliceSettings.Instance.Helpers.ManualMovementSpeeds().z);  					PrinterConnectionAndCommunication.Instance.ReadPosition();    					container.nextButton.ClickButton(new MouseEventArgs(MouseButtons.Left' 1' 0' 0' 0));  				}  			}
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,FindBedHeight,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\PrintLevelPages.cs,FindBedHeight,The following statement contains a magic number: GuiWidget spacer = new GuiWidget(15' 15);
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,FindBedHeight,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\PrintLevelPages.cs,FindBedHeight,The following statement contains a magic number: GuiWidget spacer = new GuiWidget(15' 15);
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,FindBedHeight,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\PrintLevelPages.cs,FindBedHeight,The following statement contains a magic number: zButtonsAndInfo.AddChild(new GuiWidget(15' 10));
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,FindBedHeight,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\PrintLevelPages.cs,FindBedHeight,The following statement contains a magic number: zButtonsAndInfo.AddChild(new GuiWidget(15' 10));
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,FindBedHeight,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\PrintLevelPages.cs,FindBedHeight,The following statement contains a magic number: AddTextField(setZHeightCoarseInstruction2' 10);
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,FindBedHeight,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\PrintLevelPages.cs,CreateZButtons,The following statement contains a magic number: FlowLayoutWidget zButtons = JogControls.CreateZButtons(RGBA_Bytes.White' 4' out zPlusControl' out zMinusControl' true);
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,GetUltraFineBedHeight,C:\repos\MatterHackers_MatterControl\ConfigurationPage\PrintLeveling\PrintLevelPages.cs,PageIsBecomingInactive,The following statement contains a magic number: if (haveDrawn)  			{  				PrinterConnectionAndCommunication.Instance.MoveRelative(PrinterConnectionAndCommunication.Axis.Z' 2' ActiveSliceSettings.Instance.Helpers.ManualMovementSpeeds().z);  			}
Magic Number,MatterHackers.MatterControl.CustomWidgets,BedStatusWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,UpdateTemperatures,The following statement contains a magic number: this.actualTemp.Text = $"{actualValue:0}".PadLeft(3' (char)0x2007) + "°";
Magic Number,MatterHackers.MatterControl.CustomWidgets,BedStatusWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,UpdateTemperatures,The following statement contains a magic number: this.targetTemp.Text = $"{targetValue:0}".PadLeft(3' (char)0x2007) + "°";
Magic Number,MatterHackers.MatterControl.CustomWidgets,ExtruderStatusWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,UpdateTemperatures,The following statement contains a magic number: this.actualTemp.Text = $"{actualValue:0}".PadLeft(3' (char)0x2007) + "°";
Magic Number,MatterHackers.MatterControl.CustomWidgets,ExtruderStatusWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,UpdateTemperatures,The following statement contains a magic number: this.targetTemp.Text = $"{targetValue:0}".PadLeft(3' (char)0x2007) + "°";
Magic Number,MatterHackers.MatterControl.CustomWidgets,TemperatureStatusWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,TemperatureStatusWidget,The following statement contains a magic number: var extruderName = new TextWidget(dispalyName' pointSize: fontSize' textColor: ActiveTheme.Instance.PrimaryTextColor)  			{  				AutoExpandBoundsToText = true'  				VAnchor = VAnchor.ParentCenter'  				Margin = new BorderDouble(right: 8)  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,TemperatureStatusWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,TemperatureStatusWidget,The following statement contains a magic number: progressBar = new ProgressBar(200' 6)  			{  				FillColor = ActiveTheme.Instance.PrimaryAccentColor'  				Margin = new BorderDouble(right: 10)'  				BorderColor = RGBA_Bytes.Transparent'  				BackgroundColor = new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 50)'  				VAnchor = VAnchor.ParentCenter'  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,TemperatureStatusWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,TemperatureStatusWidget,The following statement contains a magic number: progressBar = new ProgressBar(200' 6)  			{  				FillColor = ActiveTheme.Instance.PrimaryAccentColor'  				Margin = new BorderDouble(right: 10)'  				BorderColor = RGBA_Bytes.Transparent'  				BackgroundColor = new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 50)'  				VAnchor = VAnchor.ParentCenter'  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,TemperatureStatusWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,TemperatureStatusWidget,The following statement contains a magic number: progressBar = new ProgressBar(200' 6)  			{  				FillColor = ActiveTheme.Instance.PrimaryAccentColor'  				Margin = new BorderDouble(right: 10)'  				BorderColor = RGBA_Bytes.Transparent'  				BackgroundColor = new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 50)'  				VAnchor = VAnchor.ParentCenter'  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,TemperatureStatusWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,TemperatureStatusWidget,The following statement contains a magic number: progressBar = new ProgressBar(200' 6)  			{  				FillColor = ActiveTheme.Instance.PrimaryAccentColor'  				Margin = new BorderDouble(right: 10)'  				BorderColor = RGBA_Bytes.Transparent'  				BackgroundColor = new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 50)'  				VAnchor = VAnchor.ParentCenter'  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,TemperatureStatusWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,TemperatureStatusWidget,The following statement contains a magic number: actualTemp = new TextWidget(""' pointSize: fontSize' textColor: ActiveTheme.Instance.PrimaryTextColor)  			{  				AutoExpandBoundsToText = true'  				VAnchor = VAnchor.ParentCenter'  				Margin = new BorderDouble(right: 0)'  				Width = 60  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,TemperatureStatusWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,TemperatureStatusWidget,The following statement contains a magic number: this.AddChild(new VerticalLine()  			{  				BackgroundColor = ActiveTheme.Instance.PrimaryTextColor'  				Margin = new BorderDouble(8' 0)  			});
Magic Number,MatterHackers.MatterControl.CustomWidgets,TemperatureStatusWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,TemperatureStatusWidget,The following statement contains a magic number: targetTemp = new TextWidget(""' pointSize: fontSize' textColor: ActiveTheme.Instance.PrimaryTextColor)  			{  				AutoExpandBoundsToText = true'  				VAnchor = VAnchor.ParentCenter'  				Margin = new BorderDouble(right: 8)'  				Width = 60  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,TemperatureStatusWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,TemperatureStatusWidget,The following statement contains a magic number: targetTemp = new TextWidget(""' pointSize: fontSize' textColor: ActiveTheme.Instance.PrimaryTextColor)  			{  				AutoExpandBoundsToText = true'  				VAnchor = VAnchor.ParentCenter'  				Margin = new BorderDouble(right: 8)'  				Width = 60  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,PrintingWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,OnLoad,The following statement contains a magic number: bool smallScreen = Parent.Width <= 1180;
Magic Number,MatterHackers.MatterControl.CustomWidgets,PrintingWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,CreateActionBar,The following statement contains a magic number: var resetButton = CreateButton("Reset".Localize().ToUpper()' smallScreen' true' StaticData.Instance.LoadIcon("e_stop4.png"' 32' 32));
Magic Number,MatterHackers.MatterControl.CustomWidgets,PrintingWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,CreateActionBar,The following statement contains a magic number: var resetButton = CreateButton("Reset".Localize().ToUpper()' smallScreen' true' StaticData.Instance.LoadIcon("e_stop4.png"' 32' 32));
Magic Number,MatterHackers.MatterControl.CustomWidgets,PrintingWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,CreateButton,The following statement contains a magic number: if (smallScreen)  			{  				bounds.Inflate(new BorderDouble(10' 10));  			}  			else  			{  				bounds.Inflate(new BorderDouble(40' 10));  			}
Magic Number,MatterHackers.MatterControl.CustomWidgets,PrintingWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,CreateButton,The following statement contains a magic number: if (smallScreen)  			{  				bounds.Inflate(new BorderDouble(10' 10));  			}  			else  			{  				bounds.Inflate(new BorderDouble(40' 10));  			}
Magic Number,MatterHackers.MatterControl.CustomWidgets,PrintingWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,CreateButton,The following statement contains a magic number: if (smallScreen)  			{  				bounds.Inflate(new BorderDouble(10' 10));  			}  			else  			{  				bounds.Inflate(new BorderDouble(40' 10));  			}
Magic Number,MatterHackers.MatterControl.CustomWidgets,PrintingWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,CreateButton,The following statement contains a magic number: if (smallScreen)  			{  				bounds.Inflate(new BorderDouble(10' 10));  			}  			else  			{  				bounds.Inflate(new BorderDouble(40' 10));  			}
Magic Number,MatterHackers.MatterControl.CustomWidgets,PrintingWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,CreateDropShadow,The following statement contains a magic number: var dropShadowWidget = new GuiWidget()  			{  				HAnchor = HAnchor.ParentLeftRight'  				Height = 12 * GuiWidget.DeviceScale'  				DoubleBuffer = true'  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,PrintingWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,CreateDropShadow,The following statement contains a magic number: dropShadowWidget.AfterDraw += (s' e) =>  			{  				Byte[] buffer = dropShadowWidget.BackBuffer.GetBuffer();  				for (int y = 0; y < dropShadowWidget.Height; y++)  				{  					int yOffset = dropShadowWidget.BackBuffer.GetBufferOffsetY(y);  					byte alpha = (byte)((y / dropShadowWidget.Height) * 100);  					for (int x = 0; x < dropShadowWidget.Width; x++)  					{  						buffer[yOffset + x * 4 + 0] = 0;  						buffer[yOffset + x * 4 + 1] = 0;  						buffer[yOffset + x * 4 + 2] = 0;  						buffer[yOffset + x * 4 + 3] = alpha;  					}  				}  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,PrintingWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,CreateDropShadow,The following statement contains a magic number: dropShadowWidget.AfterDraw += (s' e) =>  			{  				Byte[] buffer = dropShadowWidget.BackBuffer.GetBuffer();  				for (int y = 0; y < dropShadowWidget.Height; y++)  				{  					int yOffset = dropShadowWidget.BackBuffer.GetBufferOffsetY(y);  					byte alpha = (byte)((y / dropShadowWidget.Height) * 100);  					for (int x = 0; x < dropShadowWidget.Width; x++)  					{  						buffer[yOffset + x * 4 + 0] = 0;  						buffer[yOffset + x * 4 + 1] = 0;  						buffer[yOffset + x * 4 + 2] = 0;  						buffer[yOffset + x * 4 + 3] = alpha;  					}  				}  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,PrintingWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,CreateDropShadow,The following statement contains a magic number: dropShadowWidget.AfterDraw += (s' e) =>  			{  				Byte[] buffer = dropShadowWidget.BackBuffer.GetBuffer();  				for (int y = 0; y < dropShadowWidget.Height; y++)  				{  					int yOffset = dropShadowWidget.BackBuffer.GetBufferOffsetY(y);  					byte alpha = (byte)((y / dropShadowWidget.Height) * 100);  					for (int x = 0; x < dropShadowWidget.Width; x++)  					{  						buffer[yOffset + x * 4 + 0] = 0;  						buffer[yOffset + x * 4 + 1] = 0;  						buffer[yOffset + x * 4 + 2] = 0;  						buffer[yOffset + x * 4 + 3] = alpha;  					}  				}  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,PrintingWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,CreateDropShadow,The following statement contains a magic number: dropShadowWidget.AfterDraw += (s' e) =>  			{  				Byte[] buffer = dropShadowWidget.BackBuffer.GetBuffer();  				for (int y = 0; y < dropShadowWidget.Height; y++)  				{  					int yOffset = dropShadowWidget.BackBuffer.GetBufferOffsetY(y);  					byte alpha = (byte)((y / dropShadowWidget.Height) * 100);  					for (int x = 0; x < dropShadowWidget.Width; x++)  					{  						buffer[yOffset + x * 4 + 0] = 0;  						buffer[yOffset + x * 4 + 1] = 0;  						buffer[yOffset + x * 4 + 2] = 0;  						buffer[yOffset + x * 4 + 3] = alpha;  					}  				}  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,PrintingWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,CreateDropShadow,The following statement contains a magic number: dropShadowWidget.AfterDraw += (s' e) =>  			{  				Byte[] buffer = dropShadowWidget.BackBuffer.GetBuffer();  				for (int y = 0; y < dropShadowWidget.Height; y++)  				{  					int yOffset = dropShadowWidget.BackBuffer.GetBufferOffsetY(y);  					byte alpha = (byte)((y / dropShadowWidget.Height) * 100);  					for (int x = 0; x < dropShadowWidget.Width; x++)  					{  						buffer[yOffset + x * 4 + 0] = 0;  						buffer[yOffset + x * 4 + 1] = 0;  						buffer[yOffset + x * 4 + 2] = 0;  						buffer[yOffset + x * 4 + 3] = alpha;  					}  				}  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,PrintingWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,CreateDropShadow,The following statement contains a magic number: dropShadowWidget.AfterDraw += (s' e) =>  			{  				Byte[] buffer = dropShadowWidget.BackBuffer.GetBuffer();  				for (int y = 0; y < dropShadowWidget.Height; y++)  				{  					int yOffset = dropShadowWidget.BackBuffer.GetBufferOffsetY(y);  					byte alpha = (byte)((y / dropShadowWidget.Height) * 100);  					for (int x = 0; x < dropShadowWidget.Width; x++)  					{  						buffer[yOffset + x * 4 + 0] = 0;  						buffer[yOffset + x * 4 + 1] = 0;  						buffer[yOffset + x * 4 + 2] = 0;  						buffer[yOffset + x * 4 + 3] = alpha;  					}  				}  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,PrintingWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,CreateDropShadow,The following statement contains a magic number: dropShadowWidget.AfterDraw += (s' e) =>  			{  				Byte[] buffer = dropShadowWidget.BackBuffer.GetBuffer();  				for (int y = 0; y < dropShadowWidget.Height; y++)  				{  					int yOffset = dropShadowWidget.BackBuffer.GetBufferOffsetY(y);  					byte alpha = (byte)((y / dropShadowWidget.Height) * 100);  					for (int x = 0; x < dropShadowWidget.Width; x++)  					{  						buffer[yOffset + x * 4 + 0] = 0;  						buffer[yOffset + x * 4 + 1] = 0;  						buffer[yOffset + x * 4 + 2] = 0;  						buffer[yOffset + x * 4 + 3] = alpha;  					}  				}  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,PrintingWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,CreateHorizontalLine,The following statement contains a magic number: return new HorizontalLine()  			{  				BackgroundColor = new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 50)  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,PrintingWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,CreateVerticalLine,The following statement contains a magic number: return new VerticalLine()  			{  				BackgroundColor = new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 50)  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,BasicBody,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,GetProgressInfo,The following statement contains a magic number: int hoursPrinted = (int)(secondsPrinted / (60 * 60));
Magic Number,MatterHackers.MatterControl.CustomWidgets,BasicBody,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,GetProgressInfo,The following statement contains a magic number: int hoursPrinted = (int)(secondsPrinted / (60 * 60));
Magic Number,MatterHackers.MatterControl.CustomWidgets,BasicBody,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,GetProgressInfo,The following statement contains a magic number: int minutesPrinted = (secondsPrinted / 60 - hoursPrinted * 60);
Magic Number,MatterHackers.MatterControl.CustomWidgets,BasicBody,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,GetProgressInfo,The following statement contains a magic number: int minutesPrinted = (secondsPrinted / 60 - hoursPrinted * 60);
Magic Number,MatterHackers.MatterControl.CustomWidgets,BasicBody,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,GetProgressInfo,The following statement contains a magic number: secondsPrinted = secondsPrinted % 60;
Magic Number,MatterHackers.MatterControl.CustomWidgets,BasicBody,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,GetProgressInfo,The following statement contains a magic number: progressDial.CompletedRatio = PrinterConnectionAndCommunication.Instance.PercentComplete / 100;
Magic Number,MatterHackers.MatterControl.CustomWidgets,BasicBody,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,OnLoad,The following statement contains a magic number: bool smallScreen = Parent.Width <= 1180;
Magic Number,MatterHackers.MatterControl.CustomWidgets,BasicBody,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,OnLoad,The following statement contains a magic number: Padding = smallScreen ? new BorderDouble(20' 5) : new BorderDouble(50' 30);
Magic Number,MatterHackers.MatterControl.CustomWidgets,BasicBody,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,OnLoad,The following statement contains a magic number: Padding = smallScreen ? new BorderDouble(20' 5) : new BorderDouble(50' 30);
Magic Number,MatterHackers.MatterControl.CustomWidgets,BasicBody,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,OnLoad,The following statement contains a magic number: Padding = smallScreen ? new BorderDouble(20' 5) : new BorderDouble(50' 30);
Magic Number,MatterHackers.MatterControl.CustomWidgets,BasicBody,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,OnLoad,The following statement contains a magic number: Padding = smallScreen ? new BorderDouble(20' 5) : new BorderDouble(50' 30);
Magic Number,MatterHackers.MatterControl.CustomWidgets,BasicBody,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,OnLoad,The following statement contains a magic number: var bodyRow = new FlowLayoutWidget(FlowDirection.LeftToRight)  			{  				VAnchor = VAnchor.ParentBottomTop'  				HAnchor = HAnchor.ParentLeftRight'  				Margin = smallScreen ? new BorderDouble(30' 5' 30' 0) : new BorderDouble(30'20' 30' 0)' // the -12 is to take out the top bar  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,BasicBody,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,OnLoad,The following statement contains a magic number: var bodyRow = new FlowLayoutWidget(FlowDirection.LeftToRight)  			{  				VAnchor = VAnchor.ParentBottomTop'  				HAnchor = HAnchor.ParentLeftRight'  				Margin = smallScreen ? new BorderDouble(30' 5' 30' 0) : new BorderDouble(30'20' 30' 0)' // the -12 is to take out the top bar  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,BasicBody,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,OnLoad,The following statement contains a magic number: var bodyRow = new FlowLayoutWidget(FlowDirection.LeftToRight)  			{  				VAnchor = VAnchor.ParentBottomTop'  				HAnchor = HAnchor.ParentLeftRight'  				Margin = smallScreen ? new BorderDouble(30' 5' 30' 0) : new BorderDouble(30'20' 30' 0)' // the -12 is to take out the top bar  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,BasicBody,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,OnLoad,The following statement contains a magic number: var bodyRow = new FlowLayoutWidget(FlowDirection.LeftToRight)  			{  				VAnchor = VAnchor.ParentBottomTop'  				HAnchor = HAnchor.ParentLeftRight'  				Margin = smallScreen ? new BorderDouble(30' 5' 30' 0) : new BorderDouble(30'20' 30' 0)' // the -12 is to take out the top bar  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,BasicBody,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,OnLoad,The following statement contains a magic number: var bodyRow = new FlowLayoutWidget(FlowDirection.LeftToRight)  			{  				VAnchor = VAnchor.ParentBottomTop'  				HAnchor = HAnchor.ParentLeftRight'  				Margin = smallScreen ? new BorderDouble(30' 5' 30' 0) : new BorderDouble(30'20' 30' 0)' // the -12 is to take out the top bar  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,BasicBody,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,OnLoad,The following statement contains a magic number: var bodyRow = new FlowLayoutWidget(FlowDirection.LeftToRight)  			{  				VAnchor = VAnchor.ParentBottomTop'  				HAnchor = HAnchor.ParentLeftRight'  				Margin = smallScreen ? new BorderDouble(30' 5' 30' 0) : new BorderDouble(30'20' 30' 0)' // the -12 is to take out the top bar  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,BasicBody,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,OnLoad,The following statement contains a magic number: {  				int imageSize = smallScreen ? 300 : 500;  				ImageBuffer imageBuffer = PartThumbnailWidget.GetImageForItem(PrinterConnectionAndCommunication.Instance.ActivePrintItem' imageSize' imageSize);    				if (imageBuffer == null)  				{  					imageBuffer = StaticData.Instance.LoadImage(Path.Combine("Images"' "Screensaver"' "part_thumbnail.png"));  				}    				WhiteToColor.DoWhiteToColor(imageBuffer' ActiveTheme.Instance.PrimaryAccentColor);    				var partThumbnail = new ImageWidget(imageBuffer)  				{  					VAnchor = VAnchor.ParentCenter'  					Margin = smallScreen ? new BorderDouble(right: 20) : new BorderDouble(right: 50)'  				};  				bodyRow.AddChild(partThumbnail);  			}
Magic Number,MatterHackers.MatterControl.CustomWidgets,BasicBody,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,OnLoad,The following statement contains a magic number: {  				int imageSize = smallScreen ? 300 : 500;  				ImageBuffer imageBuffer = PartThumbnailWidget.GetImageForItem(PrinterConnectionAndCommunication.Instance.ActivePrintItem' imageSize' imageSize);    				if (imageBuffer == null)  				{  					imageBuffer = StaticData.Instance.LoadImage(Path.Combine("Images"' "Screensaver"' "part_thumbnail.png"));  				}    				WhiteToColor.DoWhiteToColor(imageBuffer' ActiveTheme.Instance.PrimaryAccentColor);    				var partThumbnail = new ImageWidget(imageBuffer)  				{  					VAnchor = VAnchor.ParentCenter'  					Margin = smallScreen ? new BorderDouble(right: 20) : new BorderDouble(right: 50)'  				};  				bodyRow.AddChild(partThumbnail);  			}
Magic Number,MatterHackers.MatterControl.CustomWidgets,BasicBody,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,OnLoad,The following statement contains a magic number: {  				int imageSize = smallScreen ? 300 : 500;  				ImageBuffer imageBuffer = PartThumbnailWidget.GetImageForItem(PrinterConnectionAndCommunication.Instance.ActivePrintItem' imageSize' imageSize);    				if (imageBuffer == null)  				{  					imageBuffer = StaticData.Instance.LoadImage(Path.Combine("Images"' "Screensaver"' "part_thumbnail.png"));  				}    				WhiteToColor.DoWhiteToColor(imageBuffer' ActiveTheme.Instance.PrimaryAccentColor);    				var partThumbnail = new ImageWidget(imageBuffer)  				{  					VAnchor = VAnchor.ParentCenter'  					Margin = smallScreen ? new BorderDouble(right: 20) : new BorderDouble(right: 50)'  				};  				bodyRow.AddChild(partThumbnail);  			}
Magic Number,MatterHackers.MatterControl.CustomWidgets,BasicBody,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,OnLoad,The following statement contains a magic number: {  				int imageSize = smallScreen ? 300 : 500;  				ImageBuffer imageBuffer = PartThumbnailWidget.GetImageForItem(PrinterConnectionAndCommunication.Instance.ActivePrintItem' imageSize' imageSize);    				if (imageBuffer == null)  				{  					imageBuffer = StaticData.Instance.LoadImage(Path.Combine("Images"' "Screensaver"' "part_thumbnail.png"));  				}    				WhiteToColor.DoWhiteToColor(imageBuffer' ActiveTheme.Instance.PrimaryAccentColor);    				var partThumbnail = new ImageWidget(imageBuffer)  				{  					VAnchor = VAnchor.ParentCenter'  					Margin = smallScreen ? new BorderDouble(right: 20) : new BorderDouble(right: 50)'  				};  				bodyRow.AddChild(partThumbnail);  			}
Magic Number,MatterHackers.MatterControl.CustomWidgets,BasicBody,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,OnLoad,The following statement contains a magic number: {  				var expandingContainer = new HorizontalSpacer()  				{  					VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter  				};  				bodyRow.AddChild(expandingContainer);    				var progressContainer = new FlowLayoutWidget(FlowDirection.TopToBottom)  				{  					Margin = new BorderDouble(50' 0)'  					VAnchor = VAnchor.ParentCenter | VAnchor.FitToChildren'  					HAnchor = HAnchor.ParentCenter | HAnchor.FitToChildren'  				};  				expandingContainer.AddChild(progressContainer);    				progressDial = new ProgressDial()  				{  					HAnchor = HAnchor.ParentCenter'  					Height = 200 * DeviceScale'  					Width = 200 * DeviceScale  				};  				progressContainer.AddChild(progressDial);    				var timeContainer = new FlowLayoutWidget()  				{  					HAnchor = HAnchor.ParentCenter | HAnchor.FitToChildren'  					Margin = 3  				};  				progressContainer.AddChild(timeContainer);    				var timeImage = StaticData.Instance.LoadImage(Path.Combine("Images"' "Screensaver"' "time.png"));  				if (!ActiveTheme.Instance.IsDarkTheme)  				{  					timeImage.InvertLightness();  				}    				timeContainer.AddChild(new ImageWidget(timeImage));    				timeWidget = new TextWidget(""' pointSize: 22' textColor: ActiveTheme.Instance.PrimaryTextColor)  				{  					AutoExpandBoundsToText = true'  					Margin = new BorderDouble(10' 0' 0' 0)'  					VAnchor = VAnchor.ParentCenter'  				};    				timeContainer.AddChild(timeWidget);    				int maxTextWidth = 350;  				printerName = new TextWidget(ActiveSliceSettings.Instance.GetValue(SettingsKey.printer_name)' pointSize: 16' textColor: ActiveTheme.Instance.PrimaryTextColor)  				{  					HAnchor = HAnchor.ParentCenter'  					MinimumSize = new Vector2(maxTextWidth' MinimumSize.y)'  					Width = maxTextWidth'  					Margin = new BorderDouble(0' 3)'  				};    				progressContainer.AddChild(printerName);    				partName = new TextWidget(PrinterConnectionAndCommunication.Instance.ActivePrintItem.GetFriendlyName()' pointSize: 16' textColor: ActiveTheme.Instance.PrimaryTextColor)  				{  					HAnchor = HAnchor.ParentCenter'  					MinimumSize = new Vector2(maxTextWidth' MinimumSize.y)'  					Width = maxTextWidth'  					Margin = new BorderDouble(0' 3)  				};  				progressContainer.AddChild(partName);  			}
Magic Number,MatterHackers.MatterControl.CustomWidgets,BasicBody,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,OnLoad,The following statement contains a magic number: {  				var expandingContainer = new HorizontalSpacer()  				{  					VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter  				};  				bodyRow.AddChild(expandingContainer);    				var progressContainer = new FlowLayoutWidget(FlowDirection.TopToBottom)  				{  					Margin = new BorderDouble(50' 0)'  					VAnchor = VAnchor.ParentCenter | VAnchor.FitToChildren'  					HAnchor = HAnchor.ParentCenter | HAnchor.FitToChildren'  				};  				expandingContainer.AddChild(progressContainer);    				progressDial = new ProgressDial()  				{  					HAnchor = HAnchor.ParentCenter'  					Height = 200 * DeviceScale'  					Width = 200 * DeviceScale  				};  				progressContainer.AddChild(progressDial);    				var timeContainer = new FlowLayoutWidget()  				{  					HAnchor = HAnchor.ParentCenter | HAnchor.FitToChildren'  					Margin = 3  				};  				progressContainer.AddChild(timeContainer);    				var timeImage = StaticData.Instance.LoadImage(Path.Combine("Images"' "Screensaver"' "time.png"));  				if (!ActiveTheme.Instance.IsDarkTheme)  				{  					timeImage.InvertLightness();  				}    				timeContainer.AddChild(new ImageWidget(timeImage));    				timeWidget = new TextWidget(""' pointSize: 22' textColor: ActiveTheme.Instance.PrimaryTextColor)  				{  					AutoExpandBoundsToText = true'  					Margin = new BorderDouble(10' 0' 0' 0)'  					VAnchor = VAnchor.ParentCenter'  				};    				timeContainer.AddChild(timeWidget);    				int maxTextWidth = 350;  				printerName = new TextWidget(ActiveSliceSettings.Instance.GetValue(SettingsKey.printer_name)' pointSize: 16' textColor: ActiveTheme.Instance.PrimaryTextColor)  				{  					HAnchor = HAnchor.ParentCenter'  					MinimumSize = new Vector2(maxTextWidth' MinimumSize.y)'  					Width = maxTextWidth'  					Margin = new BorderDouble(0' 3)'  				};    				progressContainer.AddChild(printerName);    				partName = new TextWidget(PrinterConnectionAndCommunication.Instance.ActivePrintItem.GetFriendlyName()' pointSize: 16' textColor: ActiveTheme.Instance.PrimaryTextColor)  				{  					HAnchor = HAnchor.ParentCenter'  					MinimumSize = new Vector2(maxTextWidth' MinimumSize.y)'  					Width = maxTextWidth'  					Margin = new BorderDouble(0' 3)  				};  				progressContainer.AddChild(partName);  			}
Magic Number,MatterHackers.MatterControl.CustomWidgets,BasicBody,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,OnLoad,The following statement contains a magic number: {  				var expandingContainer = new HorizontalSpacer()  				{  					VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter  				};  				bodyRow.AddChild(expandingContainer);    				var progressContainer = new FlowLayoutWidget(FlowDirection.TopToBottom)  				{  					Margin = new BorderDouble(50' 0)'  					VAnchor = VAnchor.ParentCenter | VAnchor.FitToChildren'  					HAnchor = HAnchor.ParentCenter | HAnchor.FitToChildren'  				};  				expandingContainer.AddChild(progressContainer);    				progressDial = new ProgressDial()  				{  					HAnchor = HAnchor.ParentCenter'  					Height = 200 * DeviceScale'  					Width = 200 * DeviceScale  				};  				progressContainer.AddChild(progressDial);    				var timeContainer = new FlowLayoutWidget()  				{  					HAnchor = HAnchor.ParentCenter | HAnchor.FitToChildren'  					Margin = 3  				};  				progressContainer.AddChild(timeContainer);    				var timeImage = StaticData.Instance.LoadImage(Path.Combine("Images"' "Screensaver"' "time.png"));  				if (!ActiveTheme.Instance.IsDarkTheme)  				{  					timeImage.InvertLightness();  				}    				timeContainer.AddChild(new ImageWidget(timeImage));    				timeWidget = new TextWidget(""' pointSize: 22' textColor: ActiveTheme.Instance.PrimaryTextColor)  				{  					AutoExpandBoundsToText = true'  					Margin = new BorderDouble(10' 0' 0' 0)'  					VAnchor = VAnchor.ParentCenter'  				};    				timeContainer.AddChild(timeWidget);    				int maxTextWidth = 350;  				printerName = new TextWidget(ActiveSliceSettings.Instance.GetValue(SettingsKey.printer_name)' pointSize: 16' textColor: ActiveTheme.Instance.PrimaryTextColor)  				{  					HAnchor = HAnchor.ParentCenter'  					MinimumSize = new Vector2(maxTextWidth' MinimumSize.y)'  					Width = maxTextWidth'  					Margin = new BorderDouble(0' 3)'  				};    				progressContainer.AddChild(printerName);    				partName = new TextWidget(PrinterConnectionAndCommunication.Instance.ActivePrintItem.GetFriendlyName()' pointSize: 16' textColor: ActiveTheme.Instance.PrimaryTextColor)  				{  					HAnchor = HAnchor.ParentCenter'  					MinimumSize = new Vector2(maxTextWidth' MinimumSize.y)'  					Width = maxTextWidth'  					Margin = new BorderDouble(0' 3)  				};  				progressContainer.AddChild(partName);  			}
Magic Number,MatterHackers.MatterControl.CustomWidgets,BasicBody,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,OnLoad,The following statement contains a magic number: {  				var expandingContainer = new HorizontalSpacer()  				{  					VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter  				};  				bodyRow.AddChild(expandingContainer);    				var progressContainer = new FlowLayoutWidget(FlowDirection.TopToBottom)  				{  					Margin = new BorderDouble(50' 0)'  					VAnchor = VAnchor.ParentCenter | VAnchor.FitToChildren'  					HAnchor = HAnchor.ParentCenter | HAnchor.FitToChildren'  				};  				expandingContainer.AddChild(progressContainer);    				progressDial = new ProgressDial()  				{  					HAnchor = HAnchor.ParentCenter'  					Height = 200 * DeviceScale'  					Width = 200 * DeviceScale  				};  				progressContainer.AddChild(progressDial);    				var timeContainer = new FlowLayoutWidget()  				{  					HAnchor = HAnchor.ParentCenter | HAnchor.FitToChildren'  					Margin = 3  				};  				progressContainer.AddChild(timeContainer);    				var timeImage = StaticData.Instance.LoadImage(Path.Combine("Images"' "Screensaver"' "time.png"));  				if (!ActiveTheme.Instance.IsDarkTheme)  				{  					timeImage.InvertLightness();  				}    				timeContainer.AddChild(new ImageWidget(timeImage));    				timeWidget = new TextWidget(""' pointSize: 22' textColor: ActiveTheme.Instance.PrimaryTextColor)  				{  					AutoExpandBoundsToText = true'  					Margin = new BorderDouble(10' 0' 0' 0)'  					VAnchor = VAnchor.ParentCenter'  				};    				timeContainer.AddChild(timeWidget);    				int maxTextWidth = 350;  				printerName = new TextWidget(ActiveSliceSettings.Instance.GetValue(SettingsKey.printer_name)' pointSize: 16' textColor: ActiveTheme.Instance.PrimaryTextColor)  				{  					HAnchor = HAnchor.ParentCenter'  					MinimumSize = new Vector2(maxTextWidth' MinimumSize.y)'  					Width = maxTextWidth'  					Margin = new BorderDouble(0' 3)'  				};    				progressContainer.AddChild(printerName);    				partName = new TextWidget(PrinterConnectionAndCommunication.Instance.ActivePrintItem.GetFriendlyName()' pointSize: 16' textColor: ActiveTheme.Instance.PrimaryTextColor)  				{  					HAnchor = HAnchor.ParentCenter'  					MinimumSize = new Vector2(maxTextWidth' MinimumSize.y)'  					Width = maxTextWidth'  					Margin = new BorderDouble(0' 3)  				};  				progressContainer.AddChild(partName);  			}
Magic Number,MatterHackers.MatterControl.CustomWidgets,BasicBody,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,OnLoad,The following statement contains a magic number: {  				var expandingContainer = new HorizontalSpacer()  				{  					VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter  				};  				bodyRow.AddChild(expandingContainer);    				var progressContainer = new FlowLayoutWidget(FlowDirection.TopToBottom)  				{  					Margin = new BorderDouble(50' 0)'  					VAnchor = VAnchor.ParentCenter | VAnchor.FitToChildren'  					HAnchor = HAnchor.ParentCenter | HAnchor.FitToChildren'  				};  				expandingContainer.AddChild(progressContainer);    				progressDial = new ProgressDial()  				{  					HAnchor = HAnchor.ParentCenter'  					Height = 200 * DeviceScale'  					Width = 200 * DeviceScale  				};  				progressContainer.AddChild(progressDial);    				var timeContainer = new FlowLayoutWidget()  				{  					HAnchor = HAnchor.ParentCenter | HAnchor.FitToChildren'  					Margin = 3  				};  				progressContainer.AddChild(timeContainer);    				var timeImage = StaticData.Instance.LoadImage(Path.Combine("Images"' "Screensaver"' "time.png"));  				if (!ActiveTheme.Instance.IsDarkTheme)  				{  					timeImage.InvertLightness();  				}    				timeContainer.AddChild(new ImageWidget(timeImage));    				timeWidget = new TextWidget(""' pointSize: 22' textColor: ActiveTheme.Instance.PrimaryTextColor)  				{  					AutoExpandBoundsToText = true'  					Margin = new BorderDouble(10' 0' 0' 0)'  					VAnchor = VAnchor.ParentCenter'  				};    				timeContainer.AddChild(timeWidget);    				int maxTextWidth = 350;  				printerName = new TextWidget(ActiveSliceSettings.Instance.GetValue(SettingsKey.printer_name)' pointSize: 16' textColor: ActiveTheme.Instance.PrimaryTextColor)  				{  					HAnchor = HAnchor.ParentCenter'  					MinimumSize = new Vector2(maxTextWidth' MinimumSize.y)'  					Width = maxTextWidth'  					Margin = new BorderDouble(0' 3)'  				};    				progressContainer.AddChild(printerName);    				partName = new TextWidget(PrinterConnectionAndCommunication.Instance.ActivePrintItem.GetFriendlyName()' pointSize: 16' textColor: ActiveTheme.Instance.PrimaryTextColor)  				{  					HAnchor = HAnchor.ParentCenter'  					MinimumSize = new Vector2(maxTextWidth' MinimumSize.y)'  					Width = maxTextWidth'  					Margin = new BorderDouble(0' 3)  				};  				progressContainer.AddChild(partName);  			}
Magic Number,MatterHackers.MatterControl.CustomWidgets,BasicBody,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,OnLoad,The following statement contains a magic number: {  				var expandingContainer = new HorizontalSpacer()  				{  					VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter  				};  				bodyRow.AddChild(expandingContainer);    				var progressContainer = new FlowLayoutWidget(FlowDirection.TopToBottom)  				{  					Margin = new BorderDouble(50' 0)'  					VAnchor = VAnchor.ParentCenter | VAnchor.FitToChildren'  					HAnchor = HAnchor.ParentCenter | HAnchor.FitToChildren'  				};  				expandingContainer.AddChild(progressContainer);    				progressDial = new ProgressDial()  				{  					HAnchor = HAnchor.ParentCenter'  					Height = 200 * DeviceScale'  					Width = 200 * DeviceScale  				};  				progressContainer.AddChild(progressDial);    				var timeContainer = new FlowLayoutWidget()  				{  					HAnchor = HAnchor.ParentCenter | HAnchor.FitToChildren'  					Margin = 3  				};  				progressContainer.AddChild(timeContainer);    				var timeImage = StaticData.Instance.LoadImage(Path.Combine("Images"' "Screensaver"' "time.png"));  				if (!ActiveTheme.Instance.IsDarkTheme)  				{  					timeImage.InvertLightness();  				}    				timeContainer.AddChild(new ImageWidget(timeImage));    				timeWidget = new TextWidget(""' pointSize: 22' textColor: ActiveTheme.Instance.PrimaryTextColor)  				{  					AutoExpandBoundsToText = true'  					Margin = new BorderDouble(10' 0' 0' 0)'  					VAnchor = VAnchor.ParentCenter'  				};    				timeContainer.AddChild(timeWidget);    				int maxTextWidth = 350;  				printerName = new TextWidget(ActiveSliceSettings.Instance.GetValue(SettingsKey.printer_name)' pointSize: 16' textColor: ActiveTheme.Instance.PrimaryTextColor)  				{  					HAnchor = HAnchor.ParentCenter'  					MinimumSize = new Vector2(maxTextWidth' MinimumSize.y)'  					Width = maxTextWidth'  					Margin = new BorderDouble(0' 3)'  				};    				progressContainer.AddChild(printerName);    				partName = new TextWidget(PrinterConnectionAndCommunication.Instance.ActivePrintItem.GetFriendlyName()' pointSize: 16' textColor: ActiveTheme.Instance.PrimaryTextColor)  				{  					HAnchor = HAnchor.ParentCenter'  					MinimumSize = new Vector2(maxTextWidth' MinimumSize.y)'  					Width = maxTextWidth'  					Margin = new BorderDouble(0' 3)  				};  				progressContainer.AddChild(partName);  			}
Magic Number,MatterHackers.MatterControl.CustomWidgets,BasicBody,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,OnLoad,The following statement contains a magic number: {  				var expandingContainer = new HorizontalSpacer()  				{  					VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter  				};  				bodyRow.AddChild(expandingContainer);    				var progressContainer = new FlowLayoutWidget(FlowDirection.TopToBottom)  				{  					Margin = new BorderDouble(50' 0)'  					VAnchor = VAnchor.ParentCenter | VAnchor.FitToChildren'  					HAnchor = HAnchor.ParentCenter | HAnchor.FitToChildren'  				};  				expandingContainer.AddChild(progressContainer);    				progressDial = new ProgressDial()  				{  					HAnchor = HAnchor.ParentCenter'  					Height = 200 * DeviceScale'  					Width = 200 * DeviceScale  				};  				progressContainer.AddChild(progressDial);    				var timeContainer = new FlowLayoutWidget()  				{  					HAnchor = HAnchor.ParentCenter | HAnchor.FitToChildren'  					Margin = 3  				};  				progressContainer.AddChild(timeContainer);    				var timeImage = StaticData.Instance.LoadImage(Path.Combine("Images"' "Screensaver"' "time.png"));  				if (!ActiveTheme.Instance.IsDarkTheme)  				{  					timeImage.InvertLightness();  				}    				timeContainer.AddChild(new ImageWidget(timeImage));    				timeWidget = new TextWidget(""' pointSize: 22' textColor: ActiveTheme.Instance.PrimaryTextColor)  				{  					AutoExpandBoundsToText = true'  					Margin = new BorderDouble(10' 0' 0' 0)'  					VAnchor = VAnchor.ParentCenter'  				};    				timeContainer.AddChild(timeWidget);    				int maxTextWidth = 350;  				printerName = new TextWidget(ActiveSliceSettings.Instance.GetValue(SettingsKey.printer_name)' pointSize: 16' textColor: ActiveTheme.Instance.PrimaryTextColor)  				{  					HAnchor = HAnchor.ParentCenter'  					MinimumSize = new Vector2(maxTextWidth' MinimumSize.y)'  					Width = maxTextWidth'  					Margin = new BorderDouble(0' 3)'  				};    				progressContainer.AddChild(printerName);    				partName = new TextWidget(PrinterConnectionAndCommunication.Instance.ActivePrintItem.GetFriendlyName()' pointSize: 16' textColor: ActiveTheme.Instance.PrimaryTextColor)  				{  					HAnchor = HAnchor.ParentCenter'  					MinimumSize = new Vector2(maxTextWidth' MinimumSize.y)'  					Width = maxTextWidth'  					Margin = new BorderDouble(0' 3)  				};  				progressContainer.AddChild(partName);  			}
Magic Number,MatterHackers.MatterControl.CustomWidgets,BasicBody,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,OnLoad,The following statement contains a magic number: {  				var expandingContainer = new HorizontalSpacer()  				{  					VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter  				};  				bodyRow.AddChild(expandingContainer);    				var progressContainer = new FlowLayoutWidget(FlowDirection.TopToBottom)  				{  					Margin = new BorderDouble(50' 0)'  					VAnchor = VAnchor.ParentCenter | VAnchor.FitToChildren'  					HAnchor = HAnchor.ParentCenter | HAnchor.FitToChildren'  				};  				expandingContainer.AddChild(progressContainer);    				progressDial = new ProgressDial()  				{  					HAnchor = HAnchor.ParentCenter'  					Height = 200 * DeviceScale'  					Width = 200 * DeviceScale  				};  				progressContainer.AddChild(progressDial);    				var timeContainer = new FlowLayoutWidget()  				{  					HAnchor = HAnchor.ParentCenter | HAnchor.FitToChildren'  					Margin = 3  				};  				progressContainer.AddChild(timeContainer);    				var timeImage = StaticData.Instance.LoadImage(Path.Combine("Images"' "Screensaver"' "time.png"));  				if (!ActiveTheme.Instance.IsDarkTheme)  				{  					timeImage.InvertLightness();  				}    				timeContainer.AddChild(new ImageWidget(timeImage));    				timeWidget = new TextWidget(""' pointSize: 22' textColor: ActiveTheme.Instance.PrimaryTextColor)  				{  					AutoExpandBoundsToText = true'  					Margin = new BorderDouble(10' 0' 0' 0)'  					VAnchor = VAnchor.ParentCenter'  				};    				timeContainer.AddChild(timeWidget);    				int maxTextWidth = 350;  				printerName = new TextWidget(ActiveSliceSettings.Instance.GetValue(SettingsKey.printer_name)' pointSize: 16' textColor: ActiveTheme.Instance.PrimaryTextColor)  				{  					HAnchor = HAnchor.ParentCenter'  					MinimumSize = new Vector2(maxTextWidth' MinimumSize.y)'  					Width = maxTextWidth'  					Margin = new BorderDouble(0' 3)'  				};    				progressContainer.AddChild(printerName);    				partName = new TextWidget(PrinterConnectionAndCommunication.Instance.ActivePrintItem.GetFriendlyName()' pointSize: 16' textColor: ActiveTheme.Instance.PrimaryTextColor)  				{  					HAnchor = HAnchor.ParentCenter'  					MinimumSize = new Vector2(maxTextWidth' MinimumSize.y)'  					Width = maxTextWidth'  					Margin = new BorderDouble(0' 3)  				};  				progressContainer.AddChild(partName);  			}
Magic Number,MatterHackers.MatterControl.CustomWidgets,BasicBody,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,OnLoad,The following statement contains a magic number: {  				var expandingContainer = new HorizontalSpacer()  				{  					VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter  				};  				bodyRow.AddChild(expandingContainer);    				var progressContainer = new FlowLayoutWidget(FlowDirection.TopToBottom)  				{  					Margin = new BorderDouble(50' 0)'  					VAnchor = VAnchor.ParentCenter | VAnchor.FitToChildren'  					HAnchor = HAnchor.ParentCenter | HAnchor.FitToChildren'  				};  				expandingContainer.AddChild(progressContainer);    				progressDial = new ProgressDial()  				{  					HAnchor = HAnchor.ParentCenter'  					Height = 200 * DeviceScale'  					Width = 200 * DeviceScale  				};  				progressContainer.AddChild(progressDial);    				var timeContainer = new FlowLayoutWidget()  				{  					HAnchor = HAnchor.ParentCenter | HAnchor.FitToChildren'  					Margin = 3  				};  				progressContainer.AddChild(timeContainer);    				var timeImage = StaticData.Instance.LoadImage(Path.Combine("Images"' "Screensaver"' "time.png"));  				if (!ActiveTheme.Instance.IsDarkTheme)  				{  					timeImage.InvertLightness();  				}    				timeContainer.AddChild(new ImageWidget(timeImage));    				timeWidget = new TextWidget(""' pointSize: 22' textColor: ActiveTheme.Instance.PrimaryTextColor)  				{  					AutoExpandBoundsToText = true'  					Margin = new BorderDouble(10' 0' 0' 0)'  					VAnchor = VAnchor.ParentCenter'  				};    				timeContainer.AddChild(timeWidget);    				int maxTextWidth = 350;  				printerName = new TextWidget(ActiveSliceSettings.Instance.GetValue(SettingsKey.printer_name)' pointSize: 16' textColor: ActiveTheme.Instance.PrimaryTextColor)  				{  					HAnchor = HAnchor.ParentCenter'  					MinimumSize = new Vector2(maxTextWidth' MinimumSize.y)'  					Width = maxTextWidth'  					Margin = new BorderDouble(0' 3)'  				};    				progressContainer.AddChild(printerName);    				partName = new TextWidget(PrinterConnectionAndCommunication.Instance.ActivePrintItem.GetFriendlyName()' pointSize: 16' textColor: ActiveTheme.Instance.PrimaryTextColor)  				{  					HAnchor = HAnchor.ParentCenter'  					MinimumSize = new Vector2(maxTextWidth' MinimumSize.y)'  					Width = maxTextWidth'  					Margin = new BorderDouble(0' 3)  				};  				progressContainer.AddChild(partName);  			}
Magic Number,MatterHackers.MatterControl.CustomWidgets,BasicBody,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,OnLoad,The following statement contains a magic number: {  				var expandingContainer = new HorizontalSpacer()  				{  					VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter  				};  				bodyRow.AddChild(expandingContainer);    				var progressContainer = new FlowLayoutWidget(FlowDirection.TopToBottom)  				{  					Margin = new BorderDouble(50' 0)'  					VAnchor = VAnchor.ParentCenter | VAnchor.FitToChildren'  					HAnchor = HAnchor.ParentCenter | HAnchor.FitToChildren'  				};  				expandingContainer.AddChild(progressContainer);    				progressDial = new ProgressDial()  				{  					HAnchor = HAnchor.ParentCenter'  					Height = 200 * DeviceScale'  					Width = 200 * DeviceScale  				};  				progressContainer.AddChild(progressDial);    				var timeContainer = new FlowLayoutWidget()  				{  					HAnchor = HAnchor.ParentCenter | HAnchor.FitToChildren'  					Margin = 3  				};  				progressContainer.AddChild(timeContainer);    				var timeImage = StaticData.Instance.LoadImage(Path.Combine("Images"' "Screensaver"' "time.png"));  				if (!ActiveTheme.Instance.IsDarkTheme)  				{  					timeImage.InvertLightness();  				}    				timeContainer.AddChild(new ImageWidget(timeImage));    				timeWidget = new TextWidget(""' pointSize: 22' textColor: ActiveTheme.Instance.PrimaryTextColor)  				{  					AutoExpandBoundsToText = true'  					Margin = new BorderDouble(10' 0' 0' 0)'  					VAnchor = VAnchor.ParentCenter'  				};    				timeContainer.AddChild(timeWidget);    				int maxTextWidth = 350;  				printerName = new TextWidget(ActiveSliceSettings.Instance.GetValue(SettingsKey.printer_name)' pointSize: 16' textColor: ActiveTheme.Instance.PrimaryTextColor)  				{  					HAnchor = HAnchor.ParentCenter'  					MinimumSize = new Vector2(maxTextWidth' MinimumSize.y)'  					Width = maxTextWidth'  					Margin = new BorderDouble(0' 3)'  				};    				progressContainer.AddChild(printerName);    				partName = new TextWidget(PrinterConnectionAndCommunication.Instance.ActivePrintItem.GetFriendlyName()' pointSize: 16' textColor: ActiveTheme.Instance.PrimaryTextColor)  				{  					HAnchor = HAnchor.ParentCenter'  					MinimumSize = new Vector2(maxTextWidth' MinimumSize.y)'  					Width = maxTextWidth'  					Margin = new BorderDouble(0' 3)  				};  				progressContainer.AddChild(partName);  			}
Magic Number,MatterHackers.MatterControl.CustomWidgets,BasicBody,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,OnLoad,The following statement contains a magic number: {  				var expandingContainer = new HorizontalSpacer()  				{  					VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter  				};  				bodyRow.AddChild(expandingContainer);    				var progressContainer = new FlowLayoutWidget(FlowDirection.TopToBottom)  				{  					Margin = new BorderDouble(50' 0)'  					VAnchor = VAnchor.ParentCenter | VAnchor.FitToChildren'  					HAnchor = HAnchor.ParentCenter | HAnchor.FitToChildren'  				};  				expandingContainer.AddChild(progressContainer);    				progressDial = new ProgressDial()  				{  					HAnchor = HAnchor.ParentCenter'  					Height = 200 * DeviceScale'  					Width = 200 * DeviceScale  				};  				progressContainer.AddChild(progressDial);    				var timeContainer = new FlowLayoutWidget()  				{  					HAnchor = HAnchor.ParentCenter | HAnchor.FitToChildren'  					Margin = 3  				};  				progressContainer.AddChild(timeContainer);    				var timeImage = StaticData.Instance.LoadImage(Path.Combine("Images"' "Screensaver"' "time.png"));  				if (!ActiveTheme.Instance.IsDarkTheme)  				{  					timeImage.InvertLightness();  				}    				timeContainer.AddChild(new ImageWidget(timeImage));    				timeWidget = new TextWidget(""' pointSize: 22' textColor: ActiveTheme.Instance.PrimaryTextColor)  				{  					AutoExpandBoundsToText = true'  					Margin = new BorderDouble(10' 0' 0' 0)'  					VAnchor = VAnchor.ParentCenter'  				};    				timeContainer.AddChild(timeWidget);    				int maxTextWidth = 350;  				printerName = new TextWidget(ActiveSliceSettings.Instance.GetValue(SettingsKey.printer_name)' pointSize: 16' textColor: ActiveTheme.Instance.PrimaryTextColor)  				{  					HAnchor = HAnchor.ParentCenter'  					MinimumSize = new Vector2(maxTextWidth' MinimumSize.y)'  					Width = maxTextWidth'  					Margin = new BorderDouble(0' 3)'  				};    				progressContainer.AddChild(printerName);    				partName = new TextWidget(PrinterConnectionAndCommunication.Instance.ActivePrintItem.GetFriendlyName()' pointSize: 16' textColor: ActiveTheme.Instance.PrimaryTextColor)  				{  					HAnchor = HAnchor.ParentCenter'  					MinimumSize = new Vector2(maxTextWidth' MinimumSize.y)'  					Width = maxTextWidth'  					Margin = new BorderDouble(0' 3)  				};  				progressContainer.AddChild(partName);  			}
Magic Number,MatterHackers.MatterControl.CustomWidgets,BasicBody,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,OnLoad,The following statement contains a magic number: {  				var widget = new ZAxisControls(smallScreen)  				{  					Margin = new BorderDouble(left: 50)'  					VAnchor = VAnchor.ParentCenter'  					Width = 135  				};  				bodyRow.AddChild(widget);  			}
Magic Number,MatterHackers.MatterControl.CustomWidgets,BasicBody,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,OnLoad,The following statement contains a magic number: {  				var widget = new ZAxisControls(smallScreen)  				{  					Margin = new BorderDouble(left: 50)'  					VAnchor = VAnchor.ParentCenter'  					Width = 135  				};  				bodyRow.AddChild(widget);  			}
Magic Number,MatterHackers.MatterControl.CustomWidgets,BasicBody,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,OnLoad,The following statement contains a magic number: if (hasHeatedBed)  			{  				var extruderColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  				footerBar.AddChild(extruderColumn);    				// Add each status widget into the scene' placing into the appropriate column  				for (var i = 0; i < extruderCount; i++)  				{  					var widget = extruderStatusWidgets[i];  					widget.Margin = new BorderDouble(right: 20);  					extruderColumn.AddChild(widget);  				}    				footerBar.AddChild(new BedStatusWidget(smallScreen)  				{  					VAnchor = VAnchor.ParentCenter'  				});  			}  			else  			{  				if (extruderCount == 1)  				{  					footerBar.AddChild(extruderStatusWidgets[0]);  				}  				else  				{  					var columnA = new FlowLayoutWidget(FlowDirection.TopToBottom);  					footerBar.AddChild(columnA);    					var columnB = new FlowLayoutWidget(FlowDirection.TopToBottom);  					footerBar.AddChild(columnB);    					// Add each status widget into the scene' placing into the appropriate column  					for (var i = 0; i < extruderCount; i++)  					{  						var widget = extruderStatusWidgets[i];  						if (i % 2 == 0)  						{  							widget.Margin = new BorderDouble(right: 20);  							columnA.AddChild(widget);  						}  						else  						{  							columnB.AddChild(widget);  						}  					}  				}  			}
Magic Number,MatterHackers.MatterControl.CustomWidgets,BasicBody,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,OnLoad,The following statement contains a magic number: if (hasHeatedBed)  			{  				var extruderColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  				footerBar.AddChild(extruderColumn);    				// Add each status widget into the scene' placing into the appropriate column  				for (var i = 0; i < extruderCount; i++)  				{  					var widget = extruderStatusWidgets[i];  					widget.Margin = new BorderDouble(right: 20);  					extruderColumn.AddChild(widget);  				}    				footerBar.AddChild(new BedStatusWidget(smallScreen)  				{  					VAnchor = VAnchor.ParentCenter'  				});  			}  			else  			{  				if (extruderCount == 1)  				{  					footerBar.AddChild(extruderStatusWidgets[0]);  				}  				else  				{  					var columnA = new FlowLayoutWidget(FlowDirection.TopToBottom);  					footerBar.AddChild(columnA);    					var columnB = new FlowLayoutWidget(FlowDirection.TopToBottom);  					footerBar.AddChild(columnB);    					// Add each status widget into the scene' placing into the appropriate column  					for (var i = 0; i < extruderCount; i++)  					{  						var widget = extruderStatusWidgets[i];  						if (i % 2 == 0)  						{  							widget.Margin = new BorderDouble(right: 20);  							columnA.AddChild(widget);  						}  						else  						{  							columnB.AddChild(widget);  						}  					}  				}  			}
Magic Number,MatterHackers.MatterControl.CustomWidgets,BasicBody,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,OnLoad,The following statement contains a magic number: if (hasHeatedBed)  			{  				var extruderColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  				footerBar.AddChild(extruderColumn);    				// Add each status widget into the scene' placing into the appropriate column  				for (var i = 0; i < extruderCount; i++)  				{  					var widget = extruderStatusWidgets[i];  					widget.Margin = new BorderDouble(right: 20);  					extruderColumn.AddChild(widget);  				}    				footerBar.AddChild(new BedStatusWidget(smallScreen)  				{  					VAnchor = VAnchor.ParentCenter'  				});  			}  			else  			{  				if (extruderCount == 1)  				{  					footerBar.AddChild(extruderStatusWidgets[0]);  				}  				else  				{  					var columnA = new FlowLayoutWidget(FlowDirection.TopToBottom);  					footerBar.AddChild(columnA);    					var columnB = new FlowLayoutWidget(FlowDirection.TopToBottom);  					footerBar.AddChild(columnB);    					// Add each status widget into the scene' placing into the appropriate column  					for (var i = 0; i < extruderCount; i++)  					{  						var widget = extruderStatusWidgets[i];  						if (i % 2 == 0)  						{  							widget.Margin = new BorderDouble(right: 20);  							columnA.AddChild(widget);  						}  						else  						{  							columnB.AddChild(widget);  						}  					}  				}  			}
Magic Number,MatterHackers.MatterControl.CustomWidgets,ProgressDial,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,ProgressDial,The following statement contains a magic number: percentCompleteWidget = new TextWidget(""' pointSize: 22' textColor: ActiveTheme.Instance.PrimaryTextColor)  			{  				AutoExpandBoundsToText = true'  				VAnchor = VAnchor.ParentCenter'  				HAnchor = HAnchor.ParentCenter'  				Margin = new BorderDouble(bottom: 20)  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,ProgressDial,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,ProgressDial,The following statement contains a magic number: percentCompleteWidget = new TextWidget(""' pointSize: 22' textColor: ActiveTheme.Instance.PrimaryTextColor)  			{  				AutoExpandBoundsToText = true'  				VAnchor = VAnchor.ParentCenter'  				HAnchor = HAnchor.ParentCenter'  				Margin = new BorderDouble(bottom: 20)  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,ProgressDial,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,ProgressDial,The following statement contains a magic number: layerCountWidget = new TextWidget(""' pointSize: 12' textColor: ActiveTheme.Instance.PrimaryTextColor)  			{  				AutoExpandBoundsToText = true'  				VAnchor = VAnchor.ParentCenter'  				HAnchor = HAnchor.ParentCenter'  				Margin = new BorderDouble(top: 32)  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,ProgressDial,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,ProgressDial,The following statement contains a magic number: layerCountWidget = new TextWidget(""' pointSize: 12' textColor: ActiveTheme.Instance.PrimaryTextColor)  			{  				AutoExpandBoundsToText = true'  				VAnchor = VAnchor.ParentCenter'  				HAnchor = HAnchor.ParentCenter'  				Margin = new BorderDouble(top: 32)  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,ProgressDial,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,OnBoundsChanged,The following statement contains a magic number: double borderRadius = this.LocalBounds.Width / 2 - 20 * DeviceScale;
Magic Number,MatterHackers.MatterControl.CustomWidgets,ProgressDial,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,OnBoundsChanged,The following statement contains a magic number: double borderRadius = this.LocalBounds.Width / 2 - 20 * DeviceScale;
Magic Number,MatterHackers.MatterControl.CustomWidgets,ProgressDial,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,OnBoundsChanged,The following statement contains a magic number: outerRingRadius = borderRadius - (outerRingStrokeWidth / 2) - 6 * DeviceScale;
Magic Number,MatterHackers.MatterControl.CustomWidgets,ProgressDial,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,OnBoundsChanged,The following statement contains a magic number: outerRingRadius = borderRadius - (outerRingStrokeWidth / 2) - 6 * DeviceScale;
Magic Number,MatterHackers.MatterControl.CustomWidgets,ProgressDial,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,OnBoundsChanged,The following statement contains a magic number: innerRingRadius = outerRingRadius - (outerRingStrokeWidth / 2) - (innerRingStrokeWidth / 2);
Magic Number,MatterHackers.MatterControl.CustomWidgets,ProgressDial,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,OnBoundsChanged,The following statement contains a magic number: innerRingRadius = outerRingRadius - (outerRingStrokeWidth / 2) - (innerRingStrokeWidth / 2);
Magic Number,MatterHackers.MatterControl.CustomWidgets,ProgressDial,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,OnDraw,The following statement contains a magic number: var ringArc = new Arc(  				Vector2.Zero'  				new Vector2(outerRingRadius' outerRingRadius)'  				0'  				MathHelper.DegreesToRadians(360) * LayerCompletedRatio' // percentCompletedInRadians  				Arc.Direction.ClockWise);
Magic Number,MatterHackers.MatterControl.CustomWidgets,ProgressDial,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,OnDraw,The following statement contains a magic number: graphics2D.Render(  				arcStroke.Rotate(90' AngleType.Degrees).Translate(bounds.Center)'  				PrimaryAccentShade);
Magic Number,MatterHackers.MatterControl.CustomWidgets,ProgressDial,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,OnDraw,The following statement contains a magic number: ringArc = new Arc(  				Vector2.Zero'  				new Vector2(innerRingRadius' innerRingRadius)'  				0'  				MathHelper.DegreesToRadians(360) * CompletedRatio' // percentCompletedInRadians  				Arc.Direction.ClockWise);
Magic Number,MatterHackers.MatterControl.CustomWidgets,ProgressDial,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,OnDraw,The following statement contains a magic number: graphics2D.Render(  				arcStroke.Rotate(90' AngleType.Degrees).Translate(bounds.Center)'  				PrimaryAccentColor);
Magic Number,MatterHackers.MatterControl.CustomWidgets,ZAxisControls,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,ZAxisControls,The following statement contains a magic number: this.AddChild(new TextWidget("Z+"' pointSize: smallScreen ? 12 : 15' textColor: ActiveTheme.Instance.PrimaryTextColor)  			{  				AutoExpandBoundsToText = true'  				HAnchor = HAnchor.ParentCenter'  				Margin = new BorderDouble(bottom: 8)  			});
Magic Number,MatterHackers.MatterControl.CustomWidgets,ZAxisControls,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,ZAxisControls,The following statement contains a magic number: this.AddChild(new TextWidget("Z+"' pointSize: smallScreen ? 12 : 15' textColor: ActiveTheme.Instance.PrimaryTextColor)  			{  				AutoExpandBoundsToText = true'  				HAnchor = HAnchor.ParentCenter'  				Margin = new BorderDouble(bottom: 8)  			});
Magic Number,MatterHackers.MatterControl.CustomWidgets,ZAxisControls,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,ZAxisControls,The following statement contains a magic number: this.AddChild(new TextWidget("Z+"' pointSize: smallScreen ? 12 : 15' textColor: ActiveTheme.Instance.PrimaryTextColor)  			{  				AutoExpandBoundsToText = true'  				HAnchor = HAnchor.ParentCenter'  				Margin = new BorderDouble(bottom: 8)  			});
Magic Number,MatterHackers.MatterControl.CustomWidgets,ZAxisControls,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,ZAxisControls,The following statement contains a magic number: this.AddChild(CreateZMoveButton(.1' smallScreen));
Magic Number,MatterHackers.MatterControl.CustomWidgets,ZAxisControls,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,ZAxisControls,The following statement contains a magic number: this.AddChild(CreateZMoveButton(.02' smallScreen));
Magic Number,MatterHackers.MatterControl.CustomWidgets,ZAxisControls,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,ZAxisControls,The following statement contains a magic number: this.AddChild(new ZTuningWidget(false)  			{  				HAnchor = HAnchor.ParentCenter | HAnchor.FitToChildren'  				Margin = 10  			});
Magic Number,MatterHackers.MatterControl.CustomWidgets,ZAxisControls,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,ZAxisControls,The following statement contains a magic number: this.AddChild(CreateZMoveButton(-.02' smallScreen));
Magic Number,MatterHackers.MatterControl.CustomWidgets,ZAxisControls,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,ZAxisControls,The following statement contains a magic number: this.AddChild(CreateZMoveButton(-.1' smallScreen));
Magic Number,MatterHackers.MatterControl.CustomWidgets,ZAxisControls,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,ZAxisControls,The following statement contains a magic number: this.AddChild(new TextWidget("Z-"' pointSize: smallScreen ? 12 : 15' textColor: ActiveTheme.Instance.PrimaryTextColor)  			{  				AutoExpandBoundsToText = true'  				HAnchor = HAnchor.ParentCenter'  				Margin = new BorderDouble(top: 9)'  			});
Magic Number,MatterHackers.MatterControl.CustomWidgets,ZAxisControls,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,ZAxisControls,The following statement contains a magic number: this.AddChild(new TextWidget("Z-"' pointSize: smallScreen ? 12 : 15' textColor: ActiveTheme.Instance.PrimaryTextColor)  			{  				AutoExpandBoundsToText = true'  				HAnchor = HAnchor.ParentCenter'  				Margin = new BorderDouble(top: 9)'  			});
Magic Number,MatterHackers.MatterControl.CustomWidgets,ZAxisControls,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,ZAxisControls,The following statement contains a magic number: this.AddChild(new TextWidget("Z-"' pointSize: smallScreen ? 12 : 15' textColor: ActiveTheme.Instance.PrimaryTextColor)  			{  				AutoExpandBoundsToText = true'  				HAnchor = HAnchor.ParentCenter'  				Margin = new BorderDouble(top: 9)'  			});
Magic Number,MatterHackers.MatterControl.CustomWidgets,ZAxisControls,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,ZAxisControls,The following statement contains a magic number: this.Padding = 3;
Magic Number,MatterHackers.MatterControl.CustomWidgets,ZAxisControls,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,CreateZMoveButton,The following statement contains a magic number: button.Padding = new BorderDouble(15' 7);
Magic Number,MatterHackers.MatterControl.CustomWidgets,ZAxisControls,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,CreateZMoveButton,The following statement contains a magic number: button.Padding = new BorderDouble(15' 7);
Magic Number,MatterHackers.MatterControl.CustomWidgets,ZAxisControls,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,CreateZMoveButton,The following statement contains a magic number: if (smallScreen) button.Height = 45; else button.Height = 55;
Magic Number,MatterHackers.MatterControl.CustomWidgets,ZAxisControls,C:\repos\MatterHackers_MatterControl\CustomWidgets\PrintingWindow.cs,CreateZMoveButton,The following statement contains a magic number: if (smallScreen) button.Height = 45; else button.Height = 55;
Magic Number,MatterHackers.MatterControl.CustomWidgets,DisableableWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\DisableableWidget.cs,DisableableWidget,The following statement contains a magic number: this.Margin = new BorderDouble(3);
Magic Number,MatterHackers.MatterControl.CustomWidgets,DisableableWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\DisableableWidget.cs,SetEnableLevel,The following statement contains a magic number: disableOverlay.BackgroundColor = new RGBA_Bytes(ActiveTheme.Instance.TertiaryBackgroundColor' 160);
Magic Number,MatterHackers.MatterControl.CustomWidgets,DisableableWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\DisableableWidget.cs,SetEnableLevel,The following statement contains a magic number: switch (enabledLevel)  			{  				case EnableLevel.Disabled:  					disableOverlay.Margin = new BorderDouble(0);  					disableOverlay.Visible = true;  					break;    				case EnableLevel.ConfigOnly:  					disableOverlay.Margin = new BorderDouble(0' 0' 0' 26);  					disableOverlay.Visible = true;  					break;    				case EnableLevel.Enabled:  					disableOverlay.Visible = false;  					break;  			}
Magic Number,MatterHackers.MatterControl.CustomWidgets.LibrarySelector,LibrarySelectorRowItem,C:\repos\MatterHackers_MatterControl\CustomWidgets\LibrarySelector\LibrarySelectorRowItem.cs,SetDisplayAttributes,The following statement contains a magic number: this.Height = 50 * GuiWidget.DeviceScale;
Magic Number,MatterHackers.MatterControl.CustomWidgets.LibrarySelector,LibrarySelectorRowItem,C:\repos\MatterHackers_MatterControl\CustomWidgets\LibrarySelector\LibrarySelectorRowItem.cs,SetDisplayAttributes,The following statement contains a magic number: this.Margin = new BorderDouble(6' 0' 6' 6);
Magic Number,MatterHackers.MatterControl.CustomWidgets.LibrarySelector,LibrarySelectorRowItem,C:\repos\MatterHackers_MatterControl\CustomWidgets\LibrarySelector\LibrarySelectorRowItem.cs,SetDisplayAttributes,The following statement contains a magic number: this.Margin = new BorderDouble(6' 0' 6' 6);
Magic Number,MatterHackers.MatterControl.CustomWidgets.LibrarySelector,LibrarySelectorRowItem,C:\repos\MatterHackers_MatterControl\CustomWidgets\LibrarySelector\LibrarySelectorRowItem.cs,SetDisplayAttributes,The following statement contains a magic number: this.Margin = new BorderDouble(6' 0' 6' 6);
Magic Number,MatterHackers.MatterControl.CustomWidgets.LibrarySelector,LibrarySelectorRowItem,C:\repos\MatterHackers_MatterControl\CustomWidgets\LibrarySelector\LibrarySelectorRowItem.cs,GetItemActionButtons,The following statement contains a magic number: openButton.Width = 100;
Magic Number,MatterHackers.MatterControl.CustomWidgets.LibrarySelector,LibrarySelectorRowItem,C:\repos\MatterHackers_MatterControl\CustomWidgets\LibrarySelector\LibrarySelectorRowItem.cs,GetItemActionButtons,The following statement contains a magic number: buttonContainer.Width = 100;
Magic Number,MatterHackers.MatterControl.CustomWidgets.LibrarySelector,LibrarySelectorRowItem,C:\repos\MatterHackers_MatterControl\CustomWidgets\LibrarySelector\LibrarySelectorRowItem.cs,OnDraw,The following statement contains a magic number: if (this.IsHoverItem)  			{  				RectangleDouble Bounds = LocalBounds;  				RoundedRect rectBorder = new RoundedRect(Bounds' 0);    				this.BackgroundColor = RGBA_Bytes.White;  				this.partLabel.TextColor = RGBA_Bytes.Black;    				graphics2D.Render(new Stroke(rectBorder' 3)' ActiveTheme.Instance.SecondaryAccentColor);  			}  			else  			{  				this.BackgroundColor = new RGBA_Bytes(255' 255' 255' 255);  				this.partLabel.TextColor = RGBA_Bytes.Black;  			}
Magic Number,MatterHackers.MatterControl.CustomWidgets.LibrarySelector,LibrarySelectorRowItem,C:\repos\MatterHackers_MatterControl\CustomWidgets\LibrarySelector\LibrarySelectorRowItem.cs,OnDraw,The following statement contains a magic number: if (this.IsHoverItem)  			{  				RectangleDouble Bounds = LocalBounds;  				RoundedRect rectBorder = new RoundedRect(Bounds' 0);    				this.BackgroundColor = RGBA_Bytes.White;  				this.partLabel.TextColor = RGBA_Bytes.Black;    				graphics2D.Render(new Stroke(rectBorder' 3)' ActiveTheme.Instance.SecondaryAccentColor);  			}  			else  			{  				this.BackgroundColor = new RGBA_Bytes(255' 255' 255' 255);  				this.partLabel.TextColor = RGBA_Bytes.Black;  			}
Magic Number,MatterHackers.MatterControl.CustomWidgets.LibrarySelector,LibrarySelectorRowItem,C:\repos\MatterHackers_MatterControl\CustomWidgets\LibrarySelector\LibrarySelectorRowItem.cs,OnDraw,The following statement contains a magic number: if (this.IsHoverItem)  			{  				RectangleDouble Bounds = LocalBounds;  				RoundedRect rectBorder = new RoundedRect(Bounds' 0);    				this.BackgroundColor = RGBA_Bytes.White;  				this.partLabel.TextColor = RGBA_Bytes.Black;    				graphics2D.Render(new Stroke(rectBorder' 3)' ActiveTheme.Instance.SecondaryAccentColor);  			}  			else  			{  				this.BackgroundColor = new RGBA_Bytes(255' 255' 255' 255);  				this.partLabel.TextColor = RGBA_Bytes.Black;  			}
Magic Number,MatterHackers.MatterControl.CustomWidgets.LibrarySelector,LibrarySelectorRowItem,C:\repos\MatterHackers_MatterControl\CustomWidgets\LibrarySelector\LibrarySelectorRowItem.cs,OnDraw,The following statement contains a magic number: if (this.IsHoverItem)  			{  				RectangleDouble Bounds = LocalBounds;  				RoundedRect rectBorder = new RoundedRect(Bounds' 0);    				this.BackgroundColor = RGBA_Bytes.White;  				this.partLabel.TextColor = RGBA_Bytes.Black;    				graphics2D.Render(new Stroke(rectBorder' 3)' ActiveTheme.Instance.SecondaryAccentColor);  			}  			else  			{  				this.BackgroundColor = new RGBA_Bytes(255' 255' 255' 255);  				this.partLabel.TextColor = RGBA_Bytes.Black;  			}
Magic Number,MatterHackers.MatterControl.CustomWidgets.LibrarySelector,LibrarySelectorRowItem,C:\repos\MatterHackers_MatterControl\CustomWidgets\LibrarySelector\LibrarySelectorRowItem.cs,OnDraw,The following statement contains a magic number: if (this.IsHoverItem)  			{  				RectangleDouble Bounds = LocalBounds;  				RoundedRect rectBorder = new RoundedRect(Bounds' 0);    				this.BackgroundColor = RGBA_Bytes.White;  				this.partLabel.TextColor = RGBA_Bytes.Black;    				graphics2D.Render(new Stroke(rectBorder' 3)' ActiveTheme.Instance.SecondaryAccentColor);  			}  			else  			{  				this.BackgroundColor = new RGBA_Bytes(255' 255' 255' 255);  				this.partLabel.TextColor = RGBA_Bytes.Black;  			}
Magic Number,MatterHackers.MatterControl.CustomWidgets.LibrarySelector,LibrarySelectorRowItem,C:\repos\MatterHackers_MatterControl\CustomWidgets\LibrarySelector\LibrarySelectorRowItem.cs,CreateGuiElements,The following statement contains a magic number: linkButtonFactory.fontSize = 10;
Magic Number,MatterHackers.MatterControl.CustomWidgets.LibrarySelector,LibrarySelectorRowItem,C:\repos\MatterHackers_MatterControl\CustomWidgets\LibrarySelector\LibrarySelectorRowItem.cs,CreateGuiElements,The following statement contains a magic number: {  				GuiWidget primaryContainer = new GuiWidget();  				primaryContainer.HAnchor = HAnchor.ParentLeftRight;  				primaryContainer.VAnchor = VAnchor.ParentBottomTop;    				FlowLayoutWidget primaryFlow = new FlowLayoutWidget(FlowDirection.LeftToRight);  				primaryFlow.HAnchor = HAnchor.ParentLeftRight;  				primaryFlow.VAnchor = VAnchor.ParentBottomTop;    				GuiWidget middleColumn = new GuiWidget(0.0' 0.0);  				middleColumn.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				middleColumn.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  				middleColumn.Margin = new BorderDouble(10' 6);  				{  					partLabel = new TextWidget(this.ItemName.Replace('_'' ' ')' pointSize: 14);  					partLabel.Name = "Row Item " + partLabel.Text;  					partLabel.TextColor = WidgetTextColor;  					partLabel.MinimumSize = new Vector2(1' 18);  					partLabel.VAnchor = VAnchor.ParentCenter;  					middleColumn.AddChild(partLabel);  				}    				primaryFlow.AddChild(thumbnailWidget);  				primaryFlow.AddChild(middleColumn);    				primaryContainer.AddChild(primaryFlow);    				rightButtonOverlay = GetItemActionButtons(openButtonText);  				rightButtonOverlay.Visible = false;    				mainContainer.AddChild(primaryContainer);  				mainContainer.AddChild(rightButtonOverlay);  			}
Magic Number,MatterHackers.MatterControl.CustomWidgets.LibrarySelector,LibrarySelectorRowItem,C:\repos\MatterHackers_MatterControl\CustomWidgets\LibrarySelector\LibrarySelectorRowItem.cs,CreateGuiElements,The following statement contains a magic number: {  				GuiWidget primaryContainer = new GuiWidget();  				primaryContainer.HAnchor = HAnchor.ParentLeftRight;  				primaryContainer.VAnchor = VAnchor.ParentBottomTop;    				FlowLayoutWidget primaryFlow = new FlowLayoutWidget(FlowDirection.LeftToRight);  				primaryFlow.HAnchor = HAnchor.ParentLeftRight;  				primaryFlow.VAnchor = VAnchor.ParentBottomTop;    				GuiWidget middleColumn = new GuiWidget(0.0' 0.0);  				middleColumn.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				middleColumn.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  				middleColumn.Margin = new BorderDouble(10' 6);  				{  					partLabel = new TextWidget(this.ItemName.Replace('_'' ' ')' pointSize: 14);  					partLabel.Name = "Row Item " + partLabel.Text;  					partLabel.TextColor = WidgetTextColor;  					partLabel.MinimumSize = new Vector2(1' 18);  					partLabel.VAnchor = VAnchor.ParentCenter;  					middleColumn.AddChild(partLabel);  				}    				primaryFlow.AddChild(thumbnailWidget);  				primaryFlow.AddChild(middleColumn);    				primaryContainer.AddChild(primaryFlow);    				rightButtonOverlay = GetItemActionButtons(openButtonText);  				rightButtonOverlay.Visible = false;    				mainContainer.AddChild(primaryContainer);  				mainContainer.AddChild(rightButtonOverlay);  			}
Magic Number,MatterHackers.MatterControl.CustomWidgets.LibrarySelector,LibrarySelectorRowItem,C:\repos\MatterHackers_MatterControl\CustomWidgets\LibrarySelector\LibrarySelectorRowItem.cs,CreateGuiElements,The following statement contains a magic number: {  				GuiWidget primaryContainer = new GuiWidget();  				primaryContainer.HAnchor = HAnchor.ParentLeftRight;  				primaryContainer.VAnchor = VAnchor.ParentBottomTop;    				FlowLayoutWidget primaryFlow = new FlowLayoutWidget(FlowDirection.LeftToRight);  				primaryFlow.HAnchor = HAnchor.ParentLeftRight;  				primaryFlow.VAnchor = VAnchor.ParentBottomTop;    				GuiWidget middleColumn = new GuiWidget(0.0' 0.0);  				middleColumn.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				middleColumn.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  				middleColumn.Margin = new BorderDouble(10' 6);  				{  					partLabel = new TextWidget(this.ItemName.Replace('_'' ' ')' pointSize: 14);  					partLabel.Name = "Row Item " + partLabel.Text;  					partLabel.TextColor = WidgetTextColor;  					partLabel.MinimumSize = new Vector2(1' 18);  					partLabel.VAnchor = VAnchor.ParentCenter;  					middleColumn.AddChild(partLabel);  				}    				primaryFlow.AddChild(thumbnailWidget);  				primaryFlow.AddChild(middleColumn);    				primaryContainer.AddChild(primaryFlow);    				rightButtonOverlay = GetItemActionButtons(openButtonText);  				rightButtonOverlay.Visible = false;    				mainContainer.AddChild(primaryContainer);  				mainContainer.AddChild(rightButtonOverlay);  			}
Magic Number,MatterHackers.MatterControl.CustomWidgets.LibrarySelector,LibrarySelectorRowItem,C:\repos\MatterHackers_MatterControl\CustomWidgets\LibrarySelector\LibrarySelectorRowItem.cs,CreateGuiElements,The following statement contains a magic number: {  				GuiWidget primaryContainer = new GuiWidget();  				primaryContainer.HAnchor = HAnchor.ParentLeftRight;  				primaryContainer.VAnchor = VAnchor.ParentBottomTop;    				FlowLayoutWidget primaryFlow = new FlowLayoutWidget(FlowDirection.LeftToRight);  				primaryFlow.HAnchor = HAnchor.ParentLeftRight;  				primaryFlow.VAnchor = VAnchor.ParentBottomTop;    				GuiWidget middleColumn = new GuiWidget(0.0' 0.0);  				middleColumn.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				middleColumn.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  				middleColumn.Margin = new BorderDouble(10' 6);  				{  					partLabel = new TextWidget(this.ItemName.Replace('_'' ' ')' pointSize: 14);  					partLabel.Name = "Row Item " + partLabel.Text;  					partLabel.TextColor = WidgetTextColor;  					partLabel.MinimumSize = new Vector2(1' 18);  					partLabel.VAnchor = VAnchor.ParentCenter;  					middleColumn.AddChild(partLabel);  				}    				primaryFlow.AddChild(thumbnailWidget);  				primaryFlow.AddChild(middleColumn);    				primaryContainer.AddChild(primaryFlow);    				rightButtonOverlay = GetItemActionButtons(openButtonText);  				rightButtonOverlay.Visible = false;    				mainContainer.AddChild(primaryContainer);  				mainContainer.AddChild(rightButtonOverlay);  			}
Magic Number,MatterHackers.MatterControl.CustomWidgets.LibrarySelector,FolderBreadCrumbWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\LibrarySelector\FolderBreadCrumbWidget.cs,FolderBreadCrumbWidget,The following statement contains a magic number: navigationButtonFactory.Margin = new BorderDouble(10' 0);
Magic Number,MatterHackers.MatterControl.CustomWidgets.LibrarySelector,FolderBreadCrumbWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\LibrarySelector\FolderBreadCrumbWidget.cs,SetBreadCrumbs,The following statement contains a magic number: for (int i = parentProviderList.Count - 1; i >= 0; i--)  			{  				LibraryProvider parentLibraryProvider = parentProviderList[i];  				if (!first)  				{  					GuiWidget separator = new TextWidget(">"' textColor: ActiveTheme.Instance.PrimaryTextColor);  					separator.VAnchor = VAnchor.ParentCenter;  					separator.Margin = new BorderDouble(0);  					this.AddChild(separator);  				}    				Button gotoProviderButton = navigationButtonFactory.Generate(parentLibraryProvider.Name);  				gotoProviderButton.Name = "Bread Crumb Button " + parentLibraryProvider.Name;  				if (first)  				{  					gotoProviderButton.Margin = new BorderDouble(0' 0' 3' 0);  				}  				else  				{  					gotoProviderButton.Margin = new BorderDouble(3' 0);  				}  				gotoProviderButton.Click += (sender2' e2) =>  				{  					UiThread.RunOnIdle(() =>  					{  						SwitchToLibraryProvider(parentLibraryProvider);  					});  				};  				this.AddChild(gotoProviderButton);  				first = false;  			}
Magic Number,MatterHackers.MatterControl.CustomWidgets.LibrarySelector,FolderBreadCrumbWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\LibrarySelector\FolderBreadCrumbWidget.cs,SetBreadCrumbs,The following statement contains a magic number: for (int i = parentProviderList.Count - 1; i >= 0; i--)  			{  				LibraryProvider parentLibraryProvider = parentProviderList[i];  				if (!first)  				{  					GuiWidget separator = new TextWidget(">"' textColor: ActiveTheme.Instance.PrimaryTextColor);  					separator.VAnchor = VAnchor.ParentCenter;  					separator.Margin = new BorderDouble(0);  					this.AddChild(separator);  				}    				Button gotoProviderButton = navigationButtonFactory.Generate(parentLibraryProvider.Name);  				gotoProviderButton.Name = "Bread Crumb Button " + parentLibraryProvider.Name;  				if (first)  				{  					gotoProviderButton.Margin = new BorderDouble(0' 0' 3' 0);  				}  				else  				{  					gotoProviderButton.Margin = new BorderDouble(3' 0);  				}  				gotoProviderButton.Click += (sender2' e2) =>  				{  					UiThread.RunOnIdle(() =>  					{  						SwitchToLibraryProvider(parentLibraryProvider);  					});  				};  				this.AddChild(gotoProviderButton);  				first = false;  			}
Magic Number,MatterHackers.MatterControl.CustomWidgets.LibrarySelector,FolderBreadCrumbWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\LibrarySelector\FolderBreadCrumbWidget.cs,SetBreadCrumbs,The following statement contains a magic number: if (haveFilterRunning)  			{  				GuiWidget separator = new TextWidget(">"' textColor: ActiveTheme.Instance.PrimaryTextColor);  				separator.VAnchor = VAnchor.ParentCenter;  				separator.Margin = new BorderDouble(0);  				this.AddChild(separator);    				Button searchResultsButton = null;  				if (UserSettings.Instance.IsTouchScreen)  				{  					searchResultsButton = navigationButtonFactory.Generate("Search Results".Localize()' "icon_search_32x32.png");  				}  				else  				{  					searchResultsButton = navigationButtonFactory.Generate("Search Results".Localize()' "icon_search_24x24.png");  				}  				searchResultsButton.Name = "Bread Crumb Button " + "Search Results";  				searchResultsButton.Margin = new BorderDouble(3' 0);  				this.AddChild(searchResultsButton);  			}
Magic Number,MatterHackers.MatterControl.CustomWidgets.LibrarySelector,FolderBreadCrumbWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\LibrarySelector\FolderBreadCrumbWidget.cs,SetBreadCrumbs,The following statement contains a magic number: if (this.Parent != null  				&& this.Width > 0  				&& this.Children.Count > 4  				&& this.GetChildrenBoundsIncludingMargins().Width > (this.Width - 20))  			{  				// lets take out the > and put in a ...  				this.RemoveChild(1);  				GuiWidget separator = new TextWidget("..."' textColor: ActiveTheme.Instance.PrimaryTextColor);  				separator.VAnchor = VAnchor.ParentCenter;  				separator.Margin = new BorderDouble(3' 0);  				this.AddChild(separator' 1);    				while (this.GetChildrenBoundsIncludingMargins().Width > this.Width - 20  					&& this.Children.Count > 4)  				{  					this.RemoveChild(3);  					this.RemoveChild(2);  				}  			}
Magic Number,MatterHackers.MatterControl.CustomWidgets.LibrarySelector,FolderBreadCrumbWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\LibrarySelector\FolderBreadCrumbWidget.cs,SetBreadCrumbs,The following statement contains a magic number: if (this.Parent != null  				&& this.Width > 0  				&& this.Children.Count > 4  				&& this.GetChildrenBoundsIncludingMargins().Width > (this.Width - 20))  			{  				// lets take out the > and put in a ...  				this.RemoveChild(1);  				GuiWidget separator = new TextWidget("..."' textColor: ActiveTheme.Instance.PrimaryTextColor);  				separator.VAnchor = VAnchor.ParentCenter;  				separator.Margin = new BorderDouble(3' 0);  				this.AddChild(separator' 1);    				while (this.GetChildrenBoundsIncludingMargins().Width > this.Width - 20  					&& this.Children.Count > 4)  				{  					this.RemoveChild(3);  					this.RemoveChild(2);  				}  			}
Magic Number,MatterHackers.MatterControl.CustomWidgets.LibrarySelector,FolderBreadCrumbWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\LibrarySelector\FolderBreadCrumbWidget.cs,SetBreadCrumbs,The following statement contains a magic number: if (this.Parent != null  				&& this.Width > 0  				&& this.Children.Count > 4  				&& this.GetChildrenBoundsIncludingMargins().Width > (this.Width - 20))  			{  				// lets take out the > and put in a ...  				this.RemoveChild(1);  				GuiWidget separator = new TextWidget("..."' textColor: ActiveTheme.Instance.PrimaryTextColor);  				separator.VAnchor = VAnchor.ParentCenter;  				separator.Margin = new BorderDouble(3' 0);  				this.AddChild(separator' 1);    				while (this.GetChildrenBoundsIncludingMargins().Width > this.Width - 20  					&& this.Children.Count > 4)  				{  					this.RemoveChild(3);  					this.RemoveChild(2);  				}  			}
Magic Number,MatterHackers.MatterControl.CustomWidgets.LibrarySelector,FolderBreadCrumbWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\LibrarySelector\FolderBreadCrumbWidget.cs,SetBreadCrumbs,The following statement contains a magic number: if (this.Parent != null  				&& this.Width > 0  				&& this.Children.Count > 4  				&& this.GetChildrenBoundsIncludingMargins().Width > (this.Width - 20))  			{  				// lets take out the > and put in a ...  				this.RemoveChild(1);  				GuiWidget separator = new TextWidget("..."' textColor: ActiveTheme.Instance.PrimaryTextColor);  				separator.VAnchor = VAnchor.ParentCenter;  				separator.Margin = new BorderDouble(3' 0);  				this.AddChild(separator' 1);    				while (this.GetChildrenBoundsIncludingMargins().Width > this.Width - 20  					&& this.Children.Count > 4)  				{  					this.RemoveChild(3);  					this.RemoveChild(2);  				}  			}
Magic Number,MatterHackers.MatterControl.CustomWidgets.LibrarySelector,FolderBreadCrumbWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\LibrarySelector\FolderBreadCrumbWidget.cs,SetBreadCrumbs,The following statement contains a magic number: if (this.Parent != null  				&& this.Width > 0  				&& this.Children.Count > 4  				&& this.GetChildrenBoundsIncludingMargins().Width > (this.Width - 20))  			{  				// lets take out the > and put in a ...  				this.RemoveChild(1);  				GuiWidget separator = new TextWidget("..."' textColor: ActiveTheme.Instance.PrimaryTextColor);  				separator.VAnchor = VAnchor.ParentCenter;  				separator.Margin = new BorderDouble(3' 0);  				this.AddChild(separator' 1);    				while (this.GetChildrenBoundsIncludingMargins().Width > this.Width - 20  					&& this.Children.Count > 4)  				{  					this.RemoveChild(3);  					this.RemoveChild(2);  				}  			}
Magic Number,MatterHackers.MatterControl.CustomWidgets.LibrarySelector,FolderBreadCrumbWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\LibrarySelector\FolderBreadCrumbWidget.cs,SetBreadCrumbs,The following statement contains a magic number: if (this.Parent != null  				&& this.Width > 0  				&& this.Children.Count > 4  				&& this.GetChildrenBoundsIncludingMargins().Width > (this.Width - 20))  			{  				// lets take out the > and put in a ...  				this.RemoveChild(1);  				GuiWidget separator = new TextWidget("..."' textColor: ActiveTheme.Instance.PrimaryTextColor);  				separator.VAnchor = VAnchor.ParentCenter;  				separator.Margin = new BorderDouble(3' 0);  				this.AddChild(separator' 1);    				while (this.GetChildrenBoundsIncludingMargins().Width > this.Width - 20  					&& this.Children.Count > 4)  				{  					this.RemoveChild(3);  					this.RemoveChild(2);  				}  			}
Magic Number,MatterHackers.MatterControl.CustomWidgets.LibrarySelector,FolderBreadCrumbWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\LibrarySelector\FolderBreadCrumbWidget.cs,SetBreadCrumbs,The following statement contains a magic number: if (this.Parent != null  				&& this.Width > 0  				&& this.Children.Count > 4  				&& this.GetChildrenBoundsIncludingMargins().Width > (this.Width - 20))  			{  				// lets take out the > and put in a ...  				this.RemoveChild(1);  				GuiWidget separator = new TextWidget("..."' textColor: ActiveTheme.Instance.PrimaryTextColor);  				separator.VAnchor = VAnchor.ParentCenter;  				separator.Margin = new BorderDouble(3' 0);  				this.AddChild(separator' 1);    				while (this.GetChildrenBoundsIncludingMargins().Width > this.Width - 20  					&& this.Children.Count > 4)  				{  					this.RemoveChild(3);  					this.RemoveChild(2);  				}  			}
Magic Number,MatterHackers.MatterControl.CustomWidgets.LibrarySelector,LibrarySelectorWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\LibrarySelector\LibrarySelectorWidget.cs,LibrarySelectorWidget,The following statement contains a magic number: {  				this.AnchorAll();  				this.BackgroundColor = ActiveTheme.Instance.SecondaryBackgroundColor;  				this.ScrollArea.Padding = new BorderDouble(3);  			}
Magic Number,MatterHackers.MatterControl.CustomWidgets.LibrarySelector,LibrarySelectorWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\LibrarySelector\LibrarySelectorWidget.cs,GetThumbnailWidget,The following statement contains a magic number: Vector2 expectedSize = new Vector2((int)(50 * GuiWidget.DeviceScale)' (int)(50 * GuiWidget.DeviceScale));
Magic Number,MatterHackers.MatterControl.CustomWidgets.LibrarySelector,LibrarySelectorWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\LibrarySelector\LibrarySelectorWidget.cs,GetThumbnailWidget,The following statement contains a magic number: Vector2 expectedSize = new Vector2((int)(50 * GuiWidget.DeviceScale)' (int)(50 * GuiWidget.DeviceScale));
Magic Number,MatterHackers.Agg.UI,PopOutTextTabWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PopOutTextTab.cs,AddText,The following statement contains a magic number: ImageBuffer popOutImageClick = StaticData.Instance.LoadIcon("icon_pop_out_32x32.png"' 16' 16);
Magic Number,MatterHackers.Agg.UI,PopOutTextTabWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PopOutTextTab.cs,AddText,The following statement contains a magic number: ImageBuffer popOutImageClick = StaticData.Instance.LoadIcon("icon_pop_out_32x32.png"' 16' 16);
Magic Number,MatterHackers.Agg.UI,PopOutTextTabWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PopOutTextTab.cs,AddText,The following statement contains a magic number: for (int i = 0; i < buffer.Length; i++)  			{  				if ((i & 3) != 3)  				{  					buffer[i] = textColor.red;  				}  			}
Magic Number,MatterHackers.Agg.UI,PopOutTextTabWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PopOutTextTab.cs,AddText,The following statement contains a magic number: for (int i = 0; i < buffer.Length; i++)  			{  				if ((i & 3) != 3)  				{  					buffer[i] = textColor.red;  				}  			}
Magic Number,MatterHackers.Agg.UI,PopOutTextTabWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PopOutTextTab.cs,AddText,The following statement contains a magic number: popOutButton.Margin = new BorderDouble(3' 0);
Magic Number,MatterHackers.Agg.UI,DropDownMenu,C:\repos\MatterHackers_MatterControl\CustomWidgets\DropDownMenuWidget.cs,SetStates,The following statement contains a magic number: NormalArrowColor = new RGBA_Bytes(255' 255' 255' 0);
Magic Number,MatterHackers.Agg.UI,DropDownMenu,C:\repos\MatterHackers_MatterControl\CustomWidgets\DropDownMenuWidget.cs,SetStates,The following statement contains a magic number: NormalArrowColor = new RGBA_Bytes(255' 255' 255' 0);
Magic Number,MatterHackers.Agg.UI,DropDownMenu,C:\repos\MatterHackers_MatterControl\CustomWidgets\DropDownMenuWidget.cs,SetStates,The following statement contains a magic number: NormalArrowColor = new RGBA_Bytes(255' 255' 255' 0);
Magic Number,MatterHackers.Agg.UI,DropDownMenu,C:\repos\MatterHackers_MatterControl\CustomWidgets\DropDownMenuWidget.cs,SetDisplayAttributes,The following statement contains a magic number: this.MenuItemsPadding = new BorderDouble(10' 10' 10' 10);
Magic Number,MatterHackers.Agg.UI,DropDownMenu,C:\repos\MatterHackers_MatterControl\CustomWidgets\DropDownMenuWidget.cs,SetDisplayAttributes,The following statement contains a magic number: this.MenuItemsPadding = new BorderDouble(10' 10' 10' 10);
Magic Number,MatterHackers.Agg.UI,DropDownMenu,C:\repos\MatterHackers_MatterControl\CustomWidgets\DropDownMenuWidget.cs,SetDisplayAttributes,The following statement contains a magic number: this.MenuItemsPadding = new BorderDouble(10' 10' 10' 10);
Magic Number,MatterHackers.Agg.UI,DropDownMenu,C:\repos\MatterHackers_MatterControl\CustomWidgets\DropDownMenuWidget.cs,SetDisplayAttributes,The following statement contains a magic number: this.MenuItemsPadding = new BorderDouble(10' 10' 10' 10);
Magic Number,MatterHackers.Agg.UI,DropDownMenu,C:\repos\MatterHackers_MatterControl\CustomWidgets\DropDownMenuWidget.cs,DoDrawDirectionalArrow,The following statement contains a magic number: if (this.MenuDirection == Direction.Down)  			{  				littleArrow.MoveTo(-4' 0);  				littleArrow.LineTo(4' 0);  				littleArrow.LineTo(0' -5);  			}  			else if (this.MenuDirection == Direction.Up)  			{  				littleArrow.MoveTo(-4' -5);  				littleArrow.LineTo(4' -5);  				littleArrow.LineTo(0' 0);  			}  			else  			{  				throw new NotImplementedException("Pulldown direction has not been implemented");  			}
Magic Number,MatterHackers.Agg.UI,DropDownMenu,C:\repos\MatterHackers_MatterControl\CustomWidgets\DropDownMenuWidget.cs,DoDrawDirectionalArrow,The following statement contains a magic number: if (this.MenuDirection == Direction.Down)  			{  				littleArrow.MoveTo(-4' 0);  				littleArrow.LineTo(4' 0);  				littleArrow.LineTo(0' -5);  			}  			else if (this.MenuDirection == Direction.Up)  			{  				littleArrow.MoveTo(-4' -5);  				littleArrow.LineTo(4' -5);  				littleArrow.LineTo(0' 0);  			}  			else  			{  				throw new NotImplementedException("Pulldown direction has not been implemented");  			}
Magic Number,MatterHackers.Agg.UI,DropDownMenu,C:\repos\MatterHackers_MatterControl\CustomWidgets\DropDownMenuWidget.cs,DoDrawDirectionalArrow,The following statement contains a magic number: if (this.MenuDirection == Direction.Down)  			{  				littleArrow.MoveTo(-4' 0);  				littleArrow.LineTo(4' 0);  				littleArrow.LineTo(0' -5);  			}  			else if (this.MenuDirection == Direction.Up)  			{  				littleArrow.MoveTo(-4' -5);  				littleArrow.LineTo(4' -5);  				littleArrow.LineTo(0' 0);  			}  			else  			{  				throw new NotImplementedException("Pulldown direction has not been implemented");  			}
Magic Number,MatterHackers.Agg.UI,DropDownMenu,C:\repos\MatterHackers_MatterControl\CustomWidgets\DropDownMenuWidget.cs,DoDrawDirectionalArrow,The following statement contains a magic number: if (this.MenuDirection == Direction.Down)  			{  				littleArrow.MoveTo(-4' 0);  				littleArrow.LineTo(4' 0);  				littleArrow.LineTo(0' -5);  			}  			else if (this.MenuDirection == Direction.Up)  			{  				littleArrow.MoveTo(-4' -5);  				littleArrow.LineTo(4' -5);  				littleArrow.LineTo(0' 0);  			}  			else  			{  				throw new NotImplementedException("Pulldown direction has not been implemented");  			}
Magic Number,MatterHackers.Agg.UI,DropDownMenu,C:\repos\MatterHackers_MatterControl\CustomWidgets\DropDownMenuWidget.cs,DoDrawDirectionalArrow,The following statement contains a magic number: if (this.MenuDirection == Direction.Down)  			{  				littleArrow.MoveTo(-4' 0);  				littleArrow.LineTo(4' 0);  				littleArrow.LineTo(0' -5);  			}  			else if (this.MenuDirection == Direction.Up)  			{  				littleArrow.MoveTo(-4' -5);  				littleArrow.LineTo(4' -5);  				littleArrow.LineTo(0' 0);  			}  			else  			{  				throw new NotImplementedException("Pulldown direction has not been implemented");  			}
Magic Number,MatterHackers.Agg.UI,DropDownMenu,C:\repos\MatterHackers_MatterControl\CustomWidgets\DropDownMenuWidget.cs,DoDrawDirectionalArrow,The following statement contains a magic number: if (this.MenuDirection == Direction.Down)  			{  				littleArrow.MoveTo(-4' 0);  				littleArrow.LineTo(4' 0);  				littleArrow.LineTo(0' -5);  			}  			else if (this.MenuDirection == Direction.Up)  			{  				littleArrow.MoveTo(-4' -5);  				littleArrow.LineTo(4' -5);  				littleArrow.LineTo(0' 0);  			}  			else  			{  				throw new NotImplementedException("Pulldown direction has not been implemented");  			}
Magic Number,MatterHackers.Agg.UI,DropDownMenu,C:\repos\MatterHackers_MatterControl\CustomWidgets\DropDownMenuWidget.cs,DoDrawDirectionalArrow,The following statement contains a magic number: if (this.MenuDirection == Direction.Down)  			{  				littleArrow.MoveTo(-4' 0);  				littleArrow.LineTo(4' 0);  				littleArrow.LineTo(0' -5);  			}  			else if (this.MenuDirection == Direction.Up)  			{  				littleArrow.MoveTo(-4' -5);  				littleArrow.LineTo(4' -5);  				littleArrow.LineTo(0' 0);  			}  			else  			{  				throw new NotImplementedException("Pulldown direction has not been implemented");  			}
Magic Number,MatterHackers.Agg.UI,DropDownMenu,C:\repos\MatterHackers_MatterControl\CustomWidgets\DropDownMenuWidget.cs,DoDrawDirectionalArrow,The following statement contains a magic number: if (UnderMouseState != UI.UnderMouseState.NotUnderMouse)  			{  				graphics2D.Render(littleArrow' LocalBounds.Right - 10' LocalBounds.Bottom + Height - 4' NormalArrowColor);  			}  			else  			{  				graphics2D.Render(littleArrow' LocalBounds.Right - 10' LocalBounds.Bottom + Height - 4' HoverArrowColor);  			}
Magic Number,MatterHackers.Agg.UI,DropDownMenu,C:\repos\MatterHackers_MatterControl\CustomWidgets\DropDownMenuWidget.cs,DoDrawDirectionalArrow,The following statement contains a magic number: if (UnderMouseState != UI.UnderMouseState.NotUnderMouse)  			{  				graphics2D.Render(littleArrow' LocalBounds.Right - 10' LocalBounds.Bottom + Height - 4' NormalArrowColor);  			}  			else  			{  				graphics2D.Render(littleArrow' LocalBounds.Right - 10' LocalBounds.Bottom + Height - 4' HoverArrowColor);  			}
Magic Number,MatterHackers.Agg.UI,DropDownMenu,C:\repos\MatterHackers_MatterControl\CustomWidgets\DropDownMenuWidget.cs,DoDrawDirectionalArrow,The following statement contains a magic number: if (UnderMouseState != UI.UnderMouseState.NotUnderMouse)  			{  				graphics2D.Render(littleArrow' LocalBounds.Right - 10' LocalBounds.Bottom + Height - 4' NormalArrowColor);  			}  			else  			{  				graphics2D.Render(littleArrow' LocalBounds.Right - 10' LocalBounds.Bottom + Height - 4' HoverArrowColor);  			}
Magic Number,MatterHackers.Agg.UI,DropDownMenu,C:\repos\MatterHackers_MatterControl\CustomWidgets\DropDownMenuWidget.cs,DoDrawDirectionalArrow,The following statement contains a magic number: if (UnderMouseState != UI.UnderMouseState.NotUnderMouse)  			{  				graphics2D.Render(littleArrow' LocalBounds.Right - 10' LocalBounds.Bottom + Height - 4' NormalArrowColor);  			}  			else  			{  				graphics2D.Render(littleArrow' LocalBounds.Right - 10' LocalBounds.Bottom + Height - 4' HoverArrowColor);  			}
Magic Number,MatterHackers.Agg.UI,DynamicDropDownMenu,C:\repos\MatterHackers_MatterControl\CustomWidgets\DynamicDropDownMenu.cs,DynamicDropDownMenu,The following statement contains a magic number: BorderColor = new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 200);
Magic Number,MatterHackers.Agg.UI,DynamicDropDownMenu,C:\repos\MatterHackers_MatterControl\CustomWidgets\DynamicDropDownMenu.cs,DynamicDropDownMenu,The following statement contains a magic number: HoverColor = new RGBA_Bytes(255' 255' 255' 200);
Magic Number,MatterHackers.Agg.UI,DynamicDropDownMenu,C:\repos\MatterHackers_MatterControl\CustomWidgets\DynamicDropDownMenu.cs,DynamicDropDownMenu,The following statement contains a magic number: HoverColor = new RGBA_Bytes(255' 255' 255' 200);
Magic Number,MatterHackers.Agg.UI,DynamicDropDownMenu,C:\repos\MatterHackers_MatterControl\CustomWidgets\DynamicDropDownMenu.cs,DynamicDropDownMenu,The following statement contains a magic number: HoverColor = new RGBA_Bytes(255' 255' 255' 200);
Magic Number,MatterHackers.Agg.UI,DynamicDropDownMenu,C:\repos\MatterHackers_MatterControl\CustomWidgets\DynamicDropDownMenu.cs,DynamicDropDownMenu,The following statement contains a magic number: HoverColor = new RGBA_Bytes(255' 255' 255' 200);
Magic Number,MatterHackers.Agg.UI,DynamicDropDownMenu,C:\repos\MatterHackers_MatterControl\CustomWidgets\DynamicDropDownMenu.cs,DynamicDropDownMenu,The following statement contains a magic number: BorderColor = new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 200);
Magic Number,MatterHackers.RayTracer,ThumbnailTracer,C:\repos\MatterHackers_MatterControl\CustomWidgets\ThumbnailTracer.cs,SetRenderPosition,The following statement contains a magic number: trackballTumbleWidget.TrackBallController.Scale = .03;
Magic Number,MatterHackers.RayTracer,ThumbnailTracer,C:\repos\MatterHackers_MatterControl\CustomWidgets\ThumbnailTracer.cs,SetRenderPosition,The following statement contains a magic number: trackballTumbleWidget.TrackBallController.Rotate(Quaternion.FromEulerAngles(new Vector3(0' 0' MathHelper.Tau / 16)));
Magic Number,MatterHackers.RayTracer,ThumbnailTracer,C:\repos\MatterHackers_MatterControl\CustomWidgets\ThumbnailTracer.cs,SetRenderPosition,The following statement contains a magic number: trackballTumbleWidget.TrackBallController.Rotate(Quaternion.FromEulerAngles(new Vector3(-MathHelper.Tau * .19' 0' 0)));
Magic Number,MatterHackers.RayTracer,ThumbnailTracer,C:\repos\MatterHackers_MatterControl\CustomWidgets\ThumbnailTracer.cs,AddAFloor,The following statement contains a magic number: ImageBuffer testImage = new ImageBuffer(200' 200);
Magic Number,MatterHackers.RayTracer,ThumbnailTracer,C:\repos\MatterHackers_MatterControl\CustomWidgets\ThumbnailTracer.cs,AddAFloor,The following statement contains a magic number: ImageBuffer testImage = new ImageBuffer(200' 200);
Magic Number,MatterHackers.RayTracer,ThumbnailTracer,C:\repos\MatterHackers_MatterControl\CustomWidgets\ThumbnailTracer.cs,AddAFloor,The following statement contains a magic number: for (int i = 0; i < 100; i++)  			{  				RGBA_Bytes color = new RGBA_Bytes(rand.NextDouble()' rand.NextDouble()' rand.NextDouble());  				graphics.Circle(new Vector2(rand.NextDouble() * testImage.Width' rand.NextDouble() * testImage.Height)' rand.NextDouble() * 40 + 10' color);  			}
Magic Number,MatterHackers.RayTracer,ThumbnailTracer,C:\repos\MatterHackers_MatterControl\CustomWidgets\ThumbnailTracer.cs,AddAFloor,The following statement contains a magic number: for (int i = 0; i < 100; i++)  			{  				RGBA_Bytes color = new RGBA_Bytes(rand.NextDouble()' rand.NextDouble()' rand.NextDouble());  				graphics.Circle(new Vector2(rand.NextDouble() * testImage.Width' rand.NextDouble() * testImage.Height)' rand.NextDouble() * 40 + 10' color);  			}
Magic Number,MatterHackers.RayTracer,ThumbnailTracer,C:\repos\MatterHackers_MatterControl\CustomWidgets\ThumbnailTracer.cs,AddAFloor,The following statement contains a magic number: for (int i = 0; i < 100; i++)  			{  				RGBA_Bytes color = new RGBA_Bytes(rand.NextDouble()' rand.NextDouble()' rand.NextDouble());  				graphics.Circle(new Vector2(rand.NextDouble() * testImage.Width' rand.NextDouble() * testImage.Height)' rand.NextDouble() * 40 + 10' color);  			}
Magic Number,MatterHackers.RayTracer,ThumbnailTracer,C:\repos\MatterHackers_MatterControl\CustomWidgets\ThumbnailTracer.cs,AddAFloor,The following statement contains a magic number: scene.shapes.Add(new PlaneShape(new Vector3(0' 0' 1)' 0' new TextureMaterial(testImage' 0' 0' .2' 1)));
Magic Number,MatterHackers.RayTracer,ThumbnailTracer,C:\repos\MatterHackers_MatterControl\CustomWidgets\ThumbnailTracer.cs,render_gouraud,The following statement contains a magic number: span_gen.colors(points[0].color' points[1].color' points[2].color);
Magic Number,MatterHackers.RayTracer,ThumbnailTracer,C:\repos\MatterHackers_MatterControl\CustomWidgets\ThumbnailTracer.cs,render_gouraud,The following statement contains a magic number: span_gen.triangle(points[0].position.x' points[0].position.y' points[1].position.x' points[1].position.y' points[2].position.x' points[2].position.y);
Magic Number,MatterHackers.RayTracer,ThumbnailTracer,C:\repos\MatterHackers_MatterControl\CustomWidgets\ThumbnailTracer.cs,render_gouraud,The following statement contains a magic number: span_gen.triangle(points[0].position.x' points[0].position.y' points[1].position.x' points[1].position.y' points[2].position.x' points[2].position.y);
Magic Number,MatterHackers.RayTracer,ThumbnailTracer,C:\repos\MatterHackers_MatterControl\CustomWidgets\ThumbnailTracer.cs,DrawTo,The following statement contains a magic number: graphics2D.Rasterizer.gamma(new gamma_power(.3));
Magic Number,MatterHackers.RayTracer,ThumbnailTracer,C:\repos\MatterHackers_MatterControl\CustomWidgets\ThumbnailTracer.cs,DrawTo,The following statement contains a magic number: RenderPoint[] points = new RenderPoint[3] { new RenderPoint()' new RenderPoint()' new RenderPoint() };
Magic Number,MatterHackers.RayTracer,ThumbnailTracer,C:\repos\MatterHackers_MatterControl\CustomWidgets\ThumbnailTracer.cs,DrawTo,The following statement contains a magic number: foreach (Face face in meshToDraw.Faces)  			{  				int i = 0;  				Vector3 normal = Vector3.TransformVector(face.normal' trackballTumbleWidget.ModelviewMatrix).GetNormal();  				if (normal.z > 0)  				{  					foreach (FaceEdge faceEdge in face.FaceEdges())  					{  						points[i].position = trackballTumbleWidget.GetScreenPosition(faceEdge.firstVertex.Position);    						Vector3 transformedPosition = Vector3.TransformPosition(faceEdge.firstVertex.Position' trackballTumbleWidget.ModelviewMatrix);  						points[i].z = transformedPosition.z;  						i++;  					}    					RGBA_Floats polyDrawColor = new RGBA_Floats();  					double L = Vector3.Dot(lightNormal' normal);  					if (L > 0.0f)  					{  						polyDrawColor = partColor * lightIllumination * L;  					}    					polyDrawColor = RGBA_Floats.ComponentMax(polyDrawColor' partColor * ambiantIllumination);  					for (i = 0; i < 3; i++)  					{  						double ratio = (points[i].z - minZ) / (maxZ - minZ);  						int ratioInt16 = (int)(ratio * 65536);  						points[i].color = new RGBA_Bytes(polyDrawColor.Red0To255' ratioInt16 >> 8' ratioInt16 & 0xFF);  					}      #if true  					scanline_unpacked_8 sl = new scanline_unpacked_8();  					ScanlineRasterizer ras = new ScanlineRasterizer();  					render_gouraud(graphics2D.DestImage' sl' ras' points);  #else  					IRecieveBlenderByte oldBlender = graphics2D.DestImage.GetRecieveBlender();  					graphics2D.DestImage.SetRecieveBlender(new BlenderZBuffer());  					graphics2D.Render(polygonProjected' renderColor);  					graphics2D.DestImage.SetRecieveBlender(oldBlender);  #endif    					byte[] buffer = graphics2D.DestImage.GetBuffer();  					int pixels = graphics2D.DestImage.Width * graphics2D.DestImage.Height;  					for (int pixelIndex = 0; pixelIndex < pixels; pixelIndex++)  					{  						buffer[pixelIndex * 4 + ImageBuffer.OrderR] = buffer[pixelIndex * 4 + ImageBuffer.OrderR];  						buffer[pixelIndex * 4 + ImageBuffer.OrderG] = buffer[pixelIndex * 4 + ImageBuffer.OrderR];  						buffer[pixelIndex * 4 + ImageBuffer.OrderB] = buffer[pixelIndex * 4 + ImageBuffer.OrderR];  					}  				}  			}
Magic Number,MatterHackers.RayTracer,ThumbnailTracer,C:\repos\MatterHackers_MatterControl\CustomWidgets\ThumbnailTracer.cs,DrawTo,The following statement contains a magic number: foreach (Face face in meshToDraw.Faces)  			{  				int i = 0;  				Vector3 normal = Vector3.TransformVector(face.normal' trackballTumbleWidget.ModelviewMatrix).GetNormal();  				if (normal.z > 0)  				{  					foreach (FaceEdge faceEdge in face.FaceEdges())  					{  						points[i].position = trackballTumbleWidget.GetScreenPosition(faceEdge.firstVertex.Position);    						Vector3 transformedPosition = Vector3.TransformPosition(faceEdge.firstVertex.Position' trackballTumbleWidget.ModelviewMatrix);  						points[i].z = transformedPosition.z;  						i++;  					}    					RGBA_Floats polyDrawColor = new RGBA_Floats();  					double L = Vector3.Dot(lightNormal' normal);  					if (L > 0.0f)  					{  						polyDrawColor = partColor * lightIllumination * L;  					}    					polyDrawColor = RGBA_Floats.ComponentMax(polyDrawColor' partColor * ambiantIllumination);  					for (i = 0; i < 3; i++)  					{  						double ratio = (points[i].z - minZ) / (maxZ - minZ);  						int ratioInt16 = (int)(ratio * 65536);  						points[i].color = new RGBA_Bytes(polyDrawColor.Red0To255' ratioInt16 >> 8' ratioInt16 & 0xFF);  					}      #if true  					scanline_unpacked_8 sl = new scanline_unpacked_8();  					ScanlineRasterizer ras = new ScanlineRasterizer();  					render_gouraud(graphics2D.DestImage' sl' ras' points);  #else  					IRecieveBlenderByte oldBlender = graphics2D.DestImage.GetRecieveBlender();  					graphics2D.DestImage.SetRecieveBlender(new BlenderZBuffer());  					graphics2D.Render(polygonProjected' renderColor);  					graphics2D.DestImage.SetRecieveBlender(oldBlender);  #endif    					byte[] buffer = graphics2D.DestImage.GetBuffer();  					int pixels = graphics2D.DestImage.Width * graphics2D.DestImage.Height;  					for (int pixelIndex = 0; pixelIndex < pixels; pixelIndex++)  					{  						buffer[pixelIndex * 4 + ImageBuffer.OrderR] = buffer[pixelIndex * 4 + ImageBuffer.OrderR];  						buffer[pixelIndex * 4 + ImageBuffer.OrderG] = buffer[pixelIndex * 4 + ImageBuffer.OrderR];  						buffer[pixelIndex * 4 + ImageBuffer.OrderB] = buffer[pixelIndex * 4 + ImageBuffer.OrderR];  					}  				}  			}
Magic Number,MatterHackers.RayTracer,ThumbnailTracer,C:\repos\MatterHackers_MatterControl\CustomWidgets\ThumbnailTracer.cs,DrawTo,The following statement contains a magic number: foreach (Face face in meshToDraw.Faces)  			{  				int i = 0;  				Vector3 normal = Vector3.TransformVector(face.normal' trackballTumbleWidget.ModelviewMatrix).GetNormal();  				if (normal.z > 0)  				{  					foreach (FaceEdge faceEdge in face.FaceEdges())  					{  						points[i].position = trackballTumbleWidget.GetScreenPosition(faceEdge.firstVertex.Position);    						Vector3 transformedPosition = Vector3.TransformPosition(faceEdge.firstVertex.Position' trackballTumbleWidget.ModelviewMatrix);  						points[i].z = transformedPosition.z;  						i++;  					}    					RGBA_Floats polyDrawColor = new RGBA_Floats();  					double L = Vector3.Dot(lightNormal' normal);  					if (L > 0.0f)  					{  						polyDrawColor = partColor * lightIllumination * L;  					}    					polyDrawColor = RGBA_Floats.ComponentMax(polyDrawColor' partColor * ambiantIllumination);  					for (i = 0; i < 3; i++)  					{  						double ratio = (points[i].z - minZ) / (maxZ - minZ);  						int ratioInt16 = (int)(ratio * 65536);  						points[i].color = new RGBA_Bytes(polyDrawColor.Red0To255' ratioInt16 >> 8' ratioInt16 & 0xFF);  					}      #if true  					scanline_unpacked_8 sl = new scanline_unpacked_8();  					ScanlineRasterizer ras = new ScanlineRasterizer();  					render_gouraud(graphics2D.DestImage' sl' ras' points);  #else  					IRecieveBlenderByte oldBlender = graphics2D.DestImage.GetRecieveBlender();  					graphics2D.DestImage.SetRecieveBlender(new BlenderZBuffer());  					graphics2D.Render(polygonProjected' renderColor);  					graphics2D.DestImage.SetRecieveBlender(oldBlender);  #endif    					byte[] buffer = graphics2D.DestImage.GetBuffer();  					int pixels = graphics2D.DestImage.Width * graphics2D.DestImage.Height;  					for (int pixelIndex = 0; pixelIndex < pixels; pixelIndex++)  					{  						buffer[pixelIndex * 4 + ImageBuffer.OrderR] = buffer[pixelIndex * 4 + ImageBuffer.OrderR];  						buffer[pixelIndex * 4 + ImageBuffer.OrderG] = buffer[pixelIndex * 4 + ImageBuffer.OrderR];  						buffer[pixelIndex * 4 + ImageBuffer.OrderB] = buffer[pixelIndex * 4 + ImageBuffer.OrderR];  					}  				}  			}
Magic Number,MatterHackers.RayTracer,ThumbnailTracer,C:\repos\MatterHackers_MatterControl\CustomWidgets\ThumbnailTracer.cs,DrawTo,The following statement contains a magic number: foreach (Face face in meshToDraw.Faces)  			{  				int i = 0;  				Vector3 normal = Vector3.TransformVector(face.normal' trackballTumbleWidget.ModelviewMatrix).GetNormal();  				if (normal.z > 0)  				{  					foreach (FaceEdge faceEdge in face.FaceEdges())  					{  						points[i].position = trackballTumbleWidget.GetScreenPosition(faceEdge.firstVertex.Position);    						Vector3 transformedPosition = Vector3.TransformPosition(faceEdge.firstVertex.Position' trackballTumbleWidget.ModelviewMatrix);  						points[i].z = transformedPosition.z;  						i++;  					}    					RGBA_Floats polyDrawColor = new RGBA_Floats();  					double L = Vector3.Dot(lightNormal' normal);  					if (L > 0.0f)  					{  						polyDrawColor = partColor * lightIllumination * L;  					}    					polyDrawColor = RGBA_Floats.ComponentMax(polyDrawColor' partColor * ambiantIllumination);  					for (i = 0; i < 3; i++)  					{  						double ratio = (points[i].z - minZ) / (maxZ - minZ);  						int ratioInt16 = (int)(ratio * 65536);  						points[i].color = new RGBA_Bytes(polyDrawColor.Red0To255' ratioInt16 >> 8' ratioInt16 & 0xFF);  					}      #if true  					scanline_unpacked_8 sl = new scanline_unpacked_8();  					ScanlineRasterizer ras = new ScanlineRasterizer();  					render_gouraud(graphics2D.DestImage' sl' ras' points);  #else  					IRecieveBlenderByte oldBlender = graphics2D.DestImage.GetRecieveBlender();  					graphics2D.DestImage.SetRecieveBlender(new BlenderZBuffer());  					graphics2D.Render(polygonProjected' renderColor);  					graphics2D.DestImage.SetRecieveBlender(oldBlender);  #endif    					byte[] buffer = graphics2D.DestImage.GetBuffer();  					int pixels = graphics2D.DestImage.Width * graphics2D.DestImage.Height;  					for (int pixelIndex = 0; pixelIndex < pixels; pixelIndex++)  					{  						buffer[pixelIndex * 4 + ImageBuffer.OrderR] = buffer[pixelIndex * 4 + ImageBuffer.OrderR];  						buffer[pixelIndex * 4 + ImageBuffer.OrderG] = buffer[pixelIndex * 4 + ImageBuffer.OrderR];  						buffer[pixelIndex * 4 + ImageBuffer.OrderB] = buffer[pixelIndex * 4 + ImageBuffer.OrderR];  					}  				}  			}
Magic Number,MatterHackers.RayTracer,ThumbnailTracer,C:\repos\MatterHackers_MatterControl\CustomWidgets\ThumbnailTracer.cs,DrawTo,The following statement contains a magic number: foreach (Face face in meshToDraw.Faces)  			{  				int i = 0;  				Vector3 normal = Vector3.TransformVector(face.normal' trackballTumbleWidget.ModelviewMatrix).GetNormal();  				if (normal.z > 0)  				{  					foreach (FaceEdge faceEdge in face.FaceEdges())  					{  						points[i].position = trackballTumbleWidget.GetScreenPosition(faceEdge.firstVertex.Position);    						Vector3 transformedPosition = Vector3.TransformPosition(faceEdge.firstVertex.Position' trackballTumbleWidget.ModelviewMatrix);  						points[i].z = transformedPosition.z;  						i++;  					}    					RGBA_Floats polyDrawColor = new RGBA_Floats();  					double L = Vector3.Dot(lightNormal' normal);  					if (L > 0.0f)  					{  						polyDrawColor = partColor * lightIllumination * L;  					}    					polyDrawColor = RGBA_Floats.ComponentMax(polyDrawColor' partColor * ambiantIllumination);  					for (i = 0; i < 3; i++)  					{  						double ratio = (points[i].z - minZ) / (maxZ - minZ);  						int ratioInt16 = (int)(ratio * 65536);  						points[i].color = new RGBA_Bytes(polyDrawColor.Red0To255' ratioInt16 >> 8' ratioInt16 & 0xFF);  					}      #if true  					scanline_unpacked_8 sl = new scanline_unpacked_8();  					ScanlineRasterizer ras = new ScanlineRasterizer();  					render_gouraud(graphics2D.DestImage' sl' ras' points);  #else  					IRecieveBlenderByte oldBlender = graphics2D.DestImage.GetRecieveBlender();  					graphics2D.DestImage.SetRecieveBlender(new BlenderZBuffer());  					graphics2D.Render(polygonProjected' renderColor);  					graphics2D.DestImage.SetRecieveBlender(oldBlender);  #endif    					byte[] buffer = graphics2D.DestImage.GetBuffer();  					int pixels = graphics2D.DestImage.Width * graphics2D.DestImage.Height;  					for (int pixelIndex = 0; pixelIndex < pixels; pixelIndex++)  					{  						buffer[pixelIndex * 4 + ImageBuffer.OrderR] = buffer[pixelIndex * 4 + ImageBuffer.OrderR];  						buffer[pixelIndex * 4 + ImageBuffer.OrderG] = buffer[pixelIndex * 4 + ImageBuffer.OrderR];  						buffer[pixelIndex * 4 + ImageBuffer.OrderB] = buffer[pixelIndex * 4 + ImageBuffer.OrderR];  					}  				}  			}
Magic Number,MatterHackers.RayTracer,ThumbnailTracer,C:\repos\MatterHackers_MatterControl\CustomWidgets\ThumbnailTracer.cs,DrawTo,The following statement contains a magic number: foreach (Face face in meshToDraw.Faces)  			{  				int i = 0;  				Vector3 normal = Vector3.TransformVector(face.normal' trackballTumbleWidget.ModelviewMatrix).GetNormal();  				if (normal.z > 0)  				{  					foreach (FaceEdge faceEdge in face.FaceEdges())  					{  						points[i].position = trackballTumbleWidget.GetScreenPosition(faceEdge.firstVertex.Position);    						Vector3 transformedPosition = Vector3.TransformPosition(faceEdge.firstVertex.Position' trackballTumbleWidget.ModelviewMatrix);  						points[i].z = transformedPosition.z;  						i++;  					}    					RGBA_Floats polyDrawColor = new RGBA_Floats();  					double L = Vector3.Dot(lightNormal' normal);  					if (L > 0.0f)  					{  						polyDrawColor = partColor * lightIllumination * L;  					}    					polyDrawColor = RGBA_Floats.ComponentMax(polyDrawColor' partColor * ambiantIllumination);  					for (i = 0; i < 3; i++)  					{  						double ratio = (points[i].z - minZ) / (maxZ - minZ);  						int ratioInt16 = (int)(ratio * 65536);  						points[i].color = new RGBA_Bytes(polyDrawColor.Red0To255' ratioInt16 >> 8' ratioInt16 & 0xFF);  					}      #if true  					scanline_unpacked_8 sl = new scanline_unpacked_8();  					ScanlineRasterizer ras = new ScanlineRasterizer();  					render_gouraud(graphics2D.DestImage' sl' ras' points);  #else  					IRecieveBlenderByte oldBlender = graphics2D.DestImage.GetRecieveBlender();  					graphics2D.DestImage.SetRecieveBlender(new BlenderZBuffer());  					graphics2D.Render(polygonProjected' renderColor);  					graphics2D.DestImage.SetRecieveBlender(oldBlender);  #endif    					byte[] buffer = graphics2D.DestImage.GetBuffer();  					int pixels = graphics2D.DestImage.Width * graphics2D.DestImage.Height;  					for (int pixelIndex = 0; pixelIndex < pixels; pixelIndex++)  					{  						buffer[pixelIndex * 4 + ImageBuffer.OrderR] = buffer[pixelIndex * 4 + ImageBuffer.OrderR];  						buffer[pixelIndex * 4 + ImageBuffer.OrderG] = buffer[pixelIndex * 4 + ImageBuffer.OrderR];  						buffer[pixelIndex * 4 + ImageBuffer.OrderB] = buffer[pixelIndex * 4 + ImageBuffer.OrderR];  					}  				}  			}
Magic Number,MatterHackers.RayTracer,ThumbnailTracer,C:\repos\MatterHackers_MatterControl\CustomWidgets\ThumbnailTracer.cs,DrawTo,The following statement contains a magic number: foreach (Face face in meshToDraw.Faces)  			{  				int i = 0;  				Vector3 normal = Vector3.TransformVector(face.normal' trackballTumbleWidget.ModelviewMatrix).GetNormal();  				if (normal.z > 0)  				{  					foreach (FaceEdge faceEdge in face.FaceEdges())  					{  						points[i].position = trackballTumbleWidget.GetScreenPosition(faceEdge.firstVertex.Position);    						Vector3 transformedPosition = Vector3.TransformPosition(faceEdge.firstVertex.Position' trackballTumbleWidget.ModelviewMatrix);  						points[i].z = transformedPosition.z;  						i++;  					}    					RGBA_Floats polyDrawColor = new RGBA_Floats();  					double L = Vector3.Dot(lightNormal' normal);  					if (L > 0.0f)  					{  						polyDrawColor = partColor * lightIllumination * L;  					}    					polyDrawColor = RGBA_Floats.ComponentMax(polyDrawColor' partColor * ambiantIllumination);  					for (i = 0; i < 3; i++)  					{  						double ratio = (points[i].z - minZ) / (maxZ - minZ);  						int ratioInt16 = (int)(ratio * 65536);  						points[i].color = new RGBA_Bytes(polyDrawColor.Red0To255' ratioInt16 >> 8' ratioInt16 & 0xFF);  					}      #if true  					scanline_unpacked_8 sl = new scanline_unpacked_8();  					ScanlineRasterizer ras = new ScanlineRasterizer();  					render_gouraud(graphics2D.DestImage' sl' ras' points);  #else  					IRecieveBlenderByte oldBlender = graphics2D.DestImage.GetRecieveBlender();  					graphics2D.DestImage.SetRecieveBlender(new BlenderZBuffer());  					graphics2D.Render(polygonProjected' renderColor);  					graphics2D.DestImage.SetRecieveBlender(oldBlender);  #endif    					byte[] buffer = graphics2D.DestImage.GetBuffer();  					int pixels = graphics2D.DestImage.Width * graphics2D.DestImage.Height;  					for (int pixelIndex = 0; pixelIndex < pixels; pixelIndex++)  					{  						buffer[pixelIndex * 4 + ImageBuffer.OrderR] = buffer[pixelIndex * 4 + ImageBuffer.OrderR];  						buffer[pixelIndex * 4 + ImageBuffer.OrderG] = buffer[pixelIndex * 4 + ImageBuffer.OrderR];  						buffer[pixelIndex * 4 + ImageBuffer.OrderB] = buffer[pixelIndex * 4 + ImageBuffer.OrderR];  					}  				}  			}
Magic Number,MatterHackers.RayTracer,ThumbnailTracer,C:\repos\MatterHackers_MatterControl\CustomWidgets\ThumbnailTracer.cs,DrawTo,The following statement contains a magic number: foreach (Face face in meshToDraw.Faces)  			{  				int i = 0;  				Vector3 normal = Vector3.TransformVector(face.normal' trackballTumbleWidget.ModelviewMatrix).GetNormal();  				if (normal.z > 0)  				{  					foreach (FaceEdge faceEdge in face.FaceEdges())  					{  						points[i].position = trackballTumbleWidget.GetScreenPosition(faceEdge.firstVertex.Position);    						Vector3 transformedPosition = Vector3.TransformPosition(faceEdge.firstVertex.Position' trackballTumbleWidget.ModelviewMatrix);  						points[i].z = transformedPosition.z;  						i++;  					}    					RGBA_Floats polyDrawColor = new RGBA_Floats();  					double L = Vector3.Dot(lightNormal' normal);  					if (L > 0.0f)  					{  						polyDrawColor = partColor * lightIllumination * L;  					}    					polyDrawColor = RGBA_Floats.ComponentMax(polyDrawColor' partColor * ambiantIllumination);  					for (i = 0; i < 3; i++)  					{  						double ratio = (points[i].z - minZ) / (maxZ - minZ);  						int ratioInt16 = (int)(ratio * 65536);  						points[i].color = new RGBA_Bytes(polyDrawColor.Red0To255' ratioInt16 >> 8' ratioInt16 & 0xFF);  					}      #if true  					scanline_unpacked_8 sl = new scanline_unpacked_8();  					ScanlineRasterizer ras = new ScanlineRasterizer();  					render_gouraud(graphics2D.DestImage' sl' ras' points);  #else  					IRecieveBlenderByte oldBlender = graphics2D.DestImage.GetRecieveBlender();  					graphics2D.DestImage.SetRecieveBlender(new BlenderZBuffer());  					graphics2D.Render(polygonProjected' renderColor);  					graphics2D.DestImage.SetRecieveBlender(oldBlender);  #endif    					byte[] buffer = graphics2D.DestImage.GetBuffer();  					int pixels = graphics2D.DestImage.Width * graphics2D.DestImage.Height;  					for (int pixelIndex = 0; pixelIndex < pixels; pixelIndex++)  					{  						buffer[pixelIndex * 4 + ImageBuffer.OrderR] = buffer[pixelIndex * 4 + ImageBuffer.OrderR];  						buffer[pixelIndex * 4 + ImageBuffer.OrderG] = buffer[pixelIndex * 4 + ImageBuffer.OrderR];  						buffer[pixelIndex * 4 + ImageBuffer.OrderB] = buffer[pixelIndex * 4 + ImageBuffer.OrderR];  					}  				}  			}
Magic Number,MatterHackers.RayTracer,ThumbnailTracer,C:\repos\MatterHackers_MatterControl\CustomWidgets\ThumbnailTracer.cs,DrawTo,The following statement contains a magic number: foreach (Face face in meshToDraw.Faces)  			{  				int i = 0;  				Vector3 normal = Vector3.TransformVector(face.normal' trackballTumbleWidget.ModelviewMatrix).GetNormal();  				if (normal.z > 0)  				{  					foreach (FaceEdge faceEdge in face.FaceEdges())  					{  						points[i].position = trackballTumbleWidget.GetScreenPosition(faceEdge.firstVertex.Position);    						Vector3 transformedPosition = Vector3.TransformPosition(faceEdge.firstVertex.Position' trackballTumbleWidget.ModelviewMatrix);  						points[i].z = transformedPosition.z;  						i++;  					}    					RGBA_Floats polyDrawColor = new RGBA_Floats();  					double L = Vector3.Dot(lightNormal' normal);  					if (L > 0.0f)  					{  						polyDrawColor = partColor * lightIllumination * L;  					}    					polyDrawColor = RGBA_Floats.ComponentMax(polyDrawColor' partColor * ambiantIllumination);  					for (i = 0; i < 3; i++)  					{  						double ratio = (points[i].z - minZ) / (maxZ - minZ);  						int ratioInt16 = (int)(ratio * 65536);  						points[i].color = new RGBA_Bytes(polyDrawColor.Red0To255' ratioInt16 >> 8' ratioInt16 & 0xFF);  					}      #if true  					scanline_unpacked_8 sl = new scanline_unpacked_8();  					ScanlineRasterizer ras = new ScanlineRasterizer();  					render_gouraud(graphics2D.DestImage' sl' ras' points);  #else  					IRecieveBlenderByte oldBlender = graphics2D.DestImage.GetRecieveBlender();  					graphics2D.DestImage.SetRecieveBlender(new BlenderZBuffer());  					graphics2D.Render(polygonProjected' renderColor);  					graphics2D.DestImage.SetRecieveBlender(oldBlender);  #endif    					byte[] buffer = graphics2D.DestImage.GetBuffer();  					int pixels = graphics2D.DestImage.Width * graphics2D.DestImage.Height;  					for (int pixelIndex = 0; pixelIndex < pixels; pixelIndex++)  					{  						buffer[pixelIndex * 4 + ImageBuffer.OrderR] = buffer[pixelIndex * 4 + ImageBuffer.OrderR];  						buffer[pixelIndex * 4 + ImageBuffer.OrderG] = buffer[pixelIndex * 4 + ImageBuffer.OrderR];  						buffer[pixelIndex * 4 + ImageBuffer.OrderB] = buffer[pixelIndex * 4 + ImageBuffer.OrderR];  					}  				}  			}
Magic Number,MatterHackers.RayTracer,ThumbnailTracer,C:\repos\MatterHackers_MatterControl\CustomWidgets\ThumbnailTracer.cs,AddTestMesh,The following statement contains a magic number: if (meshGroups != null)  			{  				AxisAlignedBoundingBox totalMeshBounds = GetAxisAlignedBoundingBox(meshGroups);  				loadedMeshGroups = meshGroups;  				Vector3 meshCenter = totalMeshBounds.Center;  				foreach (MeshGroup meshGroup in meshGroups)  				{  					meshGroup.Translate(-meshCenter);  				}    				ScaleMeshToView(loadedMeshGroups);    				RGBA_Bytes partColor = new RGBA_Bytes(0' 130' 153);  				partColor = RGBA_Bytes.White;  				IPrimitive bvhCollection = MeshToBVH.Convert(loadedMeshGroups' new SolidMaterial(partColor.GetAsRGBA_Floats()' .01' 0.0' 2.0));    				renderCollection.Add(bvhCollection);  			}
Magic Number,MatterHackers.RayTracer,ThumbnailTracer,C:\repos\MatterHackers_MatterControl\CustomWidgets\ThumbnailTracer.cs,AddTestMesh,The following statement contains a magic number: if (meshGroups != null)  			{  				AxisAlignedBoundingBox totalMeshBounds = GetAxisAlignedBoundingBox(meshGroups);  				loadedMeshGroups = meshGroups;  				Vector3 meshCenter = totalMeshBounds.Center;  				foreach (MeshGroup meshGroup in meshGroups)  				{  					meshGroup.Translate(-meshCenter);  				}    				ScaleMeshToView(loadedMeshGroups);    				RGBA_Bytes partColor = new RGBA_Bytes(0' 130' 153);  				partColor = RGBA_Bytes.White;  				IPrimitive bvhCollection = MeshToBVH.Convert(loadedMeshGroups' new SolidMaterial(partColor.GetAsRGBA_Floats()' .01' 0.0' 2.0));    				renderCollection.Add(bvhCollection);  			}
Magic Number,MatterHackers.RayTracer,ThumbnailTracer,C:\repos\MatterHackers_MatterControl\CustomWidgets\ThumbnailTracer.cs,AddTestMesh,The following statement contains a magic number: if (meshGroups != null)  			{  				AxisAlignedBoundingBox totalMeshBounds = GetAxisAlignedBoundingBox(meshGroups);  				loadedMeshGroups = meshGroups;  				Vector3 meshCenter = totalMeshBounds.Center;  				foreach (MeshGroup meshGroup in meshGroups)  				{  					meshGroup.Translate(-meshCenter);  				}    				ScaleMeshToView(loadedMeshGroups);    				RGBA_Bytes partColor = new RGBA_Bytes(0' 130' 153);  				partColor = RGBA_Bytes.White;  				IPrimitive bvhCollection = MeshToBVH.Convert(loadedMeshGroups' new SolidMaterial(partColor.GetAsRGBA_Floats()' .01' 0.0' 2.0));    				renderCollection.Add(bvhCollection);  			}
Magic Number,MatterHackers.RayTracer,ThumbnailTracer,C:\repos\MatterHackers_MatterControl\CustomWidgets\ThumbnailTracer.cs,AddTestMesh,The following statement contains a magic number: if (meshGroups != null)  			{  				AxisAlignedBoundingBox totalMeshBounds = GetAxisAlignedBoundingBox(meshGroups);  				loadedMeshGroups = meshGroups;  				Vector3 meshCenter = totalMeshBounds.Center;  				foreach (MeshGroup meshGroup in meshGroups)  				{  					meshGroup.Translate(-meshCenter);  				}    				ScaleMeshToView(loadedMeshGroups);    				RGBA_Bytes partColor = new RGBA_Bytes(0' 130' 153);  				partColor = RGBA_Bytes.White;  				IPrimitive bvhCollection = MeshToBVH.Convert(loadedMeshGroups' new SolidMaterial(partColor.GetAsRGBA_Floats()' .01' 0.0' 2.0));    				renderCollection.Add(bvhCollection);  			}
Magic Number,MatterHackers.RayTracer,ThumbnailTracer,C:\repos\MatterHackers_MatterControl\CustomWidgets\ThumbnailTracer.cs,CreateScene,The following statement contains a magic number: scene.background = new Background(new RGBA_Floats(1' 1' 1' 0)' 0.6);
Magic Number,MatterHackers.RayTracer,ThumbnailTracer,C:\repos\MatterHackers_MatterControl\CustomWidgets\ThumbnailTracer.cs,CreateScene,The following statement contains a magic number: scene.lights.Add(new PointLight(new Vector3(-5000' -5000' 3000)' new RGBA_Floats(0.5' 0.5' 0.5)));
Magic Number,MatterHackers.RayTracer,ThumbnailTracer,C:\repos\MatterHackers_MatterControl\CustomWidgets\ThumbnailTracer.cs,CreateScene,The following statement contains a magic number: scene.lights.Add(new PointLight(new Vector3(-5000' -5000' 3000)' new RGBA_Floats(0.5' 0.5' 0.5)));
Magic Number,MatterHackers.RayTracer,ThumbnailTracer,C:\repos\MatterHackers_MatterControl\CustomWidgets\ThumbnailTracer.cs,CreateScene,The following statement contains a magic number: scene.lights.Add(new PointLight(new Vector3(-5000' -5000' 3000)' new RGBA_Floats(0.5' 0.5' 0.5)));
Magic Number,MatterHackers.RayTracer,ThumbnailTracer,C:\repos\MatterHackers_MatterControl\CustomWidgets\ThumbnailTracer.cs,CreateScene,The following statement contains a magic number: scene.lights.Add(new PointLight(new Vector3(-5000' -5000' 3000)' new RGBA_Floats(0.5' 0.5' 0.5)));
Magic Number,MatterHackers.RayTracer,ThumbnailTracer,C:\repos\MatterHackers_MatterControl\CustomWidgets\ThumbnailTracer.cs,CreateScene,The following statement contains a magic number: scene.lights.Add(new PointLight(new Vector3(-5000' -5000' 3000)' new RGBA_Floats(0.5' 0.5' 0.5)));
Magic Number,MatterHackers.RayTracer,ThumbnailTracer,C:\repos\MatterHackers_MatterControl\CustomWidgets\ThumbnailTracer.cs,CreateScene,The following statement contains a magic number: scene.lights.Add(new PointLight(new Vector3(-5000' -5000' 3000)' new RGBA_Floats(0.5' 0.5' 0.5)));
Magic Number,MatterHackers.RayTracer,ThumbnailTracer,C:\repos\MatterHackers_MatterControl\CustomWidgets\ThumbnailTracer.cs,ScaleMeshToView,The following statement contains a magic number: if (loadedMeshGroups != null)  			{  				AxisAlignedBoundingBox meshBounds = GetAxisAlignedBoundingBox(loadedMeshGroups);    				bool done = false;  				double scaleFraction = .1;  				RectangleDouble goalBounds = new RectangleDouble(0' 0' size.x' size.y);  				goalBounds.Inflate(-10);  				while (!done)  				{  					RectangleDouble partScreenBounds = GetScreenBounds(meshBounds);    					if (!NeedsToBeSmaller(partScreenBounds' goalBounds))  					{  						trackballTumbleWidget.TrackBallController.Scale *= (1 + scaleFraction);  						partScreenBounds = GetScreenBounds(meshBounds);    						// If it crossed over the goal reduct the amount we are adjusting by.  						if (NeedsToBeSmaller(partScreenBounds' goalBounds))  						{  							scaleFraction /= 2;  						}  					}  					else  					{  						trackballTumbleWidget.TrackBallController.Scale *= (1 - scaleFraction);  						partScreenBounds = GetScreenBounds(meshBounds);    						// If it crossed over the goal reduct the amount we are adjusting by.  						if (!NeedsToBeSmaller(partScreenBounds' goalBounds))  						{  							scaleFraction /= 2;  							if (scaleFraction < .001)  							{  								done = true;  							}  						}  					}  				}  			}
Magic Number,MatterHackers.RayTracer,ThumbnailTracer,C:\repos\MatterHackers_MatterControl\CustomWidgets\ThumbnailTracer.cs,ScaleMeshToView,The following statement contains a magic number: if (loadedMeshGroups != null)  			{  				AxisAlignedBoundingBox meshBounds = GetAxisAlignedBoundingBox(loadedMeshGroups);    				bool done = false;  				double scaleFraction = .1;  				RectangleDouble goalBounds = new RectangleDouble(0' 0' size.x' size.y);  				goalBounds.Inflate(-10);  				while (!done)  				{  					RectangleDouble partScreenBounds = GetScreenBounds(meshBounds);    					if (!NeedsToBeSmaller(partScreenBounds' goalBounds))  					{  						trackballTumbleWidget.TrackBallController.Scale *= (1 + scaleFraction);  						partScreenBounds = GetScreenBounds(meshBounds);    						// If it crossed over the goal reduct the amount we are adjusting by.  						if (NeedsToBeSmaller(partScreenBounds' goalBounds))  						{  							scaleFraction /= 2;  						}  					}  					else  					{  						trackballTumbleWidget.TrackBallController.Scale *= (1 - scaleFraction);  						partScreenBounds = GetScreenBounds(meshBounds);    						// If it crossed over the goal reduct the amount we are adjusting by.  						if (!NeedsToBeSmaller(partScreenBounds' goalBounds))  						{  							scaleFraction /= 2;  							if (scaleFraction < .001)  							{  								done = true;  							}  						}  					}  				}  			}
Magic Number,MatterHackers.RayTracer,ThumbnailTracer,C:\repos\MatterHackers_MatterControl\CustomWidgets\ThumbnailTracer.cs,ScaleMeshToView,The following statement contains a magic number: if (loadedMeshGroups != null)  			{  				AxisAlignedBoundingBox meshBounds = GetAxisAlignedBoundingBox(loadedMeshGroups);    				bool done = false;  				double scaleFraction = .1;  				RectangleDouble goalBounds = new RectangleDouble(0' 0' size.x' size.y);  				goalBounds.Inflate(-10);  				while (!done)  				{  					RectangleDouble partScreenBounds = GetScreenBounds(meshBounds);    					if (!NeedsToBeSmaller(partScreenBounds' goalBounds))  					{  						trackballTumbleWidget.TrackBallController.Scale *= (1 + scaleFraction);  						partScreenBounds = GetScreenBounds(meshBounds);    						// If it crossed over the goal reduct the amount we are adjusting by.  						if (NeedsToBeSmaller(partScreenBounds' goalBounds))  						{  							scaleFraction /= 2;  						}  					}  					else  					{  						trackballTumbleWidget.TrackBallController.Scale *= (1 - scaleFraction);  						partScreenBounds = GetScreenBounds(meshBounds);    						// If it crossed over the goal reduct the amount we are adjusting by.  						if (!NeedsToBeSmaller(partScreenBounds' goalBounds))  						{  							scaleFraction /= 2;  							if (scaleFraction < .001)  							{  								done = true;  							}  						}  					}  				}  			}
Magic Number,MatterHackers.RayTracer,ThumbnailTracer,C:\repos\MatterHackers_MatterControl\CustomWidgets\ThumbnailTracer.cs,ScaleMeshToView,The following statement contains a magic number: if (loadedMeshGroups != null)  			{  				AxisAlignedBoundingBox meshBounds = GetAxisAlignedBoundingBox(loadedMeshGroups);    				bool done = false;  				double scaleFraction = .1;  				RectangleDouble goalBounds = new RectangleDouble(0' 0' size.x' size.y);  				goalBounds.Inflate(-10);  				while (!done)  				{  					RectangleDouble partScreenBounds = GetScreenBounds(meshBounds);    					if (!NeedsToBeSmaller(partScreenBounds' goalBounds))  					{  						trackballTumbleWidget.TrackBallController.Scale *= (1 + scaleFraction);  						partScreenBounds = GetScreenBounds(meshBounds);    						// If it crossed over the goal reduct the amount we are adjusting by.  						if (NeedsToBeSmaller(partScreenBounds' goalBounds))  						{  							scaleFraction /= 2;  						}  					}  					else  					{  						trackballTumbleWidget.TrackBallController.Scale *= (1 - scaleFraction);  						partScreenBounds = GetScreenBounds(meshBounds);    						// If it crossed over the goal reduct the amount we are adjusting by.  						if (!NeedsToBeSmaller(partScreenBounds' goalBounds))  						{  							scaleFraction /= 2;  							if (scaleFraction < .001)  							{  								done = true;  							}  						}  					}  				}  			}
Magic Number,MatterHackers.RayTracer,ThumbnailTracer,C:\repos\MatterHackers_MatterControl\CustomWidgets\ThumbnailTracer.cs,ScaleMeshToView,The following statement contains a magic number: if (loadedMeshGroups != null)  			{  				AxisAlignedBoundingBox meshBounds = GetAxisAlignedBoundingBox(loadedMeshGroups);    				bool done = false;  				double scaleFraction = .1;  				RectangleDouble goalBounds = new RectangleDouble(0' 0' size.x' size.y);  				goalBounds.Inflate(-10);  				while (!done)  				{  					RectangleDouble partScreenBounds = GetScreenBounds(meshBounds);    					if (!NeedsToBeSmaller(partScreenBounds' goalBounds))  					{  						trackballTumbleWidget.TrackBallController.Scale *= (1 + scaleFraction);  						partScreenBounds = GetScreenBounds(meshBounds);    						// If it crossed over the goal reduct the amount we are adjusting by.  						if (NeedsToBeSmaller(partScreenBounds' goalBounds))  						{  							scaleFraction /= 2;  						}  					}  					else  					{  						trackballTumbleWidget.TrackBallController.Scale *= (1 - scaleFraction);  						partScreenBounds = GetScreenBounds(meshBounds);    						// If it crossed over the goal reduct the amount we are adjusting by.  						if (!NeedsToBeSmaller(partScreenBounds' goalBounds))  						{  							scaleFraction /= 2;  							if (scaleFraction < .001)  							{  								done = true;  							}  						}  					}  				}  			}
Magic Number,MatterHackers.RayTracer,BlenderZBuffer,C:\repos\MatterHackers_MatterControl\CustomWidgets\ThumbnailTracer.cs,CopyPixels,The following statement contains a magic number: do  				{  					if (sourceColor.green > buffer[bufferOffset + ImageBuffer.OrderG])  					{  						buffer[bufferOffset + ImageBuffer.OrderR] = sourceColor.red;  						buffer[bufferOffset + ImageBuffer.OrderG] = sourceColor.green;  						buffer[bufferOffset + ImageBuffer.OrderB] = sourceColor.blue;  						buffer[bufferOffset + ImageBuffer.OrderA] = 255;  					}  					else if (sourceColor.green == buffer[bufferOffset + ImageBuffer.OrderG]  						&& sourceColor.blue > buffer[bufferOffset + ImageBuffer.OrderB])  					{  						buffer[bufferOffset + ImageBuffer.OrderR] = sourceColor.red;  						buffer[bufferOffset + ImageBuffer.OrderG] = sourceColor.green;  						buffer[bufferOffset + ImageBuffer.OrderB] = sourceColor.blue;  						buffer[bufferOffset + ImageBuffer.OrderA] = 255;  					}  					bufferOffset += 4;  				}  				while (--count != 0);
Magic Number,MatterHackers.RayTracer,BlenderZBuffer,C:\repos\MatterHackers_MatterControl\CustomWidgets\ThumbnailTracer.cs,CopyPixels,The following statement contains a magic number: do  				{  					if (sourceColor.green > buffer[bufferOffset + ImageBuffer.OrderG])  					{  						buffer[bufferOffset + ImageBuffer.OrderR] = sourceColor.red;  						buffer[bufferOffset + ImageBuffer.OrderG] = sourceColor.green;  						buffer[bufferOffset + ImageBuffer.OrderB] = sourceColor.blue;  						buffer[bufferOffset + ImageBuffer.OrderA] = 255;  					}  					else if (sourceColor.green == buffer[bufferOffset + ImageBuffer.OrderG]  						&& sourceColor.blue > buffer[bufferOffset + ImageBuffer.OrderB])  					{  						buffer[bufferOffset + ImageBuffer.OrderR] = sourceColor.red;  						buffer[bufferOffset + ImageBuffer.OrderG] = sourceColor.green;  						buffer[bufferOffset + ImageBuffer.OrderB] = sourceColor.blue;  						buffer[bufferOffset + ImageBuffer.OrderA] = 255;  					}  					bufferOffset += 4;  				}  				while (--count != 0);
Magic Number,MatterHackers.RayTracer,BlenderZBuffer,C:\repos\MatterHackers_MatterControl\CustomWidgets\ThumbnailTracer.cs,CopyPixels,The following statement contains a magic number: do  				{  					if (sourceColor.green > buffer[bufferOffset + ImageBuffer.OrderG])  					{  						buffer[bufferOffset + ImageBuffer.OrderR] = sourceColor.red;  						buffer[bufferOffset + ImageBuffer.OrderG] = sourceColor.green;  						buffer[bufferOffset + ImageBuffer.OrderB] = sourceColor.blue;  						buffer[bufferOffset + ImageBuffer.OrderA] = 255;  					}  					else if (sourceColor.green == buffer[bufferOffset + ImageBuffer.OrderG]  						&& sourceColor.blue > buffer[bufferOffset + ImageBuffer.OrderB])  					{  						buffer[bufferOffset + ImageBuffer.OrderR] = sourceColor.red;  						buffer[bufferOffset + ImageBuffer.OrderG] = sourceColor.green;  						buffer[bufferOffset + ImageBuffer.OrderB] = sourceColor.blue;  						buffer[bufferOffset + ImageBuffer.OrderA] = 255;  					}  					bufferOffset += 4;  				}  				while (--count != 0);
Magic Number,MatterHackers.RayTracer,BlenderZBuffer,C:\repos\MatterHackers_MatterControl\CustomWidgets\ThumbnailTracer.cs,BlendPixel,The following statement contains a magic number: {  					unchecked  					{  						if (sourceColor.green > buffer[bufferOffset + ImageBuffer.OrderG])  						{  							buffer[bufferOffset + ImageBuffer.OrderR] = sourceColor.red;  							buffer[bufferOffset + ImageBuffer.OrderG] = sourceColor.green;  							buffer[bufferOffset + ImageBuffer.OrderB] = sourceColor.blue;  							buffer[bufferOffset + ImageBuffer.OrderA] = 255;  						}  						else if (sourceColor.green == buffer[bufferOffset + ImageBuffer.OrderG]  							&& sourceColor.blue > buffer[bufferOffset + ImageBuffer.OrderB])  						{  							buffer[bufferOffset + ImageBuffer.OrderR] = sourceColor.red;  							buffer[bufferOffset + ImageBuffer.OrderG] = sourceColor.green;  							buffer[bufferOffset + ImageBuffer.OrderB] = sourceColor.blue;  							buffer[bufferOffset + ImageBuffer.OrderA] = 255;  						}  					}  				}
Magic Number,MatterHackers.RayTracer,BlenderZBuffer,C:\repos\MatterHackers_MatterControl\CustomWidgets\ThumbnailTracer.cs,BlendPixel,The following statement contains a magic number: {  					unchecked  					{  						if (sourceColor.green > buffer[bufferOffset + ImageBuffer.OrderG])  						{  							buffer[bufferOffset + ImageBuffer.OrderR] = sourceColor.red;  							buffer[bufferOffset + ImageBuffer.OrderG] = sourceColor.green;  							buffer[bufferOffset + ImageBuffer.OrderB] = sourceColor.blue;  							buffer[bufferOffset + ImageBuffer.OrderA] = 255;  						}  						else if (sourceColor.green == buffer[bufferOffset + ImageBuffer.OrderG]  							&& sourceColor.blue > buffer[bufferOffset + ImageBuffer.OrderB])  						{  							buffer[bufferOffset + ImageBuffer.OrderR] = sourceColor.red;  							buffer[bufferOffset + ImageBuffer.OrderG] = sourceColor.green;  							buffer[bufferOffset + ImageBuffer.OrderB] = sourceColor.blue;  							buffer[bufferOffset + ImageBuffer.OrderA] = 255;  						}  					}  				}
Magic Number,MatterHackers.RayTracer,BlenderZBuffer,C:\repos\MatterHackers_MatterControl\CustomWidgets\ThumbnailTracer.cs,BlendPixels,The following statement contains a magic number: do  				{  					BlendPixel(destBuffer' bufferOffset' sourceColors[sourceColorsOffset]);  					bufferOffset += 4;  					++sourceColorsOffset;  				}  				while (--count != 0);
Magic Number,MatterHackers.MatterControl.DataStorage,Entity,C:\repos\MatterHackers_MatterControl\DataStorage\Models.cs,TryHandleInsert,The following statement contains a magic number: try  			{  				if (retryCount < maxRetries)  				{  					Datastore.Instance.dbSQLite.Insert(this);  				}  			}  			catch (Exception)  			{  				GuiWidget.BreakInDebugger();  				Thread.Sleep(100);  				this.TryHandleInsert();  			}
Magic Number,MatterHackers.MatterControl.DataStorage,Entity,C:\repos\MatterHackers_MatterControl\DataStorage\Models.cs,TryHandleUpdate,The following statement contains a magic number: try  			{  				if (retryCount < maxRetries)  				{  					Datastore.Instance.dbSQLite.Update(this);  				}  			}  			catch (Exception)  			{  				GuiWidget.BreakInDebugger();  				Thread.Sleep(100);  				this.TryHandleUpdate();  			}
Magic Number,MatterHackers.MatterControl.DataStorage,Datastore,C:\repos\MatterHackers_MatterControl\DataStorage\Datastore.cs,Exit,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,MatterHackers.MatterControl.DataStorage,Datastore,C:\repos\MatterHackers_MatterControl\DataStorage\Datastore.cs,Exit,The following statement contains a magic number: try  			{  				dbSQLite.Close();  			}  			catch (Exception)  			{  				GuiWidget.BreakInDebugger();  				// we failed to close so lets wait a bit and try again  				Thread.Sleep(1000);  				try  				{  					dbSQLite.Close();  				}  				catch (Exception)  				{  					GuiWidget.BreakInDebugger();  				}  			}
Magic Number,MatterHackers.MatterControl.DataStorage,Datastore,C:\repos\MatterHackers_MatterControl\DataStorage\Datastore.cs,GenerateSampleData,The following statement contains a magic number: for (int index = 1; index <= 5; index++)  			{  				Printer printer = new Printer();  				printer.ComPort = string.Format("COM{0}"' index);  				printer.BaudRate = "250000";  				printer.Name = string.Format("Printer {0}"' index);  				Datastore.Instance.dbSQLite.Insert(printer);  			}
Magic Number,MatterHackers.MatterControl.PrinterCommunication.Io,NotPrintingStream,C:\repos\MatterHackers_MatterControl\PrinterCommunication\Io\NotPrintingStream.cs,ReadLine,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,MatterHackers.MatterControl.PrinterCommunication.Io,PauseHandlingStream,C:\repos\MatterHackers_MatterControl\PrinterCommunication\Io\PauseHandlingStream.cs,Resume,The following statement contains a magic number: Vector3 ensureAllAxisAreSent = positionBeforeActualPause + new Vector3(.01' .01' .01);
Magic Number,MatterHackers.MatterControl.PrinterCommunication.Io,PauseHandlingStream,C:\repos\MatterHackers_MatterControl\PrinterCommunication\Io\PauseHandlingStream.cs,Resume,The following statement contains a magic number: Vector3 ensureAllAxisAreSent = positionBeforeActualPause + new Vector3(.01' .01' .01);
Magic Number,MatterHackers.MatterControl.PrinterCommunication.Io,PauseHandlingStream,C:\repos\MatterHackers_MatterControl\PrinterCommunication\Io\PauseHandlingStream.cs,Resume,The following statement contains a magic number: Vector3 ensureAllAxisAreSent = positionBeforeActualPause + new Vector3(.01' .01' .01);
Magic Number,MatterHackers.MatterControl.PrinterCommunication.Io,WaitForTempStream,C:\repos\MatterHackers_MatterControl\PrinterCommunication\Io\WaitForTempStream.cs,ReadLine,The following statement contains a magic number: switch (state)  			{  				case State.passthrough:  					{  						string lineToSend = base.ReadLine();    						if (lineToSend != null  							&& lineToSend.StartsWith("M"))  						{  							// initial test is just to see if it is an M109  							if (lineToSend.StartsWith("M109")) // extruder set and wait temp  							{  								if (lineToSend.Contains("F") // If it has a control character F (auto temp)  									|| !lineToSend.Contains("S")) // if it is a reset (has no S temperature)  								{  									// don't replace it  									return lineToSend;  								}    								// send an M104 instead  								waitWhenCooling = false;  								lineToSend = "M104" + lineToSend.Substring(4);  								GCodeFile.GetFirstNumberAfter("S"' lineToSend' ref targetTemp);  								extruderIndex = 0;  								GCodeFile.GetFirstNumberAfter("T"' lineToSend' ref extruderIndex);  								if (targetTemp > ignoreRequestIfBelowTemp)  								{  									state = State.waitingForExtruderTemp;  									timeHaveBeenAtTemp.Reset();  								}  								else  								{  									Thread.Sleep(100); // sleep .1 second while waiting for temp  									return ""; // return nothing until we reach temp  								}  							}  							else if (lineToSend.StartsWith("M190")) // bed set and wait temp  							{  								// send an M140 instead  								bool gotR = GCodeFile.GetFirstNumberAfter("R"' lineToSend' ref targetTemp);  								bool gotS = GCodeFile.GetFirstNumberAfter("S"' lineToSend' ref targetTemp);  								if (gotR || gotS)  								{  									if (targetTemp > ignoreRequestIfBelowTemp)  									{  										waitWhenCooling = gotR;  										lineToSend = "M140 S" + targetTemp.ToString();  										state = State.waitingForBedTemp;  										timeHaveBeenAtTemp.Reset();  									}  									else  									{  										Thread.Sleep(100); // sleep .1 second while waiting for temp  										return ""; // return nothing until we reach temp  									}  								}  								else  								{  									Thread.Sleep(100); // sleep .1 second while waiting for temp  									return ""; // return nothing until we reach temp  								}  							}  						}    						return lineToSend;  					}    				case State.waitingForExtruderTemp:  					{  						double extruderTemp = PrinterConnectionAndCommunication.Instance.GetActualExtruderTemperature((int)extruderIndex);  						bool tempWithinRange = extruderTemp >= targetTemp - sameTempRange && extruderTemp <= targetTemp + sameTempRange;  						if (tempWithinRange && !timeHaveBeenAtTemp.IsRunning)  						{  							timeHaveBeenAtTemp.Start();  						}    						if (timeHaveBeenAtTemp.Elapsed.TotalSeconds > waitAfterReachTempTime  							|| PrinterConnectionAndCommunication.Instance.PrintWasCanceled)  						{  							// switch to pass through and continue  							state = State.passthrough;  							return "";  						}  						else  						{  							// send a wait command  							Thread.Sleep(100); // sleep .1 second while waiting for temp  							return ""; // return nothing until we reach temp  						}  					}    				case State.waitingForBedTemp:  					{  						double bedTemp = PrinterConnectionAndCommunication.Instance.ActualBedTemperature;  						bool tempWithinRange;  						if (waitWhenCooling)  						{  							tempWithinRange = bedTemp >= targetTemp - sameTempRange && bedTemp <= targetTemp + sameTempRange;  						}  						else  						{  							tempWithinRange = bedTemp >= targetTemp - sameTempRange;  						}    						// Added R code for M190  						if (tempWithinRange && !timeHaveBeenAtTemp.IsRunning)  						{  							timeHaveBeenAtTemp.Start();  						}    						if (timeHaveBeenAtTemp.Elapsed.TotalSeconds > waitAfterReachTempTime  							|| PrinterConnectionAndCommunication.Instance.PrintWasCanceled)  						{  							// switch to pass through and continue  							state = State.passthrough;  							return "";  						}  						else  						{  							// send a wait command  							Thread.Sleep(100); // sleep .1 second while waiting for temp  							return ""; // return nothing until we reach temp  						}  					}  			}
Magic Number,MatterHackers.MatterControl.PrinterCommunication.Io,WaitForTempStream,C:\repos\MatterHackers_MatterControl\PrinterCommunication\Io\WaitForTempStream.cs,ReadLine,The following statement contains a magic number: switch (state)  			{  				case State.passthrough:  					{  						string lineToSend = base.ReadLine();    						if (lineToSend != null  							&& lineToSend.StartsWith("M"))  						{  							// initial test is just to see if it is an M109  							if (lineToSend.StartsWith("M109")) // extruder set and wait temp  							{  								if (lineToSend.Contains("F") // If it has a control character F (auto temp)  									|| !lineToSend.Contains("S")) // if it is a reset (has no S temperature)  								{  									// don't replace it  									return lineToSend;  								}    								// send an M104 instead  								waitWhenCooling = false;  								lineToSend = "M104" + lineToSend.Substring(4);  								GCodeFile.GetFirstNumberAfter("S"' lineToSend' ref targetTemp);  								extruderIndex = 0;  								GCodeFile.GetFirstNumberAfter("T"' lineToSend' ref extruderIndex);  								if (targetTemp > ignoreRequestIfBelowTemp)  								{  									state = State.waitingForExtruderTemp;  									timeHaveBeenAtTemp.Reset();  								}  								else  								{  									Thread.Sleep(100); // sleep .1 second while waiting for temp  									return ""; // return nothing until we reach temp  								}  							}  							else if (lineToSend.StartsWith("M190")) // bed set and wait temp  							{  								// send an M140 instead  								bool gotR = GCodeFile.GetFirstNumberAfter("R"' lineToSend' ref targetTemp);  								bool gotS = GCodeFile.GetFirstNumberAfter("S"' lineToSend' ref targetTemp);  								if (gotR || gotS)  								{  									if (targetTemp > ignoreRequestIfBelowTemp)  									{  										waitWhenCooling = gotR;  										lineToSend = "M140 S" + targetTemp.ToString();  										state = State.waitingForBedTemp;  										timeHaveBeenAtTemp.Reset();  									}  									else  									{  										Thread.Sleep(100); // sleep .1 second while waiting for temp  										return ""; // return nothing until we reach temp  									}  								}  								else  								{  									Thread.Sleep(100); // sleep .1 second while waiting for temp  									return ""; // return nothing until we reach temp  								}  							}  						}    						return lineToSend;  					}    				case State.waitingForExtruderTemp:  					{  						double extruderTemp = PrinterConnectionAndCommunication.Instance.GetActualExtruderTemperature((int)extruderIndex);  						bool tempWithinRange = extruderTemp >= targetTemp - sameTempRange && extruderTemp <= targetTemp + sameTempRange;  						if (tempWithinRange && !timeHaveBeenAtTemp.IsRunning)  						{  							timeHaveBeenAtTemp.Start();  						}    						if (timeHaveBeenAtTemp.Elapsed.TotalSeconds > waitAfterReachTempTime  							|| PrinterConnectionAndCommunication.Instance.PrintWasCanceled)  						{  							// switch to pass through and continue  							state = State.passthrough;  							return "";  						}  						else  						{  							// send a wait command  							Thread.Sleep(100); // sleep .1 second while waiting for temp  							return ""; // return nothing until we reach temp  						}  					}    				case State.waitingForBedTemp:  					{  						double bedTemp = PrinterConnectionAndCommunication.Instance.ActualBedTemperature;  						bool tempWithinRange;  						if (waitWhenCooling)  						{  							tempWithinRange = bedTemp >= targetTemp - sameTempRange && bedTemp <= targetTemp + sameTempRange;  						}  						else  						{  							tempWithinRange = bedTemp >= targetTemp - sameTempRange;  						}    						// Added R code for M190  						if (tempWithinRange && !timeHaveBeenAtTemp.IsRunning)  						{  							timeHaveBeenAtTemp.Start();  						}    						if (timeHaveBeenAtTemp.Elapsed.TotalSeconds > waitAfterReachTempTime  							|| PrinterConnectionAndCommunication.Instance.PrintWasCanceled)  						{  							// switch to pass through and continue  							state = State.passthrough;  							return "";  						}  						else  						{  							// send a wait command  							Thread.Sleep(100); // sleep .1 second while waiting for temp  							return ""; // return nothing until we reach temp  						}  					}  			}
Magic Number,MatterHackers.MatterControl.PrinterCommunication.Io,WaitForTempStream,C:\repos\MatterHackers_MatterControl\PrinterCommunication\Io\WaitForTempStream.cs,ReadLine,The following statement contains a magic number: switch (state)  			{  				case State.passthrough:  					{  						string lineToSend = base.ReadLine();    						if (lineToSend != null  							&& lineToSend.StartsWith("M"))  						{  							// initial test is just to see if it is an M109  							if (lineToSend.StartsWith("M109")) // extruder set and wait temp  							{  								if (lineToSend.Contains("F") // If it has a control character F (auto temp)  									|| !lineToSend.Contains("S")) // if it is a reset (has no S temperature)  								{  									// don't replace it  									return lineToSend;  								}    								// send an M104 instead  								waitWhenCooling = false;  								lineToSend = "M104" + lineToSend.Substring(4);  								GCodeFile.GetFirstNumberAfter("S"' lineToSend' ref targetTemp);  								extruderIndex = 0;  								GCodeFile.GetFirstNumberAfter("T"' lineToSend' ref extruderIndex);  								if (targetTemp > ignoreRequestIfBelowTemp)  								{  									state = State.waitingForExtruderTemp;  									timeHaveBeenAtTemp.Reset();  								}  								else  								{  									Thread.Sleep(100); // sleep .1 second while waiting for temp  									return ""; // return nothing until we reach temp  								}  							}  							else if (lineToSend.StartsWith("M190")) // bed set and wait temp  							{  								// send an M140 instead  								bool gotR = GCodeFile.GetFirstNumberAfter("R"' lineToSend' ref targetTemp);  								bool gotS = GCodeFile.GetFirstNumberAfter("S"' lineToSend' ref targetTemp);  								if (gotR || gotS)  								{  									if (targetTemp > ignoreRequestIfBelowTemp)  									{  										waitWhenCooling = gotR;  										lineToSend = "M140 S" + targetTemp.ToString();  										state = State.waitingForBedTemp;  										timeHaveBeenAtTemp.Reset();  									}  									else  									{  										Thread.Sleep(100); // sleep .1 second while waiting for temp  										return ""; // return nothing until we reach temp  									}  								}  								else  								{  									Thread.Sleep(100); // sleep .1 second while waiting for temp  									return ""; // return nothing until we reach temp  								}  							}  						}    						return lineToSend;  					}    				case State.waitingForExtruderTemp:  					{  						double extruderTemp = PrinterConnectionAndCommunication.Instance.GetActualExtruderTemperature((int)extruderIndex);  						bool tempWithinRange = extruderTemp >= targetTemp - sameTempRange && extruderTemp <= targetTemp + sameTempRange;  						if (tempWithinRange && !timeHaveBeenAtTemp.IsRunning)  						{  							timeHaveBeenAtTemp.Start();  						}    						if (timeHaveBeenAtTemp.Elapsed.TotalSeconds > waitAfterReachTempTime  							|| PrinterConnectionAndCommunication.Instance.PrintWasCanceled)  						{  							// switch to pass through and continue  							state = State.passthrough;  							return "";  						}  						else  						{  							// send a wait command  							Thread.Sleep(100); // sleep .1 second while waiting for temp  							return ""; // return nothing until we reach temp  						}  					}    				case State.waitingForBedTemp:  					{  						double bedTemp = PrinterConnectionAndCommunication.Instance.ActualBedTemperature;  						bool tempWithinRange;  						if (waitWhenCooling)  						{  							tempWithinRange = bedTemp >= targetTemp - sameTempRange && bedTemp <= targetTemp + sameTempRange;  						}  						else  						{  							tempWithinRange = bedTemp >= targetTemp - sameTempRange;  						}    						// Added R code for M190  						if (tempWithinRange && !timeHaveBeenAtTemp.IsRunning)  						{  							timeHaveBeenAtTemp.Start();  						}    						if (timeHaveBeenAtTemp.Elapsed.TotalSeconds > waitAfterReachTempTime  							|| PrinterConnectionAndCommunication.Instance.PrintWasCanceled)  						{  							// switch to pass through and continue  							state = State.passthrough;  							return "";  						}  						else  						{  							// send a wait command  							Thread.Sleep(100); // sleep .1 second while waiting for temp  							return ""; // return nothing until we reach temp  						}  					}  			}
Magic Number,MatterHackers.MatterControl.PrinterCommunication.Io,WaitForTempStream,C:\repos\MatterHackers_MatterControl\PrinterCommunication\Io\WaitForTempStream.cs,ReadLine,The following statement contains a magic number: switch (state)  			{  				case State.passthrough:  					{  						string lineToSend = base.ReadLine();    						if (lineToSend != null  							&& lineToSend.StartsWith("M"))  						{  							// initial test is just to see if it is an M109  							if (lineToSend.StartsWith("M109")) // extruder set and wait temp  							{  								if (lineToSend.Contains("F") // If it has a control character F (auto temp)  									|| !lineToSend.Contains("S")) // if it is a reset (has no S temperature)  								{  									// don't replace it  									return lineToSend;  								}    								// send an M104 instead  								waitWhenCooling = false;  								lineToSend = "M104" + lineToSend.Substring(4);  								GCodeFile.GetFirstNumberAfter("S"' lineToSend' ref targetTemp);  								extruderIndex = 0;  								GCodeFile.GetFirstNumberAfter("T"' lineToSend' ref extruderIndex);  								if (targetTemp > ignoreRequestIfBelowTemp)  								{  									state = State.waitingForExtruderTemp;  									timeHaveBeenAtTemp.Reset();  								}  								else  								{  									Thread.Sleep(100); // sleep .1 second while waiting for temp  									return ""; // return nothing until we reach temp  								}  							}  							else if (lineToSend.StartsWith("M190")) // bed set and wait temp  							{  								// send an M140 instead  								bool gotR = GCodeFile.GetFirstNumberAfter("R"' lineToSend' ref targetTemp);  								bool gotS = GCodeFile.GetFirstNumberAfter("S"' lineToSend' ref targetTemp);  								if (gotR || gotS)  								{  									if (targetTemp > ignoreRequestIfBelowTemp)  									{  										waitWhenCooling = gotR;  										lineToSend = "M140 S" + targetTemp.ToString();  										state = State.waitingForBedTemp;  										timeHaveBeenAtTemp.Reset();  									}  									else  									{  										Thread.Sleep(100); // sleep .1 second while waiting for temp  										return ""; // return nothing until we reach temp  									}  								}  								else  								{  									Thread.Sleep(100); // sleep .1 second while waiting for temp  									return ""; // return nothing until we reach temp  								}  							}  						}    						return lineToSend;  					}    				case State.waitingForExtruderTemp:  					{  						double extruderTemp = PrinterConnectionAndCommunication.Instance.GetActualExtruderTemperature((int)extruderIndex);  						bool tempWithinRange = extruderTemp >= targetTemp - sameTempRange && extruderTemp <= targetTemp + sameTempRange;  						if (tempWithinRange && !timeHaveBeenAtTemp.IsRunning)  						{  							timeHaveBeenAtTemp.Start();  						}    						if (timeHaveBeenAtTemp.Elapsed.TotalSeconds > waitAfterReachTempTime  							|| PrinterConnectionAndCommunication.Instance.PrintWasCanceled)  						{  							// switch to pass through and continue  							state = State.passthrough;  							return "";  						}  						else  						{  							// send a wait command  							Thread.Sleep(100); // sleep .1 second while waiting for temp  							return ""; // return nothing until we reach temp  						}  					}    				case State.waitingForBedTemp:  					{  						double bedTemp = PrinterConnectionAndCommunication.Instance.ActualBedTemperature;  						bool tempWithinRange;  						if (waitWhenCooling)  						{  							tempWithinRange = bedTemp >= targetTemp - sameTempRange && bedTemp <= targetTemp + sameTempRange;  						}  						else  						{  							tempWithinRange = bedTemp >= targetTemp - sameTempRange;  						}    						// Added R code for M190  						if (tempWithinRange && !timeHaveBeenAtTemp.IsRunning)  						{  							timeHaveBeenAtTemp.Start();  						}    						if (timeHaveBeenAtTemp.Elapsed.TotalSeconds > waitAfterReachTempTime  							|| PrinterConnectionAndCommunication.Instance.PrintWasCanceled)  						{  							// switch to pass through and continue  							state = State.passthrough;  							return "";  						}  						else  						{  							// send a wait command  							Thread.Sleep(100); // sleep .1 second while waiting for temp  							return ""; // return nothing until we reach temp  						}  					}  			}
Magic Number,MatterHackers.MatterControl.PrinterCommunication.Io,WaitForTempStream,C:\repos\MatterHackers_MatterControl\PrinterCommunication\Io\WaitForTempStream.cs,ReadLine,The following statement contains a magic number: switch (state)  			{  				case State.passthrough:  					{  						string lineToSend = base.ReadLine();    						if (lineToSend != null  							&& lineToSend.StartsWith("M"))  						{  							// initial test is just to see if it is an M109  							if (lineToSend.StartsWith("M109")) // extruder set and wait temp  							{  								if (lineToSend.Contains("F") // If it has a control character F (auto temp)  									|| !lineToSend.Contains("S")) // if it is a reset (has no S temperature)  								{  									// don't replace it  									return lineToSend;  								}    								// send an M104 instead  								waitWhenCooling = false;  								lineToSend = "M104" + lineToSend.Substring(4);  								GCodeFile.GetFirstNumberAfter("S"' lineToSend' ref targetTemp);  								extruderIndex = 0;  								GCodeFile.GetFirstNumberAfter("T"' lineToSend' ref extruderIndex);  								if (targetTemp > ignoreRequestIfBelowTemp)  								{  									state = State.waitingForExtruderTemp;  									timeHaveBeenAtTemp.Reset();  								}  								else  								{  									Thread.Sleep(100); // sleep .1 second while waiting for temp  									return ""; // return nothing until we reach temp  								}  							}  							else if (lineToSend.StartsWith("M190")) // bed set and wait temp  							{  								// send an M140 instead  								bool gotR = GCodeFile.GetFirstNumberAfter("R"' lineToSend' ref targetTemp);  								bool gotS = GCodeFile.GetFirstNumberAfter("S"' lineToSend' ref targetTemp);  								if (gotR || gotS)  								{  									if (targetTemp > ignoreRequestIfBelowTemp)  									{  										waitWhenCooling = gotR;  										lineToSend = "M140 S" + targetTemp.ToString();  										state = State.waitingForBedTemp;  										timeHaveBeenAtTemp.Reset();  									}  									else  									{  										Thread.Sleep(100); // sleep .1 second while waiting for temp  										return ""; // return nothing until we reach temp  									}  								}  								else  								{  									Thread.Sleep(100); // sleep .1 second while waiting for temp  									return ""; // return nothing until we reach temp  								}  							}  						}    						return lineToSend;  					}    				case State.waitingForExtruderTemp:  					{  						double extruderTemp = PrinterConnectionAndCommunication.Instance.GetActualExtruderTemperature((int)extruderIndex);  						bool tempWithinRange = extruderTemp >= targetTemp - sameTempRange && extruderTemp <= targetTemp + sameTempRange;  						if (tempWithinRange && !timeHaveBeenAtTemp.IsRunning)  						{  							timeHaveBeenAtTemp.Start();  						}    						if (timeHaveBeenAtTemp.Elapsed.TotalSeconds > waitAfterReachTempTime  							|| PrinterConnectionAndCommunication.Instance.PrintWasCanceled)  						{  							// switch to pass through and continue  							state = State.passthrough;  							return "";  						}  						else  						{  							// send a wait command  							Thread.Sleep(100); // sleep .1 second while waiting for temp  							return ""; // return nothing until we reach temp  						}  					}    				case State.waitingForBedTemp:  					{  						double bedTemp = PrinterConnectionAndCommunication.Instance.ActualBedTemperature;  						bool tempWithinRange;  						if (waitWhenCooling)  						{  							tempWithinRange = bedTemp >= targetTemp - sameTempRange && bedTemp <= targetTemp + sameTempRange;  						}  						else  						{  							tempWithinRange = bedTemp >= targetTemp - sameTempRange;  						}    						// Added R code for M190  						if (tempWithinRange && !timeHaveBeenAtTemp.IsRunning)  						{  							timeHaveBeenAtTemp.Start();  						}    						if (timeHaveBeenAtTemp.Elapsed.TotalSeconds > waitAfterReachTempTime  							|| PrinterConnectionAndCommunication.Instance.PrintWasCanceled)  						{  							// switch to pass through and continue  							state = State.passthrough;  							return "";  						}  						else  						{  							// send a wait command  							Thread.Sleep(100); // sleep .1 second while waiting for temp  							return ""; // return nothing until we reach temp  						}  					}  			}
Magic Number,MatterHackers.MatterControl.PrinterCommunication.Io,WaitForTempStream,C:\repos\MatterHackers_MatterControl\PrinterCommunication\Io\WaitForTempStream.cs,ReadLine,The following statement contains a magic number: switch (state)  			{  				case State.passthrough:  					{  						string lineToSend = base.ReadLine();    						if (lineToSend != null  							&& lineToSend.StartsWith("M"))  						{  							// initial test is just to see if it is an M109  							if (lineToSend.StartsWith("M109")) // extruder set and wait temp  							{  								if (lineToSend.Contains("F") // If it has a control character F (auto temp)  									|| !lineToSend.Contains("S")) // if it is a reset (has no S temperature)  								{  									// don't replace it  									return lineToSend;  								}    								// send an M104 instead  								waitWhenCooling = false;  								lineToSend = "M104" + lineToSend.Substring(4);  								GCodeFile.GetFirstNumberAfter("S"' lineToSend' ref targetTemp);  								extruderIndex = 0;  								GCodeFile.GetFirstNumberAfter("T"' lineToSend' ref extruderIndex);  								if (targetTemp > ignoreRequestIfBelowTemp)  								{  									state = State.waitingForExtruderTemp;  									timeHaveBeenAtTemp.Reset();  								}  								else  								{  									Thread.Sleep(100); // sleep .1 second while waiting for temp  									return ""; // return nothing until we reach temp  								}  							}  							else if (lineToSend.StartsWith("M190")) // bed set and wait temp  							{  								// send an M140 instead  								bool gotR = GCodeFile.GetFirstNumberAfter("R"' lineToSend' ref targetTemp);  								bool gotS = GCodeFile.GetFirstNumberAfter("S"' lineToSend' ref targetTemp);  								if (gotR || gotS)  								{  									if (targetTemp > ignoreRequestIfBelowTemp)  									{  										waitWhenCooling = gotR;  										lineToSend = "M140 S" + targetTemp.ToString();  										state = State.waitingForBedTemp;  										timeHaveBeenAtTemp.Reset();  									}  									else  									{  										Thread.Sleep(100); // sleep .1 second while waiting for temp  										return ""; // return nothing until we reach temp  									}  								}  								else  								{  									Thread.Sleep(100); // sleep .1 second while waiting for temp  									return ""; // return nothing until we reach temp  								}  							}  						}    						return lineToSend;  					}    				case State.waitingForExtruderTemp:  					{  						double extruderTemp = PrinterConnectionAndCommunication.Instance.GetActualExtruderTemperature((int)extruderIndex);  						bool tempWithinRange = extruderTemp >= targetTemp - sameTempRange && extruderTemp <= targetTemp + sameTempRange;  						if (tempWithinRange && !timeHaveBeenAtTemp.IsRunning)  						{  							timeHaveBeenAtTemp.Start();  						}    						if (timeHaveBeenAtTemp.Elapsed.TotalSeconds > waitAfterReachTempTime  							|| PrinterConnectionAndCommunication.Instance.PrintWasCanceled)  						{  							// switch to pass through and continue  							state = State.passthrough;  							return "";  						}  						else  						{  							// send a wait command  							Thread.Sleep(100); // sleep .1 second while waiting for temp  							return ""; // return nothing until we reach temp  						}  					}    				case State.waitingForBedTemp:  					{  						double bedTemp = PrinterConnectionAndCommunication.Instance.ActualBedTemperature;  						bool tempWithinRange;  						if (waitWhenCooling)  						{  							tempWithinRange = bedTemp >= targetTemp - sameTempRange && bedTemp <= targetTemp + sameTempRange;  						}  						else  						{  							tempWithinRange = bedTemp >= targetTemp - sameTempRange;  						}    						// Added R code for M190  						if (tempWithinRange && !timeHaveBeenAtTemp.IsRunning)  						{  							timeHaveBeenAtTemp.Start();  						}    						if (timeHaveBeenAtTemp.Elapsed.TotalSeconds > waitAfterReachTempTime  							|| PrinterConnectionAndCommunication.Instance.PrintWasCanceled)  						{  							// switch to pass through and continue  							state = State.passthrough;  							return "";  						}  						else  						{  							// send a wait command  							Thread.Sleep(100); // sleep .1 second while waiting for temp  							return ""; // return nothing until we reach temp  						}  					}  			}
Magic Number,MatterHackers.MatterControl.PrinterCommunication.Io,MaxLengthStream,C:\repos\MatterHackers_MatterControl\PrinterCommunication\Io\MaxLengthStream.cs,ReadLine,The following statement contains a magic number: if (movesToSend.Count == 0)              {                  string lineFromChild = base.ReadLine();                    if (lineFromChild != null                      && LineIsMovement(lineFromChild))                  {                      PrinterMove currentDestination = GetPosition(lineFromChild' lastDestination);                      PrinterMove deltaToDestination = currentDestination - lastDestination;                      deltaToDestination.feedRate = 0; // remove the changing of the federate (we'll set it initially)                      double lengthSquared = Math.Max(deltaToDestination.LengthSquared' deltaToDestination.extrusion * deltaToDestination.extrusion);                      if (lengthSquared > MaxSegmentLength * MaxSegmentLength)                      {                          // create the line segments to send                          double length = Math.Sqrt(lengthSquared);                          int numSegmentsToCutInto = (int)Math.Ceiling(length / MaxSegmentLength);                            // segments = (((mm/min) / (60s/min))mm/s / s/segment)segments*mm / mm                          double maxSegmentsCanTransmit = 1 / (((currentDestination.feedRate / 60) * maxSecondsPerSegment) / length);                            int numSegmentsToSend = Math.Max(1' Math.Min(numSegmentsToCutInto' (int)maxSegmentsCanTransmit));                            if (numSegmentsToSend > 1)                          {                              PrinterMove deltaForSegment = deltaToDestination / numSegmentsToSend;                              PrinterMove nextPoint = lastDestination + deltaForSegment;                              nextPoint.feedRate = currentDestination.feedRate;                              for (int i = 0; i < numSegmentsToSend; i++)                              {  								lock (movesToSend)  								{  									movesToSend.Add(nextPoint);  								}                                  nextPoint += deltaForSegment;                              }                                // send the first one                              PrinterMove positionToSend = movesToSend[0];  							lock (movesToSend)  							{  								movesToSend.RemoveAt(0);  							}                                string altredLineToSend = CreateMovementLine(positionToSend' lastDestination);                              lastDestination = positionToSend;                              return altredLineToSend;                          }                      }                        lastDestination = currentDestination;                  }                  return lineFromChild;              }              else              {                  PrinterMove positionToSend = movesToSend[0];  				lock (movesToSend)  				{  					movesToSend.RemoveAt(0);  				}                    string lineToSend = CreateMovementLine(positionToSend' lastDestination);                    lastDestination = positionToSend;                    return lineToSend;              }
Magic Number,MatterHackers.MatterControl.PrinterCommunication.Io,RequestTemperaturesStream,C:\repos\MatterHackers_MatterControl\PrinterCommunication\Io\RequestTemperaturesStream.cs,RequestTemperaturesStream,The following statement contains a magic number: nextReadTimeMs = UiThread.CurrentTimerMs + 1000;
Magic Number,MatterHackers.MatterControl.PrinterCommunication.Io,RequestTemperaturesStream,C:\repos\MatterHackers_MatterControl\PrinterCommunication\Io\RequestTemperaturesStream.cs,ReadLine,The following statement contains a magic number: if (nextReadTimeMs < UiThread.CurrentTimerMs  				&& PrinterConnectionAndCommunication.Instance.PrinterIsConnected)              {                  nextReadTimeMs = UiThread.CurrentTimerMs + 1000;                  return "M105";              }
Magic Number,MatterHackers.MatterControl.PrinterCommunication.Io,QueuedCommandsStream,C:\repos\MatterHackers_MatterControl\PrinterCommunication\Io\QueuedCommandsStream.cs,LoadImageAsset,The following statement contains a magic number: if (imageOnDisk)  			{  				return StaticData.Instance.LoadImage(filePath);  			}  			else  			{  				var imageBuffer = new ImageBuffer(320' 10);    				ApplicationController.Instance.DownloadToImageAsync(imageBuffer' uri' true);    				return imageBuffer;  			}
Magic Number,MatterHackers.MatterControl.PrinterCommunication.Io,QueuedCommandsStream,C:\repos\MatterHackers_MatterControl\PrinterCommunication\Io\QueuedCommandsStream.cs,LoadImageAsset,The following statement contains a magic number: if (imageOnDisk)  			{  				return StaticData.Instance.LoadImage(filePath);  			}  			else  			{  				var imageBuffer = new ImageBuffer(320' 10);    				ApplicationController.Instance.DownloadToImageAsync(imageBuffer' uri' true);    				return imageBuffer;  			}
Magic Number,MatterHackers.MatterControl.PrinterCommunication.Io,QueuedCommandsStream,C:\repos\MatterHackers_MatterControl\PrinterCommunication\Io\QueuedCommandsStream.cs,ReadLine,The following statement contains a magic number: if (waitingForUserInput)  			{  				lineToSend = "";  				Thread.Sleep(100);    				if (timeHaveBeenWaiting.IsRunning  					&& timeHaveBeenWaiting.Elapsed.TotalSeconds > maxTimeToWaitForOk)  				{  					if (commandsToRepeat.Count > 0)  					{  						// We timed out without the user responding. Cancel the operation.  						Reset();  					}  					else  					{  						// everything normal continue after time waited  						Continue();  					}  				}    				if (maxTimeToWaitForOk > 0  					&& timeHaveBeenWaiting.Elapsed.TotalSeconds < maxTimeToWaitForOk  					&& commandsToRepeat.Count > 0)  				{  					lineToSend = commandsToRepeat[repeatCommandIndex % commandsToRepeat.Count];  					repeatCommandIndex++;  				}  			}  			else  			{  				// lock queue  				lock (locker)  				{  					if (commandQueue.Count > 0)  					{  						lineToSend = commandQueue[0];  						lineToSend = GCodeProcessing.ReplaceMacroValues(lineToSend);  						commandQueue.RemoveAt(0);  					}  				}    				if (lineToSend != null)  				{  					if (lineToSend.StartsWith(MacroPrefix) && lineToSend.TrimEnd().EndsWith(")"))  					{  						if (!runningMacro)  						{  							runningMacro = true;  							int extruderCount = ActiveSliceSettings.Instance.GetValue<int>(SettingsKey.extruder_count);  							for (int i = 0; i < extruderCount; i++)  							{  								startingExtruderTemps.Add(PrinterConnectionAndCommunication.Instance.GetTargetExtruderTemperature(i));  							}    							if (ActiveSliceSettings.Instance.GetValue<bool>(SettingsKey.has_heated_bed))  							{  								startingBedTemp = PrinterConnectionAndCommunication.Instance.TargetBedTemperature;  							}  						}  						int parensAfterCommand = lineToSend.IndexOf('('' MacroPrefix.Length);  						string command = "";  						if (parensAfterCommand > 0)  						{  							command = lineToSend.Substring(MacroPrefix.Length' parensAfterCommand - MacroPrefix.Length);  						}    						RunningMacroPage.MacroCommandData macroData = new RunningMacroPage.MacroCommandData();    						string value = "";  						if (TryGetAfterString(lineToSend' "title"' out value))  						{  							macroData.title = value;  						}  						if (TryGetAfterString(lineToSend' "expire"' out value))  						{  							double.TryParse(value' out macroData.expireTime);  							maxTimeToWaitForOk = macroData.expireTime;  						}  						if (TryGetAfterString(lineToSend' "count_down"' out value))  						{  							double.TryParse(value' out macroData.countDown);  						}  						if (TryGetAfterString(lineToSend' "image"' out value))  						{  							macroData.image = LoadImageAsset(value);  						}  						if (TryGetAfterString(lineToSend' "wait_ok"' out value))  						{  							macroData.waitOk = value == "true";  						}  						if (TryGetAfterString(lineToSend' "repeat_gcode"' out value))  						{  							foreach (string line in value.Split('|'))  							{  								commandsToRepeat.Add(line);  							}  						}    						switch (command)  						{  							case "choose_material":  								waitingForUserInput = true;  								macroData.showMaterialSelector = true;  								macroData.waitOk = true;  								UiThread.RunOnIdle(() => RunningMacroPage.Show(macroData));  								break;    							case "close":  								runningMacro = false;  								UiThread.RunOnIdle(() => WizardWindow.Close("Macro"));  								break;    							case "ding":  								MatterControlApplication.Instance.PlaySound("timer-done.wav");  								break;    							case "show_message":  								waitingForUserInput = macroData.waitOk | macroData.expireTime > 0;  								UiThread.RunOnIdle(() => RunningMacroPage.Show(macroData));  								break;    							default:  								// Don't know the command. Print to terminal log?  								break;  						}  					}  				}  				else  				{  					lineToSend = base.ReadLine();  				}  			}
Magic Number,MatterHackers.MatterControl.PrinterCommunication.Io,BabyStepsStream,C:\repos\MatterHackers_MatterControl\PrinterCommunication\Io\BabyStepsStream.cs,ReadLine,The following statement contains a magic number: if (processedLine != null  				&& layerCount < 1  				&& GCodeFile.IsLayerChange(processedLine))  			{  				layerCount++;  				if (layerCount == 1)  				{  					maxLengthStream.MaxSegmentLength = 5;  				}  			}
Magic Number,MatterHackers.MatterControl.PrinterCommunication.Io,PrintRecoveryStream,C:\repos\MatterHackers_MatterControl\PrinterCommunication\Io\PrintRecoveryStream.cs,PrintRecoveryStream,The following statement contains a magic number: if (recoverFeedRate == 0)  			{  				recoverFeedRate = 10;  			}
Magic Number,MatterHackers.MatterControl.PrinterCommunication.Io,PrintRecoveryStream,C:\repos\MatterHackers_MatterControl\PrinterCommunication\Io\PrintRecoveryStream.cs,PrintRecoveryStream,The following statement contains a magic number: recoverFeedRate *= 60;
Magic Number,MatterHackers.MatterControl.PrinterCommunication.Io,PrintRecoveryStream,C:\repos\MatterHackers_MatterControl\PrinterCommunication\Io\PrintRecoveryStream.cs,ReadLine,The following statement contains a magic number: switch (recoveryState)  			{  				// heat the extrude to remove it from the part  				case RecoveryState.RemoveHeating:  					// TODO: make sure we heat up all the extruders that we need to (all that are used)  					queuedCommands.Add("G21; set units to millimeters");  					queuedCommands.Add("M107; fan off");  					queuedCommands.Add("T0; set the active extruder to 0");  					queuedCommands.Add("G90; use absolute coordinates");  					queuedCommands.Add("G92 E0; reset the expected extruder position");  					queuedCommands.Add("M82; use absolute distance for extrusion");  					  					bool hasHeatedBed = ActiveSliceSettings.Instance.GetValue<bool>(SettingsKey.has_heated_bed);  					double bedTemp = ActiveSliceSettings.Instance.GetValue<double>(SettingsKey.bed_temperature);  					if (hasHeatedBed && bedTemp > 0)  					{  						// start heating the bed  						queuedCommands.Add($"M140 S{bedTemp}");  					}    					// heat up the extruder  					queuedCommands.Add("M109 S{0}".FormatWith(ActiveSliceSettings.Instance.Helpers.ExtruderTemperature(0)));    					if (hasHeatedBed && bedTemp > 0)  					{  						// finish heating the bed  						queuedCommands.Add($"M190 S{bedTemp}");  					}    					recoveryState = RecoveryState.Raising;  					return "";    				// remove it from the part  				case RecoveryState.Raising:  					// We don't know where the printer is for sure (it make have been turned off). Disable leveling until we know where it is.  					PrintLevelingStream.Enabled = false;  					queuedCommands.Add("M114 ; get current position");  					queuedCommands.Add("G91 ; move relative");  					queuedCommands.Add("G1 Z10 F{0}".FormatWith(MovementControls.ZSpeed));  					queuedCommands.Add("G90 ; move absolute");  					recoveryState = RecoveryState.Homing;  					return "";    				// if top homing' home the extruder  				case RecoveryState.Homing:  					if (ActiveSliceSettings.Instance.GetValue<bool>(SettingsKey.z_homes_to_max))  					{  						queuedCommands.Add("G28");  					}  					else  					{  						// home x  						queuedCommands.Add("G28 X0");  						// home y  						queuedCommands.Add("G28 Y0");  						// move to the place we can home z from  						Vector2 recoveryPositionXy = ActiveSliceSettings.Instance.GetValue<Vector2>(SettingsKey.recover_position_before_z_home);  						queuedCommands.Add("G1 X{0:0.###}Y{1:0.###}F{2}".FormatWith(recoveryPositionXy.x' recoveryPositionXy.y' MovementControls.XSpeed));  						// home z  						queuedCommands.Add("G28 Z0");  					}  					// We now know where the printer is re-enable print leveling  					PrintLevelingStream.Enabled = true;  					recoveryState = RecoveryState.FindingRecoveryLayer;  					return "";  					  				// This is to recover printing if an out a filament occurs.   				// Help the user move the extruder down to just touching the part  				case RecoveryState.FindingRecoveryLayer:  					if (false) // help the user get the head to the right position  					{  						// move to above the completed print  						// move over a know good part of the model at the current top layer (extrude vertex from gcode)  						// let the user move down until they like the height  						// calculate that position and continue  					}  					else // we are resuming because of disconnect or reset' skip this  					{  						recoveryState = RecoveryState.SkippingGCode;  						goto case RecoveryState.SkippingGCode;  					}    				case RecoveryState.SkippingGCode:  					// run through the gcode that the device expected looking for things like temp  					// and skip everything else until we get to the point we left off last time  					int commandCount = 0;  					boundsOfSkippedLayers = RectangleDouble.ZeroIntersection;  					while (internalStream.FileStreaming.PercentComplete(internalStream.LineIndex) < percentDone)  					{  						string line = internalStream.ReadLine();  						if(line == null)  						{  							break;  						}  						commandCount++;    						// make sure we don't parse comments  						if(line.Contains(";"))  						{  							line = line.Split(';')[0];  						}  						lastDestination = GetPosition(line' lastDestination);    						if (commandCount > 100)  						{  							boundsOfSkippedLayers.ExpandToInclude(lastDestination.position.Xy);  							if (boundsOfSkippedLayers.Bottom < 10)  							{  								int a = 0;  							}  						}    						// check if the line is something we want to send to the printer (like a temp)  						if (line.StartsWith("M109") // heat and wait extruder  							|| line.StartsWith("M104") // heat extruder  							|| line.StartsWith("M190") // heat and wait bed  							|| line.StartsWith("M140") // heat bed  							|| line.StartsWith("T") // switch extruder  							|| line.StartsWith("M106") // fan on  							|| line.StartsWith("M107") // fan off  							|| line.StartsWith("G92")) // set position  						{  							return line;  						}  					}  					  					recoveryState = RecoveryState.PrimingAndMovingToStart;    					// make sure we always- pick up the last movement  					boundsOfSkippedLayers.ExpandToInclude(lastDestination.position.Xy);  					return "";    				case RecoveryState.PrimingAndMovingToStart:  					{    						if (ActiveSliceSettings.Instance.GetValue("z_homes_to_max") == "0") // we are homed to the bed  						{  							// move to the height we can recover printing from  							Vector2 recoverPositionXy = ActiveSliceSettings.Instance.GetValue<Vector2>(SettingsKey.recover_position_before_z_home);  							queuedCommands.Add(CreateMovementLine(new PrinterMove(new VectorMath.Vector3(recoverPositionXy.x' recoverPositionXy.y' lastDestination.position.z)' 0' MovementControls.ZSpeed)));  						}    						double extruderWidth = ActiveSliceSettings.Instance.GetValue<double>(SettingsKey.nozzle_diameter);  						// move to a position outside the printed bounds  						queuedCommands.Add(CreateMovementLine(new PrinterMove(  							new Vector3(boundsOfSkippedLayers.Left - extruderWidth*2' boundsOfSkippedLayers.Bottom + boundsOfSkippedLayers.Height / 2' lastDestination.position.z)'  							0' MovementControls.XSpeed)));  						  						// let's prime the extruder  						queuedCommands.Add("G1 E10 F{0}".FormatWith(MovementControls.EFeedRate(0))); // extrude 10  						queuedCommands.Add("G1 E9"); // and retract a bit    						// move to the actual print position  						queuedCommands.Add(CreateMovementLine(new PrinterMove(lastDestination.position' 0' MovementControls.XSpeed)));    						/// reset the printer to know where the filament should be  						queuedCommands.Add("G92 E{0}".FormatWith(lastDestination.extrusion));  						recoveryState = RecoveryState.PrintingSlow;  					}  					return "";    				case RecoveryState.PrintingSlow:  					{  						string lineToSend = internalStream.ReadLine();  						if (lineToSend == null)  						{  							return null;  						}    						if (!GCodeFile.IsLayerChange(lineToSend))  						{  							// have not seen the end of this layer so keep printing slow  							if (LineIsMovement(lineToSend))  							{  								PrinterMove currentMove = GetPosition(lineToSend' lastDestination);  								PrinterMove moveToSend = currentMove;    								moveToSend.feedRate = recoverFeedRate;    								lineToSend = CreateMovementLine(moveToSend' lastDestination);  								lastDestination = currentMove;  								return lineToSend;  							}    							return lineToSend;  						}  					}    					// we only fall through to here after seeing the next "; Layer:"  					recoveryState = RecoveryState.PrintingToEnd;  					return "";    				case RecoveryState.PrintingToEnd:  					return internalStream.ReadLine();  			}
Magic Number,MatterHackers.MatterControl.PrinterCommunication.Io,PrintRecoveryStream,C:\repos\MatterHackers_MatterControl\PrinterCommunication\Io\PrintRecoveryStream.cs,ReadLine,The following statement contains a magic number: switch (recoveryState)  			{  				// heat the extrude to remove it from the part  				case RecoveryState.RemoveHeating:  					// TODO: make sure we heat up all the extruders that we need to (all that are used)  					queuedCommands.Add("G21; set units to millimeters");  					queuedCommands.Add("M107; fan off");  					queuedCommands.Add("T0; set the active extruder to 0");  					queuedCommands.Add("G90; use absolute coordinates");  					queuedCommands.Add("G92 E0; reset the expected extruder position");  					queuedCommands.Add("M82; use absolute distance for extrusion");  					  					bool hasHeatedBed = ActiveSliceSettings.Instance.GetValue<bool>(SettingsKey.has_heated_bed);  					double bedTemp = ActiveSliceSettings.Instance.GetValue<double>(SettingsKey.bed_temperature);  					if (hasHeatedBed && bedTemp > 0)  					{  						// start heating the bed  						queuedCommands.Add($"M140 S{bedTemp}");  					}    					// heat up the extruder  					queuedCommands.Add("M109 S{0}".FormatWith(ActiveSliceSettings.Instance.Helpers.ExtruderTemperature(0)));    					if (hasHeatedBed && bedTemp > 0)  					{  						// finish heating the bed  						queuedCommands.Add($"M190 S{bedTemp}");  					}    					recoveryState = RecoveryState.Raising;  					return "";    				// remove it from the part  				case RecoveryState.Raising:  					// We don't know where the printer is for sure (it make have been turned off). Disable leveling until we know where it is.  					PrintLevelingStream.Enabled = false;  					queuedCommands.Add("M114 ; get current position");  					queuedCommands.Add("G91 ; move relative");  					queuedCommands.Add("G1 Z10 F{0}".FormatWith(MovementControls.ZSpeed));  					queuedCommands.Add("G90 ; move absolute");  					recoveryState = RecoveryState.Homing;  					return "";    				// if top homing' home the extruder  				case RecoveryState.Homing:  					if (ActiveSliceSettings.Instance.GetValue<bool>(SettingsKey.z_homes_to_max))  					{  						queuedCommands.Add("G28");  					}  					else  					{  						// home x  						queuedCommands.Add("G28 X0");  						// home y  						queuedCommands.Add("G28 Y0");  						// move to the place we can home z from  						Vector2 recoveryPositionXy = ActiveSliceSettings.Instance.GetValue<Vector2>(SettingsKey.recover_position_before_z_home);  						queuedCommands.Add("G1 X{0:0.###}Y{1:0.###}F{2}".FormatWith(recoveryPositionXy.x' recoveryPositionXy.y' MovementControls.XSpeed));  						// home z  						queuedCommands.Add("G28 Z0");  					}  					// We now know where the printer is re-enable print leveling  					PrintLevelingStream.Enabled = true;  					recoveryState = RecoveryState.FindingRecoveryLayer;  					return "";  					  				// This is to recover printing if an out a filament occurs.   				// Help the user move the extruder down to just touching the part  				case RecoveryState.FindingRecoveryLayer:  					if (false) // help the user get the head to the right position  					{  						// move to above the completed print  						// move over a know good part of the model at the current top layer (extrude vertex from gcode)  						// let the user move down until they like the height  						// calculate that position and continue  					}  					else // we are resuming because of disconnect or reset' skip this  					{  						recoveryState = RecoveryState.SkippingGCode;  						goto case RecoveryState.SkippingGCode;  					}    				case RecoveryState.SkippingGCode:  					// run through the gcode that the device expected looking for things like temp  					// and skip everything else until we get to the point we left off last time  					int commandCount = 0;  					boundsOfSkippedLayers = RectangleDouble.ZeroIntersection;  					while (internalStream.FileStreaming.PercentComplete(internalStream.LineIndex) < percentDone)  					{  						string line = internalStream.ReadLine();  						if(line == null)  						{  							break;  						}  						commandCount++;    						// make sure we don't parse comments  						if(line.Contains(";"))  						{  							line = line.Split(';')[0];  						}  						lastDestination = GetPosition(line' lastDestination);    						if (commandCount > 100)  						{  							boundsOfSkippedLayers.ExpandToInclude(lastDestination.position.Xy);  							if (boundsOfSkippedLayers.Bottom < 10)  							{  								int a = 0;  							}  						}    						// check if the line is something we want to send to the printer (like a temp)  						if (line.StartsWith("M109") // heat and wait extruder  							|| line.StartsWith("M104") // heat extruder  							|| line.StartsWith("M190") // heat and wait bed  							|| line.StartsWith("M140") // heat bed  							|| line.StartsWith("T") // switch extruder  							|| line.StartsWith("M106") // fan on  							|| line.StartsWith("M107") // fan off  							|| line.StartsWith("G92")) // set position  						{  							return line;  						}  					}  					  					recoveryState = RecoveryState.PrimingAndMovingToStart;    					// make sure we always- pick up the last movement  					boundsOfSkippedLayers.ExpandToInclude(lastDestination.position.Xy);  					return "";    				case RecoveryState.PrimingAndMovingToStart:  					{    						if (ActiveSliceSettings.Instance.GetValue("z_homes_to_max") == "0") // we are homed to the bed  						{  							// move to the height we can recover printing from  							Vector2 recoverPositionXy = ActiveSliceSettings.Instance.GetValue<Vector2>(SettingsKey.recover_position_before_z_home);  							queuedCommands.Add(CreateMovementLine(new PrinterMove(new VectorMath.Vector3(recoverPositionXy.x' recoverPositionXy.y' lastDestination.position.z)' 0' MovementControls.ZSpeed)));  						}    						double extruderWidth = ActiveSliceSettings.Instance.GetValue<double>(SettingsKey.nozzle_diameter);  						// move to a position outside the printed bounds  						queuedCommands.Add(CreateMovementLine(new PrinterMove(  							new Vector3(boundsOfSkippedLayers.Left - extruderWidth*2' boundsOfSkippedLayers.Bottom + boundsOfSkippedLayers.Height / 2' lastDestination.position.z)'  							0' MovementControls.XSpeed)));  						  						// let's prime the extruder  						queuedCommands.Add("G1 E10 F{0}".FormatWith(MovementControls.EFeedRate(0))); // extrude 10  						queuedCommands.Add("G1 E9"); // and retract a bit    						// move to the actual print position  						queuedCommands.Add(CreateMovementLine(new PrinterMove(lastDestination.position' 0' MovementControls.XSpeed)));    						/// reset the printer to know where the filament should be  						queuedCommands.Add("G92 E{0}".FormatWith(lastDestination.extrusion));  						recoveryState = RecoveryState.PrintingSlow;  					}  					return "";    				case RecoveryState.PrintingSlow:  					{  						string lineToSend = internalStream.ReadLine();  						if (lineToSend == null)  						{  							return null;  						}    						if (!GCodeFile.IsLayerChange(lineToSend))  						{  							// have not seen the end of this layer so keep printing slow  							if (LineIsMovement(lineToSend))  							{  								PrinterMove currentMove = GetPosition(lineToSend' lastDestination);  								PrinterMove moveToSend = currentMove;    								moveToSend.feedRate = recoverFeedRate;    								lineToSend = CreateMovementLine(moveToSend' lastDestination);  								lastDestination = currentMove;  								return lineToSend;  							}    							return lineToSend;  						}  					}    					// we only fall through to here after seeing the next "; Layer:"  					recoveryState = RecoveryState.PrintingToEnd;  					return "";    				case RecoveryState.PrintingToEnd:  					return internalStream.ReadLine();  			}
Magic Number,MatterHackers.MatterControl.PrinterCommunication.Io,PrintRecoveryStream,C:\repos\MatterHackers_MatterControl\PrinterCommunication\Io\PrintRecoveryStream.cs,ReadLine,The following statement contains a magic number: switch (recoveryState)  			{  				// heat the extrude to remove it from the part  				case RecoveryState.RemoveHeating:  					// TODO: make sure we heat up all the extruders that we need to (all that are used)  					queuedCommands.Add("G21; set units to millimeters");  					queuedCommands.Add("M107; fan off");  					queuedCommands.Add("T0; set the active extruder to 0");  					queuedCommands.Add("G90; use absolute coordinates");  					queuedCommands.Add("G92 E0; reset the expected extruder position");  					queuedCommands.Add("M82; use absolute distance for extrusion");  					  					bool hasHeatedBed = ActiveSliceSettings.Instance.GetValue<bool>(SettingsKey.has_heated_bed);  					double bedTemp = ActiveSliceSettings.Instance.GetValue<double>(SettingsKey.bed_temperature);  					if (hasHeatedBed && bedTemp > 0)  					{  						// start heating the bed  						queuedCommands.Add($"M140 S{bedTemp}");  					}    					// heat up the extruder  					queuedCommands.Add("M109 S{0}".FormatWith(ActiveSliceSettings.Instance.Helpers.ExtruderTemperature(0)));    					if (hasHeatedBed && bedTemp > 0)  					{  						// finish heating the bed  						queuedCommands.Add($"M190 S{bedTemp}");  					}    					recoveryState = RecoveryState.Raising;  					return "";    				// remove it from the part  				case RecoveryState.Raising:  					// We don't know where the printer is for sure (it make have been turned off). Disable leveling until we know where it is.  					PrintLevelingStream.Enabled = false;  					queuedCommands.Add("M114 ; get current position");  					queuedCommands.Add("G91 ; move relative");  					queuedCommands.Add("G1 Z10 F{0}".FormatWith(MovementControls.ZSpeed));  					queuedCommands.Add("G90 ; move absolute");  					recoveryState = RecoveryState.Homing;  					return "";    				// if top homing' home the extruder  				case RecoveryState.Homing:  					if (ActiveSliceSettings.Instance.GetValue<bool>(SettingsKey.z_homes_to_max))  					{  						queuedCommands.Add("G28");  					}  					else  					{  						// home x  						queuedCommands.Add("G28 X0");  						// home y  						queuedCommands.Add("G28 Y0");  						// move to the place we can home z from  						Vector2 recoveryPositionXy = ActiveSliceSettings.Instance.GetValue<Vector2>(SettingsKey.recover_position_before_z_home);  						queuedCommands.Add("G1 X{0:0.###}Y{1:0.###}F{2}".FormatWith(recoveryPositionXy.x' recoveryPositionXy.y' MovementControls.XSpeed));  						// home z  						queuedCommands.Add("G28 Z0");  					}  					// We now know where the printer is re-enable print leveling  					PrintLevelingStream.Enabled = true;  					recoveryState = RecoveryState.FindingRecoveryLayer;  					return "";  					  				// This is to recover printing if an out a filament occurs.   				// Help the user move the extruder down to just touching the part  				case RecoveryState.FindingRecoveryLayer:  					if (false) // help the user get the head to the right position  					{  						// move to above the completed print  						// move over a know good part of the model at the current top layer (extrude vertex from gcode)  						// let the user move down until they like the height  						// calculate that position and continue  					}  					else // we are resuming because of disconnect or reset' skip this  					{  						recoveryState = RecoveryState.SkippingGCode;  						goto case RecoveryState.SkippingGCode;  					}    				case RecoveryState.SkippingGCode:  					// run through the gcode that the device expected looking for things like temp  					// and skip everything else until we get to the point we left off last time  					int commandCount = 0;  					boundsOfSkippedLayers = RectangleDouble.ZeroIntersection;  					while (internalStream.FileStreaming.PercentComplete(internalStream.LineIndex) < percentDone)  					{  						string line = internalStream.ReadLine();  						if(line == null)  						{  							break;  						}  						commandCount++;    						// make sure we don't parse comments  						if(line.Contains(";"))  						{  							line = line.Split(';')[0];  						}  						lastDestination = GetPosition(line' lastDestination);    						if (commandCount > 100)  						{  							boundsOfSkippedLayers.ExpandToInclude(lastDestination.position.Xy);  							if (boundsOfSkippedLayers.Bottom < 10)  							{  								int a = 0;  							}  						}    						// check if the line is something we want to send to the printer (like a temp)  						if (line.StartsWith("M109") // heat and wait extruder  							|| line.StartsWith("M104") // heat extruder  							|| line.StartsWith("M190") // heat and wait bed  							|| line.StartsWith("M140") // heat bed  							|| line.StartsWith("T") // switch extruder  							|| line.StartsWith("M106") // fan on  							|| line.StartsWith("M107") // fan off  							|| line.StartsWith("G92")) // set position  						{  							return line;  						}  					}  					  					recoveryState = RecoveryState.PrimingAndMovingToStart;    					// make sure we always- pick up the last movement  					boundsOfSkippedLayers.ExpandToInclude(lastDestination.position.Xy);  					return "";    				case RecoveryState.PrimingAndMovingToStart:  					{    						if (ActiveSliceSettings.Instance.GetValue("z_homes_to_max") == "0") // we are homed to the bed  						{  							// move to the height we can recover printing from  							Vector2 recoverPositionXy = ActiveSliceSettings.Instance.GetValue<Vector2>(SettingsKey.recover_position_before_z_home);  							queuedCommands.Add(CreateMovementLine(new PrinterMove(new VectorMath.Vector3(recoverPositionXy.x' recoverPositionXy.y' lastDestination.position.z)' 0' MovementControls.ZSpeed)));  						}    						double extruderWidth = ActiveSliceSettings.Instance.GetValue<double>(SettingsKey.nozzle_diameter);  						// move to a position outside the printed bounds  						queuedCommands.Add(CreateMovementLine(new PrinterMove(  							new Vector3(boundsOfSkippedLayers.Left - extruderWidth*2' boundsOfSkippedLayers.Bottom + boundsOfSkippedLayers.Height / 2' lastDestination.position.z)'  							0' MovementControls.XSpeed)));  						  						// let's prime the extruder  						queuedCommands.Add("G1 E10 F{0}".FormatWith(MovementControls.EFeedRate(0))); // extrude 10  						queuedCommands.Add("G1 E9"); // and retract a bit    						// move to the actual print position  						queuedCommands.Add(CreateMovementLine(new PrinterMove(lastDestination.position' 0' MovementControls.XSpeed)));    						/// reset the printer to know where the filament should be  						queuedCommands.Add("G92 E{0}".FormatWith(lastDestination.extrusion));  						recoveryState = RecoveryState.PrintingSlow;  					}  					return "";    				case RecoveryState.PrintingSlow:  					{  						string lineToSend = internalStream.ReadLine();  						if (lineToSend == null)  						{  							return null;  						}    						if (!GCodeFile.IsLayerChange(lineToSend))  						{  							// have not seen the end of this layer so keep printing slow  							if (LineIsMovement(lineToSend))  							{  								PrinterMove currentMove = GetPosition(lineToSend' lastDestination);  								PrinterMove moveToSend = currentMove;    								moveToSend.feedRate = recoverFeedRate;    								lineToSend = CreateMovementLine(moveToSend' lastDestination);  								lastDestination = currentMove;  								return lineToSend;  							}    							return lineToSend;  						}  					}    					// we only fall through to here after seeing the next "; Layer:"  					recoveryState = RecoveryState.PrintingToEnd;  					return "";    				case RecoveryState.PrintingToEnd:  					return internalStream.ReadLine();  			}
Magic Number,MatterHackers.MatterControl.PrinterCommunication.Io,PrintRecoveryStream,C:\repos\MatterHackers_MatterControl\PrinterCommunication\Io\PrintRecoveryStream.cs,ReadLine,The following statement contains a magic number: switch (recoveryState)  			{  				// heat the extrude to remove it from the part  				case RecoveryState.RemoveHeating:  					// TODO: make sure we heat up all the extruders that we need to (all that are used)  					queuedCommands.Add("G21; set units to millimeters");  					queuedCommands.Add("M107; fan off");  					queuedCommands.Add("T0; set the active extruder to 0");  					queuedCommands.Add("G90; use absolute coordinates");  					queuedCommands.Add("G92 E0; reset the expected extruder position");  					queuedCommands.Add("M82; use absolute distance for extrusion");  					  					bool hasHeatedBed = ActiveSliceSettings.Instance.GetValue<bool>(SettingsKey.has_heated_bed);  					double bedTemp = ActiveSliceSettings.Instance.GetValue<double>(SettingsKey.bed_temperature);  					if (hasHeatedBed && bedTemp > 0)  					{  						// start heating the bed  						queuedCommands.Add($"M140 S{bedTemp}");  					}    					// heat up the extruder  					queuedCommands.Add("M109 S{0}".FormatWith(ActiveSliceSettings.Instance.Helpers.ExtruderTemperature(0)));    					if (hasHeatedBed && bedTemp > 0)  					{  						// finish heating the bed  						queuedCommands.Add($"M190 S{bedTemp}");  					}    					recoveryState = RecoveryState.Raising;  					return "";    				// remove it from the part  				case RecoveryState.Raising:  					// We don't know where the printer is for sure (it make have been turned off). Disable leveling until we know where it is.  					PrintLevelingStream.Enabled = false;  					queuedCommands.Add("M114 ; get current position");  					queuedCommands.Add("G91 ; move relative");  					queuedCommands.Add("G1 Z10 F{0}".FormatWith(MovementControls.ZSpeed));  					queuedCommands.Add("G90 ; move absolute");  					recoveryState = RecoveryState.Homing;  					return "";    				// if top homing' home the extruder  				case RecoveryState.Homing:  					if (ActiveSliceSettings.Instance.GetValue<bool>(SettingsKey.z_homes_to_max))  					{  						queuedCommands.Add("G28");  					}  					else  					{  						// home x  						queuedCommands.Add("G28 X0");  						// home y  						queuedCommands.Add("G28 Y0");  						// move to the place we can home z from  						Vector2 recoveryPositionXy = ActiveSliceSettings.Instance.GetValue<Vector2>(SettingsKey.recover_position_before_z_home);  						queuedCommands.Add("G1 X{0:0.###}Y{1:0.###}F{2}".FormatWith(recoveryPositionXy.x' recoveryPositionXy.y' MovementControls.XSpeed));  						// home z  						queuedCommands.Add("G28 Z0");  					}  					// We now know where the printer is re-enable print leveling  					PrintLevelingStream.Enabled = true;  					recoveryState = RecoveryState.FindingRecoveryLayer;  					return "";  					  				// This is to recover printing if an out a filament occurs.   				// Help the user move the extruder down to just touching the part  				case RecoveryState.FindingRecoveryLayer:  					if (false) // help the user get the head to the right position  					{  						// move to above the completed print  						// move over a know good part of the model at the current top layer (extrude vertex from gcode)  						// let the user move down until they like the height  						// calculate that position and continue  					}  					else // we are resuming because of disconnect or reset' skip this  					{  						recoveryState = RecoveryState.SkippingGCode;  						goto case RecoveryState.SkippingGCode;  					}    				case RecoveryState.SkippingGCode:  					// run through the gcode that the device expected looking for things like temp  					// and skip everything else until we get to the point we left off last time  					int commandCount = 0;  					boundsOfSkippedLayers = RectangleDouble.ZeroIntersection;  					while (internalStream.FileStreaming.PercentComplete(internalStream.LineIndex) < percentDone)  					{  						string line = internalStream.ReadLine();  						if(line == null)  						{  							break;  						}  						commandCount++;    						// make sure we don't parse comments  						if(line.Contains(";"))  						{  							line = line.Split(';')[0];  						}  						lastDestination = GetPosition(line' lastDestination);    						if (commandCount > 100)  						{  							boundsOfSkippedLayers.ExpandToInclude(lastDestination.position.Xy);  							if (boundsOfSkippedLayers.Bottom < 10)  							{  								int a = 0;  							}  						}    						// check if the line is something we want to send to the printer (like a temp)  						if (line.StartsWith("M109") // heat and wait extruder  							|| line.StartsWith("M104") // heat extruder  							|| line.StartsWith("M190") // heat and wait bed  							|| line.StartsWith("M140") // heat bed  							|| line.StartsWith("T") // switch extruder  							|| line.StartsWith("M106") // fan on  							|| line.StartsWith("M107") // fan off  							|| line.StartsWith("G92")) // set position  						{  							return line;  						}  					}  					  					recoveryState = RecoveryState.PrimingAndMovingToStart;    					// make sure we always- pick up the last movement  					boundsOfSkippedLayers.ExpandToInclude(lastDestination.position.Xy);  					return "";    				case RecoveryState.PrimingAndMovingToStart:  					{    						if (ActiveSliceSettings.Instance.GetValue("z_homes_to_max") == "0") // we are homed to the bed  						{  							// move to the height we can recover printing from  							Vector2 recoverPositionXy = ActiveSliceSettings.Instance.GetValue<Vector2>(SettingsKey.recover_position_before_z_home);  							queuedCommands.Add(CreateMovementLine(new PrinterMove(new VectorMath.Vector3(recoverPositionXy.x' recoverPositionXy.y' lastDestination.position.z)' 0' MovementControls.ZSpeed)));  						}    						double extruderWidth = ActiveSliceSettings.Instance.GetValue<double>(SettingsKey.nozzle_diameter);  						// move to a position outside the printed bounds  						queuedCommands.Add(CreateMovementLine(new PrinterMove(  							new Vector3(boundsOfSkippedLayers.Left - extruderWidth*2' boundsOfSkippedLayers.Bottom + boundsOfSkippedLayers.Height / 2' lastDestination.position.z)'  							0' MovementControls.XSpeed)));  						  						// let's prime the extruder  						queuedCommands.Add("G1 E10 F{0}".FormatWith(MovementControls.EFeedRate(0))); // extrude 10  						queuedCommands.Add("G1 E9"); // and retract a bit    						// move to the actual print position  						queuedCommands.Add(CreateMovementLine(new PrinterMove(lastDestination.position' 0' MovementControls.XSpeed)));    						/// reset the printer to know where the filament should be  						queuedCommands.Add("G92 E{0}".FormatWith(lastDestination.extrusion));  						recoveryState = RecoveryState.PrintingSlow;  					}  					return "";    				case RecoveryState.PrintingSlow:  					{  						string lineToSend = internalStream.ReadLine();  						if (lineToSend == null)  						{  							return null;  						}    						if (!GCodeFile.IsLayerChange(lineToSend))  						{  							// have not seen the end of this layer so keep printing slow  							if (LineIsMovement(lineToSend))  							{  								PrinterMove currentMove = GetPosition(lineToSend' lastDestination);  								PrinterMove moveToSend = currentMove;    								moveToSend.feedRate = recoverFeedRate;    								lineToSend = CreateMovementLine(moveToSend' lastDestination);  								lastDestination = currentMove;  								return lineToSend;  							}    							return lineToSend;  						}  					}    					// we only fall through to here after seeing the next "; Layer:"  					recoveryState = RecoveryState.PrintingToEnd;  					return "";    				case RecoveryState.PrintingToEnd:  					return internalStream.ReadLine();  			}
Magic Number,MatterHackers.MatterControl.PrintLibrary.Provider,LibraryProviderSelector,C:\repos\MatterHackers_MatterControl\Library\Provider\LibraryProviderSelector.cs,GetItemThumbnail,The following statement contains a magic number: ImageBuffer warningImage = StaticData.Instance.LoadIcon(Path.Combine("FileDialog"' "file.png")' 48' 48).InvertLightness();
Magic Number,MatterHackers.MatterControl.PrintLibrary.Provider,LibraryProviderSelector,C:\repos\MatterHackers_MatterControl\Library\Provider\LibraryProviderSelector.cs,GetItemThumbnail,The following statement contains a magic number: ImageBuffer warningImage = StaticData.Instance.LoadIcon(Path.Combine("FileDialog"' "file.png")' 48' 48).InvertLightness();
Magic Number,MatterHackers.MatterControl.PrintLibrary.Provider,LibraryProviderFileSystem,C:\repos\MatterHackers_MatterControl\Library\Provider\LibraryProviderFileSystem.cs,RenameItem,The following statement contains a magic number: if (File.Exists(sourceFile))  			{  				string extension = Path.GetExtension(sourceFile);  				string destFile = Path.Combine(Path.GetDirectoryName(sourceFile)' newName);  				destFile = Path.ChangeExtension(destFile' extension);  				File.Move(sourceFile' destFile);  				Stopwatch time = Stopwatch.StartNew();  				// Wait for up to some amount of time for the directory to be gone.  				while (File.Exists(destFile)  					&& time.ElapsedMilliseconds < 100)  				{  					Thread.Sleep(1); // make sure we are not eating all the cpu time.  				}  				GetFilesAndCollectionsInCurrentDirectory();  			}
Magic Number,MatterHackers.MatterControl.PrintLibrary.Provider,LibraryProviderFileSystem,C:\repos\MatterHackers_MatterControl\Library\Provider\LibraryProviderFileSystem.cs,RenameCollection,The following statement contains a magic number: if (Directory.Exists(sourceDir))  			{  				string destDir = Path.Combine(Path.GetDirectoryName(sourceDir)' newName);  				Directory.Move(sourceDir' destDir);  				Stopwatch time = Stopwatch.StartNew();  				// Wait for up to some amount of time for the directory to be gone.  				while (Directory.Exists(destDir)  					&& time.ElapsedMilliseconds < 100)  				{  					Thread.Sleep(1); // make sure we are not eating all the cpu time.  				}  				GetFilesAndCollectionsInCurrentDirectory();  			}
Magic Number,MatterHackers.MatterControl.PrintLibrary.Provider,LibraryProviderFileSystem,C:\repos\MatterHackers_MatterControl\Library\Provider\LibraryProviderFileSystem.cs,RemoveCollection,The following statement contains a magic number: if (Directory.Exists(directoryPath))  			{  				Directory.Delete(directoryPath' true);  				Stopwatch time = Stopwatch.StartNew();  				// Wait for up to some amount of time for the directory to be gone.  				while (Directory.Exists(directoryPath)  					&& time.ElapsedMilliseconds < 100)  				{  					Thread.Sleep(1); // make sure we are not eating all the cpu time.  				}  				GetFilesAndCollectionsInCurrentDirectory();  			}
Magic Number,MatterHackers.MatterControl.PrintLibrary.Provider,LibraryProviderFileSystem,C:\repos\MatterHackers_MatterControl\Library\Provider\LibraryProviderFileSystem.cs,CopyFile,The following statement contains a magic number: try  			{  				if (!File.Exists(outputFileName))  				{  					File.Copy(sourceFile' outputFileName);  				}  				else // make a new file and append a number so that we are not destructive  				{  					string directory = Path.GetDirectoryName(outputFileName);  					string fileNameWithoutExtension = Path.GetFileNameWithoutExtension(outputFileName);  					string extension = Path.GetExtension(outputFileName);  					// get the filename without a number on the end  					int lastSpaceIndex = fileNameWithoutExtension.LastIndexOf(' ');  					if (lastSpaceIndex != -1)  					{  						int endingNumber;  						// check if the last set of characters is a number  						if (int.TryParse(fileNameWithoutExtension.Substring(lastSpaceIndex)' out endingNumber))  						{  							fileNameWithoutExtension = fileNameWithoutExtension.Substring(0' lastSpaceIndex);  						}  					}  					int numberToAppend = 2;  					string fileNameToUse = Path.Combine(directory' fileNameWithoutExtension + " " + numberToAppend.ToString() + extension);  					while (File.Exists(fileNameToUse))  					{  						numberToAppend++;  						fileNameToUse = Path.Combine(directory' fileNameWithoutExtension + " " + numberToAppend.ToString() + extension);  					}  					File.Copy(sourceFile' fileNameToUse);  				}  			}  			catch (Exception e)  			{  				GuiWidget.BreakInDebugger();  			}
Magic Number,MatterHackers.MatterControl.PrintLibrary.Provider,LibraryProviderSQLite,C:\repos\MatterHackers_MatterControl\Library\Provider\LibraryProviderSqlite.cs,DatabaseFileChange,The following statement contains a magic number: if (timeSinceLastChange.IsRunning)  			{  				// rest the time so we will wait a bit longer  				timeSinceLastChange.Restart();  				// we already have a pending update so we'll just wait for that one to complete  			}  			else  			{  				// start the time before we do the refresh  				timeSinceLastChange.Restart();    				// run a thread to wait for the time to elapse  				await Task.Run(() =>  				{  					while (timeSinceLastChange.Elapsed.TotalSeconds < .5)  					{  						Thread.Sleep(10);  					}  				});    				UiThread.RunOnIdle(() =>  				{  					if (!Datastore.Instance.WasExited())  					{  						LoadLibraryItems();  					}  				});    				timeSinceLastChange.Stop();  			}
Magic Number,MatterHackers.MatterControl.PrintLibrary.Provider,LibraryProviderSQLite,C:\repos\MatterHackers_MatterControl\Library\Provider\LibraryProviderSqlite.cs,DatabaseFileChange,The following statement contains a magic number: if (timeSinceLastChange.IsRunning)  			{  				// rest the time so we will wait a bit longer  				timeSinceLastChange.Restart();  				// we already have a pending update so we'll just wait for that one to complete  			}  			else  			{  				// start the time before we do the refresh  				timeSinceLastChange.Restart();    				// run a thread to wait for the time to elapse  				await Task.Run(() =>  				{  					while (timeSinceLastChange.Elapsed.TotalSeconds < .5)  					{  						Thread.Sleep(10);  					}  				});    				UiThread.RunOnIdle(() =>  				{  					if (!Datastore.Instance.WasExited())  					{  						LoadLibraryItems();  					}  				});    				timeSinceLastChange.Stop();  			}
Magic Number,MatterHackers.MatterControl.SettingsManagement,OemSettings,C:\repos\MatterHackers_MatterControl\SettingsManagement\OemSettings.cs,DownloadMissingProfiles,The following statement contains a magic number: foreach (string oem in OemProfiles.Keys)  			{  				string cacheScope = Path.Combine("public-profiles"' oem);    				index++;  				foreach (var model in OemProfiles[oem].Keys)  				{  					var publicDevice = OemProfiles[oem][model];  					string cachePath = ApplicationController.CacheablePath(cacheScope' publicDevice.CacheKey);  					if (!File.Exists(cachePath))  					{  						await Task.Delay(20000);  						await ProfileManager.LoadOemProfileAsync(publicDevice' oem' model);    						if (syncReport != null)  						{  							reportValue.actionLabel = string.Format("Downloading public profiles for {0}..."' oem);  							reportValue.percComplete = (double)index / OemProfiles.Count;  							syncReport.Report(reportValue);  						}  					}  				}  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ColorGradientWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ColorGradientWidget.cs,ColorGradientWidget,The following statement contains a magic number: BackgroundColor = new RGBA_Bytes(0' 0' 0' 120);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ColorGradientWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ColorGradientWidget.cs,ColorGradientWidget,The following statement contains a magic number: int maxItems = Math.Min(7' speeds.Count());
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ColorGradientWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ColorGradientWidget.cs,ColorGradientWidget,The following statement contains a magic number: if (speeds.Count < 8)  			{  				rangeValues = speeds.Select(s => (int)s).OrderBy(i => i).ToArray();  			}  			else  			{  				rangeValues = Enumerable.Range(0' maxItems).Select(x => (int)(min + increment * index++)).ToArray();  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ColorGradientWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ColorGradientWidget.cs,ColorGradientWidget,The following statement contains a magic number: for (int i = 0; i < speedColors.Length; i++)  			{  				RGBA_Bytes color = speedColors[i];  				int speed = rangeValues[i];    				GuiWidget colorWidget = new GuiWidget();  				colorWidget.Width = 20;  				colorWidget.Height = 20;  				colorWidget.BackgroundColor = color;  				colorWidget.Margin = new BorderDouble(2);  				double feedRateToMMPerSecond = speed / 60;    				ColorToSpeedWidget colorToSpeedWidget = new ColorToSpeedWidget(colorWidget' feedRateToMMPerSecond);  				this.AddChild(colorToSpeedWidget);  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ColorGradientWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ColorGradientWidget.cs,ColorGradientWidget,The following statement contains a magic number: for (int i = 0; i < speedColors.Length; i++)  			{  				RGBA_Bytes color = speedColors[i];  				int speed = rangeValues[i];    				GuiWidget colorWidget = new GuiWidget();  				colorWidget.Width = 20;  				colorWidget.Height = 20;  				colorWidget.BackgroundColor = color;  				colorWidget.Margin = new BorderDouble(2);  				double feedRateToMMPerSecond = speed / 60;    				ColorToSpeedWidget colorToSpeedWidget = new ColorToSpeedWidget(colorWidget' feedRateToMMPerSecond);  				this.AddChild(colorToSpeedWidget);  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ColorGradientWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ColorGradientWidget.cs,ColorGradientWidget,The following statement contains a magic number: for (int i = 0; i < speedColors.Length; i++)  			{  				RGBA_Bytes color = speedColors[i];  				int speed = rangeValues[i];    				GuiWidget colorWidget = new GuiWidget();  				colorWidget.Width = 20;  				colorWidget.Height = 20;  				colorWidget.BackgroundColor = color;  				colorWidget.Margin = new BorderDouble(2);  				double feedRateToMMPerSecond = speed / 60;    				ColorToSpeedWidget colorToSpeedWidget = new ColorToSpeedWidget(colorWidget' feedRateToMMPerSecond);  				this.AddChild(colorToSpeedWidget);  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ColorGradientWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ColorGradientWidget.cs,ColorGradientWidget,The following statement contains a magic number: for (int i = 0; i < speedColors.Length; i++)  			{  				RGBA_Bytes color = speedColors[i];  				int speed = rangeValues[i];    				GuiWidget colorWidget = new GuiWidget();  				colorWidget.Width = 20;  				colorWidget.Height = 20;  				colorWidget.BackgroundColor = color;  				colorWidget.Margin = new BorderDouble(2);  				double feedRateToMMPerSecond = speed / 60;    				ColorToSpeedWidget colorToSpeedWidget = new ColorToSpeedWidget(colorWidget' feedRateToMMPerSecond);  				this.AddChild(colorToSpeedWidget);  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ColorGradientWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ColorGradientWidget.cs,ColorGradientWidget,The following statement contains a magic number: Margin = new BorderDouble(5' 5' 200' 50);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ColorGradientWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ColorGradientWidget.cs,ColorGradientWidget,The following statement contains a magic number: Margin = new BorderDouble(5' 5' 200' 50);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ColorGradientWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ColorGradientWidget.cs,ColorGradientWidget,The following statement contains a magic number: Margin = new BorderDouble(5' 5' 200' 50);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ColorGradientWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ColorGradientWidget.cs,ColorGradientWidget,The following statement contains a magic number: Margin = new BorderDouble(5' 5' 200' 50);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ColorToSpeedWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ColorGradientWidget.cs,ColorToSpeedWidget,The following statement contains a magic number: Margin = new BorderDouble(2);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ColorToSpeedWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ColorGradientWidget.cs,ColorToSpeedWidget,The following statement contains a magic number: colorWidget.Margin = new BorderDouble(left: 2);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ColorToSpeedWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ColorGradientWidget.cs,ColorToSpeedWidget,The following statement contains a magic number: TextWidget speedTextBox = new TextWidget(layerSpeed' pointSize: 12);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ColorToSpeedWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ColorGradientWidget.cs,ColorToSpeedWidget,The following statement contains a magic number: speedTextBox.Margin = new BorderDouble(5' 0);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PartPreviewContent,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\PartPreviewContent.cs,Load,The following statement contains a magic number: tabControl.TabBar.Padding = new BorderDouble(top: 6);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PartPreviewContent,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\PartPreviewContent.cs,Load,The following statement contains a magic number: int tabPointSize = 16;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PartPreviewContent,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\PartPreviewContent.cs,Load,The following statement contains a magic number: if (windowMode == View3DWidget.WindowMode.StandAlone || UserSettings.Instance.IsTouchScreen)  			{                  threeDViewTab = new SimpleTextTabWidget(partPreview3DView' "3D View Tab"' tabPointSize'                      selectedTabColor' new RGBA_Bytes()' ActiveTheme.Instance.TabLabelUnselected' new RGBA_Bytes());                  tabControl.AddTab(threeDViewTab);                  layerViewTab = new SimpleTextTabWidget(layerView' "Layer View Tab"' tabPointSize'                      selectedTabColor' new RGBA_Bytes()' ActiveTheme.Instance.TabLabelUnselected' new RGBA_Bytes());                  tabControl.AddTab(layerViewTab);  			}  			else  			{                  threeDViewTab = new PopOutTextTabWidget(partPreview3DView' "3D View Tab"' new Vector2(590' 400)' tabPointSize);                  tabControl.AddTab(threeDViewTab);  				layerViewTab = new PopOutTextTabWidget(layerView' "Layer View Tab"' new Vector2(590' 400)' tabPointSize);  				tabControl.AddTab(layerViewTab);  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PartPreviewContent,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\PartPreviewContent.cs,Load,The following statement contains a magic number: if (windowMode == View3DWidget.WindowMode.StandAlone || UserSettings.Instance.IsTouchScreen)  			{                  threeDViewTab = new SimpleTextTabWidget(partPreview3DView' "3D View Tab"' tabPointSize'                      selectedTabColor' new RGBA_Bytes()' ActiveTheme.Instance.TabLabelUnselected' new RGBA_Bytes());                  tabControl.AddTab(threeDViewTab);                  layerViewTab = new SimpleTextTabWidget(layerView' "Layer View Tab"' tabPointSize'                      selectedTabColor' new RGBA_Bytes()' ActiveTheme.Instance.TabLabelUnselected' new RGBA_Bytes());                  tabControl.AddTab(layerViewTab);  			}  			else  			{                  threeDViewTab = new PopOutTextTabWidget(partPreview3DView' "3D View Tab"' new Vector2(590' 400)' tabPointSize);                  tabControl.AddTab(threeDViewTab);  				layerViewTab = new PopOutTextTabWidget(layerView' "Layer View Tab"' new Vector2(590' 400)' tabPointSize);  				tabControl.AddTab(layerViewTab);  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PartPreviewContent,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\PartPreviewContent.cs,Load,The following statement contains a magic number: if (windowMode == View3DWidget.WindowMode.StandAlone || UserSettings.Instance.IsTouchScreen)  			{                  threeDViewTab = new SimpleTextTabWidget(partPreview3DView' "3D View Tab"' tabPointSize'                      selectedTabColor' new RGBA_Bytes()' ActiveTheme.Instance.TabLabelUnselected' new RGBA_Bytes());                  tabControl.AddTab(threeDViewTab);                  layerViewTab = new SimpleTextTabWidget(layerView' "Layer View Tab"' tabPointSize'                      selectedTabColor' new RGBA_Bytes()' ActiveTheme.Instance.TabLabelUnselected' new RGBA_Bytes());                  tabControl.AddTab(layerViewTab);  			}  			else  			{                  threeDViewTab = new PopOutTextTabWidget(partPreview3DView' "3D View Tab"' new Vector2(590' 400)' tabPointSize);                  tabControl.AddTab(threeDViewTab);  				layerViewTab = new PopOutTextTabWidget(layerView' "Layer View Tab"' new Vector2(590' 400)' tabPointSize);  				tabControl.AddTab(layerViewTab);  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PartPreviewContent,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\PartPreviewContent.cs,Load,The following statement contains a magic number: if (windowMode == View3DWidget.WindowMode.StandAlone || UserSettings.Instance.IsTouchScreen)  			{                  threeDViewTab = new SimpleTextTabWidget(partPreview3DView' "3D View Tab"' tabPointSize'                      selectedTabColor' new RGBA_Bytes()' ActiveTheme.Instance.TabLabelUnselected' new RGBA_Bytes());                  tabControl.AddTab(threeDViewTab);                  layerViewTab = new SimpleTextTabWidget(layerView' "Layer View Tab"' tabPointSize'                      selectedTabColor' new RGBA_Bytes()' ActiveTheme.Instance.TabLabelUnselected' new RGBA_Bytes());                  tabControl.AddTab(layerViewTab);  			}  			else  			{                  threeDViewTab = new PopOutTextTabWidget(partPreview3DView' "3D View Tab"' new Vector2(590' 400)' tabPointSize);                  tabControl.AddTab(threeDViewTab);  				layerViewTab = new PopOutTextTabWidget(layerView' "Layer View Tab"' new Vector2(590' 400)' tabPointSize);  				tabControl.AddTab(layerViewTab);  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,DebugBvh,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\DebugBvh.cs,RenderLine,The following statement contains a magic number: Vector3 lineCenter = (start + end) / 2;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,DebugBvh,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\DebugBvh.cs,RenderLine,The following statement contains a magic number: Matrix4X4 rotateTransform = Matrix4X4.CreateRotation(new Quaternion(Vector3.UnitX + new Vector3(.0001' -.00001' .00002)' delta.GetNormal()));
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,DebugBvh,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\DebugBvh.cs,RenderLine,The following statement contains a magic number: Matrix4X4 rotateTransform = Matrix4X4.CreateRotation(new Quaternion(Vector3.UnitX + new Vector3(.0001' -.00001' .00002)' delta.GetNormal()));
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,DebugBvh,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\DebugBvh.cs,RenderLine,The following statement contains a magic number: Matrix4X4 rotateTransform = Matrix4X4.CreateRotation(new Quaternion(Vector3.UnitX + new Vector3(.0001' -.00001' .00002)' delta.GetNormal()));
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,DebugBvh,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\DebugBvh.cs,RenderLine,The following statement contains a magic number: if (zBuffered)  			{  				RenderMeshToGl.Render(lineMesh' RGBA_Bytes.Black' lineTransform' RenderTypes.Shaded);  				//drawEvent.graphics2D.Line(cornerPositionScreen' cornerPositionCcwScreen' RGBA_Bytes.Gray);  			}  			else  			{  				// render on top of everything very lightly  				RenderMeshToGl.Render(lineMesh' new RGBA_Bytes(RGBA_Bytes.Black' 5)' lineTransform' RenderTypes.Shaded);  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,DebugBvh,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\DebugBvh.cs,RenderBounds,The following statement contains a magic number: RenderLine(transform.Peek()' aabb.GetBottomCorner(1)' aabb.GetBottomCorner(2)' color);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,DebugBvh,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\DebugBvh.cs,RenderBounds,The following statement contains a magic number: RenderLine(transform.Peek()' aabb.GetBottomCorner(2)' aabb.GetBottomCorner(3)' color);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,DebugBvh,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\DebugBvh.cs,RenderBounds,The following statement contains a magic number: RenderLine(transform.Peek()' aabb.GetBottomCorner(2)' aabb.GetBottomCorner(3)' color);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,DebugBvh,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\DebugBvh.cs,RenderBounds,The following statement contains a magic number: RenderLine(transform.Peek()' aabb.GetBottomCorner(3)' aabb.GetBottomCorner(0)' color);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,DebugBvh,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\DebugBvh.cs,RenderBounds,The following statement contains a magic number: RenderLine(transform.Peek()' aabb.GetTopCorner(1)' aabb.GetTopCorner(2)' color);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,DebugBvh,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\DebugBvh.cs,RenderBounds,The following statement contains a magic number: RenderLine(transform.Peek()' aabb.GetTopCorner(2)' aabb.GetTopCorner(3)' color);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,DebugBvh,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\DebugBvh.cs,RenderBounds,The following statement contains a magic number: RenderLine(transform.Peek()' aabb.GetTopCorner(2)' aabb.GetTopCorner(3)' color);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,DebugBvh,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\DebugBvh.cs,RenderBounds,The following statement contains a magic number: RenderLine(transform.Peek()' aabb.GetTopCorner(3)' aabb.GetTopCorner(0)' color);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ScaleControls,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\SideBar\ScaleControls.cs,ScaleControls,The following statement contains a magic number: {  				expandScaleOptions = view3DWidget.ExpandMenuOptionFactory.GenerateCheckBoxButton("Scale".Localize().ToUpper()'  					View3DWidget.ArrowRight'  					View3DWidget.ArrowDown);  				expandScaleOptions.Margin = new BorderDouble(bottom: 2);  				this.AddChild(expandScaleOptions);    				scaleOptionContainer = new FlowLayoutWidget(FlowDirection.TopToBottom);  				scaleOptionContainer.HAnchor = HAnchor.ParentLeftRight;  				scaleOptionContainer.Visible = false;  				this.AddChild(scaleOptionContainer);    				AddScaleControls(scaleOptionContainer);  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ScaleControls,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\SideBar\ScaleControls.cs,AddScaleControls,The following statement contains a magic number: {  				FlowLayoutWidget scaleRatioContainer = new FlowLayoutWidget(FlowDirection.LeftToRight);  				scaleRatioContainer.HAnchor = HAnchor.ParentLeftRight;  				scaleRatioContainer.Padding = new BorderDouble(5);    				string scaleRatioLabelText = "Ratio".Localize();  				string scaleRatioLabelTextFull = "{0}:".FormatWith(scaleRatioLabelText);  				TextWidget scaleRatioLabel = new TextWidget(scaleRatioLabelTextFull' textColor: ActiveTheme.Instance.PrimaryTextColor);  				scaleRatioLabel.Margin = new BorderDouble(0' 0' 3' 0);  				scaleRatioLabel.VAnchor = VAnchor.ParentCenter;  				scaleRatioContainer.AddChild(scaleRatioLabel);    				scaleRatioContainer.AddChild(new HorizontalSpacer());    				scaleRatioControl = new MHNumberEdit(1' pixelWidth: 50 * GuiWidget.DeviceScale' allowDecimals: true' increment: .05);  				scaleRatioControl.SelectAllOnFocus = true;  				scaleRatioControl.VAnchor = VAnchor.ParentCenter;  				scaleRatioContainer.AddChild(scaleRatioControl);  				scaleRatioControl.ActuallNumberEdit.KeyPressed += (sender' e) =>  				{  					OnSelectedTransformChanged(this' null);  				};    				scaleRatioControl.ActuallNumberEdit.KeyDown += (sender' e) =>  				{  					OnSelectedTransformChanged(this' null);  				};    				scaleRatioControl.ActuallNumberEdit.EnterPressed += (object sender' KeyEventArgs keyEvent) =>  				{  					ApplyScaleFromEditField();  				};    				scaleRatioContainer.AddChild(CreateScaleDropDownMenu());    				buttonPanel.AddChild(scaleRatioContainer);    				scaleControls.Add(scaleRatioControl);  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ScaleControls,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\SideBar\ScaleControls.cs,AddScaleControls,The following statement contains a magic number: {  				FlowLayoutWidget scaleRatioContainer = new FlowLayoutWidget(FlowDirection.LeftToRight);  				scaleRatioContainer.HAnchor = HAnchor.ParentLeftRight;  				scaleRatioContainer.Padding = new BorderDouble(5);    				string scaleRatioLabelText = "Ratio".Localize();  				string scaleRatioLabelTextFull = "{0}:".FormatWith(scaleRatioLabelText);  				TextWidget scaleRatioLabel = new TextWidget(scaleRatioLabelTextFull' textColor: ActiveTheme.Instance.PrimaryTextColor);  				scaleRatioLabel.Margin = new BorderDouble(0' 0' 3' 0);  				scaleRatioLabel.VAnchor = VAnchor.ParentCenter;  				scaleRatioContainer.AddChild(scaleRatioLabel);    				scaleRatioContainer.AddChild(new HorizontalSpacer());    				scaleRatioControl = new MHNumberEdit(1' pixelWidth: 50 * GuiWidget.DeviceScale' allowDecimals: true' increment: .05);  				scaleRatioControl.SelectAllOnFocus = true;  				scaleRatioControl.VAnchor = VAnchor.ParentCenter;  				scaleRatioContainer.AddChild(scaleRatioControl);  				scaleRatioControl.ActuallNumberEdit.KeyPressed += (sender' e) =>  				{  					OnSelectedTransformChanged(this' null);  				};    				scaleRatioControl.ActuallNumberEdit.KeyDown += (sender' e) =>  				{  					OnSelectedTransformChanged(this' null);  				};    				scaleRatioControl.ActuallNumberEdit.EnterPressed += (object sender' KeyEventArgs keyEvent) =>  				{  					ApplyScaleFromEditField();  				};    				scaleRatioContainer.AddChild(CreateScaleDropDownMenu());    				buttonPanel.AddChild(scaleRatioContainer);    				scaleControls.Add(scaleRatioControl);  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ScaleControls,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\SideBar\ScaleControls.cs,AddScaleControls,The following statement contains a magic number: {  				FlowLayoutWidget scaleRatioContainer = new FlowLayoutWidget(FlowDirection.LeftToRight);  				scaleRatioContainer.HAnchor = HAnchor.ParentLeftRight;  				scaleRatioContainer.Padding = new BorderDouble(5);    				string scaleRatioLabelText = "Ratio".Localize();  				string scaleRatioLabelTextFull = "{0}:".FormatWith(scaleRatioLabelText);  				TextWidget scaleRatioLabel = new TextWidget(scaleRatioLabelTextFull' textColor: ActiveTheme.Instance.PrimaryTextColor);  				scaleRatioLabel.Margin = new BorderDouble(0' 0' 3' 0);  				scaleRatioLabel.VAnchor = VAnchor.ParentCenter;  				scaleRatioContainer.AddChild(scaleRatioLabel);    				scaleRatioContainer.AddChild(new HorizontalSpacer());    				scaleRatioControl = new MHNumberEdit(1' pixelWidth: 50 * GuiWidget.DeviceScale' allowDecimals: true' increment: .05);  				scaleRatioControl.SelectAllOnFocus = true;  				scaleRatioControl.VAnchor = VAnchor.ParentCenter;  				scaleRatioContainer.AddChild(scaleRatioControl);  				scaleRatioControl.ActuallNumberEdit.KeyPressed += (sender' e) =>  				{  					OnSelectedTransformChanged(this' null);  				};    				scaleRatioControl.ActuallNumberEdit.KeyDown += (sender' e) =>  				{  					OnSelectedTransformChanged(this' null);  				};    				scaleRatioControl.ActuallNumberEdit.EnterPressed += (object sender' KeyEventArgs keyEvent) =>  				{  					ApplyScaleFromEditField();  				};    				scaleRatioContainer.AddChild(CreateScaleDropDownMenu());    				buttonPanel.AddChild(scaleRatioContainer);    				scaleControls.Add(scaleRatioControl);  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ScaleControls,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\SideBar\ScaleControls.cs,AddScaleControls,The following statement contains a magic number: {  				FlowLayoutWidget scaleRatioContainer = new FlowLayoutWidget(FlowDirection.LeftToRight);  				scaleRatioContainer.HAnchor = HAnchor.ParentLeftRight;  				scaleRatioContainer.Padding = new BorderDouble(5);    				string scaleRatioLabelText = "Ratio".Localize();  				string scaleRatioLabelTextFull = "{0}:".FormatWith(scaleRatioLabelText);  				TextWidget scaleRatioLabel = new TextWidget(scaleRatioLabelTextFull' textColor: ActiveTheme.Instance.PrimaryTextColor);  				scaleRatioLabel.Margin = new BorderDouble(0' 0' 3' 0);  				scaleRatioLabel.VAnchor = VAnchor.ParentCenter;  				scaleRatioContainer.AddChild(scaleRatioLabel);    				scaleRatioContainer.AddChild(new HorizontalSpacer());    				scaleRatioControl = new MHNumberEdit(1' pixelWidth: 50 * GuiWidget.DeviceScale' allowDecimals: true' increment: .05);  				scaleRatioControl.SelectAllOnFocus = true;  				scaleRatioControl.VAnchor = VAnchor.ParentCenter;  				scaleRatioContainer.AddChild(scaleRatioControl);  				scaleRatioControl.ActuallNumberEdit.KeyPressed += (sender' e) =>  				{  					OnSelectedTransformChanged(this' null);  				};    				scaleRatioControl.ActuallNumberEdit.KeyDown += (sender' e) =>  				{  					OnSelectedTransformChanged(this' null);  				};    				scaleRatioControl.ActuallNumberEdit.EnterPressed += (object sender' KeyEventArgs keyEvent) =>  				{  					ApplyScaleFromEditField();  				};    				scaleRatioContainer.AddChild(CreateScaleDropDownMenu());    				buttonPanel.AddChild(scaleRatioContainer);    				scaleControls.Add(scaleRatioControl);  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ScaleControls,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\SideBar\ScaleControls.cs,AddScaleControls,The following statement contains a magic number: {  				buttonPanel.AddChild(CreateAxisScalingControl("x".ToUpper()' 0));  				buttonPanel.AddChild(CreateAxisScalingControl("y".ToUpper()' 1));  				buttonPanel.AddChild(CreateAxisScalingControl("z".ToUpper()' 2));    				uniformScale = new CheckBox("Lock Ratio".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor);  				uniformScale.Checked = true;    				FlowLayoutWidget leftToRight = new FlowLayoutWidget();  				leftToRight.Padding = new BorderDouble(5' 3);    				leftToRight.AddChild(uniformScale);  				buttonPanel.AddChild(leftToRight);  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ScaleControls,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\SideBar\ScaleControls.cs,AddScaleControls,The following statement contains a magic number: {  				buttonPanel.AddChild(CreateAxisScalingControl("x".ToUpper()' 0));  				buttonPanel.AddChild(CreateAxisScalingControl("y".ToUpper()' 1));  				buttonPanel.AddChild(CreateAxisScalingControl("z".ToUpper()' 2));    				uniformScale = new CheckBox("Lock Ratio".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor);  				uniformScale.Checked = true;    				FlowLayoutWidget leftToRight = new FlowLayoutWidget();  				leftToRight.Padding = new BorderDouble(5' 3);    				leftToRight.AddChild(uniformScale);  				buttonPanel.AddChild(leftToRight);  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ScaleControls,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\SideBar\ScaleControls.cs,AddScaleControls,The following statement contains a magic number: {  				buttonPanel.AddChild(CreateAxisScalingControl("x".ToUpper()' 0));  				buttonPanel.AddChild(CreateAxisScalingControl("y".ToUpper()' 1));  				buttonPanel.AddChild(CreateAxisScalingControl("z".ToUpper()' 2));    				uniformScale = new CheckBox("Lock Ratio".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor);  				uniformScale.Checked = true;    				FlowLayoutWidget leftToRight = new FlowLayoutWidget();  				leftToRight.Padding = new BorderDouble(5' 3);    				leftToRight.AddChild(uniformScale);  				buttonPanel.AddChild(leftToRight);  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ScaleControls,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\SideBar\ScaleControls.cs,ApplyScaleFromEditField,The following statement contains a magic number: if (view3DWidget.HaveSelection)  			{  				Matrix4X4 startingTransform = view3DWidget.SelectedMeshGroupTransform;    				double scale = scaleRatioControl.ActuallNumberEdit.Value;  				if (scale > 0)  				{  					ScaleAxis(scale' 0);  					ScaleAxis(scale' 1);  					ScaleAxis(scale' 2);  				}    				view3DWidget.AddUndoForSelectedMeshGroupTransform(startingTransform);  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ScaleControls,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\SideBar\ScaleControls.cs,CreateAxisScalingControl,The following statement contains a magic number: leftToRight.Padding = new BorderDouble(5' 3);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ScaleControls,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\SideBar\ScaleControls.cs,CreateAxisScalingControl,The following statement contains a magic number: leftToRight.Padding = new BorderDouble(5' 3);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ScaleControls,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\SideBar\ScaleControls.cs,CreateScaleDropDownMenu,The following statement contains a magic number: presetScaleMenu.Width = 25;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ScaleControls,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\SideBar\ScaleControls.cs,CreateScaleDropDownMenu,The following statement contains a magic number: presetScaleMenu.Height = scaleRatioControl.Height + 2;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ScaleControls,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\SideBar\ScaleControls.cs,CreateScaleDropDownMenu,The following statement contains a magic number: presetScaleMenu.SelectionChanged += (sender' e) =>  			{  				double scale = 1;  				switch (presetScaleMenu.SelectedIndex)  				{  					case 0:  						scale = 1.0 / 25.4;  						break;    					case 1:  						scale = 25.4;  						break;    					case 2:  						scale = .1;  						break;    					case 3:  						scale = 10;  						break;    					case 4:  						scale = 1;  						break;  				}    				scaleRatioControl.ActuallNumberEdit.Value = scale;  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ScaleControls,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\SideBar\ScaleControls.cs,CreateScaleDropDownMenu,The following statement contains a magic number: presetScaleMenu.SelectionChanged += (sender' e) =>  			{  				double scale = 1;  				switch (presetScaleMenu.SelectedIndex)  				{  					case 0:  						scale = 1.0 / 25.4;  						break;    					case 1:  						scale = 25.4;  						break;    					case 2:  						scale = .1;  						break;    					case 3:  						scale = 10;  						break;    					case 4:  						scale = 1;  						break;  				}    				scaleRatioControl.ActuallNumberEdit.Value = scale;  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ScaleControls,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\SideBar\ScaleControls.cs,CreateScaleDropDownMenu,The following statement contains a magic number: presetScaleMenu.SelectionChanged += (sender' e) =>  			{  				double scale = 1;  				switch (presetScaleMenu.SelectedIndex)  				{  					case 0:  						scale = 1.0 / 25.4;  						break;    					case 1:  						scale = 25.4;  						break;    					case 2:  						scale = .1;  						break;    					case 3:  						scale = 10;  						break;    					case 4:  						scale = 1;  						break;  				}    				scaleRatioControl.ActuallNumberEdit.Value = scale;  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ScaleControls,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\SideBar\ScaleControls.cs,CreateScaleDropDownMenu,The following statement contains a magic number: presetScaleMenu.SelectionChanged += (sender' e) =>  			{  				double scale = 1;  				switch (presetScaleMenu.SelectedIndex)  				{  					case 0:  						scale = 1.0 / 25.4;  						break;    					case 1:  						scale = 25.4;  						break;    					case 2:  						scale = .1;  						break;    					case 3:  						scale = 10;  						break;    					case 4:  						scale = 1;  						break;  				}    				scaleRatioControl.ActuallNumberEdit.Value = scale;  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ScaleControls,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\SideBar\ScaleControls.cs,CreateScaleDropDownMenu,The following statement contains a magic number: presetScaleMenu.SelectionChanged += (sender' e) =>  			{  				double scale = 1;  				switch (presetScaleMenu.SelectedIndex)  				{  					case 0:  						scale = 1.0 / 25.4;  						break;    					case 1:  						scale = 25.4;  						break;    					case 2:  						scale = .1;  						break;    					case 3:  						scale = 10;  						break;    					case 4:  						scale = 1;  						break;  				}    				scaleRatioControl.ActuallNumberEdit.Value = scale;  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ScaleControls,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\SideBar\ScaleControls.cs,CreateScaleDropDownMenu,The following statement contains a magic number: presetScaleMenu.SelectionChanged += (sender' e) =>  			{  				double scale = 1;  				switch (presetScaleMenu.SelectedIndex)  				{  					case 0:  						scale = 1.0 / 25.4;  						break;    					case 1:  						scale = 25.4;  						break;    					case 2:  						scale = .1;  						break;    					case 3:  						scale = 10;  						break;    					case 4:  						scale = 1;  						break;  				}    				scaleRatioControl.ActuallNumberEdit.Value = scale;  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ScaleControls,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\SideBar\ScaleControls.cs,CreateScaleDropDownMenu,The following statement contains a magic number: presetScaleMenu.SelectionChanged += (sender' e) =>  			{  				double scale = 1;  				switch (presetScaleMenu.SelectedIndex)  				{  					case 0:  						scale = 1.0 / 25.4;  						break;    					case 1:  						scale = 25.4;  						break;    					case 2:  						scale = .1;  						break;    					case 3:  						scale = 10;  						break;    					case 4:  						scale = 1;  						break;  				}    				scaleRatioControl.ActuallNumberEdit.Value = scale;  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ScaleControls,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\SideBar\ScaleControls.cs,OnSelectedTransformChanged,The following statement contains a magic number: if (sizeDisplay[0] != null  				&& view3DWidget.SelectedMeshGroup != null)  			{  				AxisAlignedBoundingBox bounds = view3DWidget.SelectedMeshGroup.GetAxisAlignedBoundingBox(view3DWidget.SelectedMeshGroupTransform);  				sizeDisplay[0].SetDisplayString("{0:0.00}".FormatWith(bounds.Size[0]));  				sizeDisplay[1].SetDisplayString("{0:0.00}".FormatWith(bounds.Size[1]));  				sizeDisplay[2].SetDisplayString("{0:0.00}".FormatWith(bounds.Size[2]));    				// set the scaling to be this new size  				AxisAlignedBoundingBox originalMeshBounds = view3DWidget.SelectedMeshGroup.GetAxisAlignedBoundingBox();  				AxisAlignedBoundingBox scaledBounds = view3DWidget.SelectedMeshGroup.GetAxisAlignedBoundingBox(view3DWidget.SelectedMeshGroupTransform);  				Vector3 currentScale = new Vector3();  				currentScale.x = scaledBounds.XSize / originalMeshBounds.XSize;  				currentScale.y = scaledBounds.YSize / originalMeshBounds.YSize;  				currentScale.z = scaledBounds.ZSize / originalMeshBounds.ZSize;  			}  			else  			{  				sizeDisplay[0].SetDisplayString("---");  				sizeDisplay[1].SetDisplayString("---");  				sizeDisplay[2].SetDisplayString("---");  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ScaleControls,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\SideBar\ScaleControls.cs,OnSelectedTransformChanged,The following statement contains a magic number: if (sizeDisplay[0] != null  				&& view3DWidget.SelectedMeshGroup != null)  			{  				AxisAlignedBoundingBox bounds = view3DWidget.SelectedMeshGroup.GetAxisAlignedBoundingBox(view3DWidget.SelectedMeshGroupTransform);  				sizeDisplay[0].SetDisplayString("{0:0.00}".FormatWith(bounds.Size[0]));  				sizeDisplay[1].SetDisplayString("{0:0.00}".FormatWith(bounds.Size[1]));  				sizeDisplay[2].SetDisplayString("{0:0.00}".FormatWith(bounds.Size[2]));    				// set the scaling to be this new size  				AxisAlignedBoundingBox originalMeshBounds = view3DWidget.SelectedMeshGroup.GetAxisAlignedBoundingBox();  				AxisAlignedBoundingBox scaledBounds = view3DWidget.SelectedMeshGroup.GetAxisAlignedBoundingBox(view3DWidget.SelectedMeshGroupTransform);  				Vector3 currentScale = new Vector3();  				currentScale.x = scaledBounds.XSize / originalMeshBounds.XSize;  				currentScale.y = scaledBounds.YSize / originalMeshBounds.YSize;  				currentScale.z = scaledBounds.ZSize / originalMeshBounds.ZSize;  			}  			else  			{  				sizeDisplay[0].SetDisplayString("---");  				sizeDisplay[1].SetDisplayString("---");  				sizeDisplay[2].SetDisplayString("---");  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ScaleControls,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\SideBar\ScaleControls.cs,OnSelectedTransformChanged,The following statement contains a magic number: if (sizeDisplay[0] != null  				&& view3DWidget.SelectedMeshGroup != null)  			{  				AxisAlignedBoundingBox bounds = view3DWidget.SelectedMeshGroup.GetAxisAlignedBoundingBox(view3DWidget.SelectedMeshGroupTransform);  				sizeDisplay[0].SetDisplayString("{0:0.00}".FormatWith(bounds.Size[0]));  				sizeDisplay[1].SetDisplayString("{0:0.00}".FormatWith(bounds.Size[1]));  				sizeDisplay[2].SetDisplayString("{0:0.00}".FormatWith(bounds.Size[2]));    				// set the scaling to be this new size  				AxisAlignedBoundingBox originalMeshBounds = view3DWidget.SelectedMeshGroup.GetAxisAlignedBoundingBox();  				AxisAlignedBoundingBox scaledBounds = view3DWidget.SelectedMeshGroup.GetAxisAlignedBoundingBox(view3DWidget.SelectedMeshGroupTransform);  				Vector3 currentScale = new Vector3();  				currentScale.x = scaledBounds.XSize / originalMeshBounds.XSize;  				currentScale.y = scaledBounds.YSize / originalMeshBounds.YSize;  				currentScale.z = scaledBounds.ZSize / originalMeshBounds.ZSize;  			}  			else  			{  				sizeDisplay[0].SetDisplayString("---");  				sizeDisplay[1].SetDisplayString("---");  				sizeDisplay[2].SetDisplayString("---");  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,HeightValueDisplay,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\Gui3D\HeightValueDisplay.cs,HeightValueDisplay,The following statement contains a magic number: BackgroundColor = new RGBA_Bytes(RGBA_Bytes.White' 150);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,HeightValueDisplay,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\Gui3D\HeightValueDisplay.cs,MeshViewerToDrawWith_Draw,The following statement contains a magic number: if (Visible)  			{  				if (drawEvent != null)  				{  					Vector2 startLineGroundPos = Vector2.Zero;  					Vector2 startLineSelectionPos = Vector2.Zero;  					Vector2 midLinePos = Vector2.Zero;    					if (MeshViewerToDrawWith.HaveSelection)  					{  						// draw the hight from the bottom to the bed  						AxisAlignedBoundingBox selectedBounds = MeshViewerToDrawWith.GetBoundsForSelection();    						Vector2 screenPosition = new Vector2(-100' 0);  						Vector3[] bottomPoints = new Vector3[4];  						bottomPoints[0] = new Vector3(selectedBounds.minXYZ.x' selectedBounds.minXYZ.y' selectedBounds.minXYZ.z);  						bottomPoints[1] = new Vector3(selectedBounds.minXYZ.x' selectedBounds.maxXYZ.y' selectedBounds.minXYZ.z);  						bottomPoints[2] = new Vector3(selectedBounds.maxXYZ.x' selectedBounds.minXYZ.y' selectedBounds.minXYZ.z);  						bottomPoints[3] = new Vector3(selectedBounds.maxXYZ.x' selectedBounds.maxXYZ.y' selectedBounds.minXYZ.z);    						for (int i = 0; i < 4; i++)  						{  							Vector2 testScreenPosition = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(bottomPoints[i]);  							if (testScreenPosition.x > screenPosition.x)  							{  								startLineSelectionPos = testScreenPosition;  								startLineGroundPos = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(bottomPoints[i] + new Vector3(0' 0' -bottomPoints[i].z));  								midLinePos = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(bottomPoints[i] + new Vector3(0' 0' -bottomPoints[i].z/2));  								screenPosition = testScreenPosition + new Vector2(HorizontalLineLength' 0);  							}  						}  						heightValueDisplayInfo.DisplaySizeInfo(drawEvent.graphics2D' midLinePos' selectedBounds.minXYZ.z);      						OriginRelativeParent = screenPosition;    						// draw the line that is on the ground  						double yGround = Math.Round(startLineGroundPos.y) + .5;  						drawEvent.graphics2D.Line(startLineGroundPos.x' yGround' startLineGroundPos.x + HorizontalLineLength - 5' yGround' RGBA_Bytes.Black);  						// and the line that is at the base of the selection  						double ySelection = Math.Round(startLineSelectionPos.y) + .5;  						drawEvent.graphics2D.Line(startLineSelectionPos.x' ySelection' startLineSelectionPos.x + HorizontalLineLength - 5' ySelection' RGBA_Bytes.Black);    						// draw the vertical line that shows the measurement  						Vector2 pointerBottom = new Vector2(startLineGroundPos.x + HorizontalLineLength / 2' yGround);  						Vector2 pointerTop = new Vector2(startLineSelectionPos.x + HorizontalLineLength / 2' ySelection);    						InteractionVolume.DrawMeasureLine(drawEvent.graphics2D' pointerBottom' pointerTop' RGBA_Bytes.Black' InteractionVolume.LineArrows.End);  					}  				}  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,HeightValueDisplay,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\Gui3D\HeightValueDisplay.cs,MeshViewerToDrawWith_Draw,The following statement contains a magic number: if (Visible)  			{  				if (drawEvent != null)  				{  					Vector2 startLineGroundPos = Vector2.Zero;  					Vector2 startLineSelectionPos = Vector2.Zero;  					Vector2 midLinePos = Vector2.Zero;    					if (MeshViewerToDrawWith.HaveSelection)  					{  						// draw the hight from the bottom to the bed  						AxisAlignedBoundingBox selectedBounds = MeshViewerToDrawWith.GetBoundsForSelection();    						Vector2 screenPosition = new Vector2(-100' 0);  						Vector3[] bottomPoints = new Vector3[4];  						bottomPoints[0] = new Vector3(selectedBounds.minXYZ.x' selectedBounds.minXYZ.y' selectedBounds.minXYZ.z);  						bottomPoints[1] = new Vector3(selectedBounds.minXYZ.x' selectedBounds.maxXYZ.y' selectedBounds.minXYZ.z);  						bottomPoints[2] = new Vector3(selectedBounds.maxXYZ.x' selectedBounds.minXYZ.y' selectedBounds.minXYZ.z);  						bottomPoints[3] = new Vector3(selectedBounds.maxXYZ.x' selectedBounds.maxXYZ.y' selectedBounds.minXYZ.z);    						for (int i = 0; i < 4; i++)  						{  							Vector2 testScreenPosition = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(bottomPoints[i]);  							if (testScreenPosition.x > screenPosition.x)  							{  								startLineSelectionPos = testScreenPosition;  								startLineGroundPos = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(bottomPoints[i] + new Vector3(0' 0' -bottomPoints[i].z));  								midLinePos = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(bottomPoints[i] + new Vector3(0' 0' -bottomPoints[i].z/2));  								screenPosition = testScreenPosition + new Vector2(HorizontalLineLength' 0);  							}  						}  						heightValueDisplayInfo.DisplaySizeInfo(drawEvent.graphics2D' midLinePos' selectedBounds.minXYZ.z);      						OriginRelativeParent = screenPosition;    						// draw the line that is on the ground  						double yGround = Math.Round(startLineGroundPos.y) + .5;  						drawEvent.graphics2D.Line(startLineGroundPos.x' yGround' startLineGroundPos.x + HorizontalLineLength - 5' yGround' RGBA_Bytes.Black);  						// and the line that is at the base of the selection  						double ySelection = Math.Round(startLineSelectionPos.y) + .5;  						drawEvent.graphics2D.Line(startLineSelectionPos.x' ySelection' startLineSelectionPos.x + HorizontalLineLength - 5' ySelection' RGBA_Bytes.Black);    						// draw the vertical line that shows the measurement  						Vector2 pointerBottom = new Vector2(startLineGroundPos.x + HorizontalLineLength / 2' yGround);  						Vector2 pointerTop = new Vector2(startLineSelectionPos.x + HorizontalLineLength / 2' ySelection);    						InteractionVolume.DrawMeasureLine(drawEvent.graphics2D' pointerBottom' pointerTop' RGBA_Bytes.Black' InteractionVolume.LineArrows.End);  					}  				}  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,HeightValueDisplay,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\Gui3D\HeightValueDisplay.cs,MeshViewerToDrawWith_Draw,The following statement contains a magic number: if (Visible)  			{  				if (drawEvent != null)  				{  					Vector2 startLineGroundPos = Vector2.Zero;  					Vector2 startLineSelectionPos = Vector2.Zero;  					Vector2 midLinePos = Vector2.Zero;    					if (MeshViewerToDrawWith.HaveSelection)  					{  						// draw the hight from the bottom to the bed  						AxisAlignedBoundingBox selectedBounds = MeshViewerToDrawWith.GetBoundsForSelection();    						Vector2 screenPosition = new Vector2(-100' 0);  						Vector3[] bottomPoints = new Vector3[4];  						bottomPoints[0] = new Vector3(selectedBounds.minXYZ.x' selectedBounds.minXYZ.y' selectedBounds.minXYZ.z);  						bottomPoints[1] = new Vector3(selectedBounds.minXYZ.x' selectedBounds.maxXYZ.y' selectedBounds.minXYZ.z);  						bottomPoints[2] = new Vector3(selectedBounds.maxXYZ.x' selectedBounds.minXYZ.y' selectedBounds.minXYZ.z);  						bottomPoints[3] = new Vector3(selectedBounds.maxXYZ.x' selectedBounds.maxXYZ.y' selectedBounds.minXYZ.z);    						for (int i = 0; i < 4; i++)  						{  							Vector2 testScreenPosition = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(bottomPoints[i]);  							if (testScreenPosition.x > screenPosition.x)  							{  								startLineSelectionPos = testScreenPosition;  								startLineGroundPos = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(bottomPoints[i] + new Vector3(0' 0' -bottomPoints[i].z));  								midLinePos = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(bottomPoints[i] + new Vector3(0' 0' -bottomPoints[i].z/2));  								screenPosition = testScreenPosition + new Vector2(HorizontalLineLength' 0);  							}  						}  						heightValueDisplayInfo.DisplaySizeInfo(drawEvent.graphics2D' midLinePos' selectedBounds.minXYZ.z);      						OriginRelativeParent = screenPosition;    						// draw the line that is on the ground  						double yGround = Math.Round(startLineGroundPos.y) + .5;  						drawEvent.graphics2D.Line(startLineGroundPos.x' yGround' startLineGroundPos.x + HorizontalLineLength - 5' yGround' RGBA_Bytes.Black);  						// and the line that is at the base of the selection  						double ySelection = Math.Round(startLineSelectionPos.y) + .5;  						drawEvent.graphics2D.Line(startLineSelectionPos.x' ySelection' startLineSelectionPos.x + HorizontalLineLength - 5' ySelection' RGBA_Bytes.Black);    						// draw the vertical line that shows the measurement  						Vector2 pointerBottom = new Vector2(startLineGroundPos.x + HorizontalLineLength / 2' yGround);  						Vector2 pointerTop = new Vector2(startLineSelectionPos.x + HorizontalLineLength / 2' ySelection);    						InteractionVolume.DrawMeasureLine(drawEvent.graphics2D' pointerBottom' pointerTop' RGBA_Bytes.Black' InteractionVolume.LineArrows.End);  					}  				}  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,HeightValueDisplay,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\Gui3D\HeightValueDisplay.cs,MeshViewerToDrawWith_Draw,The following statement contains a magic number: if (Visible)  			{  				if (drawEvent != null)  				{  					Vector2 startLineGroundPos = Vector2.Zero;  					Vector2 startLineSelectionPos = Vector2.Zero;  					Vector2 midLinePos = Vector2.Zero;    					if (MeshViewerToDrawWith.HaveSelection)  					{  						// draw the hight from the bottom to the bed  						AxisAlignedBoundingBox selectedBounds = MeshViewerToDrawWith.GetBoundsForSelection();    						Vector2 screenPosition = new Vector2(-100' 0);  						Vector3[] bottomPoints = new Vector3[4];  						bottomPoints[0] = new Vector3(selectedBounds.minXYZ.x' selectedBounds.minXYZ.y' selectedBounds.minXYZ.z);  						bottomPoints[1] = new Vector3(selectedBounds.minXYZ.x' selectedBounds.maxXYZ.y' selectedBounds.minXYZ.z);  						bottomPoints[2] = new Vector3(selectedBounds.maxXYZ.x' selectedBounds.minXYZ.y' selectedBounds.minXYZ.z);  						bottomPoints[3] = new Vector3(selectedBounds.maxXYZ.x' selectedBounds.maxXYZ.y' selectedBounds.minXYZ.z);    						for (int i = 0; i < 4; i++)  						{  							Vector2 testScreenPosition = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(bottomPoints[i]);  							if (testScreenPosition.x > screenPosition.x)  							{  								startLineSelectionPos = testScreenPosition;  								startLineGroundPos = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(bottomPoints[i] + new Vector3(0' 0' -bottomPoints[i].z));  								midLinePos = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(bottomPoints[i] + new Vector3(0' 0' -bottomPoints[i].z/2));  								screenPosition = testScreenPosition + new Vector2(HorizontalLineLength' 0);  							}  						}  						heightValueDisplayInfo.DisplaySizeInfo(drawEvent.graphics2D' midLinePos' selectedBounds.minXYZ.z);      						OriginRelativeParent = screenPosition;    						// draw the line that is on the ground  						double yGround = Math.Round(startLineGroundPos.y) + .5;  						drawEvent.graphics2D.Line(startLineGroundPos.x' yGround' startLineGroundPos.x + HorizontalLineLength - 5' yGround' RGBA_Bytes.Black);  						// and the line that is at the base of the selection  						double ySelection = Math.Round(startLineSelectionPos.y) + .5;  						drawEvent.graphics2D.Line(startLineSelectionPos.x' ySelection' startLineSelectionPos.x + HorizontalLineLength - 5' ySelection' RGBA_Bytes.Black);    						// draw the vertical line that shows the measurement  						Vector2 pointerBottom = new Vector2(startLineGroundPos.x + HorizontalLineLength / 2' yGround);  						Vector2 pointerTop = new Vector2(startLineSelectionPos.x + HorizontalLineLength / 2' ySelection);    						InteractionVolume.DrawMeasureLine(drawEvent.graphics2D' pointerBottom' pointerTop' RGBA_Bytes.Black' InteractionVolume.LineArrows.End);  					}  				}  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,HeightValueDisplay,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\Gui3D\HeightValueDisplay.cs,MeshViewerToDrawWith_Draw,The following statement contains a magic number: if (Visible)  			{  				if (drawEvent != null)  				{  					Vector2 startLineGroundPos = Vector2.Zero;  					Vector2 startLineSelectionPos = Vector2.Zero;  					Vector2 midLinePos = Vector2.Zero;    					if (MeshViewerToDrawWith.HaveSelection)  					{  						// draw the hight from the bottom to the bed  						AxisAlignedBoundingBox selectedBounds = MeshViewerToDrawWith.GetBoundsForSelection();    						Vector2 screenPosition = new Vector2(-100' 0);  						Vector3[] bottomPoints = new Vector3[4];  						bottomPoints[0] = new Vector3(selectedBounds.minXYZ.x' selectedBounds.minXYZ.y' selectedBounds.minXYZ.z);  						bottomPoints[1] = new Vector3(selectedBounds.minXYZ.x' selectedBounds.maxXYZ.y' selectedBounds.minXYZ.z);  						bottomPoints[2] = new Vector3(selectedBounds.maxXYZ.x' selectedBounds.minXYZ.y' selectedBounds.minXYZ.z);  						bottomPoints[3] = new Vector3(selectedBounds.maxXYZ.x' selectedBounds.maxXYZ.y' selectedBounds.minXYZ.z);    						for (int i = 0; i < 4; i++)  						{  							Vector2 testScreenPosition = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(bottomPoints[i]);  							if (testScreenPosition.x > screenPosition.x)  							{  								startLineSelectionPos = testScreenPosition;  								startLineGroundPos = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(bottomPoints[i] + new Vector3(0' 0' -bottomPoints[i].z));  								midLinePos = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(bottomPoints[i] + new Vector3(0' 0' -bottomPoints[i].z/2));  								screenPosition = testScreenPosition + new Vector2(HorizontalLineLength' 0);  							}  						}  						heightValueDisplayInfo.DisplaySizeInfo(drawEvent.graphics2D' midLinePos' selectedBounds.minXYZ.z);      						OriginRelativeParent = screenPosition;    						// draw the line that is on the ground  						double yGround = Math.Round(startLineGroundPos.y) + .5;  						drawEvent.graphics2D.Line(startLineGroundPos.x' yGround' startLineGroundPos.x + HorizontalLineLength - 5' yGround' RGBA_Bytes.Black);  						// and the line that is at the base of the selection  						double ySelection = Math.Round(startLineSelectionPos.y) + .5;  						drawEvent.graphics2D.Line(startLineSelectionPos.x' ySelection' startLineSelectionPos.x + HorizontalLineLength - 5' ySelection' RGBA_Bytes.Black);    						// draw the vertical line that shows the measurement  						Vector2 pointerBottom = new Vector2(startLineGroundPos.x + HorizontalLineLength / 2' yGround);  						Vector2 pointerTop = new Vector2(startLineSelectionPos.x + HorizontalLineLength / 2' ySelection);    						InteractionVolume.DrawMeasureLine(drawEvent.graphics2D' pointerBottom' pointerTop' RGBA_Bytes.Black' InteractionVolume.LineArrows.End);  					}  				}  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,HeightValueDisplay,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\Gui3D\HeightValueDisplay.cs,MeshViewerToDrawWith_Draw,The following statement contains a magic number: if (Visible)  			{  				if (drawEvent != null)  				{  					Vector2 startLineGroundPos = Vector2.Zero;  					Vector2 startLineSelectionPos = Vector2.Zero;  					Vector2 midLinePos = Vector2.Zero;    					if (MeshViewerToDrawWith.HaveSelection)  					{  						// draw the hight from the bottom to the bed  						AxisAlignedBoundingBox selectedBounds = MeshViewerToDrawWith.GetBoundsForSelection();    						Vector2 screenPosition = new Vector2(-100' 0);  						Vector3[] bottomPoints = new Vector3[4];  						bottomPoints[0] = new Vector3(selectedBounds.minXYZ.x' selectedBounds.minXYZ.y' selectedBounds.minXYZ.z);  						bottomPoints[1] = new Vector3(selectedBounds.minXYZ.x' selectedBounds.maxXYZ.y' selectedBounds.minXYZ.z);  						bottomPoints[2] = new Vector3(selectedBounds.maxXYZ.x' selectedBounds.minXYZ.y' selectedBounds.minXYZ.z);  						bottomPoints[3] = new Vector3(selectedBounds.maxXYZ.x' selectedBounds.maxXYZ.y' selectedBounds.minXYZ.z);    						for (int i = 0; i < 4; i++)  						{  							Vector2 testScreenPosition = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(bottomPoints[i]);  							if (testScreenPosition.x > screenPosition.x)  							{  								startLineSelectionPos = testScreenPosition;  								startLineGroundPos = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(bottomPoints[i] + new Vector3(0' 0' -bottomPoints[i].z));  								midLinePos = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(bottomPoints[i] + new Vector3(0' 0' -bottomPoints[i].z/2));  								screenPosition = testScreenPosition + new Vector2(HorizontalLineLength' 0);  							}  						}  						heightValueDisplayInfo.DisplaySizeInfo(drawEvent.graphics2D' midLinePos' selectedBounds.minXYZ.z);      						OriginRelativeParent = screenPosition;    						// draw the line that is on the ground  						double yGround = Math.Round(startLineGroundPos.y) + .5;  						drawEvent.graphics2D.Line(startLineGroundPos.x' yGround' startLineGroundPos.x + HorizontalLineLength - 5' yGround' RGBA_Bytes.Black);  						// and the line that is at the base of the selection  						double ySelection = Math.Round(startLineSelectionPos.y) + .5;  						drawEvent.graphics2D.Line(startLineSelectionPos.x' ySelection' startLineSelectionPos.x + HorizontalLineLength - 5' ySelection' RGBA_Bytes.Black);    						// draw the vertical line that shows the measurement  						Vector2 pointerBottom = new Vector2(startLineGroundPos.x + HorizontalLineLength / 2' yGround);  						Vector2 pointerTop = new Vector2(startLineSelectionPos.x + HorizontalLineLength / 2' ySelection);    						InteractionVolume.DrawMeasureLine(drawEvent.graphics2D' pointerBottom' pointerTop' RGBA_Bytes.Black' InteractionVolume.LineArrows.End);  					}  				}  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,HeightValueDisplay,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\Gui3D\HeightValueDisplay.cs,MeshViewerToDrawWith_Draw,The following statement contains a magic number: if (Visible)  			{  				if (drawEvent != null)  				{  					Vector2 startLineGroundPos = Vector2.Zero;  					Vector2 startLineSelectionPos = Vector2.Zero;  					Vector2 midLinePos = Vector2.Zero;    					if (MeshViewerToDrawWith.HaveSelection)  					{  						// draw the hight from the bottom to the bed  						AxisAlignedBoundingBox selectedBounds = MeshViewerToDrawWith.GetBoundsForSelection();    						Vector2 screenPosition = new Vector2(-100' 0);  						Vector3[] bottomPoints = new Vector3[4];  						bottomPoints[0] = new Vector3(selectedBounds.minXYZ.x' selectedBounds.minXYZ.y' selectedBounds.minXYZ.z);  						bottomPoints[1] = new Vector3(selectedBounds.minXYZ.x' selectedBounds.maxXYZ.y' selectedBounds.minXYZ.z);  						bottomPoints[2] = new Vector3(selectedBounds.maxXYZ.x' selectedBounds.minXYZ.y' selectedBounds.minXYZ.z);  						bottomPoints[3] = new Vector3(selectedBounds.maxXYZ.x' selectedBounds.maxXYZ.y' selectedBounds.minXYZ.z);    						for (int i = 0; i < 4; i++)  						{  							Vector2 testScreenPosition = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(bottomPoints[i]);  							if (testScreenPosition.x > screenPosition.x)  							{  								startLineSelectionPos = testScreenPosition;  								startLineGroundPos = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(bottomPoints[i] + new Vector3(0' 0' -bottomPoints[i].z));  								midLinePos = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(bottomPoints[i] + new Vector3(0' 0' -bottomPoints[i].z/2));  								screenPosition = testScreenPosition + new Vector2(HorizontalLineLength' 0);  							}  						}  						heightValueDisplayInfo.DisplaySizeInfo(drawEvent.graphics2D' midLinePos' selectedBounds.minXYZ.z);      						OriginRelativeParent = screenPosition;    						// draw the line that is on the ground  						double yGround = Math.Round(startLineGroundPos.y) + .5;  						drawEvent.graphics2D.Line(startLineGroundPos.x' yGround' startLineGroundPos.x + HorizontalLineLength - 5' yGround' RGBA_Bytes.Black);  						// and the line that is at the base of the selection  						double ySelection = Math.Round(startLineSelectionPos.y) + .5;  						drawEvent.graphics2D.Line(startLineSelectionPos.x' ySelection' startLineSelectionPos.x + HorizontalLineLength - 5' ySelection' RGBA_Bytes.Black);    						// draw the vertical line that shows the measurement  						Vector2 pointerBottom = new Vector2(startLineGroundPos.x + HorizontalLineLength / 2' yGround);  						Vector2 pointerTop = new Vector2(startLineSelectionPos.x + HorizontalLineLength / 2' ySelection);    						InteractionVolume.DrawMeasureLine(drawEvent.graphics2D' pointerBottom' pointerTop' RGBA_Bytes.Black' InteractionVolume.LineArrows.End);  					}  				}  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,HeightValueDisplay,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\Gui3D\HeightValueDisplay.cs,MeshViewerToDrawWith_Draw,The following statement contains a magic number: if (Visible)  			{  				if (drawEvent != null)  				{  					Vector2 startLineGroundPos = Vector2.Zero;  					Vector2 startLineSelectionPos = Vector2.Zero;  					Vector2 midLinePos = Vector2.Zero;    					if (MeshViewerToDrawWith.HaveSelection)  					{  						// draw the hight from the bottom to the bed  						AxisAlignedBoundingBox selectedBounds = MeshViewerToDrawWith.GetBoundsForSelection();    						Vector2 screenPosition = new Vector2(-100' 0);  						Vector3[] bottomPoints = new Vector3[4];  						bottomPoints[0] = new Vector3(selectedBounds.minXYZ.x' selectedBounds.minXYZ.y' selectedBounds.minXYZ.z);  						bottomPoints[1] = new Vector3(selectedBounds.minXYZ.x' selectedBounds.maxXYZ.y' selectedBounds.minXYZ.z);  						bottomPoints[2] = new Vector3(selectedBounds.maxXYZ.x' selectedBounds.minXYZ.y' selectedBounds.minXYZ.z);  						bottomPoints[3] = new Vector3(selectedBounds.maxXYZ.x' selectedBounds.maxXYZ.y' selectedBounds.minXYZ.z);    						for (int i = 0; i < 4; i++)  						{  							Vector2 testScreenPosition = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(bottomPoints[i]);  							if (testScreenPosition.x > screenPosition.x)  							{  								startLineSelectionPos = testScreenPosition;  								startLineGroundPos = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(bottomPoints[i] + new Vector3(0' 0' -bottomPoints[i].z));  								midLinePos = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(bottomPoints[i] + new Vector3(0' 0' -bottomPoints[i].z/2));  								screenPosition = testScreenPosition + new Vector2(HorizontalLineLength' 0);  							}  						}  						heightValueDisplayInfo.DisplaySizeInfo(drawEvent.graphics2D' midLinePos' selectedBounds.minXYZ.z);      						OriginRelativeParent = screenPosition;    						// draw the line that is on the ground  						double yGround = Math.Round(startLineGroundPos.y) + .5;  						drawEvent.graphics2D.Line(startLineGroundPos.x' yGround' startLineGroundPos.x + HorizontalLineLength - 5' yGround' RGBA_Bytes.Black);  						// and the line that is at the base of the selection  						double ySelection = Math.Round(startLineSelectionPos.y) + .5;  						drawEvent.graphics2D.Line(startLineSelectionPos.x' ySelection' startLineSelectionPos.x + HorizontalLineLength - 5' ySelection' RGBA_Bytes.Black);    						// draw the vertical line that shows the measurement  						Vector2 pointerBottom = new Vector2(startLineGroundPos.x + HorizontalLineLength / 2' yGround);  						Vector2 pointerTop = new Vector2(startLineSelectionPos.x + HorizontalLineLength / 2' ySelection);    						InteractionVolume.DrawMeasureLine(drawEvent.graphics2D' pointerBottom' pointerTop' RGBA_Bytes.Black' InteractionVolume.LineArrows.End);  					}  				}  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,HeightValueDisplay,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\Gui3D\HeightValueDisplay.cs,MeshViewerToDrawWith_Draw,The following statement contains a magic number: if (Visible)  			{  				if (drawEvent != null)  				{  					Vector2 startLineGroundPos = Vector2.Zero;  					Vector2 startLineSelectionPos = Vector2.Zero;  					Vector2 midLinePos = Vector2.Zero;    					if (MeshViewerToDrawWith.HaveSelection)  					{  						// draw the hight from the bottom to the bed  						AxisAlignedBoundingBox selectedBounds = MeshViewerToDrawWith.GetBoundsForSelection();    						Vector2 screenPosition = new Vector2(-100' 0);  						Vector3[] bottomPoints = new Vector3[4];  						bottomPoints[0] = new Vector3(selectedBounds.minXYZ.x' selectedBounds.minXYZ.y' selectedBounds.minXYZ.z);  						bottomPoints[1] = new Vector3(selectedBounds.minXYZ.x' selectedBounds.maxXYZ.y' selectedBounds.minXYZ.z);  						bottomPoints[2] = new Vector3(selectedBounds.maxXYZ.x' selectedBounds.minXYZ.y' selectedBounds.minXYZ.z);  						bottomPoints[3] = new Vector3(selectedBounds.maxXYZ.x' selectedBounds.maxXYZ.y' selectedBounds.minXYZ.z);    						for (int i = 0; i < 4; i++)  						{  							Vector2 testScreenPosition = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(bottomPoints[i]);  							if (testScreenPosition.x > screenPosition.x)  							{  								startLineSelectionPos = testScreenPosition;  								startLineGroundPos = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(bottomPoints[i] + new Vector3(0' 0' -bottomPoints[i].z));  								midLinePos = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(bottomPoints[i] + new Vector3(0' 0' -bottomPoints[i].z/2));  								screenPosition = testScreenPosition + new Vector2(HorizontalLineLength' 0);  							}  						}  						heightValueDisplayInfo.DisplaySizeInfo(drawEvent.graphics2D' midLinePos' selectedBounds.minXYZ.z);      						OriginRelativeParent = screenPosition;    						// draw the line that is on the ground  						double yGround = Math.Round(startLineGroundPos.y) + .5;  						drawEvent.graphics2D.Line(startLineGroundPos.x' yGround' startLineGroundPos.x + HorizontalLineLength - 5' yGround' RGBA_Bytes.Black);  						// and the line that is at the base of the selection  						double ySelection = Math.Round(startLineSelectionPos.y) + .5;  						drawEvent.graphics2D.Line(startLineSelectionPos.x' ySelection' startLineSelectionPos.x + HorizontalLineLength - 5' ySelection' RGBA_Bytes.Black);    						// draw the vertical line that shows the measurement  						Vector2 pointerBottom = new Vector2(startLineGroundPos.x + HorizontalLineLength / 2' yGround);  						Vector2 pointerTop = new Vector2(startLineSelectionPos.x + HorizontalLineLength / 2' ySelection);    						InteractionVolume.DrawMeasureLine(drawEvent.graphics2D' pointerBottom' pointerTop' RGBA_Bytes.Black' InteractionVolume.LineArrows.End);  					}  				}  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,HeightValueDisplay,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\Gui3D\HeightValueDisplay.cs,MeshViewerToDrawWith_Draw,The following statement contains a magic number: if (Visible)  			{  				if (drawEvent != null)  				{  					Vector2 startLineGroundPos = Vector2.Zero;  					Vector2 startLineSelectionPos = Vector2.Zero;  					Vector2 midLinePos = Vector2.Zero;    					if (MeshViewerToDrawWith.HaveSelection)  					{  						// draw the hight from the bottom to the bed  						AxisAlignedBoundingBox selectedBounds = MeshViewerToDrawWith.GetBoundsForSelection();    						Vector2 screenPosition = new Vector2(-100' 0);  						Vector3[] bottomPoints = new Vector3[4];  						bottomPoints[0] = new Vector3(selectedBounds.minXYZ.x' selectedBounds.minXYZ.y' selectedBounds.minXYZ.z);  						bottomPoints[1] = new Vector3(selectedBounds.minXYZ.x' selectedBounds.maxXYZ.y' selectedBounds.minXYZ.z);  						bottomPoints[2] = new Vector3(selectedBounds.maxXYZ.x' selectedBounds.minXYZ.y' selectedBounds.minXYZ.z);  						bottomPoints[3] = new Vector3(selectedBounds.maxXYZ.x' selectedBounds.maxXYZ.y' selectedBounds.minXYZ.z);    						for (int i = 0; i < 4; i++)  						{  							Vector2 testScreenPosition = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(bottomPoints[i]);  							if (testScreenPosition.x > screenPosition.x)  							{  								startLineSelectionPos = testScreenPosition;  								startLineGroundPos = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(bottomPoints[i] + new Vector3(0' 0' -bottomPoints[i].z));  								midLinePos = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(bottomPoints[i] + new Vector3(0' 0' -bottomPoints[i].z/2));  								screenPosition = testScreenPosition + new Vector2(HorizontalLineLength' 0);  							}  						}  						heightValueDisplayInfo.DisplaySizeInfo(drawEvent.graphics2D' midLinePos' selectedBounds.minXYZ.z);      						OriginRelativeParent = screenPosition;    						// draw the line that is on the ground  						double yGround = Math.Round(startLineGroundPos.y) + .5;  						drawEvent.graphics2D.Line(startLineGroundPos.x' yGround' startLineGroundPos.x + HorizontalLineLength - 5' yGround' RGBA_Bytes.Black);  						// and the line that is at the base of the selection  						double ySelection = Math.Round(startLineSelectionPos.y) + .5;  						drawEvent.graphics2D.Line(startLineSelectionPos.x' ySelection' startLineSelectionPos.x + HorizontalLineLength - 5' ySelection' RGBA_Bytes.Black);    						// draw the vertical line that shows the measurement  						Vector2 pointerBottom = new Vector2(startLineGroundPos.x + HorizontalLineLength / 2' yGround);  						Vector2 pointerTop = new Vector2(startLineSelectionPos.x + HorizontalLineLength / 2' ySelection);    						InteractionVolume.DrawMeasureLine(drawEvent.graphics2D' pointerBottom' pointerTop' RGBA_Bytes.Black' InteractionVolume.LineArrows.End);  					}  				}  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,HeightValueDisplay,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\Gui3D\HeightValueDisplay.cs,MeshViewerToDrawWith_Draw,The following statement contains a magic number: if (Visible)  			{  				if (drawEvent != null)  				{  					Vector2 startLineGroundPos = Vector2.Zero;  					Vector2 startLineSelectionPos = Vector2.Zero;  					Vector2 midLinePos = Vector2.Zero;    					if (MeshViewerToDrawWith.HaveSelection)  					{  						// draw the hight from the bottom to the bed  						AxisAlignedBoundingBox selectedBounds = MeshViewerToDrawWith.GetBoundsForSelection();    						Vector2 screenPosition = new Vector2(-100' 0);  						Vector3[] bottomPoints = new Vector3[4];  						bottomPoints[0] = new Vector3(selectedBounds.minXYZ.x' selectedBounds.minXYZ.y' selectedBounds.minXYZ.z);  						bottomPoints[1] = new Vector3(selectedBounds.minXYZ.x' selectedBounds.maxXYZ.y' selectedBounds.minXYZ.z);  						bottomPoints[2] = new Vector3(selectedBounds.maxXYZ.x' selectedBounds.minXYZ.y' selectedBounds.minXYZ.z);  						bottomPoints[3] = new Vector3(selectedBounds.maxXYZ.x' selectedBounds.maxXYZ.y' selectedBounds.minXYZ.z);    						for (int i = 0; i < 4; i++)  						{  							Vector2 testScreenPosition = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(bottomPoints[i]);  							if (testScreenPosition.x > screenPosition.x)  							{  								startLineSelectionPos = testScreenPosition;  								startLineGroundPos = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(bottomPoints[i] + new Vector3(0' 0' -bottomPoints[i].z));  								midLinePos = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(bottomPoints[i] + new Vector3(0' 0' -bottomPoints[i].z/2));  								screenPosition = testScreenPosition + new Vector2(HorizontalLineLength' 0);  							}  						}  						heightValueDisplayInfo.DisplaySizeInfo(drawEvent.graphics2D' midLinePos' selectedBounds.minXYZ.z);      						OriginRelativeParent = screenPosition;    						// draw the line that is on the ground  						double yGround = Math.Round(startLineGroundPos.y) + .5;  						drawEvent.graphics2D.Line(startLineGroundPos.x' yGround' startLineGroundPos.x + HorizontalLineLength - 5' yGround' RGBA_Bytes.Black);  						// and the line that is at the base of the selection  						double ySelection = Math.Round(startLineSelectionPos.y) + .5;  						drawEvent.graphics2D.Line(startLineSelectionPos.x' ySelection' startLineSelectionPos.x + HorizontalLineLength - 5' ySelection' RGBA_Bytes.Black);    						// draw the vertical line that shows the measurement  						Vector2 pointerBottom = new Vector2(startLineGroundPos.x + HorizontalLineLength / 2' yGround);  						Vector2 pointerTop = new Vector2(startLineSelectionPos.x + HorizontalLineLength / 2' ySelection);    						InteractionVolume.DrawMeasureLine(drawEvent.graphics2D' pointerBottom' pointerTop' RGBA_Bytes.Black' InteractionVolume.LineArrows.End);  					}  				}  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,HeightValueDisplay,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\Gui3D\HeightValueDisplay.cs,MeshViewerToDrawWith_Draw,The following statement contains a magic number: if (Visible)  			{  				if (drawEvent != null)  				{  					Vector2 startLineGroundPos = Vector2.Zero;  					Vector2 startLineSelectionPos = Vector2.Zero;  					Vector2 midLinePos = Vector2.Zero;    					if (MeshViewerToDrawWith.HaveSelection)  					{  						// draw the hight from the bottom to the bed  						AxisAlignedBoundingBox selectedBounds = MeshViewerToDrawWith.GetBoundsForSelection();    						Vector2 screenPosition = new Vector2(-100' 0);  						Vector3[] bottomPoints = new Vector3[4];  						bottomPoints[0] = new Vector3(selectedBounds.minXYZ.x' selectedBounds.minXYZ.y' selectedBounds.minXYZ.z);  						bottomPoints[1] = new Vector3(selectedBounds.minXYZ.x' selectedBounds.maxXYZ.y' selectedBounds.minXYZ.z);  						bottomPoints[2] = new Vector3(selectedBounds.maxXYZ.x' selectedBounds.minXYZ.y' selectedBounds.minXYZ.z);  						bottomPoints[3] = new Vector3(selectedBounds.maxXYZ.x' selectedBounds.maxXYZ.y' selectedBounds.minXYZ.z);    						for (int i = 0; i < 4; i++)  						{  							Vector2 testScreenPosition = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(bottomPoints[i]);  							if (testScreenPosition.x > screenPosition.x)  							{  								startLineSelectionPos = testScreenPosition;  								startLineGroundPos = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(bottomPoints[i] + new Vector3(0' 0' -bottomPoints[i].z));  								midLinePos = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(bottomPoints[i] + new Vector3(0' 0' -bottomPoints[i].z/2));  								screenPosition = testScreenPosition + new Vector2(HorizontalLineLength' 0);  							}  						}  						heightValueDisplayInfo.DisplaySizeInfo(drawEvent.graphics2D' midLinePos' selectedBounds.minXYZ.z);      						OriginRelativeParent = screenPosition;    						// draw the line that is on the ground  						double yGround = Math.Round(startLineGroundPos.y) + .5;  						drawEvent.graphics2D.Line(startLineGroundPos.x' yGround' startLineGroundPos.x + HorizontalLineLength - 5' yGround' RGBA_Bytes.Black);  						// and the line that is at the base of the selection  						double ySelection = Math.Round(startLineSelectionPos.y) + .5;  						drawEvent.graphics2D.Line(startLineSelectionPos.x' ySelection' startLineSelectionPos.x + HorizontalLineLength - 5' ySelection' RGBA_Bytes.Black);    						// draw the vertical line that shows the measurement  						Vector2 pointerBottom = new Vector2(startLineGroundPos.x + HorizontalLineLength / 2' yGround);  						Vector2 pointerTop = new Vector2(startLineSelectionPos.x + HorizontalLineLength / 2' ySelection);    						InteractionVolume.DrawMeasureLine(drawEvent.graphics2D' pointerBottom' pointerTop' RGBA_Bytes.Black' InteractionVolume.LineArrows.End);  					}  				}  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SnappingIndicators,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\Gui3D\SnapingIndicator.cs,SetPosition,The following statement contains a magic number: if (MeshViewerToDrawWith.HaveSelection)  			{  				// draw the hight from the bottom to the bed  				AxisAlignedBoundingBox selectedBounds = MeshViewerToDrawWith.GetBoundsForSelection();    				MeshSelectInfo meshSelectInfo = view3DWidget.CurrentSelectInfo;    				switch (meshSelectInfo.HitQuadrant)  				{  					case HitQuadrant.LB:  						{  							Vector3 cornerPoint = new Vector3(selectedBounds.minXYZ.x' selectedBounds.minXYZ.y' 0);  							double distBetweenPixelsWorldSpace = MeshViewerToDrawWith.TrackballTumbleWidget.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    							lines[0] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  							lines[1] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    							lines[2] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  							lines[3] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  						}  						break;    					case HitQuadrant.LT:  						{  							Vector3 cornerPoint = new Vector3(selectedBounds.minXYZ.x' selectedBounds.maxXYZ.y' 0);  							double distBetweenPixelsWorldSpace = MeshViewerToDrawWith.TrackballTumbleWidget.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    							lines[0] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  							lines[1] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    							lines[2] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  							lines[3] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  						}  						break;    					case HitQuadrant.RB:  						{  							Vector3 cornerPoint = new Vector3(selectedBounds.maxXYZ.x' selectedBounds.minXYZ.y' 0);  							double distBetweenPixelsWorldSpace = MeshViewerToDrawWith.TrackballTumbleWidget.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    							lines[0] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  							lines[1] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    							lines[2] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  							lines[3] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  						}  						break;    					case HitQuadrant.RT:  						{  							Vector3 cornerPoint = new Vector3(selectedBounds.maxXYZ.x' selectedBounds.maxXYZ.y' 0);  							double distBetweenPixelsWorldSpace = MeshViewerToDrawWith.TrackballTumbleWidget.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    							lines[0] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  							lines[1] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    							lines[2] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  							lines[3] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  						}  						break;  				}  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SnappingIndicators,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\Gui3D\SnapingIndicator.cs,SetPosition,The following statement contains a magic number: if (MeshViewerToDrawWith.HaveSelection)  			{  				// draw the hight from the bottom to the bed  				AxisAlignedBoundingBox selectedBounds = MeshViewerToDrawWith.GetBoundsForSelection();    				MeshSelectInfo meshSelectInfo = view3DWidget.CurrentSelectInfo;    				switch (meshSelectInfo.HitQuadrant)  				{  					case HitQuadrant.LB:  						{  							Vector3 cornerPoint = new Vector3(selectedBounds.minXYZ.x' selectedBounds.minXYZ.y' 0);  							double distBetweenPixelsWorldSpace = MeshViewerToDrawWith.TrackballTumbleWidget.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    							lines[0] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  							lines[1] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    							lines[2] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  							lines[3] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  						}  						break;    					case HitQuadrant.LT:  						{  							Vector3 cornerPoint = new Vector3(selectedBounds.minXYZ.x' selectedBounds.maxXYZ.y' 0);  							double distBetweenPixelsWorldSpace = MeshViewerToDrawWith.TrackballTumbleWidget.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    							lines[0] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  							lines[1] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    							lines[2] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  							lines[3] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  						}  						break;    					case HitQuadrant.RB:  						{  							Vector3 cornerPoint = new Vector3(selectedBounds.maxXYZ.x' selectedBounds.minXYZ.y' 0);  							double distBetweenPixelsWorldSpace = MeshViewerToDrawWith.TrackballTumbleWidget.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    							lines[0] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  							lines[1] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    							lines[2] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  							lines[3] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  						}  						break;    					case HitQuadrant.RT:  						{  							Vector3 cornerPoint = new Vector3(selectedBounds.maxXYZ.x' selectedBounds.maxXYZ.y' 0);  							double distBetweenPixelsWorldSpace = MeshViewerToDrawWith.TrackballTumbleWidget.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    							lines[0] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  							lines[1] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    							lines[2] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  							lines[3] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  						}  						break;  				}  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SnappingIndicators,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\Gui3D\SnapingIndicator.cs,SetPosition,The following statement contains a magic number: if (MeshViewerToDrawWith.HaveSelection)  			{  				// draw the hight from the bottom to the bed  				AxisAlignedBoundingBox selectedBounds = MeshViewerToDrawWith.GetBoundsForSelection();    				MeshSelectInfo meshSelectInfo = view3DWidget.CurrentSelectInfo;    				switch (meshSelectInfo.HitQuadrant)  				{  					case HitQuadrant.LB:  						{  							Vector3 cornerPoint = new Vector3(selectedBounds.minXYZ.x' selectedBounds.minXYZ.y' 0);  							double distBetweenPixelsWorldSpace = MeshViewerToDrawWith.TrackballTumbleWidget.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    							lines[0] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  							lines[1] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    							lines[2] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  							lines[3] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  						}  						break;    					case HitQuadrant.LT:  						{  							Vector3 cornerPoint = new Vector3(selectedBounds.minXYZ.x' selectedBounds.maxXYZ.y' 0);  							double distBetweenPixelsWorldSpace = MeshViewerToDrawWith.TrackballTumbleWidget.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    							lines[0] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  							lines[1] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    							lines[2] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  							lines[3] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  						}  						break;    					case HitQuadrant.RB:  						{  							Vector3 cornerPoint = new Vector3(selectedBounds.maxXYZ.x' selectedBounds.minXYZ.y' 0);  							double distBetweenPixelsWorldSpace = MeshViewerToDrawWith.TrackballTumbleWidget.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    							lines[0] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  							lines[1] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    							lines[2] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  							lines[3] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  						}  						break;    					case HitQuadrant.RT:  						{  							Vector3 cornerPoint = new Vector3(selectedBounds.maxXYZ.x' selectedBounds.maxXYZ.y' 0);  							double distBetweenPixelsWorldSpace = MeshViewerToDrawWith.TrackballTumbleWidget.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    							lines[0] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  							lines[1] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    							lines[2] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  							lines[3] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  						}  						break;  				}  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SnappingIndicators,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\Gui3D\SnapingIndicator.cs,SetPosition,The following statement contains a magic number: if (MeshViewerToDrawWith.HaveSelection)  			{  				// draw the hight from the bottom to the bed  				AxisAlignedBoundingBox selectedBounds = MeshViewerToDrawWith.GetBoundsForSelection();    				MeshSelectInfo meshSelectInfo = view3DWidget.CurrentSelectInfo;    				switch (meshSelectInfo.HitQuadrant)  				{  					case HitQuadrant.LB:  						{  							Vector3 cornerPoint = new Vector3(selectedBounds.minXYZ.x' selectedBounds.minXYZ.y' 0);  							double distBetweenPixelsWorldSpace = MeshViewerToDrawWith.TrackballTumbleWidget.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    							lines[0] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  							lines[1] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    							lines[2] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  							lines[3] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  						}  						break;    					case HitQuadrant.LT:  						{  							Vector3 cornerPoint = new Vector3(selectedBounds.minXYZ.x' selectedBounds.maxXYZ.y' 0);  							double distBetweenPixelsWorldSpace = MeshViewerToDrawWith.TrackballTumbleWidget.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    							lines[0] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  							lines[1] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    							lines[2] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  							lines[3] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  						}  						break;    					case HitQuadrant.RB:  						{  							Vector3 cornerPoint = new Vector3(selectedBounds.maxXYZ.x' selectedBounds.minXYZ.y' 0);  							double distBetweenPixelsWorldSpace = MeshViewerToDrawWith.TrackballTumbleWidget.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    							lines[0] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  							lines[1] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    							lines[2] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  							lines[3] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  						}  						break;    					case HitQuadrant.RT:  						{  							Vector3 cornerPoint = new Vector3(selectedBounds.maxXYZ.x' selectedBounds.maxXYZ.y' 0);  							double distBetweenPixelsWorldSpace = MeshViewerToDrawWith.TrackballTumbleWidget.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    							lines[0] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  							lines[1] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    							lines[2] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  							lines[3] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  						}  						break;  				}  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SnappingIndicators,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\Gui3D\SnapingIndicator.cs,SetPosition,The following statement contains a magic number: if (MeshViewerToDrawWith.HaveSelection)  			{  				// draw the hight from the bottom to the bed  				AxisAlignedBoundingBox selectedBounds = MeshViewerToDrawWith.GetBoundsForSelection();    				MeshSelectInfo meshSelectInfo = view3DWidget.CurrentSelectInfo;    				switch (meshSelectInfo.HitQuadrant)  				{  					case HitQuadrant.LB:  						{  							Vector3 cornerPoint = new Vector3(selectedBounds.minXYZ.x' selectedBounds.minXYZ.y' 0);  							double distBetweenPixelsWorldSpace = MeshViewerToDrawWith.TrackballTumbleWidget.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    							lines[0] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  							lines[1] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    							lines[2] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  							lines[3] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  						}  						break;    					case HitQuadrant.LT:  						{  							Vector3 cornerPoint = new Vector3(selectedBounds.minXYZ.x' selectedBounds.maxXYZ.y' 0);  							double distBetweenPixelsWorldSpace = MeshViewerToDrawWith.TrackballTumbleWidget.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    							lines[0] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  							lines[1] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    							lines[2] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  							lines[3] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  						}  						break;    					case HitQuadrant.RB:  						{  							Vector3 cornerPoint = new Vector3(selectedBounds.maxXYZ.x' selectedBounds.minXYZ.y' 0);  							double distBetweenPixelsWorldSpace = MeshViewerToDrawWith.TrackballTumbleWidget.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    							lines[0] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  							lines[1] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    							lines[2] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  							lines[3] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  						}  						break;    					case HitQuadrant.RT:  						{  							Vector3 cornerPoint = new Vector3(selectedBounds.maxXYZ.x' selectedBounds.maxXYZ.y' 0);  							double distBetweenPixelsWorldSpace = MeshViewerToDrawWith.TrackballTumbleWidget.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    							lines[0] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  							lines[1] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    							lines[2] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  							lines[3] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  						}  						break;  				}  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SnappingIndicators,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\Gui3D\SnapingIndicator.cs,SetPosition,The following statement contains a magic number: if (MeshViewerToDrawWith.HaveSelection)  			{  				// draw the hight from the bottom to the bed  				AxisAlignedBoundingBox selectedBounds = MeshViewerToDrawWith.GetBoundsForSelection();    				MeshSelectInfo meshSelectInfo = view3DWidget.CurrentSelectInfo;    				switch (meshSelectInfo.HitQuadrant)  				{  					case HitQuadrant.LB:  						{  							Vector3 cornerPoint = new Vector3(selectedBounds.minXYZ.x' selectedBounds.minXYZ.y' 0);  							double distBetweenPixelsWorldSpace = MeshViewerToDrawWith.TrackballTumbleWidget.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    							lines[0] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  							lines[1] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    							lines[2] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  							lines[3] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  						}  						break;    					case HitQuadrant.LT:  						{  							Vector3 cornerPoint = new Vector3(selectedBounds.minXYZ.x' selectedBounds.maxXYZ.y' 0);  							double distBetweenPixelsWorldSpace = MeshViewerToDrawWith.TrackballTumbleWidget.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    							lines[0] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  							lines[1] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    							lines[2] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  							lines[3] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  						}  						break;    					case HitQuadrant.RB:  						{  							Vector3 cornerPoint = new Vector3(selectedBounds.maxXYZ.x' selectedBounds.minXYZ.y' 0);  							double distBetweenPixelsWorldSpace = MeshViewerToDrawWith.TrackballTumbleWidget.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    							lines[0] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  							lines[1] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    							lines[2] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  							lines[3] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  						}  						break;    					case HitQuadrant.RT:  						{  							Vector3 cornerPoint = new Vector3(selectedBounds.maxXYZ.x' selectedBounds.maxXYZ.y' 0);  							double distBetweenPixelsWorldSpace = MeshViewerToDrawWith.TrackballTumbleWidget.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    							lines[0] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  							lines[1] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    							lines[2] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  							lines[3] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  						}  						break;  				}  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SnappingIndicators,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\Gui3D\SnapingIndicator.cs,SetPosition,The following statement contains a magic number: if (MeshViewerToDrawWith.HaveSelection)  			{  				// draw the hight from the bottom to the bed  				AxisAlignedBoundingBox selectedBounds = MeshViewerToDrawWith.GetBoundsForSelection();    				MeshSelectInfo meshSelectInfo = view3DWidget.CurrentSelectInfo;    				switch (meshSelectInfo.HitQuadrant)  				{  					case HitQuadrant.LB:  						{  							Vector3 cornerPoint = new Vector3(selectedBounds.minXYZ.x' selectedBounds.minXYZ.y' 0);  							double distBetweenPixelsWorldSpace = MeshViewerToDrawWith.TrackballTumbleWidget.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    							lines[0] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  							lines[1] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    							lines[2] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  							lines[3] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  						}  						break;    					case HitQuadrant.LT:  						{  							Vector3 cornerPoint = new Vector3(selectedBounds.minXYZ.x' selectedBounds.maxXYZ.y' 0);  							double distBetweenPixelsWorldSpace = MeshViewerToDrawWith.TrackballTumbleWidget.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    							lines[0] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  							lines[1] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    							lines[2] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  							lines[3] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  						}  						break;    					case HitQuadrant.RB:  						{  							Vector3 cornerPoint = new Vector3(selectedBounds.maxXYZ.x' selectedBounds.minXYZ.y' 0);  							double distBetweenPixelsWorldSpace = MeshViewerToDrawWith.TrackballTumbleWidget.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    							lines[0] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  							lines[1] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    							lines[2] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  							lines[3] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  						}  						break;    					case HitQuadrant.RT:  						{  							Vector3 cornerPoint = new Vector3(selectedBounds.maxXYZ.x' selectedBounds.maxXYZ.y' 0);  							double distBetweenPixelsWorldSpace = MeshViewerToDrawWith.TrackballTumbleWidget.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    							lines[0] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  							lines[1] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    							lines[2] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  							lines[3] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  						}  						break;  				}  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SnappingIndicators,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\Gui3D\SnapingIndicator.cs,SetPosition,The following statement contains a magic number: if (MeshViewerToDrawWith.HaveSelection)  			{  				// draw the hight from the bottom to the bed  				AxisAlignedBoundingBox selectedBounds = MeshViewerToDrawWith.GetBoundsForSelection();    				MeshSelectInfo meshSelectInfo = view3DWidget.CurrentSelectInfo;    				switch (meshSelectInfo.HitQuadrant)  				{  					case HitQuadrant.LB:  						{  							Vector3 cornerPoint = new Vector3(selectedBounds.minXYZ.x' selectedBounds.minXYZ.y' 0);  							double distBetweenPixelsWorldSpace = MeshViewerToDrawWith.TrackballTumbleWidget.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    							lines[0] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  							lines[1] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    							lines[2] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  							lines[3] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  						}  						break;    					case HitQuadrant.LT:  						{  							Vector3 cornerPoint = new Vector3(selectedBounds.minXYZ.x' selectedBounds.maxXYZ.y' 0);  							double distBetweenPixelsWorldSpace = MeshViewerToDrawWith.TrackballTumbleWidget.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    							lines[0] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  							lines[1] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    							lines[2] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  							lines[3] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  						}  						break;    					case HitQuadrant.RB:  						{  							Vector3 cornerPoint = new Vector3(selectedBounds.maxXYZ.x' selectedBounds.minXYZ.y' 0);  							double distBetweenPixelsWorldSpace = MeshViewerToDrawWith.TrackballTumbleWidget.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    							lines[0] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  							lines[1] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    							lines[2] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  							lines[3] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  						}  						break;    					case HitQuadrant.RT:  						{  							Vector3 cornerPoint = new Vector3(selectedBounds.maxXYZ.x' selectedBounds.maxXYZ.y' 0);  							double distBetweenPixelsWorldSpace = MeshViewerToDrawWith.TrackballTumbleWidget.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    							lines[0] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  							lines[1] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    							lines[2] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  							lines[3] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  						}  						break;  				}  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SnappingIndicators,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\Gui3D\SnapingIndicator.cs,MeshViewerToDrawWith_Draw,The following statement contains a magic number: if (MeshViewerToDrawWith.SelectedMeshGroup != null  				&& view3DWidget.meshViewerWidget.SnapGridDistance > 0  				&& view3DWidget.CurrentSelectInfo.DownOnPart)  			{  				if (drawEvent != null)  				{  					// draw the line that is on the ground  					drawEvent.graphics2D.Line(lines[0]' lines[1]' RGBA_Bytes.Red);  					drawEvent.graphics2D.Line(lines[2]' lines[3]' RGBA_Bytes.Red);  				}  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SnappingIndicators,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\Gui3D\SnapingIndicator.cs,MeshViewerToDrawWith_Draw,The following statement contains a magic number: if (MeshViewerToDrawWith.SelectedMeshGroup != null  				&& view3DWidget.meshViewerWidget.SnapGridDistance > 0  				&& view3DWidget.CurrentSelectInfo.DownOnPart)  			{  				if (drawEvent != null)  				{  					// draw the line that is on the ground  					drawEvent.graphics2D.Line(lines[0]' lines[1]' RGBA_Bytes.Red);  					drawEvent.graphics2D.Line(lines[2]' lines[3]' RGBA_Bytes.Red);  				}  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SelectionShadow,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\Gui3D\SelectionShadow.cs,SetPosition,The following statement contains a magic number: TotalTransform = Matrix4X4.CreateTranslation(new Vector3(boundsCenter.x' boundsCenter.y' 0.1));
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SelectionShadow,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\Gui3D\SelectionShadow.cs,DrawGlContent,The following statement contains a magic number: if (MeshViewerToDrawWith.SelectedMeshGroup != null)  			{  				// draw the bounds on the bed  				AxisAlignedBoundingBox selectedBounds = MeshViewerToDrawWith.GetBoundsForSelection();    				Mesh bottomBounds = PlatonicSolids.CreateCube(selectedBounds.XSize' selectedBounds.YSize' .1);  				RenderMeshToGl.Render(bottomBounds' new RGBA_Bytes(22' 80' 220' 30)' TotalTransform' RenderTypes.Shaded);  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SelectionShadow,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\Gui3D\SelectionShadow.cs,DrawGlContent,The following statement contains a magic number: if (MeshViewerToDrawWith.SelectedMeshGroup != null)  			{  				// draw the bounds on the bed  				AxisAlignedBoundingBox selectedBounds = MeshViewerToDrawWith.GetBoundsForSelection();    				Mesh bottomBounds = PlatonicSolids.CreateCube(selectedBounds.XSize' selectedBounds.YSize' .1);  				RenderMeshToGl.Render(bottomBounds' new RGBA_Bytes(22' 80' 220' 30)' TotalTransform' RenderTypes.Shaded);  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SelectionShadow,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\Gui3D\SelectionShadow.cs,DrawGlContent,The following statement contains a magic number: if (MeshViewerToDrawWith.SelectedMeshGroup != null)  			{  				// draw the bounds on the bed  				AxisAlignedBoundingBox selectedBounds = MeshViewerToDrawWith.GetBoundsForSelection();    				Mesh bottomBounds = PlatonicSolids.CreateCube(selectedBounds.XSize' selectedBounds.YSize' .1);  				RenderMeshToGl.Render(bottomBounds' new RGBA_Bytes(22' 80' 220' 30)' TotalTransform' RenderTypes.Shaded);  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SelectionShadow,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\Gui3D\SelectionShadow.cs,DrawGlContent,The following statement contains a magic number: if (MeshViewerToDrawWith.SelectedMeshGroup != null)  			{  				// draw the bounds on the bed  				AxisAlignedBoundingBox selectedBounds = MeshViewerToDrawWith.GetBoundsForSelection();    				Mesh bottomBounds = PlatonicSolids.CreateCube(selectedBounds.XSize' selectedBounds.YSize' .1);  				RenderMeshToGl.Render(bottomBounds' new RGBA_Bytes(22' 80' 220' 30)' TotalTransform' RenderTypes.Shaded);  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SelectionShadow,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\Gui3D\SelectionShadow.cs,DrawGlContent,The following statement contains a magic number: if (MeshViewerToDrawWith.SelectedMeshGroup != null)  			{  				// draw the bounds on the bed  				AxisAlignedBoundingBox selectedBounds = MeshViewerToDrawWith.GetBoundsForSelection();    				Mesh bottomBounds = PlatonicSolids.CreateCube(selectedBounds.XSize' selectedBounds.YSize' .1);  				RenderMeshToGl.Render(bottomBounds' new RGBA_Bytes(22' 80' 220' 30)' TotalTransform' RenderTypes.Shaded);  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,UpArrow3D,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\Gui3D\UpArrow3D.cs,UpArrow3D,The following statement contains a magic number: if (StaticData.Instance.FileExists(arrowFile))  			{  				using (Stream staticDataStream = StaticData.Instance.OpenSteam(arrowFile))  				{  					using (MemoryStream arrowStream = new MemoryStream())  					{  						staticDataStream.CopyTo(arrowStream' 1 << 16);  						List<MeshGroup> loadedMeshGroups = MeshFileIo.Load(arrowStream' Path.GetExtension(arrowFile));  						upArrow = loadedMeshGroups[0].Meshes[0];    						CollisionVolume = PlatingHelper.CreateTraceDataForMesh(upArrow);  						//CollisionVolume = new CylinderShape(arrowBounds.XSize / 2' arrowBounds.ZSize' new SolidMaterial(RGBA_Floats.Red' .5' 0' .4));  						//CollisionVolume = new CylinderShape(arrowBounds.XSize / 2 * 4' arrowBounds.ZSize * 4' new SolidMaterial(RGBA_Floats.Red' .5' 0' .4));  					}  				}  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,UpArrow3D,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\Gui3D\UpArrow3D.cs,SetPosition,The following statement contains a magic number: Matrix4X4 arrowTransform = Matrix4X4.CreateTranslation(new Vector3(centerTop.x' centerTop.y' centerTop.z + 20 * distBetweenPixelsWorldSpace));
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,AlignSelected,The following statement contains a magic number: for (int meshGroupToMoveIndex = 0; meshGroupToMoveIndex < asyncMeshGroups.Count; meshGroupToMoveIndex++)  			{  				MeshGroup meshGroupToMove = asyncMeshGroups[meshGroupToMoveIndex];  				if (meshGroupToMove != asyncMeshGroups[SelectedMeshGroupIndex])  				{  					AxisAlignedBoundingBox groupToMoveOriginalBounds = meshGroupToMove.GetAxisAlignedBoundingBox();  					Vector3 groupToMoveOriginalCenter = groupToMoveOriginalBounds.Center;  					AxisAlignedBoundingBox groupToMoveBounds = meshGroupToMove.GetAxisAlignedBoundingBox(asyncMeshGroupTransforms[meshGroupToMoveIndex]);  					Vector3 groupToMoveCenter = groupToMoveBounds.Center;    					Vector3 originalCoordinatesDelta = groupToMoveOriginalCenter - selectedOriginalCenter;  					Vector3 currentCoordinatesDelta = groupToMoveCenter - selctedCurrentCenter;    					Vector3 deltaRequired = originalCoordinatesDelta - currentCoordinatesDelta;    					if (deltaRequired.Length > .0001)  					{  						asyncMeshGroupTransforms[meshGroupToMoveIndex] *= Matrix4X4.CreateTranslation(deltaRequired);  						PartHasBeenChanged();  					}  				}  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,CopyGroup,The following statement contains a magic number: ReportProgressChanged(.95' ""' out continueProcessing2);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,GroupSelected,The following statement contains a magic number: for (int i = 0; i < asyncMeshGroups.Count; i++)  			{  				asyncMeshGroups[i].Transform(asyncMeshGroupTransforms[i]);    				bool continueProcessing;  				ReportProgressChanged((i + 1) * .4 / asyncMeshGroups.Count' ""' out continueProcessing);  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,UngroupSelected,The following statement contains a magic number: if (asyncMeshGroups[indexBeingReplaced].Meshes.Count > 1)  			{  				foreach (Mesh mesh in asyncMeshGroups[indexBeingReplaced].Meshes)  				{  					discreetMeshes.Add(mesh);  				}  			}  			else // actually try and cut up the mesh into separate parts  			{  				discreetMeshes = CreateDiscreteMeshes.SplitConnectedIntoMeshes(asyncMeshGroups[indexBeingReplaced]' (double progress0To1' string processingState' out bool continueProcessing) =>  				{  					ReportProgressChanged(progress0To1 * .5' processingState' out continueProcessing);  				});  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,UngroupSelected,The following statement contains a magic number: for (int discreetMeshIndex = 0; discreetMeshIndex < discreetMeshes.Count; discreetMeshIndex++)  			{  				PlatingMeshGroupData newInfo = new PlatingMeshGroupData();  				asyncPlatingDatas.Add(newInfo);  				asyncMeshGroups.Add(new MeshGroup(discreetMeshes[discreetMeshIndex]));  				int addedMeshIndex = asyncMeshGroups.Count - 1;  				MeshGroup addedMeshGroup = asyncMeshGroups[addedMeshIndex];    				Matrix4X4 transform = Matrix4X4.Identity;  				asyncMeshGroupTransforms.Add(transform);    				//PlatingHelper.PlaceMeshGroupOnBed(asyncMeshGroups' asyncMeshGroupTransforms' addedMeshIndex' false);    				// and create selection info  				PlatingHelper.CreateITraceableForMeshGroup(asyncPlatingDatas' asyncMeshGroups' addedMeshIndex' (double progress0To1' string processingState' out bool continueProcessing) =>  				{  					ReportProgressChanged(.5 + progress0To1 * .5 * currentRatioDone' processingState' out continueProcessing);  				});  				currentRatioDone += ratioPerDiscreetMesh;  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,UngroupSelected,The following statement contains a magic number: for (int discreetMeshIndex = 0; discreetMeshIndex < discreetMeshes.Count; discreetMeshIndex++)  			{  				PlatingMeshGroupData newInfo = new PlatingMeshGroupData();  				asyncPlatingDatas.Add(newInfo);  				asyncMeshGroups.Add(new MeshGroup(discreetMeshes[discreetMeshIndex]));  				int addedMeshIndex = asyncMeshGroups.Count - 1;  				MeshGroup addedMeshGroup = asyncMeshGroups[addedMeshIndex];    				Matrix4X4 transform = Matrix4X4.Identity;  				asyncMeshGroupTransforms.Add(transform);    				//PlatingHelper.PlaceMeshGroupOnBed(asyncMeshGroups' asyncMeshGroupTransforms' addedMeshIndex' false);    				// and create selection info  				PlatingHelper.CreateITraceableForMeshGroup(asyncPlatingDatas' asyncMeshGroups' addedMeshIndex' (double progress0To1' string processingState' out bool continueProcessing) =>  				{  					ReportProgressChanged(.5 + progress0To1 * .5 * currentRatioDone' processingState' out continueProcessing);  				});  				currentRatioDone += ratioPerDiscreetMesh;  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,View3DWidget,The following statement contains a magic number: buttonBottomPanel.Padding = new BorderDouble(3' 3);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,View3DWidget,The following statement contains a magic number: buttonBottomPanel.Padding = new BorderDouble(3' 3);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,View3DWidget,The following statement contains a magic number: {  				FlowLayoutWidget editToolBar = new FlowLayoutWidget();    				string progressFindPartsLabel = "Entering Editor".Localize();  				string progressFindPartsLabelFull = "{0}:".FormatWith(progressFindPartsLabel);    				processingProgressControl = new ProgressControl(progressFindPartsLabelFull' ActiveTheme.Instance.PrimaryTextColor' ActiveTheme.Instance.PrimaryAccentColor);  				processingProgressControl.VAnchor = Agg.UI.VAnchor.ParentCenter;  				editToolBar.AddChild(processingProgressControl);  				editToolBar.VAnchor |= Agg.UI.VAnchor.ParentCenter;  				processingProgressControl.Visible = false;    				// If the window is embedded (in the center panel) and there is no item loaded then don't show the add button  				enterEditButtonsContainer = new FlowLayoutWidget();  				{  					Button addButton = textImageButtonFactory.Generate("Insert".Localize()' "icon_insert_32x32.png");  					addButton.ToolTipText = "Insert an .stl' .amf or .zip file".Localize();  					addButton.Margin = new BorderDouble(right: 0);  					enterEditButtonsContainer.AddChild(addButton);  					addButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							DoAddFileAfterCreatingEditData = true;  							EnterEditAndCreateSelectionData();  						});  					};  					if (printItemWrapper != null  						&& printItemWrapper.PrintItem.ReadOnly)  					{  						addButton.Enabled = false;  					}    					ImageBuffer normalImage = StaticData.Instance.LoadIcon("icon_edit.png"' 14' 14);    					Button enterEdittingButton = textImageButtonFactory.Generate("Edit".Localize()' normalImage);  					enterEdittingButton.Name = "3D View Edit";  					enterEdittingButton.Margin = new BorderDouble(right: 4);  					enterEdittingButton.Click += (sender' e) =>  					{  						EnterEditAndCreateSelectionData();  					};    					if (printItemWrapper != null  						&& printItemWrapper.PrintItem.ReadOnly)  					{  						enterEdittingButton.Enabled = false;  					}    					Button exportButton = textImageButtonFactory.Generate("Export".Localize() + "...");    					exportButton.Margin = new BorderDouble(right: 10);  					exportButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							OpenExportWindow();  						});  					};    					enterEditButtonsContainer.AddChild(enterEdittingButton);  					enterEditButtonsContainer.AddChild(exportButton);  				}  				editToolBar.AddChild(enterEditButtonsContainer);    				doEdittingButtonsContainer = new FlowLayoutWidget();  				doEdittingButtonsContainer.Visible = false;    				{  					Button addButton = textImageButtonFactory.Generate("Insert".Localize()' "icon_insert_32x32.png");  					addButton.Margin = new BorderDouble(right: 10);  					doEdittingButtonsContainer.AddChild(addButton);  					addButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							FileDialog.OpenFileDialog(  								new OpenFileDialogParams(ApplicationSettings.OpenDesignFileParams' multiSelect: true)'  								(openParams) =>  								{  									LoadAndAddPartsToPlate(openParams.FileNames);  								});  						});  					};    					GuiWidget separator = new GuiWidget(1' 2);  					separator.BackgroundColor = ActiveTheme.Instance.PrimaryTextColor;  					separator.Margin = new BorderDouble(4' 2);  					separator.VAnchor = VAnchor.ParentBottomTop;  					doEdittingButtonsContainer.AddChild(separator);    					Button ungroupButton = textImageButtonFactory.Generate("Ungroup".Localize());  					ungroupButton.Name = "3D View Ungroup";  					doEdittingButtonsContainer.AddChild(ungroupButton);  					ungroupButton.Click += (sender' e) =>  					{  						UngroupSelectedMeshGroup();  						UndoBuffer.ClearHistory();  					};    					Button groupButton = textImageButtonFactory.Generate("Group".Localize());  					groupButton.Name = "3D View Group";  					doEdittingButtonsContainer.AddChild(groupButton);  					groupButton.Click += (sender' e) =>  					{  						GroupSelectedMeshs();  						UndoBuffer.ClearHistory();  					};    					Button alignButton = textImageButtonFactory.Generate("Align".Localize());  					doEdittingButtonsContainer.AddChild(alignButton);  					alignButton.Click += (sender' e) =>  					{  						AlignToSelectedMeshGroup();  						UndoBuffer.ClearHistory();  					};    					Button arrangeButton = textImageButtonFactory.Generate("Arrange".Localize());  					doEdittingButtonsContainer.AddChild(arrangeButton);  					arrangeButton.Click += (sender' e) =>  					{  						AutoArrangePartsInBackground();  					};    					GuiWidget separatorTwo = new GuiWidget(1' 2);  					separatorTwo.BackgroundColor = ActiveTheme.Instance.PrimaryTextColor;  					separatorTwo.Margin = new BorderDouble(4' 2);  					separatorTwo.VAnchor = VAnchor.ParentBottomTop;  					doEdittingButtonsContainer.AddChild(separatorTwo);    					Button copyButton = textImageButtonFactory.Generate("Copy".Localize());  					copyButton.Name = "3D View Copy";  					doEdittingButtonsContainer.AddChild(copyButton);  					copyButton.Click += (sender' e) =>  					{  						MakeCopyOfGroup();  					};    					Button deleteButton = textImageButtonFactory.Generate("Remove".Localize());  					deleteButton.Name = "3D View Remove";  					doEdittingButtonsContainer.AddChild(deleteButton);  					deleteButton.Click += (sender' e) =>  					{  						DeleteSelectedMesh();  					};    					GuiWidget separatorThree = new GuiWidget(1' 2);  					separatorThree.BackgroundColor = ActiveTheme.Instance.PrimaryTextColor;  					separatorThree.Margin = new BorderDouble(4' 1);  					separatorThree.VAnchor = VAnchor.ParentBottomTop;  					doEdittingButtonsContainer.AddChild(separatorThree);    					Button cancelEditModeButton = textImageButtonFactory.Generate("Cancel".Localize()' centerText: true);  					cancelEditModeButton.Name = "3D View Cancel";  					cancelEditModeButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							if (saveButtons.Visible)  							{  								StyledMessageBox.ShowMessageBox(ExitEditingAndSaveIfRequired' "Would you like to save your changes before exiting the editor?".Localize()' "Save Changes".Localize()' StyledMessageBox.MessageType.YES_NO' "Save Changed".Localize()' "Discard Changes".Localize());  							}  							else  							{  								if (partHasBeenEdited)  								{  									ExitEditingAndSaveIfRequired(false);  								}  								else  								{  									SwitchStateToNotEditing();  								}  							}  						});  					};    					doEdittingButtonsContainer.AddChild(cancelEditModeButton);    					// put in the save button  					AddSaveAndSaveAs(doEdittingButtonsContainer);  				}    				editToolBar.AddChild(doEdittingButtonsContainer);  				buttonBottomPanel.AddChild(editToolBar);  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,View3DWidget,The following statement contains a magic number: {  				FlowLayoutWidget editToolBar = new FlowLayoutWidget();    				string progressFindPartsLabel = "Entering Editor".Localize();  				string progressFindPartsLabelFull = "{0}:".FormatWith(progressFindPartsLabel);    				processingProgressControl = new ProgressControl(progressFindPartsLabelFull' ActiveTheme.Instance.PrimaryTextColor' ActiveTheme.Instance.PrimaryAccentColor);  				processingProgressControl.VAnchor = Agg.UI.VAnchor.ParentCenter;  				editToolBar.AddChild(processingProgressControl);  				editToolBar.VAnchor |= Agg.UI.VAnchor.ParentCenter;  				processingProgressControl.Visible = false;    				// If the window is embedded (in the center panel) and there is no item loaded then don't show the add button  				enterEditButtonsContainer = new FlowLayoutWidget();  				{  					Button addButton = textImageButtonFactory.Generate("Insert".Localize()' "icon_insert_32x32.png");  					addButton.ToolTipText = "Insert an .stl' .amf or .zip file".Localize();  					addButton.Margin = new BorderDouble(right: 0);  					enterEditButtonsContainer.AddChild(addButton);  					addButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							DoAddFileAfterCreatingEditData = true;  							EnterEditAndCreateSelectionData();  						});  					};  					if (printItemWrapper != null  						&& printItemWrapper.PrintItem.ReadOnly)  					{  						addButton.Enabled = false;  					}    					ImageBuffer normalImage = StaticData.Instance.LoadIcon("icon_edit.png"' 14' 14);    					Button enterEdittingButton = textImageButtonFactory.Generate("Edit".Localize()' normalImage);  					enterEdittingButton.Name = "3D View Edit";  					enterEdittingButton.Margin = new BorderDouble(right: 4);  					enterEdittingButton.Click += (sender' e) =>  					{  						EnterEditAndCreateSelectionData();  					};    					if (printItemWrapper != null  						&& printItemWrapper.PrintItem.ReadOnly)  					{  						enterEdittingButton.Enabled = false;  					}    					Button exportButton = textImageButtonFactory.Generate("Export".Localize() + "...");    					exportButton.Margin = new BorderDouble(right: 10);  					exportButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							OpenExportWindow();  						});  					};    					enterEditButtonsContainer.AddChild(enterEdittingButton);  					enterEditButtonsContainer.AddChild(exportButton);  				}  				editToolBar.AddChild(enterEditButtonsContainer);    				doEdittingButtonsContainer = new FlowLayoutWidget();  				doEdittingButtonsContainer.Visible = false;    				{  					Button addButton = textImageButtonFactory.Generate("Insert".Localize()' "icon_insert_32x32.png");  					addButton.Margin = new BorderDouble(right: 10);  					doEdittingButtonsContainer.AddChild(addButton);  					addButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							FileDialog.OpenFileDialog(  								new OpenFileDialogParams(ApplicationSettings.OpenDesignFileParams' multiSelect: true)'  								(openParams) =>  								{  									LoadAndAddPartsToPlate(openParams.FileNames);  								});  						});  					};    					GuiWidget separator = new GuiWidget(1' 2);  					separator.BackgroundColor = ActiveTheme.Instance.PrimaryTextColor;  					separator.Margin = new BorderDouble(4' 2);  					separator.VAnchor = VAnchor.ParentBottomTop;  					doEdittingButtonsContainer.AddChild(separator);    					Button ungroupButton = textImageButtonFactory.Generate("Ungroup".Localize());  					ungroupButton.Name = "3D View Ungroup";  					doEdittingButtonsContainer.AddChild(ungroupButton);  					ungroupButton.Click += (sender' e) =>  					{  						UngroupSelectedMeshGroup();  						UndoBuffer.ClearHistory();  					};    					Button groupButton = textImageButtonFactory.Generate("Group".Localize());  					groupButton.Name = "3D View Group";  					doEdittingButtonsContainer.AddChild(groupButton);  					groupButton.Click += (sender' e) =>  					{  						GroupSelectedMeshs();  						UndoBuffer.ClearHistory();  					};    					Button alignButton = textImageButtonFactory.Generate("Align".Localize());  					doEdittingButtonsContainer.AddChild(alignButton);  					alignButton.Click += (sender' e) =>  					{  						AlignToSelectedMeshGroup();  						UndoBuffer.ClearHistory();  					};    					Button arrangeButton = textImageButtonFactory.Generate("Arrange".Localize());  					doEdittingButtonsContainer.AddChild(arrangeButton);  					arrangeButton.Click += (sender' e) =>  					{  						AutoArrangePartsInBackground();  					};    					GuiWidget separatorTwo = new GuiWidget(1' 2);  					separatorTwo.BackgroundColor = ActiveTheme.Instance.PrimaryTextColor;  					separatorTwo.Margin = new BorderDouble(4' 2);  					separatorTwo.VAnchor = VAnchor.ParentBottomTop;  					doEdittingButtonsContainer.AddChild(separatorTwo);    					Button copyButton = textImageButtonFactory.Generate("Copy".Localize());  					copyButton.Name = "3D View Copy";  					doEdittingButtonsContainer.AddChild(copyButton);  					copyButton.Click += (sender' e) =>  					{  						MakeCopyOfGroup();  					};    					Button deleteButton = textImageButtonFactory.Generate("Remove".Localize());  					deleteButton.Name = "3D View Remove";  					doEdittingButtonsContainer.AddChild(deleteButton);  					deleteButton.Click += (sender' e) =>  					{  						DeleteSelectedMesh();  					};    					GuiWidget separatorThree = new GuiWidget(1' 2);  					separatorThree.BackgroundColor = ActiveTheme.Instance.PrimaryTextColor;  					separatorThree.Margin = new BorderDouble(4' 1);  					separatorThree.VAnchor = VAnchor.ParentBottomTop;  					doEdittingButtonsContainer.AddChild(separatorThree);    					Button cancelEditModeButton = textImageButtonFactory.Generate("Cancel".Localize()' centerText: true);  					cancelEditModeButton.Name = "3D View Cancel";  					cancelEditModeButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							if (saveButtons.Visible)  							{  								StyledMessageBox.ShowMessageBox(ExitEditingAndSaveIfRequired' "Would you like to save your changes before exiting the editor?".Localize()' "Save Changes".Localize()' StyledMessageBox.MessageType.YES_NO' "Save Changed".Localize()' "Discard Changes".Localize());  							}  							else  							{  								if (partHasBeenEdited)  								{  									ExitEditingAndSaveIfRequired(false);  								}  								else  								{  									SwitchStateToNotEditing();  								}  							}  						});  					};    					doEdittingButtonsContainer.AddChild(cancelEditModeButton);    					// put in the save button  					AddSaveAndSaveAs(doEdittingButtonsContainer);  				}    				editToolBar.AddChild(doEdittingButtonsContainer);  				buttonBottomPanel.AddChild(editToolBar);  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,View3DWidget,The following statement contains a magic number: {  				FlowLayoutWidget editToolBar = new FlowLayoutWidget();    				string progressFindPartsLabel = "Entering Editor".Localize();  				string progressFindPartsLabelFull = "{0}:".FormatWith(progressFindPartsLabel);    				processingProgressControl = new ProgressControl(progressFindPartsLabelFull' ActiveTheme.Instance.PrimaryTextColor' ActiveTheme.Instance.PrimaryAccentColor);  				processingProgressControl.VAnchor = Agg.UI.VAnchor.ParentCenter;  				editToolBar.AddChild(processingProgressControl);  				editToolBar.VAnchor |= Agg.UI.VAnchor.ParentCenter;  				processingProgressControl.Visible = false;    				// If the window is embedded (in the center panel) and there is no item loaded then don't show the add button  				enterEditButtonsContainer = new FlowLayoutWidget();  				{  					Button addButton = textImageButtonFactory.Generate("Insert".Localize()' "icon_insert_32x32.png");  					addButton.ToolTipText = "Insert an .stl' .amf or .zip file".Localize();  					addButton.Margin = new BorderDouble(right: 0);  					enterEditButtonsContainer.AddChild(addButton);  					addButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							DoAddFileAfterCreatingEditData = true;  							EnterEditAndCreateSelectionData();  						});  					};  					if (printItemWrapper != null  						&& printItemWrapper.PrintItem.ReadOnly)  					{  						addButton.Enabled = false;  					}    					ImageBuffer normalImage = StaticData.Instance.LoadIcon("icon_edit.png"' 14' 14);    					Button enterEdittingButton = textImageButtonFactory.Generate("Edit".Localize()' normalImage);  					enterEdittingButton.Name = "3D View Edit";  					enterEdittingButton.Margin = new BorderDouble(right: 4);  					enterEdittingButton.Click += (sender' e) =>  					{  						EnterEditAndCreateSelectionData();  					};    					if (printItemWrapper != null  						&& printItemWrapper.PrintItem.ReadOnly)  					{  						enterEdittingButton.Enabled = false;  					}    					Button exportButton = textImageButtonFactory.Generate("Export".Localize() + "...");    					exportButton.Margin = new BorderDouble(right: 10);  					exportButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							OpenExportWindow();  						});  					};    					enterEditButtonsContainer.AddChild(enterEdittingButton);  					enterEditButtonsContainer.AddChild(exportButton);  				}  				editToolBar.AddChild(enterEditButtonsContainer);    				doEdittingButtonsContainer = new FlowLayoutWidget();  				doEdittingButtonsContainer.Visible = false;    				{  					Button addButton = textImageButtonFactory.Generate("Insert".Localize()' "icon_insert_32x32.png");  					addButton.Margin = new BorderDouble(right: 10);  					doEdittingButtonsContainer.AddChild(addButton);  					addButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							FileDialog.OpenFileDialog(  								new OpenFileDialogParams(ApplicationSettings.OpenDesignFileParams' multiSelect: true)'  								(openParams) =>  								{  									LoadAndAddPartsToPlate(openParams.FileNames);  								});  						});  					};    					GuiWidget separator = new GuiWidget(1' 2);  					separator.BackgroundColor = ActiveTheme.Instance.PrimaryTextColor;  					separator.Margin = new BorderDouble(4' 2);  					separator.VAnchor = VAnchor.ParentBottomTop;  					doEdittingButtonsContainer.AddChild(separator);    					Button ungroupButton = textImageButtonFactory.Generate("Ungroup".Localize());  					ungroupButton.Name = "3D View Ungroup";  					doEdittingButtonsContainer.AddChild(ungroupButton);  					ungroupButton.Click += (sender' e) =>  					{  						UngroupSelectedMeshGroup();  						UndoBuffer.ClearHistory();  					};    					Button groupButton = textImageButtonFactory.Generate("Group".Localize());  					groupButton.Name = "3D View Group";  					doEdittingButtonsContainer.AddChild(groupButton);  					groupButton.Click += (sender' e) =>  					{  						GroupSelectedMeshs();  						UndoBuffer.ClearHistory();  					};    					Button alignButton = textImageButtonFactory.Generate("Align".Localize());  					doEdittingButtonsContainer.AddChild(alignButton);  					alignButton.Click += (sender' e) =>  					{  						AlignToSelectedMeshGroup();  						UndoBuffer.ClearHistory();  					};    					Button arrangeButton = textImageButtonFactory.Generate("Arrange".Localize());  					doEdittingButtonsContainer.AddChild(arrangeButton);  					arrangeButton.Click += (sender' e) =>  					{  						AutoArrangePartsInBackground();  					};    					GuiWidget separatorTwo = new GuiWidget(1' 2);  					separatorTwo.BackgroundColor = ActiveTheme.Instance.PrimaryTextColor;  					separatorTwo.Margin = new BorderDouble(4' 2);  					separatorTwo.VAnchor = VAnchor.ParentBottomTop;  					doEdittingButtonsContainer.AddChild(separatorTwo);    					Button copyButton = textImageButtonFactory.Generate("Copy".Localize());  					copyButton.Name = "3D View Copy";  					doEdittingButtonsContainer.AddChild(copyButton);  					copyButton.Click += (sender' e) =>  					{  						MakeCopyOfGroup();  					};    					Button deleteButton = textImageButtonFactory.Generate("Remove".Localize());  					deleteButton.Name = "3D View Remove";  					doEdittingButtonsContainer.AddChild(deleteButton);  					deleteButton.Click += (sender' e) =>  					{  						DeleteSelectedMesh();  					};    					GuiWidget separatorThree = new GuiWidget(1' 2);  					separatorThree.BackgroundColor = ActiveTheme.Instance.PrimaryTextColor;  					separatorThree.Margin = new BorderDouble(4' 1);  					separatorThree.VAnchor = VAnchor.ParentBottomTop;  					doEdittingButtonsContainer.AddChild(separatorThree);    					Button cancelEditModeButton = textImageButtonFactory.Generate("Cancel".Localize()' centerText: true);  					cancelEditModeButton.Name = "3D View Cancel";  					cancelEditModeButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							if (saveButtons.Visible)  							{  								StyledMessageBox.ShowMessageBox(ExitEditingAndSaveIfRequired' "Would you like to save your changes before exiting the editor?".Localize()' "Save Changes".Localize()' StyledMessageBox.MessageType.YES_NO' "Save Changed".Localize()' "Discard Changes".Localize());  							}  							else  							{  								if (partHasBeenEdited)  								{  									ExitEditingAndSaveIfRequired(false);  								}  								else  								{  									SwitchStateToNotEditing();  								}  							}  						});  					};    					doEdittingButtonsContainer.AddChild(cancelEditModeButton);    					// put in the save button  					AddSaveAndSaveAs(doEdittingButtonsContainer);  				}    				editToolBar.AddChild(doEdittingButtonsContainer);  				buttonBottomPanel.AddChild(editToolBar);  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,View3DWidget,The following statement contains a magic number: {  				FlowLayoutWidget editToolBar = new FlowLayoutWidget();    				string progressFindPartsLabel = "Entering Editor".Localize();  				string progressFindPartsLabelFull = "{0}:".FormatWith(progressFindPartsLabel);    				processingProgressControl = new ProgressControl(progressFindPartsLabelFull' ActiveTheme.Instance.PrimaryTextColor' ActiveTheme.Instance.PrimaryAccentColor);  				processingProgressControl.VAnchor = Agg.UI.VAnchor.ParentCenter;  				editToolBar.AddChild(processingProgressControl);  				editToolBar.VAnchor |= Agg.UI.VAnchor.ParentCenter;  				processingProgressControl.Visible = false;    				// If the window is embedded (in the center panel) and there is no item loaded then don't show the add button  				enterEditButtonsContainer = new FlowLayoutWidget();  				{  					Button addButton = textImageButtonFactory.Generate("Insert".Localize()' "icon_insert_32x32.png");  					addButton.ToolTipText = "Insert an .stl' .amf or .zip file".Localize();  					addButton.Margin = new BorderDouble(right: 0);  					enterEditButtonsContainer.AddChild(addButton);  					addButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							DoAddFileAfterCreatingEditData = true;  							EnterEditAndCreateSelectionData();  						});  					};  					if (printItemWrapper != null  						&& printItemWrapper.PrintItem.ReadOnly)  					{  						addButton.Enabled = false;  					}    					ImageBuffer normalImage = StaticData.Instance.LoadIcon("icon_edit.png"' 14' 14);    					Button enterEdittingButton = textImageButtonFactory.Generate("Edit".Localize()' normalImage);  					enterEdittingButton.Name = "3D View Edit";  					enterEdittingButton.Margin = new BorderDouble(right: 4);  					enterEdittingButton.Click += (sender' e) =>  					{  						EnterEditAndCreateSelectionData();  					};    					if (printItemWrapper != null  						&& printItemWrapper.PrintItem.ReadOnly)  					{  						enterEdittingButton.Enabled = false;  					}    					Button exportButton = textImageButtonFactory.Generate("Export".Localize() + "...");    					exportButton.Margin = new BorderDouble(right: 10);  					exportButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							OpenExportWindow();  						});  					};    					enterEditButtonsContainer.AddChild(enterEdittingButton);  					enterEditButtonsContainer.AddChild(exportButton);  				}  				editToolBar.AddChild(enterEditButtonsContainer);    				doEdittingButtonsContainer = new FlowLayoutWidget();  				doEdittingButtonsContainer.Visible = false;    				{  					Button addButton = textImageButtonFactory.Generate("Insert".Localize()' "icon_insert_32x32.png");  					addButton.Margin = new BorderDouble(right: 10);  					doEdittingButtonsContainer.AddChild(addButton);  					addButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							FileDialog.OpenFileDialog(  								new OpenFileDialogParams(ApplicationSettings.OpenDesignFileParams' multiSelect: true)'  								(openParams) =>  								{  									LoadAndAddPartsToPlate(openParams.FileNames);  								});  						});  					};    					GuiWidget separator = new GuiWidget(1' 2);  					separator.BackgroundColor = ActiveTheme.Instance.PrimaryTextColor;  					separator.Margin = new BorderDouble(4' 2);  					separator.VAnchor = VAnchor.ParentBottomTop;  					doEdittingButtonsContainer.AddChild(separator);    					Button ungroupButton = textImageButtonFactory.Generate("Ungroup".Localize());  					ungroupButton.Name = "3D View Ungroup";  					doEdittingButtonsContainer.AddChild(ungroupButton);  					ungroupButton.Click += (sender' e) =>  					{  						UngroupSelectedMeshGroup();  						UndoBuffer.ClearHistory();  					};    					Button groupButton = textImageButtonFactory.Generate("Group".Localize());  					groupButton.Name = "3D View Group";  					doEdittingButtonsContainer.AddChild(groupButton);  					groupButton.Click += (sender' e) =>  					{  						GroupSelectedMeshs();  						UndoBuffer.ClearHistory();  					};    					Button alignButton = textImageButtonFactory.Generate("Align".Localize());  					doEdittingButtonsContainer.AddChild(alignButton);  					alignButton.Click += (sender' e) =>  					{  						AlignToSelectedMeshGroup();  						UndoBuffer.ClearHistory();  					};    					Button arrangeButton = textImageButtonFactory.Generate("Arrange".Localize());  					doEdittingButtonsContainer.AddChild(arrangeButton);  					arrangeButton.Click += (sender' e) =>  					{  						AutoArrangePartsInBackground();  					};    					GuiWidget separatorTwo = new GuiWidget(1' 2);  					separatorTwo.BackgroundColor = ActiveTheme.Instance.PrimaryTextColor;  					separatorTwo.Margin = new BorderDouble(4' 2);  					separatorTwo.VAnchor = VAnchor.ParentBottomTop;  					doEdittingButtonsContainer.AddChild(separatorTwo);    					Button copyButton = textImageButtonFactory.Generate("Copy".Localize());  					copyButton.Name = "3D View Copy";  					doEdittingButtonsContainer.AddChild(copyButton);  					copyButton.Click += (sender' e) =>  					{  						MakeCopyOfGroup();  					};    					Button deleteButton = textImageButtonFactory.Generate("Remove".Localize());  					deleteButton.Name = "3D View Remove";  					doEdittingButtonsContainer.AddChild(deleteButton);  					deleteButton.Click += (sender' e) =>  					{  						DeleteSelectedMesh();  					};    					GuiWidget separatorThree = new GuiWidget(1' 2);  					separatorThree.BackgroundColor = ActiveTheme.Instance.PrimaryTextColor;  					separatorThree.Margin = new BorderDouble(4' 1);  					separatorThree.VAnchor = VAnchor.ParentBottomTop;  					doEdittingButtonsContainer.AddChild(separatorThree);    					Button cancelEditModeButton = textImageButtonFactory.Generate("Cancel".Localize()' centerText: true);  					cancelEditModeButton.Name = "3D View Cancel";  					cancelEditModeButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							if (saveButtons.Visible)  							{  								StyledMessageBox.ShowMessageBox(ExitEditingAndSaveIfRequired' "Would you like to save your changes before exiting the editor?".Localize()' "Save Changes".Localize()' StyledMessageBox.MessageType.YES_NO' "Save Changed".Localize()' "Discard Changes".Localize());  							}  							else  							{  								if (partHasBeenEdited)  								{  									ExitEditingAndSaveIfRequired(false);  								}  								else  								{  									SwitchStateToNotEditing();  								}  							}  						});  					};    					doEdittingButtonsContainer.AddChild(cancelEditModeButton);    					// put in the save button  					AddSaveAndSaveAs(doEdittingButtonsContainer);  				}    				editToolBar.AddChild(doEdittingButtonsContainer);  				buttonBottomPanel.AddChild(editToolBar);  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,View3DWidget,The following statement contains a magic number: {  				FlowLayoutWidget editToolBar = new FlowLayoutWidget();    				string progressFindPartsLabel = "Entering Editor".Localize();  				string progressFindPartsLabelFull = "{0}:".FormatWith(progressFindPartsLabel);    				processingProgressControl = new ProgressControl(progressFindPartsLabelFull' ActiveTheme.Instance.PrimaryTextColor' ActiveTheme.Instance.PrimaryAccentColor);  				processingProgressControl.VAnchor = Agg.UI.VAnchor.ParentCenter;  				editToolBar.AddChild(processingProgressControl);  				editToolBar.VAnchor |= Agg.UI.VAnchor.ParentCenter;  				processingProgressControl.Visible = false;    				// If the window is embedded (in the center panel) and there is no item loaded then don't show the add button  				enterEditButtonsContainer = new FlowLayoutWidget();  				{  					Button addButton = textImageButtonFactory.Generate("Insert".Localize()' "icon_insert_32x32.png");  					addButton.ToolTipText = "Insert an .stl' .amf or .zip file".Localize();  					addButton.Margin = new BorderDouble(right: 0);  					enterEditButtonsContainer.AddChild(addButton);  					addButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							DoAddFileAfterCreatingEditData = true;  							EnterEditAndCreateSelectionData();  						});  					};  					if (printItemWrapper != null  						&& printItemWrapper.PrintItem.ReadOnly)  					{  						addButton.Enabled = false;  					}    					ImageBuffer normalImage = StaticData.Instance.LoadIcon("icon_edit.png"' 14' 14);    					Button enterEdittingButton = textImageButtonFactory.Generate("Edit".Localize()' normalImage);  					enterEdittingButton.Name = "3D View Edit";  					enterEdittingButton.Margin = new BorderDouble(right: 4);  					enterEdittingButton.Click += (sender' e) =>  					{  						EnterEditAndCreateSelectionData();  					};    					if (printItemWrapper != null  						&& printItemWrapper.PrintItem.ReadOnly)  					{  						enterEdittingButton.Enabled = false;  					}    					Button exportButton = textImageButtonFactory.Generate("Export".Localize() + "...");    					exportButton.Margin = new BorderDouble(right: 10);  					exportButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							OpenExportWindow();  						});  					};    					enterEditButtonsContainer.AddChild(enterEdittingButton);  					enterEditButtonsContainer.AddChild(exportButton);  				}  				editToolBar.AddChild(enterEditButtonsContainer);    				doEdittingButtonsContainer = new FlowLayoutWidget();  				doEdittingButtonsContainer.Visible = false;    				{  					Button addButton = textImageButtonFactory.Generate("Insert".Localize()' "icon_insert_32x32.png");  					addButton.Margin = new BorderDouble(right: 10);  					doEdittingButtonsContainer.AddChild(addButton);  					addButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							FileDialog.OpenFileDialog(  								new OpenFileDialogParams(ApplicationSettings.OpenDesignFileParams' multiSelect: true)'  								(openParams) =>  								{  									LoadAndAddPartsToPlate(openParams.FileNames);  								});  						});  					};    					GuiWidget separator = new GuiWidget(1' 2);  					separator.BackgroundColor = ActiveTheme.Instance.PrimaryTextColor;  					separator.Margin = new BorderDouble(4' 2);  					separator.VAnchor = VAnchor.ParentBottomTop;  					doEdittingButtonsContainer.AddChild(separator);    					Button ungroupButton = textImageButtonFactory.Generate("Ungroup".Localize());  					ungroupButton.Name = "3D View Ungroup";  					doEdittingButtonsContainer.AddChild(ungroupButton);  					ungroupButton.Click += (sender' e) =>  					{  						UngroupSelectedMeshGroup();  						UndoBuffer.ClearHistory();  					};    					Button groupButton = textImageButtonFactory.Generate("Group".Localize());  					groupButton.Name = "3D View Group";  					doEdittingButtonsContainer.AddChild(groupButton);  					groupButton.Click += (sender' e) =>  					{  						GroupSelectedMeshs();  						UndoBuffer.ClearHistory();  					};    					Button alignButton = textImageButtonFactory.Generate("Align".Localize());  					doEdittingButtonsContainer.AddChild(alignButton);  					alignButton.Click += (sender' e) =>  					{  						AlignToSelectedMeshGroup();  						UndoBuffer.ClearHistory();  					};    					Button arrangeButton = textImageButtonFactory.Generate("Arrange".Localize());  					doEdittingButtonsContainer.AddChild(arrangeButton);  					arrangeButton.Click += (sender' e) =>  					{  						AutoArrangePartsInBackground();  					};    					GuiWidget separatorTwo = new GuiWidget(1' 2);  					separatorTwo.BackgroundColor = ActiveTheme.Instance.PrimaryTextColor;  					separatorTwo.Margin = new BorderDouble(4' 2);  					separatorTwo.VAnchor = VAnchor.ParentBottomTop;  					doEdittingButtonsContainer.AddChild(separatorTwo);    					Button copyButton = textImageButtonFactory.Generate("Copy".Localize());  					copyButton.Name = "3D View Copy";  					doEdittingButtonsContainer.AddChild(copyButton);  					copyButton.Click += (sender' e) =>  					{  						MakeCopyOfGroup();  					};    					Button deleteButton = textImageButtonFactory.Generate("Remove".Localize());  					deleteButton.Name = "3D View Remove";  					doEdittingButtonsContainer.AddChild(deleteButton);  					deleteButton.Click += (sender' e) =>  					{  						DeleteSelectedMesh();  					};    					GuiWidget separatorThree = new GuiWidget(1' 2);  					separatorThree.BackgroundColor = ActiveTheme.Instance.PrimaryTextColor;  					separatorThree.Margin = new BorderDouble(4' 1);  					separatorThree.VAnchor = VAnchor.ParentBottomTop;  					doEdittingButtonsContainer.AddChild(separatorThree);    					Button cancelEditModeButton = textImageButtonFactory.Generate("Cancel".Localize()' centerText: true);  					cancelEditModeButton.Name = "3D View Cancel";  					cancelEditModeButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							if (saveButtons.Visible)  							{  								StyledMessageBox.ShowMessageBox(ExitEditingAndSaveIfRequired' "Would you like to save your changes before exiting the editor?".Localize()' "Save Changes".Localize()' StyledMessageBox.MessageType.YES_NO' "Save Changed".Localize()' "Discard Changes".Localize());  							}  							else  							{  								if (partHasBeenEdited)  								{  									ExitEditingAndSaveIfRequired(false);  								}  								else  								{  									SwitchStateToNotEditing();  								}  							}  						});  					};    					doEdittingButtonsContainer.AddChild(cancelEditModeButton);    					// put in the save button  					AddSaveAndSaveAs(doEdittingButtonsContainer);  				}    				editToolBar.AddChild(doEdittingButtonsContainer);  				buttonBottomPanel.AddChild(editToolBar);  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,View3DWidget,The following statement contains a magic number: {  				FlowLayoutWidget editToolBar = new FlowLayoutWidget();    				string progressFindPartsLabel = "Entering Editor".Localize();  				string progressFindPartsLabelFull = "{0}:".FormatWith(progressFindPartsLabel);    				processingProgressControl = new ProgressControl(progressFindPartsLabelFull' ActiveTheme.Instance.PrimaryTextColor' ActiveTheme.Instance.PrimaryAccentColor);  				processingProgressControl.VAnchor = Agg.UI.VAnchor.ParentCenter;  				editToolBar.AddChild(processingProgressControl);  				editToolBar.VAnchor |= Agg.UI.VAnchor.ParentCenter;  				processingProgressControl.Visible = false;    				// If the window is embedded (in the center panel) and there is no item loaded then don't show the add button  				enterEditButtonsContainer = new FlowLayoutWidget();  				{  					Button addButton = textImageButtonFactory.Generate("Insert".Localize()' "icon_insert_32x32.png");  					addButton.ToolTipText = "Insert an .stl' .amf or .zip file".Localize();  					addButton.Margin = new BorderDouble(right: 0);  					enterEditButtonsContainer.AddChild(addButton);  					addButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							DoAddFileAfterCreatingEditData = true;  							EnterEditAndCreateSelectionData();  						});  					};  					if (printItemWrapper != null  						&& printItemWrapper.PrintItem.ReadOnly)  					{  						addButton.Enabled = false;  					}    					ImageBuffer normalImage = StaticData.Instance.LoadIcon("icon_edit.png"' 14' 14);    					Button enterEdittingButton = textImageButtonFactory.Generate("Edit".Localize()' normalImage);  					enterEdittingButton.Name = "3D View Edit";  					enterEdittingButton.Margin = new BorderDouble(right: 4);  					enterEdittingButton.Click += (sender' e) =>  					{  						EnterEditAndCreateSelectionData();  					};    					if (printItemWrapper != null  						&& printItemWrapper.PrintItem.ReadOnly)  					{  						enterEdittingButton.Enabled = false;  					}    					Button exportButton = textImageButtonFactory.Generate("Export".Localize() + "...");    					exportButton.Margin = new BorderDouble(right: 10);  					exportButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							OpenExportWindow();  						});  					};    					enterEditButtonsContainer.AddChild(enterEdittingButton);  					enterEditButtonsContainer.AddChild(exportButton);  				}  				editToolBar.AddChild(enterEditButtonsContainer);    				doEdittingButtonsContainer = new FlowLayoutWidget();  				doEdittingButtonsContainer.Visible = false;    				{  					Button addButton = textImageButtonFactory.Generate("Insert".Localize()' "icon_insert_32x32.png");  					addButton.Margin = new BorderDouble(right: 10);  					doEdittingButtonsContainer.AddChild(addButton);  					addButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							FileDialog.OpenFileDialog(  								new OpenFileDialogParams(ApplicationSettings.OpenDesignFileParams' multiSelect: true)'  								(openParams) =>  								{  									LoadAndAddPartsToPlate(openParams.FileNames);  								});  						});  					};    					GuiWidget separator = new GuiWidget(1' 2);  					separator.BackgroundColor = ActiveTheme.Instance.PrimaryTextColor;  					separator.Margin = new BorderDouble(4' 2);  					separator.VAnchor = VAnchor.ParentBottomTop;  					doEdittingButtonsContainer.AddChild(separator);    					Button ungroupButton = textImageButtonFactory.Generate("Ungroup".Localize());  					ungroupButton.Name = "3D View Ungroup";  					doEdittingButtonsContainer.AddChild(ungroupButton);  					ungroupButton.Click += (sender' e) =>  					{  						UngroupSelectedMeshGroup();  						UndoBuffer.ClearHistory();  					};    					Button groupButton = textImageButtonFactory.Generate("Group".Localize());  					groupButton.Name = "3D View Group";  					doEdittingButtonsContainer.AddChild(groupButton);  					groupButton.Click += (sender' e) =>  					{  						GroupSelectedMeshs();  						UndoBuffer.ClearHistory();  					};    					Button alignButton = textImageButtonFactory.Generate("Align".Localize());  					doEdittingButtonsContainer.AddChild(alignButton);  					alignButton.Click += (sender' e) =>  					{  						AlignToSelectedMeshGroup();  						UndoBuffer.ClearHistory();  					};    					Button arrangeButton = textImageButtonFactory.Generate("Arrange".Localize());  					doEdittingButtonsContainer.AddChild(arrangeButton);  					arrangeButton.Click += (sender' e) =>  					{  						AutoArrangePartsInBackground();  					};    					GuiWidget separatorTwo = new GuiWidget(1' 2);  					separatorTwo.BackgroundColor = ActiveTheme.Instance.PrimaryTextColor;  					separatorTwo.Margin = new BorderDouble(4' 2);  					separatorTwo.VAnchor = VAnchor.ParentBottomTop;  					doEdittingButtonsContainer.AddChild(separatorTwo);    					Button copyButton = textImageButtonFactory.Generate("Copy".Localize());  					copyButton.Name = "3D View Copy";  					doEdittingButtonsContainer.AddChild(copyButton);  					copyButton.Click += (sender' e) =>  					{  						MakeCopyOfGroup();  					};    					Button deleteButton = textImageButtonFactory.Generate("Remove".Localize());  					deleteButton.Name = "3D View Remove";  					doEdittingButtonsContainer.AddChild(deleteButton);  					deleteButton.Click += (sender' e) =>  					{  						DeleteSelectedMesh();  					};    					GuiWidget separatorThree = new GuiWidget(1' 2);  					separatorThree.BackgroundColor = ActiveTheme.Instance.PrimaryTextColor;  					separatorThree.Margin = new BorderDouble(4' 1);  					separatorThree.VAnchor = VAnchor.ParentBottomTop;  					doEdittingButtonsContainer.AddChild(separatorThree);    					Button cancelEditModeButton = textImageButtonFactory.Generate("Cancel".Localize()' centerText: true);  					cancelEditModeButton.Name = "3D View Cancel";  					cancelEditModeButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							if (saveButtons.Visible)  							{  								StyledMessageBox.ShowMessageBox(ExitEditingAndSaveIfRequired' "Would you like to save your changes before exiting the editor?".Localize()' "Save Changes".Localize()' StyledMessageBox.MessageType.YES_NO' "Save Changed".Localize()' "Discard Changes".Localize());  							}  							else  							{  								if (partHasBeenEdited)  								{  									ExitEditingAndSaveIfRequired(false);  								}  								else  								{  									SwitchStateToNotEditing();  								}  							}  						});  					};    					doEdittingButtonsContainer.AddChild(cancelEditModeButton);    					// put in the save button  					AddSaveAndSaveAs(doEdittingButtonsContainer);  				}    				editToolBar.AddChild(doEdittingButtonsContainer);  				buttonBottomPanel.AddChild(editToolBar);  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,View3DWidget,The following statement contains a magic number: {  				FlowLayoutWidget editToolBar = new FlowLayoutWidget();    				string progressFindPartsLabel = "Entering Editor".Localize();  				string progressFindPartsLabelFull = "{0}:".FormatWith(progressFindPartsLabel);    				processingProgressControl = new ProgressControl(progressFindPartsLabelFull' ActiveTheme.Instance.PrimaryTextColor' ActiveTheme.Instance.PrimaryAccentColor);  				processingProgressControl.VAnchor = Agg.UI.VAnchor.ParentCenter;  				editToolBar.AddChild(processingProgressControl);  				editToolBar.VAnchor |= Agg.UI.VAnchor.ParentCenter;  				processingProgressControl.Visible = false;    				// If the window is embedded (in the center panel) and there is no item loaded then don't show the add button  				enterEditButtonsContainer = new FlowLayoutWidget();  				{  					Button addButton = textImageButtonFactory.Generate("Insert".Localize()' "icon_insert_32x32.png");  					addButton.ToolTipText = "Insert an .stl' .amf or .zip file".Localize();  					addButton.Margin = new BorderDouble(right: 0);  					enterEditButtonsContainer.AddChild(addButton);  					addButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							DoAddFileAfterCreatingEditData = true;  							EnterEditAndCreateSelectionData();  						});  					};  					if (printItemWrapper != null  						&& printItemWrapper.PrintItem.ReadOnly)  					{  						addButton.Enabled = false;  					}    					ImageBuffer normalImage = StaticData.Instance.LoadIcon("icon_edit.png"' 14' 14);    					Button enterEdittingButton = textImageButtonFactory.Generate("Edit".Localize()' normalImage);  					enterEdittingButton.Name = "3D View Edit";  					enterEdittingButton.Margin = new BorderDouble(right: 4);  					enterEdittingButton.Click += (sender' e) =>  					{  						EnterEditAndCreateSelectionData();  					};    					if (printItemWrapper != null  						&& printItemWrapper.PrintItem.ReadOnly)  					{  						enterEdittingButton.Enabled = false;  					}    					Button exportButton = textImageButtonFactory.Generate("Export".Localize() + "...");    					exportButton.Margin = new BorderDouble(right: 10);  					exportButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							OpenExportWindow();  						});  					};    					enterEditButtonsContainer.AddChild(enterEdittingButton);  					enterEditButtonsContainer.AddChild(exportButton);  				}  				editToolBar.AddChild(enterEditButtonsContainer);    				doEdittingButtonsContainer = new FlowLayoutWidget();  				doEdittingButtonsContainer.Visible = false;    				{  					Button addButton = textImageButtonFactory.Generate("Insert".Localize()' "icon_insert_32x32.png");  					addButton.Margin = new BorderDouble(right: 10);  					doEdittingButtonsContainer.AddChild(addButton);  					addButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							FileDialog.OpenFileDialog(  								new OpenFileDialogParams(ApplicationSettings.OpenDesignFileParams' multiSelect: true)'  								(openParams) =>  								{  									LoadAndAddPartsToPlate(openParams.FileNames);  								});  						});  					};    					GuiWidget separator = new GuiWidget(1' 2);  					separator.BackgroundColor = ActiveTheme.Instance.PrimaryTextColor;  					separator.Margin = new BorderDouble(4' 2);  					separator.VAnchor = VAnchor.ParentBottomTop;  					doEdittingButtonsContainer.AddChild(separator);    					Button ungroupButton = textImageButtonFactory.Generate("Ungroup".Localize());  					ungroupButton.Name = "3D View Ungroup";  					doEdittingButtonsContainer.AddChild(ungroupButton);  					ungroupButton.Click += (sender' e) =>  					{  						UngroupSelectedMeshGroup();  						UndoBuffer.ClearHistory();  					};    					Button groupButton = textImageButtonFactory.Generate("Group".Localize());  					groupButton.Name = "3D View Group";  					doEdittingButtonsContainer.AddChild(groupButton);  					groupButton.Click += (sender' e) =>  					{  						GroupSelectedMeshs();  						UndoBuffer.ClearHistory();  					};    					Button alignButton = textImageButtonFactory.Generate("Align".Localize());  					doEdittingButtonsContainer.AddChild(alignButton);  					alignButton.Click += (sender' e) =>  					{  						AlignToSelectedMeshGroup();  						UndoBuffer.ClearHistory();  					};    					Button arrangeButton = textImageButtonFactory.Generate("Arrange".Localize());  					doEdittingButtonsContainer.AddChild(arrangeButton);  					arrangeButton.Click += (sender' e) =>  					{  						AutoArrangePartsInBackground();  					};    					GuiWidget separatorTwo = new GuiWidget(1' 2);  					separatorTwo.BackgroundColor = ActiveTheme.Instance.PrimaryTextColor;  					separatorTwo.Margin = new BorderDouble(4' 2);  					separatorTwo.VAnchor = VAnchor.ParentBottomTop;  					doEdittingButtonsContainer.AddChild(separatorTwo);    					Button copyButton = textImageButtonFactory.Generate("Copy".Localize());  					copyButton.Name = "3D View Copy";  					doEdittingButtonsContainer.AddChild(copyButton);  					copyButton.Click += (sender' e) =>  					{  						MakeCopyOfGroup();  					};    					Button deleteButton = textImageButtonFactory.Generate("Remove".Localize());  					deleteButton.Name = "3D View Remove";  					doEdittingButtonsContainer.AddChild(deleteButton);  					deleteButton.Click += (sender' e) =>  					{  						DeleteSelectedMesh();  					};    					GuiWidget separatorThree = new GuiWidget(1' 2);  					separatorThree.BackgroundColor = ActiveTheme.Instance.PrimaryTextColor;  					separatorThree.Margin = new BorderDouble(4' 1);  					separatorThree.VAnchor = VAnchor.ParentBottomTop;  					doEdittingButtonsContainer.AddChild(separatorThree);    					Button cancelEditModeButton = textImageButtonFactory.Generate("Cancel".Localize()' centerText: true);  					cancelEditModeButton.Name = "3D View Cancel";  					cancelEditModeButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							if (saveButtons.Visible)  							{  								StyledMessageBox.ShowMessageBox(ExitEditingAndSaveIfRequired' "Would you like to save your changes before exiting the editor?".Localize()' "Save Changes".Localize()' StyledMessageBox.MessageType.YES_NO' "Save Changed".Localize()' "Discard Changes".Localize());  							}  							else  							{  								if (partHasBeenEdited)  								{  									ExitEditingAndSaveIfRequired(false);  								}  								else  								{  									SwitchStateToNotEditing();  								}  							}  						});  					};    					doEdittingButtonsContainer.AddChild(cancelEditModeButton);    					// put in the save button  					AddSaveAndSaveAs(doEdittingButtonsContainer);  				}    				editToolBar.AddChild(doEdittingButtonsContainer);  				buttonBottomPanel.AddChild(editToolBar);  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,View3DWidget,The following statement contains a magic number: {  				FlowLayoutWidget editToolBar = new FlowLayoutWidget();    				string progressFindPartsLabel = "Entering Editor".Localize();  				string progressFindPartsLabelFull = "{0}:".FormatWith(progressFindPartsLabel);    				processingProgressControl = new ProgressControl(progressFindPartsLabelFull' ActiveTheme.Instance.PrimaryTextColor' ActiveTheme.Instance.PrimaryAccentColor);  				processingProgressControl.VAnchor = Agg.UI.VAnchor.ParentCenter;  				editToolBar.AddChild(processingProgressControl);  				editToolBar.VAnchor |= Agg.UI.VAnchor.ParentCenter;  				processingProgressControl.Visible = false;    				// If the window is embedded (in the center panel) and there is no item loaded then don't show the add button  				enterEditButtonsContainer = new FlowLayoutWidget();  				{  					Button addButton = textImageButtonFactory.Generate("Insert".Localize()' "icon_insert_32x32.png");  					addButton.ToolTipText = "Insert an .stl' .amf or .zip file".Localize();  					addButton.Margin = new BorderDouble(right: 0);  					enterEditButtonsContainer.AddChild(addButton);  					addButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							DoAddFileAfterCreatingEditData = true;  							EnterEditAndCreateSelectionData();  						});  					};  					if (printItemWrapper != null  						&& printItemWrapper.PrintItem.ReadOnly)  					{  						addButton.Enabled = false;  					}    					ImageBuffer normalImage = StaticData.Instance.LoadIcon("icon_edit.png"' 14' 14);    					Button enterEdittingButton = textImageButtonFactory.Generate("Edit".Localize()' normalImage);  					enterEdittingButton.Name = "3D View Edit";  					enterEdittingButton.Margin = new BorderDouble(right: 4);  					enterEdittingButton.Click += (sender' e) =>  					{  						EnterEditAndCreateSelectionData();  					};    					if (printItemWrapper != null  						&& printItemWrapper.PrintItem.ReadOnly)  					{  						enterEdittingButton.Enabled = false;  					}    					Button exportButton = textImageButtonFactory.Generate("Export".Localize() + "...");    					exportButton.Margin = new BorderDouble(right: 10);  					exportButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							OpenExportWindow();  						});  					};    					enterEditButtonsContainer.AddChild(enterEdittingButton);  					enterEditButtonsContainer.AddChild(exportButton);  				}  				editToolBar.AddChild(enterEditButtonsContainer);    				doEdittingButtonsContainer = new FlowLayoutWidget();  				doEdittingButtonsContainer.Visible = false;    				{  					Button addButton = textImageButtonFactory.Generate("Insert".Localize()' "icon_insert_32x32.png");  					addButton.Margin = new BorderDouble(right: 10);  					doEdittingButtonsContainer.AddChild(addButton);  					addButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							FileDialog.OpenFileDialog(  								new OpenFileDialogParams(ApplicationSettings.OpenDesignFileParams' multiSelect: true)'  								(openParams) =>  								{  									LoadAndAddPartsToPlate(openParams.FileNames);  								});  						});  					};    					GuiWidget separator = new GuiWidget(1' 2);  					separator.BackgroundColor = ActiveTheme.Instance.PrimaryTextColor;  					separator.Margin = new BorderDouble(4' 2);  					separator.VAnchor = VAnchor.ParentBottomTop;  					doEdittingButtonsContainer.AddChild(separator);    					Button ungroupButton = textImageButtonFactory.Generate("Ungroup".Localize());  					ungroupButton.Name = "3D View Ungroup";  					doEdittingButtonsContainer.AddChild(ungroupButton);  					ungroupButton.Click += (sender' e) =>  					{  						UngroupSelectedMeshGroup();  						UndoBuffer.ClearHistory();  					};    					Button groupButton = textImageButtonFactory.Generate("Group".Localize());  					groupButton.Name = "3D View Group";  					doEdittingButtonsContainer.AddChild(groupButton);  					groupButton.Click += (sender' e) =>  					{  						GroupSelectedMeshs();  						UndoBuffer.ClearHistory();  					};    					Button alignButton = textImageButtonFactory.Generate("Align".Localize());  					doEdittingButtonsContainer.AddChild(alignButton);  					alignButton.Click += (sender' e) =>  					{  						AlignToSelectedMeshGroup();  						UndoBuffer.ClearHistory();  					};    					Button arrangeButton = textImageButtonFactory.Generate("Arrange".Localize());  					doEdittingButtonsContainer.AddChild(arrangeButton);  					arrangeButton.Click += (sender' e) =>  					{  						AutoArrangePartsInBackground();  					};    					GuiWidget separatorTwo = new GuiWidget(1' 2);  					separatorTwo.BackgroundColor = ActiveTheme.Instance.PrimaryTextColor;  					separatorTwo.Margin = new BorderDouble(4' 2);  					separatorTwo.VAnchor = VAnchor.ParentBottomTop;  					doEdittingButtonsContainer.AddChild(separatorTwo);    					Button copyButton = textImageButtonFactory.Generate("Copy".Localize());  					copyButton.Name = "3D View Copy";  					doEdittingButtonsContainer.AddChild(copyButton);  					copyButton.Click += (sender' e) =>  					{  						MakeCopyOfGroup();  					};    					Button deleteButton = textImageButtonFactory.Generate("Remove".Localize());  					deleteButton.Name = "3D View Remove";  					doEdittingButtonsContainer.AddChild(deleteButton);  					deleteButton.Click += (sender' e) =>  					{  						DeleteSelectedMesh();  					};    					GuiWidget separatorThree = new GuiWidget(1' 2);  					separatorThree.BackgroundColor = ActiveTheme.Instance.PrimaryTextColor;  					separatorThree.Margin = new BorderDouble(4' 1);  					separatorThree.VAnchor = VAnchor.ParentBottomTop;  					doEdittingButtonsContainer.AddChild(separatorThree);    					Button cancelEditModeButton = textImageButtonFactory.Generate("Cancel".Localize()' centerText: true);  					cancelEditModeButton.Name = "3D View Cancel";  					cancelEditModeButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							if (saveButtons.Visible)  							{  								StyledMessageBox.ShowMessageBox(ExitEditingAndSaveIfRequired' "Would you like to save your changes before exiting the editor?".Localize()' "Save Changes".Localize()' StyledMessageBox.MessageType.YES_NO' "Save Changed".Localize()' "Discard Changes".Localize());  							}  							else  							{  								if (partHasBeenEdited)  								{  									ExitEditingAndSaveIfRequired(false);  								}  								else  								{  									SwitchStateToNotEditing();  								}  							}  						});  					};    					doEdittingButtonsContainer.AddChild(cancelEditModeButton);    					// put in the save button  					AddSaveAndSaveAs(doEdittingButtonsContainer);  				}    				editToolBar.AddChild(doEdittingButtonsContainer);  				buttonBottomPanel.AddChild(editToolBar);  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,View3DWidget,The following statement contains a magic number: {  				FlowLayoutWidget editToolBar = new FlowLayoutWidget();    				string progressFindPartsLabel = "Entering Editor".Localize();  				string progressFindPartsLabelFull = "{0}:".FormatWith(progressFindPartsLabel);    				processingProgressControl = new ProgressControl(progressFindPartsLabelFull' ActiveTheme.Instance.PrimaryTextColor' ActiveTheme.Instance.PrimaryAccentColor);  				processingProgressControl.VAnchor = Agg.UI.VAnchor.ParentCenter;  				editToolBar.AddChild(processingProgressControl);  				editToolBar.VAnchor |= Agg.UI.VAnchor.ParentCenter;  				processingProgressControl.Visible = false;    				// If the window is embedded (in the center panel) and there is no item loaded then don't show the add button  				enterEditButtonsContainer = new FlowLayoutWidget();  				{  					Button addButton = textImageButtonFactory.Generate("Insert".Localize()' "icon_insert_32x32.png");  					addButton.ToolTipText = "Insert an .stl' .amf or .zip file".Localize();  					addButton.Margin = new BorderDouble(right: 0);  					enterEditButtonsContainer.AddChild(addButton);  					addButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							DoAddFileAfterCreatingEditData = true;  							EnterEditAndCreateSelectionData();  						});  					};  					if (printItemWrapper != null  						&& printItemWrapper.PrintItem.ReadOnly)  					{  						addButton.Enabled = false;  					}    					ImageBuffer normalImage = StaticData.Instance.LoadIcon("icon_edit.png"' 14' 14);    					Button enterEdittingButton = textImageButtonFactory.Generate("Edit".Localize()' normalImage);  					enterEdittingButton.Name = "3D View Edit";  					enterEdittingButton.Margin = new BorderDouble(right: 4);  					enterEdittingButton.Click += (sender' e) =>  					{  						EnterEditAndCreateSelectionData();  					};    					if (printItemWrapper != null  						&& printItemWrapper.PrintItem.ReadOnly)  					{  						enterEdittingButton.Enabled = false;  					}    					Button exportButton = textImageButtonFactory.Generate("Export".Localize() + "...");    					exportButton.Margin = new BorderDouble(right: 10);  					exportButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							OpenExportWindow();  						});  					};    					enterEditButtonsContainer.AddChild(enterEdittingButton);  					enterEditButtonsContainer.AddChild(exportButton);  				}  				editToolBar.AddChild(enterEditButtonsContainer);    				doEdittingButtonsContainer = new FlowLayoutWidget();  				doEdittingButtonsContainer.Visible = false;    				{  					Button addButton = textImageButtonFactory.Generate("Insert".Localize()' "icon_insert_32x32.png");  					addButton.Margin = new BorderDouble(right: 10);  					doEdittingButtonsContainer.AddChild(addButton);  					addButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							FileDialog.OpenFileDialog(  								new OpenFileDialogParams(ApplicationSettings.OpenDesignFileParams' multiSelect: true)'  								(openParams) =>  								{  									LoadAndAddPartsToPlate(openParams.FileNames);  								});  						});  					};    					GuiWidget separator = new GuiWidget(1' 2);  					separator.BackgroundColor = ActiveTheme.Instance.PrimaryTextColor;  					separator.Margin = new BorderDouble(4' 2);  					separator.VAnchor = VAnchor.ParentBottomTop;  					doEdittingButtonsContainer.AddChild(separator);    					Button ungroupButton = textImageButtonFactory.Generate("Ungroup".Localize());  					ungroupButton.Name = "3D View Ungroup";  					doEdittingButtonsContainer.AddChild(ungroupButton);  					ungroupButton.Click += (sender' e) =>  					{  						UngroupSelectedMeshGroup();  						UndoBuffer.ClearHistory();  					};    					Button groupButton = textImageButtonFactory.Generate("Group".Localize());  					groupButton.Name = "3D View Group";  					doEdittingButtonsContainer.AddChild(groupButton);  					groupButton.Click += (sender' e) =>  					{  						GroupSelectedMeshs();  						UndoBuffer.ClearHistory();  					};    					Button alignButton = textImageButtonFactory.Generate("Align".Localize());  					doEdittingButtonsContainer.AddChild(alignButton);  					alignButton.Click += (sender' e) =>  					{  						AlignToSelectedMeshGroup();  						UndoBuffer.ClearHistory();  					};    					Button arrangeButton = textImageButtonFactory.Generate("Arrange".Localize());  					doEdittingButtonsContainer.AddChild(arrangeButton);  					arrangeButton.Click += (sender' e) =>  					{  						AutoArrangePartsInBackground();  					};    					GuiWidget separatorTwo = new GuiWidget(1' 2);  					separatorTwo.BackgroundColor = ActiveTheme.Instance.PrimaryTextColor;  					separatorTwo.Margin = new BorderDouble(4' 2);  					separatorTwo.VAnchor = VAnchor.ParentBottomTop;  					doEdittingButtonsContainer.AddChild(separatorTwo);    					Button copyButton = textImageButtonFactory.Generate("Copy".Localize());  					copyButton.Name = "3D View Copy";  					doEdittingButtonsContainer.AddChild(copyButton);  					copyButton.Click += (sender' e) =>  					{  						MakeCopyOfGroup();  					};    					Button deleteButton = textImageButtonFactory.Generate("Remove".Localize());  					deleteButton.Name = "3D View Remove";  					doEdittingButtonsContainer.AddChild(deleteButton);  					deleteButton.Click += (sender' e) =>  					{  						DeleteSelectedMesh();  					};    					GuiWidget separatorThree = new GuiWidget(1' 2);  					separatorThree.BackgroundColor = ActiveTheme.Instance.PrimaryTextColor;  					separatorThree.Margin = new BorderDouble(4' 1);  					separatorThree.VAnchor = VAnchor.ParentBottomTop;  					doEdittingButtonsContainer.AddChild(separatorThree);    					Button cancelEditModeButton = textImageButtonFactory.Generate("Cancel".Localize()' centerText: true);  					cancelEditModeButton.Name = "3D View Cancel";  					cancelEditModeButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							if (saveButtons.Visible)  							{  								StyledMessageBox.ShowMessageBox(ExitEditingAndSaveIfRequired' "Would you like to save your changes before exiting the editor?".Localize()' "Save Changes".Localize()' StyledMessageBox.MessageType.YES_NO' "Save Changed".Localize()' "Discard Changes".Localize());  							}  							else  							{  								if (partHasBeenEdited)  								{  									ExitEditingAndSaveIfRequired(false);  								}  								else  								{  									SwitchStateToNotEditing();  								}  							}  						});  					};    					doEdittingButtonsContainer.AddChild(cancelEditModeButton);    					// put in the save button  					AddSaveAndSaveAs(doEdittingButtonsContainer);  				}    				editToolBar.AddChild(doEdittingButtonsContainer);  				buttonBottomPanel.AddChild(editToolBar);  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,View3DWidget,The following statement contains a magic number: {  				FlowLayoutWidget editToolBar = new FlowLayoutWidget();    				string progressFindPartsLabel = "Entering Editor".Localize();  				string progressFindPartsLabelFull = "{0}:".FormatWith(progressFindPartsLabel);    				processingProgressControl = new ProgressControl(progressFindPartsLabelFull' ActiveTheme.Instance.PrimaryTextColor' ActiveTheme.Instance.PrimaryAccentColor);  				processingProgressControl.VAnchor = Agg.UI.VAnchor.ParentCenter;  				editToolBar.AddChild(processingProgressControl);  				editToolBar.VAnchor |= Agg.UI.VAnchor.ParentCenter;  				processingProgressControl.Visible = false;    				// If the window is embedded (in the center panel) and there is no item loaded then don't show the add button  				enterEditButtonsContainer = new FlowLayoutWidget();  				{  					Button addButton = textImageButtonFactory.Generate("Insert".Localize()' "icon_insert_32x32.png");  					addButton.ToolTipText = "Insert an .stl' .amf or .zip file".Localize();  					addButton.Margin = new BorderDouble(right: 0);  					enterEditButtonsContainer.AddChild(addButton);  					addButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							DoAddFileAfterCreatingEditData = true;  							EnterEditAndCreateSelectionData();  						});  					};  					if (printItemWrapper != null  						&& printItemWrapper.PrintItem.ReadOnly)  					{  						addButton.Enabled = false;  					}    					ImageBuffer normalImage = StaticData.Instance.LoadIcon("icon_edit.png"' 14' 14);    					Button enterEdittingButton = textImageButtonFactory.Generate("Edit".Localize()' normalImage);  					enterEdittingButton.Name = "3D View Edit";  					enterEdittingButton.Margin = new BorderDouble(right: 4);  					enterEdittingButton.Click += (sender' e) =>  					{  						EnterEditAndCreateSelectionData();  					};    					if (printItemWrapper != null  						&& printItemWrapper.PrintItem.ReadOnly)  					{  						enterEdittingButton.Enabled = false;  					}    					Button exportButton = textImageButtonFactory.Generate("Export".Localize() + "...");    					exportButton.Margin = new BorderDouble(right: 10);  					exportButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							OpenExportWindow();  						});  					};    					enterEditButtonsContainer.AddChild(enterEdittingButton);  					enterEditButtonsContainer.AddChild(exportButton);  				}  				editToolBar.AddChild(enterEditButtonsContainer);    				doEdittingButtonsContainer = new FlowLayoutWidget();  				doEdittingButtonsContainer.Visible = false;    				{  					Button addButton = textImageButtonFactory.Generate("Insert".Localize()' "icon_insert_32x32.png");  					addButton.Margin = new BorderDouble(right: 10);  					doEdittingButtonsContainer.AddChild(addButton);  					addButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							FileDialog.OpenFileDialog(  								new OpenFileDialogParams(ApplicationSettings.OpenDesignFileParams' multiSelect: true)'  								(openParams) =>  								{  									LoadAndAddPartsToPlate(openParams.FileNames);  								});  						});  					};    					GuiWidget separator = new GuiWidget(1' 2);  					separator.BackgroundColor = ActiveTheme.Instance.PrimaryTextColor;  					separator.Margin = new BorderDouble(4' 2);  					separator.VAnchor = VAnchor.ParentBottomTop;  					doEdittingButtonsContainer.AddChild(separator);    					Button ungroupButton = textImageButtonFactory.Generate("Ungroup".Localize());  					ungroupButton.Name = "3D View Ungroup";  					doEdittingButtonsContainer.AddChild(ungroupButton);  					ungroupButton.Click += (sender' e) =>  					{  						UngroupSelectedMeshGroup();  						UndoBuffer.ClearHistory();  					};    					Button groupButton = textImageButtonFactory.Generate("Group".Localize());  					groupButton.Name = "3D View Group";  					doEdittingButtonsContainer.AddChild(groupButton);  					groupButton.Click += (sender' e) =>  					{  						GroupSelectedMeshs();  						UndoBuffer.ClearHistory();  					};    					Button alignButton = textImageButtonFactory.Generate("Align".Localize());  					doEdittingButtonsContainer.AddChild(alignButton);  					alignButton.Click += (sender' e) =>  					{  						AlignToSelectedMeshGroup();  						UndoBuffer.ClearHistory();  					};    					Button arrangeButton = textImageButtonFactory.Generate("Arrange".Localize());  					doEdittingButtonsContainer.AddChild(arrangeButton);  					arrangeButton.Click += (sender' e) =>  					{  						AutoArrangePartsInBackground();  					};    					GuiWidget separatorTwo = new GuiWidget(1' 2);  					separatorTwo.BackgroundColor = ActiveTheme.Instance.PrimaryTextColor;  					separatorTwo.Margin = new BorderDouble(4' 2);  					separatorTwo.VAnchor = VAnchor.ParentBottomTop;  					doEdittingButtonsContainer.AddChild(separatorTwo);    					Button copyButton = textImageButtonFactory.Generate("Copy".Localize());  					copyButton.Name = "3D View Copy";  					doEdittingButtonsContainer.AddChild(copyButton);  					copyButton.Click += (sender' e) =>  					{  						MakeCopyOfGroup();  					};    					Button deleteButton = textImageButtonFactory.Generate("Remove".Localize());  					deleteButton.Name = "3D View Remove";  					doEdittingButtonsContainer.AddChild(deleteButton);  					deleteButton.Click += (sender' e) =>  					{  						DeleteSelectedMesh();  					};    					GuiWidget separatorThree = new GuiWidget(1' 2);  					separatorThree.BackgroundColor = ActiveTheme.Instance.PrimaryTextColor;  					separatorThree.Margin = new BorderDouble(4' 1);  					separatorThree.VAnchor = VAnchor.ParentBottomTop;  					doEdittingButtonsContainer.AddChild(separatorThree);    					Button cancelEditModeButton = textImageButtonFactory.Generate("Cancel".Localize()' centerText: true);  					cancelEditModeButton.Name = "3D View Cancel";  					cancelEditModeButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							if (saveButtons.Visible)  							{  								StyledMessageBox.ShowMessageBox(ExitEditingAndSaveIfRequired' "Would you like to save your changes before exiting the editor?".Localize()' "Save Changes".Localize()' StyledMessageBox.MessageType.YES_NO' "Save Changed".Localize()' "Discard Changes".Localize());  							}  							else  							{  								if (partHasBeenEdited)  								{  									ExitEditingAndSaveIfRequired(false);  								}  								else  								{  									SwitchStateToNotEditing();  								}  							}  						});  					};    					doEdittingButtonsContainer.AddChild(cancelEditModeButton);    					// put in the save button  					AddSaveAndSaveAs(doEdittingButtonsContainer);  				}    				editToolBar.AddChild(doEdittingButtonsContainer);  				buttonBottomPanel.AddChild(editToolBar);  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,View3DWidget,The following statement contains a magic number: {  				FlowLayoutWidget editToolBar = new FlowLayoutWidget();    				string progressFindPartsLabel = "Entering Editor".Localize();  				string progressFindPartsLabelFull = "{0}:".FormatWith(progressFindPartsLabel);    				processingProgressControl = new ProgressControl(progressFindPartsLabelFull' ActiveTheme.Instance.PrimaryTextColor' ActiveTheme.Instance.PrimaryAccentColor);  				processingProgressControl.VAnchor = Agg.UI.VAnchor.ParentCenter;  				editToolBar.AddChild(processingProgressControl);  				editToolBar.VAnchor |= Agg.UI.VAnchor.ParentCenter;  				processingProgressControl.Visible = false;    				// If the window is embedded (in the center panel) and there is no item loaded then don't show the add button  				enterEditButtonsContainer = new FlowLayoutWidget();  				{  					Button addButton = textImageButtonFactory.Generate("Insert".Localize()' "icon_insert_32x32.png");  					addButton.ToolTipText = "Insert an .stl' .amf or .zip file".Localize();  					addButton.Margin = new BorderDouble(right: 0);  					enterEditButtonsContainer.AddChild(addButton);  					addButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							DoAddFileAfterCreatingEditData = true;  							EnterEditAndCreateSelectionData();  						});  					};  					if (printItemWrapper != null  						&& printItemWrapper.PrintItem.ReadOnly)  					{  						addButton.Enabled = false;  					}    					ImageBuffer normalImage = StaticData.Instance.LoadIcon("icon_edit.png"' 14' 14);    					Button enterEdittingButton = textImageButtonFactory.Generate("Edit".Localize()' normalImage);  					enterEdittingButton.Name = "3D View Edit";  					enterEdittingButton.Margin = new BorderDouble(right: 4);  					enterEdittingButton.Click += (sender' e) =>  					{  						EnterEditAndCreateSelectionData();  					};    					if (printItemWrapper != null  						&& printItemWrapper.PrintItem.ReadOnly)  					{  						enterEdittingButton.Enabled = false;  					}    					Button exportButton = textImageButtonFactory.Generate("Export".Localize() + "...");    					exportButton.Margin = new BorderDouble(right: 10);  					exportButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							OpenExportWindow();  						});  					};    					enterEditButtonsContainer.AddChild(enterEdittingButton);  					enterEditButtonsContainer.AddChild(exportButton);  				}  				editToolBar.AddChild(enterEditButtonsContainer);    				doEdittingButtonsContainer = new FlowLayoutWidget();  				doEdittingButtonsContainer.Visible = false;    				{  					Button addButton = textImageButtonFactory.Generate("Insert".Localize()' "icon_insert_32x32.png");  					addButton.Margin = new BorderDouble(right: 10);  					doEdittingButtonsContainer.AddChild(addButton);  					addButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							FileDialog.OpenFileDialog(  								new OpenFileDialogParams(ApplicationSettings.OpenDesignFileParams' multiSelect: true)'  								(openParams) =>  								{  									LoadAndAddPartsToPlate(openParams.FileNames);  								});  						});  					};    					GuiWidget separator = new GuiWidget(1' 2);  					separator.BackgroundColor = ActiveTheme.Instance.PrimaryTextColor;  					separator.Margin = new BorderDouble(4' 2);  					separator.VAnchor = VAnchor.ParentBottomTop;  					doEdittingButtonsContainer.AddChild(separator);    					Button ungroupButton = textImageButtonFactory.Generate("Ungroup".Localize());  					ungroupButton.Name = "3D View Ungroup";  					doEdittingButtonsContainer.AddChild(ungroupButton);  					ungroupButton.Click += (sender' e) =>  					{  						UngroupSelectedMeshGroup();  						UndoBuffer.ClearHistory();  					};    					Button groupButton = textImageButtonFactory.Generate("Group".Localize());  					groupButton.Name = "3D View Group";  					doEdittingButtonsContainer.AddChild(groupButton);  					groupButton.Click += (sender' e) =>  					{  						GroupSelectedMeshs();  						UndoBuffer.ClearHistory();  					};    					Button alignButton = textImageButtonFactory.Generate("Align".Localize());  					doEdittingButtonsContainer.AddChild(alignButton);  					alignButton.Click += (sender' e) =>  					{  						AlignToSelectedMeshGroup();  						UndoBuffer.ClearHistory();  					};    					Button arrangeButton = textImageButtonFactory.Generate("Arrange".Localize());  					doEdittingButtonsContainer.AddChild(arrangeButton);  					arrangeButton.Click += (sender' e) =>  					{  						AutoArrangePartsInBackground();  					};    					GuiWidget separatorTwo = new GuiWidget(1' 2);  					separatorTwo.BackgroundColor = ActiveTheme.Instance.PrimaryTextColor;  					separatorTwo.Margin = new BorderDouble(4' 2);  					separatorTwo.VAnchor = VAnchor.ParentBottomTop;  					doEdittingButtonsContainer.AddChild(separatorTwo);    					Button copyButton = textImageButtonFactory.Generate("Copy".Localize());  					copyButton.Name = "3D View Copy";  					doEdittingButtonsContainer.AddChild(copyButton);  					copyButton.Click += (sender' e) =>  					{  						MakeCopyOfGroup();  					};    					Button deleteButton = textImageButtonFactory.Generate("Remove".Localize());  					deleteButton.Name = "3D View Remove";  					doEdittingButtonsContainer.AddChild(deleteButton);  					deleteButton.Click += (sender' e) =>  					{  						DeleteSelectedMesh();  					};    					GuiWidget separatorThree = new GuiWidget(1' 2);  					separatorThree.BackgroundColor = ActiveTheme.Instance.PrimaryTextColor;  					separatorThree.Margin = new BorderDouble(4' 1);  					separatorThree.VAnchor = VAnchor.ParentBottomTop;  					doEdittingButtonsContainer.AddChild(separatorThree);    					Button cancelEditModeButton = textImageButtonFactory.Generate("Cancel".Localize()' centerText: true);  					cancelEditModeButton.Name = "3D View Cancel";  					cancelEditModeButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							if (saveButtons.Visible)  							{  								StyledMessageBox.ShowMessageBox(ExitEditingAndSaveIfRequired' "Would you like to save your changes before exiting the editor?".Localize()' "Save Changes".Localize()' StyledMessageBox.MessageType.YES_NO' "Save Changed".Localize()' "Discard Changes".Localize());  							}  							else  							{  								if (partHasBeenEdited)  								{  									ExitEditingAndSaveIfRequired(false);  								}  								else  								{  									SwitchStateToNotEditing();  								}  							}  						});  					};    					doEdittingButtonsContainer.AddChild(cancelEditModeButton);    					// put in the save button  					AddSaveAndSaveAs(doEdittingButtonsContainer);  				}    				editToolBar.AddChild(doEdittingButtonsContainer);  				buttonBottomPanel.AddChild(editToolBar);  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,View3DWidget,The following statement contains a magic number: {  				FlowLayoutWidget editToolBar = new FlowLayoutWidget();    				string progressFindPartsLabel = "Entering Editor".Localize();  				string progressFindPartsLabelFull = "{0}:".FormatWith(progressFindPartsLabel);    				processingProgressControl = new ProgressControl(progressFindPartsLabelFull' ActiveTheme.Instance.PrimaryTextColor' ActiveTheme.Instance.PrimaryAccentColor);  				processingProgressControl.VAnchor = Agg.UI.VAnchor.ParentCenter;  				editToolBar.AddChild(processingProgressControl);  				editToolBar.VAnchor |= Agg.UI.VAnchor.ParentCenter;  				processingProgressControl.Visible = false;    				// If the window is embedded (in the center panel) and there is no item loaded then don't show the add button  				enterEditButtonsContainer = new FlowLayoutWidget();  				{  					Button addButton = textImageButtonFactory.Generate("Insert".Localize()' "icon_insert_32x32.png");  					addButton.ToolTipText = "Insert an .stl' .amf or .zip file".Localize();  					addButton.Margin = new BorderDouble(right: 0);  					enterEditButtonsContainer.AddChild(addButton);  					addButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							DoAddFileAfterCreatingEditData = true;  							EnterEditAndCreateSelectionData();  						});  					};  					if (printItemWrapper != null  						&& printItemWrapper.PrintItem.ReadOnly)  					{  						addButton.Enabled = false;  					}    					ImageBuffer normalImage = StaticData.Instance.LoadIcon("icon_edit.png"' 14' 14);    					Button enterEdittingButton = textImageButtonFactory.Generate("Edit".Localize()' normalImage);  					enterEdittingButton.Name = "3D View Edit";  					enterEdittingButton.Margin = new BorderDouble(right: 4);  					enterEdittingButton.Click += (sender' e) =>  					{  						EnterEditAndCreateSelectionData();  					};    					if (printItemWrapper != null  						&& printItemWrapper.PrintItem.ReadOnly)  					{  						enterEdittingButton.Enabled = false;  					}    					Button exportButton = textImageButtonFactory.Generate("Export".Localize() + "...");    					exportButton.Margin = new BorderDouble(right: 10);  					exportButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							OpenExportWindow();  						});  					};    					enterEditButtonsContainer.AddChild(enterEdittingButton);  					enterEditButtonsContainer.AddChild(exportButton);  				}  				editToolBar.AddChild(enterEditButtonsContainer);    				doEdittingButtonsContainer = new FlowLayoutWidget();  				doEdittingButtonsContainer.Visible = false;    				{  					Button addButton = textImageButtonFactory.Generate("Insert".Localize()' "icon_insert_32x32.png");  					addButton.Margin = new BorderDouble(right: 10);  					doEdittingButtonsContainer.AddChild(addButton);  					addButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							FileDialog.OpenFileDialog(  								new OpenFileDialogParams(ApplicationSettings.OpenDesignFileParams' multiSelect: true)'  								(openParams) =>  								{  									LoadAndAddPartsToPlate(openParams.FileNames);  								});  						});  					};    					GuiWidget separator = new GuiWidget(1' 2);  					separator.BackgroundColor = ActiveTheme.Instance.PrimaryTextColor;  					separator.Margin = new BorderDouble(4' 2);  					separator.VAnchor = VAnchor.ParentBottomTop;  					doEdittingButtonsContainer.AddChild(separator);    					Button ungroupButton = textImageButtonFactory.Generate("Ungroup".Localize());  					ungroupButton.Name = "3D View Ungroup";  					doEdittingButtonsContainer.AddChild(ungroupButton);  					ungroupButton.Click += (sender' e) =>  					{  						UngroupSelectedMeshGroup();  						UndoBuffer.ClearHistory();  					};    					Button groupButton = textImageButtonFactory.Generate("Group".Localize());  					groupButton.Name = "3D View Group";  					doEdittingButtonsContainer.AddChild(groupButton);  					groupButton.Click += (sender' e) =>  					{  						GroupSelectedMeshs();  						UndoBuffer.ClearHistory();  					};    					Button alignButton = textImageButtonFactory.Generate("Align".Localize());  					doEdittingButtonsContainer.AddChild(alignButton);  					alignButton.Click += (sender' e) =>  					{  						AlignToSelectedMeshGroup();  						UndoBuffer.ClearHistory();  					};    					Button arrangeButton = textImageButtonFactory.Generate("Arrange".Localize());  					doEdittingButtonsContainer.AddChild(arrangeButton);  					arrangeButton.Click += (sender' e) =>  					{  						AutoArrangePartsInBackground();  					};    					GuiWidget separatorTwo = new GuiWidget(1' 2);  					separatorTwo.BackgroundColor = ActiveTheme.Instance.PrimaryTextColor;  					separatorTwo.Margin = new BorderDouble(4' 2);  					separatorTwo.VAnchor = VAnchor.ParentBottomTop;  					doEdittingButtonsContainer.AddChild(separatorTwo);    					Button copyButton = textImageButtonFactory.Generate("Copy".Localize());  					copyButton.Name = "3D View Copy";  					doEdittingButtonsContainer.AddChild(copyButton);  					copyButton.Click += (sender' e) =>  					{  						MakeCopyOfGroup();  					};    					Button deleteButton = textImageButtonFactory.Generate("Remove".Localize());  					deleteButton.Name = "3D View Remove";  					doEdittingButtonsContainer.AddChild(deleteButton);  					deleteButton.Click += (sender' e) =>  					{  						DeleteSelectedMesh();  					};    					GuiWidget separatorThree = new GuiWidget(1' 2);  					separatorThree.BackgroundColor = ActiveTheme.Instance.PrimaryTextColor;  					separatorThree.Margin = new BorderDouble(4' 1);  					separatorThree.VAnchor = VAnchor.ParentBottomTop;  					doEdittingButtonsContainer.AddChild(separatorThree);    					Button cancelEditModeButton = textImageButtonFactory.Generate("Cancel".Localize()' centerText: true);  					cancelEditModeButton.Name = "3D View Cancel";  					cancelEditModeButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							if (saveButtons.Visible)  							{  								StyledMessageBox.ShowMessageBox(ExitEditingAndSaveIfRequired' "Would you like to save your changes before exiting the editor?".Localize()' "Save Changes".Localize()' StyledMessageBox.MessageType.YES_NO' "Save Changed".Localize()' "Discard Changes".Localize());  							}  							else  							{  								if (partHasBeenEdited)  								{  									ExitEditingAndSaveIfRequired(false);  								}  								else  								{  									SwitchStateToNotEditing();  								}  							}  						});  					};    					doEdittingButtonsContainer.AddChild(cancelEditModeButton);    					// put in the save button  					AddSaveAndSaveAs(doEdittingButtonsContainer);  				}    				editToolBar.AddChild(doEdittingButtonsContainer);  				buttonBottomPanel.AddChild(editToolBar);  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,View3DWidget,The following statement contains a magic number: {  				FlowLayoutWidget editToolBar = new FlowLayoutWidget();    				string progressFindPartsLabel = "Entering Editor".Localize();  				string progressFindPartsLabelFull = "{0}:".FormatWith(progressFindPartsLabel);    				processingProgressControl = new ProgressControl(progressFindPartsLabelFull' ActiveTheme.Instance.PrimaryTextColor' ActiveTheme.Instance.PrimaryAccentColor);  				processingProgressControl.VAnchor = Agg.UI.VAnchor.ParentCenter;  				editToolBar.AddChild(processingProgressControl);  				editToolBar.VAnchor |= Agg.UI.VAnchor.ParentCenter;  				processingProgressControl.Visible = false;    				// If the window is embedded (in the center panel) and there is no item loaded then don't show the add button  				enterEditButtonsContainer = new FlowLayoutWidget();  				{  					Button addButton = textImageButtonFactory.Generate("Insert".Localize()' "icon_insert_32x32.png");  					addButton.ToolTipText = "Insert an .stl' .amf or .zip file".Localize();  					addButton.Margin = new BorderDouble(right: 0);  					enterEditButtonsContainer.AddChild(addButton);  					addButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							DoAddFileAfterCreatingEditData = true;  							EnterEditAndCreateSelectionData();  						});  					};  					if (printItemWrapper != null  						&& printItemWrapper.PrintItem.ReadOnly)  					{  						addButton.Enabled = false;  					}    					ImageBuffer normalImage = StaticData.Instance.LoadIcon("icon_edit.png"' 14' 14);    					Button enterEdittingButton = textImageButtonFactory.Generate("Edit".Localize()' normalImage);  					enterEdittingButton.Name = "3D View Edit";  					enterEdittingButton.Margin = new BorderDouble(right: 4);  					enterEdittingButton.Click += (sender' e) =>  					{  						EnterEditAndCreateSelectionData();  					};    					if (printItemWrapper != null  						&& printItemWrapper.PrintItem.ReadOnly)  					{  						enterEdittingButton.Enabled = false;  					}    					Button exportButton = textImageButtonFactory.Generate("Export".Localize() + "...");    					exportButton.Margin = new BorderDouble(right: 10);  					exportButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							OpenExportWindow();  						});  					};    					enterEditButtonsContainer.AddChild(enterEdittingButton);  					enterEditButtonsContainer.AddChild(exportButton);  				}  				editToolBar.AddChild(enterEditButtonsContainer);    				doEdittingButtonsContainer = new FlowLayoutWidget();  				doEdittingButtonsContainer.Visible = false;    				{  					Button addButton = textImageButtonFactory.Generate("Insert".Localize()' "icon_insert_32x32.png");  					addButton.Margin = new BorderDouble(right: 10);  					doEdittingButtonsContainer.AddChild(addButton);  					addButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							FileDialog.OpenFileDialog(  								new OpenFileDialogParams(ApplicationSettings.OpenDesignFileParams' multiSelect: true)'  								(openParams) =>  								{  									LoadAndAddPartsToPlate(openParams.FileNames);  								});  						});  					};    					GuiWidget separator = new GuiWidget(1' 2);  					separator.BackgroundColor = ActiveTheme.Instance.PrimaryTextColor;  					separator.Margin = new BorderDouble(4' 2);  					separator.VAnchor = VAnchor.ParentBottomTop;  					doEdittingButtonsContainer.AddChild(separator);    					Button ungroupButton = textImageButtonFactory.Generate("Ungroup".Localize());  					ungroupButton.Name = "3D View Ungroup";  					doEdittingButtonsContainer.AddChild(ungroupButton);  					ungroupButton.Click += (sender' e) =>  					{  						UngroupSelectedMeshGroup();  						UndoBuffer.ClearHistory();  					};    					Button groupButton = textImageButtonFactory.Generate("Group".Localize());  					groupButton.Name = "3D View Group";  					doEdittingButtonsContainer.AddChild(groupButton);  					groupButton.Click += (sender' e) =>  					{  						GroupSelectedMeshs();  						UndoBuffer.ClearHistory();  					};    					Button alignButton = textImageButtonFactory.Generate("Align".Localize());  					doEdittingButtonsContainer.AddChild(alignButton);  					alignButton.Click += (sender' e) =>  					{  						AlignToSelectedMeshGroup();  						UndoBuffer.ClearHistory();  					};    					Button arrangeButton = textImageButtonFactory.Generate("Arrange".Localize());  					doEdittingButtonsContainer.AddChild(arrangeButton);  					arrangeButton.Click += (sender' e) =>  					{  						AutoArrangePartsInBackground();  					};    					GuiWidget separatorTwo = new GuiWidget(1' 2);  					separatorTwo.BackgroundColor = ActiveTheme.Instance.PrimaryTextColor;  					separatorTwo.Margin = new BorderDouble(4' 2);  					separatorTwo.VAnchor = VAnchor.ParentBottomTop;  					doEdittingButtonsContainer.AddChild(separatorTwo);    					Button copyButton = textImageButtonFactory.Generate("Copy".Localize());  					copyButton.Name = "3D View Copy";  					doEdittingButtonsContainer.AddChild(copyButton);  					copyButton.Click += (sender' e) =>  					{  						MakeCopyOfGroup();  					};    					Button deleteButton = textImageButtonFactory.Generate("Remove".Localize());  					deleteButton.Name = "3D View Remove";  					doEdittingButtonsContainer.AddChild(deleteButton);  					deleteButton.Click += (sender' e) =>  					{  						DeleteSelectedMesh();  					};    					GuiWidget separatorThree = new GuiWidget(1' 2);  					separatorThree.BackgroundColor = ActiveTheme.Instance.PrimaryTextColor;  					separatorThree.Margin = new BorderDouble(4' 1);  					separatorThree.VAnchor = VAnchor.ParentBottomTop;  					doEdittingButtonsContainer.AddChild(separatorThree);    					Button cancelEditModeButton = textImageButtonFactory.Generate("Cancel".Localize()' centerText: true);  					cancelEditModeButton.Name = "3D View Cancel";  					cancelEditModeButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							if (saveButtons.Visible)  							{  								StyledMessageBox.ShowMessageBox(ExitEditingAndSaveIfRequired' "Would you like to save your changes before exiting the editor?".Localize()' "Save Changes".Localize()' StyledMessageBox.MessageType.YES_NO' "Save Changed".Localize()' "Discard Changes".Localize());  							}  							else  							{  								if (partHasBeenEdited)  								{  									ExitEditingAndSaveIfRequired(false);  								}  								else  								{  									SwitchStateToNotEditing();  								}  							}  						});  					};    					doEdittingButtonsContainer.AddChild(cancelEditModeButton);    					// put in the save button  					AddSaveAndSaveAs(doEdittingButtonsContainer);  				}    				editToolBar.AddChild(doEdittingButtonsContainer);  				buttonBottomPanel.AddChild(editToolBar);  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,View3DWidget,The following statement contains a magic number: buttonRightPanelDisabledCover.BackgroundColor = new RGBA_Bytes(ActiveTheme.Instance.PrimaryBackgroundColor' 150);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,AddGridSnapSettings,The following statement contains a magic number: FlowLayoutWidget container = new FlowLayoutWidget()  			{  				Margin = new BorderDouble(5' 0)'  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,AddGridSnapSettings,The following statement contains a magic number: TextWidget snapGridLabel = new TextWidget("Snap Grid".Localize())  			{  				TextColor = ActiveTheme.Instance.PrimaryTextColor'  				VAnchor = VAnchor.ParentCenter'  				Margin = new BorderDouble(3' 0' 0' 0)'  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,AddGridSnapSettings,The following statement contains a magic number: Dictionary<double' string> snapSettings = new Dictionary<double' string>()  			{  				{ 0' "Off" }'  				{ .1' "0.1" }'  				{ .25' "0.25" }'  				{ .5' "0.5" }'  				{ 1' "1" }'  				{ 2' "2" }'  				{ 5' "5" }'  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,AddGridSnapSettings,The following statement contains a magic number: Dictionary<double' string> snapSettings = new Dictionary<double' string>()  			{  				{ 0' "Off" }'  				{ .1' "0.1" }'  				{ .25' "0.25" }'  				{ .5' "0.5" }'  				{ 1' "1" }'  				{ 2' "2" }'  				{ 5' "5" }'  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,AddGridSnapSettings,The following statement contains a magic number: Dictionary<double' string> snapSettings = new Dictionary<double' string>()  			{  				{ 0' "Off" }'  				{ .1' "0.1" }'  				{ .25' "0.25" }'  				{ .5' "0.5" }'  				{ 1' "1" }'  				{ 2' "2" }'  				{ 5' "5" }'  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,AddGridSnapSettings,The following statement contains a magic number: Dictionary<double' string> snapSettings = new Dictionary<double' string>()  			{  				{ 0' "Off" }'  				{ .1' "0.1" }'  				{ .25' "0.25" }'  				{ .5' "0.5" }'  				{ 1' "1" }'  				{ 2' "2" }'  				{ 5' "5" }'  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,AddGridSnapSettings,The following statement contains a magic number: Dictionary<double' string> snapSettings = new Dictionary<double' string>()  			{  				{ 0' "Off" }'  				{ .1' "0.1" }'  				{ .25' "0.25" }'  				{ .5' "0.5" }'  				{ 1' "1" }'  				{ 2' "2" }'  				{ 5' "5" }'  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,AddMaterialControls,The following statement contains a magic number: for (int extruderIndex = 0; extruderIndex < ActiveSliceSettings.Instance.GetValue<int>(SettingsKey.extruder_count); extruderIndex++)  			{  				FlowLayoutWidget colorSelectionContainer = new FlowLayoutWidget(FlowDirection.LeftToRight);  				colorSelectionContainer.HAnchor = HAnchor.ParentLeftRight;  				colorSelectionContainer.Padding = new BorderDouble(5);    				string colorLabelText = string.Format("{0} {1}"' "Material".Localize()' extruderIndex + 1);    				RadioButton extruderSelection = new RadioButton(colorLabelText' textColor: ActiveTheme.Instance.PrimaryTextColor);  				extruderButtons.Add(extruderSelection);  				extruderSelection.SiblingRadioButtonList = extruderButtons;  				colorSelectionContainer.AddChild(extruderSelection);  				colorSelectionContainer.AddChild(new HorizontalSpacer());  				int extruderIndexLocal = extruderIndex;  				extruderSelection.Click += (sender' e) =>  				{  					if (SelectedMeshGroupIndex != -1)  					{  						foreach (Mesh mesh in SelectedMeshGroup.Meshes)  						{  							MeshMaterialData material = MeshMaterialData.Get(mesh);  							if (material.MaterialIndex != extruderIndexLocal + 1)  							{  								material.MaterialIndex = extruderIndexLocal + 1;  								PartHasBeenChanged();  							}  						}  					}  				};    				this.SelectionChanged += (sender' e) =>  				{  					if (SelectedMeshGroup != null)  					{  						Mesh mesh = SelectedMeshGroup.Meshes[0];  						MeshMaterialData material = MeshMaterialData.Get(mesh);    						for (int i = 0; i < extruderButtons.Count; i++)  						{  							if (material.MaterialIndex - 1 == i)  							{  								((RadioButton)extruderButtons[i]).Checked = true;  							}  						}  					}  				};    				buttonPanel.AddChild(colorSelectionContainer);  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,AddRotateControls,The following statement contains a magic number: degreesContainer.Padding = new BorderDouble(5);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,AddRotateControls,The following statement contains a magic number: MHNumberEdit degreesControl = new MHNumberEdit(45' pixelWidth: 40' allowNegatives: true' allowDecimals: true' increment: 5' minValue: -360' maxValue: 360);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,AddRotateControls,The following statement contains a magic number: MHNumberEdit degreesControl = new MHNumberEdit(45' pixelWidth: 40' allowNegatives: true' allowDecimals: true' increment: 5' minValue: -360' maxValue: 360);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,AddRotateControls,The following statement contains a magic number: MHNumberEdit degreesControl = new MHNumberEdit(45' pixelWidth: 40' allowNegatives: true' allowDecimals: true' increment: 5' minValue: -360' maxValue: 360);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,AddRotateControls,The following statement contains a magic number: MHNumberEdit degreesControl = new MHNumberEdit(45' pixelWidth: 40' allowNegatives: true' allowDecimals: true' increment: 5' minValue: -360' maxValue: 360);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,AddRotateControls,The following statement contains a magic number: MHNumberEdit degreesControl = new MHNumberEdit(45' pixelWidth: 40' allowNegatives: true' allowDecimals: true' increment: 5' minValue: -360' maxValue: 360);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,AddRotateControls,The following statement contains a magic number: ImageBuffer rotateImage = StaticData.Instance.LoadIcon("icon_rotate_32x32.png"' 32' 32);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,AddRotateControls,The following statement contains a magic number: ImageBuffer rotateImage = StaticData.Instance.LoadIcon("icon_rotate_32x32.png"' 32' 32);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,AddRotateControls,The following statement contains a magic number: TextWidget centeredX = new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,AddRotateControls,The following statement contains a magic number: centeredX.Margin = new BorderDouble(3' 0' 0' 0);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,AddRotateControls,The following statement contains a magic number: TextWidget centeredY = new TextWidget("Y"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,AddRotateControls,The following statement contains a magic number: centeredY.Margin = new BorderDouble(3' 0' 0' 0);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,AddRotateControls,The following statement contains a magic number: TextWidget centeredZ = new TextWidget("Z"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,AddRotateControls,The following statement contains a magic number: centeredZ.Margin = new BorderDouble(3' 0' 0' 0);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,AddSaveAndSaveAs,The following statement contains a magic number: splitButtonFactory.FixedHeight = 40 * GuiWidget.DeviceScale;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,AutoSpin,The following statement contains a magic number: if (!HasBeenClosed && autoRotating)  			{  				// add it back in to keep it running.  				UiThread.RunOnIdle(AutoSpin' .04);    				if ((!timeSinceLastSpin.IsRunning || timeSinceLastSpin.ElapsedMilliseconds > 50)  					&& hasDrawn)  				{  					hasDrawn = false;  					timeSinceLastSpin.Restart();    					Quaternion currentRotation = meshViewerWidget.TrackballTumbleWidget.TrackBallController.CurrentRotation.GetRotation();  					Quaternion invertedRotation = Quaternion.Invert(currentRotation);    					Quaternion rotateAboutZ = Quaternion.FromEulerAngles(new Vector3(0' 0' .01));  					rotateAboutZ = invertedRotation * rotateAboutZ * currentRotation;  					meshViewerWidget.TrackballTumbleWidget.TrackBallController.Rotate(rotateAboutZ);  					Invalidate();  				}  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,AutoSpin,The following statement contains a magic number: if (!HasBeenClosed && autoRotating)  			{  				// add it back in to keep it running.  				UiThread.RunOnIdle(AutoSpin' .04);    				if ((!timeSinceLastSpin.IsRunning || timeSinceLastSpin.ElapsedMilliseconds > 50)  					&& hasDrawn)  				{  					hasDrawn = false;  					timeSinceLastSpin.Restart();    					Quaternion currentRotation = meshViewerWidget.TrackballTumbleWidget.TrackBallController.CurrentRotation.GetRotation();  					Quaternion invertedRotation = Quaternion.Invert(currentRotation);    					Quaternion rotateAboutZ = Quaternion.FromEulerAngles(new Vector3(0' 0' .01));  					rotateAboutZ = invertedRotation * rotateAboutZ * currentRotation;  					meshViewerWidget.TrackballTumbleWidget.TrackBallController.Rotate(rotateAboutZ);  					Invalidate();  				}  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,AutoSpin,The following statement contains a magic number: if (!HasBeenClosed && autoRotating)  			{  				// add it back in to keep it running.  				UiThread.RunOnIdle(AutoSpin' .04);    				if ((!timeSinceLastSpin.IsRunning || timeSinceLastSpin.ElapsedMilliseconds > 50)  					&& hasDrawn)  				{  					hasDrawn = false;  					timeSinceLastSpin.Restart();    					Quaternion currentRotation = meshViewerWidget.TrackballTumbleWidget.TrackBallController.CurrentRotation.GetRotation();  					Quaternion invertedRotation = Quaternion.Invert(currentRotation);    					Quaternion rotateAboutZ = Quaternion.FromEulerAngles(new Vector3(0' 0' .01));  					rotateAboutZ = invertedRotation * rotateAboutZ * currentRotation;  					meshViewerWidget.TrackballTumbleWidget.TrackBallController.Rotate(rotateAboutZ);  					Invalidate();  				}  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,ReportProgressChanged,The following statement contains a magic number: if (!timeSinceReported.IsRunning || timeSinceReported.ElapsedMilliseconds > 100  				|| processingState != processingProgressControl.ProgressMessage)  			{  				UiThread.RunOnIdle(() =>  				{  					processingProgressControl.RatioComplete = progress0To1;  					processingProgressControl.ProgressMessage = processingState;  				});  				timeSinceReported.Restart();  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,CreateRightButtonPanel,The following statement contains a magic number: buttonRightPanel.Width = 200;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,CreateRightButtonPanel,The following statement contains a magic number: if(true) // this will not be enabled until the new scene_bundle gets merged  			{  				FlowLayoutWidget undoRedoButtons = new FlowLayoutWidget()  				{  					VAnchor = VAnchor.FitToChildren | VAnchor.ParentTop'  					HAnchor = HAnchor.FitToChildren | HAnchor.ParentCenter'  				};  				double oldWidth = WhiteButtonFactory.FixedWidth;  				WhiteButtonFactory.FixedWidth = WhiteButtonFactory.FixedWidth / 2;                  Button undoButton = WhiteButtonFactory.Generate("Undo".Localize()' centerText: true);  				undoButton.Name = "3D View Undo";  				undoButton.Enabled = false;  				undoButton.Click += (sender' e) =>  				{  					UndoBuffer.Undo();  				};  				undoRedoButtons.AddChild(undoButton);    				Button redoButton = WhiteButtonFactory.Generate("Redo".Localize()' centerText: true);  				redoButton.Name = "3D View Redo";  				redoButton.Enabled = false;  				redoButton.Click += (sender' e) =>  				{  					UndoBuffer.Redo();  				};  				undoRedoButtons.AddChild(redoButton);  				buttonRightPanel.AddChild(undoRedoButtons);    				UndoBuffer.Changed += (sender' e) =>  				{  					undoButton.Enabled = UndoBuffer.UndoCount > 0;  					redoButton.Enabled = UndoBuffer.RedoCount > 0;  				};  				WhiteButtonFactory.FixedWidth = oldWidth;  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,CreateRightButtonPanel,The following statement contains a magic number: {  				BorderDouble buttonMargin = new BorderDouble(top: 3);    				expandRotateOptions = ExpandMenuOptionFactory.GenerateCheckBoxButton(  					"Rotate".Localize().ToUpper()'  					View3DWidget.ArrowRight'  					View3DWidget.ArrowDown);  				expandRotateOptions.Margin = new BorderDouble(bottom: 2);  				buttonRightPanel.AddChild(expandRotateOptions);  				expandRotateOptions.CheckedStateChanged += expandRotateOptions_CheckedStateChanged;    				rotateOptionContainer = new FlowLayoutWidget(FlowDirection.TopToBottom);  				rotateOptionContainer.HAnchor = HAnchor.ParentLeftRight;  				rotateOptionContainer.Visible = false;  				buttonRightPanel.AddChild(rotateOptionContainer);    				buttonRightPanel.AddChild(new ScaleControls(this));    				buttonRightPanel.AddChild(new MirrorControls(this));    				PluginFinder<SideBarPlugin> SideBarPlugins = new PluginFinder<SideBarPlugin>();  				foreach (SideBarPlugin plugin in SideBarPlugins.Plugins)  				{  					buttonRightPanel.AddChild(plugin.CreateSideBarTool(this));  				}    				// put in the material options  				int numberOfExtruders = ActiveSliceSettings.Instance.GetValue<int>(SettingsKey.extruder_count);    				expandMaterialOptions = ExpandMenuOptionFactory.GenerateCheckBoxButton("Materials".Localize().ToUpper()'  					View3DWidget.ArrowRight'  					View3DWidget.ArrowDown);  				expandMaterialOptions.Margin = new BorderDouble(bottom: 2);  				expandMaterialOptions.CheckedStateChanged += expandMaterialOptions_CheckedStateChanged;    				if (numberOfExtruders > 1)  				{  					buttonRightPanel.AddChild(expandMaterialOptions);    					materialOptionContainer = new FlowLayoutWidget(FlowDirection.TopToBottom);  					materialOptionContainer.HAnchor = HAnchor.ParentLeftRight;  					materialOptionContainer.Visible = false;    					buttonRightPanel.AddChild(materialOptionContainer);  					AddMaterialControls(materialOptionContainer);  				}    				// put in the view options  				{  					expandViewOptions = ExpandMenuOptionFactory.GenerateCheckBoxButton("Display".Localize().ToUpper()'  					View3DWidget.ArrowRight'  					View3DWidget.ArrowDown);  					expandViewOptions.Margin = new BorderDouble(bottom: 2);  					buttonRightPanel.AddChild(expandViewOptions);  					expandViewOptions.CheckedStateChanged += expandViewOptions_CheckedStateChanged;    					viewOptionContainer = new FlowLayoutWidget(FlowDirection.TopToBottom);  					viewOptionContainer.HAnchor = HAnchor.ParentLeftRight;  					viewOptionContainer.Padding = new BorderDouble(left: 4);  					viewOptionContainer.Visible = false;  					{  						CheckBox showBedCheckBox = new CheckBox("Show Print Bed".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor);  						showBedCheckBox.Checked = true;  						showBedCheckBox.CheckedStateChanged += (sender' e) =>  						{  							meshViewerWidget.RenderBed = showBedCheckBox.Checked;  						};  						viewOptionContainer.AddChild(showBedCheckBox);    						if (buildHeight > 0)  						{  							CheckBox showBuildVolumeCheckBox = new CheckBox("Show Print Area".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor);  							showBuildVolumeCheckBox.Checked = false;  							showBuildVolumeCheckBox.Margin = new BorderDouble(bottom: 5);  							showBuildVolumeCheckBox.CheckedStateChanged += (sender' e) =>  							{  								meshViewerWidget.RenderBuildVolume = showBuildVolumeCheckBox.Checked;  							};  							viewOptionContainer.AddChild(showBuildVolumeCheckBox);  						}    						if (UserSettings.Instance.IsTouchScreen)  						{  							UserSettings.Instance.set(UserSettingsKey.defaultRenderSetting' RenderTypes.Shaded.ToString());  						}  						else  						{  							CreateRenderTypeRadioButtons(viewOptionContainer);  						}  					}  					buttonRightPanel.AddChild(viewOptionContainer);  				}    				GuiWidget verticalSpacer = new GuiWidget();  				verticalSpacer.VAnchor = VAnchor.ParentBottomTop;  				buttonRightPanel.AddChild(verticalSpacer);    				AddGridSnapSettings(buttonRightPanel);  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,CreateRightButtonPanel,The following statement contains a magic number: {  				BorderDouble buttonMargin = new BorderDouble(top: 3);    				expandRotateOptions = ExpandMenuOptionFactory.GenerateCheckBoxButton(  					"Rotate".Localize().ToUpper()'  					View3DWidget.ArrowRight'  					View3DWidget.ArrowDown);  				expandRotateOptions.Margin = new BorderDouble(bottom: 2);  				buttonRightPanel.AddChild(expandRotateOptions);  				expandRotateOptions.CheckedStateChanged += expandRotateOptions_CheckedStateChanged;    				rotateOptionContainer = new FlowLayoutWidget(FlowDirection.TopToBottom);  				rotateOptionContainer.HAnchor = HAnchor.ParentLeftRight;  				rotateOptionContainer.Visible = false;  				buttonRightPanel.AddChild(rotateOptionContainer);    				buttonRightPanel.AddChild(new ScaleControls(this));    				buttonRightPanel.AddChild(new MirrorControls(this));    				PluginFinder<SideBarPlugin> SideBarPlugins = new PluginFinder<SideBarPlugin>();  				foreach (SideBarPlugin plugin in SideBarPlugins.Plugins)  				{  					buttonRightPanel.AddChild(plugin.CreateSideBarTool(this));  				}    				// put in the material options  				int numberOfExtruders = ActiveSliceSettings.Instance.GetValue<int>(SettingsKey.extruder_count);    				expandMaterialOptions = ExpandMenuOptionFactory.GenerateCheckBoxButton("Materials".Localize().ToUpper()'  					View3DWidget.ArrowRight'  					View3DWidget.ArrowDown);  				expandMaterialOptions.Margin = new BorderDouble(bottom: 2);  				expandMaterialOptions.CheckedStateChanged += expandMaterialOptions_CheckedStateChanged;    				if (numberOfExtruders > 1)  				{  					buttonRightPanel.AddChild(expandMaterialOptions);    					materialOptionContainer = new FlowLayoutWidget(FlowDirection.TopToBottom);  					materialOptionContainer.HAnchor = HAnchor.ParentLeftRight;  					materialOptionContainer.Visible = false;    					buttonRightPanel.AddChild(materialOptionContainer);  					AddMaterialControls(materialOptionContainer);  				}    				// put in the view options  				{  					expandViewOptions = ExpandMenuOptionFactory.GenerateCheckBoxButton("Display".Localize().ToUpper()'  					View3DWidget.ArrowRight'  					View3DWidget.ArrowDown);  					expandViewOptions.Margin = new BorderDouble(bottom: 2);  					buttonRightPanel.AddChild(expandViewOptions);  					expandViewOptions.CheckedStateChanged += expandViewOptions_CheckedStateChanged;    					viewOptionContainer = new FlowLayoutWidget(FlowDirection.TopToBottom);  					viewOptionContainer.HAnchor = HAnchor.ParentLeftRight;  					viewOptionContainer.Padding = new BorderDouble(left: 4);  					viewOptionContainer.Visible = false;  					{  						CheckBox showBedCheckBox = new CheckBox("Show Print Bed".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor);  						showBedCheckBox.Checked = true;  						showBedCheckBox.CheckedStateChanged += (sender' e) =>  						{  							meshViewerWidget.RenderBed = showBedCheckBox.Checked;  						};  						viewOptionContainer.AddChild(showBedCheckBox);    						if (buildHeight > 0)  						{  							CheckBox showBuildVolumeCheckBox = new CheckBox("Show Print Area".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor);  							showBuildVolumeCheckBox.Checked = false;  							showBuildVolumeCheckBox.Margin = new BorderDouble(bottom: 5);  							showBuildVolumeCheckBox.CheckedStateChanged += (sender' e) =>  							{  								meshViewerWidget.RenderBuildVolume = showBuildVolumeCheckBox.Checked;  							};  							viewOptionContainer.AddChild(showBuildVolumeCheckBox);  						}    						if (UserSettings.Instance.IsTouchScreen)  						{  							UserSettings.Instance.set(UserSettingsKey.defaultRenderSetting' RenderTypes.Shaded.ToString());  						}  						else  						{  							CreateRenderTypeRadioButtons(viewOptionContainer);  						}  					}  					buttonRightPanel.AddChild(viewOptionContainer);  				}    				GuiWidget verticalSpacer = new GuiWidget();  				verticalSpacer.VAnchor = VAnchor.ParentBottomTop;  				buttonRightPanel.AddChild(verticalSpacer);    				AddGridSnapSettings(buttonRightPanel);  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,CreateRightButtonPanel,The following statement contains a magic number: {  				BorderDouble buttonMargin = new BorderDouble(top: 3);    				expandRotateOptions = ExpandMenuOptionFactory.GenerateCheckBoxButton(  					"Rotate".Localize().ToUpper()'  					View3DWidget.ArrowRight'  					View3DWidget.ArrowDown);  				expandRotateOptions.Margin = new BorderDouble(bottom: 2);  				buttonRightPanel.AddChild(expandRotateOptions);  				expandRotateOptions.CheckedStateChanged += expandRotateOptions_CheckedStateChanged;    				rotateOptionContainer = new FlowLayoutWidget(FlowDirection.TopToBottom);  				rotateOptionContainer.HAnchor = HAnchor.ParentLeftRight;  				rotateOptionContainer.Visible = false;  				buttonRightPanel.AddChild(rotateOptionContainer);    				buttonRightPanel.AddChild(new ScaleControls(this));    				buttonRightPanel.AddChild(new MirrorControls(this));    				PluginFinder<SideBarPlugin> SideBarPlugins = new PluginFinder<SideBarPlugin>();  				foreach (SideBarPlugin plugin in SideBarPlugins.Plugins)  				{  					buttonRightPanel.AddChild(plugin.CreateSideBarTool(this));  				}    				// put in the material options  				int numberOfExtruders = ActiveSliceSettings.Instance.GetValue<int>(SettingsKey.extruder_count);    				expandMaterialOptions = ExpandMenuOptionFactory.GenerateCheckBoxButton("Materials".Localize().ToUpper()'  					View3DWidget.ArrowRight'  					View3DWidget.ArrowDown);  				expandMaterialOptions.Margin = new BorderDouble(bottom: 2);  				expandMaterialOptions.CheckedStateChanged += expandMaterialOptions_CheckedStateChanged;    				if (numberOfExtruders > 1)  				{  					buttonRightPanel.AddChild(expandMaterialOptions);    					materialOptionContainer = new FlowLayoutWidget(FlowDirection.TopToBottom);  					materialOptionContainer.HAnchor = HAnchor.ParentLeftRight;  					materialOptionContainer.Visible = false;    					buttonRightPanel.AddChild(materialOptionContainer);  					AddMaterialControls(materialOptionContainer);  				}    				// put in the view options  				{  					expandViewOptions = ExpandMenuOptionFactory.GenerateCheckBoxButton("Display".Localize().ToUpper()'  					View3DWidget.ArrowRight'  					View3DWidget.ArrowDown);  					expandViewOptions.Margin = new BorderDouble(bottom: 2);  					buttonRightPanel.AddChild(expandViewOptions);  					expandViewOptions.CheckedStateChanged += expandViewOptions_CheckedStateChanged;    					viewOptionContainer = new FlowLayoutWidget(FlowDirection.TopToBottom);  					viewOptionContainer.HAnchor = HAnchor.ParentLeftRight;  					viewOptionContainer.Padding = new BorderDouble(left: 4);  					viewOptionContainer.Visible = false;  					{  						CheckBox showBedCheckBox = new CheckBox("Show Print Bed".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor);  						showBedCheckBox.Checked = true;  						showBedCheckBox.CheckedStateChanged += (sender' e) =>  						{  							meshViewerWidget.RenderBed = showBedCheckBox.Checked;  						};  						viewOptionContainer.AddChild(showBedCheckBox);    						if (buildHeight > 0)  						{  							CheckBox showBuildVolumeCheckBox = new CheckBox("Show Print Area".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor);  							showBuildVolumeCheckBox.Checked = false;  							showBuildVolumeCheckBox.Margin = new BorderDouble(bottom: 5);  							showBuildVolumeCheckBox.CheckedStateChanged += (sender' e) =>  							{  								meshViewerWidget.RenderBuildVolume = showBuildVolumeCheckBox.Checked;  							};  							viewOptionContainer.AddChild(showBuildVolumeCheckBox);  						}    						if (UserSettings.Instance.IsTouchScreen)  						{  							UserSettings.Instance.set(UserSettingsKey.defaultRenderSetting' RenderTypes.Shaded.ToString());  						}  						else  						{  							CreateRenderTypeRadioButtons(viewOptionContainer);  						}  					}  					buttonRightPanel.AddChild(viewOptionContainer);  				}    				GuiWidget verticalSpacer = new GuiWidget();  				verticalSpacer.VAnchor = VAnchor.ParentBottomTop;  				buttonRightPanel.AddChild(verticalSpacer);    				AddGridSnapSettings(buttonRightPanel);  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,CreateRightButtonPanel,The following statement contains a magic number: {  				BorderDouble buttonMargin = new BorderDouble(top: 3);    				expandRotateOptions = ExpandMenuOptionFactory.GenerateCheckBoxButton(  					"Rotate".Localize().ToUpper()'  					View3DWidget.ArrowRight'  					View3DWidget.ArrowDown);  				expandRotateOptions.Margin = new BorderDouble(bottom: 2);  				buttonRightPanel.AddChild(expandRotateOptions);  				expandRotateOptions.CheckedStateChanged += expandRotateOptions_CheckedStateChanged;    				rotateOptionContainer = new FlowLayoutWidget(FlowDirection.TopToBottom);  				rotateOptionContainer.HAnchor = HAnchor.ParentLeftRight;  				rotateOptionContainer.Visible = false;  				buttonRightPanel.AddChild(rotateOptionContainer);    				buttonRightPanel.AddChild(new ScaleControls(this));    				buttonRightPanel.AddChild(new MirrorControls(this));    				PluginFinder<SideBarPlugin> SideBarPlugins = new PluginFinder<SideBarPlugin>();  				foreach (SideBarPlugin plugin in SideBarPlugins.Plugins)  				{  					buttonRightPanel.AddChild(plugin.CreateSideBarTool(this));  				}    				// put in the material options  				int numberOfExtruders = ActiveSliceSettings.Instance.GetValue<int>(SettingsKey.extruder_count);    				expandMaterialOptions = ExpandMenuOptionFactory.GenerateCheckBoxButton("Materials".Localize().ToUpper()'  					View3DWidget.ArrowRight'  					View3DWidget.ArrowDown);  				expandMaterialOptions.Margin = new BorderDouble(bottom: 2);  				expandMaterialOptions.CheckedStateChanged += expandMaterialOptions_CheckedStateChanged;    				if (numberOfExtruders > 1)  				{  					buttonRightPanel.AddChild(expandMaterialOptions);    					materialOptionContainer = new FlowLayoutWidget(FlowDirection.TopToBottom);  					materialOptionContainer.HAnchor = HAnchor.ParentLeftRight;  					materialOptionContainer.Visible = false;    					buttonRightPanel.AddChild(materialOptionContainer);  					AddMaterialControls(materialOptionContainer);  				}    				// put in the view options  				{  					expandViewOptions = ExpandMenuOptionFactory.GenerateCheckBoxButton("Display".Localize().ToUpper()'  					View3DWidget.ArrowRight'  					View3DWidget.ArrowDown);  					expandViewOptions.Margin = new BorderDouble(bottom: 2);  					buttonRightPanel.AddChild(expandViewOptions);  					expandViewOptions.CheckedStateChanged += expandViewOptions_CheckedStateChanged;    					viewOptionContainer = new FlowLayoutWidget(FlowDirection.TopToBottom);  					viewOptionContainer.HAnchor = HAnchor.ParentLeftRight;  					viewOptionContainer.Padding = new BorderDouble(left: 4);  					viewOptionContainer.Visible = false;  					{  						CheckBox showBedCheckBox = new CheckBox("Show Print Bed".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor);  						showBedCheckBox.Checked = true;  						showBedCheckBox.CheckedStateChanged += (sender' e) =>  						{  							meshViewerWidget.RenderBed = showBedCheckBox.Checked;  						};  						viewOptionContainer.AddChild(showBedCheckBox);    						if (buildHeight > 0)  						{  							CheckBox showBuildVolumeCheckBox = new CheckBox("Show Print Area".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor);  							showBuildVolumeCheckBox.Checked = false;  							showBuildVolumeCheckBox.Margin = new BorderDouble(bottom: 5);  							showBuildVolumeCheckBox.CheckedStateChanged += (sender' e) =>  							{  								meshViewerWidget.RenderBuildVolume = showBuildVolumeCheckBox.Checked;  							};  							viewOptionContainer.AddChild(showBuildVolumeCheckBox);  						}    						if (UserSettings.Instance.IsTouchScreen)  						{  							UserSettings.Instance.set(UserSettingsKey.defaultRenderSetting' RenderTypes.Shaded.ToString());  						}  						else  						{  							CreateRenderTypeRadioButtons(viewOptionContainer);  						}  					}  					buttonRightPanel.AddChild(viewOptionContainer);  				}    				GuiWidget verticalSpacer = new GuiWidget();  				verticalSpacer.VAnchor = VAnchor.ParentBottomTop;  				buttonRightPanel.AddChild(verticalSpacer);    				AddGridSnapSettings(buttonRightPanel);  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,CreateRightButtonPanel,The following statement contains a magic number: {  				BorderDouble buttonMargin = new BorderDouble(top: 3);    				expandRotateOptions = ExpandMenuOptionFactory.GenerateCheckBoxButton(  					"Rotate".Localize().ToUpper()'  					View3DWidget.ArrowRight'  					View3DWidget.ArrowDown);  				expandRotateOptions.Margin = new BorderDouble(bottom: 2);  				buttonRightPanel.AddChild(expandRotateOptions);  				expandRotateOptions.CheckedStateChanged += expandRotateOptions_CheckedStateChanged;    				rotateOptionContainer = new FlowLayoutWidget(FlowDirection.TopToBottom);  				rotateOptionContainer.HAnchor = HAnchor.ParentLeftRight;  				rotateOptionContainer.Visible = false;  				buttonRightPanel.AddChild(rotateOptionContainer);    				buttonRightPanel.AddChild(new ScaleControls(this));    				buttonRightPanel.AddChild(new MirrorControls(this));    				PluginFinder<SideBarPlugin> SideBarPlugins = new PluginFinder<SideBarPlugin>();  				foreach (SideBarPlugin plugin in SideBarPlugins.Plugins)  				{  					buttonRightPanel.AddChild(plugin.CreateSideBarTool(this));  				}    				// put in the material options  				int numberOfExtruders = ActiveSliceSettings.Instance.GetValue<int>(SettingsKey.extruder_count);    				expandMaterialOptions = ExpandMenuOptionFactory.GenerateCheckBoxButton("Materials".Localize().ToUpper()'  					View3DWidget.ArrowRight'  					View3DWidget.ArrowDown);  				expandMaterialOptions.Margin = new BorderDouble(bottom: 2);  				expandMaterialOptions.CheckedStateChanged += expandMaterialOptions_CheckedStateChanged;    				if (numberOfExtruders > 1)  				{  					buttonRightPanel.AddChild(expandMaterialOptions);    					materialOptionContainer = new FlowLayoutWidget(FlowDirection.TopToBottom);  					materialOptionContainer.HAnchor = HAnchor.ParentLeftRight;  					materialOptionContainer.Visible = false;    					buttonRightPanel.AddChild(materialOptionContainer);  					AddMaterialControls(materialOptionContainer);  				}    				// put in the view options  				{  					expandViewOptions = ExpandMenuOptionFactory.GenerateCheckBoxButton("Display".Localize().ToUpper()'  					View3DWidget.ArrowRight'  					View3DWidget.ArrowDown);  					expandViewOptions.Margin = new BorderDouble(bottom: 2);  					buttonRightPanel.AddChild(expandViewOptions);  					expandViewOptions.CheckedStateChanged += expandViewOptions_CheckedStateChanged;    					viewOptionContainer = new FlowLayoutWidget(FlowDirection.TopToBottom);  					viewOptionContainer.HAnchor = HAnchor.ParentLeftRight;  					viewOptionContainer.Padding = new BorderDouble(left: 4);  					viewOptionContainer.Visible = false;  					{  						CheckBox showBedCheckBox = new CheckBox("Show Print Bed".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor);  						showBedCheckBox.Checked = true;  						showBedCheckBox.CheckedStateChanged += (sender' e) =>  						{  							meshViewerWidget.RenderBed = showBedCheckBox.Checked;  						};  						viewOptionContainer.AddChild(showBedCheckBox);    						if (buildHeight > 0)  						{  							CheckBox showBuildVolumeCheckBox = new CheckBox("Show Print Area".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor);  							showBuildVolumeCheckBox.Checked = false;  							showBuildVolumeCheckBox.Margin = new BorderDouble(bottom: 5);  							showBuildVolumeCheckBox.CheckedStateChanged += (sender' e) =>  							{  								meshViewerWidget.RenderBuildVolume = showBuildVolumeCheckBox.Checked;  							};  							viewOptionContainer.AddChild(showBuildVolumeCheckBox);  						}    						if (UserSettings.Instance.IsTouchScreen)  						{  							UserSettings.Instance.set(UserSettingsKey.defaultRenderSetting' RenderTypes.Shaded.ToString());  						}  						else  						{  							CreateRenderTypeRadioButtons(viewOptionContainer);  						}  					}  					buttonRightPanel.AddChild(viewOptionContainer);  				}    				GuiWidget verticalSpacer = new GuiWidget();  				verticalSpacer.VAnchor = VAnchor.ParentBottomTop;  				buttonRightPanel.AddChild(verticalSpacer);    				AddGridSnapSettings(buttonRightPanel);  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,CreateRightButtonPanel,The following statement contains a magic number: {  				BorderDouble buttonMargin = new BorderDouble(top: 3);    				expandRotateOptions = ExpandMenuOptionFactory.GenerateCheckBoxButton(  					"Rotate".Localize().ToUpper()'  					View3DWidget.ArrowRight'  					View3DWidget.ArrowDown);  				expandRotateOptions.Margin = new BorderDouble(bottom: 2);  				buttonRightPanel.AddChild(expandRotateOptions);  				expandRotateOptions.CheckedStateChanged += expandRotateOptions_CheckedStateChanged;    				rotateOptionContainer = new FlowLayoutWidget(FlowDirection.TopToBottom);  				rotateOptionContainer.HAnchor = HAnchor.ParentLeftRight;  				rotateOptionContainer.Visible = false;  				buttonRightPanel.AddChild(rotateOptionContainer);    				buttonRightPanel.AddChild(new ScaleControls(this));    				buttonRightPanel.AddChild(new MirrorControls(this));    				PluginFinder<SideBarPlugin> SideBarPlugins = new PluginFinder<SideBarPlugin>();  				foreach (SideBarPlugin plugin in SideBarPlugins.Plugins)  				{  					buttonRightPanel.AddChild(plugin.CreateSideBarTool(this));  				}    				// put in the material options  				int numberOfExtruders = ActiveSliceSettings.Instance.GetValue<int>(SettingsKey.extruder_count);    				expandMaterialOptions = ExpandMenuOptionFactory.GenerateCheckBoxButton("Materials".Localize().ToUpper()'  					View3DWidget.ArrowRight'  					View3DWidget.ArrowDown);  				expandMaterialOptions.Margin = new BorderDouble(bottom: 2);  				expandMaterialOptions.CheckedStateChanged += expandMaterialOptions_CheckedStateChanged;    				if (numberOfExtruders > 1)  				{  					buttonRightPanel.AddChild(expandMaterialOptions);    					materialOptionContainer = new FlowLayoutWidget(FlowDirection.TopToBottom);  					materialOptionContainer.HAnchor = HAnchor.ParentLeftRight;  					materialOptionContainer.Visible = false;    					buttonRightPanel.AddChild(materialOptionContainer);  					AddMaterialControls(materialOptionContainer);  				}    				// put in the view options  				{  					expandViewOptions = ExpandMenuOptionFactory.GenerateCheckBoxButton("Display".Localize().ToUpper()'  					View3DWidget.ArrowRight'  					View3DWidget.ArrowDown);  					expandViewOptions.Margin = new BorderDouble(bottom: 2);  					buttonRightPanel.AddChild(expandViewOptions);  					expandViewOptions.CheckedStateChanged += expandViewOptions_CheckedStateChanged;    					viewOptionContainer = new FlowLayoutWidget(FlowDirection.TopToBottom);  					viewOptionContainer.HAnchor = HAnchor.ParentLeftRight;  					viewOptionContainer.Padding = new BorderDouble(left: 4);  					viewOptionContainer.Visible = false;  					{  						CheckBox showBedCheckBox = new CheckBox("Show Print Bed".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor);  						showBedCheckBox.Checked = true;  						showBedCheckBox.CheckedStateChanged += (sender' e) =>  						{  							meshViewerWidget.RenderBed = showBedCheckBox.Checked;  						};  						viewOptionContainer.AddChild(showBedCheckBox);    						if (buildHeight > 0)  						{  							CheckBox showBuildVolumeCheckBox = new CheckBox("Show Print Area".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor);  							showBuildVolumeCheckBox.Checked = false;  							showBuildVolumeCheckBox.Margin = new BorderDouble(bottom: 5);  							showBuildVolumeCheckBox.CheckedStateChanged += (sender' e) =>  							{  								meshViewerWidget.RenderBuildVolume = showBuildVolumeCheckBox.Checked;  							};  							viewOptionContainer.AddChild(showBuildVolumeCheckBox);  						}    						if (UserSettings.Instance.IsTouchScreen)  						{  							UserSettings.Instance.set(UserSettingsKey.defaultRenderSetting' RenderTypes.Shaded.ToString());  						}  						else  						{  							CreateRenderTypeRadioButtons(viewOptionContainer);  						}  					}  					buttonRightPanel.AddChild(viewOptionContainer);  				}    				GuiWidget verticalSpacer = new GuiWidget();  				verticalSpacer.VAnchor = VAnchor.ParentBottomTop;  				buttonRightPanel.AddChild(verticalSpacer);    				AddGridSnapSettings(buttonRightPanel);  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,CreateRightButtonPanel,The following statement contains a magic number: buttonRightPanel.Padding = new BorderDouble(6' 6);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,CreateRightButtonPanel,The following statement contains a magic number: buttonRightPanel.Padding = new BorderDouble(6' 6);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,GenerateHorizontalRule,The following statement contains a magic number: horizontalRule.Margin = new BorderDouble(0' 1' 0' 3);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,GenerateHorizontalRule,The following statement contains a magic number: horizontalRule.BackgroundColor = new RGBA_Bytes(255' 255' 255' 200);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,GenerateHorizontalRule,The following statement contains a magic number: horizontalRule.BackgroundColor = new RGBA_Bytes(255' 255' 255' 200);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,GenerateHorizontalRule,The following statement contains a magic number: horizontalRule.BackgroundColor = new RGBA_Bytes(255' 255' 255' 200);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,GenerateHorizontalRule,The following statement contains a magic number: horizontalRule.BackgroundColor = new RGBA_Bytes(255' 255' 255' 200);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,loadAndAddPartsToPlate,The following statement contains a magic number: if (filesToLoadIncludingZips != null && filesToLoadIncludingZips.Length > 0)  			{  				for (int i = 0; i < filesToLoadIncludingZips.Length; i++)  				{  					string loadedFileName = filesToLoadIncludingZips[i];  					string extension = Path.GetExtension(loadedFileName).ToUpper();  					if ((extension != "" && MeshFileIo.ValidFileExtensions().Contains(extension)))  					{  						filesToLoad.Add(loadedFileName);  					}  					else if (extension == ".ZIP")  					{  						ProjectFileHandler project = new ProjectFileHandler(null);  						List<PrintItem> partFiles = project.ImportFromProjectArchive(loadedFileName);  						if (partFiles != null)  						{  							foreach (PrintItem part in partFiles)  							{  								filesToLoad.Add(part.FileLocation);  							}  						}  					}  				}    				string progressMessage = "Loading Parts...".Localize();  				double ratioPerFile = 1.0 / filesToLoad.Count;  				double currentRatioDone = 0;  				for (int i = 0; i < filesToLoad.Count; i++)  				{  					string loadedFileName = filesToLoad[i];  					List<MeshGroup> loadedMeshGroups = MeshFileIo.Load(Path.GetFullPath(loadedFileName)' (double progress0To1' string processingState' out bool continueProcessing) =>  					{  						continueProcessing = !this.HasBeenClosed;  						double ratioAvailable = (ratioPerFile * .5);  						double currentRatio = currentRatioDone + progress0To1 * ratioAvailable;  						ReportProgressChanged(currentRatio' progressMessage' out continueProcessing);  					});    					if (HasBeenClosed)  					{  						return;  					}  					if (loadedMeshGroups != null)  					{  						double ratioPerSubMesh = ratioPerFile / loadedMeshGroups.Count;  						double subMeshRatioDone = 0;    						for (int subMeshIndex = 0; subMeshIndex < loadedMeshGroups.Count; subMeshIndex++)  						{  							MeshGroup meshGroup = loadedMeshGroups[subMeshIndex];    							PlatingHelper.FindPositionForGroupAndAddToPlate(meshGroup' Matrix4X4.Identity' asyncPlatingDatas' asyncMeshGroups' asyncMeshGroupTransforms);  							if (HasBeenClosed)  							{  								return;  							}  							PlatingHelper.CreateITraceableForMeshGroup(asyncPlatingDatas' asyncMeshGroups' asyncMeshGroups.Count - 1' (double progress0To1' string processingState' out bool continueProcessing) =>  							{  								continueProcessing = !this.HasBeenClosed;  								double ratioAvailable = (ratioPerFile * .5);  								//                    done outer loop  +  done this loop  +first 1/2 (load)+  this part * ratioAvailable  								double currentRatio = currentRatioDone + subMeshRatioDone + ratioAvailable + progress0To1 * ratioPerSubMesh;  								ReportProgressChanged(currentRatio' progressMessage' out continueProcessing);  							});    							subMeshRatioDone += ratioPerSubMesh;  						}  					}    					currentRatioDone += ratioPerFile;  				}  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,loadAndAddPartsToPlate,The following statement contains a magic number: if (filesToLoadIncludingZips != null && filesToLoadIncludingZips.Length > 0)  			{  				for (int i = 0; i < filesToLoadIncludingZips.Length; i++)  				{  					string loadedFileName = filesToLoadIncludingZips[i];  					string extension = Path.GetExtension(loadedFileName).ToUpper();  					if ((extension != "" && MeshFileIo.ValidFileExtensions().Contains(extension)))  					{  						filesToLoad.Add(loadedFileName);  					}  					else if (extension == ".ZIP")  					{  						ProjectFileHandler project = new ProjectFileHandler(null);  						List<PrintItem> partFiles = project.ImportFromProjectArchive(loadedFileName);  						if (partFiles != null)  						{  							foreach (PrintItem part in partFiles)  							{  								filesToLoad.Add(part.FileLocation);  							}  						}  					}  				}    				string progressMessage = "Loading Parts...".Localize();  				double ratioPerFile = 1.0 / filesToLoad.Count;  				double currentRatioDone = 0;  				for (int i = 0; i < filesToLoad.Count; i++)  				{  					string loadedFileName = filesToLoad[i];  					List<MeshGroup> loadedMeshGroups = MeshFileIo.Load(Path.GetFullPath(loadedFileName)' (double progress0To1' string processingState' out bool continueProcessing) =>  					{  						continueProcessing = !this.HasBeenClosed;  						double ratioAvailable = (ratioPerFile * .5);  						double currentRatio = currentRatioDone + progress0To1 * ratioAvailable;  						ReportProgressChanged(currentRatio' progressMessage' out continueProcessing);  					});    					if (HasBeenClosed)  					{  						return;  					}  					if (loadedMeshGroups != null)  					{  						double ratioPerSubMesh = ratioPerFile / loadedMeshGroups.Count;  						double subMeshRatioDone = 0;    						for (int subMeshIndex = 0; subMeshIndex < loadedMeshGroups.Count; subMeshIndex++)  						{  							MeshGroup meshGroup = loadedMeshGroups[subMeshIndex];    							PlatingHelper.FindPositionForGroupAndAddToPlate(meshGroup' Matrix4X4.Identity' asyncPlatingDatas' asyncMeshGroups' asyncMeshGroupTransforms);  							if (HasBeenClosed)  							{  								return;  							}  							PlatingHelper.CreateITraceableForMeshGroup(asyncPlatingDatas' asyncMeshGroups' asyncMeshGroups.Count - 1' (double progress0To1' string processingState' out bool continueProcessing) =>  							{  								continueProcessing = !this.HasBeenClosed;  								double ratioAvailable = (ratioPerFile * .5);  								//                    done outer loop  +  done this loop  +first 1/2 (load)+  this part * ratioAvailable  								double currentRatio = currentRatioDone + subMeshRatioDone + ratioAvailable + progress0To1 * ratioPerSubMesh;  								ReportProgressChanged(currentRatio' progressMessage' out continueProcessing);  							});    							subMeshRatioDone += ratioPerSubMesh;  						}  					}    					currentRatioDone += ratioPerFile;  				}  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,MakeLowestFaceFlat,The following statement contains a magic number: if (maxDistFromLowestZ > .001)  			{  				Vector3 xPositive = (faceVertexes[1] - faceVertexes[0]).GetNormal();  				Vector3 yPositive = (faceVertexes[2] - faceVertexes[0]).GetNormal();  				Vector3 planeNormal = Vector3.Cross(xPositive' yPositive).GetNormal();    				// this code takes the minimum rotation required and looks much better.  				Quaternion rotation = new Quaternion(planeNormal' new Vector3(0' 0' -1));  				Matrix4X4 partLevelMatrix = Matrix4X4.CreateRotation(rotation);    				// rotate it  				SelectedMeshGroupTransform = PlatingHelper.ApplyAtCenter(SelectedMeshGroup' SelectedMeshGroupTransform' partLevelMatrix);    				PartHasBeenChanged();  				Invalidate();  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,MakeLowestFaceFlat,The following statement contains a magic number: if (maxDistFromLowestZ > .001)  			{  				Vector3 xPositive = (faceVertexes[1] - faceVertexes[0]).GetNormal();  				Vector3 yPositive = (faceVertexes[2] - faceVertexes[0]).GetNormal();  				Vector3 planeNormal = Vector3.Cross(xPositive' yPositive).GetNormal();    				// this code takes the minimum rotation required and looks much better.  				Quaternion rotation = new Quaternion(planeNormal' new Vector3(0' 0' -1));  				Matrix4X4 partLevelMatrix = Matrix4X4.CreateRotation(rotation);    				// rotate it  				SelectedMeshGroupTransform = PlatingHelper.ApplyAtCenter(SelectedMeshGroup' SelectedMeshGroupTransform' partLevelMatrix);    				PartHasBeenChanged();  				Invalidate();  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,MergeAndSavePartsDoWork,The following statement contains a magic number: try  			{  				// push all the transforms into the meshes  				for (int i = 0; i < asyncMeshGroups.Count; i++)  				{  					asyncMeshGroups[i].Transform(asyncMeshGroupTransforms[i]);    					bool continueProcessing;  					ReportProgressChanged((i + 1) * .4 / asyncMeshGroups.Count' ""' out continueProcessing);  				}    				string[] metaData = { "Created By"' "MatterControl"' "BedPosition"' "Absolute" };    				MeshOutputSettings outputInfo = new MeshOutputSettings(MeshOutputSettings.OutputType.Binary' metaData);    				// If null we are replacing a file from the current print item wrapper  				if (returnInfo == null)  				{  					var fileInfo = new FileInfo(printItemWrapper.FileLocation);    					bool requiresTypeChange = !fileInfo.Extension.Equals(".amf"' StringComparison.OrdinalIgnoreCase);  					if (requiresTypeChange && !printItemWrapper.UseIncrementedNameDuringTypeChange)  					{  						// Not using incremented file name' simply change to AMF  						printItemWrapper.FileLocation = Path.ChangeExtension(printItemWrapper.FileLocation' ".amf");  					}  					else if (requiresTypeChange)  					{  						string newFileName;  						string incrementedFileName;    						// Switching from .stl' .obj or similar to AMF. Save the file and update the  						// the filename with an incremented (n) value to reflect the extension change in the UI   						string fileName = Path.GetFileNameWithoutExtension(fileInfo.Name);    						// Drop bracketed number sections from our source filename to ensure we don't generate something like "file (1) (1).amf"  						if (fileName.Contains("("))  						{  							fileName = fileNameNumberMatch.Replace(fileName' "").Trim();  						}    						// Generate and search for an incremented file name until no match is found at the target directory  						int foundCount = 0;  						do  						{  							newFileName = string.Format("{0} ({1})"' fileName' ++foundCount);  							incrementedFileName = Path.Combine(fileInfo.DirectoryName' newFileName + ".amf");    							// Continue incrementing while any matching file exists  						} while (Directory.GetFiles(fileInfo.DirectoryName' newFileName + ".*").Any());    						// Change the FileLocation to the new AMF file  						printItemWrapper.FileLocation = incrementedFileName;  					}    					try  					{  						// get a new location to save to  						string tempFileNameToSaveTo = ApplicationDataStorage.Instance.GetTempFileName("amf");    						// save to the new temp location  						bool savedSuccessfully = MeshFileIo.Save(asyncMeshGroups' tempFileNameToSaveTo' outputInfo' ReportProgressChanged);    						// Swap out the files if the save operation completed successfully   						if (savedSuccessfully && File.Exists(tempFileNameToSaveTo))  						{  							// Ensure the target path is clear  							if(File.Exists(printItemWrapper.FileLocation))  							{  								File.Delete(printItemWrapper.FileLocation);  							}    							// Move the newly saved file back into place  							File.Move(tempFileNameToSaveTo' printItemWrapper.FileLocation);    							// Once the file is swapped back into place' update the PrintItem to account for extension change  							printItemWrapper.PrintItem.Commit();  						}  					}  					catch(Exception ex)  					{  						Trace.WriteLine("Error saving file: "' ex.Message);  					}  				}  				else // we are saving a new file and it will not exist until we are done  				{  					MeshFileIo.Save(asyncMeshGroups' printItemWrapper.FileLocation' outputInfo' ReportProgressChanged);  				}    				// Wait for a second to report the file changed to give the OS a chance to finish closing it.  				UiThread.RunOnIdle(printItemWrapper.ReportFileChange' 3);    				if (returnInfo != null  					&& returnInfo.destinationLibraryProvider != null)  				{  					// save this part to correct library provider  					LibraryProvider libraryToSaveTo = returnInfo.destinationLibraryProvider;  					if (libraryToSaveTo != null)  					{  						libraryToSaveTo.AddItem(printItemWrapper);  						libraryToSaveTo.Dispose();  					}  				}  				else // we have already saved it and the library should pick it up  				{  				}    				saveSucceded = true;  			}  			catch (System.UnauthorizedAccessException e2)  			{  				Debug.Print(e2.Message);  				GuiWidget.BreakInDebugger();  				saveSucceded = false;  				UiThread.RunOnIdle(() =>  				{  					//Do something special when unauthorized?  					StyledMessageBox.ShowMessageBox(null' "Oops! Unable to save changes."' "Unable to save");  				});  			}  			catch (Exception e)  			{  				Debug.Print(e.Message);  				GuiWidget.BreakInDebugger();  				saveSucceded = false;  				UiThread.RunOnIdle(() =>  				{  					StyledMessageBox.ShowMessageBox(null' "Oops! Unable to save changes."' "Unable to save");  				});  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,MergeAndSavePartsDoWork,The following statement contains a magic number: try  			{  				// push all the transforms into the meshes  				for (int i = 0; i < asyncMeshGroups.Count; i++)  				{  					asyncMeshGroups[i].Transform(asyncMeshGroupTransforms[i]);    					bool continueProcessing;  					ReportProgressChanged((i + 1) * .4 / asyncMeshGroups.Count' ""' out continueProcessing);  				}    				string[] metaData = { "Created By"' "MatterControl"' "BedPosition"' "Absolute" };    				MeshOutputSettings outputInfo = new MeshOutputSettings(MeshOutputSettings.OutputType.Binary' metaData);    				// If null we are replacing a file from the current print item wrapper  				if (returnInfo == null)  				{  					var fileInfo = new FileInfo(printItemWrapper.FileLocation);    					bool requiresTypeChange = !fileInfo.Extension.Equals(".amf"' StringComparison.OrdinalIgnoreCase);  					if (requiresTypeChange && !printItemWrapper.UseIncrementedNameDuringTypeChange)  					{  						// Not using incremented file name' simply change to AMF  						printItemWrapper.FileLocation = Path.ChangeExtension(printItemWrapper.FileLocation' ".amf");  					}  					else if (requiresTypeChange)  					{  						string newFileName;  						string incrementedFileName;    						// Switching from .stl' .obj or similar to AMF. Save the file and update the  						// the filename with an incremented (n) value to reflect the extension change in the UI   						string fileName = Path.GetFileNameWithoutExtension(fileInfo.Name);    						// Drop bracketed number sections from our source filename to ensure we don't generate something like "file (1) (1).amf"  						if (fileName.Contains("("))  						{  							fileName = fileNameNumberMatch.Replace(fileName' "").Trim();  						}    						// Generate and search for an incremented file name until no match is found at the target directory  						int foundCount = 0;  						do  						{  							newFileName = string.Format("{0} ({1})"' fileName' ++foundCount);  							incrementedFileName = Path.Combine(fileInfo.DirectoryName' newFileName + ".amf");    							// Continue incrementing while any matching file exists  						} while (Directory.GetFiles(fileInfo.DirectoryName' newFileName + ".*").Any());    						// Change the FileLocation to the new AMF file  						printItemWrapper.FileLocation = incrementedFileName;  					}    					try  					{  						// get a new location to save to  						string tempFileNameToSaveTo = ApplicationDataStorage.Instance.GetTempFileName("amf");    						// save to the new temp location  						bool savedSuccessfully = MeshFileIo.Save(asyncMeshGroups' tempFileNameToSaveTo' outputInfo' ReportProgressChanged);    						// Swap out the files if the save operation completed successfully   						if (savedSuccessfully && File.Exists(tempFileNameToSaveTo))  						{  							// Ensure the target path is clear  							if(File.Exists(printItemWrapper.FileLocation))  							{  								File.Delete(printItemWrapper.FileLocation);  							}    							// Move the newly saved file back into place  							File.Move(tempFileNameToSaveTo' printItemWrapper.FileLocation);    							// Once the file is swapped back into place' update the PrintItem to account for extension change  							printItemWrapper.PrintItem.Commit();  						}  					}  					catch(Exception ex)  					{  						Trace.WriteLine("Error saving file: "' ex.Message);  					}  				}  				else // we are saving a new file and it will not exist until we are done  				{  					MeshFileIo.Save(asyncMeshGroups' printItemWrapper.FileLocation' outputInfo' ReportProgressChanged);  				}    				// Wait for a second to report the file changed to give the OS a chance to finish closing it.  				UiThread.RunOnIdle(printItemWrapper.ReportFileChange' 3);    				if (returnInfo != null  					&& returnInfo.destinationLibraryProvider != null)  				{  					// save this part to correct library provider  					LibraryProvider libraryToSaveTo = returnInfo.destinationLibraryProvider;  					if (libraryToSaveTo != null)  					{  						libraryToSaveTo.AddItem(printItemWrapper);  						libraryToSaveTo.Dispose();  					}  				}  				else // we have already saved it and the library should pick it up  				{  				}    				saveSucceded = true;  			}  			catch (System.UnauthorizedAccessException e2)  			{  				Debug.Print(e2.Message);  				GuiWidget.BreakInDebugger();  				saveSucceded = false;  				UiThread.RunOnIdle(() =>  				{  					//Do something special when unauthorized?  					StyledMessageBox.ShowMessageBox(null' "Oops! Unable to save changes."' "Unable to save");  				});  			}  			catch (Exception e)  			{  				Debug.Print(e.Message);  				GuiWidget.BreakInDebugger();  				saveSucceded = false;  				UiThread.RunOnIdle(() =>  				{  					StyledMessageBox.ShowMessageBox(null' "Oops! Unable to save changes."' "Unable to save");  				});  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,PartsAreInPrintVolume,The following statement contains a magic number: if (ActiveSliceSettings.Instance?.GetValue<bool>(SettingsKey.center_part_on_bed) == false)  			{  				AxisAlignedBoundingBox allBounds = MeshViewerWidget.GetAxisAlignedBoundingBox(MeshGroups);  				bool onBed = allBounds.minXYZ.z > -.001 && allBounds.minXYZ.z < .001; // really close to the bed  				RectangleDouble bedRect = new RectangleDouble(0' 0' ActiveSliceSettings.Instance.GetValue<Vector2>(SettingsKey.bed_size).x' ActiveSliceSettings.Instance.GetValue<Vector2>(SettingsKey.bed_size).y);  				bedRect.Offset(ActiveSliceSettings.Instance.GetValue<Vector2>(SettingsKey.print_center) - ActiveSliceSettings.Instance.GetValue<Vector2>(SettingsKey.bed_size) / 2);    				bool inBounds = bedRect.Contains(new Vector2(allBounds.minXYZ)) && bedRect.Contains(new Vector2(allBounds.maxXYZ));    				return onBed && inBounds;  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,PartsAreInPrintVolume,The following statement contains a magic number: if (ActiveSliceSettings.Instance?.GetValue<bool>(SettingsKey.center_part_on_bed) == false)  			{  				AxisAlignedBoundingBox allBounds = MeshViewerWidget.GetAxisAlignedBoundingBox(MeshGroups);  				bool onBed = allBounds.minXYZ.z > -.001 && allBounds.minXYZ.z < .001; // really close to the bed  				RectangleDouble bedRect = new RectangleDouble(0' 0' ActiveSliceSettings.Instance.GetValue<Vector2>(SettingsKey.bed_size).x' ActiveSliceSettings.Instance.GetValue<Vector2>(SettingsKey.bed_size).y);  				bedRect.Offset(ActiveSliceSettings.Instance.GetValue<Vector2>(SettingsKey.print_center) - ActiveSliceSettings.Instance.GetValue<Vector2>(SettingsKey.bed_size) / 2);    				bool inBounds = bedRect.Contains(new Vector2(allBounds.minXYZ)) && bedRect.Contains(new Vector2(allBounds.maxXYZ));    				return onBed && inBounds;  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,PartsAreInPrintVolume,The following statement contains a magic number: if (ActiveSliceSettings.Instance?.GetValue<bool>(SettingsKey.center_part_on_bed) == false)  			{  				AxisAlignedBoundingBox allBounds = MeshViewerWidget.GetAxisAlignedBoundingBox(MeshGroups);  				bool onBed = allBounds.minXYZ.z > -.001 && allBounds.minXYZ.z < .001; // really close to the bed  				RectangleDouble bedRect = new RectangleDouble(0' 0' ActiveSliceSettings.Instance.GetValue<Vector2>(SettingsKey.bed_size).x' ActiveSliceSettings.Instance.GetValue<Vector2>(SettingsKey.bed_size).y);  				bedRect.Offset(ActiveSliceSettings.Instance.GetValue<Vector2>(SettingsKey.print_center) - ActiveSliceSettings.Instance.GetValue<Vector2>(SettingsKey.bed_size) / 2);    				bool inBounds = bedRect.Contains(new Vector2(allBounds.minXYZ)) && bedRect.Contains(new Vector2(allBounds.maxXYZ));    				return onBed && inBounds;  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,MirrorControls,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\SideBar\MirrorControls.cs,MirrorControls,The following statement contains a magic number: {  				expandMirrorOptions = view3DWidget.ExpandMenuOptionFactory.GenerateCheckBoxButton(  					"Mirror".Localize().ToUpper()'   					View3DWidget.ArrowRight'  					View3DWidget.ArrowDown);  				expandMirrorOptions.Margin = new BorderDouble(bottom: 2);  				this.AddChild(expandMirrorOptions);    				mirrorOptionContainer = new FlowLayoutWidget(FlowDirection.TopToBottom);  				mirrorOptionContainer.HAnchor = HAnchor.ParentLeftRight;  				mirrorOptionContainer.Visible = false;  				this.AddChild(mirrorOptionContainer);    				AddMirrorControls(mirrorOptionContainer);  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,MirrorControls,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\SideBar\MirrorControls.cs,AddMirrorControls,The following statement contains a magic number: mirrorZButton.Click += (s' e) =>  			{  				if (view3DWidget.SelectedMeshGroupIndex != -1)  				{  					view3DWidget.UndoBuffer.AddAndDo(new UndoRedoActions(() => MirrorOnAxis(2)' () => MirrorOnAxis(2)));  				}  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,MirrorControls,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\SideBar\MirrorControls.cs,AddMirrorControls,The following statement contains a magic number: mirrorZButton.Click += (s' e) =>  			{  				if (view3DWidget.SelectedMeshGroupIndex != -1)  				{  					view3DWidget.UndoBuffer.AddAndDo(new UndoRedoActions(() => MirrorOnAxis(2)' () => MirrorOnAxis(2)));  				}  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewControls3D.cs,ViewControls3D,The following statement contains a magic number: if (UserSettings.Instance.IsTouchScreen)  			{  				buttonHeight = 40;  			}  			else  			{  				buttonHeight = 0;  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewControls3D.cs,ViewControls3D,The following statement contains a magic number: BackgroundColor = new RGBA_Bytes(0' 0' 0' 120);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewControls3D.cs,ViewControls3D,The following statement contains a magic number: resetViewButton = textImageButtonFactory.Generate(""' StaticData.Instance.LoadIcon(resetViewIconPath' 32'32).InvertLightness());
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewControls3D.cs,ViewControls3D,The following statement contains a magic number: resetViewButton = textImageButtonFactory.Generate(""' StaticData.Instance.LoadIcon(resetViewIconPath' 32'32).InvertLightness());
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewControls3D.cs,ViewControls3D,The following statement contains a magic number: rotateButton = textImageButtonFactory.GenerateRadioButton(""' StaticData.Instance.LoadIcon(rotateIconPath'32'32));
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewControls3D.cs,ViewControls3D,The following statement contains a magic number: rotateButton = textImageButtonFactory.GenerateRadioButton(""' StaticData.Instance.LoadIcon(rotateIconPath'32'32));
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewControls3D.cs,ViewControls3D,The following statement contains a magic number: rotateButton.Margin = new BorderDouble(3);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewControls3D.cs,ViewControls3D,The following statement contains a magic number: translateButton = textImageButtonFactory.GenerateRadioButton(""' StaticData.Instance.LoadIcon(translateIconPath'32'32));
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewControls3D.cs,ViewControls3D,The following statement contains a magic number: translateButton = textImageButtonFactory.GenerateRadioButton(""' StaticData.Instance.LoadIcon(translateIconPath'32'32));
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewControls3D.cs,ViewControls3D,The following statement contains a magic number: translateButton.Margin = new BorderDouble(3);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewControls3D.cs,ViewControls3D,The following statement contains a magic number: scaleButton = textImageButtonFactory.GenerateRadioButton(""' StaticData.Instance.LoadIcon(scaleIconPath'32'32));
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewControls3D.cs,ViewControls3D,The following statement contains a magic number: scaleButton = textImageButtonFactory.GenerateRadioButton(""' StaticData.Instance.LoadIcon(scaleIconPath'32'32));
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewControls3D.cs,ViewControls3D,The following statement contains a magic number: scaleButton.Margin = new BorderDouble(3);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewControls3D.cs,ViewControls3D,The following statement contains a magic number: partSelectSeparator = new GuiWidget(2' 32);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewControls3D.cs,ViewControls3D,The following statement contains a magic number: partSelectSeparator = new GuiWidget(2' 32);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewControls3D.cs,ViewControls3D,The following statement contains a magic number: partSelectSeparator.Margin = new BorderDouble(3);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewControls3D.cs,ViewControls3D,The following statement contains a magic number: partSelectButton = textImageButtonFactory.GenerateRadioButton(""' StaticData.Instance.LoadIcon(partSelectIconPath'32'32));
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewControls3D.cs,ViewControls3D,The following statement contains a magic number: partSelectButton = textImageButtonFactory.GenerateRadioButton(""' StaticData.Instance.LoadIcon(partSelectIconPath'32'32));
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewControls3D.cs,ViewControls3D,The following statement contains a magic number: partSelectButton.Margin = new BorderDouble(3);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewControls3D.cs,ViewControls3D,The following statement contains a magic number: Margin = new BorderDouble(5);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewControls3D.cs,SetMeshViewerDisplayTheme,The following statement contains a magic number: meshViewerWidget.BuildVolumeColor = new RGBA_Bytes(ActiveTheme.Instance.PrimaryAccentColor.Red0To255' ActiveTheme.Instance.PrimaryAccentColor.Green0To255' ActiveTheme.Instance.PrimaryAccentColor.Blue0To255' 50);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControlsBase,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewControls2D.cs,ViewControlsBase,The following statement contains a magic number: if (UserSettings.Instance.IsTouchScreen)  			{  				buttonHeight = 40;  			}  			else  			{  				buttonHeight = 20;  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControlsBase,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewControls2D.cs,ViewControlsBase,The following statement contains a magic number: if (UserSettings.Instance.IsTouchScreen)  			{  				buttonHeight = 40;  			}  			else  			{  				buttonHeight = 20;  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls2D,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewControls2D.cs,ViewControls2D,The following statement contains a magic number: if (UserSettings.Instance.IsTouchScreen)  			{  				buttonHeight = 40;  			}  			else  			{  				buttonHeight = 0;  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls2D,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewControls2D.cs,ViewControls2D,The following statement contains a magic number: BackgroundColor = new RGBA_Bytes(0' 0' 0' 120);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls2D,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewControls2D.cs,ViewControls2D,The following statement contains a magic number: resetViewButton = iconTextImageButtonFactory.Generate(""' StaticData.Instance.LoadIcon(resetViewIconPath'32'32).InvertLightness());
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls2D,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewControls2D.cs,ViewControls2D,The following statement contains a magic number: resetViewButton = iconTextImageButtonFactory.Generate(""' StaticData.Instance.LoadIcon(resetViewIconPath'32'32).InvertLightness());
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls2D,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewControls2D.cs,ViewControls2D,The following statement contains a magic number: translateButton = iconTextImageButtonFactory.GenerateRadioButton(""' StaticData.Instance.LoadIcon(translateIconPath'32'32));
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls2D,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewControls2D.cs,ViewControls2D,The following statement contains a magic number: translateButton = iconTextImageButtonFactory.GenerateRadioButton(""' StaticData.Instance.LoadIcon(translateIconPath'32'32));
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls2D,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewControls2D.cs,ViewControls2D,The following statement contains a magic number: translateButton.Margin = new BorderDouble(3);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls2D,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewControls2D.cs,ViewControls2D,The following statement contains a magic number: scaleButton = iconTextImageButtonFactory.GenerateRadioButton(""' StaticData.Instance.LoadIcon(scaleIconPath'32'32));
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls2D,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewControls2D.cs,ViewControls2D,The following statement contains a magic number: scaleButton = iconTextImageButtonFactory.GenerateRadioButton(""' StaticData.Instance.LoadIcon(scaleIconPath'32'32));
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls2D,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewControls2D.cs,ViewControls2D,The following statement contains a magic number: scaleButton.Margin = new BorderDouble(3);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls2D,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewControls2D.cs,ViewControls2D,The following statement contains a magic number: Margin = new BorderDouble(5);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControlsToggle,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewControls2D.cs,ViewControlsToggle,The following statement contains a magic number: BackgroundColor = new RGBA_Bytes(0' 0' 0' 120);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControlsToggle,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewControls2D.cs,ViewControlsToggle,The following statement contains a magic number: twoDimensionButton.Margin = new BorderDouble(3);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControlsToggle,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewControls2D.cs,ViewControlsToggle,The following statement contains a magic number: threeDimensionButton.Margin = new BorderDouble(3);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControlsToggle,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewControls2D.cs,ViewControlsToggle,The following statement contains a magic number: Margin = new BorderDouble(5' 5' 200' 5);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControlsToggle,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewControls2D.cs,ViewControlsToggle,The following statement contains a magic number: Margin = new BorderDouble(5' 5' 200' 5);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControlsToggle,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewControls2D.cs,ViewControlsToggle,The following statement contains a magic number: Margin = new BorderDouble(5' 5' 200' 5);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControlsToggle,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewControls2D.cs,ViewControlsToggle,The following statement contains a magic number: Margin = new BorderDouble(5' 5' 200' 5);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PartPreview3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\BaseClasses\PartPreview3DWidget.cs,RecreateBed,The following statement contains a magic number: UiThread.RunOnIdle((Action)(() =>  			{  				meshViewerWidget.CreatePrintBed(  					new Vector3(ActiveSliceSettings.Instance.GetValue<Vector2>(SettingsKey.bed_size)' buildHeight)'  					ActiveSliceSettings.Instance.GetValue<Vector2>(SettingsKey.print_center)'  					ActiveSliceSettings.Instance.GetValue<BedShape>(SettingsKey.bed_shape));  				PutOemImageOnBed();    				Vector2 bedCenter = ActiveSliceSettings.Instance.GetValue<Vector2>(SettingsKey.print_center);  				if(ActiveSliceSettings.Instance.GetValue<bool>(SettingsKey.center_part_on_bed)  					&& !InEditMode)  				{  					if (meshViewerWidget.MeshGroups.Count > 0)  					{  						var bounds = meshViewerWidget.MeshGroups[0].GetAxisAlignedBoundingBox();  						Vector3 boundsCenter = (bounds.maxXYZ + bounds.minXYZ) / 2;  						for (int i = 0; i < meshViewerWidget.MeshGroups.Count; i++)  						{  							meshViewerWidget.MeshGroupTransforms[i] = Matrix4X4.CreateTranslation(-boundsCenter + new Vector3(0' 0' bounds.ZSize / 2) + new Vector3(bedCenter));  						}  					}  				}  			}));
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PartPreview3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\BaseClasses\PartPreview3DWidget.cs,RecreateBed,The following statement contains a magic number: UiThread.RunOnIdle((Action)(() =>  			{  				meshViewerWidget.CreatePrintBed(  					new Vector3(ActiveSliceSettings.Instance.GetValue<Vector2>(SettingsKey.bed_size)' buildHeight)'  					ActiveSliceSettings.Instance.GetValue<Vector2>(SettingsKey.print_center)'  					ActiveSliceSettings.Instance.GetValue<BedShape>(SettingsKey.bed_shape));  				PutOemImageOnBed();    				Vector2 bedCenter = ActiveSliceSettings.Instance.GetValue<Vector2>(SettingsKey.print_center);  				if(ActiveSliceSettings.Instance.GetValue<bool>(SettingsKey.center_part_on_bed)  					&& !InEditMode)  				{  					if (meshViewerWidget.MeshGroups.Count > 0)  					{  						var bounds = meshViewerWidget.MeshGroups[0].GetAxisAlignedBoundingBox();  						Vector3 boundsCenter = (bounds.maxXYZ + bounds.minXYZ) / 2;  						for (int i = 0; i < meshViewerWidget.MeshGroups.Count; i++)  						{  							meshViewerWidget.MeshGroupTransforms[i] = Matrix4X4.CreateTranslation(-boundsCenter + new Vector3(0' 0' bounds.ZSize / 2) + new Vector3(bedCenter));  						}  					}  				}  			}));
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PartPreview3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\BaseClasses\PartPreview3DWidget.cs,PutOemImageOnBed,The following statement contains a magic number: if (allowAutoRotate && StaticData.Instance.FileExists(imagePathAndFile))  			{  				if (wattermarkImage == null)  				{  					wattermarkImage = StaticData.Instance.LoadImage(imagePathAndFile);  				}    				ImageBuffer bedImage = MeshViewerWidget.BedImage;  				Graphics2D bedGraphics = bedImage.NewGraphics2D();  				bedGraphics.Render(wattermarkImage' new Vector2((bedImage.Width - wattermarkImage.Width) / 2' (bedImage.Height - wattermarkImage.Height) / 2));  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PartPreview3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\BaseClasses\PartPreview3DWidget.cs,PutOemImageOnBed,The following statement contains a magic number: if (allowAutoRotate && StaticData.Instance.FileExists(imagePathAndFile))  			{  				if (wattermarkImage == null)  				{  					wattermarkImage = StaticData.Instance.LoadImage(imagePathAndFile);  				}    				ImageBuffer bedImage = MeshViewerWidget.BedImage;  				Graphics2D bedGraphics = bedImage.NewGraphics2D();  				bedGraphics.Render(wattermarkImage' new Vector2((bedImage.Width - wattermarkImage.Width) / 2' (bedImage.Height - wattermarkImage.Height) / 2));  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PartPreview3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\BaseClasses\PartPreview3DWidget.cs,InsertUiForSlider,The following statement contains a magic number: double scrollBarWidth = 10;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PartPreview3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\BaseClasses\PartPreview3DWidget.cs,InsertUiForSlider,The following statement contains a magic number: if (UserSettings.Instance.IsTouchScreen)  			{  				scrollBarWidth = 20;  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PartPreview3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\BaseClasses\PartPreview3DWidget.cs,InsertUiForSlider,The following statement contains a magic number: spacingText.Margin = new BorderDouble(10' 3' 3' 5);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PartPreview3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\BaseClasses\PartPreview3DWidget.cs,InsertUiForSlider,The following statement contains a magic number: spacingText.Margin = new BorderDouble(10' 3' 3' 5);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PartPreview3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\BaseClasses\PartPreview3DWidget.cs,InsertUiForSlider,The following statement contains a magic number: spacingText.Margin = new BorderDouble(10' 3' 3' 5);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PartPreview3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\BaseClasses\PartPreview3DWidget.cs,InsertUiForSlider,The following statement contains a magic number: spacingText.Margin = new BorderDouble(10' 3' 3' 5);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PartPreview3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\BaseClasses\PartPreview3DWidget.cs,InsertUiForSlider,The following statement contains a magic number: namedSlider.Margin = new BorderDouble(3' 5' 3' 3);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PartPreview3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\BaseClasses\PartPreview3DWidget.cs,InsertUiForSlider,The following statement contains a magic number: namedSlider.Margin = new BorderDouble(3' 5' 3' 3);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PartPreview3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\BaseClasses\PartPreview3DWidget.cs,InsertUiForSlider,The following statement contains a magic number: namedSlider.Margin = new BorderDouble(3' 5' 3' 3);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PartPreview3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\BaseClasses\PartPreview3DWidget.cs,InsertUiForSlider,The following statement contains a magic number: namedSlider.Margin = new BorderDouble(3' 5' 3' 3);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeWidget.cs,ViewGcodeWidget,The following statement contains a magic number: LocalBounds = new RectangleDouble(0' 0' 100' 100);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeWidget.cs,ViewGcodeWidget,The following statement contains a magic number: LocalBounds = new RectangleDouble(0' 0' 100' 100);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeWidget.cs,initialLoading_RunWorkerCompleted,The following statement contains a magic number: if (ActiveSliceSettings.Instance.PrinterSelected)  			{  				GCodeRenderer.ExtruderWidth = ActiveSliceSettings.Instance.GetValue<double>(SettingsKey.nozzle_diameter);  			}  			else  			{  				GCodeRenderer.ExtruderWidth = .4;  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeWidget.cs,OnDraw,The following statement contains a magic number: if (LoadedGCode != null)  			{  				//using (new PerformanceTimer("GCode Timer"' "Total"))  				{  					Affine transform = TotalTransform;    					if (RenderGrid)  					{  						//using (new PerformanceTimer("GCode Timer"' "Render Grid"))  						{  							double gridLineWidths = 0.2 * layerScale;    							Graphics2DOpenGL graphics2DGl = graphics2D as Graphics2DOpenGL;  							if (graphics2DGl != null)  							{  								GlRenderGrid(graphics2DGl' transform' gridLineWidths);  							}  							else  							{  								CreateGrid(transform);    								Stroke stroke = new Stroke(grid' gridLineWidths);  								graphics2D.Render(stroke' gridColor);  							}  						}  					}    					GCodeRenderInfo renderInfo = new GCodeRenderInfo(activeLayerIndex' activeLayerIndex' transform' layerScale' CreateRenderInfo()'  						FeatureToStartOnRatio0To1' FeatureToEndOnRatio0To1'  						new Vector2[] { ActiveSliceSettings.Instance.Helpers.ExtruderOffset(0)' ActiveSliceSettings.Instance.Helpers.ExtruderOffset(1) });    					//using (new PerformanceTimer("GCode Timer"' "Render"))  					{  						gCodeRenderer?.Render(graphics2D' renderInfo);  					}  				}  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeWidget.cs,GlRenderGrid,The following statement contains a magic number: Vector2 gridOffset = gridCenterMm - gridSizeMm / 2;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeWidget.cs,GlRenderGrid,The following statement contains a magic number: if (gridSizeMm.x > 0 && gridSizeMm.y > 0)  			{  				grid.remove_all();  				for (int y = 0; y <= gridSizeMm.y; y += 10)  				{  					Vector2 start = new Vector2(0' y) + gridOffset;  					Vector2 end = new Vector2(gridSizeMm.x' y) + gridOffset;  					transform.transform(ref start);  					transform.transform(ref end);    					graphics2DGl.DrawAALine(start' end' width' gridColor);  				}    				for (int x = 0; x <= gridSizeMm.x; x += 10)  				{  					Vector2 start = new Vector2(x' 0) + gridOffset;  					Vector2 end = new Vector2(x' gridSizeMm.y) + gridOffset;  					transform.transform(ref start);  					transform.transform(ref end);    					graphics2DGl.DrawAALine(start' end' width' gridColor);  				}  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeWidget.cs,GlRenderGrid,The following statement contains a magic number: if (gridSizeMm.x > 0 && gridSizeMm.y > 0)  			{  				grid.remove_all();  				for (int y = 0; y <= gridSizeMm.y; y += 10)  				{  					Vector2 start = new Vector2(0' y) + gridOffset;  					Vector2 end = new Vector2(gridSizeMm.x' y) + gridOffset;  					transform.transform(ref start);  					transform.transform(ref end);    					graphics2DGl.DrawAALine(start' end' width' gridColor);  				}    				for (int x = 0; x <= gridSizeMm.x; x += 10)  				{  					Vector2 start = new Vector2(x' 0) + gridOffset;  					Vector2 end = new Vector2(x' gridSizeMm.y) + gridOffset;  					transform.transform(ref start);  					transform.transform(ref end);    					graphics2DGl.DrawAALine(start' end' width' gridColor);  				}  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeWidget.cs,CreateGrid,The following statement contains a magic number: Vector2 gridOffset = gridCenterMm - gridSizeMm / 2;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeWidget.cs,CreateGrid,The following statement contains a magic number: if (gridSizeMm.x > 0 && gridSizeMm.y > 0)  			{  				grid.remove_all();  				for (int y = 0; y <= gridSizeMm.y; y += 10)  				{  					Vector2 start = new Vector2(0' y) + gridOffset;  					Vector2 end = new Vector2(gridSizeMm.x' y) + gridOffset;  					transform.transform(ref start);  					transform.transform(ref end);  					grid.MoveTo(Math.Round(start.x)' Math.Round(start.y));  					grid.LineTo(Math.Round(end.x)' Math.Round(end.y));  				}    				for (int x = 0; x <= gridSizeMm.x; x += 10)  				{  					Vector2 start = new Vector2(x' 0) + gridOffset;  					Vector2 end = new Vector2(x' gridSizeMm.y) + gridOffset;  					transform.transform(ref start);  					transform.transform(ref end);  					grid.MoveTo((int)(start.x + .5) + .5' (int)(start.y + .5));  					grid.LineTo((int)(end.x + .5) + .5' (int)(end.y + .5));  				}  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeWidget.cs,CreateGrid,The following statement contains a magic number: if (gridSizeMm.x > 0 && gridSizeMm.y > 0)  			{  				grid.remove_all();  				for (int y = 0; y <= gridSizeMm.y; y += 10)  				{  					Vector2 start = new Vector2(0' y) + gridOffset;  					Vector2 end = new Vector2(gridSizeMm.x' y) + gridOffset;  					transform.transform(ref start);  					transform.transform(ref end);  					grid.MoveTo(Math.Round(start.x)' Math.Round(start.y));  					grid.LineTo(Math.Round(end.x)' Math.Round(end.y));  				}    				for (int x = 0; x <= gridSizeMm.x; x += 10)  				{  					Vector2 start = new Vector2(x' 0) + gridOffset;  					Vector2 end = new Vector2(x' gridSizeMm.y) + gridOffset;  					transform.transform(ref start);  					transform.transform(ref end);  					grid.MoveTo((int)(start.x + .5) + .5' (int)(start.y + .5));  					grid.LineTo((int)(end.x + .5) + .5' (int)(end.y + .5));  				}  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeWidget.cs,CreateGrid,The following statement contains a magic number: if (gridSizeMm.x > 0 && gridSizeMm.y > 0)  			{  				grid.remove_all();  				for (int y = 0; y <= gridSizeMm.y; y += 10)  				{  					Vector2 start = new Vector2(0' y) + gridOffset;  					Vector2 end = new Vector2(gridSizeMm.x' y) + gridOffset;  					transform.transform(ref start);  					transform.transform(ref end);  					grid.MoveTo(Math.Round(start.x)' Math.Round(start.y));  					grid.LineTo(Math.Round(end.x)' Math.Round(end.y));  				}    				for (int x = 0; x <= gridSizeMm.x; x += 10)  				{  					Vector2 start = new Vector2(x' 0) + gridOffset;  					Vector2 end = new Vector2(x' gridSizeMm.y) + gridOffset;  					transform.transform(ref start);  					transform.transform(ref end);  					grid.MoveTo((int)(start.x + .5) + .5' (int)(start.y + .5));  					grid.LineTo((int)(end.x + .5) + .5' (int)(end.y + .5));  				}  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeWidget.cs,CreateGrid,The following statement contains a magic number: if (gridSizeMm.x > 0 && gridSizeMm.y > 0)  			{  				grid.remove_all();  				for (int y = 0; y <= gridSizeMm.y; y += 10)  				{  					Vector2 start = new Vector2(0' y) + gridOffset;  					Vector2 end = new Vector2(gridSizeMm.x' y) + gridOffset;  					transform.transform(ref start);  					transform.transform(ref end);  					grid.MoveTo(Math.Round(start.x)' Math.Round(start.y));  					grid.LineTo(Math.Round(end.x)' Math.Round(end.y));  				}    				for (int x = 0; x <= gridSizeMm.x; x += 10)  				{  					Vector2 start = new Vector2(x' 0) + gridOffset;  					Vector2 end = new Vector2(x' gridSizeMm.y) + gridOffset;  					transform.transform(ref start);  					transform.transform(ref end);  					grid.MoveTo((int)(start.x + .5) + .5' (int)(start.y + .5));  					grid.LineTo((int)(end.x + .5) + .5' (int)(end.y + .5));  				}  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeWidget.cs,CreateGrid,The following statement contains a magic number: if (gridSizeMm.x > 0 && gridSizeMm.y > 0)  			{  				grid.remove_all();  				for (int y = 0; y <= gridSizeMm.y; y += 10)  				{  					Vector2 start = new Vector2(0' y) + gridOffset;  					Vector2 end = new Vector2(gridSizeMm.x' y) + gridOffset;  					transform.transform(ref start);  					transform.transform(ref end);  					grid.MoveTo(Math.Round(start.x)' Math.Round(start.y));  					grid.LineTo(Math.Round(end.x)' Math.Round(end.y));  				}    				for (int x = 0; x <= gridSizeMm.x; x += 10)  				{  					Vector2 start = new Vector2(x' 0) + gridOffset;  					Vector2 end = new Vector2(x' gridSizeMm.y) + gridOffset;  					transform.transform(ref start);  					transform.transform(ref end);  					grid.MoveTo((int)(start.x + .5) + .5' (int)(start.y + .5));  					grid.LineTo((int)(end.x + .5) + .5' (int)(end.y + .5));  				}  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeWidget.cs,CreateGrid,The following statement contains a magic number: if (gridSizeMm.x > 0 && gridSizeMm.y > 0)  			{  				grid.remove_all();  				for (int y = 0; y <= gridSizeMm.y; y += 10)  				{  					Vector2 start = new Vector2(0' y) + gridOffset;  					Vector2 end = new Vector2(gridSizeMm.x' y) + gridOffset;  					transform.transform(ref start);  					transform.transform(ref end);  					grid.MoveTo(Math.Round(start.x)' Math.Round(start.y));  					grid.LineTo(Math.Round(end.x)' Math.Round(end.y));  				}    				for (int x = 0; x <= gridSizeMm.x; x += 10)  				{  					Vector2 start = new Vector2(x' 0) + gridOffset;  					Vector2 end = new Vector2(x' gridSizeMm.y) + gridOffset;  					transform.transform(ref start);  					transform.transform(ref end);  					grid.MoveTo((int)(start.x + .5) + .5' (int)(start.y + .5));  					grid.LineTo((int)(end.x + .5) + .5' (int)(end.y + .5));  				}  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeWidget.cs,CreateGrid,The following statement contains a magic number: if (gridSizeMm.x > 0 && gridSizeMm.y > 0)  			{  				grid.remove_all();  				for (int y = 0; y <= gridSizeMm.y; y += 10)  				{  					Vector2 start = new Vector2(0' y) + gridOffset;  					Vector2 end = new Vector2(gridSizeMm.x' y) + gridOffset;  					transform.transform(ref start);  					transform.transform(ref end);  					grid.MoveTo(Math.Round(start.x)' Math.Round(start.y));  					grid.LineTo(Math.Round(end.x)' Math.Round(end.y));  				}    				for (int x = 0; x <= gridSizeMm.x; x += 10)  				{  					Vector2 start = new Vector2(x' 0) + gridOffset;  					Vector2 end = new Vector2(x' gridSizeMm.y) + gridOffset;  					transform.transform(ref start);  					transform.transform(ref end);  					grid.MoveTo((int)(start.x + .5) + .5' (int)(start.y + .5));  					grid.LineTo((int)(end.x + .5) + .5' (int)(end.y + .5));  				}  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeWidget.cs,CreateGrid,The following statement contains a magic number: if (gridSizeMm.x > 0 && gridSizeMm.y > 0)  			{  				grid.remove_all();  				for (int y = 0; y <= gridSizeMm.y; y += 10)  				{  					Vector2 start = new Vector2(0' y) + gridOffset;  					Vector2 end = new Vector2(gridSizeMm.x' y) + gridOffset;  					transform.transform(ref start);  					transform.transform(ref end);  					grid.MoveTo(Math.Round(start.x)' Math.Round(start.y));  					grid.LineTo(Math.Round(end.x)' Math.Round(end.y));  				}    				for (int x = 0; x <= gridSizeMm.x; x += 10)  				{  					Vector2 start = new Vector2(x' 0) + gridOffset;  					Vector2 end = new Vector2(x' gridSizeMm.y) + gridOffset;  					transform.transform(ref start);  					transform.transform(ref end);  					grid.MoveTo((int)(start.x + .5) + .5' (int)(start.y + .5));  					grid.LineTo((int)(end.x + .5) + .5' (int)(end.y + .5));  				}  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeWidget.cs,OnMouseDown,The following statement contains a magic number: if (MouseCaptured)  			{  				if (mouseEvent.NumPositions == 1)  				{  					mouseDownPosition.x = mouseEvent.X;  					mouseDownPosition.y = mouseEvent.Y;  				}  				else  				{  					Vector2 centerPosition = (mouseEvent.GetPosition(1) + mouseEvent.GetPosition(0)) / 2;  					mouseDownPosition = centerPosition;  				}    				lastMousePosition = mouseDownPosition;    				if (mouseEvent.NumPositions > 1)  				{  					startDistanceBetweenPoints = (mouseEvent.GetPosition(1) - mouseEvent.GetPosition(0)).Length;  					pinchStartScale = layerScale;  				}  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeWidget.cs,OnMouseWheel,The following statement contains a magic number: if (FirstWidgetUnderMouse) // TODO: find a good way to decide if you are what the wheel is trying to do  			{    				const double deltaFor1Click = 120;  				double scaleAmount = (mouseEvent.WheelDelta / deltaFor1Click) * .1;    				ScalePartAndFixPosition(mouseEvent' layerScale + layerScale * scaleAmount);    				Invalidate();  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeWidget.cs,OnMouseWheel,The following statement contains a magic number: if (FirstWidgetUnderMouse) // TODO: find a good way to decide if you are what the wheel is trying to do  			{    				const double deltaFor1Click = 120;  				double scaleAmount = (mouseEvent.WheelDelta / deltaFor1Click) * .1;    				ScalePartAndFixPosition(mouseEvent' layerScale + layerScale * scaleAmount);    				Invalidate();  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeWidget.cs,OnMouseMove,The following statement contains a magic number: if (mouseEvent.NumPositions == 1)  			{  				mousePos = new Vector2(mouseEvent.X' mouseEvent.Y);  			}  			else  			{  				Vector2 centerPosition = (mouseEvent.GetPosition(1) + mouseEvent.GetPosition(0)) / 2;  				mousePos = centerPosition;  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeWidget.cs,OnMouseMove,The following statement contains a magic number: if (MouseCaptured)  			{  				Vector2 mouseDelta = mousePos - lastMousePosition;  				switch (TransformState)  				{  					case ETransformState.Move:  						ScalingTransform.inverse_transform(ref mouseDelta);    						unscaledRenderOffset += mouseDelta;  						break;    					case ETransformState.Scale:  						double zoomDelta = 1;  						if (mouseDelta.y < 0)  						{  							zoomDelta = 1 - (-1 * mouseDelta.y / 100);  						}  						else if (mouseDelta.y > 0)  						{  							zoomDelta = 1 + (1 * mouseDelta.y / 100);  						}    						Vector2 mousePreScale = mouseDownPosition;  						TotalTransform.inverse_transform(ref mousePreScale);    						layerScale *= zoomDelta;    						Vector2 mousePostScale = mouseDownPosition;  						TotalTransform.inverse_transform(ref mousePostScale);    						unscaledRenderOffset += (mousePostScale - mousePreScale);  						break;    					default:  						throw new NotImplementedException();  				}    				Invalidate();  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeWidget.cs,OnMouseMove,The following statement contains a magic number: if (MouseCaptured)  			{  				Vector2 mouseDelta = mousePos - lastMousePosition;  				switch (TransformState)  				{  					case ETransformState.Move:  						ScalingTransform.inverse_transform(ref mouseDelta);    						unscaledRenderOffset += mouseDelta;  						break;    					case ETransformState.Scale:  						double zoomDelta = 1;  						if (mouseDelta.y < 0)  						{  							zoomDelta = 1 - (-1 * mouseDelta.y / 100);  						}  						else if (mouseDelta.y > 0)  						{  							zoomDelta = 1 + (1 * mouseDelta.y / 100);  						}    						Vector2 mousePreScale = mouseDownPosition;  						TotalTransform.inverse_transform(ref mousePreScale);    						layerScale *= zoomDelta;    						Vector2 mousePostScale = mouseDownPosition;  						TotalTransform.inverse_transform(ref mousePostScale);    						unscaledRenderOffset += (mousePostScale - mousePreScale);  						break;    					default:  						throw new NotImplementedException();  				}    				Invalidate();  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PartPreviewWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\BaseClasses\PartPreviewWidget.cs,PartPreviewWidget,The following statement contains a magic number: if (UserSettings.Instance.IsTouchScreen)  			{  				SideBarButtonWidth = 180;  				ShortButtonHeight = 40;  			}  			else  			{  				SideBarButtonWidth = 138;  				ShortButtonHeight = 30;  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PartPreviewWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\BaseClasses\PartPreviewWidget.cs,PartPreviewWidget,The following statement contains a magic number: if (UserSettings.Instance.IsTouchScreen)  			{  				SideBarButtonWidth = 180;  				ShortButtonHeight = 40;  			}  			else  			{  				SideBarButtonWidth = 138;  				ShortButtonHeight = 30;  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PartPreviewWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\BaseClasses\PartPreviewWidget.cs,PartPreviewWidget,The following statement contains a magic number: if (UserSettings.Instance.IsTouchScreen)  			{  				SideBarButtonWidth = 180;  				ShortButtonHeight = 40;  			}  			else  			{  				SideBarButtonWidth = 138;  				ShortButtonHeight = 30;  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PartPreviewWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\BaseClasses\PartPreviewWidget.cs,PartPreviewWidget,The following statement contains a magic number: if (UserSettings.Instance.IsTouchScreen)  			{  				SideBarButtonWidth = 180;  				ShortButtonHeight = 40;  			}  			else  			{  				SideBarButtonWidth = 138;  				ShortButtonHeight = 30;  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PartPreviewWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\BaseClasses\PartPreviewWidget.cs,PartPreviewWidget,The following statement contains a magic number: WhiteButtonFactory.hoverFillColor = new RGBA_Bytes(255' 255' 255' 200);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PartPreviewWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\BaseClasses\PartPreviewWidget.cs,PartPreviewWidget,The following statement contains a magic number: WhiteButtonFactory.hoverFillColor = new RGBA_Bytes(255' 255' 255' 200);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PartPreviewWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\BaseClasses\PartPreviewWidget.cs,PartPreviewWidget,The following statement contains a magic number: WhiteButtonFactory.hoverFillColor = new RGBA_Bytes(255' 255' 255' 200);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PartPreviewWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\BaseClasses\PartPreviewWidget.cs,PartPreviewWidget,The following statement contains a magic number: WhiteButtonFactory.hoverFillColor = new RGBA_Bytes(255' 255' 255' 200);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PartPreviewWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\BaseClasses\PartPreviewWidget.cs,PartPreviewWidget,The following statement contains a magic number: WhiteButtonFactory.normalBorderColor = new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 200);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PartPreviewWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\BaseClasses\PartPreviewWidget.cs,PartPreviewWidget,The following statement contains a magic number: WhiteButtonFactory.hoverBorderColor = new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 200);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PartPreviewWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\BaseClasses\PartPreviewWidget.cs,PartPreviewWidget,The following statement contains a magic number: ExpandMenuOptionFactory.hoverFillColor = new RGBA_Bytes(255' 255' 255' 50);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PartPreviewWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\BaseClasses\PartPreviewWidget.cs,PartPreviewWidget,The following statement contains a magic number: ExpandMenuOptionFactory.hoverFillColor = new RGBA_Bytes(255' 255' 255' 50);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PartPreviewWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\BaseClasses\PartPreviewWidget.cs,PartPreviewWidget,The following statement contains a magic number: ExpandMenuOptionFactory.hoverFillColor = new RGBA_Bytes(255' 255' 255' 50);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PartPreviewWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\BaseClasses\PartPreviewWidget.cs,PartPreviewWidget,The following statement contains a magic number: ExpandMenuOptionFactory.hoverFillColor = new RGBA_Bytes(255' 255' 255' 50);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PartPreviewWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\BaseClasses\PartPreviewWidget.cs,PartPreviewWidget,The following statement contains a magic number: ExpandMenuOptionFactory.pressedFillColor = new RGBA_Bytes(255' 255' 255' 50);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PartPreviewWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\BaseClasses\PartPreviewWidget.cs,PartPreviewWidget,The following statement contains a magic number: ExpandMenuOptionFactory.pressedFillColor = new RGBA_Bytes(255' 255' 255' 50);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PartPreviewWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\BaseClasses\PartPreviewWidget.cs,PartPreviewWidget,The following statement contains a magic number: ExpandMenuOptionFactory.pressedFillColor = new RGBA_Bytes(255' 255' 255' 50);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PartPreviewWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\BaseClasses\PartPreviewWidget.cs,PartPreviewWidget,The following statement contains a magic number: ExpandMenuOptionFactory.pressedFillColor = new RGBA_Bytes(255' 255' 255' 50);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PartPreviewWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\BaseClasses\PartPreviewWidget.cs,PartPreviewWidget,The following statement contains a magic number: ExpandMenuOptionFactory.disabledFillColor = new RGBA_Bytes(255' 255' 255' 50);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PartPreviewWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\BaseClasses\PartPreviewWidget.cs,PartPreviewWidget,The following statement contains a magic number: ExpandMenuOptionFactory.disabledFillColor = new RGBA_Bytes(255' 255' 255' 50);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PartPreviewWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\BaseClasses\PartPreviewWidget.cs,PartPreviewWidget,The following statement contains a magic number: ExpandMenuOptionFactory.disabledFillColor = new RGBA_Bytes(255' 255' 255' 50);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PartPreviewWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\BaseClasses\PartPreviewWidget.cs,PartPreviewWidget,The following statement contains a magic number: ExpandMenuOptionFactory.disabledFillColor = new RGBA_Bytes(255' 255' 255' 50);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PartPreviewWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\BaseClasses\PartPreviewWidget.cs,PartPreviewWidget,The following statement contains a magic number: checkboxButtonFactory.fontSize = 11;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PartPreviewWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\BaseClasses\PartPreviewWidget.cs,PartPreviewWidget,The following statement contains a magic number: checkboxButtonFactory.borderWidth = 3;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PartPreviewWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\BaseClasses\PartPreviewWidget.cs,PartPreviewWidget,The following statement contains a magic number: checkboxButtonFactory.hoverBorderColor = new RGBA_Bytes(0' 0' 0' 50);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PartPreviewWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\BaseClasses\PartPreviewWidget.cs,PartPreviewWidget,The following statement contains a magic number: checkboxButtonFactory.hoverFillColor = new RGBA_Bytes(0' 0' 0' 50);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PartPreviewWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\BaseClasses\PartPreviewWidget.cs,PartPreviewWidget,The following statement contains a magic number: checkboxButtonFactory.pressedBorderColor = new RGBA_Bytes(0' 0' 0' 50);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,ViewGcodeBasic,The following statement contains a magic number: if (UserSettings.Instance.IsTouchScreen)  			{  				sliderWidth = 20;  			}  			else  			{  				sliderWidth = 10;  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,ViewGcodeBasic,The following statement contains a magic number: if (UserSettings.Instance.IsTouchScreen)  			{  				sliderWidth = 20;  			}  			else  			{  				sliderWidth = 10;  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,CreateAndAddChildren,The following statement contains a magic number: buttonBottomPanel.Padding = new BorderDouble(3' 3);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,CreateAndAddChildren,The following statement contains a magic number: buttonBottomPanel.Padding = new BorderDouble(3' 3);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,CreateRightButtonPanel,The following statement contains a magic number: buttonRightPanel.Width = 200;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,CreateRightButtonPanel,The following statement contains a magic number: {  				string label = "Model".Localize().ToUpper();  				expandModelOptions = ExpandMenuOptionFactory.GenerateCheckBoxButton(label'  					View3DWidget.ArrowRight'  					View3DWidget.ArrowDown);  				expandModelOptions.Margin = new BorderDouble(bottom: 2);  				buttonRightPanel.AddChild(expandModelOptions);  				expandModelOptions.Checked = true;    				modelOptionsContainer = new FlowLayoutWidget(FlowDirection.TopToBottom);  				modelOptionsContainer.HAnchor = HAnchor.ParentLeftRight;  				//modelOptionsContainer.Visible = false;  				buttonRightPanel.AddChild(modelOptionsContainer);    				expandDisplayOptions = ExpandMenuOptionFactory.GenerateCheckBoxButton("Display".Localize().ToUpper()'  					View3DWidget.ArrowRight'  					View3DWidget.ArrowDown);  				expandDisplayOptions.Name = "Display Checkbox";  				expandDisplayOptions.Margin = new BorderDouble(bottom: 2);  				buttonRightPanel.AddChild(expandDisplayOptions);  				expandDisplayOptions.Checked = false;    				displayOptionsContainer = new FlowLayoutWidget(FlowDirection.TopToBottom);  				displayOptionsContainer.HAnchor = HAnchor.ParentLeftRight;  				displayOptionsContainer.Padding = new BorderDouble(left: 6);  				displayOptionsContainer.Visible = false;  				buttonRightPanel.AddChild(displayOptionsContainer);    				GuiWidget verticalSpacer = new GuiWidget();  				verticalSpacer.VAnchor = VAnchor.ParentBottomTop;  				buttonRightPanel.AddChild(verticalSpacer);  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,CreateRightButtonPanel,The following statement contains a magic number: {  				string label = "Model".Localize().ToUpper();  				expandModelOptions = ExpandMenuOptionFactory.GenerateCheckBoxButton(label'  					View3DWidget.ArrowRight'  					View3DWidget.ArrowDown);  				expandModelOptions.Margin = new BorderDouble(bottom: 2);  				buttonRightPanel.AddChild(expandModelOptions);  				expandModelOptions.Checked = true;    				modelOptionsContainer = new FlowLayoutWidget(FlowDirection.TopToBottom);  				modelOptionsContainer.HAnchor = HAnchor.ParentLeftRight;  				//modelOptionsContainer.Visible = false;  				buttonRightPanel.AddChild(modelOptionsContainer);    				expandDisplayOptions = ExpandMenuOptionFactory.GenerateCheckBoxButton("Display".Localize().ToUpper()'  					View3DWidget.ArrowRight'  					View3DWidget.ArrowDown);  				expandDisplayOptions.Name = "Display Checkbox";  				expandDisplayOptions.Margin = new BorderDouble(bottom: 2);  				buttonRightPanel.AddChild(expandDisplayOptions);  				expandDisplayOptions.Checked = false;    				displayOptionsContainer = new FlowLayoutWidget(FlowDirection.TopToBottom);  				displayOptionsContainer.HAnchor = HAnchor.ParentLeftRight;  				displayOptionsContainer.Padding = new BorderDouble(left: 6);  				displayOptionsContainer.Visible = false;  				buttonRightPanel.AddChild(displayOptionsContainer);    				GuiWidget verticalSpacer = new GuiWidget();  				verticalSpacer.VAnchor = VAnchor.ParentBottomTop;  				buttonRightPanel.AddChild(verticalSpacer);  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,CreateRightButtonPanel,The following statement contains a magic number: {  				string label = "Model".Localize().ToUpper();  				expandModelOptions = ExpandMenuOptionFactory.GenerateCheckBoxButton(label'  					View3DWidget.ArrowRight'  					View3DWidget.ArrowDown);  				expandModelOptions.Margin = new BorderDouble(bottom: 2);  				buttonRightPanel.AddChild(expandModelOptions);  				expandModelOptions.Checked = true;    				modelOptionsContainer = new FlowLayoutWidget(FlowDirection.TopToBottom);  				modelOptionsContainer.HAnchor = HAnchor.ParentLeftRight;  				//modelOptionsContainer.Visible = false;  				buttonRightPanel.AddChild(modelOptionsContainer);    				expandDisplayOptions = ExpandMenuOptionFactory.GenerateCheckBoxButton("Display".Localize().ToUpper()'  					View3DWidget.ArrowRight'  					View3DWidget.ArrowDown);  				expandDisplayOptions.Name = "Display Checkbox";  				expandDisplayOptions.Margin = new BorderDouble(bottom: 2);  				buttonRightPanel.AddChild(expandDisplayOptions);  				expandDisplayOptions.Checked = false;    				displayOptionsContainer = new FlowLayoutWidget(FlowDirection.TopToBottom);  				displayOptionsContainer.HAnchor = HAnchor.ParentLeftRight;  				displayOptionsContainer.Padding = new BorderDouble(left: 6);  				displayOptionsContainer.Visible = false;  				buttonRightPanel.AddChild(displayOptionsContainer);    				GuiWidget verticalSpacer = new GuiWidget();  				verticalSpacer.VAnchor = VAnchor.ParentBottomTop;  				buttonRightPanel.AddChild(verticalSpacer);  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,CreateRightButtonPanel,The following statement contains a magic number: buttonRightPanel.Padding = new BorderDouble(6' 6);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,CreateRightButtonPanel,The following statement contains a magic number: buttonRightPanel.Padding = new BorderDouble(6' 6);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,AddModelInfo,The following statement contains a magic number: textImageButtonFactory.FixedWidth = 44 * GuiWidget.DeviceScale;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,AddModelInfo,The following statement contains a magic number: modelInfoContainer.Padding = new BorderDouble(5);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,AddModelInfo,The following statement contains a magic number: modelInfoContainer.AddChild(new TextWidget(printTimeLabelFull' textColor: ActiveTheme.Instance.PrimaryTextColor' pointSize: 9));
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,AddModelInfo,The following statement contains a magic number: {  				string timeRemainingText = "---";    				if (gcodeViewWidget != null && gcodeViewWidget.LoadedGCode != null)  				{  					int secondsRemaining = (int)gcodeViewWidget.LoadedGCode.Instruction(0).secondsToEndFromHere;  					int hoursRemaining = (int)(secondsRemaining / (60 * 60));  					int minutesRemaining = (int)((secondsRemaining + 30) / 60 - hoursRemaining * 60); // +30 for rounding  					secondsRemaining = secondsRemaining % 60;  					if (hoursRemaining > 0)  					{  						timeRemainingText = string.Format("{0} h' {1} min"' hoursRemaining' minutesRemaining);  					}  					else  					{  						timeRemainingText = string.Format("{0} min"' minutesRemaining);  					}  				}    				GuiWidget estimatedPrintTime = new TextWidget(string.Format("{0}"' timeRemainingText)' textColor: ActiveTheme.Instance.PrimaryTextColor' pointSize: 14);  				//estimatedPrintTime.HAnchor = Agg.UI.HAnchor.ParentLeft;  				estimatedPrintTime.Margin = new BorderDouble(0' 9' 0' 3);  				modelInfoContainer.AddChild(estimatedPrintTime);  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,AddModelInfo,The following statement contains a magic number: {  				string timeRemainingText = "---";    				if (gcodeViewWidget != null && gcodeViewWidget.LoadedGCode != null)  				{  					int secondsRemaining = (int)gcodeViewWidget.LoadedGCode.Instruction(0).secondsToEndFromHere;  					int hoursRemaining = (int)(secondsRemaining / (60 * 60));  					int minutesRemaining = (int)((secondsRemaining + 30) / 60 - hoursRemaining * 60); // +30 for rounding  					secondsRemaining = secondsRemaining % 60;  					if (hoursRemaining > 0)  					{  						timeRemainingText = string.Format("{0} h' {1} min"' hoursRemaining' minutesRemaining);  					}  					else  					{  						timeRemainingText = string.Format("{0} min"' minutesRemaining);  					}  				}    				GuiWidget estimatedPrintTime = new TextWidget(string.Format("{0}"' timeRemainingText)' textColor: ActiveTheme.Instance.PrimaryTextColor' pointSize: 14);  				//estimatedPrintTime.HAnchor = Agg.UI.HAnchor.ParentLeft;  				estimatedPrintTime.Margin = new BorderDouble(0' 9' 0' 3);  				modelInfoContainer.AddChild(estimatedPrintTime);  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,AddModelInfo,The following statement contains a magic number: {  				string timeRemainingText = "---";    				if (gcodeViewWidget != null && gcodeViewWidget.LoadedGCode != null)  				{  					int secondsRemaining = (int)gcodeViewWidget.LoadedGCode.Instruction(0).secondsToEndFromHere;  					int hoursRemaining = (int)(secondsRemaining / (60 * 60));  					int minutesRemaining = (int)((secondsRemaining + 30) / 60 - hoursRemaining * 60); // +30 for rounding  					secondsRemaining = secondsRemaining % 60;  					if (hoursRemaining > 0)  					{  						timeRemainingText = string.Format("{0} h' {1} min"' hoursRemaining' minutesRemaining);  					}  					else  					{  						timeRemainingText = string.Format("{0} min"' minutesRemaining);  					}  				}    				GuiWidget estimatedPrintTime = new TextWidget(string.Format("{0}"' timeRemainingText)' textColor: ActiveTheme.Instance.PrimaryTextColor' pointSize: 14);  				//estimatedPrintTime.HAnchor = Agg.UI.HAnchor.ParentLeft;  				estimatedPrintTime.Margin = new BorderDouble(0' 9' 0' 3);  				modelInfoContainer.AddChild(estimatedPrintTime);  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,AddModelInfo,The following statement contains a magic number: {  				string timeRemainingText = "---";    				if (gcodeViewWidget != null && gcodeViewWidget.LoadedGCode != null)  				{  					int secondsRemaining = (int)gcodeViewWidget.LoadedGCode.Instruction(0).secondsToEndFromHere;  					int hoursRemaining = (int)(secondsRemaining / (60 * 60));  					int minutesRemaining = (int)((secondsRemaining + 30) / 60 - hoursRemaining * 60); // +30 for rounding  					secondsRemaining = secondsRemaining % 60;  					if (hoursRemaining > 0)  					{  						timeRemainingText = string.Format("{0} h' {1} min"' hoursRemaining' minutesRemaining);  					}  					else  					{  						timeRemainingText = string.Format("{0} min"' minutesRemaining);  					}  				}    				GuiWidget estimatedPrintTime = new TextWidget(string.Format("{0}"' timeRemainingText)' textColor: ActiveTheme.Instance.PrimaryTextColor' pointSize: 14);  				//estimatedPrintTime.HAnchor = Agg.UI.HAnchor.ParentLeft;  				estimatedPrintTime.Margin = new BorderDouble(0' 9' 0' 3);  				modelInfoContainer.AddChild(estimatedPrintTime);  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,AddModelInfo,The following statement contains a magic number: {  				string timeRemainingText = "---";    				if (gcodeViewWidget != null && gcodeViewWidget.LoadedGCode != null)  				{  					int secondsRemaining = (int)gcodeViewWidget.LoadedGCode.Instruction(0).secondsToEndFromHere;  					int hoursRemaining = (int)(secondsRemaining / (60 * 60));  					int minutesRemaining = (int)((secondsRemaining + 30) / 60 - hoursRemaining * 60); // +30 for rounding  					secondsRemaining = secondsRemaining % 60;  					if (hoursRemaining > 0)  					{  						timeRemainingText = string.Format("{0} h' {1} min"' hoursRemaining' minutesRemaining);  					}  					else  					{  						timeRemainingText = string.Format("{0} min"' minutesRemaining);  					}  				}    				GuiWidget estimatedPrintTime = new TextWidget(string.Format("{0}"' timeRemainingText)' textColor: ActiveTheme.Instance.PrimaryTextColor' pointSize: 14);  				//estimatedPrintTime.HAnchor = Agg.UI.HAnchor.ParentLeft;  				estimatedPrintTime.Margin = new BorderDouble(0' 9' 0' 3);  				modelInfoContainer.AddChild(estimatedPrintTime);  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,AddModelInfo,The following statement contains a magic number: {  				string timeRemainingText = "---";    				if (gcodeViewWidget != null && gcodeViewWidget.LoadedGCode != null)  				{  					int secondsRemaining = (int)gcodeViewWidget.LoadedGCode.Instruction(0).secondsToEndFromHere;  					int hoursRemaining = (int)(secondsRemaining / (60 * 60));  					int minutesRemaining = (int)((secondsRemaining + 30) / 60 - hoursRemaining * 60); // +30 for rounding  					secondsRemaining = secondsRemaining % 60;  					if (hoursRemaining > 0)  					{  						timeRemainingText = string.Format("{0} h' {1} min"' hoursRemaining' minutesRemaining);  					}  					else  					{  						timeRemainingText = string.Format("{0} min"' minutesRemaining);  					}  				}    				GuiWidget estimatedPrintTime = new TextWidget(string.Format("{0}"' timeRemainingText)' textColor: ActiveTheme.Instance.PrimaryTextColor' pointSize: 14);  				//estimatedPrintTime.HAnchor = Agg.UI.HAnchor.ParentLeft;  				estimatedPrintTime.Margin = new BorderDouble(0' 9' 0' 3);  				modelInfoContainer.AddChild(estimatedPrintTime);  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,AddModelInfo,The following statement contains a magic number: {  				string timeRemainingText = "---";    				if (gcodeViewWidget != null && gcodeViewWidget.LoadedGCode != null)  				{  					int secondsRemaining = (int)gcodeViewWidget.LoadedGCode.Instruction(0).secondsToEndFromHere;  					int hoursRemaining = (int)(secondsRemaining / (60 * 60));  					int minutesRemaining = (int)((secondsRemaining + 30) / 60 - hoursRemaining * 60); // +30 for rounding  					secondsRemaining = secondsRemaining % 60;  					if (hoursRemaining > 0)  					{  						timeRemainingText = string.Format("{0} h' {1} min"' hoursRemaining' minutesRemaining);  					}  					else  					{  						timeRemainingText = string.Format("{0} min"' minutesRemaining);  					}  				}    				GuiWidget estimatedPrintTime = new TextWidget(string.Format("{0}"' timeRemainingText)' textColor: ActiveTheme.Instance.PrimaryTextColor' pointSize: 14);  				//estimatedPrintTime.HAnchor = Agg.UI.HAnchor.ParentLeft;  				estimatedPrintTime.Margin = new BorderDouble(0' 9' 0' 3);  				modelInfoContainer.AddChild(estimatedPrintTime);  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,AddModelInfo,The following statement contains a magic number: {  				string timeRemainingText = "---";    				if (gcodeViewWidget != null && gcodeViewWidget.LoadedGCode != null)  				{  					int secondsRemaining = (int)gcodeViewWidget.LoadedGCode.Instruction(0).secondsToEndFromHere;  					int hoursRemaining = (int)(secondsRemaining / (60 * 60));  					int minutesRemaining = (int)((secondsRemaining + 30) / 60 - hoursRemaining * 60); // +30 for rounding  					secondsRemaining = secondsRemaining % 60;  					if (hoursRemaining > 0)  					{  						timeRemainingText = string.Format("{0} h' {1} min"' hoursRemaining' minutesRemaining);  					}  					else  					{  						timeRemainingText = string.Format("{0} min"' minutesRemaining);  					}  				}    				GuiWidget estimatedPrintTime = new TextWidget(string.Format("{0}"' timeRemainingText)' textColor: ActiveTheme.Instance.PrimaryTextColor' pointSize: 14);  				//estimatedPrintTime.HAnchor = Agg.UI.HAnchor.ParentLeft;  				estimatedPrintTime.Margin = new BorderDouble(0' 9' 0' 3);  				modelInfoContainer.AddChild(estimatedPrintTime);  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,AddModelInfo,The following statement contains a magic number: {  				string timeRemainingText = "---";    				if (gcodeViewWidget != null && gcodeViewWidget.LoadedGCode != null)  				{  					int secondsRemaining = (int)gcodeViewWidget.LoadedGCode.Instruction(0).secondsToEndFromHere;  					int hoursRemaining = (int)(secondsRemaining / (60 * 60));  					int minutesRemaining = (int)((secondsRemaining + 30) / 60 - hoursRemaining * 60); // +30 for rounding  					secondsRemaining = secondsRemaining % 60;  					if (hoursRemaining > 0)  					{  						timeRemainingText = string.Format("{0} h' {1} min"' hoursRemaining' minutesRemaining);  					}  					else  					{  						timeRemainingText = string.Format("{0} min"' minutesRemaining);  					}  				}    				GuiWidget estimatedPrintTime = new TextWidget(string.Format("{0}"' timeRemainingText)' textColor: ActiveTheme.Instance.PrimaryTextColor' pointSize: 14);  				//estimatedPrintTime.HAnchor = Agg.UI.HAnchor.ParentLeft;  				estimatedPrintTime.Margin = new BorderDouble(0' 9' 0' 3);  				modelInfoContainer.AddChild(estimatedPrintTime);  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,AddModelInfo,The following statement contains a magic number: modelInfoContainer.AddChild(new TextWidget(filamentLengthLabelFull' textColor: ActiveTheme.Instance.PrimaryTextColor' pointSize: 9));
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,AddModelInfo,The following statement contains a magic number: {  				double filamentUsed = gcodeViewWidget.LoadedGCode.GetFilamentUsedMm(ActiveSliceSettings.Instance.GetValue<double>(SettingsKey.filament_diameter));    				GuiWidget estimatedPrintTime = new TextWidget(string.Format("{0:0.0} mm"' filamentUsed)' pointSize: 14' textColor: ActiveTheme.Instance.PrimaryTextColor);  				//estimatedPrintTime.HAnchor = Agg.UI.HAnchor.ParentLeft;  				estimatedPrintTime.Margin = new BorderDouble(0' 9' 0' 3);  				modelInfoContainer.AddChild(estimatedPrintTime);  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,AddModelInfo,The following statement contains a magic number: {  				double filamentUsed = gcodeViewWidget.LoadedGCode.GetFilamentUsedMm(ActiveSliceSettings.Instance.GetValue<double>(SettingsKey.filament_diameter));    				GuiWidget estimatedPrintTime = new TextWidget(string.Format("{0:0.0} mm"' filamentUsed)' pointSize: 14' textColor: ActiveTheme.Instance.PrimaryTextColor);  				//estimatedPrintTime.HAnchor = Agg.UI.HAnchor.ParentLeft;  				estimatedPrintTime.Margin = new BorderDouble(0' 9' 0' 3);  				modelInfoContainer.AddChild(estimatedPrintTime);  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,AddModelInfo,The following statement contains a magic number: {  				double filamentUsed = gcodeViewWidget.LoadedGCode.GetFilamentUsedMm(ActiveSliceSettings.Instance.GetValue<double>(SettingsKey.filament_diameter));    				GuiWidget estimatedPrintTime = new TextWidget(string.Format("{0:0.0} mm"' filamentUsed)' pointSize: 14' textColor: ActiveTheme.Instance.PrimaryTextColor);  				//estimatedPrintTime.HAnchor = Agg.UI.HAnchor.ParentLeft;  				estimatedPrintTime.Margin = new BorderDouble(0' 9' 0' 3);  				modelInfoContainer.AddChild(estimatedPrintTime);  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,AddModelInfo,The following statement contains a magic number: modelInfoContainer.AddChild(new TextWidget(filamentVolumeLabelFull' textColor: ActiveTheme.Instance.PrimaryTextColor' pointSize: 9));
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,AddModelInfo,The following statement contains a magic number: {  				double filamentMm3 = gcodeViewWidget.LoadedGCode.GetFilamentCubicMm(ActiveSliceSettings.Instance.GetValue<double>(SettingsKey.filament_diameter));    				GuiWidget estimatedPrintTime = new TextWidget(string.Format("{0:0.00} cm³"' filamentMm3 / 1000)' pointSize: 14' textColor: ActiveTheme.Instance.PrimaryTextColor);  				//estimatedPrintTime.HAnchor = Agg.UI.HAnchor.ParentLeft;  				estimatedPrintTime.Margin = new BorderDouble(0' 9' 0' 3);  				modelInfoContainer.AddChild(estimatedPrintTime);  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,AddModelInfo,The following statement contains a magic number: {  				double filamentMm3 = gcodeViewWidget.LoadedGCode.GetFilamentCubicMm(ActiveSliceSettings.Instance.GetValue<double>(SettingsKey.filament_diameter));    				GuiWidget estimatedPrintTime = new TextWidget(string.Format("{0:0.00} cm³"' filamentMm3 / 1000)' pointSize: 14' textColor: ActiveTheme.Instance.PrimaryTextColor);  				//estimatedPrintTime.HAnchor = Agg.UI.HAnchor.ParentLeft;  				estimatedPrintTime.Margin = new BorderDouble(0' 9' 0' 3);  				modelInfoContainer.AddChild(estimatedPrintTime);  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,AddModelInfo,The following statement contains a magic number: {  				double filamentMm3 = gcodeViewWidget.LoadedGCode.GetFilamentCubicMm(ActiveSliceSettings.Instance.GetValue<double>(SettingsKey.filament_diameter));    				GuiWidget estimatedPrintTime = new TextWidget(string.Format("{0:0.00} cm³"' filamentMm3 / 1000)' pointSize: 14' textColor: ActiveTheme.Instance.PrimaryTextColor);  				//estimatedPrintTime.HAnchor = Agg.UI.HAnchor.ParentLeft;  				estimatedPrintTime.Margin = new BorderDouble(0' 9' 0' 3);  				modelInfoContainer.AddChild(estimatedPrintTime);  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,AddModelInfo,The following statement contains a magic number: {  				double filamentMm3 = gcodeViewWidget.LoadedGCode.GetFilamentCubicMm(ActiveSliceSettings.Instance.GetValue<double>(SettingsKey.filament_diameter));    				GuiWidget estimatedPrintTime = new TextWidget(string.Format("{0:0.00} cm³"' filamentMm3 / 1000)' pointSize: 14' textColor: ActiveTheme.Instance.PrimaryTextColor);  				//estimatedPrintTime.HAnchor = Agg.UI.HAnchor.ParentLeft;  				estimatedPrintTime.Margin = new BorderDouble(0' 9' 0' 3);  				modelInfoContainer.AddChild(estimatedPrintTime);  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,GetEstimatedMassInfo,The following statement contains a magic number: estimatedMassInfo.AddChild(new TextWidget(massLabelFull' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,GetEstimatedMassInfo,The following statement contains a magic number: massTextWidget = new TextWidget(""' pointSize: 14' textColor: ActiveTheme.Instance.PrimaryTextColor)  			{  				AutoExpandBoundsToText = true'  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,GetEstimatedMassInfo,The following statement contains a magic number: massTextWidget.Margin = new BorderDouble(0' 9' 0' 3);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,GetEstimatedMassInfo,The following statement contains a magic number: massTextWidget.Margin = new BorderDouble(0' 9' 0' 3);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,GetEstimatedCostInfo,The following statement contains a magic number: estimatedCostInfo.AddChild(new TextWidget(costLabelFull' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,GetEstimatedCostInfo,The following statement contains a magic number: costTextWidget = new TextWidget(""' pointSize: 14' textColor: ActiveTheme.Instance.PrimaryTextColor)  			{  				AutoExpandBoundsToText = true'  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,GetEstimatedCostInfo,The following statement contains a magic number: costTextWidget.Margin = new BorderDouble(0' 9' 0' 3);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,GetEstimatedCostInfo,The following statement contains a magic number: costTextWidget.Margin = new BorderDouble(0' 9' 0' 3);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,AddLayerInfo,The following statement contains a magic number: textImageButtonFactory.FixedWidth = 44 * GuiWidget.DeviceScale;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,AddLayerInfo,The following statement contains a magic number: layerInfoContainer.Padding = new BorderDouble(5);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,AddDisplayControls,The following statement contains a magic number: textImageButtonFactory.FixedWidth = 44 * GuiWidget.DeviceScale;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,AddDisplayControls,The following statement contains a magic number: layerInfoContainer.Padding = new BorderDouble(5);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,AddDisplayControls,The following statement contains a magic number: {                  CheckBox transparentExtrusion = new CheckBox("Transparent".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor)                  {                      Checked = gcodeViewWidget.TransparentExtrusion'                      Margin = new BorderDouble(5' 0' 0' 0)'                      HAnchor = HAnchor.ParentLeft'                  };                    transparentExtrusion.CheckedStateChanged += (sender' e) =>                  {                      gcodeViewWidget.TransparentExtrusion = transparentExtrusion.Checked;                  };                  layerInfoContainer.AddChild(transparentExtrusion);              }
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,RunningIn32Bit,The following statement contains a magic number: if (IntPtr.Size == 4)  			{  				return true;  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,DoneLoadingGCode,The following statement contains a magic number: if (gcodeViewWidget != null  				&& gcodeViewWidget.LoadedGCode != null  				&& gcodeViewWidget.LoadedGCode.LineCount > 0)  			{  				CloseIfNotNull(gradientWidget);  				gradientWidget = new ColorGradientWidget(gcodeViewWidget.LoadedGCode);  				AddChild(gradientWidget);  				gradientWidget.Visible = false;    				CreateOptionsContent();  				setGradientVisibility();  				buttonRightPanel.Visible = true;  				viewControlsToggle.Visible = true;    				CloseIfNotNull(setLayerWidget);  				setLayerWidget = new SetLayerWidget(gcodeViewWidget);  				setLayerWidget.VAnchor = Agg.UI.VAnchor.ParentTop;  				layerSelectionButtonsPanel.AddChild(setLayerWidget);    				CloseIfNotNull(navigationWidget);  				navigationWidget = new LayerNavigationWidget(gcodeViewWidget);  				navigationWidget.Margin = new BorderDouble(0' 0' 20' 0);  				layerSelectionButtonsPanel.AddChild(navigationWidget);    				CloseIfNotNull(selectLayerSlider);  				selectLayerSlider = new SolidSlider(new Vector2()' sliderWidth' 0' gcodeViewWidget.LoadedGCode.NumChangesInZ - 1' Orientation.Vertical);  				selectLayerSlider.ValueChanged += new EventHandler(selectLayerSlider_ValueChanged);  				gcodeViewWidget.ActiveLayerChanged += new EventHandler(gcodeViewWidget_ActiveLayerChanged);  				AddChild(selectLayerSlider);    				CloseIfNotNull(layerRenderRatioSlider);  				layerRenderRatioSlider = new DoubleSolidSlider(new Vector2()' sliderWidth);  				layerRenderRatioSlider.FirstValue = 0;  				layerRenderRatioSlider.FirstValueChanged += new EventHandler(layerStartRenderRatioSlider_ValueChanged);  				layerRenderRatioSlider.SecondValue = 1;  				layerRenderRatioSlider.SecondValueChanged += new EventHandler(layerEndRenderRatioSlider_ValueChanged);  				AddChild(layerRenderRatioSlider);    				SetSliderSizes();    				// let's change the active layer so that it is set to the first layer with data  				gcodeViewWidget.ActiveLayerIndex = gcodeViewWidget.ActiveLayerIndex + 1;  				gcodeViewWidget.ActiveLayerIndex = gcodeViewWidget.ActiveLayerIndex - 1;    				BoundsChanged += new EventHandler(PartPreviewGCode_BoundsChanged);    				meshViewerWidget.partProcessingInfo.Visible = false;  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,gcodeViewWidget_ActiveLayerChanged,The following statement contains a magic number: if (gcodeViewWidget.ActiveLayerIndex != (int)(selectLayerSlider.Value + .5))  			{  				selectLayerSlider.Value = gcodeViewWidget.ActiveLayerIndex;  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,selectLayerSlider_ValueChanged,The following statement contains a magic number: gcodeViewWidget.ActiveLayerIndex = (int)(selectLayerSlider.Value + .5);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,SetSliderSizes,The following statement contains a magic number: selectLayerSlider.OriginRelativeParent = new Vector2(gcodeDisplayWidget.Width - 20' 70);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,SetSliderSizes,The following statement contains a magic number: selectLayerSlider.OriginRelativeParent = new Vector2(gcodeDisplayWidget.Width - 20' 70);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,SetSliderSizes,The following statement contains a magic number: selectLayerSlider.TotalWidthInPixels = gcodeDisplayWidget.Height - 80;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,SetSliderSizes,The following statement contains a magic number: layerRenderRatioSlider.OriginRelativeParent = new Vector2(60' 70);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,SetSliderSizes,The following statement contains a magic number: layerRenderRatioSlider.OriginRelativeParent = new Vector2(60' 70);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewGcodeBasic,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,SetSliderSizes,The following statement contains a magic number: layerRenderRatioSlider.TotalWidthInPixels = gcodeDisplayWidget.Width - 100;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SetLayerWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,SetLayerWidget,The following statement contains a magic number: editCurrentLayerIndex = new NumberEdit(1' pixelWidth: 40);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SetLayerWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,SetLayerWidget,The following statement contains a magic number: editCurrentLayerIndex.Margin = new BorderDouble(5' 0);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,LayerNavigationWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,LayerNavigationWidget,The following statement contains a magic number: layerCountTextWidget = new TextWidget("/1____"' 12);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,LayerNavigationWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\ViewGcodeBasic.cs,LayerNavigationWidget,The following statement contains a magic number: layerCountTextWidget.Margin = new BorderDouble(5' 0);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PartPreviewMainWindow,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\PartPreviewMainWindow.cs,PartPreviewMainWindow,The following statement contains a magic number: Width = 750;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PartPreviewMainWindow,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\PartPreviewMainWindow.cs,PartPreviewMainWindow,The following statement contains a magic number: Height = 550;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PartPreviewMainWindow,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\PartPreviewMainWindow.cs,PartPreviewMainWindow,The following statement contains a magic number: MinimumSize = new Vector2(400' 300);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PartPreviewMainWindow,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\PartPreviewMainWindow.cs,PartPreviewMainWindow,The following statement contains a magic number: MinimumSize = new Vector2(400' 300);
Magic Number,MatterHackers.MatterControl.PrinterControls,AdjustmentControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\AdjustmentControls.cs,AdjustmentControls,The following statement contains a magic number: var adjustmentControlsGroupBox = new AltGroupBox(new TextWidget("Tuning Adjustment".Localize()' pointSize: 18' textColor: ActiveTheme.Instance.SecondaryAccentColor))  			{  				Margin = 0'  				BorderColor = ActiveTheme.Instance.PrimaryTextColor'  				HAnchor = HAnchor.ParentLeftRight  			};
Magic Number,MatterHackers.MatterControl.PrinterControls,AdjustmentControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\AdjustmentControls.cs,AdjustmentControls,The following statement contains a magic number: var topToBottom = new FlowLayoutWidget(FlowDirection.TopToBottom)  			{  				Margin = new BorderDouble(0' 0' 0' 0)'  				HAnchor = HAnchor.ParentLeftRight'  				Padding = new BorderDouble(3' 0' 3' 0)  			};
Magic Number,MatterHackers.MatterControl.PrinterControls,AdjustmentControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\AdjustmentControls.cs,AdjustmentControls,The following statement contains a magic number: var topToBottom = new FlowLayoutWidget(FlowDirection.TopToBottom)  			{  				Margin = new BorderDouble(0' 0' 0' 0)'  				HAnchor = HAnchor.ParentLeftRight'  				Padding = new BorderDouble(3' 0' 3' 0)  			};
Magic Number,MatterHackers.MatterControl.PrinterControls,AdjustmentControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\AdjustmentControls.cs,AdjustmentControls,The following statement contains a magic number: double sliderWidth = 300 * GuiWidget.DeviceScale;
Magic Number,MatterHackers.MatterControl.PrinterControls,AdjustmentControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\AdjustmentControls.cs,AdjustmentControls,The following statement contains a magic number: double sliderThumbWidth = 10 * GuiWidget.DeviceScale;
Magic Number,MatterHackers.MatterControl.PrinterControls,AdjustmentControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\AdjustmentControls.cs,AdjustmentControls,The following statement contains a magic number: if (UserSettings.Instance.IsTouchScreen)  			{  				sliderThumbWidth = 15 * GuiWidget.DeviceScale;  			}
Magic Number,MatterHackers.MatterControl.PrinterControls,AdjustmentControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\AdjustmentControls.cs,AdjustmentControls,The following statement contains a magic number: var subheader = new TextWidget(""' pointSize: 4' textColor: ActiveTheme.Instance.PrimaryTextColor);
Magic Number,MatterHackers.MatterControl.PrinterControls,AdjustmentControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\AdjustmentControls.cs,AdjustmentControls,The following statement contains a magic number: subheader.Margin = new BorderDouble(bottom: 6);
Magic Number,MatterHackers.MatterControl.PrinterControls,AdjustmentControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\AdjustmentControls.cs,AdjustmentControls,The following statement contains a magic number: {  				var row = new FlowLayoutWidget()  				{  					HAnchor = HAnchor.ParentLeftRight'  					Margin = 0'  					VAnchor = VAnchor.FitToChildren  				};    				var feedRateDescription = new TextWidget("Speed Multiplier".Localize())  				{  					MinimumSize = new Vector2(140' 0) * GuiWidget.DeviceScale'  					TextColor = ActiveTheme.Instance.PrimaryTextColor'  					VAnchor = VAnchor.ParentCenter'  				};  				row.AddChild(feedRateDescription);    				feedRateRatioSlider = new SolidSlider(new Vector2()' sliderThumbWidth' minFeedRateRatio' maxFeedRateRatio)  				{  					Name = "Feed Rate Slider"'  					Margin = new BorderDouble(5' 0)'  					Value = FeedRateMultiplyerStream.FeedRateRatio'  					HAnchor = HAnchor.ParentLeftRight'  					TotalWidthInPixels = sliderWidth'  				};  				feedRateRatioSlider.View.BackgroundColor = new RGBA_Bytes();  				feedRateRatioSlider.ValueChanged += (sender' e) =>  				{  					feedRateValue.ActuallNumberEdit.Value = Math.Round(feedRateRatioSlider.Value' 2);  				};  				feedRateRatioSlider.SliderReleased += (s' e) =>  				{  					// Update state for runtime use  					FeedRateMultiplyerStream.FeedRateRatio = Math.Round(feedRateRatioSlider.Value' 2);    					// Persist data for future use  					ActiveSliceSettings.Instance.SetValue(  						SettingsKey.feedrate_ratio'  						FeedRateMultiplyerStream.FeedRateRatio.ToString());  				};  				row.AddChild(feedRateRatioSlider);    				feedRateValue = new MHNumberEdit(Math.Round(FeedRateMultiplyerStream.FeedRateRatio' 2)' allowDecimals: true' minValue: minFeedRateRatio' maxValue: maxFeedRateRatio' pixelWidth: 40 * GuiWidget.DeviceScale)  				{  					Name = "Feed Rate NumberEdit"'  					SelectAllOnFocus = true'  					Margin = new BorderDouble(0' 0' 5' 0)'  					VAnchor = VAnchor.ParentCenter | VAnchor.FitToChildren'  					Padding = 0  				};  				feedRateValue.ActuallNumberEdit.EditComplete += (sender' e) =>  				{  					feedRateRatioSlider.Value = feedRateValue.ActuallNumberEdit.Value;    					// Update state for runtime use  					FeedRateMultiplyerStream.FeedRateRatio = Math.Round(feedRateRatioSlider.Value' 2);    					// Persist data for future use  					ActiveSliceSettings.Instance.SetValue(  						SettingsKey.feedrate_ratio'  						FeedRateMultiplyerStream.FeedRateRatio.ToString());  				};  				row.AddChild(feedRateValue);    				topToBottom.AddChild(row);    				textImageButtonFactory.FixedHeight = (int)feedRateValue.Height + 1;  				textImageButtonFactory.borderWidth = 1;  				textImageButtonFactory.normalBorderColor = new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 200);  				textImageButtonFactory.hoverBorderColor = new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 200);    				Button setButton = textImageButtonFactory.Generate("Set".Localize());  				setButton.VAnchor = VAnchor.ParentCenter;  				row.AddChild(setButton);  			}
Magic Number,MatterHackers.MatterControl.PrinterControls,AdjustmentControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\AdjustmentControls.cs,AdjustmentControls,The following statement contains a magic number: {  				var row = new FlowLayoutWidget()  				{  					HAnchor = HAnchor.ParentLeftRight'  					Margin = 0'  					VAnchor = VAnchor.FitToChildren  				};    				var feedRateDescription = new TextWidget("Speed Multiplier".Localize())  				{  					MinimumSize = new Vector2(140' 0) * GuiWidget.DeviceScale'  					TextColor = ActiveTheme.Instance.PrimaryTextColor'  					VAnchor = VAnchor.ParentCenter'  				};  				row.AddChild(feedRateDescription);    				feedRateRatioSlider = new SolidSlider(new Vector2()' sliderThumbWidth' minFeedRateRatio' maxFeedRateRatio)  				{  					Name = "Feed Rate Slider"'  					Margin = new BorderDouble(5' 0)'  					Value = FeedRateMultiplyerStream.FeedRateRatio'  					HAnchor = HAnchor.ParentLeftRight'  					TotalWidthInPixels = sliderWidth'  				};  				feedRateRatioSlider.View.BackgroundColor = new RGBA_Bytes();  				feedRateRatioSlider.ValueChanged += (sender' e) =>  				{  					feedRateValue.ActuallNumberEdit.Value = Math.Round(feedRateRatioSlider.Value' 2);  				};  				feedRateRatioSlider.SliderReleased += (s' e) =>  				{  					// Update state for runtime use  					FeedRateMultiplyerStream.FeedRateRatio = Math.Round(feedRateRatioSlider.Value' 2);    					// Persist data for future use  					ActiveSliceSettings.Instance.SetValue(  						SettingsKey.feedrate_ratio'  						FeedRateMultiplyerStream.FeedRateRatio.ToString());  				};  				row.AddChild(feedRateRatioSlider);    				feedRateValue = new MHNumberEdit(Math.Round(FeedRateMultiplyerStream.FeedRateRatio' 2)' allowDecimals: true' minValue: minFeedRateRatio' maxValue: maxFeedRateRatio' pixelWidth: 40 * GuiWidget.DeviceScale)  				{  					Name = "Feed Rate NumberEdit"'  					SelectAllOnFocus = true'  					Margin = new BorderDouble(0' 0' 5' 0)'  					VAnchor = VAnchor.ParentCenter | VAnchor.FitToChildren'  					Padding = 0  				};  				feedRateValue.ActuallNumberEdit.EditComplete += (sender' e) =>  				{  					feedRateRatioSlider.Value = feedRateValue.ActuallNumberEdit.Value;    					// Update state for runtime use  					FeedRateMultiplyerStream.FeedRateRatio = Math.Round(feedRateRatioSlider.Value' 2);    					// Persist data for future use  					ActiveSliceSettings.Instance.SetValue(  						SettingsKey.feedrate_ratio'  						FeedRateMultiplyerStream.FeedRateRatio.ToString());  				};  				row.AddChild(feedRateValue);    				topToBottom.AddChild(row);    				textImageButtonFactory.FixedHeight = (int)feedRateValue.Height + 1;  				textImageButtonFactory.borderWidth = 1;  				textImageButtonFactory.normalBorderColor = new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 200);  				textImageButtonFactory.hoverBorderColor = new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 200);    				Button setButton = textImageButtonFactory.Generate("Set".Localize());  				setButton.VAnchor = VAnchor.ParentCenter;  				row.AddChild(setButton);  			}
Magic Number,MatterHackers.MatterControl.PrinterControls,AdjustmentControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\AdjustmentControls.cs,AdjustmentControls,The following statement contains a magic number: {  				var row = new FlowLayoutWidget()  				{  					HAnchor = HAnchor.ParentLeftRight'  					Margin = 0'  					VAnchor = VAnchor.FitToChildren  				};    				var feedRateDescription = new TextWidget("Speed Multiplier".Localize())  				{  					MinimumSize = new Vector2(140' 0) * GuiWidget.DeviceScale'  					TextColor = ActiveTheme.Instance.PrimaryTextColor'  					VAnchor = VAnchor.ParentCenter'  				};  				row.AddChild(feedRateDescription);    				feedRateRatioSlider = new SolidSlider(new Vector2()' sliderThumbWidth' minFeedRateRatio' maxFeedRateRatio)  				{  					Name = "Feed Rate Slider"'  					Margin = new BorderDouble(5' 0)'  					Value = FeedRateMultiplyerStream.FeedRateRatio'  					HAnchor = HAnchor.ParentLeftRight'  					TotalWidthInPixels = sliderWidth'  				};  				feedRateRatioSlider.View.BackgroundColor = new RGBA_Bytes();  				feedRateRatioSlider.ValueChanged += (sender' e) =>  				{  					feedRateValue.ActuallNumberEdit.Value = Math.Round(feedRateRatioSlider.Value' 2);  				};  				feedRateRatioSlider.SliderReleased += (s' e) =>  				{  					// Update state for runtime use  					FeedRateMultiplyerStream.FeedRateRatio = Math.Round(feedRateRatioSlider.Value' 2);    					// Persist data for future use  					ActiveSliceSettings.Instance.SetValue(  						SettingsKey.feedrate_ratio'  						FeedRateMultiplyerStream.FeedRateRatio.ToString());  				};  				row.AddChild(feedRateRatioSlider);    				feedRateValue = new MHNumberEdit(Math.Round(FeedRateMultiplyerStream.FeedRateRatio' 2)' allowDecimals: true' minValue: minFeedRateRatio' maxValue: maxFeedRateRatio' pixelWidth: 40 * GuiWidget.DeviceScale)  				{  					Name = "Feed Rate NumberEdit"'  					SelectAllOnFocus = true'  					Margin = new BorderDouble(0' 0' 5' 0)'  					VAnchor = VAnchor.ParentCenter | VAnchor.FitToChildren'  					Padding = 0  				};  				feedRateValue.ActuallNumberEdit.EditComplete += (sender' e) =>  				{  					feedRateRatioSlider.Value = feedRateValue.ActuallNumberEdit.Value;    					// Update state for runtime use  					FeedRateMultiplyerStream.FeedRateRatio = Math.Round(feedRateRatioSlider.Value' 2);    					// Persist data for future use  					ActiveSliceSettings.Instance.SetValue(  						SettingsKey.feedrate_ratio'  						FeedRateMultiplyerStream.FeedRateRatio.ToString());  				};  				row.AddChild(feedRateValue);    				topToBottom.AddChild(row);    				textImageButtonFactory.FixedHeight = (int)feedRateValue.Height + 1;  				textImageButtonFactory.borderWidth = 1;  				textImageButtonFactory.normalBorderColor = new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 200);  				textImageButtonFactory.hoverBorderColor = new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 200);    				Button setButton = textImageButtonFactory.Generate("Set".Localize());  				setButton.VAnchor = VAnchor.ParentCenter;  				row.AddChild(setButton);  			}
Magic Number,MatterHackers.MatterControl.PrinterControls,AdjustmentControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\AdjustmentControls.cs,AdjustmentControls,The following statement contains a magic number: {  				var row = new FlowLayoutWidget()  				{  					HAnchor = HAnchor.ParentLeftRight'  					Margin = 0'  					VAnchor = VAnchor.FitToChildren  				};    				var feedRateDescription = new TextWidget("Speed Multiplier".Localize())  				{  					MinimumSize = new Vector2(140' 0) * GuiWidget.DeviceScale'  					TextColor = ActiveTheme.Instance.PrimaryTextColor'  					VAnchor = VAnchor.ParentCenter'  				};  				row.AddChild(feedRateDescription);    				feedRateRatioSlider = new SolidSlider(new Vector2()' sliderThumbWidth' minFeedRateRatio' maxFeedRateRatio)  				{  					Name = "Feed Rate Slider"'  					Margin = new BorderDouble(5' 0)'  					Value = FeedRateMultiplyerStream.FeedRateRatio'  					HAnchor = HAnchor.ParentLeftRight'  					TotalWidthInPixels = sliderWidth'  				};  				feedRateRatioSlider.View.BackgroundColor = new RGBA_Bytes();  				feedRateRatioSlider.ValueChanged += (sender' e) =>  				{  					feedRateValue.ActuallNumberEdit.Value = Math.Round(feedRateRatioSlider.Value' 2);  				};  				feedRateRatioSlider.SliderReleased += (s' e) =>  				{  					// Update state for runtime use  					FeedRateMultiplyerStream.FeedRateRatio = Math.Round(feedRateRatioSlider.Value' 2);    					// Persist data for future use  					ActiveSliceSettings.Instance.SetValue(  						SettingsKey.feedrate_ratio'  						FeedRateMultiplyerStream.FeedRateRatio.ToString());  				};  				row.AddChild(feedRateRatioSlider);    				feedRateValue = new MHNumberEdit(Math.Round(FeedRateMultiplyerStream.FeedRateRatio' 2)' allowDecimals: true' minValue: minFeedRateRatio' maxValue: maxFeedRateRatio' pixelWidth: 40 * GuiWidget.DeviceScale)  				{  					Name = "Feed Rate NumberEdit"'  					SelectAllOnFocus = true'  					Margin = new BorderDouble(0' 0' 5' 0)'  					VAnchor = VAnchor.ParentCenter | VAnchor.FitToChildren'  					Padding = 0  				};  				feedRateValue.ActuallNumberEdit.EditComplete += (sender' e) =>  				{  					feedRateRatioSlider.Value = feedRateValue.ActuallNumberEdit.Value;    					// Update state for runtime use  					FeedRateMultiplyerStream.FeedRateRatio = Math.Round(feedRateRatioSlider.Value' 2);    					// Persist data for future use  					ActiveSliceSettings.Instance.SetValue(  						SettingsKey.feedrate_ratio'  						FeedRateMultiplyerStream.FeedRateRatio.ToString());  				};  				row.AddChild(feedRateValue);    				topToBottom.AddChild(row);    				textImageButtonFactory.FixedHeight = (int)feedRateValue.Height + 1;  				textImageButtonFactory.borderWidth = 1;  				textImageButtonFactory.normalBorderColor = new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 200);  				textImageButtonFactory.hoverBorderColor = new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 200);    				Button setButton = textImageButtonFactory.Generate("Set".Localize());  				setButton.VAnchor = VAnchor.ParentCenter;  				row.AddChild(setButton);  			}
Magic Number,MatterHackers.MatterControl.PrinterControls,AdjustmentControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\AdjustmentControls.cs,AdjustmentControls,The following statement contains a magic number: {  				var row = new FlowLayoutWidget()  				{  					HAnchor = HAnchor.ParentLeftRight'  					Margin = 0'  					VAnchor = VAnchor.FitToChildren  				};    				var feedRateDescription = new TextWidget("Speed Multiplier".Localize())  				{  					MinimumSize = new Vector2(140' 0) * GuiWidget.DeviceScale'  					TextColor = ActiveTheme.Instance.PrimaryTextColor'  					VAnchor = VAnchor.ParentCenter'  				};  				row.AddChild(feedRateDescription);    				feedRateRatioSlider = new SolidSlider(new Vector2()' sliderThumbWidth' minFeedRateRatio' maxFeedRateRatio)  				{  					Name = "Feed Rate Slider"'  					Margin = new BorderDouble(5' 0)'  					Value = FeedRateMultiplyerStream.FeedRateRatio'  					HAnchor = HAnchor.ParentLeftRight'  					TotalWidthInPixels = sliderWidth'  				};  				feedRateRatioSlider.View.BackgroundColor = new RGBA_Bytes();  				feedRateRatioSlider.ValueChanged += (sender' e) =>  				{  					feedRateValue.ActuallNumberEdit.Value = Math.Round(feedRateRatioSlider.Value' 2);  				};  				feedRateRatioSlider.SliderReleased += (s' e) =>  				{  					// Update state for runtime use  					FeedRateMultiplyerStream.FeedRateRatio = Math.Round(feedRateRatioSlider.Value' 2);    					// Persist data for future use  					ActiveSliceSettings.Instance.SetValue(  						SettingsKey.feedrate_ratio'  						FeedRateMultiplyerStream.FeedRateRatio.ToString());  				};  				row.AddChild(feedRateRatioSlider);    				feedRateValue = new MHNumberEdit(Math.Round(FeedRateMultiplyerStream.FeedRateRatio' 2)' allowDecimals: true' minValue: minFeedRateRatio' maxValue: maxFeedRateRatio' pixelWidth: 40 * GuiWidget.DeviceScale)  				{  					Name = "Feed Rate NumberEdit"'  					SelectAllOnFocus = true'  					Margin = new BorderDouble(0' 0' 5' 0)'  					VAnchor = VAnchor.ParentCenter | VAnchor.FitToChildren'  					Padding = 0  				};  				feedRateValue.ActuallNumberEdit.EditComplete += (sender' e) =>  				{  					feedRateRatioSlider.Value = feedRateValue.ActuallNumberEdit.Value;    					// Update state for runtime use  					FeedRateMultiplyerStream.FeedRateRatio = Math.Round(feedRateRatioSlider.Value' 2);    					// Persist data for future use  					ActiveSliceSettings.Instance.SetValue(  						SettingsKey.feedrate_ratio'  						FeedRateMultiplyerStream.FeedRateRatio.ToString());  				};  				row.AddChild(feedRateValue);    				topToBottom.AddChild(row);    				textImageButtonFactory.FixedHeight = (int)feedRateValue.Height + 1;  				textImageButtonFactory.borderWidth = 1;  				textImageButtonFactory.normalBorderColor = new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 200);  				textImageButtonFactory.hoverBorderColor = new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 200);    				Button setButton = textImageButtonFactory.Generate("Set".Localize());  				setButton.VAnchor = VAnchor.ParentCenter;  				row.AddChild(setButton);  			}
Magic Number,MatterHackers.MatterControl.PrinterControls,AdjustmentControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\AdjustmentControls.cs,AdjustmentControls,The following statement contains a magic number: {  				var row = new FlowLayoutWidget()  				{  					HAnchor = HAnchor.ParentLeftRight'  					Margin = 0'  					VAnchor = VAnchor.FitToChildren  				};    				var feedRateDescription = new TextWidget("Speed Multiplier".Localize())  				{  					MinimumSize = new Vector2(140' 0) * GuiWidget.DeviceScale'  					TextColor = ActiveTheme.Instance.PrimaryTextColor'  					VAnchor = VAnchor.ParentCenter'  				};  				row.AddChild(feedRateDescription);    				feedRateRatioSlider = new SolidSlider(new Vector2()' sliderThumbWidth' minFeedRateRatio' maxFeedRateRatio)  				{  					Name = "Feed Rate Slider"'  					Margin = new BorderDouble(5' 0)'  					Value = FeedRateMultiplyerStream.FeedRateRatio'  					HAnchor = HAnchor.ParentLeftRight'  					TotalWidthInPixels = sliderWidth'  				};  				feedRateRatioSlider.View.BackgroundColor = new RGBA_Bytes();  				feedRateRatioSlider.ValueChanged += (sender' e) =>  				{  					feedRateValue.ActuallNumberEdit.Value = Math.Round(feedRateRatioSlider.Value' 2);  				};  				feedRateRatioSlider.SliderReleased += (s' e) =>  				{  					// Update state for runtime use  					FeedRateMultiplyerStream.FeedRateRatio = Math.Round(feedRateRatioSlider.Value' 2);    					// Persist data for future use  					ActiveSliceSettings.Instance.SetValue(  						SettingsKey.feedrate_ratio'  						FeedRateMultiplyerStream.FeedRateRatio.ToString());  				};  				row.AddChild(feedRateRatioSlider);    				feedRateValue = new MHNumberEdit(Math.Round(FeedRateMultiplyerStream.FeedRateRatio' 2)' allowDecimals: true' minValue: minFeedRateRatio' maxValue: maxFeedRateRatio' pixelWidth: 40 * GuiWidget.DeviceScale)  				{  					Name = "Feed Rate NumberEdit"'  					SelectAllOnFocus = true'  					Margin = new BorderDouble(0' 0' 5' 0)'  					VAnchor = VAnchor.ParentCenter | VAnchor.FitToChildren'  					Padding = 0  				};  				feedRateValue.ActuallNumberEdit.EditComplete += (sender' e) =>  				{  					feedRateRatioSlider.Value = feedRateValue.ActuallNumberEdit.Value;    					// Update state for runtime use  					FeedRateMultiplyerStream.FeedRateRatio = Math.Round(feedRateRatioSlider.Value' 2);    					// Persist data for future use  					ActiveSliceSettings.Instance.SetValue(  						SettingsKey.feedrate_ratio'  						FeedRateMultiplyerStream.FeedRateRatio.ToString());  				};  				row.AddChild(feedRateValue);    				topToBottom.AddChild(row);    				textImageButtonFactory.FixedHeight = (int)feedRateValue.Height + 1;  				textImageButtonFactory.borderWidth = 1;  				textImageButtonFactory.normalBorderColor = new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 200);  				textImageButtonFactory.hoverBorderColor = new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 200);    				Button setButton = textImageButtonFactory.Generate("Set".Localize());  				setButton.VAnchor = VAnchor.ParentCenter;  				row.AddChild(setButton);  			}
Magic Number,MatterHackers.MatterControl.PrinterControls,AdjustmentControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\AdjustmentControls.cs,AdjustmentControls,The following statement contains a magic number: {  				var row = new FlowLayoutWidget()  				{  					HAnchor = HAnchor.ParentLeftRight'  					Margin = 0'  					VAnchor = VAnchor.FitToChildren  				};    				var feedRateDescription = new TextWidget("Speed Multiplier".Localize())  				{  					MinimumSize = new Vector2(140' 0) * GuiWidget.DeviceScale'  					TextColor = ActiveTheme.Instance.PrimaryTextColor'  					VAnchor = VAnchor.ParentCenter'  				};  				row.AddChild(feedRateDescription);    				feedRateRatioSlider = new SolidSlider(new Vector2()' sliderThumbWidth' minFeedRateRatio' maxFeedRateRatio)  				{  					Name = "Feed Rate Slider"'  					Margin = new BorderDouble(5' 0)'  					Value = FeedRateMultiplyerStream.FeedRateRatio'  					HAnchor = HAnchor.ParentLeftRight'  					TotalWidthInPixels = sliderWidth'  				};  				feedRateRatioSlider.View.BackgroundColor = new RGBA_Bytes();  				feedRateRatioSlider.ValueChanged += (sender' e) =>  				{  					feedRateValue.ActuallNumberEdit.Value = Math.Round(feedRateRatioSlider.Value' 2);  				};  				feedRateRatioSlider.SliderReleased += (s' e) =>  				{  					// Update state for runtime use  					FeedRateMultiplyerStream.FeedRateRatio = Math.Round(feedRateRatioSlider.Value' 2);    					// Persist data for future use  					ActiveSliceSettings.Instance.SetValue(  						SettingsKey.feedrate_ratio'  						FeedRateMultiplyerStream.FeedRateRatio.ToString());  				};  				row.AddChild(feedRateRatioSlider);    				feedRateValue = new MHNumberEdit(Math.Round(FeedRateMultiplyerStream.FeedRateRatio' 2)' allowDecimals: true' minValue: minFeedRateRatio' maxValue: maxFeedRateRatio' pixelWidth: 40 * GuiWidget.DeviceScale)  				{  					Name = "Feed Rate NumberEdit"'  					SelectAllOnFocus = true'  					Margin = new BorderDouble(0' 0' 5' 0)'  					VAnchor = VAnchor.ParentCenter | VAnchor.FitToChildren'  					Padding = 0  				};  				feedRateValue.ActuallNumberEdit.EditComplete += (sender' e) =>  				{  					feedRateRatioSlider.Value = feedRateValue.ActuallNumberEdit.Value;    					// Update state for runtime use  					FeedRateMultiplyerStream.FeedRateRatio = Math.Round(feedRateRatioSlider.Value' 2);    					// Persist data for future use  					ActiveSliceSettings.Instance.SetValue(  						SettingsKey.feedrate_ratio'  						FeedRateMultiplyerStream.FeedRateRatio.ToString());  				};  				row.AddChild(feedRateValue);    				topToBottom.AddChild(row);    				textImageButtonFactory.FixedHeight = (int)feedRateValue.Height + 1;  				textImageButtonFactory.borderWidth = 1;  				textImageButtonFactory.normalBorderColor = new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 200);  				textImageButtonFactory.hoverBorderColor = new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 200);    				Button setButton = textImageButtonFactory.Generate("Set".Localize());  				setButton.VAnchor = VAnchor.ParentCenter;  				row.AddChild(setButton);  			}
Magic Number,MatterHackers.MatterControl.PrinterControls,AdjustmentControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\AdjustmentControls.cs,AdjustmentControls,The following statement contains a magic number: {  				var row = new FlowLayoutWidget()  				{  					HAnchor = HAnchor.ParentLeftRight'  					Margin = 0'  					VAnchor = VAnchor.FitToChildren  				};    				var feedRateDescription = new TextWidget("Speed Multiplier".Localize())  				{  					MinimumSize = new Vector2(140' 0) * GuiWidget.DeviceScale'  					TextColor = ActiveTheme.Instance.PrimaryTextColor'  					VAnchor = VAnchor.ParentCenter'  				};  				row.AddChild(feedRateDescription);    				feedRateRatioSlider = new SolidSlider(new Vector2()' sliderThumbWidth' minFeedRateRatio' maxFeedRateRatio)  				{  					Name = "Feed Rate Slider"'  					Margin = new BorderDouble(5' 0)'  					Value = FeedRateMultiplyerStream.FeedRateRatio'  					HAnchor = HAnchor.ParentLeftRight'  					TotalWidthInPixels = sliderWidth'  				};  				feedRateRatioSlider.View.BackgroundColor = new RGBA_Bytes();  				feedRateRatioSlider.ValueChanged += (sender' e) =>  				{  					feedRateValue.ActuallNumberEdit.Value = Math.Round(feedRateRatioSlider.Value' 2);  				};  				feedRateRatioSlider.SliderReleased += (s' e) =>  				{  					// Update state for runtime use  					FeedRateMultiplyerStream.FeedRateRatio = Math.Round(feedRateRatioSlider.Value' 2);    					// Persist data for future use  					ActiveSliceSettings.Instance.SetValue(  						SettingsKey.feedrate_ratio'  						FeedRateMultiplyerStream.FeedRateRatio.ToString());  				};  				row.AddChild(feedRateRatioSlider);    				feedRateValue = new MHNumberEdit(Math.Round(FeedRateMultiplyerStream.FeedRateRatio' 2)' allowDecimals: true' minValue: minFeedRateRatio' maxValue: maxFeedRateRatio' pixelWidth: 40 * GuiWidget.DeviceScale)  				{  					Name = "Feed Rate NumberEdit"'  					SelectAllOnFocus = true'  					Margin = new BorderDouble(0' 0' 5' 0)'  					VAnchor = VAnchor.ParentCenter | VAnchor.FitToChildren'  					Padding = 0  				};  				feedRateValue.ActuallNumberEdit.EditComplete += (sender' e) =>  				{  					feedRateRatioSlider.Value = feedRateValue.ActuallNumberEdit.Value;    					// Update state for runtime use  					FeedRateMultiplyerStream.FeedRateRatio = Math.Round(feedRateRatioSlider.Value' 2);    					// Persist data for future use  					ActiveSliceSettings.Instance.SetValue(  						SettingsKey.feedrate_ratio'  						FeedRateMultiplyerStream.FeedRateRatio.ToString());  				};  				row.AddChild(feedRateValue);    				topToBottom.AddChild(row);    				textImageButtonFactory.FixedHeight = (int)feedRateValue.Height + 1;  				textImageButtonFactory.borderWidth = 1;  				textImageButtonFactory.normalBorderColor = new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 200);  				textImageButtonFactory.hoverBorderColor = new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 200);    				Button setButton = textImageButtonFactory.Generate("Set".Localize());  				setButton.VAnchor = VAnchor.ParentCenter;  				row.AddChild(setButton);  			}
Magic Number,MatterHackers.MatterControl.PrinterControls,AdjustmentControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\AdjustmentControls.cs,AdjustmentControls,The following statement contains a magic number: {  				var row = new FlowLayoutWidget()  				{  					HAnchor = HAnchor.ParentLeftRight'  					Margin = 0'  					VAnchor = VAnchor.FitToChildren  				};    				var feedRateDescription = new TextWidget("Speed Multiplier".Localize())  				{  					MinimumSize = new Vector2(140' 0) * GuiWidget.DeviceScale'  					TextColor = ActiveTheme.Instance.PrimaryTextColor'  					VAnchor = VAnchor.ParentCenter'  				};  				row.AddChild(feedRateDescription);    				feedRateRatioSlider = new SolidSlider(new Vector2()' sliderThumbWidth' minFeedRateRatio' maxFeedRateRatio)  				{  					Name = "Feed Rate Slider"'  					Margin = new BorderDouble(5' 0)'  					Value = FeedRateMultiplyerStream.FeedRateRatio'  					HAnchor = HAnchor.ParentLeftRight'  					TotalWidthInPixels = sliderWidth'  				};  				feedRateRatioSlider.View.BackgroundColor = new RGBA_Bytes();  				feedRateRatioSlider.ValueChanged += (sender' e) =>  				{  					feedRateValue.ActuallNumberEdit.Value = Math.Round(feedRateRatioSlider.Value' 2);  				};  				feedRateRatioSlider.SliderReleased += (s' e) =>  				{  					// Update state for runtime use  					FeedRateMultiplyerStream.FeedRateRatio = Math.Round(feedRateRatioSlider.Value' 2);    					// Persist data for future use  					ActiveSliceSettings.Instance.SetValue(  						SettingsKey.feedrate_ratio'  						FeedRateMultiplyerStream.FeedRateRatio.ToString());  				};  				row.AddChild(feedRateRatioSlider);    				feedRateValue = new MHNumberEdit(Math.Round(FeedRateMultiplyerStream.FeedRateRatio' 2)' allowDecimals: true' minValue: minFeedRateRatio' maxValue: maxFeedRateRatio' pixelWidth: 40 * GuiWidget.DeviceScale)  				{  					Name = "Feed Rate NumberEdit"'  					SelectAllOnFocus = true'  					Margin = new BorderDouble(0' 0' 5' 0)'  					VAnchor = VAnchor.ParentCenter | VAnchor.FitToChildren'  					Padding = 0  				};  				feedRateValue.ActuallNumberEdit.EditComplete += (sender' e) =>  				{  					feedRateRatioSlider.Value = feedRateValue.ActuallNumberEdit.Value;    					// Update state for runtime use  					FeedRateMultiplyerStream.FeedRateRatio = Math.Round(feedRateRatioSlider.Value' 2);    					// Persist data for future use  					ActiveSliceSettings.Instance.SetValue(  						SettingsKey.feedrate_ratio'  						FeedRateMultiplyerStream.FeedRateRatio.ToString());  				};  				row.AddChild(feedRateValue);    				topToBottom.AddChild(row);    				textImageButtonFactory.FixedHeight = (int)feedRateValue.Height + 1;  				textImageButtonFactory.borderWidth = 1;  				textImageButtonFactory.normalBorderColor = new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 200);  				textImageButtonFactory.hoverBorderColor = new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 200);    				Button setButton = textImageButtonFactory.Generate("Set".Localize());  				setButton.VAnchor = VAnchor.ParentCenter;  				row.AddChild(setButton);  			}
Magic Number,MatterHackers.MatterControl.PrinterControls,AdjustmentControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\AdjustmentControls.cs,AdjustmentControls,The following statement contains a magic number: {  				var row = new FlowLayoutWidget()  				{  					HAnchor = HAnchor.ParentLeftRight'  					Margin = 0'  					VAnchor = VAnchor.FitToChildren  				};    				var feedRateDescription = new TextWidget("Speed Multiplier".Localize())  				{  					MinimumSize = new Vector2(140' 0) * GuiWidget.DeviceScale'  					TextColor = ActiveTheme.Instance.PrimaryTextColor'  					VAnchor = VAnchor.ParentCenter'  				};  				row.AddChild(feedRateDescription);    				feedRateRatioSlider = new SolidSlider(new Vector2()' sliderThumbWidth' minFeedRateRatio' maxFeedRateRatio)  				{  					Name = "Feed Rate Slider"'  					Margin = new BorderDouble(5' 0)'  					Value = FeedRateMultiplyerStream.FeedRateRatio'  					HAnchor = HAnchor.ParentLeftRight'  					TotalWidthInPixels = sliderWidth'  				};  				feedRateRatioSlider.View.BackgroundColor = new RGBA_Bytes();  				feedRateRatioSlider.ValueChanged += (sender' e) =>  				{  					feedRateValue.ActuallNumberEdit.Value = Math.Round(feedRateRatioSlider.Value' 2);  				};  				feedRateRatioSlider.SliderReleased += (s' e) =>  				{  					// Update state for runtime use  					FeedRateMultiplyerStream.FeedRateRatio = Math.Round(feedRateRatioSlider.Value' 2);    					// Persist data for future use  					ActiveSliceSettings.Instance.SetValue(  						SettingsKey.feedrate_ratio'  						FeedRateMultiplyerStream.FeedRateRatio.ToString());  				};  				row.AddChild(feedRateRatioSlider);    				feedRateValue = new MHNumberEdit(Math.Round(FeedRateMultiplyerStream.FeedRateRatio' 2)' allowDecimals: true' minValue: minFeedRateRatio' maxValue: maxFeedRateRatio' pixelWidth: 40 * GuiWidget.DeviceScale)  				{  					Name = "Feed Rate NumberEdit"'  					SelectAllOnFocus = true'  					Margin = new BorderDouble(0' 0' 5' 0)'  					VAnchor = VAnchor.ParentCenter | VAnchor.FitToChildren'  					Padding = 0  				};  				feedRateValue.ActuallNumberEdit.EditComplete += (sender' e) =>  				{  					feedRateRatioSlider.Value = feedRateValue.ActuallNumberEdit.Value;    					// Update state for runtime use  					FeedRateMultiplyerStream.FeedRateRatio = Math.Round(feedRateRatioSlider.Value' 2);    					// Persist data for future use  					ActiveSliceSettings.Instance.SetValue(  						SettingsKey.feedrate_ratio'  						FeedRateMultiplyerStream.FeedRateRatio.ToString());  				};  				row.AddChild(feedRateValue);    				topToBottom.AddChild(row);    				textImageButtonFactory.FixedHeight = (int)feedRateValue.Height + 1;  				textImageButtonFactory.borderWidth = 1;  				textImageButtonFactory.normalBorderColor = new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 200);  				textImageButtonFactory.hoverBorderColor = new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 200);    				Button setButton = textImageButtonFactory.Generate("Set".Localize());  				setButton.VAnchor = VAnchor.ParentCenter;  				row.AddChild(setButton);  			}
Magic Number,MatterHackers.MatterControl.PrinterControls,AdjustmentControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\AdjustmentControls.cs,AdjustmentControls,The following statement contains a magic number: {  				var row = new FlowLayoutWidget()  				{  					HAnchor = HAnchor.ParentLeftRight'  					Margin = new BorderDouble(top: 10)'  					VAnchor = VAnchor.FitToChildren  				};    				var extrusionDescription = new TextWidget("Extrusion Multiplier".Localize())  				{  					MinimumSize = new Vector2(140' 0) * GuiWidget.DeviceScale'  					TextColor = ActiveTheme.Instance.PrimaryTextColor'  					VAnchor = VAnchor.ParentCenter  				};  				row.AddChild(extrusionDescription);    				extrusionRatioSlider = new SolidSlider(new Vector2()' sliderThumbWidth' minExtrutionRatio' maxExtrusionRatio' Orientation.Horizontal)  				{  					Name = "Extrusion Multiplier Slider"'  					TotalWidthInPixels = sliderWidth'  					HAnchor = HAnchor.ParentLeftRight'  					Margin = new BorderDouble(5' 0)'  					Value = ExtrusionMultiplyerStream.ExtrusionRatio  				};  				extrusionRatioSlider.View.BackgroundColor = new RGBA_Bytes();  				extrusionRatioSlider.ValueChanged += (sender' e) =>  				{  					extrusionValue.ActuallNumberEdit.Value = Math.Round(extrusionRatioSlider.Value' 2);  				};  				extrusionRatioSlider.SliderReleased += (s' e) =>  				{  					// Update state for runtime use  					ExtrusionMultiplyerStream.ExtrusionRatio = Math.Round(extrusionRatioSlider.Value' 2);    					// Persist data for future use  					ActiveSliceSettings.Instance.SetValue(  						SettingsKey.extrusion_ratio'  						ExtrusionMultiplyerStream.ExtrusionRatio.ToString());  				};    				extrusionValue = new MHNumberEdit(Math.Round(ExtrusionMultiplyerStream.ExtrusionRatio' 2)' allowDecimals: true' minValue: minExtrutionRatio' maxValue: maxExtrusionRatio' pixelWidth: 40 * GuiWidget.DeviceScale)  				{  					Name = "Extrusion Multiplier NumberEdit"'  					SelectAllOnFocus = true'  					Margin = new BorderDouble(0' 0' 5' 0)'  					VAnchor = VAnchor.ParentCenter | VAnchor.FitToChildren'  					Padding = 0  				};  				extrusionValue.ActuallNumberEdit.EditComplete += (sender' e) =>  				{  					extrusionRatioSlider.Value = extrusionValue.ActuallNumberEdit.Value;    					// Update state for runtime use  					ExtrusionMultiplyerStream.ExtrusionRatio = Math.Round(extrusionRatioSlider.Value' 2);    					// Persist data for future use  					ActiveSliceSettings.Instance.SetValue(  						SettingsKey.extrusion_ratio'  						ExtrusionMultiplyerStream.ExtrusionRatio.ToString());  				};  				row.AddChild(extrusionRatioSlider);  				row.AddChild(extrusionValue);    				topToBottom.AddChild(row);  				  				textImageButtonFactory.FixedHeight = (int)extrusionValue.Height + 1;    				Button setButton = textImageButtonFactory.Generate("Set".Localize());  				setButton.VAnchor = VAnchor.ParentCenter;  				row.AddChild(setButton);  			}
Magic Number,MatterHackers.MatterControl.PrinterControls,AdjustmentControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\AdjustmentControls.cs,AdjustmentControls,The following statement contains a magic number: {  				var row = new FlowLayoutWidget()  				{  					HAnchor = HAnchor.ParentLeftRight'  					Margin = new BorderDouble(top: 10)'  					VAnchor = VAnchor.FitToChildren  				};    				var extrusionDescription = new TextWidget("Extrusion Multiplier".Localize())  				{  					MinimumSize = new Vector2(140' 0) * GuiWidget.DeviceScale'  					TextColor = ActiveTheme.Instance.PrimaryTextColor'  					VAnchor = VAnchor.ParentCenter  				};  				row.AddChild(extrusionDescription);    				extrusionRatioSlider = new SolidSlider(new Vector2()' sliderThumbWidth' minExtrutionRatio' maxExtrusionRatio' Orientation.Horizontal)  				{  					Name = "Extrusion Multiplier Slider"'  					TotalWidthInPixels = sliderWidth'  					HAnchor = HAnchor.ParentLeftRight'  					Margin = new BorderDouble(5' 0)'  					Value = ExtrusionMultiplyerStream.ExtrusionRatio  				};  				extrusionRatioSlider.View.BackgroundColor = new RGBA_Bytes();  				extrusionRatioSlider.ValueChanged += (sender' e) =>  				{  					extrusionValue.ActuallNumberEdit.Value = Math.Round(extrusionRatioSlider.Value' 2);  				};  				extrusionRatioSlider.SliderReleased += (s' e) =>  				{  					// Update state for runtime use  					ExtrusionMultiplyerStream.ExtrusionRatio = Math.Round(extrusionRatioSlider.Value' 2);    					// Persist data for future use  					ActiveSliceSettings.Instance.SetValue(  						SettingsKey.extrusion_ratio'  						ExtrusionMultiplyerStream.ExtrusionRatio.ToString());  				};    				extrusionValue = new MHNumberEdit(Math.Round(ExtrusionMultiplyerStream.ExtrusionRatio' 2)' allowDecimals: true' minValue: minExtrutionRatio' maxValue: maxExtrusionRatio' pixelWidth: 40 * GuiWidget.DeviceScale)  				{  					Name = "Extrusion Multiplier NumberEdit"'  					SelectAllOnFocus = true'  					Margin = new BorderDouble(0' 0' 5' 0)'  					VAnchor = VAnchor.ParentCenter | VAnchor.FitToChildren'  					Padding = 0  				};  				extrusionValue.ActuallNumberEdit.EditComplete += (sender' e) =>  				{  					extrusionRatioSlider.Value = extrusionValue.ActuallNumberEdit.Value;    					// Update state for runtime use  					ExtrusionMultiplyerStream.ExtrusionRatio = Math.Round(extrusionRatioSlider.Value' 2);    					// Persist data for future use  					ActiveSliceSettings.Instance.SetValue(  						SettingsKey.extrusion_ratio'  						ExtrusionMultiplyerStream.ExtrusionRatio.ToString());  				};  				row.AddChild(extrusionRatioSlider);  				row.AddChild(extrusionValue);    				topToBottom.AddChild(row);  				  				textImageButtonFactory.FixedHeight = (int)extrusionValue.Height + 1;    				Button setButton = textImageButtonFactory.Generate("Set".Localize());  				setButton.VAnchor = VAnchor.ParentCenter;  				row.AddChild(setButton);  			}
Magic Number,MatterHackers.MatterControl.PrinterControls,AdjustmentControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\AdjustmentControls.cs,AdjustmentControls,The following statement contains a magic number: {  				var row = new FlowLayoutWidget()  				{  					HAnchor = HAnchor.ParentLeftRight'  					Margin = new BorderDouble(top: 10)'  					VAnchor = VAnchor.FitToChildren  				};    				var extrusionDescription = new TextWidget("Extrusion Multiplier".Localize())  				{  					MinimumSize = new Vector2(140' 0) * GuiWidget.DeviceScale'  					TextColor = ActiveTheme.Instance.PrimaryTextColor'  					VAnchor = VAnchor.ParentCenter  				};  				row.AddChild(extrusionDescription);    				extrusionRatioSlider = new SolidSlider(new Vector2()' sliderThumbWidth' minExtrutionRatio' maxExtrusionRatio' Orientation.Horizontal)  				{  					Name = "Extrusion Multiplier Slider"'  					TotalWidthInPixels = sliderWidth'  					HAnchor = HAnchor.ParentLeftRight'  					Margin = new BorderDouble(5' 0)'  					Value = ExtrusionMultiplyerStream.ExtrusionRatio  				};  				extrusionRatioSlider.View.BackgroundColor = new RGBA_Bytes();  				extrusionRatioSlider.ValueChanged += (sender' e) =>  				{  					extrusionValue.ActuallNumberEdit.Value = Math.Round(extrusionRatioSlider.Value' 2);  				};  				extrusionRatioSlider.SliderReleased += (s' e) =>  				{  					// Update state for runtime use  					ExtrusionMultiplyerStream.ExtrusionRatio = Math.Round(extrusionRatioSlider.Value' 2);    					// Persist data for future use  					ActiveSliceSettings.Instance.SetValue(  						SettingsKey.extrusion_ratio'  						ExtrusionMultiplyerStream.ExtrusionRatio.ToString());  				};    				extrusionValue = new MHNumberEdit(Math.Round(ExtrusionMultiplyerStream.ExtrusionRatio' 2)' allowDecimals: true' minValue: minExtrutionRatio' maxValue: maxExtrusionRatio' pixelWidth: 40 * GuiWidget.DeviceScale)  				{  					Name = "Extrusion Multiplier NumberEdit"'  					SelectAllOnFocus = true'  					Margin = new BorderDouble(0' 0' 5' 0)'  					VAnchor = VAnchor.ParentCenter | VAnchor.FitToChildren'  					Padding = 0  				};  				extrusionValue.ActuallNumberEdit.EditComplete += (sender' e) =>  				{  					extrusionRatioSlider.Value = extrusionValue.ActuallNumberEdit.Value;    					// Update state for runtime use  					ExtrusionMultiplyerStream.ExtrusionRatio = Math.Round(extrusionRatioSlider.Value' 2);    					// Persist data for future use  					ActiveSliceSettings.Instance.SetValue(  						SettingsKey.extrusion_ratio'  						ExtrusionMultiplyerStream.ExtrusionRatio.ToString());  				};  				row.AddChild(extrusionRatioSlider);  				row.AddChild(extrusionValue);    				topToBottom.AddChild(row);  				  				textImageButtonFactory.FixedHeight = (int)extrusionValue.Height + 1;    				Button setButton = textImageButtonFactory.Generate("Set".Localize());  				setButton.VAnchor = VAnchor.ParentCenter;  				row.AddChild(setButton);  			}
Magic Number,MatterHackers.MatterControl.PrinterControls,AdjustmentControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\AdjustmentControls.cs,AdjustmentControls,The following statement contains a magic number: {  				var row = new FlowLayoutWidget()  				{  					HAnchor = HAnchor.ParentLeftRight'  					Margin = new BorderDouble(top: 10)'  					VAnchor = VAnchor.FitToChildren  				};    				var extrusionDescription = new TextWidget("Extrusion Multiplier".Localize())  				{  					MinimumSize = new Vector2(140' 0) * GuiWidget.DeviceScale'  					TextColor = ActiveTheme.Instance.PrimaryTextColor'  					VAnchor = VAnchor.ParentCenter  				};  				row.AddChild(extrusionDescription);    				extrusionRatioSlider = new SolidSlider(new Vector2()' sliderThumbWidth' minExtrutionRatio' maxExtrusionRatio' Orientation.Horizontal)  				{  					Name = "Extrusion Multiplier Slider"'  					TotalWidthInPixels = sliderWidth'  					HAnchor = HAnchor.ParentLeftRight'  					Margin = new BorderDouble(5' 0)'  					Value = ExtrusionMultiplyerStream.ExtrusionRatio  				};  				extrusionRatioSlider.View.BackgroundColor = new RGBA_Bytes();  				extrusionRatioSlider.ValueChanged += (sender' e) =>  				{  					extrusionValue.ActuallNumberEdit.Value = Math.Round(extrusionRatioSlider.Value' 2);  				};  				extrusionRatioSlider.SliderReleased += (s' e) =>  				{  					// Update state for runtime use  					ExtrusionMultiplyerStream.ExtrusionRatio = Math.Round(extrusionRatioSlider.Value' 2);    					// Persist data for future use  					ActiveSliceSettings.Instance.SetValue(  						SettingsKey.extrusion_ratio'  						ExtrusionMultiplyerStream.ExtrusionRatio.ToString());  				};    				extrusionValue = new MHNumberEdit(Math.Round(ExtrusionMultiplyerStream.ExtrusionRatio' 2)' allowDecimals: true' minValue: minExtrutionRatio' maxValue: maxExtrusionRatio' pixelWidth: 40 * GuiWidget.DeviceScale)  				{  					Name = "Extrusion Multiplier NumberEdit"'  					SelectAllOnFocus = true'  					Margin = new BorderDouble(0' 0' 5' 0)'  					VAnchor = VAnchor.ParentCenter | VAnchor.FitToChildren'  					Padding = 0  				};  				extrusionValue.ActuallNumberEdit.EditComplete += (sender' e) =>  				{  					extrusionRatioSlider.Value = extrusionValue.ActuallNumberEdit.Value;    					// Update state for runtime use  					ExtrusionMultiplyerStream.ExtrusionRatio = Math.Round(extrusionRatioSlider.Value' 2);    					// Persist data for future use  					ActiveSliceSettings.Instance.SetValue(  						SettingsKey.extrusion_ratio'  						ExtrusionMultiplyerStream.ExtrusionRatio.ToString());  				};  				row.AddChild(extrusionRatioSlider);  				row.AddChild(extrusionValue);    				topToBottom.AddChild(row);  				  				textImageButtonFactory.FixedHeight = (int)extrusionValue.Height + 1;    				Button setButton = textImageButtonFactory.Generate("Set".Localize());  				setButton.VAnchor = VAnchor.ParentCenter;  				row.AddChild(setButton);  			}
Magic Number,MatterHackers.MatterControl.PrinterControls,AdjustmentControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\AdjustmentControls.cs,AdjustmentControls,The following statement contains a magic number: {  				var row = new FlowLayoutWidget()  				{  					HAnchor = HAnchor.ParentLeftRight'  					Margin = new BorderDouble(top: 10)'  					VAnchor = VAnchor.FitToChildren  				};    				var extrusionDescription = new TextWidget("Extrusion Multiplier".Localize())  				{  					MinimumSize = new Vector2(140' 0) * GuiWidget.DeviceScale'  					TextColor = ActiveTheme.Instance.PrimaryTextColor'  					VAnchor = VAnchor.ParentCenter  				};  				row.AddChild(extrusionDescription);    				extrusionRatioSlider = new SolidSlider(new Vector2()' sliderThumbWidth' minExtrutionRatio' maxExtrusionRatio' Orientation.Horizontal)  				{  					Name = "Extrusion Multiplier Slider"'  					TotalWidthInPixels = sliderWidth'  					HAnchor = HAnchor.ParentLeftRight'  					Margin = new BorderDouble(5' 0)'  					Value = ExtrusionMultiplyerStream.ExtrusionRatio  				};  				extrusionRatioSlider.View.BackgroundColor = new RGBA_Bytes();  				extrusionRatioSlider.ValueChanged += (sender' e) =>  				{  					extrusionValue.ActuallNumberEdit.Value = Math.Round(extrusionRatioSlider.Value' 2);  				};  				extrusionRatioSlider.SliderReleased += (s' e) =>  				{  					// Update state for runtime use  					ExtrusionMultiplyerStream.ExtrusionRatio = Math.Round(extrusionRatioSlider.Value' 2);    					// Persist data for future use  					ActiveSliceSettings.Instance.SetValue(  						SettingsKey.extrusion_ratio'  						ExtrusionMultiplyerStream.ExtrusionRatio.ToString());  				};    				extrusionValue = new MHNumberEdit(Math.Round(ExtrusionMultiplyerStream.ExtrusionRatio' 2)' allowDecimals: true' minValue: minExtrutionRatio' maxValue: maxExtrusionRatio' pixelWidth: 40 * GuiWidget.DeviceScale)  				{  					Name = "Extrusion Multiplier NumberEdit"'  					SelectAllOnFocus = true'  					Margin = new BorderDouble(0' 0' 5' 0)'  					VAnchor = VAnchor.ParentCenter | VAnchor.FitToChildren'  					Padding = 0  				};  				extrusionValue.ActuallNumberEdit.EditComplete += (sender' e) =>  				{  					extrusionRatioSlider.Value = extrusionValue.ActuallNumberEdit.Value;    					// Update state for runtime use  					ExtrusionMultiplyerStream.ExtrusionRatio = Math.Round(extrusionRatioSlider.Value' 2);    					// Persist data for future use  					ActiveSliceSettings.Instance.SetValue(  						SettingsKey.extrusion_ratio'  						ExtrusionMultiplyerStream.ExtrusionRatio.ToString());  				};  				row.AddChild(extrusionRatioSlider);  				row.AddChild(extrusionValue);    				topToBottom.AddChild(row);  				  				textImageButtonFactory.FixedHeight = (int)extrusionValue.Height + 1;    				Button setButton = textImageButtonFactory.Generate("Set".Localize());  				setButton.VAnchor = VAnchor.ParentCenter;  				row.AddChild(setButton);  			}
Magic Number,MatterHackers.MatterControl.PrinterControls,AdjustmentControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\AdjustmentControls.cs,AdjustmentControls,The following statement contains a magic number: {  				var row = new FlowLayoutWidget()  				{  					HAnchor = HAnchor.ParentLeftRight'  					Margin = new BorderDouble(top: 10)'  					VAnchor = VAnchor.FitToChildren  				};    				var extrusionDescription = new TextWidget("Extrusion Multiplier".Localize())  				{  					MinimumSize = new Vector2(140' 0) * GuiWidget.DeviceScale'  					TextColor = ActiveTheme.Instance.PrimaryTextColor'  					VAnchor = VAnchor.ParentCenter  				};  				row.AddChild(extrusionDescription);    				extrusionRatioSlider = new SolidSlider(new Vector2()' sliderThumbWidth' minExtrutionRatio' maxExtrusionRatio' Orientation.Horizontal)  				{  					Name = "Extrusion Multiplier Slider"'  					TotalWidthInPixels = sliderWidth'  					HAnchor = HAnchor.ParentLeftRight'  					Margin = new BorderDouble(5' 0)'  					Value = ExtrusionMultiplyerStream.ExtrusionRatio  				};  				extrusionRatioSlider.View.BackgroundColor = new RGBA_Bytes();  				extrusionRatioSlider.ValueChanged += (sender' e) =>  				{  					extrusionValue.ActuallNumberEdit.Value = Math.Round(extrusionRatioSlider.Value' 2);  				};  				extrusionRatioSlider.SliderReleased += (s' e) =>  				{  					// Update state for runtime use  					ExtrusionMultiplyerStream.ExtrusionRatio = Math.Round(extrusionRatioSlider.Value' 2);    					// Persist data for future use  					ActiveSliceSettings.Instance.SetValue(  						SettingsKey.extrusion_ratio'  						ExtrusionMultiplyerStream.ExtrusionRatio.ToString());  				};    				extrusionValue = new MHNumberEdit(Math.Round(ExtrusionMultiplyerStream.ExtrusionRatio' 2)' allowDecimals: true' minValue: minExtrutionRatio' maxValue: maxExtrusionRatio' pixelWidth: 40 * GuiWidget.DeviceScale)  				{  					Name = "Extrusion Multiplier NumberEdit"'  					SelectAllOnFocus = true'  					Margin = new BorderDouble(0' 0' 5' 0)'  					VAnchor = VAnchor.ParentCenter | VAnchor.FitToChildren'  					Padding = 0  				};  				extrusionValue.ActuallNumberEdit.EditComplete += (sender' e) =>  				{  					extrusionRatioSlider.Value = extrusionValue.ActuallNumberEdit.Value;    					// Update state for runtime use  					ExtrusionMultiplyerStream.ExtrusionRatio = Math.Round(extrusionRatioSlider.Value' 2);    					// Persist data for future use  					ActiveSliceSettings.Instance.SetValue(  						SettingsKey.extrusion_ratio'  						ExtrusionMultiplyerStream.ExtrusionRatio.ToString());  				};  				row.AddChild(extrusionRatioSlider);  				row.AddChild(extrusionValue);    				topToBottom.AddChild(row);  				  				textImageButtonFactory.FixedHeight = (int)extrusionValue.Height + 1;    				Button setButton = textImageButtonFactory.Generate("Set".Localize());  				setButton.VAnchor = VAnchor.ParentCenter;  				row.AddChild(setButton);  			}
Magic Number,MatterHackers.MatterControl.PrinterControls,AdjustmentControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\AdjustmentControls.cs,AdjustmentControls,The following statement contains a magic number: {  				var row = new FlowLayoutWidget()  				{  					HAnchor = HAnchor.ParentLeftRight'  					Margin = new BorderDouble(top: 10)'  					VAnchor = VAnchor.FitToChildren  				};    				var extrusionDescription = new TextWidget("Extrusion Multiplier".Localize())  				{  					MinimumSize = new Vector2(140' 0) * GuiWidget.DeviceScale'  					TextColor = ActiveTheme.Instance.PrimaryTextColor'  					VAnchor = VAnchor.ParentCenter  				};  				row.AddChild(extrusionDescription);    				extrusionRatioSlider = new SolidSlider(new Vector2()' sliderThumbWidth' minExtrutionRatio' maxExtrusionRatio' Orientation.Horizontal)  				{  					Name = "Extrusion Multiplier Slider"'  					TotalWidthInPixels = sliderWidth'  					HAnchor = HAnchor.ParentLeftRight'  					Margin = new BorderDouble(5' 0)'  					Value = ExtrusionMultiplyerStream.ExtrusionRatio  				};  				extrusionRatioSlider.View.BackgroundColor = new RGBA_Bytes();  				extrusionRatioSlider.ValueChanged += (sender' e) =>  				{  					extrusionValue.ActuallNumberEdit.Value = Math.Round(extrusionRatioSlider.Value' 2);  				};  				extrusionRatioSlider.SliderReleased += (s' e) =>  				{  					// Update state for runtime use  					ExtrusionMultiplyerStream.ExtrusionRatio = Math.Round(extrusionRatioSlider.Value' 2);    					// Persist data for future use  					ActiveSliceSettings.Instance.SetValue(  						SettingsKey.extrusion_ratio'  						ExtrusionMultiplyerStream.ExtrusionRatio.ToString());  				};    				extrusionValue = new MHNumberEdit(Math.Round(ExtrusionMultiplyerStream.ExtrusionRatio' 2)' allowDecimals: true' minValue: minExtrutionRatio' maxValue: maxExtrusionRatio' pixelWidth: 40 * GuiWidget.DeviceScale)  				{  					Name = "Extrusion Multiplier NumberEdit"'  					SelectAllOnFocus = true'  					Margin = new BorderDouble(0' 0' 5' 0)'  					VAnchor = VAnchor.ParentCenter | VAnchor.FitToChildren'  					Padding = 0  				};  				extrusionValue.ActuallNumberEdit.EditComplete += (sender' e) =>  				{  					extrusionRatioSlider.Value = extrusionValue.ActuallNumberEdit.Value;    					// Update state for runtime use  					ExtrusionMultiplyerStream.ExtrusionRatio = Math.Round(extrusionRatioSlider.Value' 2);    					// Persist data for future use  					ActiveSliceSettings.Instance.SetValue(  						SettingsKey.extrusion_ratio'  						ExtrusionMultiplyerStream.ExtrusionRatio.ToString());  				};  				row.AddChild(extrusionRatioSlider);  				row.AddChild(extrusionValue);    				topToBottom.AddChild(row);  				  				textImageButtonFactory.FixedHeight = (int)extrusionValue.Height + 1;    				Button setButton = textImageButtonFactory.Generate("Set".Localize());  				setButton.VAnchor = VAnchor.ParentCenter;  				row.AddChild(setButton);  			}
Magic Number,MatterHackers.MatterControl.PrinterControls,AdjustmentControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\AdjustmentControls.cs,AdjustmentControls,The following statement contains a magic number: {  				var row = new FlowLayoutWidget()  				{  					HAnchor = HAnchor.ParentLeftRight'  					Margin = new BorderDouble(top: 10)'  					VAnchor = VAnchor.FitToChildren  				};    				var extrusionDescription = new TextWidget("Extrusion Multiplier".Localize())  				{  					MinimumSize = new Vector2(140' 0) * GuiWidget.DeviceScale'  					TextColor = ActiveTheme.Instance.PrimaryTextColor'  					VAnchor = VAnchor.ParentCenter  				};  				row.AddChild(extrusionDescription);    				extrusionRatioSlider = new SolidSlider(new Vector2()' sliderThumbWidth' minExtrutionRatio' maxExtrusionRatio' Orientation.Horizontal)  				{  					Name = "Extrusion Multiplier Slider"'  					TotalWidthInPixels = sliderWidth'  					HAnchor = HAnchor.ParentLeftRight'  					Margin = new BorderDouble(5' 0)'  					Value = ExtrusionMultiplyerStream.ExtrusionRatio  				};  				extrusionRatioSlider.View.BackgroundColor = new RGBA_Bytes();  				extrusionRatioSlider.ValueChanged += (sender' e) =>  				{  					extrusionValue.ActuallNumberEdit.Value = Math.Round(extrusionRatioSlider.Value' 2);  				};  				extrusionRatioSlider.SliderReleased += (s' e) =>  				{  					// Update state for runtime use  					ExtrusionMultiplyerStream.ExtrusionRatio = Math.Round(extrusionRatioSlider.Value' 2);    					// Persist data for future use  					ActiveSliceSettings.Instance.SetValue(  						SettingsKey.extrusion_ratio'  						ExtrusionMultiplyerStream.ExtrusionRatio.ToString());  				};    				extrusionValue = new MHNumberEdit(Math.Round(ExtrusionMultiplyerStream.ExtrusionRatio' 2)' allowDecimals: true' minValue: minExtrutionRatio' maxValue: maxExtrusionRatio' pixelWidth: 40 * GuiWidget.DeviceScale)  				{  					Name = "Extrusion Multiplier NumberEdit"'  					SelectAllOnFocus = true'  					Margin = new BorderDouble(0' 0' 5' 0)'  					VAnchor = VAnchor.ParentCenter | VAnchor.FitToChildren'  					Padding = 0  				};  				extrusionValue.ActuallNumberEdit.EditComplete += (sender' e) =>  				{  					extrusionRatioSlider.Value = extrusionValue.ActuallNumberEdit.Value;    					// Update state for runtime use  					ExtrusionMultiplyerStream.ExtrusionRatio = Math.Round(extrusionRatioSlider.Value' 2);    					// Persist data for future use  					ActiveSliceSettings.Instance.SetValue(  						SettingsKey.extrusion_ratio'  						ExtrusionMultiplyerStream.ExtrusionRatio.ToString());  				};  				row.AddChild(extrusionRatioSlider);  				row.AddChild(extrusionValue);    				topToBottom.AddChild(row);  				  				textImageButtonFactory.FixedHeight = (int)extrusionValue.Height + 1;    				Button setButton = textImageButtonFactory.Generate("Set".Localize());  				setButton.VAnchor = VAnchor.ParentCenter;  				row.AddChild(setButton);  			}
Magic Number,MatterHackers.MatterControl.PrinterControls,AdjustmentControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\AdjustmentControls.cs,AdjustmentControls,The following statement contains a magic number: {  				var row = new FlowLayoutWidget()  				{  					HAnchor = HAnchor.ParentLeftRight'  					Margin = new BorderDouble(top: 10)'  					VAnchor = VAnchor.FitToChildren  				};    				var extrusionDescription = new TextWidget("Extrusion Multiplier".Localize())  				{  					MinimumSize = new Vector2(140' 0) * GuiWidget.DeviceScale'  					TextColor = ActiveTheme.Instance.PrimaryTextColor'  					VAnchor = VAnchor.ParentCenter  				};  				row.AddChild(extrusionDescription);    				extrusionRatioSlider = new SolidSlider(new Vector2()' sliderThumbWidth' minExtrutionRatio' maxExtrusionRatio' Orientation.Horizontal)  				{  					Name = "Extrusion Multiplier Slider"'  					TotalWidthInPixels = sliderWidth'  					HAnchor = HAnchor.ParentLeftRight'  					Margin = new BorderDouble(5' 0)'  					Value = ExtrusionMultiplyerStream.ExtrusionRatio  				};  				extrusionRatioSlider.View.BackgroundColor = new RGBA_Bytes();  				extrusionRatioSlider.ValueChanged += (sender' e) =>  				{  					extrusionValue.ActuallNumberEdit.Value = Math.Round(extrusionRatioSlider.Value' 2);  				};  				extrusionRatioSlider.SliderReleased += (s' e) =>  				{  					// Update state for runtime use  					ExtrusionMultiplyerStream.ExtrusionRatio = Math.Round(extrusionRatioSlider.Value' 2);    					// Persist data for future use  					ActiveSliceSettings.Instance.SetValue(  						SettingsKey.extrusion_ratio'  						ExtrusionMultiplyerStream.ExtrusionRatio.ToString());  				};    				extrusionValue = new MHNumberEdit(Math.Round(ExtrusionMultiplyerStream.ExtrusionRatio' 2)' allowDecimals: true' minValue: minExtrutionRatio' maxValue: maxExtrusionRatio' pixelWidth: 40 * GuiWidget.DeviceScale)  				{  					Name = "Extrusion Multiplier NumberEdit"'  					SelectAllOnFocus = true'  					Margin = new BorderDouble(0' 0' 5' 0)'  					VAnchor = VAnchor.ParentCenter | VAnchor.FitToChildren'  					Padding = 0  				};  				extrusionValue.ActuallNumberEdit.EditComplete += (sender' e) =>  				{  					extrusionRatioSlider.Value = extrusionValue.ActuallNumberEdit.Value;    					// Update state for runtime use  					ExtrusionMultiplyerStream.ExtrusionRatio = Math.Round(extrusionRatioSlider.Value' 2);    					// Persist data for future use  					ActiveSliceSettings.Instance.SetValue(  						SettingsKey.extrusion_ratio'  						ExtrusionMultiplyerStream.ExtrusionRatio.ToString());  				};  				row.AddChild(extrusionRatioSlider);  				row.AddChild(extrusionValue);    				topToBottom.AddChild(row);  				  				textImageButtonFactory.FixedHeight = (int)extrusionValue.Height + 1;    				Button setButton = textImageButtonFactory.Generate("Set".Localize());  				setButton.VAnchor = VAnchor.ParentCenter;  				row.AddChild(setButton);  			}
Magic Number,MatterHackers.MatterControl.PrinterControls,AdjustmentControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\AdjustmentControls.cs,AdjustmentControls,The following statement contains a magic number: ActiveSliceSettings.SettingChanged.RegisterEvent((s' e) =>  			{  				var eventArgs = e as StringEventArgs;  				if (eventArgs?.Data == SettingsKey.extrusion_ratio)  				{  					double extrusionRatio = ActiveSliceSettings.Instance.GetValue<double>(SettingsKey.extrusion_ratio);  					extrusionRatioSlider.Value = extrusionRatio;  					extrusionValue.ActuallNumberEdit.Value = Math.Round(extrusionRatio' 2);  				}  				else if (eventArgs?.Data == SettingsKey.feedrate_ratio)  				{  					double feedrateRatio = ActiveSliceSettings.Instance.GetValue<double>(SettingsKey.feedrate_ratio);  					feedRateRatioSlider.Value = feedrateRatio;  					feedRateValue.ActuallNumberEdit.Value = Math.Round(feedrateRatio' 2);  				}  			}' ref unregisterEvents);
Magic Number,MatterHackers.MatterControl.PrinterControls,AdjustmentControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\AdjustmentControls.cs,AdjustmentControls,The following statement contains a magic number: ActiveSliceSettings.SettingChanged.RegisterEvent((s' e) =>  			{  				var eventArgs = e as StringEventArgs;  				if (eventArgs?.Data == SettingsKey.extrusion_ratio)  				{  					double extrusionRatio = ActiveSliceSettings.Instance.GetValue<double>(SettingsKey.extrusion_ratio);  					extrusionRatioSlider.Value = extrusionRatio;  					extrusionValue.ActuallNumberEdit.Value = Math.Round(extrusionRatio' 2);  				}  				else if (eventArgs?.Data == SettingsKey.feedrate_ratio)  				{  					double feedrateRatio = ActiveSliceSettings.Instance.GetValue<double>(SettingsKey.feedrate_ratio);  					feedRateRatioSlider.Value = feedrateRatio;  					feedRateValue.ActuallNumberEdit.Value = Math.Round(feedrateRatio' 2);  				}  			}' ref unregisterEvents);
Magic Number,MatterHackers.MatterControl.PrinterControls,ControlWidgetBase,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\ControlWidgetBase.cs,ControlWidgetBase,The following statement contains a magic number: this.textImageButtonFactory.fontSize = 11;
Magic Number,MatterHackers.MatterControl.PrinterControls,ControlWidgetBase,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\ControlWidgetBase.cs,CreateSeparatorLine,The following statement contains a magic number: GuiWidget topLine = new GuiWidget(10 * GuiWidget.DeviceScale' 1 * GuiWidget.DeviceScale);
Magic Number,MatterHackers.MatterControl.PrinterControls,ControlWidgetBase,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\ControlWidgetBase.cs,CreateSeparatorLine,The following statement contains a magic number: topLine.Margin = new BorderDouble(0' 5);
Magic Number,MatterHackers.MatterControl.PrinterControls,FanControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\FanControls.cs,FanControls,The following statement contains a magic number: AltGroupBox fanControlsGroupBox = new AltGroupBox(new TextWidget("Fan".Localize()' pointSize: 18' textColor: ActiveTheme.Instance.SecondaryAccentColor));
Magic Number,MatterHackers.MatterControl.PrinterControls,FanControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\FanControls.cs,FanControls,The following statement contains a magic number: fanControlsLayout.Padding = new BorderDouble(3' 5' 3' 0);
Magic Number,MatterHackers.MatterControl.PrinterControls,FanControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\FanControls.cs,FanControls,The following statement contains a magic number: fanControlsLayout.Padding = new BorderDouble(3' 5' 3' 0);
Magic Number,MatterHackers.MatterControl.PrinterControls,FanControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\FanControls.cs,FanControls,The following statement contains a magic number: fanControlsLayout.Padding = new BorderDouble(3' 5' 3' 0);
Magic Number,MatterHackers.MatterControl.PrinterControls,FanControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\FanControls.cs,FanControls,The following statement contains a magic number: fanSpeedDisplay.EditComplete += (sender' e) =>  			{  				PrinterConnectionAndCommunication.Instance.FanSpeed0To255 = (int)(fanSpeedDisplay.GetValue() * 255.5 / 100);  			};
Magic Number,MatterHackers.MatterControl.PrinterControls,FanControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\FanControls.cs,FanControls,The following statement contains a magic number: fanSpeedDisplay.EditComplete += (sender' e) =>  			{  				PrinterConnectionAndCommunication.Instance.FanSpeed0To255 = (int)(fanSpeedDisplay.GetValue() * 255.5 / 100);  			};
Magic Number,MatterHackers.MatterControl.PrinterControls,FanControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\FanControls.cs,SetDisplayAttributes,The following statement contains a magic number: this.textImageButtonFactory.FixedWidth = 38 * GuiWidget.DeviceScale;
Magic Number,MatterHackers.MatterControl.PrinterControls,FanControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\FanControls.cs,SetDisplayAttributes,The following statement contains a magic number: this.textImageButtonFactory.FixedHeight = 20 * GuiWidget.DeviceScale;
Magic Number,MatterHackers.MatterControl.PrinterControls,FanControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\FanControls.cs,SetDisplayAttributes,The following statement contains a magic number: this.textImageButtonFactory.fontSize = 10;
Magic Number,MatterHackers.MatterControl.PrinterControls,FanControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\FanControls.cs,SetDisplayAttributes,The following statement contains a magic number: this.textImageButtonFactory.normalBorderColor = new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 200);
Magic Number,MatterHackers.MatterControl.PrinterControls,FanControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\FanControls.cs,SetDisplayAttributes,The following statement contains a magic number: this.textImageButtonFactory.hoverBorderColor = new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 200);
Magic Number,MatterHackers.MatterControl.PrinterControls,FanControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\FanControls.cs,CreateFanControls,The following statement contains a magic number: leftToRight.Padding = new BorderDouble(3' 0' 0' 5);
Magic Number,MatterHackers.MatterControl.PrinterControls,FanControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\FanControls.cs,CreateFanControls,The following statement contains a magic number: leftToRight.Padding = new BorderDouble(3' 0' 0' 5);
Magic Number,MatterHackers.MatterControl.PrinterControls,FanControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\FanControls.cs,CreateFanControls,The following statement contains a magic number: toggleSwitch.Margin = new BorderDouble(5' 0);
Magic Number,MatterHackers.MatterControl.PrinterControls,FanControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\FanControls.cs,FanSpeedChanged_Event,The following statement contains a magic number: fanSpeedDisplay.SetDisplayString("{0}%".FormatWith((int)(printerFanSpeed * 100.5 / 255)));
Magic Number,MatterHackers.MatterControl.PrinterControls,FanControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\FanControls.cs,FanSpeedChanged_Event,The following statement contains a magic number: fanSpeedDisplay.SetDisplayString("{0}%".FormatWith((int)(printerFanSpeed * 100.5 / 255)));
Magic Number,MatterHackers.MatterControl.PrinterControls,FanControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\FanControls.cs,ToggleSwitch_Click,The following statement contains a magic number: if (!doingDisplayUpdateFromPrinter)  			{  				CheckBox toggleSwitch = (CheckBox)sender;  				if (toggleSwitch.Checked)  				{  					PrinterConnectionAndCommunication.Instance.FanSpeed0To255 = 255;  				}  				else  				{  					PrinterConnectionAndCommunication.Instance.FanSpeed0To255 = 0;  				}  			}
Magic Number,MatterHackers.MatterControl.PrinterControls,MovementControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\MovementControls.cs,MovementControls,The following statement contains a magic number: movementControlsGroupBox = new AltGroupBox(textImageButtonFactory.GenerateGroupBoxLabelWithEdit(new TextWidget("Movement".Localize()' pointSize: 18' textColor: ActiveTheme.Instance.SecondaryAccentColor)' out editButton));
Magic Number,MatterHackers.MatterControl.PrinterControls,MovementControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\MovementControls.cs,MovementControls,The following statement contains a magic number: {  				manualControlsLayout = new FlowLayoutWidget(FlowDirection.TopToBottom);  				manualControlsLayout.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				manualControlsLayout.VAnchor = Agg.UI.VAnchor.FitToChildren;  				manualControlsLayout.Padding = new BorderDouble(3' 5' 3' 0);  				{  					FlowLayoutWidget leftToRightContainer = new FlowLayoutWidget(FlowDirection.LeftToRight);    					manualControlsLayout.AddChild(CreateDisableableContainer(GetHomeButtonBar()));  					manualControlsLayout.AddChild(CreateDisableableContainer(CreateSeparatorLine()));  					manualControlsLayout.AddChild(jogControls);  					////manualControlsLayout.AddChild(leftToRightContainer);  					manualControlsLayout.AddChild(CreateDisableableContainer(CreateSeparatorLine()));  					manualControlsLayout.AddChild(CreateDisableableContainer(GetHWDestinationBar()));  					manualControlsLayout.AddChild(CreateDisableableContainer(CreateSeparatorLine()));  				}    				movementControlsGroupBox.AddChild(manualControlsLayout);  			}
Magic Number,MatterHackers.MatterControl.PrinterControls,MovementControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\MovementControls.cs,MovementControls,The following statement contains a magic number: {  				manualControlsLayout = new FlowLayoutWidget(FlowDirection.TopToBottom);  				manualControlsLayout.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				manualControlsLayout.VAnchor = Agg.UI.VAnchor.FitToChildren;  				manualControlsLayout.Padding = new BorderDouble(3' 5' 3' 0);  				{  					FlowLayoutWidget leftToRightContainer = new FlowLayoutWidget(FlowDirection.LeftToRight);    					manualControlsLayout.AddChild(CreateDisableableContainer(GetHomeButtonBar()));  					manualControlsLayout.AddChild(CreateDisableableContainer(CreateSeparatorLine()));  					manualControlsLayout.AddChild(jogControls);  					////manualControlsLayout.AddChild(leftToRightContainer);  					manualControlsLayout.AddChild(CreateDisableableContainer(CreateSeparatorLine()));  					manualControlsLayout.AddChild(CreateDisableableContainer(GetHWDestinationBar()));  					manualControlsLayout.AddChild(CreateDisableableContainer(CreateSeparatorLine()));  				}    				movementControlsGroupBox.AddChild(manualControlsLayout);  			}
Magic Number,MatterHackers.MatterControl.PrinterControls,MovementControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\MovementControls.cs,MovementControls,The following statement contains a magic number: {  				manualControlsLayout = new FlowLayoutWidget(FlowDirection.TopToBottom);  				manualControlsLayout.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				manualControlsLayout.VAnchor = Agg.UI.VAnchor.FitToChildren;  				manualControlsLayout.Padding = new BorderDouble(3' 5' 3' 0);  				{  					FlowLayoutWidget leftToRightContainer = new FlowLayoutWidget(FlowDirection.LeftToRight);    					manualControlsLayout.AddChild(CreateDisableableContainer(GetHomeButtonBar()));  					manualControlsLayout.AddChild(CreateDisableableContainer(CreateSeparatorLine()));  					manualControlsLayout.AddChild(jogControls);  					////manualControlsLayout.AddChild(leftToRightContainer);  					manualControlsLayout.AddChild(CreateDisableableContainer(CreateSeparatorLine()));  					manualControlsLayout.AddChild(CreateDisableableContainer(GetHWDestinationBar()));  					manualControlsLayout.AddChild(CreateDisableableContainer(CreateSeparatorLine()));  				}    				movementControlsGroupBox.AddChild(manualControlsLayout);  			}
Magic Number,MatterHackers.MatterControl.PrinterControls,MovementControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\MovementControls.cs,GetHomeButtonBar,The following statement contains a magic number: homeButtonBar.Margin = new BorderDouble(3' 0' 3' 6);
Magic Number,MatterHackers.MatterControl.PrinterControls,MovementControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\MovementControls.cs,GetHomeButtonBar,The following statement contains a magic number: homeButtonBar.Margin = new BorderDouble(3' 0' 3' 6);
Magic Number,MatterHackers.MatterControl.PrinterControls,MovementControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\MovementControls.cs,GetHomeButtonBar,The following statement contains a magic number: homeButtonBar.Margin = new BorderDouble(3' 0' 3' 6);
Magic Number,MatterHackers.MatterControl.PrinterControls,MovementControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\MovementControls.cs,GetHomeButtonBar,The following statement contains a magic number: textImageButtonFactory.normalBorderColor = new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 200);
Magic Number,MatterHackers.MatterControl.PrinterControls,MovementControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\MovementControls.cs,GetHomeButtonBar,The following statement contains a magic number: textImageButtonFactory.hoverBorderColor = new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 200);
Magic Number,MatterHackers.MatterControl.PrinterControls,MovementControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\MovementControls.cs,GetHomeButtonBar,The following statement contains a magic number: ImageBuffer helpIconImage = StaticData.Instance.LoadIcon("icon_home_white_24x24.png"' 24' 24);
Magic Number,MatterHackers.MatterControl.PrinterControls,MovementControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\MovementControls.cs,GetHomeButtonBar,The following statement contains a magic number: ImageBuffer helpIconImage = StaticData.Instance.LoadIcon("icon_home_white_24x24.png"' 24' 24);
Magic Number,MatterHackers.MatterControl.PrinterControls,MovementControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\MovementControls.cs,GetHomeButtonBar,The following statement contains a magic number: homeIconImageWidget.Margin = new BorderDouble(0' 0' 6' 0);
Magic Number,MatterHackers.MatterControl.PrinterControls,MovementControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\MovementControls.cs,GetHomeButtonBar,The following statement contains a magic number: homeIconImageWidget.OriginRelativeParent += new Vector2(0' 2) * GuiWidget.DeviceScale;
Magic Number,MatterHackers.MatterControl.PrinterControls,MovementControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\MovementControls.cs,GetHomeButtonBar,The following statement contains a magic number: textImageButtonFactory.normalFillColor = new RGBA_Bytes(180' 180' 180);
Magic Number,MatterHackers.MatterControl.PrinterControls,MovementControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\MovementControls.cs,GetHomeButtonBar,The following statement contains a magic number: textImageButtonFactory.normalFillColor = new RGBA_Bytes(180' 180' 180);
Magic Number,MatterHackers.MatterControl.PrinterControls,MovementControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\MovementControls.cs,GetHomeButtonBar,The following statement contains a magic number: textImageButtonFactory.normalFillColor = new RGBA_Bytes(180' 180' 180);
Magic Number,MatterHackers.MatterControl.PrinterControls,MovementControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\MovementControls.cs,GetHomeButtonBar,The following statement contains a magic number: homeAllButton.Margin = new BorderDouble(0' 0' 6' 0);
Magic Number,MatterHackers.MatterControl.PrinterControls,MovementControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\MovementControls.cs,GetHomeButtonBar,The following statement contains a magic number: homeXButton.Margin = new BorderDouble(0' 0' 6' 0);
Magic Number,MatterHackers.MatterControl.PrinterControls,MovementControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\MovementControls.cs,GetHomeButtonBar,The following statement contains a magic number: homeYButton.Margin = new BorderDouble(0' 0' 6' 0);
Magic Number,MatterHackers.MatterControl.PrinterControls,MovementControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\MovementControls.cs,GetHomeButtonBar,The following statement contains a magic number: homeZButton.Margin = new BorderDouble(0' 0' 6' 0);
Magic Number,MatterHackers.MatterControl.PrinterControls,MovementControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\MovementControls.cs,GetHomeButtonBar,The following statement contains a magic number: GuiWidget spacerReleaseShow = new GuiWidget(10 * GuiWidget.DeviceScale' 0);
Magic Number,MatterHackers.MatterControl.PrinterControls,MovementControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\MovementControls.cs,GetHomeButtonBar,The following statement contains a magic number: offsetStreamLabel = new TextWidget("Z Offset".Localize() + ":"' pointSize: 8)  			{  				TextColor = ActiveTheme.Instance.PrimaryTextColor'  				Margin = new BorderDouble(left: 10)'  				AutoExpandBoundsToText = true'  				VAnchor = VAnchor.ParentCenter  			};
Magic Number,MatterHackers.MatterControl.PrinterControls,MovementControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\MovementControls.cs,GetHomeButtonBar,The following statement contains a magic number: offsetStreamLabel = new TextWidget("Z Offset".Localize() + ":"' pointSize: 8)  			{  				TextColor = ActiveTheme.Instance.PrimaryTextColor'  				Margin = new BorderDouble(left: 10)'  				AutoExpandBoundsToText = true'  				VAnchor = VAnchor.ParentCenter  			};
Magic Number,MatterHackers.MatterControl.PrinterControls,MovementControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\MovementControls.cs,GetHWDestinationBar,The following statement contains a magic number: hwDestinationBar.Margin = new BorderDouble(3' 0' 3' 6);
Magic Number,MatterHackers.MatterControl.PrinterControls,MovementControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\MovementControls.cs,GetHWDestinationBar,The following statement contains a magic number: hwDestinationBar.Margin = new BorderDouble(3' 0' 3' 6);
Magic Number,MatterHackers.MatterControl.PrinterControls,MovementControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\MovementControls.cs,GetHWDestinationBar,The following statement contains a magic number: hwDestinationBar.Margin = new BorderDouble(3' 0' 3' 6);
Magic Number,MatterHackers.MatterControl.PrinterControls,MovementControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\MovementControls.cs,GetHWDestinationBar,The following statement contains a magic number: TextWidget xPosition = new TextWidget("X: 0.0           "' pointSize: 12' textColor: ActiveTheme.Instance.PrimaryTextColor);
Magic Number,MatterHackers.MatterControl.PrinterControls,MovementControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\MovementControls.cs,GetHWDestinationBar,The following statement contains a magic number: TextWidget yPosition = new TextWidget("Y: 0.0           "' pointSize: 12' textColor: ActiveTheme.Instance.PrimaryTextColor);
Magic Number,MatterHackers.MatterControl.PrinterControls,MovementControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\MovementControls.cs,GetHWDestinationBar,The following statement contains a magic number: TextWidget zPosition = new TextWidget("Z: 0.0           "' pointSize: 12' textColor: ActiveTheme.Instance.PrimaryTextColor);
Magic Number,MatterHackers.MatterControl.PrinterControls,ZTuningWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\MovementControls.cs,ZTuningWidget,The following statement contains a magic number: zOffsetStreamContainer = new FlowLayoutWidget(FlowDirection.LeftToRight)  			{  				Margin = new BorderDouble(3' 0)'  				Padding = new BorderDouble(3)'  				HAnchor = HAnchor.FitToChildren'  				VAnchor = VAnchor.ParentCenter'  				BackgroundColor = ActiveTheme.Instance.SecondaryBackgroundColor'  				Height = 20  			};
Magic Number,MatterHackers.MatterControl.PrinterControls,ZTuningWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\MovementControls.cs,ZTuningWidget,The following statement contains a magic number: zOffsetStreamContainer = new FlowLayoutWidget(FlowDirection.LeftToRight)  			{  				Margin = new BorderDouble(3' 0)'  				Padding = new BorderDouble(3)'  				HAnchor = HAnchor.FitToChildren'  				VAnchor = VAnchor.ParentCenter'  				BackgroundColor = ActiveTheme.Instance.SecondaryBackgroundColor'  				Height = 20  			};
Magic Number,MatterHackers.MatterControl.PrinterControls,ZTuningWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\MovementControls.cs,ZTuningWidget,The following statement contains a magic number: zOffsetStreamContainer = new FlowLayoutWidget(FlowDirection.LeftToRight)  			{  				Margin = new BorderDouble(3' 0)'  				Padding = new BorderDouble(3)'  				HAnchor = HAnchor.FitToChildren'  				VAnchor = VAnchor.ParentCenter'  				BackgroundColor = ActiveTheme.Instance.SecondaryBackgroundColor'  				Height = 20  			};
Magic Number,MatterHackers.MatterControl.PrinterControls,ZTuningWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\MovementControls.cs,ZTuningWidget,The following statement contains a magic number: zOffsetStreamDisplay = new TextWidget(zoffset.ToString("0.##"))  			{  				AutoExpandBoundsToText = true'  				TextColor = ActiveTheme.Instance.PrimaryTextColor'  				Margin = new BorderDouble(5' 0' 8' 0)'  				VAnchor = VAnchor.ParentCenter  			};
Magic Number,MatterHackers.MatterControl.PrinterControls,ZTuningWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\MovementControls.cs,ZTuningWidget,The following statement contains a magic number: zOffsetStreamDisplay = new TextWidget(zoffset.ToString("0.##"))  			{  				AutoExpandBoundsToText = true'  				TextColor = ActiveTheme.Instance.PrimaryTextColor'  				Margin = new BorderDouble(5' 0' 8' 0)'  				VAnchor = VAnchor.ParentCenter  			};
Magic Number,MatterHackers.MatterControl.PrinterControls,ZTuningWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\MovementControls.cs,ZTuningWidget,The following statement contains a magic number: clearZOffsetButton = new Button(  				new ButtonViewStates(  					new ImageWidget(SliceSettingsWidget.restoreNormal)'  					new ImageWidget(SliceSettingsWidget.restoreHover)'  					new ImageWidget(SliceSettingsWidget.restorePressed)'  					new ImageWidget(SliceSettingsWidget.restoreNormal)))  			{  				Name = "Clear ZOffset button"'  				VAnchor = VAnchor.ParentCenter'  				Margin = new BorderDouble(0' 0' 5' 0)'  				ToolTipText = "Clear ZOffset".Localize()'  				Visible = allowRemoveButton && zoffset != 0  			};
Magic Number,MatterHackers.MatterControl.PrinterControls,PowerControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\PowerControls.cs,PowerControls,The following statement contains a magic number: AltGroupBox fanControlsGroupBox = new AltGroupBox(new TextWidget("ATX Power Control".Localize()' pointSize: 18' textColor: ActiveTheme.Instance.SecondaryAccentColor));
Magic Number,MatterHackers.MatterControl.PrinterControls,PowerControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\PowerControls.cs,PowerControls,The following statement contains a magic number: atxPowertoggleSwitch.Margin = new BorderDouble(6' 0' 6' 6);
Magic Number,MatterHackers.MatterControl.PrinterControls,PowerControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\PowerControls.cs,PowerControls,The following statement contains a magic number: atxPowertoggleSwitch.Margin = new BorderDouble(6' 0' 6' 6);
Magic Number,MatterHackers.MatterControl.PrinterControls,PowerControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\PowerControls.cs,PowerControls,The following statement contains a magic number: atxPowertoggleSwitch.Margin = new BorderDouble(6' 0' 6' 6);
Magic Number,MatterHackers.MatterControl.PrinterControls,PowerControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\PowerControls.cs,PowerControls,The following statement contains a magic number: paddingContainer.Padding = new BorderDouble(3' 5' 3' 0);
Magic Number,MatterHackers.MatterControl.PrinterControls,PowerControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\PowerControls.cs,PowerControls,The following statement contains a magic number: paddingContainer.Padding = new BorderDouble(3' 5' 3' 0);
Magic Number,MatterHackers.MatterControl.PrinterControls,PowerControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\PowerControls.cs,PowerControls,The following statement contains a magic number: paddingContainer.Padding = new BorderDouble(3' 5' 3' 0);
Magic Number,MatterHackers.MatterControl.PrinterControls,PowerControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\PowerControls.cs,SetDisplayAttributes,The following statement contains a magic number: this.textImageButtonFactory.FixedWidth = 38 * GuiWidget.DeviceScale;
Magic Number,MatterHackers.MatterControl.PrinterControls,PowerControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\PowerControls.cs,SetDisplayAttributes,The following statement contains a magic number: this.textImageButtonFactory.FixedHeight = 20 * GuiWidget.DeviceScale;
Magic Number,MatterHackers.MatterControl.PrinterControls,PowerControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\PowerControls.cs,SetDisplayAttributes,The following statement contains a magic number: this.textImageButtonFactory.fontSize = 10;
Magic Number,MatterHackers.MatterControl.PrinterControls,PowerControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\PowerControls.cs,SetDisplayAttributes,The following statement contains a magic number: this.textImageButtonFactory.normalBorderColor = new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 200);
Magic Number,MatterHackers.MatterControl.PrinterControls,PowerControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\PowerControls.cs,SetDisplayAttributes,The following statement contains a magic number: this.textImageButtonFactory.hoverBorderColor = new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 200);
Magic Number,MatterHackers.MatterControl.PrinterControls,TemperatureControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\TemperatureControls.cs,TemperatureControls,The following statement contains a magic number: AltGroupBox temperatureGroupBox = new AltGroupBox(new TextWidget("Temperature".Localize()' pointSize: 18' textColor: ActiveTheme.Instance.SecondaryAccentColor));
Magic Number,MatterHackers.MatterControl.PrinterControls,TemperatureControls,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\TemperatureControls.cs,TemperatureControls,The following statement contains a magic number: RGBA_Bytes separatorLineColor = new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 100);
Magic Number,MatterHackers.MatterControl.PrinterControls,RunningMacroPage,C:\repos\MatterHackers_MatterControl\ConfigurationPage\RunningMacroPage.cs,RunningMacroPage,The following statement contains a magic number: if (macroData.showMaterialSelector)  			{  				int extruderIndex = 0;  				var materialSelector = new PresetSelectorWidget(string.Format($"{"Material".Localize()} {extruderIndex + 1}")' RGBA_Bytes.Transparent' NamedSettingsLayers.Material' extruderIndex);  				materialSelector.BackgroundColor = RGBA_Bytes.Transparent;  				materialSelector.Margin = new BorderDouble(0' 0' 0' 15);  				contentRow.AddChild(materialSelector);  			}
Magic Number,MatterHackers.MatterControl.PrinterControls,RunningMacroPage,C:\repos\MatterHackers_MatterControl\ConfigurationPage\RunningMacroPage.cs,RunningMacroPage,The following statement contains a magic number: if (macroData.image != null)  			{  				var imageWidget = new ImageWidget(macroData.image)  				{  					HAnchor = HAnchor.ParentCenter'  					Margin = new BorderDouble(5'15)'  				};    				contentRow.AddChild(imageWidget);  			}
Magic Number,MatterHackers.MatterControl.PrinterControls,RunningMacroPage,C:\repos\MatterHackers_MatterControl\ConfigurationPage\RunningMacroPage.cs,RunningMacroPage,The following statement contains a magic number: if (macroData.image != null)  			{  				var imageWidget = new ImageWidget(macroData.image)  				{  					HAnchor = HAnchor.ParentCenter'  					Margin = new BorderDouble(5'15)'  				};    				contentRow.AddChild(imageWidget);  			}
Magic Number,MatterHackers.MatterControl.PrinterControls,RunningMacroPage,C:\repos\MatterHackers_MatterControl\ConfigurationPage\RunningMacroPage.cs,RunningMacroPage,The following statement contains a magic number: progressBar = new ProgressBar((int)(150 * GuiWidget.DeviceScale)' (int)(15 * GuiWidget.DeviceScale))  			{  				FillColor = ActiveTheme.Instance.PrimaryAccentColor'  				BorderColor = ActiveTheme.Instance.PrimaryTextColor'  				BackgroundColor = RGBA_Bytes.White'  				Margin = new BorderDouble(3' 0' 0' 10)'  			};
Magic Number,MatterHackers.MatterControl.PrinterControls,RunningMacroPage,C:\repos\MatterHackers_MatterControl\ConfigurationPage\RunningMacroPage.cs,RunningMacroPage,The following statement contains a magic number: progressBar = new ProgressBar((int)(150 * GuiWidget.DeviceScale)' (int)(15 * GuiWidget.DeviceScale))  			{  				FillColor = ActiveTheme.Instance.PrimaryAccentColor'  				BorderColor = ActiveTheme.Instance.PrimaryTextColor'  				BackgroundColor = RGBA_Bytes.White'  				Margin = new BorderDouble(3' 0' 0' 10)'  			};
Magic Number,MatterHackers.MatterControl.PrinterControls,RunningMacroPage,C:\repos\MatterHackers_MatterControl\ConfigurationPage\RunningMacroPage.cs,RunningMacroPage,The following statement contains a magic number: progressBar = new ProgressBar((int)(150 * GuiWidget.DeviceScale)' (int)(15 * GuiWidget.DeviceScale))  			{  				FillColor = ActiveTheme.Instance.PrimaryAccentColor'  				BorderColor = ActiveTheme.Instance.PrimaryTextColor'  				BackgroundColor = RGBA_Bytes.White'  				Margin = new BorderDouble(3' 0' 0' 10)'  			};
Magic Number,MatterHackers.MatterControl.PrinterControls,RunningMacroPage,C:\repos\MatterHackers_MatterControl\ConfigurationPage\RunningMacroPage.cs,RunningMacroPage,The following statement contains a magic number: progressBar = new ProgressBar((int)(150 * GuiWidget.DeviceScale)' (int)(15 * GuiWidget.DeviceScale))  			{  				FillColor = ActiveTheme.Instance.PrimaryAccentColor'  				BorderColor = ActiveTheme.Instance.PrimaryTextColor'  				BackgroundColor = RGBA_Bytes.White'  				Margin = new BorderDouble(3' 0' 0' 10)'  			};
Magic Number,MatterHackers.MatterControl.PrinterControls,RunningMacroPage,C:\repos\MatterHackers_MatterControl\ConfigurationPage\RunningMacroPage.cs,RunningMacroPage,The following statement contains a magic number: progressBarText = new TextWidget(""' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  			{  				AutoExpandBoundsToText = true'  				Margin = new BorderDouble(5' 0' 0' 0)'  			};
Magic Number,MatterHackers.MatterControl.PrinterControls,RunningMacroPage,C:\repos\MatterHackers_MatterControl\ConfigurationPage\RunningMacroPage.cs,RunningMacroPage,The following statement contains a magic number: progressBarText = new TextWidget(""' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  			{  				AutoExpandBoundsToText = true'  				Margin = new BorderDouble(5' 0' 0' 0)'  			};
Magic Number,MatterHackers.MatterControl.PrinterControls,RunningMacroPage,C:\repos\MatterHackers_MatterControl\ConfigurationPage\RunningMacroPage.cs,RunningMacroPage,The following statement contains a magic number: if (macroData.countDown > 0)  			{  				timeToWaitMs = (long)(macroData.countDown * 1000);  				startTimeMs = UiThread.CurrentTimerMs;  				UiThread.RunOnIdle(CountDownTime);  			}
Magic Number,MatterHackers.MatterControl.PrinterControls,RunningMacroPage,C:\repos\MatterHackers_MatterControl\ConfigurationPage\RunningMacroPage.cs,CountDownTime,The following statement contains a magic number: int seconds = (int)((timeToWaitMs - (timeToWaitMs * (progressBar.RatioComplete))) / 1000);
Magic Number,MatterHackers.MatterControl.PrinterControls,RunningMacroPage,C:\repos\MatterHackers_MatterControl\ConfigurationPage\RunningMacroPage.cs,CountDownTime,The following statement contains a magic number: progressBarText.Text = $"Time Remaining: {seconds / 60:#0}:{seconds % 60:00}";
Magic Number,MatterHackers.MatterControl.PrinterControls,RunningMacroPage,C:\repos\MatterHackers_MatterControl\ConfigurationPage\RunningMacroPage.cs,CountDownTime,The following statement contains a magic number: progressBarText.Text = $"Time Remaining: {seconds / 60:#0}:{seconds % 60:00}";
Magic Number,MatterHackers.MatterControl.PrinterControls,RunningMacroPage,C:\repos\MatterHackers_MatterControl\ConfigurationPage\RunningMacroPage.cs,CountDownTime,The following statement contains a magic number: if (!HasBeenClosed && progressBar.RatioComplete < 1)  			{  				UiThread.RunOnIdle(CountDownTime' .2);  			}
Magic Number,MatterHackers.MatterControl.PrinterControls,ActionControlsWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\MacroControls.cs,ActionControlsWidget,The following statement contains a magic number: this.textImageButtonFactory.FixedHeight = 24 * GuiWidget.DeviceScale;
Magic Number,MatterHackers.MatterControl.PrinterControls,ActionControlsWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\MacroControls.cs,ActionControlsWidget,The following statement contains a magic number: this.textImageButtonFactory.fontSize = 12;
Magic Number,MatterHackers.MatterControl.PrinterControls,ActionControlsWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\MacroControls.cs,ActionControlsWidget,The following statement contains a magic number: this.textImageButtonFactory.normalBorderColor = new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 200);
Magic Number,MatterHackers.MatterControl.PrinterControls,ActionControlsWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\MacroControls.cs,ActionControlsWidget,The following statement contains a magic number: this.textImageButtonFactory.hoverBorderColor = new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 200);
Magic Number,MatterHackers.MatterControl.PrinterControls,ActionControlsWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\MacroControls.cs,ActionControlsWidget,The following statement contains a magic number: FlowLayoutWidget groupBox = new FlowLayoutWidget()  			{  				Padding = new BorderDouble(5)'  				HAnchor = HAnchor.ParentLeftRight'  				BackgroundColor = ActiveTheme.Instance.TertiaryBackgroundColor'  			};
Magic Number,MatterHackers.MatterControl.PrinterControls,ActionControlsWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\MacroControls.cs,ActionControlsWidget,The following statement contains a magic number: controlRow.Margin = new BorderDouble(top: 5);
Magic Number,MatterHackers.MatterControl.PrinterControls,ActionControlsWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\MacroControls.cs,GetMacroButtonContainer,The following statement contains a magic number: macroButtonContainer.Margin = new BorderDouble(0' 0' 3' 0);
Magic Number,MatterHackers.MatterControl.PrinterControls,ActionControlsWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\MacroControls.cs,GetMacroButtonContainer,The following statement contains a magic number: macroButtonContainer.Padding = new BorderDouble(0' 3' 3' 3);
Magic Number,MatterHackers.MatterControl.PrinterControls,ActionControlsWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\MacroControls.cs,GetMacroButtonContainer,The following statement contains a magic number: macroButtonContainer.Padding = new BorderDouble(0' 3' 3' 3);
Magic Number,MatterHackers.MatterControl.PrinterControls,ActionControlsWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\MacroControls.cs,GetMacroButtonContainer,The following statement contains a magic number: macroButtonContainer.Padding = new BorderDouble(0' 3' 3' 3);
Magic Number,MatterHackers.MatterControl.PrinterControls,ActionControlsWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\MacroControls.cs,GetMacroButtonContainer,The following statement contains a magic number: foreach (GCodeMacro macro in ActiveSliceSettings.Instance.ActionMacros())  			{  				Button macroButton = textImageButtonFactory.Generate(GCodeMacro.FixMacroName(macro.Name));  				macroButton.Margin = new BorderDouble(right: 5);  				macroButton.Click += (s' e) => macro.Run();    				macroButtonContainer.AddChild(macroButton);  			}
Magic Number,MatterHackers.MatterControl.PrinterControls,MacroControlsWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\MacroControls.cs,MacroControlsWidget,The following statement contains a magic number: this.textImageButtonFactory.FixedHeight = 24 * GuiWidget.DeviceScale;
Magic Number,MatterHackers.MatterControl.PrinterControls,MacroControlsWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\MacroControls.cs,MacroControlsWidget,The following statement contains a magic number: this.textImageButtonFactory.fontSize = 12;
Magic Number,MatterHackers.MatterControl.PrinterControls,MacroControlsWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\MacroControls.cs,MacroControlsWidget,The following statement contains a magic number: this.textImageButtonFactory.normalBorderColor = new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 200);
Magic Number,MatterHackers.MatterControl.PrinterControls,MacroControlsWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\MacroControls.cs,MacroControlsWidget,The following statement contains a magic number: this.textImageButtonFactory.hoverBorderColor = new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 200);
Magic Number,MatterHackers.MatterControl.PrinterControls,MacroControlsWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\MacroControls.cs,MacroControlsWidget,The following statement contains a magic number: AltGroupBox groupBox = new AltGroupBox(textImageButtonFactory.GenerateGroupBoxLabelWithEdit(new TextWidget("Macros".Localize()' pointSize: 18' textColor: ActiveTheme.Instance.SecondaryAccentColor)' out editButton));
Magic Number,MatterHackers.MatterControl.PrinterControls,MacroControlsWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\MacroControls.cs,MacroControlsWidget,The following statement contains a magic number: controlRow.Margin = new BorderDouble(top: 5);
Magic Number,MatterHackers.MatterControl.PrinterControls,MacroControlsWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\MacroControls.cs,GetMacroButtonContainer,The following statement contains a magic number: TextWidget noMacrosFound = new TextWidget("No macros are currently set up for this printer.".Localize()' pointSize: 10);
Magic Number,MatterHackers.MatterControl.PrinterControls,MacroControlsWidget,C:\repos\MatterHackers_MatterControl\PrinterControls\ControlWidgets\MacroControls.cs,GetMacroButtonContainer,The following statement contains a magic number: foreach (GCodeMacro macro in ActiveSliceSettings.Instance.UserMacros())  			{  				Button macroButton = textImageButtonFactory.Generate(GCodeMacro.FixMacroName(macro.Name));  				macroButton.Margin = new BorderDouble(right: 5);  				macroButton.Click += (s' e) => macro.Run();    				macroContainer.AddChild(macroButton);  			}
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,ShowAuthPanel,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\ShowAuthPanel.cs,ShowAuthPanel,The following statement contains a magic number: createAccountButton.Margin = new Agg.BorderDouble(right: 5);
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,ShowAuthPanel,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\ShowAuthPanel.cs,AddBulletPointAndDescription,The following statement contains a magic number: contentRow.AddChild(new TextWidget("• " + v1)  			{  				HAnchor = HAnchor.ParentLeft'  				TextColor = ActiveTheme.Instance.PrimaryTextColor'  				Margin = new Agg.BorderDouble(0' 0' 0' 10)'  			});
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,ShowAuthPanel,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\ShowAuthPanel.cs,AddBulletPointAndDescription,The following statement contains a magic number: contentRow.AddChild(new WrappedTextWidget(v2)  			{  				TextColor = ActiveTheme.Instance.SecondaryTextColor'  				Margin = new Agg.BorderDouble(20' 5' 5' 5)'  			});
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,ShowAuthPanel,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\ShowAuthPanel.cs,AddBulletPointAndDescription,The following statement contains a magic number: contentRow.AddChild(new WrappedTextWidget(v2)  			{  				TextColor = ActiveTheme.Instance.SecondaryTextColor'  				Margin = new Agg.BorderDouble(20' 5' 5' 5)'  			});
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,ShowAuthPanel,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\ShowAuthPanel.cs,AddBulletPointAndDescription,The following statement contains a magic number: contentRow.AddChild(new WrappedTextWidget(v2)  			{  				TextColor = ActiveTheme.Instance.SecondaryTextColor'  				Margin = new Agg.BorderDouble(20' 5' 5' 5)'  			});
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,ShowAuthPanel,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\ShowAuthPanel.cs,AddBulletPointAndDescription,The following statement contains a magic number: contentRow.AddChild(new WrappedTextWidget(v2)  			{  				TextColor = ActiveTheme.Instance.SecondaryTextColor'  				Margin = new Agg.BorderDouble(20' 5' 5' 5)'  			});
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortManual,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepComPortManual.cs,createComPortContainer,The following statement contains a magic number: BorderDouble elementMargin = new BorderDouble(top: 3);
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortManual,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepComPortManual.cs,createComPortContainer,The following statement contains a magic number: TextWidget comPortLabel = new TextWidget(serialPortLabelFull' 0' 0' 12);
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortManual,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepComPortManual.cs,createComPortContainer,The following statement contains a magic number: comPortLabel.Margin = new BorderDouble(0' 0' 0' 10);
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortManual,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepComPortManual.cs,createComPortContainer,The following statement contains a magic number: printerComPortError = new TextWidget("Currently available serial ports.".Localize()' 0' 0' 10);
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortManual,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepComPortManual.cs,createComPortContainer,The following statement contains a magic number: printerComPortHelpLink.Margin = new BorderDouble(left: 5);
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortManual,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepComPortManual.cs,createComPortContainer,The following statement contains a magic number: printerComPortHelpMessage = new TextWidget("The 'Serial Port' section lists all available serial\nports on your device. Changing which USB port the printer\nis conneted to may change the associated serial port.\n\nTip: If you are uncertain' unplug/plug in your printer\nand hit refresh. The new port that appears should be\nyour printer.".Localize()' 0' 0' 10);
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortManual,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepComPortManual.cs,createComPortContainer,The following statement contains a magic number: printerComPortHelpMessage.Margin = new BorderDouble(top: 10);
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortManual,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepComPortManual.cs,CreateSerialPortControls,The following statement contains a magic number: if (portIndex == 0)  			{  				TextWidget comPortOption = new TextWidget("No COM ports available".Localize());  				comPortOption.Margin = new BorderDouble(3' 6' 5' 6);  				comPortOption.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				comPortContainer.AddChild(comPortOption);  			}
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortManual,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepComPortManual.cs,CreateSerialPortControls,The following statement contains a magic number: if (portIndex == 0)  			{  				TextWidget comPortOption = new TextWidget("No COM ports available".Localize());  				comPortOption.Margin = new BorderDouble(3' 6' 5' 6);  				comPortOption.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				comPortContainer.AddChild(comPortOption);  			}
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortManual,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepComPortManual.cs,CreateSerialPortControls,The following statement contains a magic number: if (portIndex == 0)  			{  				TextWidget comPortOption = new TextWidget("No COM ports available".Localize());  				comPortOption.Margin = new BorderDouble(3' 6' 5' 6);  				comPortOption.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				comPortContainer.AddChild(comPortOption);  			}
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortManual,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepComPortManual.cs,CreateSerialPortControls,The following statement contains a magic number: if (portIndex == 0)  			{  				TextWidget comPortOption = new TextWidget("No COM ports available".Localize());  				comPortOption.Margin = new BorderDouble(3' 6' 5' 6);  				comPortOption.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				comPortContainer.AddChild(comPortOption);  			}
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortManual,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepComPortManual.cs,createComPortOption,The following statement contains a magic number: SerialPortIndexRadioButton comPortOption = new SerialPortIndexRadioButton(portName' portName)  			{  				HAnchor = HAnchor.ParentLeft'  				Margin = new BorderDouble(3' 3' 5' 3)'  				TextColor = ActiveTheme.Instance.PrimaryTextColor'  				Checked = isActivePrinterPort  			};
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortManual,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepComPortManual.cs,createComPortOption,The following statement contains a magic number: SerialPortIndexRadioButton comPortOption = new SerialPortIndexRadioButton(portName' portName)  			{  				HAnchor = HAnchor.ParentLeft'  				Margin = new BorderDouble(3' 3' 5' 3)'  				TextColor = ActiveTheme.Instance.PrimaryTextColor'  				Checked = isActivePrinterPort  			};
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortManual,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepComPortManual.cs,createComPortOption,The following statement contains a magic number: SerialPortIndexRadioButton comPortOption = new SerialPortIndexRadioButton(portName' portName)  			{  				HAnchor = HAnchor.ParentLeft'  				Margin = new BorderDouble(3' 3' 5' 3)'  				TextColor = ActiveTheme.Instance.PrimaryTextColor'  				Checked = isActivePrinterPort  			};
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortManual,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepComPortManual.cs,createComPortOption,The following statement contains a magic number: SerialPortIndexRadioButton comPortOption = new SerialPortIndexRadioButton(portName' portName)  			{  				HAnchor = HAnchor.ParentLeft'  				Margin = new BorderDouble(3' 3' 5' 3)'  				TextColor = ActiveTheme.Instance.PrimaryTextColor'  				Checked = isActivePrinterPort  			};
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortTwo,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepComPortTwo.cs,createPrinterConnectionMessageContainer,The following statement contains a magic number: container.Margin = new BorderDouble(5);
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortTwo,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepComPortTwo.cs,createPrinterConnectionMessageContainer,The following statement contains a magic number: BorderDouble elementMargin = new BorderDouble(top: 5);
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortTwo,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepComPortTwo.cs,createPrinterConnectionMessageContainer,The following statement contains a magic number: TextWidget printerMessageOne = new TextWidget(printerMessageOneText' 0' 0' 10);
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortTwo,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepComPortTwo.cs,createPrinterConnectionMessageContainer,The following statement contains a magic number: printerMessageOne.Margin = new BorderDouble(0' 10' 0' 5);
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortTwo,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepComPortTwo.cs,createPrinterConnectionMessageContainer,The following statement contains a magic number: printerMessageOne.Margin = new BorderDouble(0' 10' 0' 5);
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortTwo,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepComPortTwo.cs,createPrinterConnectionMessageContainer,The following statement contains a magic number: TextWidget printerMessageFour = new TextWidget(printerMessageFourFull' 0' 0' 12);
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortTwo,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepComPortTwo.cs,createPrinterConnectionMessageContainer,The following statement contains a magic number: TextWidget printerMessageFive = new TextWidget(printerMessageFiveTxtFull' 0' 0' 12);
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortTwo,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepComPortTwo.cs,createPrinterConnectionMessageContainer,The following statement contains a magic number: manualLink.Margin = new BorderDouble(0' 5);
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortTwo,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepComPortTwo.cs,createPrinterConnectionMessageContainer,The following statement contains a magic number: printerErrorMessage = new TextWidget(""' 0' 0' 10);
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortOne,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepComPortOne.cs,createPrinterConnectionMessageContainer,The following statement contains a magic number: container.Margin = new BorderDouble(5);
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortOne,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepComPortOne.cs,createPrinterConnectionMessageContainer,The following statement contains a magic number: BorderDouble elementMargin = new BorderDouble(top: 5);
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortOne,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepComPortOne.cs,createPrinterConnectionMessageContainer,The following statement contains a magic number: TextWidget printerMessageOne = new TextWidget("MatterControl will now attempt to auto-detect printer.".Localize()' 0' 0' 10);
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortOne,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepComPortOne.cs,createPrinterConnectionMessageContainer,The following statement contains a magic number: printerMessageOne.Margin = new BorderDouble(0' 10' 0' 5);
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortOne,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepComPortOne.cs,createPrinterConnectionMessageContainer,The following statement contains a magic number: printerMessageOne.Margin = new BorderDouble(0' 10' 0' 5);
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortOne,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepComPortOne.cs,createPrinterConnectionMessageContainer,The following statement contains a magic number: TextWidget printerMessageTwo = new TextWidget(printerMessageTwoTxtFull' 0' 0' 12);
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortOne,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepComPortOne.cs,createPrinterConnectionMessageContainer,The following statement contains a magic number: TextWidget printerMessageThree = new TextWidget(printerMessageThreeFull' 0' 0' 12);
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortOne,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepComPortOne.cs,createPrinterConnectionMessageContainer,The following statement contains a magic number: TextWidget setupManualConfigurationOrSkipConnectionWidget = new TextWidget(setupManualConfigurationOrSkipConnectionTextFull' 0' 0' 10);
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortOne,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepComPortOne.cs,createPrinterConnectionMessageContainer,The following statement contains a magic number: manualLink.Margin = new BorderDouble(0' 5);
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortOne,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepComPortOne.cs,createPrinterConnectionMessageContainer,The following statement contains a magic number: TextWidget printerMessageFour = new TextWidget(printerMessageFourText' 0' 0' 10);
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortOne,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepComPortOne.cs,createPrinterConnectionMessageContainer,The following statement contains a magic number: skipConnectionLink.Margin = new BorderDouble(0' 8);
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepMakeModelName,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepMakeModelName.cs,SetupStepMakeModelName,The following statement contains a magic number: printerManufacturerSelector = new BoundDropList(string.Format("- {0} -"' "Select Make".Localize())' maxHeight: 200)  			{  				HAnchor = HAnchor.ParentLeftRight'  				Margin = elementMargin'  				Name = "Select Make"'  				ListSource = OemSettings.Instance.AllOems'  				TabStop = true  			};
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepMakeModelName,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepMakeModelName.cs,SetupStepMakeModelName,The following statement contains a magic number: printerModelSelector = new BoundDropList(string.Format("- {0} -"' "Select Model".Localize())' maxHeight: 200)  			{  				Name = "Select Model"'  				HAnchor = HAnchor.ParentLeftRight'  				Margin = elementMargin'  				TabStop = true  			};
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepMakeModelName,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepMakeModelName.cs,createPrinterNameContainer,The following statement contains a magic number: TextWidget printerNameLabel = new TextWidget("Name".Localize() + ":"' 0' 0' 12)  			{  				TextColor = ActiveTheme.Instance.PrimaryTextColor'  				HAnchor = HAnchor.ParentLeftRight'  				Margin = new BorderDouble(0' 4' 0' 1)  			};
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepMakeModelName,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepMakeModelName.cs,createPrinterNameContainer,The following statement contains a magic number: TextWidget printerNameLabel = new TextWidget("Name".Localize() + ":"' 0' 0' 12)  			{  				TextColor = ActiveTheme.Instance.PrimaryTextColor'  				HAnchor = HAnchor.ParentLeftRight'  				Margin = new BorderDouble(0' 4' 0' 1)  			};
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepMakeModelName,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepMakeModelName.cs,createPrinterNameContainer,The following statement contains a magic number: printerNameError = new TextWidget(""' 0' 0' 10)  			{  				TextColor = ActiveTheme.Instance.PrimaryTextColor'  				HAnchor = HAnchor.ParentLeftRight'  				Margin = new BorderDouble(top: 3)  			};
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepMakeModelName,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepMakeModelName.cs,createPrinterNameContainer,The following statement contains a magic number: printerNameError = new TextWidget(""' 0' 0' 10)  			{  				TextColor = ActiveTheme.Instance.PrimaryTextColor'  				HAnchor = HAnchor.ParentLeftRight'  				Margin = new BorderDouble(top: 3)  			};
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepMakeModelName,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepMakeModelName.cs,createPrinterNameContainer,The following statement contains a magic number: container.Margin = new BorderDouble(0' 5);
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepMakeModelName,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepMakeModelName.cs,CreateSelectionContainer,The following statement contains a magic number: var sectionLabel = new TextWidget(labelText' 0' 0' 12)  			{  				TextColor = ActiveTheme.Instance.PrimaryTextColor'  				HAnchor = HAnchor.ParentLeftRight'  				Margin = elementMargin  			};
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepMakeModelName,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepMakeModelName.cs,CreateSelectionContainer,The following statement contains a magic number: var validationTextWidget = new TextWidget(validationMessage' 0' 0' 10)  			{  				TextColor = ActiveTheme.Instance.SecondaryAccentColor'  				HAnchor = HAnchor.ParentLeftRight'  				Margin = elementMargin  			};
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepMakeModelName,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepMakeModelName.cs,CreateSelectionContainer,The following statement contains a magic number: var container = new FlowLayoutWidget(FlowDirection.TopToBottom)  			{  				Margin = new BorderDouble(0' 5)'  				HAnchor = HAnchor.ParentLeftRight  			};
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepBaudRate,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepBaudRate.cs,createPrinterBaudRateContainer,The following statement contains a magic number: BorderDouble elementMargin = new BorderDouble(top: 3);
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepBaudRate,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepBaudRate.cs,createPrinterBaudRateContainer,The following statement contains a magic number: TextWidget baudRateLabel = new TextWidget(baudRateLabelTextFull' 0' 0' 12);
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepBaudRate,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepBaudRate.cs,createPrinterBaudRateContainer,The following statement contains a magic number: baudRateLabel.Margin = new BorderDouble(0' 0' 0' 10);
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepBaudRate,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepBaudRate.cs,createPrinterBaudRateContainer,The following statement contains a magic number: printerBaudRateError = new TextWidget("Select the baud rate.".Localize()' 0' 0' 10);
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepBaudRate,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepBaudRate.cs,createPrinterBaudRateContainer,The following statement contains a magic number: printerBaudRateHelpLink.Margin = new BorderDouble(left: 5);
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepBaudRate,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepBaudRate.cs,createPrinterBaudRateContainer,The following statement contains a magic number: printerBaudRateHelpMessage = new TextWidget("The term 'Baud Rate' roughly means the speed at which\ndata is transmitted.  Baud rates may differ from printer to\nprinter. Refer to your printer manual for more info.\n\nTip: If you are uncertain - try 250000.".Localize()' 0' 0' 10);
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepBaudRate,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepBaudRate.cs,createPrinterBaudRateContainer,The following statement contains a magic number: printerBaudRateHelpMessage.Margin = new BorderDouble(top: 10);
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepBaudRate,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepBaudRate.cs,GetBaudRateWidget,The following statement contains a magic number: BorderDouble baudRateMargin = new BorderDouble(3' 3' 5' 0);
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepBaudRate,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepBaudRate.cs,GetBaudRateWidget,The following statement contains a magic number: BorderDouble baudRateMargin = new BorderDouble(3' 3' 5' 0);
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepBaudRate,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepBaudRate.cs,GetBaudRateWidget,The following statement contains a magic number: BorderDouble baudRateMargin = new BorderDouble(3' 3' 5' 0);
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepInstallDriver,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepInstallDriver.cs,createPrinterDriverContainer,The following statement contains a magic number: container.Margin = new BorderDouble(0' 5);
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepInstallDriver,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepInstallDriver.cs,createPrinterDriverContainer,The following statement contains a magic number: BorderDouble elementMargin = new BorderDouble(top: 3);
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepInstallDriver,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepInstallDriver.cs,createPrinterDriverContainer,The following statement contains a magic number: printerDriverMessage = new TextWidget("This printer requires a driver for communication.".Localize()' 0' 0' 10);
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepInstallDriver,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepInstallDriver.cs,createPrinterDriverContainer,The following statement contains a magic number: TextWidget printerDriverMessageTwo = new TextWidget("Driver located. Would you like to install?".Localize()' 0' 0' 10);
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,OptionContainer,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\BaseConnectionWidget.cs,OptionContainer,The following statement contains a magic number: this.Margin = new BorderDouble(2' 5' 2' 0);
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,OptionContainer,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\BaseConnectionWidget.cs,OptionContainer,The following statement contains a magic number: this.Margin = new BorderDouble(2' 5' 2' 0);
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,OptionContainer,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\BaseConnectionWidget.cs,OptionContainer,The following statement contains a magic number: this.Margin = new BorderDouble(2' 5' 2' 0);
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,ActionLink,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\BaseConnectionWidget.cs,ActionLink,The following statement contains a magic number: this.Margin = new BorderDouble(3' 0' 3' 0);
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,ActionLink,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\BaseConnectionWidget.cs,ActionLink,The following statement contains a magic number: this.Margin = new BorderDouble(3' 0' 3' 0);
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,LabelContainer,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\BaseConnectionWidget.cs,LabelContainer,The following statement contains a magic number: this.Margin = new BorderDouble(2' -2' 2' 5);
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,LabelContainer,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\BaseConnectionWidget.cs,LabelContainer,The following statement contains a magic number: this.Margin = new BorderDouble(2' -2' 2' 5);
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,LabelContainer,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\BaseConnectionWidget.cs,LabelContainer,The following statement contains a magic number: this.Margin = new BorderDouble(2' -2' 2' 5);
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,LabelContainer,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\BaseConnectionWidget.cs,LabelContainer,The following statement contains a magic number: this.Margin = new BorderDouble(2' -2' 2' 5);
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,LabelContainer,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\BaseConnectionWidget.cs,LabelContainer,The following statement contains a magic number: this.Padding = new BorderDouble(3);
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryDataView,C:\repos\MatterHackers_MatterControl\History\PrintHistoryDataView.cs,SetDisplayAttributes,The following statement contains a magic number: this.MinimumSize = new Vector2(0' 200);
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryDataView,C:\repos\MatterHackers_MatterControl\History\PrintHistoryDataView.cs,SetDisplayAttributes,The following statement contains a magic number: this.ScrollArea.Padding = new BorderDouble(3);
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,C:\repos\MatterHackers_MatterControl\History\PrintHistoryListItem.cs,AddChildElements,The following statement contains a magic number: {  				GuiWidget indicator = new GuiWidget();  				indicator.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  				indicator.Width = 15;  				if (printTask.PrintComplete)  				{  					indicator.BackgroundColor = new RGBA_Bytes(38' 147' 51' 180);  				}  				else  				{  					indicator.BackgroundColor = new RGBA_Bytes(252' 209' 22' 180);  				}    				FlowLayoutWidget middleColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  				middleColumn.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				middleColumn.Padding = new BorderDouble(6' 3);  				{  					FlowLayoutWidget labelContainer = new FlowLayoutWidget();  					labelContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;    					string labelName = textInfo.ToTitleCase(printTask.PrintName);  					labelName = labelName.Replace('_'' ' ');  					partLabel = new TextWidget(labelName' pointSize: 15 * pointSizeFactor);  					partLabel.TextColor = WidgetTextColor;    					labelContainer.AddChild(partLabel);    					middleColumn.AddChild(labelContainer);  				}    				RGBA_Bytes timeTextColor = new RGBA_Bytes(34' 34' 34);    				FlowLayoutWidget buttonContainer = new FlowLayoutWidget();  				buttonContainer.Margin = new BorderDouble(0);  				buttonContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				{  					TextWidget statusIndicator = new TextWidget("Status: Completed".Localize()' pointSize: 8 * pointSizeFactor);  					statusIndicator.Margin = new BorderDouble(right: 3);  					//buttonContainer.AddChild(statusIndicator);    					string printTimeLabel = "Time".Localize().ToUpper();  					string printTimeLabelFull = string.Format("{0}: "' printTimeLabel);  					TextWidget timeLabel = new TextWidget(printTimeLabelFull' pointSize: 8 * pointSizeFactor);  					timeLabel.TextColor = timeTextColor;    					TextWidget timeIndicator;  					int minutes = printTask.PrintTimeMinutes;  					if (minutes < 0)  					{  						timeIndicator = new TextWidget("Unknown".Localize());  					}  					else if (minutes > 60)  					{  						timeIndicator = new TextWidget("{0}hrs {1}min".FormatWith(printTask.PrintTimeMinutes / 60' printTask.PrintTimeMinutes % 60)' pointSize: 12 * pointSizeFactor);  					}  					else  					{  						timeIndicator = new TextWidget(string.Format("{0}min"' printTask.PrintTimeMinutes)' pointSize: 12 * pointSizeFactor);  					}    					if (printTask.PercentDone > 0)  					{  						timeIndicator.AutoExpandBoundsToText = true;  						timeIndicator.Text += $" ({printTask.PercentDone:0.0}%)";  						  						if(printTask.RecoveryCount > 0)  						{  							if (printTask.RecoveryCount == 1)  							{  								timeIndicator.Text += " - " + "recovered once".Localize();  							}  							else  							{  								timeIndicator.Text += " - " + "recovered {0} times".FormatWith(printTask.RecoveryCount);  							}  						}  					}    					timeIndicator.Margin = new BorderDouble(right: 6);  					timeIndicator.TextColor = timeTextColor;    					buttonContainer.AddChild(timeLabel);  					buttonContainer.AddChild(timeIndicator);  					buttonContainer.AddChild(new HorizontalSpacer());  					middleColumn.AddChild(buttonContainer);  				}    				GuiWidget primaryContainer = new GuiWidget();  				primaryContainer.HAnchor = HAnchor.ParentLeftRight;  				primaryContainer.VAnchor = VAnchor.ParentBottomTop;    				FlowLayoutWidget primaryFlow = new FlowLayoutWidget(FlowDirection.LeftToRight);  				primaryFlow.HAnchor = HAnchor.ParentLeftRight;  				primaryFlow.VAnchor = VAnchor.ParentBottomTop;    				primaryFlow.AddChild(indicator);  				primaryFlow.AddChild(middleColumn);    				primaryContainer.AddChild(primaryFlow);    				rightButtonOverlay = new SlideWidget();  				rightButtonOverlay.VAnchor = VAnchor.ParentBottomTop;  				rightButtonOverlay.HAnchor = Agg.UI.HAnchor.ParentRight;  				rightButtonOverlay.Width = rightOverlayWidth;  				rightButtonOverlay.Visible = false;    				FlowLayoutWidget rightMiddleColumnContainer = new FlowLayoutWidget(FlowDirection.LeftToRight);  				rightMiddleColumnContainer.VAnchor = VAnchor.ParentBottomTop;  				{  					TextWidget viewLabel = new TextWidget("View".Localize());  					viewLabel.TextColor = RGBA_Bytes.White;  					viewLabel.VAnchor = VAnchor.ParentCenter;  					viewLabel.HAnchor = HAnchor.ParentCenter;    					FatFlatClickWidget viewButton = new FatFlatClickWidget(viewLabel);  					viewButton.VAnchor = VAnchor.ParentBottomTop;  					viewButton.BackgroundColor = ActiveTheme.Instance.SecondaryAccentColor;  					viewButton.Width = actionButtonSize;  					viewButton.Click += ViewButton_Click;  					rightMiddleColumnContainer.AddChild(viewButton);    					TextWidget printLabel = new TextWidget("Print".Localize());  					printLabel.TextColor = RGBA_Bytes.White;  					printLabel.VAnchor = VAnchor.ParentCenter;  					printLabel.HAnchor = HAnchor.ParentCenter;    					FatFlatClickWidget printButton = new FatFlatClickWidget(printLabel);  					printButton.VAnchor = VAnchor.ParentBottomTop;  					printButton.BackgroundColor = ActiveTheme.Instance.PrimaryAccentColor;  					printButton.Width = actionButtonSize;  					printButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							if (!PrinterCommunication.PrinterConnectionAndCommunication.Instance.PrintIsActive)  							{  								QueueData.Instance.AddItem(new PrintItemWrapper(printTask.PrintItemId)' 0);  								QueueData.Instance.SelectedIndex = 0;  								PrinterCommunication.PrinterConnectionAndCommunication.Instance.PrintActivePartIfPossible();  							}  							else  							{  								QueueData.Instance.AddItem(new PrintItemWrapper(printTask.PrintItemId));  							}  							rightButtonOverlay.SlideOut();  						});  					};  					rightMiddleColumnContainer.AddChild(printButton);  				}  				rightButtonOverlay.AddChild(rightMiddleColumnContainer);    				if (showTimestamp)  				{  					FlowLayoutWidget timestampColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  					timestampColumn.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  					timestampColumn.BackgroundColor = RGBA_Bytes.LightGray;  					timestampColumn.Padding = new BorderDouble(6' 0);    					FlowLayoutWidget startTimeContainer = new FlowLayoutWidget();  					startTimeContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					startTimeContainer.Padding = new BorderDouble(0' 3);    					string startLabelFull = "{0}:".FormatWith("Start".Localize().ToUpper());  					TextWidget startLabel = new TextWidget(startLabelFull' pointSize: 8 * pointSizeFactor);  					startLabel.TextColor = timeTextColor;    					string startTimeString = printTask.PrintStart.ToString("MMM d yyyy h:mm ") + printTask.PrintStart.ToString("tt").ToLower();  					TextWidget startDate = new TextWidget(startTimeString' pointSize: 12 * pointSizeFactor);  					startDate.TextColor = timeTextColor;    					startTimeContainer.AddChild(startLabel);  					startTimeContainer.AddChild(new HorizontalSpacer());  					startTimeContainer.AddChild(startDate);    					FlowLayoutWidget endTimeContainer = new FlowLayoutWidget();  					endTimeContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					endTimeContainer.Padding = new BorderDouble(0' 3);    					string endLabelFull = "{0}:".FormatWith("End".Localize().ToUpper());  					TextWidget endLabel = new TextWidget(endLabelFull' pointSize: 8 * pointSizeFactor);  					endLabel.TextColor = timeTextColor;    					string endTimeString;  					if (printTask.PrintEnd != DateTime.MinValue)  					{  						endTimeString = printTask.PrintEnd.ToString("MMM d yyyy h:mm ") + printTask.PrintEnd.ToString("tt").ToLower();  					}  					else  					{  						endTimeString = "Unknown".Localize();  					}    					TextWidget endDate = new TextWidget(endTimeString' pointSize: 12 * pointSizeFactor);  					endDate.TextColor = timeTextColor;    					endTimeContainer.AddChild(endLabel);  					endTimeContainer.AddChild(new HorizontalSpacer());  					endTimeContainer.AddChild(endDate);    					HorizontalLine horizontalLine = new HorizontalLine();  					horizontalLine.BackgroundColor = RGBA_Bytes.Gray;    					timestampColumn.AddChild(endTimeContainer);  					timestampColumn.AddChild(horizontalLine);  					timestampColumn.AddChild(startTimeContainer);    					timestampColumn.HAnchor = HAnchor.ParentLeftRight;  					timestampColumn.Padding = new BorderDouble(5' 0' 15' 0);    					primaryFlow.AddChild(timestampColumn);  				}    				mainContainer.AddChild(primaryContainer);  				mainContainer.AddChild(rightButtonOverlay);    				this.AddChild(mainContainer);  			}
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,C:\repos\MatterHackers_MatterControl\History\PrintHistoryListItem.cs,AddChildElements,The following statement contains a magic number: {  				GuiWidget indicator = new GuiWidget();  				indicator.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  				indicator.Width = 15;  				if (printTask.PrintComplete)  				{  					indicator.BackgroundColor = new RGBA_Bytes(38' 147' 51' 180);  				}  				else  				{  					indicator.BackgroundColor = new RGBA_Bytes(252' 209' 22' 180);  				}    				FlowLayoutWidget middleColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  				middleColumn.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				middleColumn.Padding = new BorderDouble(6' 3);  				{  					FlowLayoutWidget labelContainer = new FlowLayoutWidget();  					labelContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;    					string labelName = textInfo.ToTitleCase(printTask.PrintName);  					labelName = labelName.Replace('_'' ' ');  					partLabel = new TextWidget(labelName' pointSize: 15 * pointSizeFactor);  					partLabel.TextColor = WidgetTextColor;    					labelContainer.AddChild(partLabel);    					middleColumn.AddChild(labelContainer);  				}    				RGBA_Bytes timeTextColor = new RGBA_Bytes(34' 34' 34);    				FlowLayoutWidget buttonContainer = new FlowLayoutWidget();  				buttonContainer.Margin = new BorderDouble(0);  				buttonContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				{  					TextWidget statusIndicator = new TextWidget("Status: Completed".Localize()' pointSize: 8 * pointSizeFactor);  					statusIndicator.Margin = new BorderDouble(right: 3);  					//buttonContainer.AddChild(statusIndicator);    					string printTimeLabel = "Time".Localize().ToUpper();  					string printTimeLabelFull = string.Format("{0}: "' printTimeLabel);  					TextWidget timeLabel = new TextWidget(printTimeLabelFull' pointSize: 8 * pointSizeFactor);  					timeLabel.TextColor = timeTextColor;    					TextWidget timeIndicator;  					int minutes = printTask.PrintTimeMinutes;  					if (minutes < 0)  					{  						timeIndicator = new TextWidget("Unknown".Localize());  					}  					else if (minutes > 60)  					{  						timeIndicator = new TextWidget("{0}hrs {1}min".FormatWith(printTask.PrintTimeMinutes / 60' printTask.PrintTimeMinutes % 60)' pointSize: 12 * pointSizeFactor);  					}  					else  					{  						timeIndicator = new TextWidget(string.Format("{0}min"' printTask.PrintTimeMinutes)' pointSize: 12 * pointSizeFactor);  					}    					if (printTask.PercentDone > 0)  					{  						timeIndicator.AutoExpandBoundsToText = true;  						timeIndicator.Text += $" ({printTask.PercentDone:0.0}%)";  						  						if(printTask.RecoveryCount > 0)  						{  							if (printTask.RecoveryCount == 1)  							{  								timeIndicator.Text += " - " + "recovered once".Localize();  							}  							else  							{  								timeIndicator.Text += " - " + "recovered {0} times".FormatWith(printTask.RecoveryCount);  							}  						}  					}    					timeIndicator.Margin = new BorderDouble(right: 6);  					timeIndicator.TextColor = timeTextColor;    					buttonContainer.AddChild(timeLabel);  					buttonContainer.AddChild(timeIndicator);  					buttonContainer.AddChild(new HorizontalSpacer());  					middleColumn.AddChild(buttonContainer);  				}    				GuiWidget primaryContainer = new GuiWidget();  				primaryContainer.HAnchor = HAnchor.ParentLeftRight;  				primaryContainer.VAnchor = VAnchor.ParentBottomTop;    				FlowLayoutWidget primaryFlow = new FlowLayoutWidget(FlowDirection.LeftToRight);  				primaryFlow.HAnchor = HAnchor.ParentLeftRight;  				primaryFlow.VAnchor = VAnchor.ParentBottomTop;    				primaryFlow.AddChild(indicator);  				primaryFlow.AddChild(middleColumn);    				primaryContainer.AddChild(primaryFlow);    				rightButtonOverlay = new SlideWidget();  				rightButtonOverlay.VAnchor = VAnchor.ParentBottomTop;  				rightButtonOverlay.HAnchor = Agg.UI.HAnchor.ParentRight;  				rightButtonOverlay.Width = rightOverlayWidth;  				rightButtonOverlay.Visible = false;    				FlowLayoutWidget rightMiddleColumnContainer = new FlowLayoutWidget(FlowDirection.LeftToRight);  				rightMiddleColumnContainer.VAnchor = VAnchor.ParentBottomTop;  				{  					TextWidget viewLabel = new TextWidget("View".Localize());  					viewLabel.TextColor = RGBA_Bytes.White;  					viewLabel.VAnchor = VAnchor.ParentCenter;  					viewLabel.HAnchor = HAnchor.ParentCenter;    					FatFlatClickWidget viewButton = new FatFlatClickWidget(viewLabel);  					viewButton.VAnchor = VAnchor.ParentBottomTop;  					viewButton.BackgroundColor = ActiveTheme.Instance.SecondaryAccentColor;  					viewButton.Width = actionButtonSize;  					viewButton.Click += ViewButton_Click;  					rightMiddleColumnContainer.AddChild(viewButton);    					TextWidget printLabel = new TextWidget("Print".Localize());  					printLabel.TextColor = RGBA_Bytes.White;  					printLabel.VAnchor = VAnchor.ParentCenter;  					printLabel.HAnchor = HAnchor.ParentCenter;    					FatFlatClickWidget printButton = new FatFlatClickWidget(printLabel);  					printButton.VAnchor = VAnchor.ParentBottomTop;  					printButton.BackgroundColor = ActiveTheme.Instance.PrimaryAccentColor;  					printButton.Width = actionButtonSize;  					printButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							if (!PrinterCommunication.PrinterConnectionAndCommunication.Instance.PrintIsActive)  							{  								QueueData.Instance.AddItem(new PrintItemWrapper(printTask.PrintItemId)' 0);  								QueueData.Instance.SelectedIndex = 0;  								PrinterCommunication.PrinterConnectionAndCommunication.Instance.PrintActivePartIfPossible();  							}  							else  							{  								QueueData.Instance.AddItem(new PrintItemWrapper(printTask.PrintItemId));  							}  							rightButtonOverlay.SlideOut();  						});  					};  					rightMiddleColumnContainer.AddChild(printButton);  				}  				rightButtonOverlay.AddChild(rightMiddleColumnContainer);    				if (showTimestamp)  				{  					FlowLayoutWidget timestampColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  					timestampColumn.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  					timestampColumn.BackgroundColor = RGBA_Bytes.LightGray;  					timestampColumn.Padding = new BorderDouble(6' 0);    					FlowLayoutWidget startTimeContainer = new FlowLayoutWidget();  					startTimeContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					startTimeContainer.Padding = new BorderDouble(0' 3);    					string startLabelFull = "{0}:".FormatWith("Start".Localize().ToUpper());  					TextWidget startLabel = new TextWidget(startLabelFull' pointSize: 8 * pointSizeFactor);  					startLabel.TextColor = timeTextColor;    					string startTimeString = printTask.PrintStart.ToString("MMM d yyyy h:mm ") + printTask.PrintStart.ToString("tt").ToLower();  					TextWidget startDate = new TextWidget(startTimeString' pointSize: 12 * pointSizeFactor);  					startDate.TextColor = timeTextColor;    					startTimeContainer.AddChild(startLabel);  					startTimeContainer.AddChild(new HorizontalSpacer());  					startTimeContainer.AddChild(startDate);    					FlowLayoutWidget endTimeContainer = new FlowLayoutWidget();  					endTimeContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					endTimeContainer.Padding = new BorderDouble(0' 3);    					string endLabelFull = "{0}:".FormatWith("End".Localize().ToUpper());  					TextWidget endLabel = new TextWidget(endLabelFull' pointSize: 8 * pointSizeFactor);  					endLabel.TextColor = timeTextColor;    					string endTimeString;  					if (printTask.PrintEnd != DateTime.MinValue)  					{  						endTimeString = printTask.PrintEnd.ToString("MMM d yyyy h:mm ") + printTask.PrintEnd.ToString("tt").ToLower();  					}  					else  					{  						endTimeString = "Unknown".Localize();  					}    					TextWidget endDate = new TextWidget(endTimeString' pointSize: 12 * pointSizeFactor);  					endDate.TextColor = timeTextColor;    					endTimeContainer.AddChild(endLabel);  					endTimeContainer.AddChild(new HorizontalSpacer());  					endTimeContainer.AddChild(endDate);    					HorizontalLine horizontalLine = new HorizontalLine();  					horizontalLine.BackgroundColor = RGBA_Bytes.Gray;    					timestampColumn.AddChild(endTimeContainer);  					timestampColumn.AddChild(horizontalLine);  					timestampColumn.AddChild(startTimeContainer);    					timestampColumn.HAnchor = HAnchor.ParentLeftRight;  					timestampColumn.Padding = new BorderDouble(5' 0' 15' 0);    					primaryFlow.AddChild(timestampColumn);  				}    				mainContainer.AddChild(primaryContainer);  				mainContainer.AddChild(rightButtonOverlay);    				this.AddChild(mainContainer);  			}
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,C:\repos\MatterHackers_MatterControl\History\PrintHistoryListItem.cs,AddChildElements,The following statement contains a magic number: {  				GuiWidget indicator = new GuiWidget();  				indicator.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  				indicator.Width = 15;  				if (printTask.PrintComplete)  				{  					indicator.BackgroundColor = new RGBA_Bytes(38' 147' 51' 180);  				}  				else  				{  					indicator.BackgroundColor = new RGBA_Bytes(252' 209' 22' 180);  				}    				FlowLayoutWidget middleColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  				middleColumn.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				middleColumn.Padding = new BorderDouble(6' 3);  				{  					FlowLayoutWidget labelContainer = new FlowLayoutWidget();  					labelContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;    					string labelName = textInfo.ToTitleCase(printTask.PrintName);  					labelName = labelName.Replace('_'' ' ');  					partLabel = new TextWidget(labelName' pointSize: 15 * pointSizeFactor);  					partLabel.TextColor = WidgetTextColor;    					labelContainer.AddChild(partLabel);    					middleColumn.AddChild(labelContainer);  				}    				RGBA_Bytes timeTextColor = new RGBA_Bytes(34' 34' 34);    				FlowLayoutWidget buttonContainer = new FlowLayoutWidget();  				buttonContainer.Margin = new BorderDouble(0);  				buttonContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				{  					TextWidget statusIndicator = new TextWidget("Status: Completed".Localize()' pointSize: 8 * pointSizeFactor);  					statusIndicator.Margin = new BorderDouble(right: 3);  					//buttonContainer.AddChild(statusIndicator);    					string printTimeLabel = "Time".Localize().ToUpper();  					string printTimeLabelFull = string.Format("{0}: "' printTimeLabel);  					TextWidget timeLabel = new TextWidget(printTimeLabelFull' pointSize: 8 * pointSizeFactor);  					timeLabel.TextColor = timeTextColor;    					TextWidget timeIndicator;  					int minutes = printTask.PrintTimeMinutes;  					if (minutes < 0)  					{  						timeIndicator = new TextWidget("Unknown".Localize());  					}  					else if (minutes > 60)  					{  						timeIndicator = new TextWidget("{0}hrs {1}min".FormatWith(printTask.PrintTimeMinutes / 60' printTask.PrintTimeMinutes % 60)' pointSize: 12 * pointSizeFactor);  					}  					else  					{  						timeIndicator = new TextWidget(string.Format("{0}min"' printTask.PrintTimeMinutes)' pointSize: 12 * pointSizeFactor);  					}    					if (printTask.PercentDone > 0)  					{  						timeIndicator.AutoExpandBoundsToText = true;  						timeIndicator.Text += $" ({printTask.PercentDone:0.0}%)";  						  						if(printTask.RecoveryCount > 0)  						{  							if (printTask.RecoveryCount == 1)  							{  								timeIndicator.Text += " - " + "recovered once".Localize();  							}  							else  							{  								timeIndicator.Text += " - " + "recovered {0} times".FormatWith(printTask.RecoveryCount);  							}  						}  					}    					timeIndicator.Margin = new BorderDouble(right: 6);  					timeIndicator.TextColor = timeTextColor;    					buttonContainer.AddChild(timeLabel);  					buttonContainer.AddChild(timeIndicator);  					buttonContainer.AddChild(new HorizontalSpacer());  					middleColumn.AddChild(buttonContainer);  				}    				GuiWidget primaryContainer = new GuiWidget();  				primaryContainer.HAnchor = HAnchor.ParentLeftRight;  				primaryContainer.VAnchor = VAnchor.ParentBottomTop;    				FlowLayoutWidget primaryFlow = new FlowLayoutWidget(FlowDirection.LeftToRight);  				primaryFlow.HAnchor = HAnchor.ParentLeftRight;  				primaryFlow.VAnchor = VAnchor.ParentBottomTop;    				primaryFlow.AddChild(indicator);  				primaryFlow.AddChild(middleColumn);    				primaryContainer.AddChild(primaryFlow);    				rightButtonOverlay = new SlideWidget();  				rightButtonOverlay.VAnchor = VAnchor.ParentBottomTop;  				rightButtonOverlay.HAnchor = Agg.UI.HAnchor.ParentRight;  				rightButtonOverlay.Width = rightOverlayWidth;  				rightButtonOverlay.Visible = false;    				FlowLayoutWidget rightMiddleColumnContainer = new FlowLayoutWidget(FlowDirection.LeftToRight);  				rightMiddleColumnContainer.VAnchor = VAnchor.ParentBottomTop;  				{  					TextWidget viewLabel = new TextWidget("View".Localize());  					viewLabel.TextColor = RGBA_Bytes.White;  					viewLabel.VAnchor = VAnchor.ParentCenter;  					viewLabel.HAnchor = HAnchor.ParentCenter;    					FatFlatClickWidget viewButton = new FatFlatClickWidget(viewLabel);  					viewButton.VAnchor = VAnchor.ParentBottomTop;  					viewButton.BackgroundColor = ActiveTheme.Instance.SecondaryAccentColor;  					viewButton.Width = actionButtonSize;  					viewButton.Click += ViewButton_Click;  					rightMiddleColumnContainer.AddChild(viewButton);    					TextWidget printLabel = new TextWidget("Print".Localize());  					printLabel.TextColor = RGBA_Bytes.White;  					printLabel.VAnchor = VAnchor.ParentCenter;  					printLabel.HAnchor = HAnchor.ParentCenter;    					FatFlatClickWidget printButton = new FatFlatClickWidget(printLabel);  					printButton.VAnchor = VAnchor.ParentBottomTop;  					printButton.BackgroundColor = ActiveTheme.Instance.PrimaryAccentColor;  					printButton.Width = actionButtonSize;  					printButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							if (!PrinterCommunication.PrinterConnectionAndCommunication.Instance.PrintIsActive)  							{  								QueueData.Instance.AddItem(new PrintItemWrapper(printTask.PrintItemId)' 0);  								QueueData.Instance.SelectedIndex = 0;  								PrinterCommunication.PrinterConnectionAndCommunication.Instance.PrintActivePartIfPossible();  							}  							else  							{  								QueueData.Instance.AddItem(new PrintItemWrapper(printTask.PrintItemId));  							}  							rightButtonOverlay.SlideOut();  						});  					};  					rightMiddleColumnContainer.AddChild(printButton);  				}  				rightButtonOverlay.AddChild(rightMiddleColumnContainer);    				if (showTimestamp)  				{  					FlowLayoutWidget timestampColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  					timestampColumn.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  					timestampColumn.BackgroundColor = RGBA_Bytes.LightGray;  					timestampColumn.Padding = new BorderDouble(6' 0);    					FlowLayoutWidget startTimeContainer = new FlowLayoutWidget();  					startTimeContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					startTimeContainer.Padding = new BorderDouble(0' 3);    					string startLabelFull = "{0}:".FormatWith("Start".Localize().ToUpper());  					TextWidget startLabel = new TextWidget(startLabelFull' pointSize: 8 * pointSizeFactor);  					startLabel.TextColor = timeTextColor;    					string startTimeString = printTask.PrintStart.ToString("MMM d yyyy h:mm ") + printTask.PrintStart.ToString("tt").ToLower();  					TextWidget startDate = new TextWidget(startTimeString' pointSize: 12 * pointSizeFactor);  					startDate.TextColor = timeTextColor;    					startTimeContainer.AddChild(startLabel);  					startTimeContainer.AddChild(new HorizontalSpacer());  					startTimeContainer.AddChild(startDate);    					FlowLayoutWidget endTimeContainer = new FlowLayoutWidget();  					endTimeContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					endTimeContainer.Padding = new BorderDouble(0' 3);    					string endLabelFull = "{0}:".FormatWith("End".Localize().ToUpper());  					TextWidget endLabel = new TextWidget(endLabelFull' pointSize: 8 * pointSizeFactor);  					endLabel.TextColor = timeTextColor;    					string endTimeString;  					if (printTask.PrintEnd != DateTime.MinValue)  					{  						endTimeString = printTask.PrintEnd.ToString("MMM d yyyy h:mm ") + printTask.PrintEnd.ToString("tt").ToLower();  					}  					else  					{  						endTimeString = "Unknown".Localize();  					}    					TextWidget endDate = new TextWidget(endTimeString' pointSize: 12 * pointSizeFactor);  					endDate.TextColor = timeTextColor;    					endTimeContainer.AddChild(endLabel);  					endTimeContainer.AddChild(new HorizontalSpacer());  					endTimeContainer.AddChild(endDate);    					HorizontalLine horizontalLine = new HorizontalLine();  					horizontalLine.BackgroundColor = RGBA_Bytes.Gray;    					timestampColumn.AddChild(endTimeContainer);  					timestampColumn.AddChild(horizontalLine);  					timestampColumn.AddChild(startTimeContainer);    					timestampColumn.HAnchor = HAnchor.ParentLeftRight;  					timestampColumn.Padding = new BorderDouble(5' 0' 15' 0);    					primaryFlow.AddChild(timestampColumn);  				}    				mainContainer.AddChild(primaryContainer);  				mainContainer.AddChild(rightButtonOverlay);    				this.AddChild(mainContainer);  			}
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,C:\repos\MatterHackers_MatterControl\History\PrintHistoryListItem.cs,AddChildElements,The following statement contains a magic number: {  				GuiWidget indicator = new GuiWidget();  				indicator.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  				indicator.Width = 15;  				if (printTask.PrintComplete)  				{  					indicator.BackgroundColor = new RGBA_Bytes(38' 147' 51' 180);  				}  				else  				{  					indicator.BackgroundColor = new RGBA_Bytes(252' 209' 22' 180);  				}    				FlowLayoutWidget middleColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  				middleColumn.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				middleColumn.Padding = new BorderDouble(6' 3);  				{  					FlowLayoutWidget labelContainer = new FlowLayoutWidget();  					labelContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;    					string labelName = textInfo.ToTitleCase(printTask.PrintName);  					labelName = labelName.Replace('_'' ' ');  					partLabel = new TextWidget(labelName' pointSize: 15 * pointSizeFactor);  					partLabel.TextColor = WidgetTextColor;    					labelContainer.AddChild(partLabel);    					middleColumn.AddChild(labelContainer);  				}    				RGBA_Bytes timeTextColor = new RGBA_Bytes(34' 34' 34);    				FlowLayoutWidget buttonContainer = new FlowLayoutWidget();  				buttonContainer.Margin = new BorderDouble(0);  				buttonContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				{  					TextWidget statusIndicator = new TextWidget("Status: Completed".Localize()' pointSize: 8 * pointSizeFactor);  					statusIndicator.Margin = new BorderDouble(right: 3);  					//buttonContainer.AddChild(statusIndicator);    					string printTimeLabel = "Time".Localize().ToUpper();  					string printTimeLabelFull = string.Format("{0}: "' printTimeLabel);  					TextWidget timeLabel = new TextWidget(printTimeLabelFull' pointSize: 8 * pointSizeFactor);  					timeLabel.TextColor = timeTextColor;    					TextWidget timeIndicator;  					int minutes = printTask.PrintTimeMinutes;  					if (minutes < 0)  					{  						timeIndicator = new TextWidget("Unknown".Localize());  					}  					else if (minutes > 60)  					{  						timeIndicator = new TextWidget("{0}hrs {1}min".FormatWith(printTask.PrintTimeMinutes / 60' printTask.PrintTimeMinutes % 60)' pointSize: 12 * pointSizeFactor);  					}  					else  					{  						timeIndicator = new TextWidget(string.Format("{0}min"' printTask.PrintTimeMinutes)' pointSize: 12 * pointSizeFactor);  					}    					if (printTask.PercentDone > 0)  					{  						timeIndicator.AutoExpandBoundsToText = true;  						timeIndicator.Text += $" ({printTask.PercentDone:0.0}%)";  						  						if(printTask.RecoveryCount > 0)  						{  							if (printTask.RecoveryCount == 1)  							{  								timeIndicator.Text += " - " + "recovered once".Localize();  							}  							else  							{  								timeIndicator.Text += " - " + "recovered {0} times".FormatWith(printTask.RecoveryCount);  							}  						}  					}    					timeIndicator.Margin = new BorderDouble(right: 6);  					timeIndicator.TextColor = timeTextColor;    					buttonContainer.AddChild(timeLabel);  					buttonContainer.AddChild(timeIndicator);  					buttonContainer.AddChild(new HorizontalSpacer());  					middleColumn.AddChild(buttonContainer);  				}    				GuiWidget primaryContainer = new GuiWidget();  				primaryContainer.HAnchor = HAnchor.ParentLeftRight;  				primaryContainer.VAnchor = VAnchor.ParentBottomTop;    				FlowLayoutWidget primaryFlow = new FlowLayoutWidget(FlowDirection.LeftToRight);  				primaryFlow.HAnchor = HAnchor.ParentLeftRight;  				primaryFlow.VAnchor = VAnchor.ParentBottomTop;    				primaryFlow.AddChild(indicator);  				primaryFlow.AddChild(middleColumn);    				primaryContainer.AddChild(primaryFlow);    				rightButtonOverlay = new SlideWidget();  				rightButtonOverlay.VAnchor = VAnchor.ParentBottomTop;  				rightButtonOverlay.HAnchor = Agg.UI.HAnchor.ParentRight;  				rightButtonOverlay.Width = rightOverlayWidth;  				rightButtonOverlay.Visible = false;    				FlowLayoutWidget rightMiddleColumnContainer = new FlowLayoutWidget(FlowDirection.LeftToRight);  				rightMiddleColumnContainer.VAnchor = VAnchor.ParentBottomTop;  				{  					TextWidget viewLabel = new TextWidget("View".Localize());  					viewLabel.TextColor = RGBA_Bytes.White;  					viewLabel.VAnchor = VAnchor.ParentCenter;  					viewLabel.HAnchor = HAnchor.ParentCenter;    					FatFlatClickWidget viewButton = new FatFlatClickWidget(viewLabel);  					viewButton.VAnchor = VAnchor.ParentBottomTop;  					viewButton.BackgroundColor = ActiveTheme.Instance.SecondaryAccentColor;  					viewButton.Width = actionButtonSize;  					viewButton.Click += ViewButton_Click;  					rightMiddleColumnContainer.AddChild(viewButton);    					TextWidget printLabel = new TextWidget("Print".Localize());  					printLabel.TextColor = RGBA_Bytes.White;  					printLabel.VAnchor = VAnchor.ParentCenter;  					printLabel.HAnchor = HAnchor.ParentCenter;    					FatFlatClickWidget printButton = new FatFlatClickWidget(printLabel);  					printButton.VAnchor = VAnchor.ParentBottomTop;  					printButton.BackgroundColor = ActiveTheme.Instance.PrimaryAccentColor;  					printButton.Width = actionButtonSize;  					printButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							if (!PrinterCommunication.PrinterConnectionAndCommunication.Instance.PrintIsActive)  							{  								QueueData.Instance.AddItem(new PrintItemWrapper(printTask.PrintItemId)' 0);  								QueueData.Instance.SelectedIndex = 0;  								PrinterCommunication.PrinterConnectionAndCommunication.Instance.PrintActivePartIfPossible();  							}  							else  							{  								QueueData.Instance.AddItem(new PrintItemWrapper(printTask.PrintItemId));  							}  							rightButtonOverlay.SlideOut();  						});  					};  					rightMiddleColumnContainer.AddChild(printButton);  				}  				rightButtonOverlay.AddChild(rightMiddleColumnContainer);    				if (showTimestamp)  				{  					FlowLayoutWidget timestampColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  					timestampColumn.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  					timestampColumn.BackgroundColor = RGBA_Bytes.LightGray;  					timestampColumn.Padding = new BorderDouble(6' 0);    					FlowLayoutWidget startTimeContainer = new FlowLayoutWidget();  					startTimeContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					startTimeContainer.Padding = new BorderDouble(0' 3);    					string startLabelFull = "{0}:".FormatWith("Start".Localize().ToUpper());  					TextWidget startLabel = new TextWidget(startLabelFull' pointSize: 8 * pointSizeFactor);  					startLabel.TextColor = timeTextColor;    					string startTimeString = printTask.PrintStart.ToString("MMM d yyyy h:mm ") + printTask.PrintStart.ToString("tt").ToLower();  					TextWidget startDate = new TextWidget(startTimeString' pointSize: 12 * pointSizeFactor);  					startDate.TextColor = timeTextColor;    					startTimeContainer.AddChild(startLabel);  					startTimeContainer.AddChild(new HorizontalSpacer());  					startTimeContainer.AddChild(startDate);    					FlowLayoutWidget endTimeContainer = new FlowLayoutWidget();  					endTimeContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					endTimeContainer.Padding = new BorderDouble(0' 3);    					string endLabelFull = "{0}:".FormatWith("End".Localize().ToUpper());  					TextWidget endLabel = new TextWidget(endLabelFull' pointSize: 8 * pointSizeFactor);  					endLabel.TextColor = timeTextColor;    					string endTimeString;  					if (printTask.PrintEnd != DateTime.MinValue)  					{  						endTimeString = printTask.PrintEnd.ToString("MMM d yyyy h:mm ") + printTask.PrintEnd.ToString("tt").ToLower();  					}  					else  					{  						endTimeString = "Unknown".Localize();  					}    					TextWidget endDate = new TextWidget(endTimeString' pointSize: 12 * pointSizeFactor);  					endDate.TextColor = timeTextColor;    					endTimeContainer.AddChild(endLabel);  					endTimeContainer.AddChild(new HorizontalSpacer());  					endTimeContainer.AddChild(endDate);    					HorizontalLine horizontalLine = new HorizontalLine();  					horizontalLine.BackgroundColor = RGBA_Bytes.Gray;    					timestampColumn.AddChild(endTimeContainer);  					timestampColumn.AddChild(horizontalLine);  					timestampColumn.AddChild(startTimeContainer);    					timestampColumn.HAnchor = HAnchor.ParentLeftRight;  					timestampColumn.Padding = new BorderDouble(5' 0' 15' 0);    					primaryFlow.AddChild(timestampColumn);  				}    				mainContainer.AddChild(primaryContainer);  				mainContainer.AddChild(rightButtonOverlay);    				this.AddChild(mainContainer);  			}
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,C:\repos\MatterHackers_MatterControl\History\PrintHistoryListItem.cs,AddChildElements,The following statement contains a magic number: {  				GuiWidget indicator = new GuiWidget();  				indicator.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  				indicator.Width = 15;  				if (printTask.PrintComplete)  				{  					indicator.BackgroundColor = new RGBA_Bytes(38' 147' 51' 180);  				}  				else  				{  					indicator.BackgroundColor = new RGBA_Bytes(252' 209' 22' 180);  				}    				FlowLayoutWidget middleColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  				middleColumn.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				middleColumn.Padding = new BorderDouble(6' 3);  				{  					FlowLayoutWidget labelContainer = new FlowLayoutWidget();  					labelContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;    					string labelName = textInfo.ToTitleCase(printTask.PrintName);  					labelName = labelName.Replace('_'' ' ');  					partLabel = new TextWidget(labelName' pointSize: 15 * pointSizeFactor);  					partLabel.TextColor = WidgetTextColor;    					labelContainer.AddChild(partLabel);    					middleColumn.AddChild(labelContainer);  				}    				RGBA_Bytes timeTextColor = new RGBA_Bytes(34' 34' 34);    				FlowLayoutWidget buttonContainer = new FlowLayoutWidget();  				buttonContainer.Margin = new BorderDouble(0);  				buttonContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				{  					TextWidget statusIndicator = new TextWidget("Status: Completed".Localize()' pointSize: 8 * pointSizeFactor);  					statusIndicator.Margin = new BorderDouble(right: 3);  					//buttonContainer.AddChild(statusIndicator);    					string printTimeLabel = "Time".Localize().ToUpper();  					string printTimeLabelFull = string.Format("{0}: "' printTimeLabel);  					TextWidget timeLabel = new TextWidget(printTimeLabelFull' pointSize: 8 * pointSizeFactor);  					timeLabel.TextColor = timeTextColor;    					TextWidget timeIndicator;  					int minutes = printTask.PrintTimeMinutes;  					if (minutes < 0)  					{  						timeIndicator = new TextWidget("Unknown".Localize());  					}  					else if (minutes > 60)  					{  						timeIndicator = new TextWidget("{0}hrs {1}min".FormatWith(printTask.PrintTimeMinutes / 60' printTask.PrintTimeMinutes % 60)' pointSize: 12 * pointSizeFactor);  					}  					else  					{  						timeIndicator = new TextWidget(string.Format("{0}min"' printTask.PrintTimeMinutes)' pointSize: 12 * pointSizeFactor);  					}    					if (printTask.PercentDone > 0)  					{  						timeIndicator.AutoExpandBoundsToText = true;  						timeIndicator.Text += $" ({printTask.PercentDone:0.0}%)";  						  						if(printTask.RecoveryCount > 0)  						{  							if (printTask.RecoveryCount == 1)  							{  								timeIndicator.Text += " - " + "recovered once".Localize();  							}  							else  							{  								timeIndicator.Text += " - " + "recovered {0} times".FormatWith(printTask.RecoveryCount);  							}  						}  					}    					timeIndicator.Margin = new BorderDouble(right: 6);  					timeIndicator.TextColor = timeTextColor;    					buttonContainer.AddChild(timeLabel);  					buttonContainer.AddChild(timeIndicator);  					buttonContainer.AddChild(new HorizontalSpacer());  					middleColumn.AddChild(buttonContainer);  				}    				GuiWidget primaryContainer = new GuiWidget();  				primaryContainer.HAnchor = HAnchor.ParentLeftRight;  				primaryContainer.VAnchor = VAnchor.ParentBottomTop;    				FlowLayoutWidget primaryFlow = new FlowLayoutWidget(FlowDirection.LeftToRight);  				primaryFlow.HAnchor = HAnchor.ParentLeftRight;  				primaryFlow.VAnchor = VAnchor.ParentBottomTop;    				primaryFlow.AddChild(indicator);  				primaryFlow.AddChild(middleColumn);    				primaryContainer.AddChild(primaryFlow);    				rightButtonOverlay = new SlideWidget();  				rightButtonOverlay.VAnchor = VAnchor.ParentBottomTop;  				rightButtonOverlay.HAnchor = Agg.UI.HAnchor.ParentRight;  				rightButtonOverlay.Width = rightOverlayWidth;  				rightButtonOverlay.Visible = false;    				FlowLayoutWidget rightMiddleColumnContainer = new FlowLayoutWidget(FlowDirection.LeftToRight);  				rightMiddleColumnContainer.VAnchor = VAnchor.ParentBottomTop;  				{  					TextWidget viewLabel = new TextWidget("View".Localize());  					viewLabel.TextColor = RGBA_Bytes.White;  					viewLabel.VAnchor = VAnchor.ParentCenter;  					viewLabel.HAnchor = HAnchor.ParentCenter;    					FatFlatClickWidget viewButton = new FatFlatClickWidget(viewLabel);  					viewButton.VAnchor = VAnchor.ParentBottomTop;  					viewButton.BackgroundColor = ActiveTheme.Instance.SecondaryAccentColor;  					viewButton.Width = actionButtonSize;  					viewButton.Click += ViewButton_Click;  					rightMiddleColumnContainer.AddChild(viewButton);    					TextWidget printLabel = new TextWidget("Print".Localize());  					printLabel.TextColor = RGBA_Bytes.White;  					printLabel.VAnchor = VAnchor.ParentCenter;  					printLabel.HAnchor = HAnchor.ParentCenter;    					FatFlatClickWidget printButton = new FatFlatClickWidget(printLabel);  					printButton.VAnchor = VAnchor.ParentBottomTop;  					printButton.BackgroundColor = ActiveTheme.Instance.PrimaryAccentColor;  					printButton.Width = actionButtonSize;  					printButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							if (!PrinterCommunication.PrinterConnectionAndCommunication.Instance.PrintIsActive)  							{  								QueueData.Instance.AddItem(new PrintItemWrapper(printTask.PrintItemId)' 0);  								QueueData.Instance.SelectedIndex = 0;  								PrinterCommunication.PrinterConnectionAndCommunication.Instance.PrintActivePartIfPossible();  							}  							else  							{  								QueueData.Instance.AddItem(new PrintItemWrapper(printTask.PrintItemId));  							}  							rightButtonOverlay.SlideOut();  						});  					};  					rightMiddleColumnContainer.AddChild(printButton);  				}  				rightButtonOverlay.AddChild(rightMiddleColumnContainer);    				if (showTimestamp)  				{  					FlowLayoutWidget timestampColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  					timestampColumn.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  					timestampColumn.BackgroundColor = RGBA_Bytes.LightGray;  					timestampColumn.Padding = new BorderDouble(6' 0);    					FlowLayoutWidget startTimeContainer = new FlowLayoutWidget();  					startTimeContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					startTimeContainer.Padding = new BorderDouble(0' 3);    					string startLabelFull = "{0}:".FormatWith("Start".Localize().ToUpper());  					TextWidget startLabel = new TextWidget(startLabelFull' pointSize: 8 * pointSizeFactor);  					startLabel.TextColor = timeTextColor;    					string startTimeString = printTask.PrintStart.ToString("MMM d yyyy h:mm ") + printTask.PrintStart.ToString("tt").ToLower();  					TextWidget startDate = new TextWidget(startTimeString' pointSize: 12 * pointSizeFactor);  					startDate.TextColor = timeTextColor;    					startTimeContainer.AddChild(startLabel);  					startTimeContainer.AddChild(new HorizontalSpacer());  					startTimeContainer.AddChild(startDate);    					FlowLayoutWidget endTimeContainer = new FlowLayoutWidget();  					endTimeContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					endTimeContainer.Padding = new BorderDouble(0' 3);    					string endLabelFull = "{0}:".FormatWith("End".Localize().ToUpper());  					TextWidget endLabel = new TextWidget(endLabelFull' pointSize: 8 * pointSizeFactor);  					endLabel.TextColor = timeTextColor;    					string endTimeString;  					if (printTask.PrintEnd != DateTime.MinValue)  					{  						endTimeString = printTask.PrintEnd.ToString("MMM d yyyy h:mm ") + printTask.PrintEnd.ToString("tt").ToLower();  					}  					else  					{  						endTimeString = "Unknown".Localize();  					}    					TextWidget endDate = new TextWidget(endTimeString' pointSize: 12 * pointSizeFactor);  					endDate.TextColor = timeTextColor;    					endTimeContainer.AddChild(endLabel);  					endTimeContainer.AddChild(new HorizontalSpacer());  					endTimeContainer.AddChild(endDate);    					HorizontalLine horizontalLine = new HorizontalLine();  					horizontalLine.BackgroundColor = RGBA_Bytes.Gray;    					timestampColumn.AddChild(endTimeContainer);  					timestampColumn.AddChild(horizontalLine);  					timestampColumn.AddChild(startTimeContainer);    					timestampColumn.HAnchor = HAnchor.ParentLeftRight;  					timestampColumn.Padding = new BorderDouble(5' 0' 15' 0);    					primaryFlow.AddChild(timestampColumn);  				}    				mainContainer.AddChild(primaryContainer);  				mainContainer.AddChild(rightButtonOverlay);    				this.AddChild(mainContainer);  			}
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,C:\repos\MatterHackers_MatterControl\History\PrintHistoryListItem.cs,AddChildElements,The following statement contains a magic number: {  				GuiWidget indicator = new GuiWidget();  				indicator.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  				indicator.Width = 15;  				if (printTask.PrintComplete)  				{  					indicator.BackgroundColor = new RGBA_Bytes(38' 147' 51' 180);  				}  				else  				{  					indicator.BackgroundColor = new RGBA_Bytes(252' 209' 22' 180);  				}    				FlowLayoutWidget middleColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  				middleColumn.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				middleColumn.Padding = new BorderDouble(6' 3);  				{  					FlowLayoutWidget labelContainer = new FlowLayoutWidget();  					labelContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;    					string labelName = textInfo.ToTitleCase(printTask.PrintName);  					labelName = labelName.Replace('_'' ' ');  					partLabel = new TextWidget(labelName' pointSize: 15 * pointSizeFactor);  					partLabel.TextColor = WidgetTextColor;    					labelContainer.AddChild(partLabel);    					middleColumn.AddChild(labelContainer);  				}    				RGBA_Bytes timeTextColor = new RGBA_Bytes(34' 34' 34);    				FlowLayoutWidget buttonContainer = new FlowLayoutWidget();  				buttonContainer.Margin = new BorderDouble(0);  				buttonContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				{  					TextWidget statusIndicator = new TextWidget("Status: Completed".Localize()' pointSize: 8 * pointSizeFactor);  					statusIndicator.Margin = new BorderDouble(right: 3);  					//buttonContainer.AddChild(statusIndicator);    					string printTimeLabel = "Time".Localize().ToUpper();  					string printTimeLabelFull = string.Format("{0}: "' printTimeLabel);  					TextWidget timeLabel = new TextWidget(printTimeLabelFull' pointSize: 8 * pointSizeFactor);  					timeLabel.TextColor = timeTextColor;    					TextWidget timeIndicator;  					int minutes = printTask.PrintTimeMinutes;  					if (minutes < 0)  					{  						timeIndicator = new TextWidget("Unknown".Localize());  					}  					else if (minutes > 60)  					{  						timeIndicator = new TextWidget("{0}hrs {1}min".FormatWith(printTask.PrintTimeMinutes / 60' printTask.PrintTimeMinutes % 60)' pointSize: 12 * pointSizeFactor);  					}  					else  					{  						timeIndicator = new TextWidget(string.Format("{0}min"' printTask.PrintTimeMinutes)' pointSize: 12 * pointSizeFactor);  					}    					if (printTask.PercentDone > 0)  					{  						timeIndicator.AutoExpandBoundsToText = true;  						timeIndicator.Text += $" ({printTask.PercentDone:0.0}%)";  						  						if(printTask.RecoveryCount > 0)  						{  							if (printTask.RecoveryCount == 1)  							{  								timeIndicator.Text += " - " + "recovered once".Localize();  							}  							else  							{  								timeIndicator.Text += " - " + "recovered {0} times".FormatWith(printTask.RecoveryCount);  							}  						}  					}    					timeIndicator.Margin = new BorderDouble(right: 6);  					timeIndicator.TextColor = timeTextColor;    					buttonContainer.AddChild(timeLabel);  					buttonContainer.AddChild(timeIndicator);  					buttonContainer.AddChild(new HorizontalSpacer());  					middleColumn.AddChild(buttonContainer);  				}    				GuiWidget primaryContainer = new GuiWidget();  				primaryContainer.HAnchor = HAnchor.ParentLeftRight;  				primaryContainer.VAnchor = VAnchor.ParentBottomTop;    				FlowLayoutWidget primaryFlow = new FlowLayoutWidget(FlowDirection.LeftToRight);  				primaryFlow.HAnchor = HAnchor.ParentLeftRight;  				primaryFlow.VAnchor = VAnchor.ParentBottomTop;    				primaryFlow.AddChild(indicator);  				primaryFlow.AddChild(middleColumn);    				primaryContainer.AddChild(primaryFlow);    				rightButtonOverlay = new SlideWidget();  				rightButtonOverlay.VAnchor = VAnchor.ParentBottomTop;  				rightButtonOverlay.HAnchor = Agg.UI.HAnchor.ParentRight;  				rightButtonOverlay.Width = rightOverlayWidth;  				rightButtonOverlay.Visible = false;    				FlowLayoutWidget rightMiddleColumnContainer = new FlowLayoutWidget(FlowDirection.LeftToRight);  				rightMiddleColumnContainer.VAnchor = VAnchor.ParentBottomTop;  				{  					TextWidget viewLabel = new TextWidget("View".Localize());  					viewLabel.TextColor = RGBA_Bytes.White;  					viewLabel.VAnchor = VAnchor.ParentCenter;  					viewLabel.HAnchor = HAnchor.ParentCenter;    					FatFlatClickWidget viewButton = new FatFlatClickWidget(viewLabel);  					viewButton.VAnchor = VAnchor.ParentBottomTop;  					viewButton.BackgroundColor = ActiveTheme.Instance.SecondaryAccentColor;  					viewButton.Width = actionButtonSize;  					viewButton.Click += ViewButton_Click;  					rightMiddleColumnContainer.AddChild(viewButton);    					TextWidget printLabel = new TextWidget("Print".Localize());  					printLabel.TextColor = RGBA_Bytes.White;  					printLabel.VAnchor = VAnchor.ParentCenter;  					printLabel.HAnchor = HAnchor.ParentCenter;    					FatFlatClickWidget printButton = new FatFlatClickWidget(printLabel);  					printButton.VAnchor = VAnchor.ParentBottomTop;  					printButton.BackgroundColor = ActiveTheme.Instance.PrimaryAccentColor;  					printButton.Width = actionButtonSize;  					printButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							if (!PrinterCommunication.PrinterConnectionAndCommunication.Instance.PrintIsActive)  							{  								QueueData.Instance.AddItem(new PrintItemWrapper(printTask.PrintItemId)' 0);  								QueueData.Instance.SelectedIndex = 0;  								PrinterCommunication.PrinterConnectionAndCommunication.Instance.PrintActivePartIfPossible();  							}  							else  							{  								QueueData.Instance.AddItem(new PrintItemWrapper(printTask.PrintItemId));  							}  							rightButtonOverlay.SlideOut();  						});  					};  					rightMiddleColumnContainer.AddChild(printButton);  				}  				rightButtonOverlay.AddChild(rightMiddleColumnContainer);    				if (showTimestamp)  				{  					FlowLayoutWidget timestampColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  					timestampColumn.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  					timestampColumn.BackgroundColor = RGBA_Bytes.LightGray;  					timestampColumn.Padding = new BorderDouble(6' 0);    					FlowLayoutWidget startTimeContainer = new FlowLayoutWidget();  					startTimeContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					startTimeContainer.Padding = new BorderDouble(0' 3);    					string startLabelFull = "{0}:".FormatWith("Start".Localize().ToUpper());  					TextWidget startLabel = new TextWidget(startLabelFull' pointSize: 8 * pointSizeFactor);  					startLabel.TextColor = timeTextColor;    					string startTimeString = printTask.PrintStart.ToString("MMM d yyyy h:mm ") + printTask.PrintStart.ToString("tt").ToLower();  					TextWidget startDate = new TextWidget(startTimeString' pointSize: 12 * pointSizeFactor);  					startDate.TextColor = timeTextColor;    					startTimeContainer.AddChild(startLabel);  					startTimeContainer.AddChild(new HorizontalSpacer());  					startTimeContainer.AddChild(startDate);    					FlowLayoutWidget endTimeContainer = new FlowLayoutWidget();  					endTimeContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					endTimeContainer.Padding = new BorderDouble(0' 3);    					string endLabelFull = "{0}:".FormatWith("End".Localize().ToUpper());  					TextWidget endLabel = new TextWidget(endLabelFull' pointSize: 8 * pointSizeFactor);  					endLabel.TextColor = timeTextColor;    					string endTimeString;  					if (printTask.PrintEnd != DateTime.MinValue)  					{  						endTimeString = printTask.PrintEnd.ToString("MMM d yyyy h:mm ") + printTask.PrintEnd.ToString("tt").ToLower();  					}  					else  					{  						endTimeString = "Unknown".Localize();  					}    					TextWidget endDate = new TextWidget(endTimeString' pointSize: 12 * pointSizeFactor);  					endDate.TextColor = timeTextColor;    					endTimeContainer.AddChild(endLabel);  					endTimeContainer.AddChild(new HorizontalSpacer());  					endTimeContainer.AddChild(endDate);    					HorizontalLine horizontalLine = new HorizontalLine();  					horizontalLine.BackgroundColor = RGBA_Bytes.Gray;    					timestampColumn.AddChild(endTimeContainer);  					timestampColumn.AddChild(horizontalLine);  					timestampColumn.AddChild(startTimeContainer);    					timestampColumn.HAnchor = HAnchor.ParentLeftRight;  					timestampColumn.Padding = new BorderDouble(5' 0' 15' 0);    					primaryFlow.AddChild(timestampColumn);  				}    				mainContainer.AddChild(primaryContainer);  				mainContainer.AddChild(rightButtonOverlay);    				this.AddChild(mainContainer);  			}
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,C:\repos\MatterHackers_MatterControl\History\PrintHistoryListItem.cs,AddChildElements,The following statement contains a magic number: {  				GuiWidget indicator = new GuiWidget();  				indicator.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  				indicator.Width = 15;  				if (printTask.PrintComplete)  				{  					indicator.BackgroundColor = new RGBA_Bytes(38' 147' 51' 180);  				}  				else  				{  					indicator.BackgroundColor = new RGBA_Bytes(252' 209' 22' 180);  				}    				FlowLayoutWidget middleColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  				middleColumn.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				middleColumn.Padding = new BorderDouble(6' 3);  				{  					FlowLayoutWidget labelContainer = new FlowLayoutWidget();  					labelContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;    					string labelName = textInfo.ToTitleCase(printTask.PrintName);  					labelName = labelName.Replace('_'' ' ');  					partLabel = new TextWidget(labelName' pointSize: 15 * pointSizeFactor);  					partLabel.TextColor = WidgetTextColor;    					labelContainer.AddChild(partLabel);    					middleColumn.AddChild(labelContainer);  				}    				RGBA_Bytes timeTextColor = new RGBA_Bytes(34' 34' 34);    				FlowLayoutWidget buttonContainer = new FlowLayoutWidget();  				buttonContainer.Margin = new BorderDouble(0);  				buttonContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				{  					TextWidget statusIndicator = new TextWidget("Status: Completed".Localize()' pointSize: 8 * pointSizeFactor);  					statusIndicator.Margin = new BorderDouble(right: 3);  					//buttonContainer.AddChild(statusIndicator);    					string printTimeLabel = "Time".Localize().ToUpper();  					string printTimeLabelFull = string.Format("{0}: "' printTimeLabel);  					TextWidget timeLabel = new TextWidget(printTimeLabelFull' pointSize: 8 * pointSizeFactor);  					timeLabel.TextColor = timeTextColor;    					TextWidget timeIndicator;  					int minutes = printTask.PrintTimeMinutes;  					if (minutes < 0)  					{  						timeIndicator = new TextWidget("Unknown".Localize());  					}  					else if (minutes > 60)  					{  						timeIndicator = new TextWidget("{0}hrs {1}min".FormatWith(printTask.PrintTimeMinutes / 60' printTask.PrintTimeMinutes % 60)' pointSize: 12 * pointSizeFactor);  					}  					else  					{  						timeIndicator = new TextWidget(string.Format("{0}min"' printTask.PrintTimeMinutes)' pointSize: 12 * pointSizeFactor);  					}    					if (printTask.PercentDone > 0)  					{  						timeIndicator.AutoExpandBoundsToText = true;  						timeIndicator.Text += $" ({printTask.PercentDone:0.0}%)";  						  						if(printTask.RecoveryCount > 0)  						{  							if (printTask.RecoveryCount == 1)  							{  								timeIndicator.Text += " - " + "recovered once".Localize();  							}  							else  							{  								timeIndicator.Text += " - " + "recovered {0} times".FormatWith(printTask.RecoveryCount);  							}  						}  					}    					timeIndicator.Margin = new BorderDouble(right: 6);  					timeIndicator.TextColor = timeTextColor;    					buttonContainer.AddChild(timeLabel);  					buttonContainer.AddChild(timeIndicator);  					buttonContainer.AddChild(new HorizontalSpacer());  					middleColumn.AddChild(buttonContainer);  				}    				GuiWidget primaryContainer = new GuiWidget();  				primaryContainer.HAnchor = HAnchor.ParentLeftRight;  				primaryContainer.VAnchor = VAnchor.ParentBottomTop;    				FlowLayoutWidget primaryFlow = new FlowLayoutWidget(FlowDirection.LeftToRight);  				primaryFlow.HAnchor = HAnchor.ParentLeftRight;  				primaryFlow.VAnchor = VAnchor.ParentBottomTop;    				primaryFlow.AddChild(indicator);  				primaryFlow.AddChild(middleColumn);    				primaryContainer.AddChild(primaryFlow);    				rightButtonOverlay = new SlideWidget();  				rightButtonOverlay.VAnchor = VAnchor.ParentBottomTop;  				rightButtonOverlay.HAnchor = Agg.UI.HAnchor.ParentRight;  				rightButtonOverlay.Width = rightOverlayWidth;  				rightButtonOverlay.Visible = false;    				FlowLayoutWidget rightMiddleColumnContainer = new FlowLayoutWidget(FlowDirection.LeftToRight);  				rightMiddleColumnContainer.VAnchor = VAnchor.ParentBottomTop;  				{  					TextWidget viewLabel = new TextWidget("View".Localize());  					viewLabel.TextColor = RGBA_Bytes.White;  					viewLabel.VAnchor = VAnchor.ParentCenter;  					viewLabel.HAnchor = HAnchor.ParentCenter;    					FatFlatClickWidget viewButton = new FatFlatClickWidget(viewLabel);  					viewButton.VAnchor = VAnchor.ParentBottomTop;  					viewButton.BackgroundColor = ActiveTheme.Instance.SecondaryAccentColor;  					viewButton.Width = actionButtonSize;  					viewButton.Click += ViewButton_Click;  					rightMiddleColumnContainer.AddChild(viewButton);    					TextWidget printLabel = new TextWidget("Print".Localize());  					printLabel.TextColor = RGBA_Bytes.White;  					printLabel.VAnchor = VAnchor.ParentCenter;  					printLabel.HAnchor = HAnchor.ParentCenter;    					FatFlatClickWidget printButton = new FatFlatClickWidget(printLabel);  					printButton.VAnchor = VAnchor.ParentBottomTop;  					printButton.BackgroundColor = ActiveTheme.Instance.PrimaryAccentColor;  					printButton.Width = actionButtonSize;  					printButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							if (!PrinterCommunication.PrinterConnectionAndCommunication.Instance.PrintIsActive)  							{  								QueueData.Instance.AddItem(new PrintItemWrapper(printTask.PrintItemId)' 0);  								QueueData.Instance.SelectedIndex = 0;  								PrinterCommunication.PrinterConnectionAndCommunication.Instance.PrintActivePartIfPossible();  							}  							else  							{  								QueueData.Instance.AddItem(new PrintItemWrapper(printTask.PrintItemId));  							}  							rightButtonOverlay.SlideOut();  						});  					};  					rightMiddleColumnContainer.AddChild(printButton);  				}  				rightButtonOverlay.AddChild(rightMiddleColumnContainer);    				if (showTimestamp)  				{  					FlowLayoutWidget timestampColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  					timestampColumn.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  					timestampColumn.BackgroundColor = RGBA_Bytes.LightGray;  					timestampColumn.Padding = new BorderDouble(6' 0);    					FlowLayoutWidget startTimeContainer = new FlowLayoutWidget();  					startTimeContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					startTimeContainer.Padding = new BorderDouble(0' 3);    					string startLabelFull = "{0}:".FormatWith("Start".Localize().ToUpper());  					TextWidget startLabel = new TextWidget(startLabelFull' pointSize: 8 * pointSizeFactor);  					startLabel.TextColor = timeTextColor;    					string startTimeString = printTask.PrintStart.ToString("MMM d yyyy h:mm ") + printTask.PrintStart.ToString("tt").ToLower();  					TextWidget startDate = new TextWidget(startTimeString' pointSize: 12 * pointSizeFactor);  					startDate.TextColor = timeTextColor;    					startTimeContainer.AddChild(startLabel);  					startTimeContainer.AddChild(new HorizontalSpacer());  					startTimeContainer.AddChild(startDate);    					FlowLayoutWidget endTimeContainer = new FlowLayoutWidget();  					endTimeContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					endTimeContainer.Padding = new BorderDouble(0' 3);    					string endLabelFull = "{0}:".FormatWith("End".Localize().ToUpper());  					TextWidget endLabel = new TextWidget(endLabelFull' pointSize: 8 * pointSizeFactor);  					endLabel.TextColor = timeTextColor;    					string endTimeString;  					if (printTask.PrintEnd != DateTime.MinValue)  					{  						endTimeString = printTask.PrintEnd.ToString("MMM d yyyy h:mm ") + printTask.PrintEnd.ToString("tt").ToLower();  					}  					else  					{  						endTimeString = "Unknown".Localize();  					}    					TextWidget endDate = new TextWidget(endTimeString' pointSize: 12 * pointSizeFactor);  					endDate.TextColor = timeTextColor;    					endTimeContainer.AddChild(endLabel);  					endTimeContainer.AddChild(new HorizontalSpacer());  					endTimeContainer.AddChild(endDate);    					HorizontalLine horizontalLine = new HorizontalLine();  					horizontalLine.BackgroundColor = RGBA_Bytes.Gray;    					timestampColumn.AddChild(endTimeContainer);  					timestampColumn.AddChild(horizontalLine);  					timestampColumn.AddChild(startTimeContainer);    					timestampColumn.HAnchor = HAnchor.ParentLeftRight;  					timestampColumn.Padding = new BorderDouble(5' 0' 15' 0);    					primaryFlow.AddChild(timestampColumn);  				}    				mainContainer.AddChild(primaryContainer);  				mainContainer.AddChild(rightButtonOverlay);    				this.AddChild(mainContainer);  			}
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,C:\repos\MatterHackers_MatterControl\History\PrintHistoryListItem.cs,AddChildElements,The following statement contains a magic number: {  				GuiWidget indicator = new GuiWidget();  				indicator.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  				indicator.Width = 15;  				if (printTask.PrintComplete)  				{  					indicator.BackgroundColor = new RGBA_Bytes(38' 147' 51' 180);  				}  				else  				{  					indicator.BackgroundColor = new RGBA_Bytes(252' 209' 22' 180);  				}    				FlowLayoutWidget middleColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  				middleColumn.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				middleColumn.Padding = new BorderDouble(6' 3);  				{  					FlowLayoutWidget labelContainer = new FlowLayoutWidget();  					labelContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;    					string labelName = textInfo.ToTitleCase(printTask.PrintName);  					labelName = labelName.Replace('_'' ' ');  					partLabel = new TextWidget(labelName' pointSize: 15 * pointSizeFactor);  					partLabel.TextColor = WidgetTextColor;    					labelContainer.AddChild(partLabel);    					middleColumn.AddChild(labelContainer);  				}    				RGBA_Bytes timeTextColor = new RGBA_Bytes(34' 34' 34);    				FlowLayoutWidget buttonContainer = new FlowLayoutWidget();  				buttonContainer.Margin = new BorderDouble(0);  				buttonContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				{  					TextWidget statusIndicator = new TextWidget("Status: Completed".Localize()' pointSize: 8 * pointSizeFactor);  					statusIndicator.Margin = new BorderDouble(right: 3);  					//buttonContainer.AddChild(statusIndicator);    					string printTimeLabel = "Time".Localize().ToUpper();  					string printTimeLabelFull = string.Format("{0}: "' printTimeLabel);  					TextWidget timeLabel = new TextWidget(printTimeLabelFull' pointSize: 8 * pointSizeFactor);  					timeLabel.TextColor = timeTextColor;    					TextWidget timeIndicator;  					int minutes = printTask.PrintTimeMinutes;  					if (minutes < 0)  					{  						timeIndicator = new TextWidget("Unknown".Localize());  					}  					else if (minutes > 60)  					{  						timeIndicator = new TextWidget("{0}hrs {1}min".FormatWith(printTask.PrintTimeMinutes / 60' printTask.PrintTimeMinutes % 60)' pointSize: 12 * pointSizeFactor);  					}  					else  					{  						timeIndicator = new TextWidget(string.Format("{0}min"' printTask.PrintTimeMinutes)' pointSize: 12 * pointSizeFactor);  					}    					if (printTask.PercentDone > 0)  					{  						timeIndicator.AutoExpandBoundsToText = true;  						timeIndicator.Text += $" ({printTask.PercentDone:0.0}%)";  						  						if(printTask.RecoveryCount > 0)  						{  							if (printTask.RecoveryCount == 1)  							{  								timeIndicator.Text += " - " + "recovered once".Localize();  							}  							else  							{  								timeIndicator.Text += " - " + "recovered {0} times".FormatWith(printTask.RecoveryCount);  							}  						}  					}    					timeIndicator.Margin = new BorderDouble(right: 6);  					timeIndicator.TextColor = timeTextColor;    					buttonContainer.AddChild(timeLabel);  					buttonContainer.AddChild(timeIndicator);  					buttonContainer.AddChild(new HorizontalSpacer());  					middleColumn.AddChild(buttonContainer);  				}    				GuiWidget primaryContainer = new GuiWidget();  				primaryContainer.HAnchor = HAnchor.ParentLeftRight;  				primaryContainer.VAnchor = VAnchor.ParentBottomTop;    				FlowLayoutWidget primaryFlow = new FlowLayoutWidget(FlowDirection.LeftToRight);  				primaryFlow.HAnchor = HAnchor.ParentLeftRight;  				primaryFlow.VAnchor = VAnchor.ParentBottomTop;    				primaryFlow.AddChild(indicator);  				primaryFlow.AddChild(middleColumn);    				primaryContainer.AddChild(primaryFlow);    				rightButtonOverlay = new SlideWidget();  				rightButtonOverlay.VAnchor = VAnchor.ParentBottomTop;  				rightButtonOverlay.HAnchor = Agg.UI.HAnchor.ParentRight;  				rightButtonOverlay.Width = rightOverlayWidth;  				rightButtonOverlay.Visible = false;    				FlowLayoutWidget rightMiddleColumnContainer = new FlowLayoutWidget(FlowDirection.LeftToRight);  				rightMiddleColumnContainer.VAnchor = VAnchor.ParentBottomTop;  				{  					TextWidget viewLabel = new TextWidget("View".Localize());  					viewLabel.TextColor = RGBA_Bytes.White;  					viewLabel.VAnchor = VAnchor.ParentCenter;  					viewLabel.HAnchor = HAnchor.ParentCenter;    					FatFlatClickWidget viewButton = new FatFlatClickWidget(viewLabel);  					viewButton.VAnchor = VAnchor.ParentBottomTop;  					viewButton.BackgroundColor = ActiveTheme.Instance.SecondaryAccentColor;  					viewButton.Width = actionButtonSize;  					viewButton.Click += ViewButton_Click;  					rightMiddleColumnContainer.AddChild(viewButton);    					TextWidget printLabel = new TextWidget("Print".Localize());  					printLabel.TextColor = RGBA_Bytes.White;  					printLabel.VAnchor = VAnchor.ParentCenter;  					printLabel.HAnchor = HAnchor.ParentCenter;    					FatFlatClickWidget printButton = new FatFlatClickWidget(printLabel);  					printButton.VAnchor = VAnchor.ParentBottomTop;  					printButton.BackgroundColor = ActiveTheme.Instance.PrimaryAccentColor;  					printButton.Width = actionButtonSize;  					printButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							if (!PrinterCommunication.PrinterConnectionAndCommunication.Instance.PrintIsActive)  							{  								QueueData.Instance.AddItem(new PrintItemWrapper(printTask.PrintItemId)' 0);  								QueueData.Instance.SelectedIndex = 0;  								PrinterCommunication.PrinterConnectionAndCommunication.Instance.PrintActivePartIfPossible();  							}  							else  							{  								QueueData.Instance.AddItem(new PrintItemWrapper(printTask.PrintItemId));  							}  							rightButtonOverlay.SlideOut();  						});  					};  					rightMiddleColumnContainer.AddChild(printButton);  				}  				rightButtonOverlay.AddChild(rightMiddleColumnContainer);    				if (showTimestamp)  				{  					FlowLayoutWidget timestampColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  					timestampColumn.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  					timestampColumn.BackgroundColor = RGBA_Bytes.LightGray;  					timestampColumn.Padding = new BorderDouble(6' 0);    					FlowLayoutWidget startTimeContainer = new FlowLayoutWidget();  					startTimeContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					startTimeContainer.Padding = new BorderDouble(0' 3);    					string startLabelFull = "{0}:".FormatWith("Start".Localize().ToUpper());  					TextWidget startLabel = new TextWidget(startLabelFull' pointSize: 8 * pointSizeFactor);  					startLabel.TextColor = timeTextColor;    					string startTimeString = printTask.PrintStart.ToString("MMM d yyyy h:mm ") + printTask.PrintStart.ToString("tt").ToLower();  					TextWidget startDate = new TextWidget(startTimeString' pointSize: 12 * pointSizeFactor);  					startDate.TextColor = timeTextColor;    					startTimeContainer.AddChild(startLabel);  					startTimeContainer.AddChild(new HorizontalSpacer());  					startTimeContainer.AddChild(startDate);    					FlowLayoutWidget endTimeContainer = new FlowLayoutWidget();  					endTimeContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					endTimeContainer.Padding = new BorderDouble(0' 3);    					string endLabelFull = "{0}:".FormatWith("End".Localize().ToUpper());  					TextWidget endLabel = new TextWidget(endLabelFull' pointSize: 8 * pointSizeFactor);  					endLabel.TextColor = timeTextColor;    					string endTimeString;  					if (printTask.PrintEnd != DateTime.MinValue)  					{  						endTimeString = printTask.PrintEnd.ToString("MMM d yyyy h:mm ") + printTask.PrintEnd.ToString("tt").ToLower();  					}  					else  					{  						endTimeString = "Unknown".Localize();  					}    					TextWidget endDate = new TextWidget(endTimeString' pointSize: 12 * pointSizeFactor);  					endDate.TextColor = timeTextColor;    					endTimeContainer.AddChild(endLabel);  					endTimeContainer.AddChild(new HorizontalSpacer());  					endTimeContainer.AddChild(endDate);    					HorizontalLine horizontalLine = new HorizontalLine();  					horizontalLine.BackgroundColor = RGBA_Bytes.Gray;    					timestampColumn.AddChild(endTimeContainer);  					timestampColumn.AddChild(horizontalLine);  					timestampColumn.AddChild(startTimeContainer);    					timestampColumn.HAnchor = HAnchor.ParentLeftRight;  					timestampColumn.Padding = new BorderDouble(5' 0' 15' 0);    					primaryFlow.AddChild(timestampColumn);  				}    				mainContainer.AddChild(primaryContainer);  				mainContainer.AddChild(rightButtonOverlay);    				this.AddChild(mainContainer);  			}
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,C:\repos\MatterHackers_MatterControl\History\PrintHistoryListItem.cs,AddChildElements,The following statement contains a magic number: {  				GuiWidget indicator = new GuiWidget();  				indicator.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  				indicator.Width = 15;  				if (printTask.PrintComplete)  				{  					indicator.BackgroundColor = new RGBA_Bytes(38' 147' 51' 180);  				}  				else  				{  					indicator.BackgroundColor = new RGBA_Bytes(252' 209' 22' 180);  				}    				FlowLayoutWidget middleColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  				middleColumn.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				middleColumn.Padding = new BorderDouble(6' 3);  				{  					FlowLayoutWidget labelContainer = new FlowLayoutWidget();  					labelContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;    					string labelName = textInfo.ToTitleCase(printTask.PrintName);  					labelName = labelName.Replace('_'' ' ');  					partLabel = new TextWidget(labelName' pointSize: 15 * pointSizeFactor);  					partLabel.TextColor = WidgetTextColor;    					labelContainer.AddChild(partLabel);    					middleColumn.AddChild(labelContainer);  				}    				RGBA_Bytes timeTextColor = new RGBA_Bytes(34' 34' 34);    				FlowLayoutWidget buttonContainer = new FlowLayoutWidget();  				buttonContainer.Margin = new BorderDouble(0);  				buttonContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				{  					TextWidget statusIndicator = new TextWidget("Status: Completed".Localize()' pointSize: 8 * pointSizeFactor);  					statusIndicator.Margin = new BorderDouble(right: 3);  					//buttonContainer.AddChild(statusIndicator);    					string printTimeLabel = "Time".Localize().ToUpper();  					string printTimeLabelFull = string.Format("{0}: "' printTimeLabel);  					TextWidget timeLabel = new TextWidget(printTimeLabelFull' pointSize: 8 * pointSizeFactor);  					timeLabel.TextColor = timeTextColor;    					TextWidget timeIndicator;  					int minutes = printTask.PrintTimeMinutes;  					if (minutes < 0)  					{  						timeIndicator = new TextWidget("Unknown".Localize());  					}  					else if (minutes > 60)  					{  						timeIndicator = new TextWidget("{0}hrs {1}min".FormatWith(printTask.PrintTimeMinutes / 60' printTask.PrintTimeMinutes % 60)' pointSize: 12 * pointSizeFactor);  					}  					else  					{  						timeIndicator = new TextWidget(string.Format("{0}min"' printTask.PrintTimeMinutes)' pointSize: 12 * pointSizeFactor);  					}    					if (printTask.PercentDone > 0)  					{  						timeIndicator.AutoExpandBoundsToText = true;  						timeIndicator.Text += $" ({printTask.PercentDone:0.0}%)";  						  						if(printTask.RecoveryCount > 0)  						{  							if (printTask.RecoveryCount == 1)  							{  								timeIndicator.Text += " - " + "recovered once".Localize();  							}  							else  							{  								timeIndicator.Text += " - " + "recovered {0} times".FormatWith(printTask.RecoveryCount);  							}  						}  					}    					timeIndicator.Margin = new BorderDouble(right: 6);  					timeIndicator.TextColor = timeTextColor;    					buttonContainer.AddChild(timeLabel);  					buttonContainer.AddChild(timeIndicator);  					buttonContainer.AddChild(new HorizontalSpacer());  					middleColumn.AddChild(buttonContainer);  				}    				GuiWidget primaryContainer = new GuiWidget();  				primaryContainer.HAnchor = HAnchor.ParentLeftRight;  				primaryContainer.VAnchor = VAnchor.ParentBottomTop;    				FlowLayoutWidget primaryFlow = new FlowLayoutWidget(FlowDirection.LeftToRight);  				primaryFlow.HAnchor = HAnchor.ParentLeftRight;  				primaryFlow.VAnchor = VAnchor.ParentBottomTop;    				primaryFlow.AddChild(indicator);  				primaryFlow.AddChild(middleColumn);    				primaryContainer.AddChild(primaryFlow);    				rightButtonOverlay = new SlideWidget();  				rightButtonOverlay.VAnchor = VAnchor.ParentBottomTop;  				rightButtonOverlay.HAnchor = Agg.UI.HAnchor.ParentRight;  				rightButtonOverlay.Width = rightOverlayWidth;  				rightButtonOverlay.Visible = false;    				FlowLayoutWidget rightMiddleColumnContainer = new FlowLayoutWidget(FlowDirection.LeftToRight);  				rightMiddleColumnContainer.VAnchor = VAnchor.ParentBottomTop;  				{  					TextWidget viewLabel = new TextWidget("View".Localize());  					viewLabel.TextColor = RGBA_Bytes.White;  					viewLabel.VAnchor = VAnchor.ParentCenter;  					viewLabel.HAnchor = HAnchor.ParentCenter;    					FatFlatClickWidget viewButton = new FatFlatClickWidget(viewLabel);  					viewButton.VAnchor = VAnchor.ParentBottomTop;  					viewButton.BackgroundColor = ActiveTheme.Instance.SecondaryAccentColor;  					viewButton.Width = actionButtonSize;  					viewButton.Click += ViewButton_Click;  					rightMiddleColumnContainer.AddChild(viewButton);    					TextWidget printLabel = new TextWidget("Print".Localize());  					printLabel.TextColor = RGBA_Bytes.White;  					printLabel.VAnchor = VAnchor.ParentCenter;  					printLabel.HAnchor = HAnchor.ParentCenter;    					FatFlatClickWidget printButton = new FatFlatClickWidget(printLabel);  					printButton.VAnchor = VAnchor.ParentBottomTop;  					printButton.BackgroundColor = ActiveTheme.Instance.PrimaryAccentColor;  					printButton.Width = actionButtonSize;  					printButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							if (!PrinterCommunication.PrinterConnectionAndCommunication.Instance.PrintIsActive)  							{  								QueueData.Instance.AddItem(new PrintItemWrapper(printTask.PrintItemId)' 0);  								QueueData.Instance.SelectedIndex = 0;  								PrinterCommunication.PrinterConnectionAndCommunication.Instance.PrintActivePartIfPossible();  							}  							else  							{  								QueueData.Instance.AddItem(new PrintItemWrapper(printTask.PrintItemId));  							}  							rightButtonOverlay.SlideOut();  						});  					};  					rightMiddleColumnContainer.AddChild(printButton);  				}  				rightButtonOverlay.AddChild(rightMiddleColumnContainer);    				if (showTimestamp)  				{  					FlowLayoutWidget timestampColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  					timestampColumn.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  					timestampColumn.BackgroundColor = RGBA_Bytes.LightGray;  					timestampColumn.Padding = new BorderDouble(6' 0);    					FlowLayoutWidget startTimeContainer = new FlowLayoutWidget();  					startTimeContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					startTimeContainer.Padding = new BorderDouble(0' 3);    					string startLabelFull = "{0}:".FormatWith("Start".Localize().ToUpper());  					TextWidget startLabel = new TextWidget(startLabelFull' pointSize: 8 * pointSizeFactor);  					startLabel.TextColor = timeTextColor;    					string startTimeString = printTask.PrintStart.ToString("MMM d yyyy h:mm ") + printTask.PrintStart.ToString("tt").ToLower();  					TextWidget startDate = new TextWidget(startTimeString' pointSize: 12 * pointSizeFactor);  					startDate.TextColor = timeTextColor;    					startTimeContainer.AddChild(startLabel);  					startTimeContainer.AddChild(new HorizontalSpacer());  					startTimeContainer.AddChild(startDate);    					FlowLayoutWidget endTimeContainer = new FlowLayoutWidget();  					endTimeContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					endTimeContainer.Padding = new BorderDouble(0' 3);    					string endLabelFull = "{0}:".FormatWith("End".Localize().ToUpper());  					TextWidget endLabel = new TextWidget(endLabelFull' pointSize: 8 * pointSizeFactor);  					endLabel.TextColor = timeTextColor;    					string endTimeString;  					if (printTask.PrintEnd != DateTime.MinValue)  					{  						endTimeString = printTask.PrintEnd.ToString("MMM d yyyy h:mm ") + printTask.PrintEnd.ToString("tt").ToLower();  					}  					else  					{  						endTimeString = "Unknown".Localize();  					}    					TextWidget endDate = new TextWidget(endTimeString' pointSize: 12 * pointSizeFactor);  					endDate.TextColor = timeTextColor;    					endTimeContainer.AddChild(endLabel);  					endTimeContainer.AddChild(new HorizontalSpacer());  					endTimeContainer.AddChild(endDate);    					HorizontalLine horizontalLine = new HorizontalLine();  					horizontalLine.BackgroundColor = RGBA_Bytes.Gray;    					timestampColumn.AddChild(endTimeContainer);  					timestampColumn.AddChild(horizontalLine);  					timestampColumn.AddChild(startTimeContainer);    					timestampColumn.HAnchor = HAnchor.ParentLeftRight;  					timestampColumn.Padding = new BorderDouble(5' 0' 15' 0);    					primaryFlow.AddChild(timestampColumn);  				}    				mainContainer.AddChild(primaryContainer);  				mainContainer.AddChild(rightButtonOverlay);    				this.AddChild(mainContainer);  			}
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,C:\repos\MatterHackers_MatterControl\History\PrintHistoryListItem.cs,AddChildElements,The following statement contains a magic number: {  				GuiWidget indicator = new GuiWidget();  				indicator.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  				indicator.Width = 15;  				if (printTask.PrintComplete)  				{  					indicator.BackgroundColor = new RGBA_Bytes(38' 147' 51' 180);  				}  				else  				{  					indicator.BackgroundColor = new RGBA_Bytes(252' 209' 22' 180);  				}    				FlowLayoutWidget middleColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  				middleColumn.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				middleColumn.Padding = new BorderDouble(6' 3);  				{  					FlowLayoutWidget labelContainer = new FlowLayoutWidget();  					labelContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;    					string labelName = textInfo.ToTitleCase(printTask.PrintName);  					labelName = labelName.Replace('_'' ' ');  					partLabel = new TextWidget(labelName' pointSize: 15 * pointSizeFactor);  					partLabel.TextColor = WidgetTextColor;    					labelContainer.AddChild(partLabel);    					middleColumn.AddChild(labelContainer);  				}    				RGBA_Bytes timeTextColor = new RGBA_Bytes(34' 34' 34);    				FlowLayoutWidget buttonContainer = new FlowLayoutWidget();  				buttonContainer.Margin = new BorderDouble(0);  				buttonContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				{  					TextWidget statusIndicator = new TextWidget("Status: Completed".Localize()' pointSize: 8 * pointSizeFactor);  					statusIndicator.Margin = new BorderDouble(right: 3);  					//buttonContainer.AddChild(statusIndicator);    					string printTimeLabel = "Time".Localize().ToUpper();  					string printTimeLabelFull = string.Format("{0}: "' printTimeLabel);  					TextWidget timeLabel = new TextWidget(printTimeLabelFull' pointSize: 8 * pointSizeFactor);  					timeLabel.TextColor = timeTextColor;    					TextWidget timeIndicator;  					int minutes = printTask.PrintTimeMinutes;  					if (minutes < 0)  					{  						timeIndicator = new TextWidget("Unknown".Localize());  					}  					else if (minutes > 60)  					{  						timeIndicator = new TextWidget("{0}hrs {1}min".FormatWith(printTask.PrintTimeMinutes / 60' printTask.PrintTimeMinutes % 60)' pointSize: 12 * pointSizeFactor);  					}  					else  					{  						timeIndicator = new TextWidget(string.Format("{0}min"' printTask.PrintTimeMinutes)' pointSize: 12 * pointSizeFactor);  					}    					if (printTask.PercentDone > 0)  					{  						timeIndicator.AutoExpandBoundsToText = true;  						timeIndicator.Text += $" ({printTask.PercentDone:0.0}%)";  						  						if(printTask.RecoveryCount > 0)  						{  							if (printTask.RecoveryCount == 1)  							{  								timeIndicator.Text += " - " + "recovered once".Localize();  							}  							else  							{  								timeIndicator.Text += " - " + "recovered {0} times".FormatWith(printTask.RecoveryCount);  							}  						}  					}    					timeIndicator.Margin = new BorderDouble(right: 6);  					timeIndicator.TextColor = timeTextColor;    					buttonContainer.AddChild(timeLabel);  					buttonContainer.AddChild(timeIndicator);  					buttonContainer.AddChild(new HorizontalSpacer());  					middleColumn.AddChild(buttonContainer);  				}    				GuiWidget primaryContainer = new GuiWidget();  				primaryContainer.HAnchor = HAnchor.ParentLeftRight;  				primaryContainer.VAnchor = VAnchor.ParentBottomTop;    				FlowLayoutWidget primaryFlow = new FlowLayoutWidget(FlowDirection.LeftToRight);  				primaryFlow.HAnchor = HAnchor.ParentLeftRight;  				primaryFlow.VAnchor = VAnchor.ParentBottomTop;    				primaryFlow.AddChild(indicator);  				primaryFlow.AddChild(middleColumn);    				primaryContainer.AddChild(primaryFlow);    				rightButtonOverlay = new SlideWidget();  				rightButtonOverlay.VAnchor = VAnchor.ParentBottomTop;  				rightButtonOverlay.HAnchor = Agg.UI.HAnchor.ParentRight;  				rightButtonOverlay.Width = rightOverlayWidth;  				rightButtonOverlay.Visible = false;    				FlowLayoutWidget rightMiddleColumnContainer = new FlowLayoutWidget(FlowDirection.LeftToRight);  				rightMiddleColumnContainer.VAnchor = VAnchor.ParentBottomTop;  				{  					TextWidget viewLabel = new TextWidget("View".Localize());  					viewLabel.TextColor = RGBA_Bytes.White;  					viewLabel.VAnchor = VAnchor.ParentCenter;  					viewLabel.HAnchor = HAnchor.ParentCenter;    					FatFlatClickWidget viewButton = new FatFlatClickWidget(viewLabel);  					viewButton.VAnchor = VAnchor.ParentBottomTop;  					viewButton.BackgroundColor = ActiveTheme.Instance.SecondaryAccentColor;  					viewButton.Width = actionButtonSize;  					viewButton.Click += ViewButton_Click;  					rightMiddleColumnContainer.AddChild(viewButton);    					TextWidget printLabel = new TextWidget("Print".Localize());  					printLabel.TextColor = RGBA_Bytes.White;  					printLabel.VAnchor = VAnchor.ParentCenter;  					printLabel.HAnchor = HAnchor.ParentCenter;    					FatFlatClickWidget printButton = new FatFlatClickWidget(printLabel);  					printButton.VAnchor = VAnchor.ParentBottomTop;  					printButton.BackgroundColor = ActiveTheme.Instance.PrimaryAccentColor;  					printButton.Width = actionButtonSize;  					printButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							if (!PrinterCommunication.PrinterConnectionAndCommunication.Instance.PrintIsActive)  							{  								QueueData.Instance.AddItem(new PrintItemWrapper(printTask.PrintItemId)' 0);  								QueueData.Instance.SelectedIndex = 0;  								PrinterCommunication.PrinterConnectionAndCommunication.Instance.PrintActivePartIfPossible();  							}  							else  							{  								QueueData.Instance.AddItem(new PrintItemWrapper(printTask.PrintItemId));  							}  							rightButtonOverlay.SlideOut();  						});  					};  					rightMiddleColumnContainer.AddChild(printButton);  				}  				rightButtonOverlay.AddChild(rightMiddleColumnContainer);    				if (showTimestamp)  				{  					FlowLayoutWidget timestampColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  					timestampColumn.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  					timestampColumn.BackgroundColor = RGBA_Bytes.LightGray;  					timestampColumn.Padding = new BorderDouble(6' 0);    					FlowLayoutWidget startTimeContainer = new FlowLayoutWidget();  					startTimeContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					startTimeContainer.Padding = new BorderDouble(0' 3);    					string startLabelFull = "{0}:".FormatWith("Start".Localize().ToUpper());  					TextWidget startLabel = new TextWidget(startLabelFull' pointSize: 8 * pointSizeFactor);  					startLabel.TextColor = timeTextColor;    					string startTimeString = printTask.PrintStart.ToString("MMM d yyyy h:mm ") + printTask.PrintStart.ToString("tt").ToLower();  					TextWidget startDate = new TextWidget(startTimeString' pointSize: 12 * pointSizeFactor);  					startDate.TextColor = timeTextColor;    					startTimeContainer.AddChild(startLabel);  					startTimeContainer.AddChild(new HorizontalSpacer());  					startTimeContainer.AddChild(startDate);    					FlowLayoutWidget endTimeContainer = new FlowLayoutWidget();  					endTimeContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					endTimeContainer.Padding = new BorderDouble(0' 3);    					string endLabelFull = "{0}:".FormatWith("End".Localize().ToUpper());  					TextWidget endLabel = new TextWidget(endLabelFull' pointSize: 8 * pointSizeFactor);  					endLabel.TextColor = timeTextColor;    					string endTimeString;  					if (printTask.PrintEnd != DateTime.MinValue)  					{  						endTimeString = printTask.PrintEnd.ToString("MMM d yyyy h:mm ") + printTask.PrintEnd.ToString("tt").ToLower();  					}  					else  					{  						endTimeString = "Unknown".Localize();  					}    					TextWidget endDate = new TextWidget(endTimeString' pointSize: 12 * pointSizeFactor);  					endDate.TextColor = timeTextColor;    					endTimeContainer.AddChild(endLabel);  					endTimeContainer.AddChild(new HorizontalSpacer());  					endTimeContainer.AddChild(endDate);    					HorizontalLine horizontalLine = new HorizontalLine();  					horizontalLine.BackgroundColor = RGBA_Bytes.Gray;    					timestampColumn.AddChild(endTimeContainer);  					timestampColumn.AddChild(horizontalLine);  					timestampColumn.AddChild(startTimeContainer);    					timestampColumn.HAnchor = HAnchor.ParentLeftRight;  					timestampColumn.Padding = new BorderDouble(5' 0' 15' 0);    					primaryFlow.AddChild(timestampColumn);  				}    				mainContainer.AddChild(primaryContainer);  				mainContainer.AddChild(rightButtonOverlay);    				this.AddChild(mainContainer);  			}
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,C:\repos\MatterHackers_MatterControl\History\PrintHistoryListItem.cs,AddChildElements,The following statement contains a magic number: {  				GuiWidget indicator = new GuiWidget();  				indicator.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  				indicator.Width = 15;  				if (printTask.PrintComplete)  				{  					indicator.BackgroundColor = new RGBA_Bytes(38' 147' 51' 180);  				}  				else  				{  					indicator.BackgroundColor = new RGBA_Bytes(252' 209' 22' 180);  				}    				FlowLayoutWidget middleColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  				middleColumn.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				middleColumn.Padding = new BorderDouble(6' 3);  				{  					FlowLayoutWidget labelContainer = new FlowLayoutWidget();  					labelContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;    					string labelName = textInfo.ToTitleCase(printTask.PrintName);  					labelName = labelName.Replace('_'' ' ');  					partLabel = new TextWidget(labelName' pointSize: 15 * pointSizeFactor);  					partLabel.TextColor = WidgetTextColor;    					labelContainer.AddChild(partLabel);    					middleColumn.AddChild(labelContainer);  				}    				RGBA_Bytes timeTextColor = new RGBA_Bytes(34' 34' 34);    				FlowLayoutWidget buttonContainer = new FlowLayoutWidget();  				buttonContainer.Margin = new BorderDouble(0);  				buttonContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				{  					TextWidget statusIndicator = new TextWidget("Status: Completed".Localize()' pointSize: 8 * pointSizeFactor);  					statusIndicator.Margin = new BorderDouble(right: 3);  					//buttonContainer.AddChild(statusIndicator);    					string printTimeLabel = "Time".Localize().ToUpper();  					string printTimeLabelFull = string.Format("{0}: "' printTimeLabel);  					TextWidget timeLabel = new TextWidget(printTimeLabelFull' pointSize: 8 * pointSizeFactor);  					timeLabel.TextColor = timeTextColor;    					TextWidget timeIndicator;  					int minutes = printTask.PrintTimeMinutes;  					if (minutes < 0)  					{  						timeIndicator = new TextWidget("Unknown".Localize());  					}  					else if (minutes > 60)  					{  						timeIndicator = new TextWidget("{0}hrs {1}min".FormatWith(printTask.PrintTimeMinutes / 60' printTask.PrintTimeMinutes % 60)' pointSize: 12 * pointSizeFactor);  					}  					else  					{  						timeIndicator = new TextWidget(string.Format("{0}min"' printTask.PrintTimeMinutes)' pointSize: 12 * pointSizeFactor);  					}    					if (printTask.PercentDone > 0)  					{  						timeIndicator.AutoExpandBoundsToText = true;  						timeIndicator.Text += $" ({printTask.PercentDone:0.0}%)";  						  						if(printTask.RecoveryCount > 0)  						{  							if (printTask.RecoveryCount == 1)  							{  								timeIndicator.Text += " - " + "recovered once".Localize();  							}  							else  							{  								timeIndicator.Text += " - " + "recovered {0} times".FormatWith(printTask.RecoveryCount);  							}  						}  					}    					timeIndicator.Margin = new BorderDouble(right: 6);  					timeIndicator.TextColor = timeTextColor;    					buttonContainer.AddChild(timeLabel);  					buttonContainer.AddChild(timeIndicator);  					buttonContainer.AddChild(new HorizontalSpacer());  					middleColumn.AddChild(buttonContainer);  				}    				GuiWidget primaryContainer = new GuiWidget();  				primaryContainer.HAnchor = HAnchor.ParentLeftRight;  				primaryContainer.VAnchor = VAnchor.ParentBottomTop;    				FlowLayoutWidget primaryFlow = new FlowLayoutWidget(FlowDirection.LeftToRight);  				primaryFlow.HAnchor = HAnchor.ParentLeftRight;  				primaryFlow.VAnchor = VAnchor.ParentBottomTop;    				primaryFlow.AddChild(indicator);  				primaryFlow.AddChild(middleColumn);    				primaryContainer.AddChild(primaryFlow);    				rightButtonOverlay = new SlideWidget();  				rightButtonOverlay.VAnchor = VAnchor.ParentBottomTop;  				rightButtonOverlay.HAnchor = Agg.UI.HAnchor.ParentRight;  				rightButtonOverlay.Width = rightOverlayWidth;  				rightButtonOverlay.Visible = false;    				FlowLayoutWidget rightMiddleColumnContainer = new FlowLayoutWidget(FlowDirection.LeftToRight);  				rightMiddleColumnContainer.VAnchor = VAnchor.ParentBottomTop;  				{  					TextWidget viewLabel = new TextWidget("View".Localize());  					viewLabel.TextColor = RGBA_Bytes.White;  					viewLabel.VAnchor = VAnchor.ParentCenter;  					viewLabel.HAnchor = HAnchor.ParentCenter;    					FatFlatClickWidget viewButton = new FatFlatClickWidget(viewLabel);  					viewButton.VAnchor = VAnchor.ParentBottomTop;  					viewButton.BackgroundColor = ActiveTheme.Instance.SecondaryAccentColor;  					viewButton.Width = actionButtonSize;  					viewButton.Click += ViewButton_Click;  					rightMiddleColumnContainer.AddChild(viewButton);    					TextWidget printLabel = new TextWidget("Print".Localize());  					printLabel.TextColor = RGBA_Bytes.White;  					printLabel.VAnchor = VAnchor.ParentCenter;  					printLabel.HAnchor = HAnchor.ParentCenter;    					FatFlatClickWidget printButton = new FatFlatClickWidget(printLabel);  					printButton.VAnchor = VAnchor.ParentBottomTop;  					printButton.BackgroundColor = ActiveTheme.Instance.PrimaryAccentColor;  					printButton.Width = actionButtonSize;  					printButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							if (!PrinterCommunication.PrinterConnectionAndCommunication.Instance.PrintIsActive)  							{  								QueueData.Instance.AddItem(new PrintItemWrapper(printTask.PrintItemId)' 0);  								QueueData.Instance.SelectedIndex = 0;  								PrinterCommunication.PrinterConnectionAndCommunication.Instance.PrintActivePartIfPossible();  							}  							else  							{  								QueueData.Instance.AddItem(new PrintItemWrapper(printTask.PrintItemId));  							}  							rightButtonOverlay.SlideOut();  						});  					};  					rightMiddleColumnContainer.AddChild(printButton);  				}  				rightButtonOverlay.AddChild(rightMiddleColumnContainer);    				if (showTimestamp)  				{  					FlowLayoutWidget timestampColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  					timestampColumn.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  					timestampColumn.BackgroundColor = RGBA_Bytes.LightGray;  					timestampColumn.Padding = new BorderDouble(6' 0);    					FlowLayoutWidget startTimeContainer = new FlowLayoutWidget();  					startTimeContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					startTimeContainer.Padding = new BorderDouble(0' 3);    					string startLabelFull = "{0}:".FormatWith("Start".Localize().ToUpper());  					TextWidget startLabel = new TextWidget(startLabelFull' pointSize: 8 * pointSizeFactor);  					startLabel.TextColor = timeTextColor;    					string startTimeString = printTask.PrintStart.ToString("MMM d yyyy h:mm ") + printTask.PrintStart.ToString("tt").ToLower();  					TextWidget startDate = new TextWidget(startTimeString' pointSize: 12 * pointSizeFactor);  					startDate.TextColor = timeTextColor;    					startTimeContainer.AddChild(startLabel);  					startTimeContainer.AddChild(new HorizontalSpacer());  					startTimeContainer.AddChild(startDate);    					FlowLayoutWidget endTimeContainer = new FlowLayoutWidget();  					endTimeContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					endTimeContainer.Padding = new BorderDouble(0' 3);    					string endLabelFull = "{0}:".FormatWith("End".Localize().ToUpper());  					TextWidget endLabel = new TextWidget(endLabelFull' pointSize: 8 * pointSizeFactor);  					endLabel.TextColor = timeTextColor;    					string endTimeString;  					if (printTask.PrintEnd != DateTime.MinValue)  					{  						endTimeString = printTask.PrintEnd.ToString("MMM d yyyy h:mm ") + printTask.PrintEnd.ToString("tt").ToLower();  					}  					else  					{  						endTimeString = "Unknown".Localize();  					}    					TextWidget endDate = new TextWidget(endTimeString' pointSize: 12 * pointSizeFactor);  					endDate.TextColor = timeTextColor;    					endTimeContainer.AddChild(endLabel);  					endTimeContainer.AddChild(new HorizontalSpacer());  					endTimeContainer.AddChild(endDate);    					HorizontalLine horizontalLine = new HorizontalLine();  					horizontalLine.BackgroundColor = RGBA_Bytes.Gray;    					timestampColumn.AddChild(endTimeContainer);  					timestampColumn.AddChild(horizontalLine);  					timestampColumn.AddChild(startTimeContainer);    					timestampColumn.HAnchor = HAnchor.ParentLeftRight;  					timestampColumn.Padding = new BorderDouble(5' 0' 15' 0);    					primaryFlow.AddChild(timestampColumn);  				}    				mainContainer.AddChild(primaryContainer);  				mainContainer.AddChild(rightButtonOverlay);    				this.AddChild(mainContainer);  			}
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,C:\repos\MatterHackers_MatterControl\History\PrintHistoryListItem.cs,AddChildElements,The following statement contains a magic number: {  				GuiWidget indicator = new GuiWidget();  				indicator.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  				indicator.Width = 15;  				if (printTask.PrintComplete)  				{  					indicator.BackgroundColor = new RGBA_Bytes(38' 147' 51' 180);  				}  				else  				{  					indicator.BackgroundColor = new RGBA_Bytes(252' 209' 22' 180);  				}    				FlowLayoutWidget middleColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  				middleColumn.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				middleColumn.Padding = new BorderDouble(6' 3);  				{  					FlowLayoutWidget labelContainer = new FlowLayoutWidget();  					labelContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;    					string labelName = textInfo.ToTitleCase(printTask.PrintName);  					labelName = labelName.Replace('_'' ' ');  					partLabel = new TextWidget(labelName' pointSize: 15 * pointSizeFactor);  					partLabel.TextColor = WidgetTextColor;    					labelContainer.AddChild(partLabel);    					middleColumn.AddChild(labelContainer);  				}    				RGBA_Bytes timeTextColor = new RGBA_Bytes(34' 34' 34);    				FlowLayoutWidget buttonContainer = new FlowLayoutWidget();  				buttonContainer.Margin = new BorderDouble(0);  				buttonContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				{  					TextWidget statusIndicator = new TextWidget("Status: Completed".Localize()' pointSize: 8 * pointSizeFactor);  					statusIndicator.Margin = new BorderDouble(right: 3);  					//buttonContainer.AddChild(statusIndicator);    					string printTimeLabel = "Time".Localize().ToUpper();  					string printTimeLabelFull = string.Format("{0}: "' printTimeLabel);  					TextWidget timeLabel = new TextWidget(printTimeLabelFull' pointSize: 8 * pointSizeFactor);  					timeLabel.TextColor = timeTextColor;    					TextWidget timeIndicator;  					int minutes = printTask.PrintTimeMinutes;  					if (minutes < 0)  					{  						timeIndicator = new TextWidget("Unknown".Localize());  					}  					else if (minutes > 60)  					{  						timeIndicator = new TextWidget("{0}hrs {1}min".FormatWith(printTask.PrintTimeMinutes / 60' printTask.PrintTimeMinutes % 60)' pointSize: 12 * pointSizeFactor);  					}  					else  					{  						timeIndicator = new TextWidget(string.Format("{0}min"' printTask.PrintTimeMinutes)' pointSize: 12 * pointSizeFactor);  					}    					if (printTask.PercentDone > 0)  					{  						timeIndicator.AutoExpandBoundsToText = true;  						timeIndicator.Text += $" ({printTask.PercentDone:0.0}%)";  						  						if(printTask.RecoveryCount > 0)  						{  							if (printTask.RecoveryCount == 1)  							{  								timeIndicator.Text += " - " + "recovered once".Localize();  							}  							else  							{  								timeIndicator.Text += " - " + "recovered {0} times".FormatWith(printTask.RecoveryCount);  							}  						}  					}    					timeIndicator.Margin = new BorderDouble(right: 6);  					timeIndicator.TextColor = timeTextColor;    					buttonContainer.AddChild(timeLabel);  					buttonContainer.AddChild(timeIndicator);  					buttonContainer.AddChild(new HorizontalSpacer());  					middleColumn.AddChild(buttonContainer);  				}    				GuiWidget primaryContainer = new GuiWidget();  				primaryContainer.HAnchor = HAnchor.ParentLeftRight;  				primaryContainer.VAnchor = VAnchor.ParentBottomTop;    				FlowLayoutWidget primaryFlow = new FlowLayoutWidget(FlowDirection.LeftToRight);  				primaryFlow.HAnchor = HAnchor.ParentLeftRight;  				primaryFlow.VAnchor = VAnchor.ParentBottomTop;    				primaryFlow.AddChild(indicator);  				primaryFlow.AddChild(middleColumn);    				primaryContainer.AddChild(primaryFlow);    				rightButtonOverlay = new SlideWidget();  				rightButtonOverlay.VAnchor = VAnchor.ParentBottomTop;  				rightButtonOverlay.HAnchor = Agg.UI.HAnchor.ParentRight;  				rightButtonOverlay.Width = rightOverlayWidth;  				rightButtonOverlay.Visible = false;    				FlowLayoutWidget rightMiddleColumnContainer = new FlowLayoutWidget(FlowDirection.LeftToRight);  				rightMiddleColumnContainer.VAnchor = VAnchor.ParentBottomTop;  				{  					TextWidget viewLabel = new TextWidget("View".Localize());  					viewLabel.TextColor = RGBA_Bytes.White;  					viewLabel.VAnchor = VAnchor.ParentCenter;  					viewLabel.HAnchor = HAnchor.ParentCenter;    					FatFlatClickWidget viewButton = new FatFlatClickWidget(viewLabel);  					viewButton.VAnchor = VAnchor.ParentBottomTop;  					viewButton.BackgroundColor = ActiveTheme.Instance.SecondaryAccentColor;  					viewButton.Width = actionButtonSize;  					viewButton.Click += ViewButton_Click;  					rightMiddleColumnContainer.AddChild(viewButton);    					TextWidget printLabel = new TextWidget("Print".Localize());  					printLabel.TextColor = RGBA_Bytes.White;  					printLabel.VAnchor = VAnchor.ParentCenter;  					printLabel.HAnchor = HAnchor.ParentCenter;    					FatFlatClickWidget printButton = new FatFlatClickWidget(printLabel);  					printButton.VAnchor = VAnchor.ParentBottomTop;  					printButton.BackgroundColor = ActiveTheme.Instance.PrimaryAccentColor;  					printButton.Width = actionButtonSize;  					printButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							if (!PrinterCommunication.PrinterConnectionAndCommunication.Instance.PrintIsActive)  							{  								QueueData.Instance.AddItem(new PrintItemWrapper(printTask.PrintItemId)' 0);  								QueueData.Instance.SelectedIndex = 0;  								PrinterCommunication.PrinterConnectionAndCommunication.Instance.PrintActivePartIfPossible();  							}  							else  							{  								QueueData.Instance.AddItem(new PrintItemWrapper(printTask.PrintItemId));  							}  							rightButtonOverlay.SlideOut();  						});  					};  					rightMiddleColumnContainer.AddChild(printButton);  				}  				rightButtonOverlay.AddChild(rightMiddleColumnContainer);    				if (showTimestamp)  				{  					FlowLayoutWidget timestampColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  					timestampColumn.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  					timestampColumn.BackgroundColor = RGBA_Bytes.LightGray;  					timestampColumn.Padding = new BorderDouble(6' 0);    					FlowLayoutWidget startTimeContainer = new FlowLayoutWidget();  					startTimeContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					startTimeContainer.Padding = new BorderDouble(0' 3);    					string startLabelFull = "{0}:".FormatWith("Start".Localize().ToUpper());  					TextWidget startLabel = new TextWidget(startLabelFull' pointSize: 8 * pointSizeFactor);  					startLabel.TextColor = timeTextColor;    					string startTimeString = printTask.PrintStart.ToString("MMM d yyyy h:mm ") + printTask.PrintStart.ToString("tt").ToLower();  					TextWidget startDate = new TextWidget(startTimeString' pointSize: 12 * pointSizeFactor);  					startDate.TextColor = timeTextColor;    					startTimeContainer.AddChild(startLabel);  					startTimeContainer.AddChild(new HorizontalSpacer());  					startTimeContainer.AddChild(startDate);    					FlowLayoutWidget endTimeContainer = new FlowLayoutWidget();  					endTimeContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					endTimeContainer.Padding = new BorderDouble(0' 3);    					string endLabelFull = "{0}:".FormatWith("End".Localize().ToUpper());  					TextWidget endLabel = new TextWidget(endLabelFull' pointSize: 8 * pointSizeFactor);  					endLabel.TextColor = timeTextColor;    					string endTimeString;  					if (printTask.PrintEnd != DateTime.MinValue)  					{  						endTimeString = printTask.PrintEnd.ToString("MMM d yyyy h:mm ") + printTask.PrintEnd.ToString("tt").ToLower();  					}  					else  					{  						endTimeString = "Unknown".Localize();  					}    					TextWidget endDate = new TextWidget(endTimeString' pointSize: 12 * pointSizeFactor);  					endDate.TextColor = timeTextColor;    					endTimeContainer.AddChild(endLabel);  					endTimeContainer.AddChild(new HorizontalSpacer());  					endTimeContainer.AddChild(endDate);    					HorizontalLine horizontalLine = new HorizontalLine();  					horizontalLine.BackgroundColor = RGBA_Bytes.Gray;    					timestampColumn.AddChild(endTimeContainer);  					timestampColumn.AddChild(horizontalLine);  					timestampColumn.AddChild(startTimeContainer);    					timestampColumn.HAnchor = HAnchor.ParentLeftRight;  					timestampColumn.Padding = new BorderDouble(5' 0' 15' 0);    					primaryFlow.AddChild(timestampColumn);  				}    				mainContainer.AddChild(primaryContainer);  				mainContainer.AddChild(rightButtonOverlay);    				this.AddChild(mainContainer);  			}
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,C:\repos\MatterHackers_MatterControl\History\PrintHistoryListItem.cs,AddChildElements,The following statement contains a magic number: {  				GuiWidget indicator = new GuiWidget();  				indicator.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  				indicator.Width = 15;  				if (printTask.PrintComplete)  				{  					indicator.BackgroundColor = new RGBA_Bytes(38' 147' 51' 180);  				}  				else  				{  					indicator.BackgroundColor = new RGBA_Bytes(252' 209' 22' 180);  				}    				FlowLayoutWidget middleColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  				middleColumn.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				middleColumn.Padding = new BorderDouble(6' 3);  				{  					FlowLayoutWidget labelContainer = new FlowLayoutWidget();  					labelContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;    					string labelName = textInfo.ToTitleCase(printTask.PrintName);  					labelName = labelName.Replace('_'' ' ');  					partLabel = new TextWidget(labelName' pointSize: 15 * pointSizeFactor);  					partLabel.TextColor = WidgetTextColor;    					labelContainer.AddChild(partLabel);    					middleColumn.AddChild(labelContainer);  				}    				RGBA_Bytes timeTextColor = new RGBA_Bytes(34' 34' 34);    				FlowLayoutWidget buttonContainer = new FlowLayoutWidget();  				buttonContainer.Margin = new BorderDouble(0);  				buttonContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				{  					TextWidget statusIndicator = new TextWidget("Status: Completed".Localize()' pointSize: 8 * pointSizeFactor);  					statusIndicator.Margin = new BorderDouble(right: 3);  					//buttonContainer.AddChild(statusIndicator);    					string printTimeLabel = "Time".Localize().ToUpper();  					string printTimeLabelFull = string.Format("{0}: "' printTimeLabel);  					TextWidget timeLabel = new TextWidget(printTimeLabelFull' pointSize: 8 * pointSizeFactor);  					timeLabel.TextColor = timeTextColor;    					TextWidget timeIndicator;  					int minutes = printTask.PrintTimeMinutes;  					if (minutes < 0)  					{  						timeIndicator = new TextWidget("Unknown".Localize());  					}  					else if (minutes > 60)  					{  						timeIndicator = new TextWidget("{0}hrs {1}min".FormatWith(printTask.PrintTimeMinutes / 60' printTask.PrintTimeMinutes % 60)' pointSize: 12 * pointSizeFactor);  					}  					else  					{  						timeIndicator = new TextWidget(string.Format("{0}min"' printTask.PrintTimeMinutes)' pointSize: 12 * pointSizeFactor);  					}    					if (printTask.PercentDone > 0)  					{  						timeIndicator.AutoExpandBoundsToText = true;  						timeIndicator.Text += $" ({printTask.PercentDone:0.0}%)";  						  						if(printTask.RecoveryCount > 0)  						{  							if (printTask.RecoveryCount == 1)  							{  								timeIndicator.Text += " - " + "recovered once".Localize();  							}  							else  							{  								timeIndicator.Text += " - " + "recovered {0} times".FormatWith(printTask.RecoveryCount);  							}  						}  					}    					timeIndicator.Margin = new BorderDouble(right: 6);  					timeIndicator.TextColor = timeTextColor;    					buttonContainer.AddChild(timeLabel);  					buttonContainer.AddChild(timeIndicator);  					buttonContainer.AddChild(new HorizontalSpacer());  					middleColumn.AddChild(buttonContainer);  				}    				GuiWidget primaryContainer = new GuiWidget();  				primaryContainer.HAnchor = HAnchor.ParentLeftRight;  				primaryContainer.VAnchor = VAnchor.ParentBottomTop;    				FlowLayoutWidget primaryFlow = new FlowLayoutWidget(FlowDirection.LeftToRight);  				primaryFlow.HAnchor = HAnchor.ParentLeftRight;  				primaryFlow.VAnchor = VAnchor.ParentBottomTop;    				primaryFlow.AddChild(indicator);  				primaryFlow.AddChild(middleColumn);    				primaryContainer.AddChild(primaryFlow);    				rightButtonOverlay = new SlideWidget();  				rightButtonOverlay.VAnchor = VAnchor.ParentBottomTop;  				rightButtonOverlay.HAnchor = Agg.UI.HAnchor.ParentRight;  				rightButtonOverlay.Width = rightOverlayWidth;  				rightButtonOverlay.Visible = false;    				FlowLayoutWidget rightMiddleColumnContainer = new FlowLayoutWidget(FlowDirection.LeftToRight);  				rightMiddleColumnContainer.VAnchor = VAnchor.ParentBottomTop;  				{  					TextWidget viewLabel = new TextWidget("View".Localize());  					viewLabel.TextColor = RGBA_Bytes.White;  					viewLabel.VAnchor = VAnchor.ParentCenter;  					viewLabel.HAnchor = HAnchor.ParentCenter;    					FatFlatClickWidget viewButton = new FatFlatClickWidget(viewLabel);  					viewButton.VAnchor = VAnchor.ParentBottomTop;  					viewButton.BackgroundColor = ActiveTheme.Instance.SecondaryAccentColor;  					viewButton.Width = actionButtonSize;  					viewButton.Click += ViewButton_Click;  					rightMiddleColumnContainer.AddChild(viewButton);    					TextWidget printLabel = new TextWidget("Print".Localize());  					printLabel.TextColor = RGBA_Bytes.White;  					printLabel.VAnchor = VAnchor.ParentCenter;  					printLabel.HAnchor = HAnchor.ParentCenter;    					FatFlatClickWidget printButton = new FatFlatClickWidget(printLabel);  					printButton.VAnchor = VAnchor.ParentBottomTop;  					printButton.BackgroundColor = ActiveTheme.Instance.PrimaryAccentColor;  					printButton.Width = actionButtonSize;  					printButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							if (!PrinterCommunication.PrinterConnectionAndCommunication.Instance.PrintIsActive)  							{  								QueueData.Instance.AddItem(new PrintItemWrapper(printTask.PrintItemId)' 0);  								QueueData.Instance.SelectedIndex = 0;  								PrinterCommunication.PrinterConnectionAndCommunication.Instance.PrintActivePartIfPossible();  							}  							else  							{  								QueueData.Instance.AddItem(new PrintItemWrapper(printTask.PrintItemId));  							}  							rightButtonOverlay.SlideOut();  						});  					};  					rightMiddleColumnContainer.AddChild(printButton);  				}  				rightButtonOverlay.AddChild(rightMiddleColumnContainer);    				if (showTimestamp)  				{  					FlowLayoutWidget timestampColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  					timestampColumn.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  					timestampColumn.BackgroundColor = RGBA_Bytes.LightGray;  					timestampColumn.Padding = new BorderDouble(6' 0);    					FlowLayoutWidget startTimeContainer = new FlowLayoutWidget();  					startTimeContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					startTimeContainer.Padding = new BorderDouble(0' 3);    					string startLabelFull = "{0}:".FormatWith("Start".Localize().ToUpper());  					TextWidget startLabel = new TextWidget(startLabelFull' pointSize: 8 * pointSizeFactor);  					startLabel.TextColor = timeTextColor;    					string startTimeString = printTask.PrintStart.ToString("MMM d yyyy h:mm ") + printTask.PrintStart.ToString("tt").ToLower();  					TextWidget startDate = new TextWidget(startTimeString' pointSize: 12 * pointSizeFactor);  					startDate.TextColor = timeTextColor;    					startTimeContainer.AddChild(startLabel);  					startTimeContainer.AddChild(new HorizontalSpacer());  					startTimeContainer.AddChild(startDate);    					FlowLayoutWidget endTimeContainer = new FlowLayoutWidget();  					endTimeContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					endTimeContainer.Padding = new BorderDouble(0' 3);    					string endLabelFull = "{0}:".FormatWith("End".Localize().ToUpper());  					TextWidget endLabel = new TextWidget(endLabelFull' pointSize: 8 * pointSizeFactor);  					endLabel.TextColor = timeTextColor;    					string endTimeString;  					if (printTask.PrintEnd != DateTime.MinValue)  					{  						endTimeString = printTask.PrintEnd.ToString("MMM d yyyy h:mm ") + printTask.PrintEnd.ToString("tt").ToLower();  					}  					else  					{  						endTimeString = "Unknown".Localize();  					}    					TextWidget endDate = new TextWidget(endTimeString' pointSize: 12 * pointSizeFactor);  					endDate.TextColor = timeTextColor;    					endTimeContainer.AddChild(endLabel);  					endTimeContainer.AddChild(new HorizontalSpacer());  					endTimeContainer.AddChild(endDate);    					HorizontalLine horizontalLine = new HorizontalLine();  					horizontalLine.BackgroundColor = RGBA_Bytes.Gray;    					timestampColumn.AddChild(endTimeContainer);  					timestampColumn.AddChild(horizontalLine);  					timestampColumn.AddChild(startTimeContainer);    					timestampColumn.HAnchor = HAnchor.ParentLeftRight;  					timestampColumn.Padding = new BorderDouble(5' 0' 15' 0);    					primaryFlow.AddChild(timestampColumn);  				}    				mainContainer.AddChild(primaryContainer);  				mainContainer.AddChild(rightButtonOverlay);    				this.AddChild(mainContainer);  			}
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,C:\repos\MatterHackers_MatterControl\History\PrintHistoryListItem.cs,AddChildElements,The following statement contains a magic number: {  				GuiWidget indicator = new GuiWidget();  				indicator.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  				indicator.Width = 15;  				if (printTask.PrintComplete)  				{  					indicator.BackgroundColor = new RGBA_Bytes(38' 147' 51' 180);  				}  				else  				{  					indicator.BackgroundColor = new RGBA_Bytes(252' 209' 22' 180);  				}    				FlowLayoutWidget middleColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  				middleColumn.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				middleColumn.Padding = new BorderDouble(6' 3);  				{  					FlowLayoutWidget labelContainer = new FlowLayoutWidget();  					labelContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;    					string labelName = textInfo.ToTitleCase(printTask.PrintName);  					labelName = labelName.Replace('_'' ' ');  					partLabel = new TextWidget(labelName' pointSize: 15 * pointSizeFactor);  					partLabel.TextColor = WidgetTextColor;    					labelContainer.AddChild(partLabel);    					middleColumn.AddChild(labelContainer);  				}    				RGBA_Bytes timeTextColor = new RGBA_Bytes(34' 34' 34);    				FlowLayoutWidget buttonContainer = new FlowLayoutWidget();  				buttonContainer.Margin = new BorderDouble(0);  				buttonContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				{  					TextWidget statusIndicator = new TextWidget("Status: Completed".Localize()' pointSize: 8 * pointSizeFactor);  					statusIndicator.Margin = new BorderDouble(right: 3);  					//buttonContainer.AddChild(statusIndicator);    					string printTimeLabel = "Time".Localize().ToUpper();  					string printTimeLabelFull = string.Format("{0}: "' printTimeLabel);  					TextWidget timeLabel = new TextWidget(printTimeLabelFull' pointSize: 8 * pointSizeFactor);  					timeLabel.TextColor = timeTextColor;    					TextWidget timeIndicator;  					int minutes = printTask.PrintTimeMinutes;  					if (minutes < 0)  					{  						timeIndicator = new TextWidget("Unknown".Localize());  					}  					else if (minutes > 60)  					{  						timeIndicator = new TextWidget("{0}hrs {1}min".FormatWith(printTask.PrintTimeMinutes / 60' printTask.PrintTimeMinutes % 60)' pointSize: 12 * pointSizeFactor);  					}  					else  					{  						timeIndicator = new TextWidget(string.Format("{0}min"' printTask.PrintTimeMinutes)' pointSize: 12 * pointSizeFactor);  					}    					if (printTask.PercentDone > 0)  					{  						timeIndicator.AutoExpandBoundsToText = true;  						timeIndicator.Text += $" ({printTask.PercentDone:0.0}%)";  						  						if(printTask.RecoveryCount > 0)  						{  							if (printTask.RecoveryCount == 1)  							{  								timeIndicator.Text += " - " + "recovered once".Localize();  							}  							else  							{  								timeIndicator.Text += " - " + "recovered {0} times".FormatWith(printTask.RecoveryCount);  							}  						}  					}    					timeIndicator.Margin = new BorderDouble(right: 6);  					timeIndicator.TextColor = timeTextColor;    					buttonContainer.AddChild(timeLabel);  					buttonContainer.AddChild(timeIndicator);  					buttonContainer.AddChild(new HorizontalSpacer());  					middleColumn.AddChild(buttonContainer);  				}    				GuiWidget primaryContainer = new GuiWidget();  				primaryContainer.HAnchor = HAnchor.ParentLeftRight;  				primaryContainer.VAnchor = VAnchor.ParentBottomTop;    				FlowLayoutWidget primaryFlow = new FlowLayoutWidget(FlowDirection.LeftToRight);  				primaryFlow.HAnchor = HAnchor.ParentLeftRight;  				primaryFlow.VAnchor = VAnchor.ParentBottomTop;    				primaryFlow.AddChild(indicator);  				primaryFlow.AddChild(middleColumn);    				primaryContainer.AddChild(primaryFlow);    				rightButtonOverlay = new SlideWidget();  				rightButtonOverlay.VAnchor = VAnchor.ParentBottomTop;  				rightButtonOverlay.HAnchor = Agg.UI.HAnchor.ParentRight;  				rightButtonOverlay.Width = rightOverlayWidth;  				rightButtonOverlay.Visible = false;    				FlowLayoutWidget rightMiddleColumnContainer = new FlowLayoutWidget(FlowDirection.LeftToRight);  				rightMiddleColumnContainer.VAnchor = VAnchor.ParentBottomTop;  				{  					TextWidget viewLabel = new TextWidget("View".Localize());  					viewLabel.TextColor = RGBA_Bytes.White;  					viewLabel.VAnchor = VAnchor.ParentCenter;  					viewLabel.HAnchor = HAnchor.ParentCenter;    					FatFlatClickWidget viewButton = new FatFlatClickWidget(viewLabel);  					viewButton.VAnchor = VAnchor.ParentBottomTop;  					viewButton.BackgroundColor = ActiveTheme.Instance.SecondaryAccentColor;  					viewButton.Width = actionButtonSize;  					viewButton.Click += ViewButton_Click;  					rightMiddleColumnContainer.AddChild(viewButton);    					TextWidget printLabel = new TextWidget("Print".Localize());  					printLabel.TextColor = RGBA_Bytes.White;  					printLabel.VAnchor = VAnchor.ParentCenter;  					printLabel.HAnchor = HAnchor.ParentCenter;    					FatFlatClickWidget printButton = new FatFlatClickWidget(printLabel);  					printButton.VAnchor = VAnchor.ParentBottomTop;  					printButton.BackgroundColor = ActiveTheme.Instance.PrimaryAccentColor;  					printButton.Width = actionButtonSize;  					printButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							if (!PrinterCommunication.PrinterConnectionAndCommunication.Instance.PrintIsActive)  							{  								QueueData.Instance.AddItem(new PrintItemWrapper(printTask.PrintItemId)' 0);  								QueueData.Instance.SelectedIndex = 0;  								PrinterCommunication.PrinterConnectionAndCommunication.Instance.PrintActivePartIfPossible();  							}  							else  							{  								QueueData.Instance.AddItem(new PrintItemWrapper(printTask.PrintItemId));  							}  							rightButtonOverlay.SlideOut();  						});  					};  					rightMiddleColumnContainer.AddChild(printButton);  				}  				rightButtonOverlay.AddChild(rightMiddleColumnContainer);    				if (showTimestamp)  				{  					FlowLayoutWidget timestampColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  					timestampColumn.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  					timestampColumn.BackgroundColor = RGBA_Bytes.LightGray;  					timestampColumn.Padding = new BorderDouble(6' 0);    					FlowLayoutWidget startTimeContainer = new FlowLayoutWidget();  					startTimeContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					startTimeContainer.Padding = new BorderDouble(0' 3);    					string startLabelFull = "{0}:".FormatWith("Start".Localize().ToUpper());  					TextWidget startLabel = new TextWidget(startLabelFull' pointSize: 8 * pointSizeFactor);  					startLabel.TextColor = timeTextColor;    					string startTimeString = printTask.PrintStart.ToString("MMM d yyyy h:mm ") + printTask.PrintStart.ToString("tt").ToLower();  					TextWidget startDate = new TextWidget(startTimeString' pointSize: 12 * pointSizeFactor);  					startDate.TextColor = timeTextColor;    					startTimeContainer.AddChild(startLabel);  					startTimeContainer.AddChild(new HorizontalSpacer());  					startTimeContainer.AddChild(startDate);    					FlowLayoutWidget endTimeContainer = new FlowLayoutWidget();  					endTimeContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					endTimeContainer.Padding = new BorderDouble(0' 3);    					string endLabelFull = "{0}:".FormatWith("End".Localize().ToUpper());  					TextWidget endLabel = new TextWidget(endLabelFull' pointSize: 8 * pointSizeFactor);  					endLabel.TextColor = timeTextColor;    					string endTimeString;  					if (printTask.PrintEnd != DateTime.MinValue)  					{  						endTimeString = printTask.PrintEnd.ToString("MMM d yyyy h:mm ") + printTask.PrintEnd.ToString("tt").ToLower();  					}  					else  					{  						endTimeString = "Unknown".Localize();  					}    					TextWidget endDate = new TextWidget(endTimeString' pointSize: 12 * pointSizeFactor);  					endDate.TextColor = timeTextColor;    					endTimeContainer.AddChild(endLabel);  					endTimeContainer.AddChild(new HorizontalSpacer());  					endTimeContainer.AddChild(endDate);    					HorizontalLine horizontalLine = new HorizontalLine();  					horizontalLine.BackgroundColor = RGBA_Bytes.Gray;    					timestampColumn.AddChild(endTimeContainer);  					timestampColumn.AddChild(horizontalLine);  					timestampColumn.AddChild(startTimeContainer);    					timestampColumn.HAnchor = HAnchor.ParentLeftRight;  					timestampColumn.Padding = new BorderDouble(5' 0' 15' 0);    					primaryFlow.AddChild(timestampColumn);  				}    				mainContainer.AddChild(primaryContainer);  				mainContainer.AddChild(rightButtonOverlay);    				this.AddChild(mainContainer);  			}
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,C:\repos\MatterHackers_MatterControl\History\PrintHistoryListItem.cs,AddChildElements,The following statement contains a magic number: {  				GuiWidget indicator = new GuiWidget();  				indicator.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  				indicator.Width = 15;  				if (printTask.PrintComplete)  				{  					indicator.BackgroundColor = new RGBA_Bytes(38' 147' 51' 180);  				}  				else  				{  					indicator.BackgroundColor = new RGBA_Bytes(252' 209' 22' 180);  				}    				FlowLayoutWidget middleColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  				middleColumn.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				middleColumn.Padding = new BorderDouble(6' 3);  				{  					FlowLayoutWidget labelContainer = new FlowLayoutWidget();  					labelContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;    					string labelName = textInfo.ToTitleCase(printTask.PrintName);  					labelName = labelName.Replace('_'' ' ');  					partLabel = new TextWidget(labelName' pointSize: 15 * pointSizeFactor);  					partLabel.TextColor = WidgetTextColor;    					labelContainer.AddChild(partLabel);    					middleColumn.AddChild(labelContainer);  				}    				RGBA_Bytes timeTextColor = new RGBA_Bytes(34' 34' 34);    				FlowLayoutWidget buttonContainer = new FlowLayoutWidget();  				buttonContainer.Margin = new BorderDouble(0);  				buttonContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				{  					TextWidget statusIndicator = new TextWidget("Status: Completed".Localize()' pointSize: 8 * pointSizeFactor);  					statusIndicator.Margin = new BorderDouble(right: 3);  					//buttonContainer.AddChild(statusIndicator);    					string printTimeLabel = "Time".Localize().ToUpper();  					string printTimeLabelFull = string.Format("{0}: "' printTimeLabel);  					TextWidget timeLabel = new TextWidget(printTimeLabelFull' pointSize: 8 * pointSizeFactor);  					timeLabel.TextColor = timeTextColor;    					TextWidget timeIndicator;  					int minutes = printTask.PrintTimeMinutes;  					if (minutes < 0)  					{  						timeIndicator = new TextWidget("Unknown".Localize());  					}  					else if (minutes > 60)  					{  						timeIndicator = new TextWidget("{0}hrs {1}min".FormatWith(printTask.PrintTimeMinutes / 60' printTask.PrintTimeMinutes % 60)' pointSize: 12 * pointSizeFactor);  					}  					else  					{  						timeIndicator = new TextWidget(string.Format("{0}min"' printTask.PrintTimeMinutes)' pointSize: 12 * pointSizeFactor);  					}    					if (printTask.PercentDone > 0)  					{  						timeIndicator.AutoExpandBoundsToText = true;  						timeIndicator.Text += $" ({printTask.PercentDone:0.0}%)";  						  						if(printTask.RecoveryCount > 0)  						{  							if (printTask.RecoveryCount == 1)  							{  								timeIndicator.Text += " - " + "recovered once".Localize();  							}  							else  							{  								timeIndicator.Text += " - " + "recovered {0} times".FormatWith(printTask.RecoveryCount);  							}  						}  					}    					timeIndicator.Margin = new BorderDouble(right: 6);  					timeIndicator.TextColor = timeTextColor;    					buttonContainer.AddChild(timeLabel);  					buttonContainer.AddChild(timeIndicator);  					buttonContainer.AddChild(new HorizontalSpacer());  					middleColumn.AddChild(buttonContainer);  				}    				GuiWidget primaryContainer = new GuiWidget();  				primaryContainer.HAnchor = HAnchor.ParentLeftRight;  				primaryContainer.VAnchor = VAnchor.ParentBottomTop;    				FlowLayoutWidget primaryFlow = new FlowLayoutWidget(FlowDirection.LeftToRight);  				primaryFlow.HAnchor = HAnchor.ParentLeftRight;  				primaryFlow.VAnchor = VAnchor.ParentBottomTop;    				primaryFlow.AddChild(indicator);  				primaryFlow.AddChild(middleColumn);    				primaryContainer.AddChild(primaryFlow);    				rightButtonOverlay = new SlideWidget();  				rightButtonOverlay.VAnchor = VAnchor.ParentBottomTop;  				rightButtonOverlay.HAnchor = Agg.UI.HAnchor.ParentRight;  				rightButtonOverlay.Width = rightOverlayWidth;  				rightButtonOverlay.Visible = false;    				FlowLayoutWidget rightMiddleColumnContainer = new FlowLayoutWidget(FlowDirection.LeftToRight);  				rightMiddleColumnContainer.VAnchor = VAnchor.ParentBottomTop;  				{  					TextWidget viewLabel = new TextWidget("View".Localize());  					viewLabel.TextColor = RGBA_Bytes.White;  					viewLabel.VAnchor = VAnchor.ParentCenter;  					viewLabel.HAnchor = HAnchor.ParentCenter;    					FatFlatClickWidget viewButton = new FatFlatClickWidget(viewLabel);  					viewButton.VAnchor = VAnchor.ParentBottomTop;  					viewButton.BackgroundColor = ActiveTheme.Instance.SecondaryAccentColor;  					viewButton.Width = actionButtonSize;  					viewButton.Click += ViewButton_Click;  					rightMiddleColumnContainer.AddChild(viewButton);    					TextWidget printLabel = new TextWidget("Print".Localize());  					printLabel.TextColor = RGBA_Bytes.White;  					printLabel.VAnchor = VAnchor.ParentCenter;  					printLabel.HAnchor = HAnchor.ParentCenter;    					FatFlatClickWidget printButton = new FatFlatClickWidget(printLabel);  					printButton.VAnchor = VAnchor.ParentBottomTop;  					printButton.BackgroundColor = ActiveTheme.Instance.PrimaryAccentColor;  					printButton.Width = actionButtonSize;  					printButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							if (!PrinterCommunication.PrinterConnectionAndCommunication.Instance.PrintIsActive)  							{  								QueueData.Instance.AddItem(new PrintItemWrapper(printTask.PrintItemId)' 0);  								QueueData.Instance.SelectedIndex = 0;  								PrinterCommunication.PrinterConnectionAndCommunication.Instance.PrintActivePartIfPossible();  							}  							else  							{  								QueueData.Instance.AddItem(new PrintItemWrapper(printTask.PrintItemId));  							}  							rightButtonOverlay.SlideOut();  						});  					};  					rightMiddleColumnContainer.AddChild(printButton);  				}  				rightButtonOverlay.AddChild(rightMiddleColumnContainer);    				if (showTimestamp)  				{  					FlowLayoutWidget timestampColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  					timestampColumn.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  					timestampColumn.BackgroundColor = RGBA_Bytes.LightGray;  					timestampColumn.Padding = new BorderDouble(6' 0);    					FlowLayoutWidget startTimeContainer = new FlowLayoutWidget();  					startTimeContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					startTimeContainer.Padding = new BorderDouble(0' 3);    					string startLabelFull = "{0}:".FormatWith("Start".Localize().ToUpper());  					TextWidget startLabel = new TextWidget(startLabelFull' pointSize: 8 * pointSizeFactor);  					startLabel.TextColor = timeTextColor;    					string startTimeString = printTask.PrintStart.ToString("MMM d yyyy h:mm ") + printTask.PrintStart.ToString("tt").ToLower();  					TextWidget startDate = new TextWidget(startTimeString' pointSize: 12 * pointSizeFactor);  					startDate.TextColor = timeTextColor;    					startTimeContainer.AddChild(startLabel);  					startTimeContainer.AddChild(new HorizontalSpacer());  					startTimeContainer.AddChild(startDate);    					FlowLayoutWidget endTimeContainer = new FlowLayoutWidget();  					endTimeContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					endTimeContainer.Padding = new BorderDouble(0' 3);    					string endLabelFull = "{0}:".FormatWith("End".Localize().ToUpper());  					TextWidget endLabel = new TextWidget(endLabelFull' pointSize: 8 * pointSizeFactor);  					endLabel.TextColor = timeTextColor;    					string endTimeString;  					if (printTask.PrintEnd != DateTime.MinValue)  					{  						endTimeString = printTask.PrintEnd.ToString("MMM d yyyy h:mm ") + printTask.PrintEnd.ToString("tt").ToLower();  					}  					else  					{  						endTimeString = "Unknown".Localize();  					}    					TextWidget endDate = new TextWidget(endTimeString' pointSize: 12 * pointSizeFactor);  					endDate.TextColor = timeTextColor;    					endTimeContainer.AddChild(endLabel);  					endTimeContainer.AddChild(new HorizontalSpacer());  					endTimeContainer.AddChild(endDate);    					HorizontalLine horizontalLine = new HorizontalLine();  					horizontalLine.BackgroundColor = RGBA_Bytes.Gray;    					timestampColumn.AddChild(endTimeContainer);  					timestampColumn.AddChild(horizontalLine);  					timestampColumn.AddChild(startTimeContainer);    					timestampColumn.HAnchor = HAnchor.ParentLeftRight;  					timestampColumn.Padding = new BorderDouble(5' 0' 15' 0);    					primaryFlow.AddChild(timestampColumn);  				}    				mainContainer.AddChild(primaryContainer);  				mainContainer.AddChild(rightButtonOverlay);    				this.AddChild(mainContainer);  			}
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,C:\repos\MatterHackers_MatterControl\History\PrintHistoryListItem.cs,AddChildElements,The following statement contains a magic number: {  				GuiWidget indicator = new GuiWidget();  				indicator.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  				indicator.Width = 15;  				if (printTask.PrintComplete)  				{  					indicator.BackgroundColor = new RGBA_Bytes(38' 147' 51' 180);  				}  				else  				{  					indicator.BackgroundColor = new RGBA_Bytes(252' 209' 22' 180);  				}    				FlowLayoutWidget middleColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  				middleColumn.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				middleColumn.Padding = new BorderDouble(6' 3);  				{  					FlowLayoutWidget labelContainer = new FlowLayoutWidget();  					labelContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;    					string labelName = textInfo.ToTitleCase(printTask.PrintName);  					labelName = labelName.Replace('_'' ' ');  					partLabel = new TextWidget(labelName' pointSize: 15 * pointSizeFactor);  					partLabel.TextColor = WidgetTextColor;    					labelContainer.AddChild(partLabel);    					middleColumn.AddChild(labelContainer);  				}    				RGBA_Bytes timeTextColor = new RGBA_Bytes(34' 34' 34);    				FlowLayoutWidget buttonContainer = new FlowLayoutWidget();  				buttonContainer.Margin = new BorderDouble(0);  				buttonContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				{  					TextWidget statusIndicator = new TextWidget("Status: Completed".Localize()' pointSize: 8 * pointSizeFactor);  					statusIndicator.Margin = new BorderDouble(right: 3);  					//buttonContainer.AddChild(statusIndicator);    					string printTimeLabel = "Time".Localize().ToUpper();  					string printTimeLabelFull = string.Format("{0}: "' printTimeLabel);  					TextWidget timeLabel = new TextWidget(printTimeLabelFull' pointSize: 8 * pointSizeFactor);  					timeLabel.TextColor = timeTextColor;    					TextWidget timeIndicator;  					int minutes = printTask.PrintTimeMinutes;  					if (minutes < 0)  					{  						timeIndicator = new TextWidget("Unknown".Localize());  					}  					else if (minutes > 60)  					{  						timeIndicator = new TextWidget("{0}hrs {1}min".FormatWith(printTask.PrintTimeMinutes / 60' printTask.PrintTimeMinutes % 60)' pointSize: 12 * pointSizeFactor);  					}  					else  					{  						timeIndicator = new TextWidget(string.Format("{0}min"' printTask.PrintTimeMinutes)' pointSize: 12 * pointSizeFactor);  					}    					if (printTask.PercentDone > 0)  					{  						timeIndicator.AutoExpandBoundsToText = true;  						timeIndicator.Text += $" ({printTask.PercentDone:0.0}%)";  						  						if(printTask.RecoveryCount > 0)  						{  							if (printTask.RecoveryCount == 1)  							{  								timeIndicator.Text += " - " + "recovered once".Localize();  							}  							else  							{  								timeIndicator.Text += " - " + "recovered {0} times".FormatWith(printTask.RecoveryCount);  							}  						}  					}    					timeIndicator.Margin = new BorderDouble(right: 6);  					timeIndicator.TextColor = timeTextColor;    					buttonContainer.AddChild(timeLabel);  					buttonContainer.AddChild(timeIndicator);  					buttonContainer.AddChild(new HorizontalSpacer());  					middleColumn.AddChild(buttonContainer);  				}    				GuiWidget primaryContainer = new GuiWidget();  				primaryContainer.HAnchor = HAnchor.ParentLeftRight;  				primaryContainer.VAnchor = VAnchor.ParentBottomTop;    				FlowLayoutWidget primaryFlow = new FlowLayoutWidget(FlowDirection.LeftToRight);  				primaryFlow.HAnchor = HAnchor.ParentLeftRight;  				primaryFlow.VAnchor = VAnchor.ParentBottomTop;    				primaryFlow.AddChild(indicator);  				primaryFlow.AddChild(middleColumn);    				primaryContainer.AddChild(primaryFlow);    				rightButtonOverlay = new SlideWidget();  				rightButtonOverlay.VAnchor = VAnchor.ParentBottomTop;  				rightButtonOverlay.HAnchor = Agg.UI.HAnchor.ParentRight;  				rightButtonOverlay.Width = rightOverlayWidth;  				rightButtonOverlay.Visible = false;    				FlowLayoutWidget rightMiddleColumnContainer = new FlowLayoutWidget(FlowDirection.LeftToRight);  				rightMiddleColumnContainer.VAnchor = VAnchor.ParentBottomTop;  				{  					TextWidget viewLabel = new TextWidget("View".Localize());  					viewLabel.TextColor = RGBA_Bytes.White;  					viewLabel.VAnchor = VAnchor.ParentCenter;  					viewLabel.HAnchor = HAnchor.ParentCenter;    					FatFlatClickWidget viewButton = new FatFlatClickWidget(viewLabel);  					viewButton.VAnchor = VAnchor.ParentBottomTop;  					viewButton.BackgroundColor = ActiveTheme.Instance.SecondaryAccentColor;  					viewButton.Width = actionButtonSize;  					viewButton.Click += ViewButton_Click;  					rightMiddleColumnContainer.AddChild(viewButton);    					TextWidget printLabel = new TextWidget("Print".Localize());  					printLabel.TextColor = RGBA_Bytes.White;  					printLabel.VAnchor = VAnchor.ParentCenter;  					printLabel.HAnchor = HAnchor.ParentCenter;    					FatFlatClickWidget printButton = new FatFlatClickWidget(printLabel);  					printButton.VAnchor = VAnchor.ParentBottomTop;  					printButton.BackgroundColor = ActiveTheme.Instance.PrimaryAccentColor;  					printButton.Width = actionButtonSize;  					printButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							if (!PrinterCommunication.PrinterConnectionAndCommunication.Instance.PrintIsActive)  							{  								QueueData.Instance.AddItem(new PrintItemWrapper(printTask.PrintItemId)' 0);  								QueueData.Instance.SelectedIndex = 0;  								PrinterCommunication.PrinterConnectionAndCommunication.Instance.PrintActivePartIfPossible();  							}  							else  							{  								QueueData.Instance.AddItem(new PrintItemWrapper(printTask.PrintItemId));  							}  							rightButtonOverlay.SlideOut();  						});  					};  					rightMiddleColumnContainer.AddChild(printButton);  				}  				rightButtonOverlay.AddChild(rightMiddleColumnContainer);    				if (showTimestamp)  				{  					FlowLayoutWidget timestampColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  					timestampColumn.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  					timestampColumn.BackgroundColor = RGBA_Bytes.LightGray;  					timestampColumn.Padding = new BorderDouble(6' 0);    					FlowLayoutWidget startTimeContainer = new FlowLayoutWidget();  					startTimeContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					startTimeContainer.Padding = new BorderDouble(0' 3);    					string startLabelFull = "{0}:".FormatWith("Start".Localize().ToUpper());  					TextWidget startLabel = new TextWidget(startLabelFull' pointSize: 8 * pointSizeFactor);  					startLabel.TextColor = timeTextColor;    					string startTimeString = printTask.PrintStart.ToString("MMM d yyyy h:mm ") + printTask.PrintStart.ToString("tt").ToLower();  					TextWidget startDate = new TextWidget(startTimeString' pointSize: 12 * pointSizeFactor);  					startDate.TextColor = timeTextColor;    					startTimeContainer.AddChild(startLabel);  					startTimeContainer.AddChild(new HorizontalSpacer());  					startTimeContainer.AddChild(startDate);    					FlowLayoutWidget endTimeContainer = new FlowLayoutWidget();  					endTimeContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					endTimeContainer.Padding = new BorderDouble(0' 3);    					string endLabelFull = "{0}:".FormatWith("End".Localize().ToUpper());  					TextWidget endLabel = new TextWidget(endLabelFull' pointSize: 8 * pointSizeFactor);  					endLabel.TextColor = timeTextColor;    					string endTimeString;  					if (printTask.PrintEnd != DateTime.MinValue)  					{  						endTimeString = printTask.PrintEnd.ToString("MMM d yyyy h:mm ") + printTask.PrintEnd.ToString("tt").ToLower();  					}  					else  					{  						endTimeString = "Unknown".Localize();  					}    					TextWidget endDate = new TextWidget(endTimeString' pointSize: 12 * pointSizeFactor);  					endDate.TextColor = timeTextColor;    					endTimeContainer.AddChild(endLabel);  					endTimeContainer.AddChild(new HorizontalSpacer());  					endTimeContainer.AddChild(endDate);    					HorizontalLine horizontalLine = new HorizontalLine();  					horizontalLine.BackgroundColor = RGBA_Bytes.Gray;    					timestampColumn.AddChild(endTimeContainer);  					timestampColumn.AddChild(horizontalLine);  					timestampColumn.AddChild(startTimeContainer);    					timestampColumn.HAnchor = HAnchor.ParentLeftRight;  					timestampColumn.Padding = new BorderDouble(5' 0' 15' 0);    					primaryFlow.AddChild(timestampColumn);  				}    				mainContainer.AddChild(primaryContainer);  				mainContainer.AddChild(rightButtonOverlay);    				this.AddChild(mainContainer);  			}
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,C:\repos\MatterHackers_MatterControl\History\PrintHistoryListItem.cs,AddChildElements,The following statement contains a magic number: {  				GuiWidget indicator = new GuiWidget();  				indicator.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  				indicator.Width = 15;  				if (printTask.PrintComplete)  				{  					indicator.BackgroundColor = new RGBA_Bytes(38' 147' 51' 180);  				}  				else  				{  					indicator.BackgroundColor = new RGBA_Bytes(252' 209' 22' 180);  				}    				FlowLayoutWidget middleColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  				middleColumn.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				middleColumn.Padding = new BorderDouble(6' 3);  				{  					FlowLayoutWidget labelContainer = new FlowLayoutWidget();  					labelContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;    					string labelName = textInfo.ToTitleCase(printTask.PrintName);  					labelName = labelName.Replace('_'' ' ');  					partLabel = new TextWidget(labelName' pointSize: 15 * pointSizeFactor);  					partLabel.TextColor = WidgetTextColor;    					labelContainer.AddChild(partLabel);    					middleColumn.AddChild(labelContainer);  				}    				RGBA_Bytes timeTextColor = new RGBA_Bytes(34' 34' 34);    				FlowLayoutWidget buttonContainer = new FlowLayoutWidget();  				buttonContainer.Margin = new BorderDouble(0);  				buttonContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				{  					TextWidget statusIndicator = new TextWidget("Status: Completed".Localize()' pointSize: 8 * pointSizeFactor);  					statusIndicator.Margin = new BorderDouble(right: 3);  					//buttonContainer.AddChild(statusIndicator);    					string printTimeLabel = "Time".Localize().ToUpper();  					string printTimeLabelFull = string.Format("{0}: "' printTimeLabel);  					TextWidget timeLabel = new TextWidget(printTimeLabelFull' pointSize: 8 * pointSizeFactor);  					timeLabel.TextColor = timeTextColor;    					TextWidget timeIndicator;  					int minutes = printTask.PrintTimeMinutes;  					if (minutes < 0)  					{  						timeIndicator = new TextWidget("Unknown".Localize());  					}  					else if (minutes > 60)  					{  						timeIndicator = new TextWidget("{0}hrs {1}min".FormatWith(printTask.PrintTimeMinutes / 60' printTask.PrintTimeMinutes % 60)' pointSize: 12 * pointSizeFactor);  					}  					else  					{  						timeIndicator = new TextWidget(string.Format("{0}min"' printTask.PrintTimeMinutes)' pointSize: 12 * pointSizeFactor);  					}    					if (printTask.PercentDone > 0)  					{  						timeIndicator.AutoExpandBoundsToText = true;  						timeIndicator.Text += $" ({printTask.PercentDone:0.0}%)";  						  						if(printTask.RecoveryCount > 0)  						{  							if (printTask.RecoveryCount == 1)  							{  								timeIndicator.Text += " - " + "recovered once".Localize();  							}  							else  							{  								timeIndicator.Text += " - " + "recovered {0} times".FormatWith(printTask.RecoveryCount);  							}  						}  					}    					timeIndicator.Margin = new BorderDouble(right: 6);  					timeIndicator.TextColor = timeTextColor;    					buttonContainer.AddChild(timeLabel);  					buttonContainer.AddChild(timeIndicator);  					buttonContainer.AddChild(new HorizontalSpacer());  					middleColumn.AddChild(buttonContainer);  				}    				GuiWidget primaryContainer = new GuiWidget();  				primaryContainer.HAnchor = HAnchor.ParentLeftRight;  				primaryContainer.VAnchor = VAnchor.ParentBottomTop;    				FlowLayoutWidget primaryFlow = new FlowLayoutWidget(FlowDirection.LeftToRight);  				primaryFlow.HAnchor = HAnchor.ParentLeftRight;  				primaryFlow.VAnchor = VAnchor.ParentBottomTop;    				primaryFlow.AddChild(indicator);  				primaryFlow.AddChild(middleColumn);    				primaryContainer.AddChild(primaryFlow);    				rightButtonOverlay = new SlideWidget();  				rightButtonOverlay.VAnchor = VAnchor.ParentBottomTop;  				rightButtonOverlay.HAnchor = Agg.UI.HAnchor.ParentRight;  				rightButtonOverlay.Width = rightOverlayWidth;  				rightButtonOverlay.Visible = false;    				FlowLayoutWidget rightMiddleColumnContainer = new FlowLayoutWidget(FlowDirection.LeftToRight);  				rightMiddleColumnContainer.VAnchor = VAnchor.ParentBottomTop;  				{  					TextWidget viewLabel = new TextWidget("View".Localize());  					viewLabel.TextColor = RGBA_Bytes.White;  					viewLabel.VAnchor = VAnchor.ParentCenter;  					viewLabel.HAnchor = HAnchor.ParentCenter;    					FatFlatClickWidget viewButton = new FatFlatClickWidget(viewLabel);  					viewButton.VAnchor = VAnchor.ParentBottomTop;  					viewButton.BackgroundColor = ActiveTheme.Instance.SecondaryAccentColor;  					viewButton.Width = actionButtonSize;  					viewButton.Click += ViewButton_Click;  					rightMiddleColumnContainer.AddChild(viewButton);    					TextWidget printLabel = new TextWidget("Print".Localize());  					printLabel.TextColor = RGBA_Bytes.White;  					printLabel.VAnchor = VAnchor.ParentCenter;  					printLabel.HAnchor = HAnchor.ParentCenter;    					FatFlatClickWidget printButton = new FatFlatClickWidget(printLabel);  					printButton.VAnchor = VAnchor.ParentBottomTop;  					printButton.BackgroundColor = ActiveTheme.Instance.PrimaryAccentColor;  					printButton.Width = actionButtonSize;  					printButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							if (!PrinterCommunication.PrinterConnectionAndCommunication.Instance.PrintIsActive)  							{  								QueueData.Instance.AddItem(new PrintItemWrapper(printTask.PrintItemId)' 0);  								QueueData.Instance.SelectedIndex = 0;  								PrinterCommunication.PrinterConnectionAndCommunication.Instance.PrintActivePartIfPossible();  							}  							else  							{  								QueueData.Instance.AddItem(new PrintItemWrapper(printTask.PrintItemId));  							}  							rightButtonOverlay.SlideOut();  						});  					};  					rightMiddleColumnContainer.AddChild(printButton);  				}  				rightButtonOverlay.AddChild(rightMiddleColumnContainer);    				if (showTimestamp)  				{  					FlowLayoutWidget timestampColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  					timestampColumn.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  					timestampColumn.BackgroundColor = RGBA_Bytes.LightGray;  					timestampColumn.Padding = new BorderDouble(6' 0);    					FlowLayoutWidget startTimeContainer = new FlowLayoutWidget();  					startTimeContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					startTimeContainer.Padding = new BorderDouble(0' 3);    					string startLabelFull = "{0}:".FormatWith("Start".Localize().ToUpper());  					TextWidget startLabel = new TextWidget(startLabelFull' pointSize: 8 * pointSizeFactor);  					startLabel.TextColor = timeTextColor;    					string startTimeString = printTask.PrintStart.ToString("MMM d yyyy h:mm ") + printTask.PrintStart.ToString("tt").ToLower();  					TextWidget startDate = new TextWidget(startTimeString' pointSize: 12 * pointSizeFactor);  					startDate.TextColor = timeTextColor;    					startTimeContainer.AddChild(startLabel);  					startTimeContainer.AddChild(new HorizontalSpacer());  					startTimeContainer.AddChild(startDate);    					FlowLayoutWidget endTimeContainer = new FlowLayoutWidget();  					endTimeContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					endTimeContainer.Padding = new BorderDouble(0' 3);    					string endLabelFull = "{0}:".FormatWith("End".Localize().ToUpper());  					TextWidget endLabel = new TextWidget(endLabelFull' pointSize: 8 * pointSizeFactor);  					endLabel.TextColor = timeTextColor;    					string endTimeString;  					if (printTask.PrintEnd != DateTime.MinValue)  					{  						endTimeString = printTask.PrintEnd.ToString("MMM d yyyy h:mm ") + printTask.PrintEnd.ToString("tt").ToLower();  					}  					else  					{  						endTimeString = "Unknown".Localize();  					}    					TextWidget endDate = new TextWidget(endTimeString' pointSize: 12 * pointSizeFactor);  					endDate.TextColor = timeTextColor;    					endTimeContainer.AddChild(endLabel);  					endTimeContainer.AddChild(new HorizontalSpacer());  					endTimeContainer.AddChild(endDate);    					HorizontalLine horizontalLine = new HorizontalLine();  					horizontalLine.BackgroundColor = RGBA_Bytes.Gray;    					timestampColumn.AddChild(endTimeContainer);  					timestampColumn.AddChild(horizontalLine);  					timestampColumn.AddChild(startTimeContainer);    					timestampColumn.HAnchor = HAnchor.ParentLeftRight;  					timestampColumn.Padding = new BorderDouble(5' 0' 15' 0);    					primaryFlow.AddChild(timestampColumn);  				}    				mainContainer.AddChild(primaryContainer);  				mainContainer.AddChild(rightButtonOverlay);    				this.AddChild(mainContainer);  			}
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,C:\repos\MatterHackers_MatterControl\History\PrintHistoryListItem.cs,AddChildElements,The following statement contains a magic number: {  				GuiWidget indicator = new GuiWidget();  				indicator.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  				indicator.Width = 15;  				if (printTask.PrintComplete)  				{  					indicator.BackgroundColor = new RGBA_Bytes(38' 147' 51' 180);  				}  				else  				{  					indicator.BackgroundColor = new RGBA_Bytes(252' 209' 22' 180);  				}    				FlowLayoutWidget middleColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  				middleColumn.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				middleColumn.Padding = new BorderDouble(6' 3);  				{  					FlowLayoutWidget labelContainer = new FlowLayoutWidget();  					labelContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;    					string labelName = textInfo.ToTitleCase(printTask.PrintName);  					labelName = labelName.Replace('_'' ' ');  					partLabel = new TextWidget(labelName' pointSize: 15 * pointSizeFactor);  					partLabel.TextColor = WidgetTextColor;    					labelContainer.AddChild(partLabel);    					middleColumn.AddChild(labelContainer);  				}    				RGBA_Bytes timeTextColor = new RGBA_Bytes(34' 34' 34);    				FlowLayoutWidget buttonContainer = new FlowLayoutWidget();  				buttonContainer.Margin = new BorderDouble(0);  				buttonContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				{  					TextWidget statusIndicator = new TextWidget("Status: Completed".Localize()' pointSize: 8 * pointSizeFactor);  					statusIndicator.Margin = new BorderDouble(right: 3);  					//buttonContainer.AddChild(statusIndicator);    					string printTimeLabel = "Time".Localize().ToUpper();  					string printTimeLabelFull = string.Format("{0}: "' printTimeLabel);  					TextWidget timeLabel = new TextWidget(printTimeLabelFull' pointSize: 8 * pointSizeFactor);  					timeLabel.TextColor = timeTextColor;    					TextWidget timeIndicator;  					int minutes = printTask.PrintTimeMinutes;  					if (minutes < 0)  					{  						timeIndicator = new TextWidget("Unknown".Localize());  					}  					else if (minutes > 60)  					{  						timeIndicator = new TextWidget("{0}hrs {1}min".FormatWith(printTask.PrintTimeMinutes / 60' printTask.PrintTimeMinutes % 60)' pointSize: 12 * pointSizeFactor);  					}  					else  					{  						timeIndicator = new TextWidget(string.Format("{0}min"' printTask.PrintTimeMinutes)' pointSize: 12 * pointSizeFactor);  					}    					if (printTask.PercentDone > 0)  					{  						timeIndicator.AutoExpandBoundsToText = true;  						timeIndicator.Text += $" ({printTask.PercentDone:0.0}%)";  						  						if(printTask.RecoveryCount > 0)  						{  							if (printTask.RecoveryCount == 1)  							{  								timeIndicator.Text += " - " + "recovered once".Localize();  							}  							else  							{  								timeIndicator.Text += " - " + "recovered {0} times".FormatWith(printTask.RecoveryCount);  							}  						}  					}    					timeIndicator.Margin = new BorderDouble(right: 6);  					timeIndicator.TextColor = timeTextColor;    					buttonContainer.AddChild(timeLabel);  					buttonContainer.AddChild(timeIndicator);  					buttonContainer.AddChild(new HorizontalSpacer());  					middleColumn.AddChild(buttonContainer);  				}    				GuiWidget primaryContainer = new GuiWidget();  				primaryContainer.HAnchor = HAnchor.ParentLeftRight;  				primaryContainer.VAnchor = VAnchor.ParentBottomTop;    				FlowLayoutWidget primaryFlow = new FlowLayoutWidget(FlowDirection.LeftToRight);  				primaryFlow.HAnchor = HAnchor.ParentLeftRight;  				primaryFlow.VAnchor = VAnchor.ParentBottomTop;    				primaryFlow.AddChild(indicator);  				primaryFlow.AddChild(middleColumn);    				primaryContainer.AddChild(primaryFlow);    				rightButtonOverlay = new SlideWidget();  				rightButtonOverlay.VAnchor = VAnchor.ParentBottomTop;  				rightButtonOverlay.HAnchor = Agg.UI.HAnchor.ParentRight;  				rightButtonOverlay.Width = rightOverlayWidth;  				rightButtonOverlay.Visible = false;    				FlowLayoutWidget rightMiddleColumnContainer = new FlowLayoutWidget(FlowDirection.LeftToRight);  				rightMiddleColumnContainer.VAnchor = VAnchor.ParentBottomTop;  				{  					TextWidget viewLabel = new TextWidget("View".Localize());  					viewLabel.TextColor = RGBA_Bytes.White;  					viewLabel.VAnchor = VAnchor.ParentCenter;  					viewLabel.HAnchor = HAnchor.ParentCenter;    					FatFlatClickWidget viewButton = new FatFlatClickWidget(viewLabel);  					viewButton.VAnchor = VAnchor.ParentBottomTop;  					viewButton.BackgroundColor = ActiveTheme.Instance.SecondaryAccentColor;  					viewButton.Width = actionButtonSize;  					viewButton.Click += ViewButton_Click;  					rightMiddleColumnContainer.AddChild(viewButton);    					TextWidget printLabel = new TextWidget("Print".Localize());  					printLabel.TextColor = RGBA_Bytes.White;  					printLabel.VAnchor = VAnchor.ParentCenter;  					printLabel.HAnchor = HAnchor.ParentCenter;    					FatFlatClickWidget printButton = new FatFlatClickWidget(printLabel);  					printButton.VAnchor = VAnchor.ParentBottomTop;  					printButton.BackgroundColor = ActiveTheme.Instance.PrimaryAccentColor;  					printButton.Width = actionButtonSize;  					printButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							if (!PrinterCommunication.PrinterConnectionAndCommunication.Instance.PrintIsActive)  							{  								QueueData.Instance.AddItem(new PrintItemWrapper(printTask.PrintItemId)' 0);  								QueueData.Instance.SelectedIndex = 0;  								PrinterCommunication.PrinterConnectionAndCommunication.Instance.PrintActivePartIfPossible();  							}  							else  							{  								QueueData.Instance.AddItem(new PrintItemWrapper(printTask.PrintItemId));  							}  							rightButtonOverlay.SlideOut();  						});  					};  					rightMiddleColumnContainer.AddChild(printButton);  				}  				rightButtonOverlay.AddChild(rightMiddleColumnContainer);    				if (showTimestamp)  				{  					FlowLayoutWidget timestampColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  					timestampColumn.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  					timestampColumn.BackgroundColor = RGBA_Bytes.LightGray;  					timestampColumn.Padding = new BorderDouble(6' 0);    					FlowLayoutWidget startTimeContainer = new FlowLayoutWidget();  					startTimeContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					startTimeContainer.Padding = new BorderDouble(0' 3);    					string startLabelFull = "{0}:".FormatWith("Start".Localize().ToUpper());  					TextWidget startLabel = new TextWidget(startLabelFull' pointSize: 8 * pointSizeFactor);  					startLabel.TextColor = timeTextColor;    					string startTimeString = printTask.PrintStart.ToString("MMM d yyyy h:mm ") + printTask.PrintStart.ToString("tt").ToLower();  					TextWidget startDate = new TextWidget(startTimeString' pointSize: 12 * pointSizeFactor);  					startDate.TextColor = timeTextColor;    					startTimeContainer.AddChild(startLabel);  					startTimeContainer.AddChild(new HorizontalSpacer());  					startTimeContainer.AddChild(startDate);    					FlowLayoutWidget endTimeContainer = new FlowLayoutWidget();  					endTimeContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					endTimeContainer.Padding = new BorderDouble(0' 3);    					string endLabelFull = "{0}:".FormatWith("End".Localize().ToUpper());  					TextWidget endLabel = new TextWidget(endLabelFull' pointSize: 8 * pointSizeFactor);  					endLabel.TextColor = timeTextColor;    					string endTimeString;  					if (printTask.PrintEnd != DateTime.MinValue)  					{  						endTimeString = printTask.PrintEnd.ToString("MMM d yyyy h:mm ") + printTask.PrintEnd.ToString("tt").ToLower();  					}  					else  					{  						endTimeString = "Unknown".Localize();  					}    					TextWidget endDate = new TextWidget(endTimeString' pointSize: 12 * pointSizeFactor);  					endDate.TextColor = timeTextColor;    					endTimeContainer.AddChild(endLabel);  					endTimeContainer.AddChild(new HorizontalSpacer());  					endTimeContainer.AddChild(endDate);    					HorizontalLine horizontalLine = new HorizontalLine();  					horizontalLine.BackgroundColor = RGBA_Bytes.Gray;    					timestampColumn.AddChild(endTimeContainer);  					timestampColumn.AddChild(horizontalLine);  					timestampColumn.AddChild(startTimeContainer);    					timestampColumn.HAnchor = HAnchor.ParentLeftRight;  					timestampColumn.Padding = new BorderDouble(5' 0' 15' 0);    					primaryFlow.AddChild(timestampColumn);  				}    				mainContainer.AddChild(primaryContainer);  				mainContainer.AddChild(rightButtonOverlay);    				this.AddChild(mainContainer);  			}
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,C:\repos\MatterHackers_MatterControl\History\PrintHistoryListItem.cs,AddChildElements,The following statement contains a magic number: {  				GuiWidget indicator = new GuiWidget();  				indicator.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  				indicator.Width = 15;  				if (printTask.PrintComplete)  				{  					indicator.BackgroundColor = new RGBA_Bytes(38' 147' 51' 180);  				}  				else  				{  					indicator.BackgroundColor = new RGBA_Bytes(252' 209' 22' 180);  				}    				FlowLayoutWidget middleColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  				middleColumn.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				middleColumn.Padding = new BorderDouble(6' 3);  				{  					FlowLayoutWidget labelContainer = new FlowLayoutWidget();  					labelContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;    					string labelName = textInfo.ToTitleCase(printTask.PrintName);  					labelName = labelName.Replace('_'' ' ');  					partLabel = new TextWidget(labelName' pointSize: 15 * pointSizeFactor);  					partLabel.TextColor = WidgetTextColor;    					labelContainer.AddChild(partLabel);    					middleColumn.AddChild(labelContainer);  				}    				RGBA_Bytes timeTextColor = new RGBA_Bytes(34' 34' 34);    				FlowLayoutWidget buttonContainer = new FlowLayoutWidget();  				buttonContainer.Margin = new BorderDouble(0);  				buttonContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				{  					TextWidget statusIndicator = new TextWidget("Status: Completed".Localize()' pointSize: 8 * pointSizeFactor);  					statusIndicator.Margin = new BorderDouble(right: 3);  					//buttonContainer.AddChild(statusIndicator);    					string printTimeLabel = "Time".Localize().ToUpper();  					string printTimeLabelFull = string.Format("{0}: "' printTimeLabel);  					TextWidget timeLabel = new TextWidget(printTimeLabelFull' pointSize: 8 * pointSizeFactor);  					timeLabel.TextColor = timeTextColor;    					TextWidget timeIndicator;  					int minutes = printTask.PrintTimeMinutes;  					if (minutes < 0)  					{  						timeIndicator = new TextWidget("Unknown".Localize());  					}  					else if (minutes > 60)  					{  						timeIndicator = new TextWidget("{0}hrs {1}min".FormatWith(printTask.PrintTimeMinutes / 60' printTask.PrintTimeMinutes % 60)' pointSize: 12 * pointSizeFactor);  					}  					else  					{  						timeIndicator = new TextWidget(string.Format("{0}min"' printTask.PrintTimeMinutes)' pointSize: 12 * pointSizeFactor);  					}    					if (printTask.PercentDone > 0)  					{  						timeIndicator.AutoExpandBoundsToText = true;  						timeIndicator.Text += $" ({printTask.PercentDone:0.0}%)";  						  						if(printTask.RecoveryCount > 0)  						{  							if (printTask.RecoveryCount == 1)  							{  								timeIndicator.Text += " - " + "recovered once".Localize();  							}  							else  							{  								timeIndicator.Text += " - " + "recovered {0} times".FormatWith(printTask.RecoveryCount);  							}  						}  					}    					timeIndicator.Margin = new BorderDouble(right: 6);  					timeIndicator.TextColor = timeTextColor;    					buttonContainer.AddChild(timeLabel);  					buttonContainer.AddChild(timeIndicator);  					buttonContainer.AddChild(new HorizontalSpacer());  					middleColumn.AddChild(buttonContainer);  				}    				GuiWidget primaryContainer = new GuiWidget();  				primaryContainer.HAnchor = HAnchor.ParentLeftRight;  				primaryContainer.VAnchor = VAnchor.ParentBottomTop;    				FlowLayoutWidget primaryFlow = new FlowLayoutWidget(FlowDirection.LeftToRight);  				primaryFlow.HAnchor = HAnchor.ParentLeftRight;  				primaryFlow.VAnchor = VAnchor.ParentBottomTop;    				primaryFlow.AddChild(indicator);  				primaryFlow.AddChild(middleColumn);    				primaryContainer.AddChild(primaryFlow);    				rightButtonOverlay = new SlideWidget();  				rightButtonOverlay.VAnchor = VAnchor.ParentBottomTop;  				rightButtonOverlay.HAnchor = Agg.UI.HAnchor.ParentRight;  				rightButtonOverlay.Width = rightOverlayWidth;  				rightButtonOverlay.Visible = false;    				FlowLayoutWidget rightMiddleColumnContainer = new FlowLayoutWidget(FlowDirection.LeftToRight);  				rightMiddleColumnContainer.VAnchor = VAnchor.ParentBottomTop;  				{  					TextWidget viewLabel = new TextWidget("View".Localize());  					viewLabel.TextColor = RGBA_Bytes.White;  					viewLabel.VAnchor = VAnchor.ParentCenter;  					viewLabel.HAnchor = HAnchor.ParentCenter;    					FatFlatClickWidget viewButton = new FatFlatClickWidget(viewLabel);  					viewButton.VAnchor = VAnchor.ParentBottomTop;  					viewButton.BackgroundColor = ActiveTheme.Instance.SecondaryAccentColor;  					viewButton.Width = actionButtonSize;  					viewButton.Click += ViewButton_Click;  					rightMiddleColumnContainer.AddChild(viewButton);    					TextWidget printLabel = new TextWidget("Print".Localize());  					printLabel.TextColor = RGBA_Bytes.White;  					printLabel.VAnchor = VAnchor.ParentCenter;  					printLabel.HAnchor = HAnchor.ParentCenter;    					FatFlatClickWidget printButton = new FatFlatClickWidget(printLabel);  					printButton.VAnchor = VAnchor.ParentBottomTop;  					printButton.BackgroundColor = ActiveTheme.Instance.PrimaryAccentColor;  					printButton.Width = actionButtonSize;  					printButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							if (!PrinterCommunication.PrinterConnectionAndCommunication.Instance.PrintIsActive)  							{  								QueueData.Instance.AddItem(new PrintItemWrapper(printTask.PrintItemId)' 0);  								QueueData.Instance.SelectedIndex = 0;  								PrinterCommunication.PrinterConnectionAndCommunication.Instance.PrintActivePartIfPossible();  							}  							else  							{  								QueueData.Instance.AddItem(new PrintItemWrapper(printTask.PrintItemId));  							}  							rightButtonOverlay.SlideOut();  						});  					};  					rightMiddleColumnContainer.AddChild(printButton);  				}  				rightButtonOverlay.AddChild(rightMiddleColumnContainer);    				if (showTimestamp)  				{  					FlowLayoutWidget timestampColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  					timestampColumn.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  					timestampColumn.BackgroundColor = RGBA_Bytes.LightGray;  					timestampColumn.Padding = new BorderDouble(6' 0);    					FlowLayoutWidget startTimeContainer = new FlowLayoutWidget();  					startTimeContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					startTimeContainer.Padding = new BorderDouble(0' 3);    					string startLabelFull = "{0}:".FormatWith("Start".Localize().ToUpper());  					TextWidget startLabel = new TextWidget(startLabelFull' pointSize: 8 * pointSizeFactor);  					startLabel.TextColor = timeTextColor;    					string startTimeString = printTask.PrintStart.ToString("MMM d yyyy h:mm ") + printTask.PrintStart.ToString("tt").ToLower();  					TextWidget startDate = new TextWidget(startTimeString' pointSize: 12 * pointSizeFactor);  					startDate.TextColor = timeTextColor;    					startTimeContainer.AddChild(startLabel);  					startTimeContainer.AddChild(new HorizontalSpacer());  					startTimeContainer.AddChild(startDate);    					FlowLayoutWidget endTimeContainer = new FlowLayoutWidget();  					endTimeContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					endTimeContainer.Padding = new BorderDouble(0' 3);    					string endLabelFull = "{0}:".FormatWith("End".Localize().ToUpper());  					TextWidget endLabel = new TextWidget(endLabelFull' pointSize: 8 * pointSizeFactor);  					endLabel.TextColor = timeTextColor;    					string endTimeString;  					if (printTask.PrintEnd != DateTime.MinValue)  					{  						endTimeString = printTask.PrintEnd.ToString("MMM d yyyy h:mm ") + printTask.PrintEnd.ToString("tt").ToLower();  					}  					else  					{  						endTimeString = "Unknown".Localize();  					}    					TextWidget endDate = new TextWidget(endTimeString' pointSize: 12 * pointSizeFactor);  					endDate.TextColor = timeTextColor;    					endTimeContainer.AddChild(endLabel);  					endTimeContainer.AddChild(new HorizontalSpacer());  					endTimeContainer.AddChild(endDate);    					HorizontalLine horizontalLine = new HorizontalLine();  					horizontalLine.BackgroundColor = RGBA_Bytes.Gray;    					timestampColumn.AddChild(endTimeContainer);  					timestampColumn.AddChild(horizontalLine);  					timestampColumn.AddChild(startTimeContainer);    					timestampColumn.HAnchor = HAnchor.ParentLeftRight;  					timestampColumn.Padding = new BorderDouble(5' 0' 15' 0);    					primaryFlow.AddChild(timestampColumn);  				}    				mainContainer.AddChild(primaryContainer);  				mainContainer.AddChild(rightButtonOverlay);    				this.AddChild(mainContainer);  			}
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,C:\repos\MatterHackers_MatterControl\History\PrintHistoryListItem.cs,AddChildElements,The following statement contains a magic number: {  				GuiWidget indicator = new GuiWidget();  				indicator.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  				indicator.Width = 15;  				if (printTask.PrintComplete)  				{  					indicator.BackgroundColor = new RGBA_Bytes(38' 147' 51' 180);  				}  				else  				{  					indicator.BackgroundColor = new RGBA_Bytes(252' 209' 22' 180);  				}    				FlowLayoutWidget middleColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  				middleColumn.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				middleColumn.Padding = new BorderDouble(6' 3);  				{  					FlowLayoutWidget labelContainer = new FlowLayoutWidget();  					labelContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;    					string labelName = textInfo.ToTitleCase(printTask.PrintName);  					labelName = labelName.Replace('_'' ' ');  					partLabel = new TextWidget(labelName' pointSize: 15 * pointSizeFactor);  					partLabel.TextColor = WidgetTextColor;    					labelContainer.AddChild(partLabel);    					middleColumn.AddChild(labelContainer);  				}    				RGBA_Bytes timeTextColor = new RGBA_Bytes(34' 34' 34);    				FlowLayoutWidget buttonContainer = new FlowLayoutWidget();  				buttonContainer.Margin = new BorderDouble(0);  				buttonContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				{  					TextWidget statusIndicator = new TextWidget("Status: Completed".Localize()' pointSize: 8 * pointSizeFactor);  					statusIndicator.Margin = new BorderDouble(right: 3);  					//buttonContainer.AddChild(statusIndicator);    					string printTimeLabel = "Time".Localize().ToUpper();  					string printTimeLabelFull = string.Format("{0}: "' printTimeLabel);  					TextWidget timeLabel = new TextWidget(printTimeLabelFull' pointSize: 8 * pointSizeFactor);  					timeLabel.TextColor = timeTextColor;    					TextWidget timeIndicator;  					int minutes = printTask.PrintTimeMinutes;  					if (minutes < 0)  					{  						timeIndicator = new TextWidget("Unknown".Localize());  					}  					else if (minutes > 60)  					{  						timeIndicator = new TextWidget("{0}hrs {1}min".FormatWith(printTask.PrintTimeMinutes / 60' printTask.PrintTimeMinutes % 60)' pointSize: 12 * pointSizeFactor);  					}  					else  					{  						timeIndicator = new TextWidget(string.Format("{0}min"' printTask.PrintTimeMinutes)' pointSize: 12 * pointSizeFactor);  					}    					if (printTask.PercentDone > 0)  					{  						timeIndicator.AutoExpandBoundsToText = true;  						timeIndicator.Text += $" ({printTask.PercentDone:0.0}%)";  						  						if(printTask.RecoveryCount > 0)  						{  							if (printTask.RecoveryCount == 1)  							{  								timeIndicator.Text += " - " + "recovered once".Localize();  							}  							else  							{  								timeIndicator.Text += " - " + "recovered {0} times".FormatWith(printTask.RecoveryCount);  							}  						}  					}    					timeIndicator.Margin = new BorderDouble(right: 6);  					timeIndicator.TextColor = timeTextColor;    					buttonContainer.AddChild(timeLabel);  					buttonContainer.AddChild(timeIndicator);  					buttonContainer.AddChild(new HorizontalSpacer());  					middleColumn.AddChild(buttonContainer);  				}    				GuiWidget primaryContainer = new GuiWidget();  				primaryContainer.HAnchor = HAnchor.ParentLeftRight;  				primaryContainer.VAnchor = VAnchor.ParentBottomTop;    				FlowLayoutWidget primaryFlow = new FlowLayoutWidget(FlowDirection.LeftToRight);  				primaryFlow.HAnchor = HAnchor.ParentLeftRight;  				primaryFlow.VAnchor = VAnchor.ParentBottomTop;    				primaryFlow.AddChild(indicator);  				primaryFlow.AddChild(middleColumn);    				primaryContainer.AddChild(primaryFlow);    				rightButtonOverlay = new SlideWidget();  				rightButtonOverlay.VAnchor = VAnchor.ParentBottomTop;  				rightButtonOverlay.HAnchor = Agg.UI.HAnchor.ParentRight;  				rightButtonOverlay.Width = rightOverlayWidth;  				rightButtonOverlay.Visible = false;    				FlowLayoutWidget rightMiddleColumnContainer = new FlowLayoutWidget(FlowDirection.LeftToRight);  				rightMiddleColumnContainer.VAnchor = VAnchor.ParentBottomTop;  				{  					TextWidget viewLabel = new TextWidget("View".Localize());  					viewLabel.TextColor = RGBA_Bytes.White;  					viewLabel.VAnchor = VAnchor.ParentCenter;  					viewLabel.HAnchor = HAnchor.ParentCenter;    					FatFlatClickWidget viewButton = new FatFlatClickWidget(viewLabel);  					viewButton.VAnchor = VAnchor.ParentBottomTop;  					viewButton.BackgroundColor = ActiveTheme.Instance.SecondaryAccentColor;  					viewButton.Width = actionButtonSize;  					viewButton.Click += ViewButton_Click;  					rightMiddleColumnContainer.AddChild(viewButton);    					TextWidget printLabel = new TextWidget("Print".Localize());  					printLabel.TextColor = RGBA_Bytes.White;  					printLabel.VAnchor = VAnchor.ParentCenter;  					printLabel.HAnchor = HAnchor.ParentCenter;    					FatFlatClickWidget printButton = new FatFlatClickWidget(printLabel);  					printButton.VAnchor = VAnchor.ParentBottomTop;  					printButton.BackgroundColor = ActiveTheme.Instance.PrimaryAccentColor;  					printButton.Width = actionButtonSize;  					printButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							if (!PrinterCommunication.PrinterConnectionAndCommunication.Instance.PrintIsActive)  							{  								QueueData.Instance.AddItem(new PrintItemWrapper(printTask.PrintItemId)' 0);  								QueueData.Instance.SelectedIndex = 0;  								PrinterCommunication.PrinterConnectionAndCommunication.Instance.PrintActivePartIfPossible();  							}  							else  							{  								QueueData.Instance.AddItem(new PrintItemWrapper(printTask.PrintItemId));  							}  							rightButtonOverlay.SlideOut();  						});  					};  					rightMiddleColumnContainer.AddChild(printButton);  				}  				rightButtonOverlay.AddChild(rightMiddleColumnContainer);    				if (showTimestamp)  				{  					FlowLayoutWidget timestampColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  					timestampColumn.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  					timestampColumn.BackgroundColor = RGBA_Bytes.LightGray;  					timestampColumn.Padding = new BorderDouble(6' 0);    					FlowLayoutWidget startTimeContainer = new FlowLayoutWidget();  					startTimeContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					startTimeContainer.Padding = new BorderDouble(0' 3);    					string startLabelFull = "{0}:".FormatWith("Start".Localize().ToUpper());  					TextWidget startLabel = new TextWidget(startLabelFull' pointSize: 8 * pointSizeFactor);  					startLabel.TextColor = timeTextColor;    					string startTimeString = printTask.PrintStart.ToString("MMM d yyyy h:mm ") + printTask.PrintStart.ToString("tt").ToLower();  					TextWidget startDate = new TextWidget(startTimeString' pointSize: 12 * pointSizeFactor);  					startDate.TextColor = timeTextColor;    					startTimeContainer.AddChild(startLabel);  					startTimeContainer.AddChild(new HorizontalSpacer());  					startTimeContainer.AddChild(startDate);    					FlowLayoutWidget endTimeContainer = new FlowLayoutWidget();  					endTimeContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					endTimeContainer.Padding = new BorderDouble(0' 3);    					string endLabelFull = "{0}:".FormatWith("End".Localize().ToUpper());  					TextWidget endLabel = new TextWidget(endLabelFull' pointSize: 8 * pointSizeFactor);  					endLabel.TextColor = timeTextColor;    					string endTimeString;  					if (printTask.PrintEnd != DateTime.MinValue)  					{  						endTimeString = printTask.PrintEnd.ToString("MMM d yyyy h:mm ") + printTask.PrintEnd.ToString("tt").ToLower();  					}  					else  					{  						endTimeString = "Unknown".Localize();  					}    					TextWidget endDate = new TextWidget(endTimeString' pointSize: 12 * pointSizeFactor);  					endDate.TextColor = timeTextColor;    					endTimeContainer.AddChild(endLabel);  					endTimeContainer.AddChild(new HorizontalSpacer());  					endTimeContainer.AddChild(endDate);    					HorizontalLine horizontalLine = new HorizontalLine();  					horizontalLine.BackgroundColor = RGBA_Bytes.Gray;    					timestampColumn.AddChild(endTimeContainer);  					timestampColumn.AddChild(horizontalLine);  					timestampColumn.AddChild(startTimeContainer);    					timestampColumn.HAnchor = HAnchor.ParentLeftRight;  					timestampColumn.Padding = new BorderDouble(5' 0' 15' 0);    					primaryFlow.AddChild(timestampColumn);  				}    				mainContainer.AddChild(primaryContainer);  				mainContainer.AddChild(rightButtonOverlay);    				this.AddChild(mainContainer);  			}
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,C:\repos\MatterHackers_MatterControl\History\PrintHistoryListItem.cs,AddChildElements,The following statement contains a magic number: {  				GuiWidget indicator = new GuiWidget();  				indicator.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  				indicator.Width = 15;  				if (printTask.PrintComplete)  				{  					indicator.BackgroundColor = new RGBA_Bytes(38' 147' 51' 180);  				}  				else  				{  					indicator.BackgroundColor = new RGBA_Bytes(252' 209' 22' 180);  				}    				FlowLayoutWidget middleColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  				middleColumn.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				middleColumn.Padding = new BorderDouble(6' 3);  				{  					FlowLayoutWidget labelContainer = new FlowLayoutWidget();  					labelContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;    					string labelName = textInfo.ToTitleCase(printTask.PrintName);  					labelName = labelName.Replace('_'' ' ');  					partLabel = new TextWidget(labelName' pointSize: 15 * pointSizeFactor);  					partLabel.TextColor = WidgetTextColor;    					labelContainer.AddChild(partLabel);    					middleColumn.AddChild(labelContainer);  				}    				RGBA_Bytes timeTextColor = new RGBA_Bytes(34' 34' 34);    				FlowLayoutWidget buttonContainer = new FlowLayoutWidget();  				buttonContainer.Margin = new BorderDouble(0);  				buttonContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				{  					TextWidget statusIndicator = new TextWidget("Status: Completed".Localize()' pointSize: 8 * pointSizeFactor);  					statusIndicator.Margin = new BorderDouble(right: 3);  					//buttonContainer.AddChild(statusIndicator);    					string printTimeLabel = "Time".Localize().ToUpper();  					string printTimeLabelFull = string.Format("{0}: "' printTimeLabel);  					TextWidget timeLabel = new TextWidget(printTimeLabelFull' pointSize: 8 * pointSizeFactor);  					timeLabel.TextColor = timeTextColor;    					TextWidget timeIndicator;  					int minutes = printTask.PrintTimeMinutes;  					if (minutes < 0)  					{  						timeIndicator = new TextWidget("Unknown".Localize());  					}  					else if (minutes > 60)  					{  						timeIndicator = new TextWidget("{0}hrs {1}min".FormatWith(printTask.PrintTimeMinutes / 60' printTask.PrintTimeMinutes % 60)' pointSize: 12 * pointSizeFactor);  					}  					else  					{  						timeIndicator = new TextWidget(string.Format("{0}min"' printTask.PrintTimeMinutes)' pointSize: 12 * pointSizeFactor);  					}    					if (printTask.PercentDone > 0)  					{  						timeIndicator.AutoExpandBoundsToText = true;  						timeIndicator.Text += $" ({printTask.PercentDone:0.0}%)";  						  						if(printTask.RecoveryCount > 0)  						{  							if (printTask.RecoveryCount == 1)  							{  								timeIndicator.Text += " - " + "recovered once".Localize();  							}  							else  							{  								timeIndicator.Text += " - " + "recovered {0} times".FormatWith(printTask.RecoveryCount);  							}  						}  					}    					timeIndicator.Margin = new BorderDouble(right: 6);  					timeIndicator.TextColor = timeTextColor;    					buttonContainer.AddChild(timeLabel);  					buttonContainer.AddChild(timeIndicator);  					buttonContainer.AddChild(new HorizontalSpacer());  					middleColumn.AddChild(buttonContainer);  				}    				GuiWidget primaryContainer = new GuiWidget();  				primaryContainer.HAnchor = HAnchor.ParentLeftRight;  				primaryContainer.VAnchor = VAnchor.ParentBottomTop;    				FlowLayoutWidget primaryFlow = new FlowLayoutWidget(FlowDirection.LeftToRight);  				primaryFlow.HAnchor = HAnchor.ParentLeftRight;  				primaryFlow.VAnchor = VAnchor.ParentBottomTop;    				primaryFlow.AddChild(indicator);  				primaryFlow.AddChild(middleColumn);    				primaryContainer.AddChild(primaryFlow);    				rightButtonOverlay = new SlideWidget();  				rightButtonOverlay.VAnchor = VAnchor.ParentBottomTop;  				rightButtonOverlay.HAnchor = Agg.UI.HAnchor.ParentRight;  				rightButtonOverlay.Width = rightOverlayWidth;  				rightButtonOverlay.Visible = false;    				FlowLayoutWidget rightMiddleColumnContainer = new FlowLayoutWidget(FlowDirection.LeftToRight);  				rightMiddleColumnContainer.VAnchor = VAnchor.ParentBottomTop;  				{  					TextWidget viewLabel = new TextWidget("View".Localize());  					viewLabel.TextColor = RGBA_Bytes.White;  					viewLabel.VAnchor = VAnchor.ParentCenter;  					viewLabel.HAnchor = HAnchor.ParentCenter;    					FatFlatClickWidget viewButton = new FatFlatClickWidget(viewLabel);  					viewButton.VAnchor = VAnchor.ParentBottomTop;  					viewButton.BackgroundColor = ActiveTheme.Instance.SecondaryAccentColor;  					viewButton.Width = actionButtonSize;  					viewButton.Click += ViewButton_Click;  					rightMiddleColumnContainer.AddChild(viewButton);    					TextWidget printLabel = new TextWidget("Print".Localize());  					printLabel.TextColor = RGBA_Bytes.White;  					printLabel.VAnchor = VAnchor.ParentCenter;  					printLabel.HAnchor = HAnchor.ParentCenter;    					FatFlatClickWidget printButton = new FatFlatClickWidget(printLabel);  					printButton.VAnchor = VAnchor.ParentBottomTop;  					printButton.BackgroundColor = ActiveTheme.Instance.PrimaryAccentColor;  					printButton.Width = actionButtonSize;  					printButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							if (!PrinterCommunication.PrinterConnectionAndCommunication.Instance.PrintIsActive)  							{  								QueueData.Instance.AddItem(new PrintItemWrapper(printTask.PrintItemId)' 0);  								QueueData.Instance.SelectedIndex = 0;  								PrinterCommunication.PrinterConnectionAndCommunication.Instance.PrintActivePartIfPossible();  							}  							else  							{  								QueueData.Instance.AddItem(new PrintItemWrapper(printTask.PrintItemId));  							}  							rightButtonOverlay.SlideOut();  						});  					};  					rightMiddleColumnContainer.AddChild(printButton);  				}  				rightButtonOverlay.AddChild(rightMiddleColumnContainer);    				if (showTimestamp)  				{  					FlowLayoutWidget timestampColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  					timestampColumn.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  					timestampColumn.BackgroundColor = RGBA_Bytes.LightGray;  					timestampColumn.Padding = new BorderDouble(6' 0);    					FlowLayoutWidget startTimeContainer = new FlowLayoutWidget();  					startTimeContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					startTimeContainer.Padding = new BorderDouble(0' 3);    					string startLabelFull = "{0}:".FormatWith("Start".Localize().ToUpper());  					TextWidget startLabel = new TextWidget(startLabelFull' pointSize: 8 * pointSizeFactor);  					startLabel.TextColor = timeTextColor;    					string startTimeString = printTask.PrintStart.ToString("MMM d yyyy h:mm ") + printTask.PrintStart.ToString("tt").ToLower();  					TextWidget startDate = new TextWidget(startTimeString' pointSize: 12 * pointSizeFactor);  					startDate.TextColor = timeTextColor;    					startTimeContainer.AddChild(startLabel);  					startTimeContainer.AddChild(new HorizontalSpacer());  					startTimeContainer.AddChild(startDate);    					FlowLayoutWidget endTimeContainer = new FlowLayoutWidget();  					endTimeContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					endTimeContainer.Padding = new BorderDouble(0' 3);    					string endLabelFull = "{0}:".FormatWith("End".Localize().ToUpper());  					TextWidget endLabel = new TextWidget(endLabelFull' pointSize: 8 * pointSizeFactor);  					endLabel.TextColor = timeTextColor;    					string endTimeString;  					if (printTask.PrintEnd != DateTime.MinValue)  					{  						endTimeString = printTask.PrintEnd.ToString("MMM d yyyy h:mm ") + printTask.PrintEnd.ToString("tt").ToLower();  					}  					else  					{  						endTimeString = "Unknown".Localize();  					}    					TextWidget endDate = new TextWidget(endTimeString' pointSize: 12 * pointSizeFactor);  					endDate.TextColor = timeTextColor;    					endTimeContainer.AddChild(endLabel);  					endTimeContainer.AddChild(new HorizontalSpacer());  					endTimeContainer.AddChild(endDate);    					HorizontalLine horizontalLine = new HorizontalLine();  					horizontalLine.BackgroundColor = RGBA_Bytes.Gray;    					timestampColumn.AddChild(endTimeContainer);  					timestampColumn.AddChild(horizontalLine);  					timestampColumn.AddChild(startTimeContainer);    					timestampColumn.HAnchor = HAnchor.ParentLeftRight;  					timestampColumn.Padding = new BorderDouble(5' 0' 15' 0);    					primaryFlow.AddChild(timestampColumn);  				}    				mainContainer.AddChild(primaryContainer);  				mainContainer.AddChild(rightButtonOverlay);    				this.AddChild(mainContainer);  			}
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,C:\repos\MatterHackers_MatterControl\History\PrintHistoryListItem.cs,AddChildElements,The following statement contains a magic number: {  				GuiWidget indicator = new GuiWidget();  				indicator.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  				indicator.Width = 15;  				if (printTask.PrintComplete)  				{  					indicator.BackgroundColor = new RGBA_Bytes(38' 147' 51' 180);  				}  				else  				{  					indicator.BackgroundColor = new RGBA_Bytes(252' 209' 22' 180);  				}    				FlowLayoutWidget middleColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  				middleColumn.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				middleColumn.Padding = new BorderDouble(6' 3);  				{  					FlowLayoutWidget labelContainer = new FlowLayoutWidget();  					labelContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;    					string labelName = textInfo.ToTitleCase(printTask.PrintName);  					labelName = labelName.Replace('_'' ' ');  					partLabel = new TextWidget(labelName' pointSize: 15 * pointSizeFactor);  					partLabel.TextColor = WidgetTextColor;    					labelContainer.AddChild(partLabel);    					middleColumn.AddChild(labelContainer);  				}    				RGBA_Bytes timeTextColor = new RGBA_Bytes(34' 34' 34);    				FlowLayoutWidget buttonContainer = new FlowLayoutWidget();  				buttonContainer.Margin = new BorderDouble(0);  				buttonContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				{  					TextWidget statusIndicator = new TextWidget("Status: Completed".Localize()' pointSize: 8 * pointSizeFactor);  					statusIndicator.Margin = new BorderDouble(right: 3);  					//buttonContainer.AddChild(statusIndicator);    					string printTimeLabel = "Time".Localize().ToUpper();  					string printTimeLabelFull = string.Format("{0}: "' printTimeLabel);  					TextWidget timeLabel = new TextWidget(printTimeLabelFull' pointSize: 8 * pointSizeFactor);  					timeLabel.TextColor = timeTextColor;    					TextWidget timeIndicator;  					int minutes = printTask.PrintTimeMinutes;  					if (minutes < 0)  					{  						timeIndicator = new TextWidget("Unknown".Localize());  					}  					else if (minutes > 60)  					{  						timeIndicator = new TextWidget("{0}hrs {1}min".FormatWith(printTask.PrintTimeMinutes / 60' printTask.PrintTimeMinutes % 60)' pointSize: 12 * pointSizeFactor);  					}  					else  					{  						timeIndicator = new TextWidget(string.Format("{0}min"' printTask.PrintTimeMinutes)' pointSize: 12 * pointSizeFactor);  					}    					if (printTask.PercentDone > 0)  					{  						timeIndicator.AutoExpandBoundsToText = true;  						timeIndicator.Text += $" ({printTask.PercentDone:0.0}%)";  						  						if(printTask.RecoveryCount > 0)  						{  							if (printTask.RecoveryCount == 1)  							{  								timeIndicator.Text += " - " + "recovered once".Localize();  							}  							else  							{  								timeIndicator.Text += " - " + "recovered {0} times".FormatWith(printTask.RecoveryCount);  							}  						}  					}    					timeIndicator.Margin = new BorderDouble(right: 6);  					timeIndicator.TextColor = timeTextColor;    					buttonContainer.AddChild(timeLabel);  					buttonContainer.AddChild(timeIndicator);  					buttonContainer.AddChild(new HorizontalSpacer());  					middleColumn.AddChild(buttonContainer);  				}    				GuiWidget primaryContainer = new GuiWidget();  				primaryContainer.HAnchor = HAnchor.ParentLeftRight;  				primaryContainer.VAnchor = VAnchor.ParentBottomTop;    				FlowLayoutWidget primaryFlow = new FlowLayoutWidget(FlowDirection.LeftToRight);  				primaryFlow.HAnchor = HAnchor.ParentLeftRight;  				primaryFlow.VAnchor = VAnchor.ParentBottomTop;    				primaryFlow.AddChild(indicator);  				primaryFlow.AddChild(middleColumn);    				primaryContainer.AddChild(primaryFlow);    				rightButtonOverlay = new SlideWidget();  				rightButtonOverlay.VAnchor = VAnchor.ParentBottomTop;  				rightButtonOverlay.HAnchor = Agg.UI.HAnchor.ParentRight;  				rightButtonOverlay.Width = rightOverlayWidth;  				rightButtonOverlay.Visible = false;    				FlowLayoutWidget rightMiddleColumnContainer = new FlowLayoutWidget(FlowDirection.LeftToRight);  				rightMiddleColumnContainer.VAnchor = VAnchor.ParentBottomTop;  				{  					TextWidget viewLabel = new TextWidget("View".Localize());  					viewLabel.TextColor = RGBA_Bytes.White;  					viewLabel.VAnchor = VAnchor.ParentCenter;  					viewLabel.HAnchor = HAnchor.ParentCenter;    					FatFlatClickWidget viewButton = new FatFlatClickWidget(viewLabel);  					viewButton.VAnchor = VAnchor.ParentBottomTop;  					viewButton.BackgroundColor = ActiveTheme.Instance.SecondaryAccentColor;  					viewButton.Width = actionButtonSize;  					viewButton.Click += ViewButton_Click;  					rightMiddleColumnContainer.AddChild(viewButton);    					TextWidget printLabel = new TextWidget("Print".Localize());  					printLabel.TextColor = RGBA_Bytes.White;  					printLabel.VAnchor = VAnchor.ParentCenter;  					printLabel.HAnchor = HAnchor.ParentCenter;    					FatFlatClickWidget printButton = new FatFlatClickWidget(printLabel);  					printButton.VAnchor = VAnchor.ParentBottomTop;  					printButton.BackgroundColor = ActiveTheme.Instance.PrimaryAccentColor;  					printButton.Width = actionButtonSize;  					printButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							if (!PrinterCommunication.PrinterConnectionAndCommunication.Instance.PrintIsActive)  							{  								QueueData.Instance.AddItem(new PrintItemWrapper(printTask.PrintItemId)' 0);  								QueueData.Instance.SelectedIndex = 0;  								PrinterCommunication.PrinterConnectionAndCommunication.Instance.PrintActivePartIfPossible();  							}  							else  							{  								QueueData.Instance.AddItem(new PrintItemWrapper(printTask.PrintItemId));  							}  							rightButtonOverlay.SlideOut();  						});  					};  					rightMiddleColumnContainer.AddChild(printButton);  				}  				rightButtonOverlay.AddChild(rightMiddleColumnContainer);    				if (showTimestamp)  				{  					FlowLayoutWidget timestampColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  					timestampColumn.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  					timestampColumn.BackgroundColor = RGBA_Bytes.LightGray;  					timestampColumn.Padding = new BorderDouble(6' 0);    					FlowLayoutWidget startTimeContainer = new FlowLayoutWidget();  					startTimeContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					startTimeContainer.Padding = new BorderDouble(0' 3);    					string startLabelFull = "{0}:".FormatWith("Start".Localize().ToUpper());  					TextWidget startLabel = new TextWidget(startLabelFull' pointSize: 8 * pointSizeFactor);  					startLabel.TextColor = timeTextColor;    					string startTimeString = printTask.PrintStart.ToString("MMM d yyyy h:mm ") + printTask.PrintStart.ToString("tt").ToLower();  					TextWidget startDate = new TextWidget(startTimeString' pointSize: 12 * pointSizeFactor);  					startDate.TextColor = timeTextColor;    					startTimeContainer.AddChild(startLabel);  					startTimeContainer.AddChild(new HorizontalSpacer());  					startTimeContainer.AddChild(startDate);    					FlowLayoutWidget endTimeContainer = new FlowLayoutWidget();  					endTimeContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					endTimeContainer.Padding = new BorderDouble(0' 3);    					string endLabelFull = "{0}:".FormatWith("End".Localize().ToUpper());  					TextWidget endLabel = new TextWidget(endLabelFull' pointSize: 8 * pointSizeFactor);  					endLabel.TextColor = timeTextColor;    					string endTimeString;  					if (printTask.PrintEnd != DateTime.MinValue)  					{  						endTimeString = printTask.PrintEnd.ToString("MMM d yyyy h:mm ") + printTask.PrintEnd.ToString("tt").ToLower();  					}  					else  					{  						endTimeString = "Unknown".Localize();  					}    					TextWidget endDate = new TextWidget(endTimeString' pointSize: 12 * pointSizeFactor);  					endDate.TextColor = timeTextColor;    					endTimeContainer.AddChild(endLabel);  					endTimeContainer.AddChild(new HorizontalSpacer());  					endTimeContainer.AddChild(endDate);    					HorizontalLine horizontalLine = new HorizontalLine();  					horizontalLine.BackgroundColor = RGBA_Bytes.Gray;    					timestampColumn.AddChild(endTimeContainer);  					timestampColumn.AddChild(horizontalLine);  					timestampColumn.AddChild(startTimeContainer);    					timestampColumn.HAnchor = HAnchor.ParentLeftRight;  					timestampColumn.Padding = new BorderDouble(5' 0' 15' 0);    					primaryFlow.AddChild(timestampColumn);  				}    				mainContainer.AddChild(primaryContainer);  				mainContainer.AddChild(rightButtonOverlay);    				this.AddChild(mainContainer);  			}
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,C:\repos\MatterHackers_MatterControl\History\PrintHistoryListItem.cs,AddChildElements,The following statement contains a magic number: {  				GuiWidget indicator = new GuiWidget();  				indicator.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  				indicator.Width = 15;  				if (printTask.PrintComplete)  				{  					indicator.BackgroundColor = new RGBA_Bytes(38' 147' 51' 180);  				}  				else  				{  					indicator.BackgroundColor = new RGBA_Bytes(252' 209' 22' 180);  				}    				FlowLayoutWidget middleColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  				middleColumn.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				middleColumn.Padding = new BorderDouble(6' 3);  				{  					FlowLayoutWidget labelContainer = new FlowLayoutWidget();  					labelContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;    					string labelName = textInfo.ToTitleCase(printTask.PrintName);  					labelName = labelName.Replace('_'' ' ');  					partLabel = new TextWidget(labelName' pointSize: 15 * pointSizeFactor);  					partLabel.TextColor = WidgetTextColor;    					labelContainer.AddChild(partLabel);    					middleColumn.AddChild(labelContainer);  				}    				RGBA_Bytes timeTextColor = new RGBA_Bytes(34' 34' 34);    				FlowLayoutWidget buttonContainer = new FlowLayoutWidget();  				buttonContainer.Margin = new BorderDouble(0);  				buttonContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				{  					TextWidget statusIndicator = new TextWidget("Status: Completed".Localize()' pointSize: 8 * pointSizeFactor);  					statusIndicator.Margin = new BorderDouble(right: 3);  					//buttonContainer.AddChild(statusIndicator);    					string printTimeLabel = "Time".Localize().ToUpper();  					string printTimeLabelFull = string.Format("{0}: "' printTimeLabel);  					TextWidget timeLabel = new TextWidget(printTimeLabelFull' pointSize: 8 * pointSizeFactor);  					timeLabel.TextColor = timeTextColor;    					TextWidget timeIndicator;  					int minutes = printTask.PrintTimeMinutes;  					if (minutes < 0)  					{  						timeIndicator = new TextWidget("Unknown".Localize());  					}  					else if (minutes > 60)  					{  						timeIndicator = new TextWidget("{0}hrs {1}min".FormatWith(printTask.PrintTimeMinutes / 60' printTask.PrintTimeMinutes % 60)' pointSize: 12 * pointSizeFactor);  					}  					else  					{  						timeIndicator = new TextWidget(string.Format("{0}min"' printTask.PrintTimeMinutes)' pointSize: 12 * pointSizeFactor);  					}    					if (printTask.PercentDone > 0)  					{  						timeIndicator.AutoExpandBoundsToText = true;  						timeIndicator.Text += $" ({printTask.PercentDone:0.0}%)";  						  						if(printTask.RecoveryCount > 0)  						{  							if (printTask.RecoveryCount == 1)  							{  								timeIndicator.Text += " - " + "recovered once".Localize();  							}  							else  							{  								timeIndicator.Text += " - " + "recovered {0} times".FormatWith(printTask.RecoveryCount);  							}  						}  					}    					timeIndicator.Margin = new BorderDouble(right: 6);  					timeIndicator.TextColor = timeTextColor;    					buttonContainer.AddChild(timeLabel);  					buttonContainer.AddChild(timeIndicator);  					buttonContainer.AddChild(new HorizontalSpacer());  					middleColumn.AddChild(buttonContainer);  				}    				GuiWidget primaryContainer = new GuiWidget();  				primaryContainer.HAnchor = HAnchor.ParentLeftRight;  				primaryContainer.VAnchor = VAnchor.ParentBottomTop;    				FlowLayoutWidget primaryFlow = new FlowLayoutWidget(FlowDirection.LeftToRight);  				primaryFlow.HAnchor = HAnchor.ParentLeftRight;  				primaryFlow.VAnchor = VAnchor.ParentBottomTop;    				primaryFlow.AddChild(indicator);  				primaryFlow.AddChild(middleColumn);    				primaryContainer.AddChild(primaryFlow);    				rightButtonOverlay = new SlideWidget();  				rightButtonOverlay.VAnchor = VAnchor.ParentBottomTop;  				rightButtonOverlay.HAnchor = Agg.UI.HAnchor.ParentRight;  				rightButtonOverlay.Width = rightOverlayWidth;  				rightButtonOverlay.Visible = false;    				FlowLayoutWidget rightMiddleColumnContainer = new FlowLayoutWidget(FlowDirection.LeftToRight);  				rightMiddleColumnContainer.VAnchor = VAnchor.ParentBottomTop;  				{  					TextWidget viewLabel = new TextWidget("View".Localize());  					viewLabel.TextColor = RGBA_Bytes.White;  					viewLabel.VAnchor = VAnchor.ParentCenter;  					viewLabel.HAnchor = HAnchor.ParentCenter;    					FatFlatClickWidget viewButton = new FatFlatClickWidget(viewLabel);  					viewButton.VAnchor = VAnchor.ParentBottomTop;  					viewButton.BackgroundColor = ActiveTheme.Instance.SecondaryAccentColor;  					viewButton.Width = actionButtonSize;  					viewButton.Click += ViewButton_Click;  					rightMiddleColumnContainer.AddChild(viewButton);    					TextWidget printLabel = new TextWidget("Print".Localize());  					printLabel.TextColor = RGBA_Bytes.White;  					printLabel.VAnchor = VAnchor.ParentCenter;  					printLabel.HAnchor = HAnchor.ParentCenter;    					FatFlatClickWidget printButton = new FatFlatClickWidget(printLabel);  					printButton.VAnchor = VAnchor.ParentBottomTop;  					printButton.BackgroundColor = ActiveTheme.Instance.PrimaryAccentColor;  					printButton.Width = actionButtonSize;  					printButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							if (!PrinterCommunication.PrinterConnectionAndCommunication.Instance.PrintIsActive)  							{  								QueueData.Instance.AddItem(new PrintItemWrapper(printTask.PrintItemId)' 0);  								QueueData.Instance.SelectedIndex = 0;  								PrinterCommunication.PrinterConnectionAndCommunication.Instance.PrintActivePartIfPossible();  							}  							else  							{  								QueueData.Instance.AddItem(new PrintItemWrapper(printTask.PrintItemId));  							}  							rightButtonOverlay.SlideOut();  						});  					};  					rightMiddleColumnContainer.AddChild(printButton);  				}  				rightButtonOverlay.AddChild(rightMiddleColumnContainer);    				if (showTimestamp)  				{  					FlowLayoutWidget timestampColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  					timestampColumn.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  					timestampColumn.BackgroundColor = RGBA_Bytes.LightGray;  					timestampColumn.Padding = new BorderDouble(6' 0);    					FlowLayoutWidget startTimeContainer = new FlowLayoutWidget();  					startTimeContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					startTimeContainer.Padding = new BorderDouble(0' 3);    					string startLabelFull = "{0}:".FormatWith("Start".Localize().ToUpper());  					TextWidget startLabel = new TextWidget(startLabelFull' pointSize: 8 * pointSizeFactor);  					startLabel.TextColor = timeTextColor;    					string startTimeString = printTask.PrintStart.ToString("MMM d yyyy h:mm ") + printTask.PrintStart.ToString("tt").ToLower();  					TextWidget startDate = new TextWidget(startTimeString' pointSize: 12 * pointSizeFactor);  					startDate.TextColor = timeTextColor;    					startTimeContainer.AddChild(startLabel);  					startTimeContainer.AddChild(new HorizontalSpacer());  					startTimeContainer.AddChild(startDate);    					FlowLayoutWidget endTimeContainer = new FlowLayoutWidget();  					endTimeContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					endTimeContainer.Padding = new BorderDouble(0' 3);    					string endLabelFull = "{0}:".FormatWith("End".Localize().ToUpper());  					TextWidget endLabel = new TextWidget(endLabelFull' pointSize: 8 * pointSizeFactor);  					endLabel.TextColor = timeTextColor;    					string endTimeString;  					if (printTask.PrintEnd != DateTime.MinValue)  					{  						endTimeString = printTask.PrintEnd.ToString("MMM d yyyy h:mm ") + printTask.PrintEnd.ToString("tt").ToLower();  					}  					else  					{  						endTimeString = "Unknown".Localize();  					}    					TextWidget endDate = new TextWidget(endTimeString' pointSize: 12 * pointSizeFactor);  					endDate.TextColor = timeTextColor;    					endTimeContainer.AddChild(endLabel);  					endTimeContainer.AddChild(new HorizontalSpacer());  					endTimeContainer.AddChild(endDate);    					HorizontalLine horizontalLine = new HorizontalLine();  					horizontalLine.BackgroundColor = RGBA_Bytes.Gray;    					timestampColumn.AddChild(endTimeContainer);  					timestampColumn.AddChild(horizontalLine);  					timestampColumn.AddChild(startTimeContainer);    					timestampColumn.HAnchor = HAnchor.ParentLeftRight;  					timestampColumn.Padding = new BorderDouble(5' 0' 15' 0);    					primaryFlow.AddChild(timestampColumn);  				}    				mainContainer.AddChild(primaryContainer);  				mainContainer.AddChild(rightButtonOverlay);    				this.AddChild(mainContainer);  			}
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,C:\repos\MatterHackers_MatterControl\History\PrintHistoryListItem.cs,AddChildElements,The following statement contains a magic number: {  				GuiWidget indicator = new GuiWidget();  				indicator.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  				indicator.Width = 15;  				if (printTask.PrintComplete)  				{  					indicator.BackgroundColor = new RGBA_Bytes(38' 147' 51' 180);  				}  				else  				{  					indicator.BackgroundColor = new RGBA_Bytes(252' 209' 22' 180);  				}    				FlowLayoutWidget middleColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  				middleColumn.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				middleColumn.Padding = new BorderDouble(6' 3);  				{  					FlowLayoutWidget labelContainer = new FlowLayoutWidget();  					labelContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;    					string labelName = textInfo.ToTitleCase(printTask.PrintName);  					labelName = labelName.Replace('_'' ' ');  					partLabel = new TextWidget(labelName' pointSize: 15 * pointSizeFactor);  					partLabel.TextColor = WidgetTextColor;    					labelContainer.AddChild(partLabel);    					middleColumn.AddChild(labelContainer);  				}    				RGBA_Bytes timeTextColor = new RGBA_Bytes(34' 34' 34);    				FlowLayoutWidget buttonContainer = new FlowLayoutWidget();  				buttonContainer.Margin = new BorderDouble(0);  				buttonContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				{  					TextWidget statusIndicator = new TextWidget("Status: Completed".Localize()' pointSize: 8 * pointSizeFactor);  					statusIndicator.Margin = new BorderDouble(right: 3);  					//buttonContainer.AddChild(statusIndicator);    					string printTimeLabel = "Time".Localize().ToUpper();  					string printTimeLabelFull = string.Format("{0}: "' printTimeLabel);  					TextWidget timeLabel = new TextWidget(printTimeLabelFull' pointSize: 8 * pointSizeFactor);  					timeLabel.TextColor = timeTextColor;    					TextWidget timeIndicator;  					int minutes = printTask.PrintTimeMinutes;  					if (minutes < 0)  					{  						timeIndicator = new TextWidget("Unknown".Localize());  					}  					else if (minutes > 60)  					{  						timeIndicator = new TextWidget("{0}hrs {1}min".FormatWith(printTask.PrintTimeMinutes / 60' printTask.PrintTimeMinutes % 60)' pointSize: 12 * pointSizeFactor);  					}  					else  					{  						timeIndicator = new TextWidget(string.Format("{0}min"' printTask.PrintTimeMinutes)' pointSize: 12 * pointSizeFactor);  					}    					if (printTask.PercentDone > 0)  					{  						timeIndicator.AutoExpandBoundsToText = true;  						timeIndicator.Text += $" ({printTask.PercentDone:0.0}%)";  						  						if(printTask.RecoveryCount > 0)  						{  							if (printTask.RecoveryCount == 1)  							{  								timeIndicator.Text += " - " + "recovered once".Localize();  							}  							else  							{  								timeIndicator.Text += " - " + "recovered {0} times".FormatWith(printTask.RecoveryCount);  							}  						}  					}    					timeIndicator.Margin = new BorderDouble(right: 6);  					timeIndicator.TextColor = timeTextColor;    					buttonContainer.AddChild(timeLabel);  					buttonContainer.AddChild(timeIndicator);  					buttonContainer.AddChild(new HorizontalSpacer());  					middleColumn.AddChild(buttonContainer);  				}    				GuiWidget primaryContainer = new GuiWidget();  				primaryContainer.HAnchor = HAnchor.ParentLeftRight;  				primaryContainer.VAnchor = VAnchor.ParentBottomTop;    				FlowLayoutWidget primaryFlow = new FlowLayoutWidget(FlowDirection.LeftToRight);  				primaryFlow.HAnchor = HAnchor.ParentLeftRight;  				primaryFlow.VAnchor = VAnchor.ParentBottomTop;    				primaryFlow.AddChild(indicator);  				primaryFlow.AddChild(middleColumn);    				primaryContainer.AddChild(primaryFlow);    				rightButtonOverlay = new SlideWidget();  				rightButtonOverlay.VAnchor = VAnchor.ParentBottomTop;  				rightButtonOverlay.HAnchor = Agg.UI.HAnchor.ParentRight;  				rightButtonOverlay.Width = rightOverlayWidth;  				rightButtonOverlay.Visible = false;    				FlowLayoutWidget rightMiddleColumnContainer = new FlowLayoutWidget(FlowDirection.LeftToRight);  				rightMiddleColumnContainer.VAnchor = VAnchor.ParentBottomTop;  				{  					TextWidget viewLabel = new TextWidget("View".Localize());  					viewLabel.TextColor = RGBA_Bytes.White;  					viewLabel.VAnchor = VAnchor.ParentCenter;  					viewLabel.HAnchor = HAnchor.ParentCenter;    					FatFlatClickWidget viewButton = new FatFlatClickWidget(viewLabel);  					viewButton.VAnchor = VAnchor.ParentBottomTop;  					viewButton.BackgroundColor = ActiveTheme.Instance.SecondaryAccentColor;  					viewButton.Width = actionButtonSize;  					viewButton.Click += ViewButton_Click;  					rightMiddleColumnContainer.AddChild(viewButton);    					TextWidget printLabel = new TextWidget("Print".Localize());  					printLabel.TextColor = RGBA_Bytes.White;  					printLabel.VAnchor = VAnchor.ParentCenter;  					printLabel.HAnchor = HAnchor.ParentCenter;    					FatFlatClickWidget printButton = new FatFlatClickWidget(printLabel);  					printButton.VAnchor = VAnchor.ParentBottomTop;  					printButton.BackgroundColor = ActiveTheme.Instance.PrimaryAccentColor;  					printButton.Width = actionButtonSize;  					printButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							if (!PrinterCommunication.PrinterConnectionAndCommunication.Instance.PrintIsActive)  							{  								QueueData.Instance.AddItem(new PrintItemWrapper(printTask.PrintItemId)' 0);  								QueueData.Instance.SelectedIndex = 0;  								PrinterCommunication.PrinterConnectionAndCommunication.Instance.PrintActivePartIfPossible();  							}  							else  							{  								QueueData.Instance.AddItem(new PrintItemWrapper(printTask.PrintItemId));  							}  							rightButtonOverlay.SlideOut();  						});  					};  					rightMiddleColumnContainer.AddChild(printButton);  				}  				rightButtonOverlay.AddChild(rightMiddleColumnContainer);    				if (showTimestamp)  				{  					FlowLayoutWidget timestampColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  					timestampColumn.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  					timestampColumn.BackgroundColor = RGBA_Bytes.LightGray;  					timestampColumn.Padding = new BorderDouble(6' 0);    					FlowLayoutWidget startTimeContainer = new FlowLayoutWidget();  					startTimeContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					startTimeContainer.Padding = new BorderDouble(0' 3);    					string startLabelFull = "{0}:".FormatWith("Start".Localize().ToUpper());  					TextWidget startLabel = new TextWidget(startLabelFull' pointSize: 8 * pointSizeFactor);  					startLabel.TextColor = timeTextColor;    					string startTimeString = printTask.PrintStart.ToString("MMM d yyyy h:mm ") + printTask.PrintStart.ToString("tt").ToLower();  					TextWidget startDate = new TextWidget(startTimeString' pointSize: 12 * pointSizeFactor);  					startDate.TextColor = timeTextColor;    					startTimeContainer.AddChild(startLabel);  					startTimeContainer.AddChild(new HorizontalSpacer());  					startTimeContainer.AddChild(startDate);    					FlowLayoutWidget endTimeContainer = new FlowLayoutWidget();  					endTimeContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					endTimeContainer.Padding = new BorderDouble(0' 3);    					string endLabelFull = "{0}:".FormatWith("End".Localize().ToUpper());  					TextWidget endLabel = new TextWidget(endLabelFull' pointSize: 8 * pointSizeFactor);  					endLabel.TextColor = timeTextColor;    					string endTimeString;  					if (printTask.PrintEnd != DateTime.MinValue)  					{  						endTimeString = printTask.PrintEnd.ToString("MMM d yyyy h:mm ") + printTask.PrintEnd.ToString("tt").ToLower();  					}  					else  					{  						endTimeString = "Unknown".Localize();  					}    					TextWidget endDate = new TextWidget(endTimeString' pointSize: 12 * pointSizeFactor);  					endDate.TextColor = timeTextColor;    					endTimeContainer.AddChild(endLabel);  					endTimeContainer.AddChild(new HorizontalSpacer());  					endTimeContainer.AddChild(endDate);    					HorizontalLine horizontalLine = new HorizontalLine();  					horizontalLine.BackgroundColor = RGBA_Bytes.Gray;    					timestampColumn.AddChild(endTimeContainer);  					timestampColumn.AddChild(horizontalLine);  					timestampColumn.AddChild(startTimeContainer);    					timestampColumn.HAnchor = HAnchor.ParentLeftRight;  					timestampColumn.Padding = new BorderDouble(5' 0' 15' 0);    					primaryFlow.AddChild(timestampColumn);  				}    				mainContainer.AddChild(primaryContainer);  				mainContainer.AddChild(rightButtonOverlay);    				this.AddChild(mainContainer);  			}
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,C:\repos\MatterHackers_MatterControl\History\PrintHistoryListItem.cs,AddChildElements,The following statement contains a magic number: {  				GuiWidget indicator = new GuiWidget();  				indicator.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  				indicator.Width = 15;  				if (printTask.PrintComplete)  				{  					indicator.BackgroundColor = new RGBA_Bytes(38' 147' 51' 180);  				}  				else  				{  					indicator.BackgroundColor = new RGBA_Bytes(252' 209' 22' 180);  				}    				FlowLayoutWidget middleColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  				middleColumn.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				middleColumn.Padding = new BorderDouble(6' 3);  				{  					FlowLayoutWidget labelContainer = new FlowLayoutWidget();  					labelContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;    					string labelName = textInfo.ToTitleCase(printTask.PrintName);  					labelName = labelName.Replace('_'' ' ');  					partLabel = new TextWidget(labelName' pointSize: 15 * pointSizeFactor);  					partLabel.TextColor = WidgetTextColor;    					labelContainer.AddChild(partLabel);    					middleColumn.AddChild(labelContainer);  				}    				RGBA_Bytes timeTextColor = new RGBA_Bytes(34' 34' 34);    				FlowLayoutWidget buttonContainer = new FlowLayoutWidget();  				buttonContainer.Margin = new BorderDouble(0);  				buttonContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				{  					TextWidget statusIndicator = new TextWidget("Status: Completed".Localize()' pointSize: 8 * pointSizeFactor);  					statusIndicator.Margin = new BorderDouble(right: 3);  					//buttonContainer.AddChild(statusIndicator);    					string printTimeLabel = "Time".Localize().ToUpper();  					string printTimeLabelFull = string.Format("{0}: "' printTimeLabel);  					TextWidget timeLabel = new TextWidget(printTimeLabelFull' pointSize: 8 * pointSizeFactor);  					timeLabel.TextColor = timeTextColor;    					TextWidget timeIndicator;  					int minutes = printTask.PrintTimeMinutes;  					if (minutes < 0)  					{  						timeIndicator = new TextWidget("Unknown".Localize());  					}  					else if (minutes > 60)  					{  						timeIndicator = new TextWidget("{0}hrs {1}min".FormatWith(printTask.PrintTimeMinutes / 60' printTask.PrintTimeMinutes % 60)' pointSize: 12 * pointSizeFactor);  					}  					else  					{  						timeIndicator = new TextWidget(string.Format("{0}min"' printTask.PrintTimeMinutes)' pointSize: 12 * pointSizeFactor);  					}    					if (printTask.PercentDone > 0)  					{  						timeIndicator.AutoExpandBoundsToText = true;  						timeIndicator.Text += $" ({printTask.PercentDone:0.0}%)";  						  						if(printTask.RecoveryCount > 0)  						{  							if (printTask.RecoveryCount == 1)  							{  								timeIndicator.Text += " - " + "recovered once".Localize();  							}  							else  							{  								timeIndicator.Text += " - " + "recovered {0} times".FormatWith(printTask.RecoveryCount);  							}  						}  					}    					timeIndicator.Margin = new BorderDouble(right: 6);  					timeIndicator.TextColor = timeTextColor;    					buttonContainer.AddChild(timeLabel);  					buttonContainer.AddChild(timeIndicator);  					buttonContainer.AddChild(new HorizontalSpacer());  					middleColumn.AddChild(buttonContainer);  				}    				GuiWidget primaryContainer = new GuiWidget();  				primaryContainer.HAnchor = HAnchor.ParentLeftRight;  				primaryContainer.VAnchor = VAnchor.ParentBottomTop;    				FlowLayoutWidget primaryFlow = new FlowLayoutWidget(FlowDirection.LeftToRight);  				primaryFlow.HAnchor = HAnchor.ParentLeftRight;  				primaryFlow.VAnchor = VAnchor.ParentBottomTop;    				primaryFlow.AddChild(indicator);  				primaryFlow.AddChild(middleColumn);    				primaryContainer.AddChild(primaryFlow);    				rightButtonOverlay = new SlideWidget();  				rightButtonOverlay.VAnchor = VAnchor.ParentBottomTop;  				rightButtonOverlay.HAnchor = Agg.UI.HAnchor.ParentRight;  				rightButtonOverlay.Width = rightOverlayWidth;  				rightButtonOverlay.Visible = false;    				FlowLayoutWidget rightMiddleColumnContainer = new FlowLayoutWidget(FlowDirection.LeftToRight);  				rightMiddleColumnContainer.VAnchor = VAnchor.ParentBottomTop;  				{  					TextWidget viewLabel = new TextWidget("View".Localize());  					viewLabel.TextColor = RGBA_Bytes.White;  					viewLabel.VAnchor = VAnchor.ParentCenter;  					viewLabel.HAnchor = HAnchor.ParentCenter;    					FatFlatClickWidget viewButton = new FatFlatClickWidget(viewLabel);  					viewButton.VAnchor = VAnchor.ParentBottomTop;  					viewButton.BackgroundColor = ActiveTheme.Instance.SecondaryAccentColor;  					viewButton.Width = actionButtonSize;  					viewButton.Click += ViewButton_Click;  					rightMiddleColumnContainer.AddChild(viewButton);    					TextWidget printLabel = new TextWidget("Print".Localize());  					printLabel.TextColor = RGBA_Bytes.White;  					printLabel.VAnchor = VAnchor.ParentCenter;  					printLabel.HAnchor = HAnchor.ParentCenter;    					FatFlatClickWidget printButton = new FatFlatClickWidget(printLabel);  					printButton.VAnchor = VAnchor.ParentBottomTop;  					printButton.BackgroundColor = ActiveTheme.Instance.PrimaryAccentColor;  					printButton.Width = actionButtonSize;  					printButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							if (!PrinterCommunication.PrinterConnectionAndCommunication.Instance.PrintIsActive)  							{  								QueueData.Instance.AddItem(new PrintItemWrapper(printTask.PrintItemId)' 0);  								QueueData.Instance.SelectedIndex = 0;  								PrinterCommunication.PrinterConnectionAndCommunication.Instance.PrintActivePartIfPossible();  							}  							else  							{  								QueueData.Instance.AddItem(new PrintItemWrapper(printTask.PrintItemId));  							}  							rightButtonOverlay.SlideOut();  						});  					};  					rightMiddleColumnContainer.AddChild(printButton);  				}  				rightButtonOverlay.AddChild(rightMiddleColumnContainer);    				if (showTimestamp)  				{  					FlowLayoutWidget timestampColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  					timestampColumn.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  					timestampColumn.BackgroundColor = RGBA_Bytes.LightGray;  					timestampColumn.Padding = new BorderDouble(6' 0);    					FlowLayoutWidget startTimeContainer = new FlowLayoutWidget();  					startTimeContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					startTimeContainer.Padding = new BorderDouble(0' 3);    					string startLabelFull = "{0}:".FormatWith("Start".Localize().ToUpper());  					TextWidget startLabel = new TextWidget(startLabelFull' pointSize: 8 * pointSizeFactor);  					startLabel.TextColor = timeTextColor;    					string startTimeString = printTask.PrintStart.ToString("MMM d yyyy h:mm ") + printTask.PrintStart.ToString("tt").ToLower();  					TextWidget startDate = new TextWidget(startTimeString' pointSize: 12 * pointSizeFactor);  					startDate.TextColor = timeTextColor;    					startTimeContainer.AddChild(startLabel);  					startTimeContainer.AddChild(new HorizontalSpacer());  					startTimeContainer.AddChild(startDate);    					FlowLayoutWidget endTimeContainer = new FlowLayoutWidget();  					endTimeContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					endTimeContainer.Padding = new BorderDouble(0' 3);    					string endLabelFull = "{0}:".FormatWith("End".Localize().ToUpper());  					TextWidget endLabel = new TextWidget(endLabelFull' pointSize: 8 * pointSizeFactor);  					endLabel.TextColor = timeTextColor;    					string endTimeString;  					if (printTask.PrintEnd != DateTime.MinValue)  					{  						endTimeString = printTask.PrintEnd.ToString("MMM d yyyy h:mm ") + printTask.PrintEnd.ToString("tt").ToLower();  					}  					else  					{  						endTimeString = "Unknown".Localize();  					}    					TextWidget endDate = new TextWidget(endTimeString' pointSize: 12 * pointSizeFactor);  					endDate.TextColor = timeTextColor;    					endTimeContainer.AddChild(endLabel);  					endTimeContainer.AddChild(new HorizontalSpacer());  					endTimeContainer.AddChild(endDate);    					HorizontalLine horizontalLine = new HorizontalLine();  					horizontalLine.BackgroundColor = RGBA_Bytes.Gray;    					timestampColumn.AddChild(endTimeContainer);  					timestampColumn.AddChild(horizontalLine);  					timestampColumn.AddChild(startTimeContainer);    					timestampColumn.HAnchor = HAnchor.ParentLeftRight;  					timestampColumn.Padding = new BorderDouble(5' 0' 15' 0);    					primaryFlow.AddChild(timestampColumn);  				}    				mainContainer.AddChild(primaryContainer);  				mainContainer.AddChild(rightButtonOverlay);    				this.AddChild(mainContainer);  			}
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,C:\repos\MatterHackers_MatterControl\History\PrintHistoryListItem.cs,AddChildElements,The following statement contains a magic number: {  				GuiWidget indicator = new GuiWidget();  				indicator.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  				indicator.Width = 15;  				if (printTask.PrintComplete)  				{  					indicator.BackgroundColor = new RGBA_Bytes(38' 147' 51' 180);  				}  				else  				{  					indicator.BackgroundColor = new RGBA_Bytes(252' 209' 22' 180);  				}    				FlowLayoutWidget middleColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  				middleColumn.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				middleColumn.Padding = new BorderDouble(6' 3);  				{  					FlowLayoutWidget labelContainer = new FlowLayoutWidget();  					labelContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;    					string labelName = textInfo.ToTitleCase(printTask.PrintName);  					labelName = labelName.Replace('_'' ' ');  					partLabel = new TextWidget(labelName' pointSize: 15 * pointSizeFactor);  					partLabel.TextColor = WidgetTextColor;    					labelContainer.AddChild(partLabel);    					middleColumn.AddChild(labelContainer);  				}    				RGBA_Bytes timeTextColor = new RGBA_Bytes(34' 34' 34);    				FlowLayoutWidget buttonContainer = new FlowLayoutWidget();  				buttonContainer.Margin = new BorderDouble(0);  				buttonContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				{  					TextWidget statusIndicator = new TextWidget("Status: Completed".Localize()' pointSize: 8 * pointSizeFactor);  					statusIndicator.Margin = new BorderDouble(right: 3);  					//buttonContainer.AddChild(statusIndicator);    					string printTimeLabel = "Time".Localize().ToUpper();  					string printTimeLabelFull = string.Format("{0}: "' printTimeLabel);  					TextWidget timeLabel = new TextWidget(printTimeLabelFull' pointSize: 8 * pointSizeFactor);  					timeLabel.TextColor = timeTextColor;    					TextWidget timeIndicator;  					int minutes = printTask.PrintTimeMinutes;  					if (minutes < 0)  					{  						timeIndicator = new TextWidget("Unknown".Localize());  					}  					else if (minutes > 60)  					{  						timeIndicator = new TextWidget("{0}hrs {1}min".FormatWith(printTask.PrintTimeMinutes / 60' printTask.PrintTimeMinutes % 60)' pointSize: 12 * pointSizeFactor);  					}  					else  					{  						timeIndicator = new TextWidget(string.Format("{0}min"' printTask.PrintTimeMinutes)' pointSize: 12 * pointSizeFactor);  					}    					if (printTask.PercentDone > 0)  					{  						timeIndicator.AutoExpandBoundsToText = true;  						timeIndicator.Text += $" ({printTask.PercentDone:0.0}%)";  						  						if(printTask.RecoveryCount > 0)  						{  							if (printTask.RecoveryCount == 1)  							{  								timeIndicator.Text += " - " + "recovered once".Localize();  							}  							else  							{  								timeIndicator.Text += " - " + "recovered {0} times".FormatWith(printTask.RecoveryCount);  							}  						}  					}    					timeIndicator.Margin = new BorderDouble(right: 6);  					timeIndicator.TextColor = timeTextColor;    					buttonContainer.AddChild(timeLabel);  					buttonContainer.AddChild(timeIndicator);  					buttonContainer.AddChild(new HorizontalSpacer());  					middleColumn.AddChild(buttonContainer);  				}    				GuiWidget primaryContainer = new GuiWidget();  				primaryContainer.HAnchor = HAnchor.ParentLeftRight;  				primaryContainer.VAnchor = VAnchor.ParentBottomTop;    				FlowLayoutWidget primaryFlow = new FlowLayoutWidget(FlowDirection.LeftToRight);  				primaryFlow.HAnchor = HAnchor.ParentLeftRight;  				primaryFlow.VAnchor = VAnchor.ParentBottomTop;    				primaryFlow.AddChild(indicator);  				primaryFlow.AddChild(middleColumn);    				primaryContainer.AddChild(primaryFlow);    				rightButtonOverlay = new SlideWidget();  				rightButtonOverlay.VAnchor = VAnchor.ParentBottomTop;  				rightButtonOverlay.HAnchor = Agg.UI.HAnchor.ParentRight;  				rightButtonOverlay.Width = rightOverlayWidth;  				rightButtonOverlay.Visible = false;    				FlowLayoutWidget rightMiddleColumnContainer = new FlowLayoutWidget(FlowDirection.LeftToRight);  				rightMiddleColumnContainer.VAnchor = VAnchor.ParentBottomTop;  				{  					TextWidget viewLabel = new TextWidget("View".Localize());  					viewLabel.TextColor = RGBA_Bytes.White;  					viewLabel.VAnchor = VAnchor.ParentCenter;  					viewLabel.HAnchor = HAnchor.ParentCenter;    					FatFlatClickWidget viewButton = new FatFlatClickWidget(viewLabel);  					viewButton.VAnchor = VAnchor.ParentBottomTop;  					viewButton.BackgroundColor = ActiveTheme.Instance.SecondaryAccentColor;  					viewButton.Width = actionButtonSize;  					viewButton.Click += ViewButton_Click;  					rightMiddleColumnContainer.AddChild(viewButton);    					TextWidget printLabel = new TextWidget("Print".Localize());  					printLabel.TextColor = RGBA_Bytes.White;  					printLabel.VAnchor = VAnchor.ParentCenter;  					printLabel.HAnchor = HAnchor.ParentCenter;    					FatFlatClickWidget printButton = new FatFlatClickWidget(printLabel);  					printButton.VAnchor = VAnchor.ParentBottomTop;  					printButton.BackgroundColor = ActiveTheme.Instance.PrimaryAccentColor;  					printButton.Width = actionButtonSize;  					printButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							if (!PrinterCommunication.PrinterConnectionAndCommunication.Instance.PrintIsActive)  							{  								QueueData.Instance.AddItem(new PrintItemWrapper(printTask.PrintItemId)' 0);  								QueueData.Instance.SelectedIndex = 0;  								PrinterCommunication.PrinterConnectionAndCommunication.Instance.PrintActivePartIfPossible();  							}  							else  							{  								QueueData.Instance.AddItem(new PrintItemWrapper(printTask.PrintItemId));  							}  							rightButtonOverlay.SlideOut();  						});  					};  					rightMiddleColumnContainer.AddChild(printButton);  				}  				rightButtonOverlay.AddChild(rightMiddleColumnContainer);    				if (showTimestamp)  				{  					FlowLayoutWidget timestampColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  					timestampColumn.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  					timestampColumn.BackgroundColor = RGBA_Bytes.LightGray;  					timestampColumn.Padding = new BorderDouble(6' 0);    					FlowLayoutWidget startTimeContainer = new FlowLayoutWidget();  					startTimeContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					startTimeContainer.Padding = new BorderDouble(0' 3);    					string startLabelFull = "{0}:".FormatWith("Start".Localize().ToUpper());  					TextWidget startLabel = new TextWidget(startLabelFull' pointSize: 8 * pointSizeFactor);  					startLabel.TextColor = timeTextColor;    					string startTimeString = printTask.PrintStart.ToString("MMM d yyyy h:mm ") + printTask.PrintStart.ToString("tt").ToLower();  					TextWidget startDate = new TextWidget(startTimeString' pointSize: 12 * pointSizeFactor);  					startDate.TextColor = timeTextColor;    					startTimeContainer.AddChild(startLabel);  					startTimeContainer.AddChild(new HorizontalSpacer());  					startTimeContainer.AddChild(startDate);    					FlowLayoutWidget endTimeContainer = new FlowLayoutWidget();  					endTimeContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					endTimeContainer.Padding = new BorderDouble(0' 3);    					string endLabelFull = "{0}:".FormatWith("End".Localize().ToUpper());  					TextWidget endLabel = new TextWidget(endLabelFull' pointSize: 8 * pointSizeFactor);  					endLabel.TextColor = timeTextColor;    					string endTimeString;  					if (printTask.PrintEnd != DateTime.MinValue)  					{  						endTimeString = printTask.PrintEnd.ToString("MMM d yyyy h:mm ") + printTask.PrintEnd.ToString("tt").ToLower();  					}  					else  					{  						endTimeString = "Unknown".Localize();  					}    					TextWidget endDate = new TextWidget(endTimeString' pointSize: 12 * pointSizeFactor);  					endDate.TextColor = timeTextColor;    					endTimeContainer.AddChild(endLabel);  					endTimeContainer.AddChild(new HorizontalSpacer());  					endTimeContainer.AddChild(endDate);    					HorizontalLine horizontalLine = new HorizontalLine();  					horizontalLine.BackgroundColor = RGBA_Bytes.Gray;    					timestampColumn.AddChild(endTimeContainer);  					timestampColumn.AddChild(horizontalLine);  					timestampColumn.AddChild(startTimeContainer);    					timestampColumn.HAnchor = HAnchor.ParentLeftRight;  					timestampColumn.Padding = new BorderDouble(5' 0' 15' 0);    					primaryFlow.AddChild(timestampColumn);  				}    				mainContainer.AddChild(primaryContainer);  				mainContainer.AddChild(rightButtonOverlay);    				this.AddChild(mainContainer);  			}
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,C:\repos\MatterHackers_MatterControl\History\PrintHistoryListItem.cs,AddChildElements,The following statement contains a magic number: {  				GuiWidget indicator = new GuiWidget();  				indicator.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  				indicator.Width = 15;  				if (printTask.PrintComplete)  				{  					indicator.BackgroundColor = new RGBA_Bytes(38' 147' 51' 180);  				}  				else  				{  					indicator.BackgroundColor = new RGBA_Bytes(252' 209' 22' 180);  				}    				FlowLayoutWidget middleColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  				middleColumn.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				middleColumn.Padding = new BorderDouble(6' 3);  				{  					FlowLayoutWidget labelContainer = new FlowLayoutWidget();  					labelContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;    					string labelName = textInfo.ToTitleCase(printTask.PrintName);  					labelName = labelName.Replace('_'' ' ');  					partLabel = new TextWidget(labelName' pointSize: 15 * pointSizeFactor);  					partLabel.TextColor = WidgetTextColor;    					labelContainer.AddChild(partLabel);    					middleColumn.AddChild(labelContainer);  				}    				RGBA_Bytes timeTextColor = new RGBA_Bytes(34' 34' 34);    				FlowLayoutWidget buttonContainer = new FlowLayoutWidget();  				buttonContainer.Margin = new BorderDouble(0);  				buttonContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				{  					TextWidget statusIndicator = new TextWidget("Status: Completed".Localize()' pointSize: 8 * pointSizeFactor);  					statusIndicator.Margin = new BorderDouble(right: 3);  					//buttonContainer.AddChild(statusIndicator);    					string printTimeLabel = "Time".Localize().ToUpper();  					string printTimeLabelFull = string.Format("{0}: "' printTimeLabel);  					TextWidget timeLabel = new TextWidget(printTimeLabelFull' pointSize: 8 * pointSizeFactor);  					timeLabel.TextColor = timeTextColor;    					TextWidget timeIndicator;  					int minutes = printTask.PrintTimeMinutes;  					if (minutes < 0)  					{  						timeIndicator = new TextWidget("Unknown".Localize());  					}  					else if (minutes > 60)  					{  						timeIndicator = new TextWidget("{0}hrs {1}min".FormatWith(printTask.PrintTimeMinutes / 60' printTask.PrintTimeMinutes % 60)' pointSize: 12 * pointSizeFactor);  					}  					else  					{  						timeIndicator = new TextWidget(string.Format("{0}min"' printTask.PrintTimeMinutes)' pointSize: 12 * pointSizeFactor);  					}    					if (printTask.PercentDone > 0)  					{  						timeIndicator.AutoExpandBoundsToText = true;  						timeIndicator.Text += $" ({printTask.PercentDone:0.0}%)";  						  						if(printTask.RecoveryCount > 0)  						{  							if (printTask.RecoveryCount == 1)  							{  								timeIndicator.Text += " - " + "recovered once".Localize();  							}  							else  							{  								timeIndicator.Text += " - " + "recovered {0} times".FormatWith(printTask.RecoveryCount);  							}  						}  					}    					timeIndicator.Margin = new BorderDouble(right: 6);  					timeIndicator.TextColor = timeTextColor;    					buttonContainer.AddChild(timeLabel);  					buttonContainer.AddChild(timeIndicator);  					buttonContainer.AddChild(new HorizontalSpacer());  					middleColumn.AddChild(buttonContainer);  				}    				GuiWidget primaryContainer = new GuiWidget();  				primaryContainer.HAnchor = HAnchor.ParentLeftRight;  				primaryContainer.VAnchor = VAnchor.ParentBottomTop;    				FlowLayoutWidget primaryFlow = new FlowLayoutWidget(FlowDirection.LeftToRight);  				primaryFlow.HAnchor = HAnchor.ParentLeftRight;  				primaryFlow.VAnchor = VAnchor.ParentBottomTop;    				primaryFlow.AddChild(indicator);  				primaryFlow.AddChild(middleColumn);    				primaryContainer.AddChild(primaryFlow);    				rightButtonOverlay = new SlideWidget();  				rightButtonOverlay.VAnchor = VAnchor.ParentBottomTop;  				rightButtonOverlay.HAnchor = Agg.UI.HAnchor.ParentRight;  				rightButtonOverlay.Width = rightOverlayWidth;  				rightButtonOverlay.Visible = false;    				FlowLayoutWidget rightMiddleColumnContainer = new FlowLayoutWidget(FlowDirection.LeftToRight);  				rightMiddleColumnContainer.VAnchor = VAnchor.ParentBottomTop;  				{  					TextWidget viewLabel = new TextWidget("View".Localize());  					viewLabel.TextColor = RGBA_Bytes.White;  					viewLabel.VAnchor = VAnchor.ParentCenter;  					viewLabel.HAnchor = HAnchor.ParentCenter;    					FatFlatClickWidget viewButton = new FatFlatClickWidget(viewLabel);  					viewButton.VAnchor = VAnchor.ParentBottomTop;  					viewButton.BackgroundColor = ActiveTheme.Instance.SecondaryAccentColor;  					viewButton.Width = actionButtonSize;  					viewButton.Click += ViewButton_Click;  					rightMiddleColumnContainer.AddChild(viewButton);    					TextWidget printLabel = new TextWidget("Print".Localize());  					printLabel.TextColor = RGBA_Bytes.White;  					printLabel.VAnchor = VAnchor.ParentCenter;  					printLabel.HAnchor = HAnchor.ParentCenter;    					FatFlatClickWidget printButton = new FatFlatClickWidget(printLabel);  					printButton.VAnchor = VAnchor.ParentBottomTop;  					printButton.BackgroundColor = ActiveTheme.Instance.PrimaryAccentColor;  					printButton.Width = actionButtonSize;  					printButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							if (!PrinterCommunication.PrinterConnectionAndCommunication.Instance.PrintIsActive)  							{  								QueueData.Instance.AddItem(new PrintItemWrapper(printTask.PrintItemId)' 0);  								QueueData.Instance.SelectedIndex = 0;  								PrinterCommunication.PrinterConnectionAndCommunication.Instance.PrintActivePartIfPossible();  							}  							else  							{  								QueueData.Instance.AddItem(new PrintItemWrapper(printTask.PrintItemId));  							}  							rightButtonOverlay.SlideOut();  						});  					};  					rightMiddleColumnContainer.AddChild(printButton);  				}  				rightButtonOverlay.AddChild(rightMiddleColumnContainer);    				if (showTimestamp)  				{  					FlowLayoutWidget timestampColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  					timestampColumn.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  					timestampColumn.BackgroundColor = RGBA_Bytes.LightGray;  					timestampColumn.Padding = new BorderDouble(6' 0);    					FlowLayoutWidget startTimeContainer = new FlowLayoutWidget();  					startTimeContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					startTimeContainer.Padding = new BorderDouble(0' 3);    					string startLabelFull = "{0}:".FormatWith("Start".Localize().ToUpper());  					TextWidget startLabel = new TextWidget(startLabelFull' pointSize: 8 * pointSizeFactor);  					startLabel.TextColor = timeTextColor;    					string startTimeString = printTask.PrintStart.ToString("MMM d yyyy h:mm ") + printTask.PrintStart.ToString("tt").ToLower();  					TextWidget startDate = new TextWidget(startTimeString' pointSize: 12 * pointSizeFactor);  					startDate.TextColor = timeTextColor;    					startTimeContainer.AddChild(startLabel);  					startTimeContainer.AddChild(new HorizontalSpacer());  					startTimeContainer.AddChild(startDate);    					FlowLayoutWidget endTimeContainer = new FlowLayoutWidget();  					endTimeContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					endTimeContainer.Padding = new BorderDouble(0' 3);    					string endLabelFull = "{0}:".FormatWith("End".Localize().ToUpper());  					TextWidget endLabel = new TextWidget(endLabelFull' pointSize: 8 * pointSizeFactor);  					endLabel.TextColor = timeTextColor;    					string endTimeString;  					if (printTask.PrintEnd != DateTime.MinValue)  					{  						endTimeString = printTask.PrintEnd.ToString("MMM d yyyy h:mm ") + printTask.PrintEnd.ToString("tt").ToLower();  					}  					else  					{  						endTimeString = "Unknown".Localize();  					}    					TextWidget endDate = new TextWidget(endTimeString' pointSize: 12 * pointSizeFactor);  					endDate.TextColor = timeTextColor;    					endTimeContainer.AddChild(endLabel);  					endTimeContainer.AddChild(new HorizontalSpacer());  					endTimeContainer.AddChild(endDate);    					HorizontalLine horizontalLine = new HorizontalLine();  					horizontalLine.BackgroundColor = RGBA_Bytes.Gray;    					timestampColumn.AddChild(endTimeContainer);  					timestampColumn.AddChild(horizontalLine);  					timestampColumn.AddChild(startTimeContainer);    					timestampColumn.HAnchor = HAnchor.ParentLeftRight;  					timestampColumn.Padding = new BorderDouble(5' 0' 15' 0);    					primaryFlow.AddChild(timestampColumn);  				}    				mainContainer.AddChild(primaryContainer);  				mainContainer.AddChild(rightButtonOverlay);    				this.AddChild(mainContainer);  			}
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,C:\repos\MatterHackers_MatterControl\History\PrintHistoryListItem.cs,AddChildElements,The following statement contains a magic number: {  				GuiWidget indicator = new GuiWidget();  				indicator.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  				indicator.Width = 15;  				if (printTask.PrintComplete)  				{  					indicator.BackgroundColor = new RGBA_Bytes(38' 147' 51' 180);  				}  				else  				{  					indicator.BackgroundColor = new RGBA_Bytes(252' 209' 22' 180);  				}    				FlowLayoutWidget middleColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  				middleColumn.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				middleColumn.Padding = new BorderDouble(6' 3);  				{  					FlowLayoutWidget labelContainer = new FlowLayoutWidget();  					labelContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;    					string labelName = textInfo.ToTitleCase(printTask.PrintName);  					labelName = labelName.Replace('_'' ' ');  					partLabel = new TextWidget(labelName' pointSize: 15 * pointSizeFactor);  					partLabel.TextColor = WidgetTextColor;    					labelContainer.AddChild(partLabel);    					middleColumn.AddChild(labelContainer);  				}    				RGBA_Bytes timeTextColor = new RGBA_Bytes(34' 34' 34);    				FlowLayoutWidget buttonContainer = new FlowLayoutWidget();  				buttonContainer.Margin = new BorderDouble(0);  				buttonContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				{  					TextWidget statusIndicator = new TextWidget("Status: Completed".Localize()' pointSize: 8 * pointSizeFactor);  					statusIndicator.Margin = new BorderDouble(right: 3);  					//buttonContainer.AddChild(statusIndicator);    					string printTimeLabel = "Time".Localize().ToUpper();  					string printTimeLabelFull = string.Format("{0}: "' printTimeLabel);  					TextWidget timeLabel = new TextWidget(printTimeLabelFull' pointSize: 8 * pointSizeFactor);  					timeLabel.TextColor = timeTextColor;    					TextWidget timeIndicator;  					int minutes = printTask.PrintTimeMinutes;  					if (minutes < 0)  					{  						timeIndicator = new TextWidget("Unknown".Localize());  					}  					else if (minutes > 60)  					{  						timeIndicator = new TextWidget("{0}hrs {1}min".FormatWith(printTask.PrintTimeMinutes / 60' printTask.PrintTimeMinutes % 60)' pointSize: 12 * pointSizeFactor);  					}  					else  					{  						timeIndicator = new TextWidget(string.Format("{0}min"' printTask.PrintTimeMinutes)' pointSize: 12 * pointSizeFactor);  					}    					if (printTask.PercentDone > 0)  					{  						timeIndicator.AutoExpandBoundsToText = true;  						timeIndicator.Text += $" ({printTask.PercentDone:0.0}%)";  						  						if(printTask.RecoveryCount > 0)  						{  							if (printTask.RecoveryCount == 1)  							{  								timeIndicator.Text += " - " + "recovered once".Localize();  							}  							else  							{  								timeIndicator.Text += " - " + "recovered {0} times".FormatWith(printTask.RecoveryCount);  							}  						}  					}    					timeIndicator.Margin = new BorderDouble(right: 6);  					timeIndicator.TextColor = timeTextColor;    					buttonContainer.AddChild(timeLabel);  					buttonContainer.AddChild(timeIndicator);  					buttonContainer.AddChild(new HorizontalSpacer());  					middleColumn.AddChild(buttonContainer);  				}    				GuiWidget primaryContainer = new GuiWidget();  				primaryContainer.HAnchor = HAnchor.ParentLeftRight;  				primaryContainer.VAnchor = VAnchor.ParentBottomTop;    				FlowLayoutWidget primaryFlow = new FlowLayoutWidget(FlowDirection.LeftToRight);  				primaryFlow.HAnchor = HAnchor.ParentLeftRight;  				primaryFlow.VAnchor = VAnchor.ParentBottomTop;    				primaryFlow.AddChild(indicator);  				primaryFlow.AddChild(middleColumn);    				primaryContainer.AddChild(primaryFlow);    				rightButtonOverlay = new SlideWidget();  				rightButtonOverlay.VAnchor = VAnchor.ParentBottomTop;  				rightButtonOverlay.HAnchor = Agg.UI.HAnchor.ParentRight;  				rightButtonOverlay.Width = rightOverlayWidth;  				rightButtonOverlay.Visible = false;    				FlowLayoutWidget rightMiddleColumnContainer = new FlowLayoutWidget(FlowDirection.LeftToRight);  				rightMiddleColumnContainer.VAnchor = VAnchor.ParentBottomTop;  				{  					TextWidget viewLabel = new TextWidget("View".Localize());  					viewLabel.TextColor = RGBA_Bytes.White;  					viewLabel.VAnchor = VAnchor.ParentCenter;  					viewLabel.HAnchor = HAnchor.ParentCenter;    					FatFlatClickWidget viewButton = new FatFlatClickWidget(viewLabel);  					viewButton.VAnchor = VAnchor.ParentBottomTop;  					viewButton.BackgroundColor = ActiveTheme.Instance.SecondaryAccentColor;  					viewButton.Width = actionButtonSize;  					viewButton.Click += ViewButton_Click;  					rightMiddleColumnContainer.AddChild(viewButton);    					TextWidget printLabel = new TextWidget("Print".Localize());  					printLabel.TextColor = RGBA_Bytes.White;  					printLabel.VAnchor = VAnchor.ParentCenter;  					printLabel.HAnchor = HAnchor.ParentCenter;    					FatFlatClickWidget printButton = new FatFlatClickWidget(printLabel);  					printButton.VAnchor = VAnchor.ParentBottomTop;  					printButton.BackgroundColor = ActiveTheme.Instance.PrimaryAccentColor;  					printButton.Width = actionButtonSize;  					printButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							if (!PrinterCommunication.PrinterConnectionAndCommunication.Instance.PrintIsActive)  							{  								QueueData.Instance.AddItem(new PrintItemWrapper(printTask.PrintItemId)' 0);  								QueueData.Instance.SelectedIndex = 0;  								PrinterCommunication.PrinterConnectionAndCommunication.Instance.PrintActivePartIfPossible();  							}  							else  							{  								QueueData.Instance.AddItem(new PrintItemWrapper(printTask.PrintItemId));  							}  							rightButtonOverlay.SlideOut();  						});  					};  					rightMiddleColumnContainer.AddChild(printButton);  				}  				rightButtonOverlay.AddChild(rightMiddleColumnContainer);    				if (showTimestamp)  				{  					FlowLayoutWidget timestampColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  					timestampColumn.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  					timestampColumn.BackgroundColor = RGBA_Bytes.LightGray;  					timestampColumn.Padding = new BorderDouble(6' 0);    					FlowLayoutWidget startTimeContainer = new FlowLayoutWidget();  					startTimeContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					startTimeContainer.Padding = new BorderDouble(0' 3);    					string startLabelFull = "{0}:".FormatWith("Start".Localize().ToUpper());  					TextWidget startLabel = new TextWidget(startLabelFull' pointSize: 8 * pointSizeFactor);  					startLabel.TextColor = timeTextColor;    					string startTimeString = printTask.PrintStart.ToString("MMM d yyyy h:mm ") + printTask.PrintStart.ToString("tt").ToLower();  					TextWidget startDate = new TextWidget(startTimeString' pointSize: 12 * pointSizeFactor);  					startDate.TextColor = timeTextColor;    					startTimeContainer.AddChild(startLabel);  					startTimeContainer.AddChild(new HorizontalSpacer());  					startTimeContainer.AddChild(startDate);    					FlowLayoutWidget endTimeContainer = new FlowLayoutWidget();  					endTimeContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					endTimeContainer.Padding = new BorderDouble(0' 3);    					string endLabelFull = "{0}:".FormatWith("End".Localize().ToUpper());  					TextWidget endLabel = new TextWidget(endLabelFull' pointSize: 8 * pointSizeFactor);  					endLabel.TextColor = timeTextColor;    					string endTimeString;  					if (printTask.PrintEnd != DateTime.MinValue)  					{  						endTimeString = printTask.PrintEnd.ToString("MMM d yyyy h:mm ") + printTask.PrintEnd.ToString("tt").ToLower();  					}  					else  					{  						endTimeString = "Unknown".Localize();  					}    					TextWidget endDate = new TextWidget(endTimeString' pointSize: 12 * pointSizeFactor);  					endDate.TextColor = timeTextColor;    					endTimeContainer.AddChild(endLabel);  					endTimeContainer.AddChild(new HorizontalSpacer());  					endTimeContainer.AddChild(endDate);    					HorizontalLine horizontalLine = new HorizontalLine();  					horizontalLine.BackgroundColor = RGBA_Bytes.Gray;    					timestampColumn.AddChild(endTimeContainer);  					timestampColumn.AddChild(horizontalLine);  					timestampColumn.AddChild(startTimeContainer);    					timestampColumn.HAnchor = HAnchor.ParentLeftRight;  					timestampColumn.Padding = new BorderDouble(5' 0' 15' 0);    					primaryFlow.AddChild(timestampColumn);  				}    				mainContainer.AddChild(primaryContainer);  				mainContainer.AddChild(rightButtonOverlay);    				this.AddChild(mainContainer);  			}
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,C:\repos\MatterHackers_MatterControl\History\PrintHistoryListItem.cs,AddChildElements,The following statement contains a magic number: {  				GuiWidget indicator = new GuiWidget();  				indicator.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  				indicator.Width = 15;  				if (printTask.PrintComplete)  				{  					indicator.BackgroundColor = new RGBA_Bytes(38' 147' 51' 180);  				}  				else  				{  					indicator.BackgroundColor = new RGBA_Bytes(252' 209' 22' 180);  				}    				FlowLayoutWidget middleColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  				middleColumn.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				middleColumn.Padding = new BorderDouble(6' 3);  				{  					FlowLayoutWidget labelContainer = new FlowLayoutWidget();  					labelContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;    					string labelName = textInfo.ToTitleCase(printTask.PrintName);  					labelName = labelName.Replace('_'' ' ');  					partLabel = new TextWidget(labelName' pointSize: 15 * pointSizeFactor);  					partLabel.TextColor = WidgetTextColor;    					labelContainer.AddChild(partLabel);    					middleColumn.AddChild(labelContainer);  				}    				RGBA_Bytes timeTextColor = new RGBA_Bytes(34' 34' 34);    				FlowLayoutWidget buttonContainer = new FlowLayoutWidget();  				buttonContainer.Margin = new BorderDouble(0);  				buttonContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				{  					TextWidget statusIndicator = new TextWidget("Status: Completed".Localize()' pointSize: 8 * pointSizeFactor);  					statusIndicator.Margin = new BorderDouble(right: 3);  					//buttonContainer.AddChild(statusIndicator);    					string printTimeLabel = "Time".Localize().ToUpper();  					string printTimeLabelFull = string.Format("{0}: "' printTimeLabel);  					TextWidget timeLabel = new TextWidget(printTimeLabelFull' pointSize: 8 * pointSizeFactor);  					timeLabel.TextColor = timeTextColor;    					TextWidget timeIndicator;  					int minutes = printTask.PrintTimeMinutes;  					if (minutes < 0)  					{  						timeIndicator = new TextWidget("Unknown".Localize());  					}  					else if (minutes > 60)  					{  						timeIndicator = new TextWidget("{0}hrs {1}min".FormatWith(printTask.PrintTimeMinutes / 60' printTask.PrintTimeMinutes % 60)' pointSize: 12 * pointSizeFactor);  					}  					else  					{  						timeIndicator = new TextWidget(string.Format("{0}min"' printTask.PrintTimeMinutes)' pointSize: 12 * pointSizeFactor);  					}    					if (printTask.PercentDone > 0)  					{  						timeIndicator.AutoExpandBoundsToText = true;  						timeIndicator.Text += $" ({printTask.PercentDone:0.0}%)";  						  						if(printTask.RecoveryCount > 0)  						{  							if (printTask.RecoveryCount == 1)  							{  								timeIndicator.Text += " - " + "recovered once".Localize();  							}  							else  							{  								timeIndicator.Text += " - " + "recovered {0} times".FormatWith(printTask.RecoveryCount);  							}  						}  					}    					timeIndicator.Margin = new BorderDouble(right: 6);  					timeIndicator.TextColor = timeTextColor;    					buttonContainer.AddChild(timeLabel);  					buttonContainer.AddChild(timeIndicator);  					buttonContainer.AddChild(new HorizontalSpacer());  					middleColumn.AddChild(buttonContainer);  				}    				GuiWidget primaryContainer = new GuiWidget();  				primaryContainer.HAnchor = HAnchor.ParentLeftRight;  				primaryContainer.VAnchor = VAnchor.ParentBottomTop;    				FlowLayoutWidget primaryFlow = new FlowLayoutWidget(FlowDirection.LeftToRight);  				primaryFlow.HAnchor = HAnchor.ParentLeftRight;  				primaryFlow.VAnchor = VAnchor.ParentBottomTop;    				primaryFlow.AddChild(indicator);  				primaryFlow.AddChild(middleColumn);    				primaryContainer.AddChild(primaryFlow);    				rightButtonOverlay = new SlideWidget();  				rightButtonOverlay.VAnchor = VAnchor.ParentBottomTop;  				rightButtonOverlay.HAnchor = Agg.UI.HAnchor.ParentRight;  				rightButtonOverlay.Width = rightOverlayWidth;  				rightButtonOverlay.Visible = false;    				FlowLayoutWidget rightMiddleColumnContainer = new FlowLayoutWidget(FlowDirection.LeftToRight);  				rightMiddleColumnContainer.VAnchor = VAnchor.ParentBottomTop;  				{  					TextWidget viewLabel = new TextWidget("View".Localize());  					viewLabel.TextColor = RGBA_Bytes.White;  					viewLabel.VAnchor = VAnchor.ParentCenter;  					viewLabel.HAnchor = HAnchor.ParentCenter;    					FatFlatClickWidget viewButton = new FatFlatClickWidget(viewLabel);  					viewButton.VAnchor = VAnchor.ParentBottomTop;  					viewButton.BackgroundColor = ActiveTheme.Instance.SecondaryAccentColor;  					viewButton.Width = actionButtonSize;  					viewButton.Click += ViewButton_Click;  					rightMiddleColumnContainer.AddChild(viewButton);    					TextWidget printLabel = new TextWidget("Print".Localize());  					printLabel.TextColor = RGBA_Bytes.White;  					printLabel.VAnchor = VAnchor.ParentCenter;  					printLabel.HAnchor = HAnchor.ParentCenter;    					FatFlatClickWidget printButton = new FatFlatClickWidget(printLabel);  					printButton.VAnchor = VAnchor.ParentBottomTop;  					printButton.BackgroundColor = ActiveTheme.Instance.PrimaryAccentColor;  					printButton.Width = actionButtonSize;  					printButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							if (!PrinterCommunication.PrinterConnectionAndCommunication.Instance.PrintIsActive)  							{  								QueueData.Instance.AddItem(new PrintItemWrapper(printTask.PrintItemId)' 0);  								QueueData.Instance.SelectedIndex = 0;  								PrinterCommunication.PrinterConnectionAndCommunication.Instance.PrintActivePartIfPossible();  							}  							else  							{  								QueueData.Instance.AddItem(new PrintItemWrapper(printTask.PrintItemId));  							}  							rightButtonOverlay.SlideOut();  						});  					};  					rightMiddleColumnContainer.AddChild(printButton);  				}  				rightButtonOverlay.AddChild(rightMiddleColumnContainer);    				if (showTimestamp)  				{  					FlowLayoutWidget timestampColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  					timestampColumn.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  					timestampColumn.BackgroundColor = RGBA_Bytes.LightGray;  					timestampColumn.Padding = new BorderDouble(6' 0);    					FlowLayoutWidget startTimeContainer = new FlowLayoutWidget();  					startTimeContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					startTimeContainer.Padding = new BorderDouble(0' 3);    					string startLabelFull = "{0}:".FormatWith("Start".Localize().ToUpper());  					TextWidget startLabel = new TextWidget(startLabelFull' pointSize: 8 * pointSizeFactor);  					startLabel.TextColor = timeTextColor;    					string startTimeString = printTask.PrintStart.ToString("MMM d yyyy h:mm ") + printTask.PrintStart.ToString("tt").ToLower();  					TextWidget startDate = new TextWidget(startTimeString' pointSize: 12 * pointSizeFactor);  					startDate.TextColor = timeTextColor;    					startTimeContainer.AddChild(startLabel);  					startTimeContainer.AddChild(new HorizontalSpacer());  					startTimeContainer.AddChild(startDate);    					FlowLayoutWidget endTimeContainer = new FlowLayoutWidget();  					endTimeContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					endTimeContainer.Padding = new BorderDouble(0' 3);    					string endLabelFull = "{0}:".FormatWith("End".Localize().ToUpper());  					TextWidget endLabel = new TextWidget(endLabelFull' pointSize: 8 * pointSizeFactor);  					endLabel.TextColor = timeTextColor;    					string endTimeString;  					if (printTask.PrintEnd != DateTime.MinValue)  					{  						endTimeString = printTask.PrintEnd.ToString("MMM d yyyy h:mm ") + printTask.PrintEnd.ToString("tt").ToLower();  					}  					else  					{  						endTimeString = "Unknown".Localize();  					}    					TextWidget endDate = new TextWidget(endTimeString' pointSize: 12 * pointSizeFactor);  					endDate.TextColor = timeTextColor;    					endTimeContainer.AddChild(endLabel);  					endTimeContainer.AddChild(new HorizontalSpacer());  					endTimeContainer.AddChild(endDate);    					HorizontalLine horizontalLine = new HorizontalLine();  					horizontalLine.BackgroundColor = RGBA_Bytes.Gray;    					timestampColumn.AddChild(endTimeContainer);  					timestampColumn.AddChild(horizontalLine);  					timestampColumn.AddChild(startTimeContainer);    					timestampColumn.HAnchor = HAnchor.ParentLeftRight;  					timestampColumn.Padding = new BorderDouble(5' 0' 15' 0);    					primaryFlow.AddChild(timestampColumn);  				}    				mainContainer.AddChild(primaryContainer);  				mainContainer.AddChild(rightButtonOverlay);    				this.AddChild(mainContainer);  			}
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,C:\repos\MatterHackers_MatterControl\History\PrintHistoryListItem.cs,AddChildElements,The following statement contains a magic number: {  				GuiWidget indicator = new GuiWidget();  				indicator.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  				indicator.Width = 15;  				if (printTask.PrintComplete)  				{  					indicator.BackgroundColor = new RGBA_Bytes(38' 147' 51' 180);  				}  				else  				{  					indicator.BackgroundColor = new RGBA_Bytes(252' 209' 22' 180);  				}    				FlowLayoutWidget middleColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  				middleColumn.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				middleColumn.Padding = new BorderDouble(6' 3);  				{  					FlowLayoutWidget labelContainer = new FlowLayoutWidget();  					labelContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;    					string labelName = textInfo.ToTitleCase(printTask.PrintName);  					labelName = labelName.Replace('_'' ' ');  					partLabel = new TextWidget(labelName' pointSize: 15 * pointSizeFactor);  					partLabel.TextColor = WidgetTextColor;    					labelContainer.AddChild(partLabel);    					middleColumn.AddChild(labelContainer);  				}    				RGBA_Bytes timeTextColor = new RGBA_Bytes(34' 34' 34);    				FlowLayoutWidget buttonContainer = new FlowLayoutWidget();  				buttonContainer.Margin = new BorderDouble(0);  				buttonContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				{  					TextWidget statusIndicator = new TextWidget("Status: Completed".Localize()' pointSize: 8 * pointSizeFactor);  					statusIndicator.Margin = new BorderDouble(right: 3);  					//buttonContainer.AddChild(statusIndicator);    					string printTimeLabel = "Time".Localize().ToUpper();  					string printTimeLabelFull = string.Format("{0}: "' printTimeLabel);  					TextWidget timeLabel = new TextWidget(printTimeLabelFull' pointSize: 8 * pointSizeFactor);  					timeLabel.TextColor = timeTextColor;    					TextWidget timeIndicator;  					int minutes = printTask.PrintTimeMinutes;  					if (minutes < 0)  					{  						timeIndicator = new TextWidget("Unknown".Localize());  					}  					else if (minutes > 60)  					{  						timeIndicator = new TextWidget("{0}hrs {1}min".FormatWith(printTask.PrintTimeMinutes / 60' printTask.PrintTimeMinutes % 60)' pointSize: 12 * pointSizeFactor);  					}  					else  					{  						timeIndicator = new TextWidget(string.Format("{0}min"' printTask.PrintTimeMinutes)' pointSize: 12 * pointSizeFactor);  					}    					if (printTask.PercentDone > 0)  					{  						timeIndicator.AutoExpandBoundsToText = true;  						timeIndicator.Text += $" ({printTask.PercentDone:0.0}%)";  						  						if(printTask.RecoveryCount > 0)  						{  							if (printTask.RecoveryCount == 1)  							{  								timeIndicator.Text += " - " + "recovered once".Localize();  							}  							else  							{  								timeIndicator.Text += " - " + "recovered {0} times".FormatWith(printTask.RecoveryCount);  							}  						}  					}    					timeIndicator.Margin = new BorderDouble(right: 6);  					timeIndicator.TextColor = timeTextColor;    					buttonContainer.AddChild(timeLabel);  					buttonContainer.AddChild(timeIndicator);  					buttonContainer.AddChild(new HorizontalSpacer());  					middleColumn.AddChild(buttonContainer);  				}    				GuiWidget primaryContainer = new GuiWidget();  				primaryContainer.HAnchor = HAnchor.ParentLeftRight;  				primaryContainer.VAnchor = VAnchor.ParentBottomTop;    				FlowLayoutWidget primaryFlow = new FlowLayoutWidget(FlowDirection.LeftToRight);  				primaryFlow.HAnchor = HAnchor.ParentLeftRight;  				primaryFlow.VAnchor = VAnchor.ParentBottomTop;    				primaryFlow.AddChild(indicator);  				primaryFlow.AddChild(middleColumn);    				primaryContainer.AddChild(primaryFlow);    				rightButtonOverlay = new SlideWidget();  				rightButtonOverlay.VAnchor = VAnchor.ParentBottomTop;  				rightButtonOverlay.HAnchor = Agg.UI.HAnchor.ParentRight;  				rightButtonOverlay.Width = rightOverlayWidth;  				rightButtonOverlay.Visible = false;    				FlowLayoutWidget rightMiddleColumnContainer = new FlowLayoutWidget(FlowDirection.LeftToRight);  				rightMiddleColumnContainer.VAnchor = VAnchor.ParentBottomTop;  				{  					TextWidget viewLabel = new TextWidget("View".Localize());  					viewLabel.TextColor = RGBA_Bytes.White;  					viewLabel.VAnchor = VAnchor.ParentCenter;  					viewLabel.HAnchor = HAnchor.ParentCenter;    					FatFlatClickWidget viewButton = new FatFlatClickWidget(viewLabel);  					viewButton.VAnchor = VAnchor.ParentBottomTop;  					viewButton.BackgroundColor = ActiveTheme.Instance.SecondaryAccentColor;  					viewButton.Width = actionButtonSize;  					viewButton.Click += ViewButton_Click;  					rightMiddleColumnContainer.AddChild(viewButton);    					TextWidget printLabel = new TextWidget("Print".Localize());  					printLabel.TextColor = RGBA_Bytes.White;  					printLabel.VAnchor = VAnchor.ParentCenter;  					printLabel.HAnchor = HAnchor.ParentCenter;    					FatFlatClickWidget printButton = new FatFlatClickWidget(printLabel);  					printButton.VAnchor = VAnchor.ParentBottomTop;  					printButton.BackgroundColor = ActiveTheme.Instance.PrimaryAccentColor;  					printButton.Width = actionButtonSize;  					printButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							if (!PrinterCommunication.PrinterConnectionAndCommunication.Instance.PrintIsActive)  							{  								QueueData.Instance.AddItem(new PrintItemWrapper(printTask.PrintItemId)' 0);  								QueueData.Instance.SelectedIndex = 0;  								PrinterCommunication.PrinterConnectionAndCommunication.Instance.PrintActivePartIfPossible();  							}  							else  							{  								QueueData.Instance.AddItem(new PrintItemWrapper(printTask.PrintItemId));  							}  							rightButtonOverlay.SlideOut();  						});  					};  					rightMiddleColumnContainer.AddChild(printButton);  				}  				rightButtonOverlay.AddChild(rightMiddleColumnContainer);    				if (showTimestamp)  				{  					FlowLayoutWidget timestampColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  					timestampColumn.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  					timestampColumn.BackgroundColor = RGBA_Bytes.LightGray;  					timestampColumn.Padding = new BorderDouble(6' 0);    					FlowLayoutWidget startTimeContainer = new FlowLayoutWidget();  					startTimeContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					startTimeContainer.Padding = new BorderDouble(0' 3);    					string startLabelFull = "{0}:".FormatWith("Start".Localize().ToUpper());  					TextWidget startLabel = new TextWidget(startLabelFull' pointSize: 8 * pointSizeFactor);  					startLabel.TextColor = timeTextColor;    					string startTimeString = printTask.PrintStart.ToString("MMM d yyyy h:mm ") + printTask.PrintStart.ToString("tt").ToLower();  					TextWidget startDate = new TextWidget(startTimeString' pointSize: 12 * pointSizeFactor);  					startDate.TextColor = timeTextColor;    					startTimeContainer.AddChild(startLabel);  					startTimeContainer.AddChild(new HorizontalSpacer());  					startTimeContainer.AddChild(startDate);    					FlowLayoutWidget endTimeContainer = new FlowLayoutWidget();  					endTimeContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					endTimeContainer.Padding = new BorderDouble(0' 3);    					string endLabelFull = "{0}:".FormatWith("End".Localize().ToUpper());  					TextWidget endLabel = new TextWidget(endLabelFull' pointSize: 8 * pointSizeFactor);  					endLabel.TextColor = timeTextColor;    					string endTimeString;  					if (printTask.PrintEnd != DateTime.MinValue)  					{  						endTimeString = printTask.PrintEnd.ToString("MMM d yyyy h:mm ") + printTask.PrintEnd.ToString("tt").ToLower();  					}  					else  					{  						endTimeString = "Unknown".Localize();  					}    					TextWidget endDate = new TextWidget(endTimeString' pointSize: 12 * pointSizeFactor);  					endDate.TextColor = timeTextColor;    					endTimeContainer.AddChild(endLabel);  					endTimeContainer.AddChild(new HorizontalSpacer());  					endTimeContainer.AddChild(endDate);    					HorizontalLine horizontalLine = new HorizontalLine();  					horizontalLine.BackgroundColor = RGBA_Bytes.Gray;    					timestampColumn.AddChild(endTimeContainer);  					timestampColumn.AddChild(horizontalLine);  					timestampColumn.AddChild(startTimeContainer);    					timestampColumn.HAnchor = HAnchor.ParentLeftRight;  					timestampColumn.Padding = new BorderDouble(5' 0' 15' 0);    					primaryFlow.AddChild(timestampColumn);  				}    				mainContainer.AddChild(primaryContainer);  				mainContainer.AddChild(rightButtonOverlay);    				this.AddChild(mainContainer);  			}
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,C:\repos\MatterHackers_MatterControl\History\PrintHistoryListItem.cs,AddChildElements,The following statement contains a magic number: {  				GuiWidget indicator = new GuiWidget();  				indicator.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  				indicator.Width = 15;  				if (printTask.PrintComplete)  				{  					indicator.BackgroundColor = new RGBA_Bytes(38' 147' 51' 180);  				}  				else  				{  					indicator.BackgroundColor = new RGBA_Bytes(252' 209' 22' 180);  				}    				FlowLayoutWidget middleColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  				middleColumn.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				middleColumn.Padding = new BorderDouble(6' 3);  				{  					FlowLayoutWidget labelContainer = new FlowLayoutWidget();  					labelContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;    					string labelName = textInfo.ToTitleCase(printTask.PrintName);  					labelName = labelName.Replace('_'' ' ');  					partLabel = new TextWidget(labelName' pointSize: 15 * pointSizeFactor);  					partLabel.TextColor = WidgetTextColor;    					labelContainer.AddChild(partLabel);    					middleColumn.AddChild(labelContainer);  				}    				RGBA_Bytes timeTextColor = new RGBA_Bytes(34' 34' 34);    				FlowLayoutWidget buttonContainer = new FlowLayoutWidget();  				buttonContainer.Margin = new BorderDouble(0);  				buttonContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				{  					TextWidget statusIndicator = new TextWidget("Status: Completed".Localize()' pointSize: 8 * pointSizeFactor);  					statusIndicator.Margin = new BorderDouble(right: 3);  					//buttonContainer.AddChild(statusIndicator);    					string printTimeLabel = "Time".Localize().ToUpper();  					string printTimeLabelFull = string.Format("{0}: "' printTimeLabel);  					TextWidget timeLabel = new TextWidget(printTimeLabelFull' pointSize: 8 * pointSizeFactor);  					timeLabel.TextColor = timeTextColor;    					TextWidget timeIndicator;  					int minutes = printTask.PrintTimeMinutes;  					if (minutes < 0)  					{  						timeIndicator = new TextWidget("Unknown".Localize());  					}  					else if (minutes > 60)  					{  						timeIndicator = new TextWidget("{0}hrs {1}min".FormatWith(printTask.PrintTimeMinutes / 60' printTask.PrintTimeMinutes % 60)' pointSize: 12 * pointSizeFactor);  					}  					else  					{  						timeIndicator = new TextWidget(string.Format("{0}min"' printTask.PrintTimeMinutes)' pointSize: 12 * pointSizeFactor);  					}    					if (printTask.PercentDone > 0)  					{  						timeIndicator.AutoExpandBoundsToText = true;  						timeIndicator.Text += $" ({printTask.PercentDone:0.0}%)";  						  						if(printTask.RecoveryCount > 0)  						{  							if (printTask.RecoveryCount == 1)  							{  								timeIndicator.Text += " - " + "recovered once".Localize();  							}  							else  							{  								timeIndicator.Text += " - " + "recovered {0} times".FormatWith(printTask.RecoveryCount);  							}  						}  					}    					timeIndicator.Margin = new BorderDouble(right: 6);  					timeIndicator.TextColor = timeTextColor;    					buttonContainer.AddChild(timeLabel);  					buttonContainer.AddChild(timeIndicator);  					buttonContainer.AddChild(new HorizontalSpacer());  					middleColumn.AddChild(buttonContainer);  				}    				GuiWidget primaryContainer = new GuiWidget();  				primaryContainer.HAnchor = HAnchor.ParentLeftRight;  				primaryContainer.VAnchor = VAnchor.ParentBottomTop;    				FlowLayoutWidget primaryFlow = new FlowLayoutWidget(FlowDirection.LeftToRight);  				primaryFlow.HAnchor = HAnchor.ParentLeftRight;  				primaryFlow.VAnchor = VAnchor.ParentBottomTop;    				primaryFlow.AddChild(indicator);  				primaryFlow.AddChild(middleColumn);    				primaryContainer.AddChild(primaryFlow);    				rightButtonOverlay = new SlideWidget();  				rightButtonOverlay.VAnchor = VAnchor.ParentBottomTop;  				rightButtonOverlay.HAnchor = Agg.UI.HAnchor.ParentRight;  				rightButtonOverlay.Width = rightOverlayWidth;  				rightButtonOverlay.Visible = false;    				FlowLayoutWidget rightMiddleColumnContainer = new FlowLayoutWidget(FlowDirection.LeftToRight);  				rightMiddleColumnContainer.VAnchor = VAnchor.ParentBottomTop;  				{  					TextWidget viewLabel = new TextWidget("View".Localize());  					viewLabel.TextColor = RGBA_Bytes.White;  					viewLabel.VAnchor = VAnchor.ParentCenter;  					viewLabel.HAnchor = HAnchor.ParentCenter;    					FatFlatClickWidget viewButton = new FatFlatClickWidget(viewLabel);  					viewButton.VAnchor = VAnchor.ParentBottomTop;  					viewButton.BackgroundColor = ActiveTheme.Instance.SecondaryAccentColor;  					viewButton.Width = actionButtonSize;  					viewButton.Click += ViewButton_Click;  					rightMiddleColumnContainer.AddChild(viewButton);    					TextWidget printLabel = new TextWidget("Print".Localize());  					printLabel.TextColor = RGBA_Bytes.White;  					printLabel.VAnchor = VAnchor.ParentCenter;  					printLabel.HAnchor = HAnchor.ParentCenter;    					FatFlatClickWidget printButton = new FatFlatClickWidget(printLabel);  					printButton.VAnchor = VAnchor.ParentBottomTop;  					printButton.BackgroundColor = ActiveTheme.Instance.PrimaryAccentColor;  					printButton.Width = actionButtonSize;  					printButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							if (!PrinterCommunication.PrinterConnectionAndCommunication.Instance.PrintIsActive)  							{  								QueueData.Instance.AddItem(new PrintItemWrapper(printTask.PrintItemId)' 0);  								QueueData.Instance.SelectedIndex = 0;  								PrinterCommunication.PrinterConnectionAndCommunication.Instance.PrintActivePartIfPossible();  							}  							else  							{  								QueueData.Instance.AddItem(new PrintItemWrapper(printTask.PrintItemId));  							}  							rightButtonOverlay.SlideOut();  						});  					};  					rightMiddleColumnContainer.AddChild(printButton);  				}  				rightButtonOverlay.AddChild(rightMiddleColumnContainer);    				if (showTimestamp)  				{  					FlowLayoutWidget timestampColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  					timestampColumn.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  					timestampColumn.BackgroundColor = RGBA_Bytes.LightGray;  					timestampColumn.Padding = new BorderDouble(6' 0);    					FlowLayoutWidget startTimeContainer = new FlowLayoutWidget();  					startTimeContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					startTimeContainer.Padding = new BorderDouble(0' 3);    					string startLabelFull = "{0}:".FormatWith("Start".Localize().ToUpper());  					TextWidget startLabel = new TextWidget(startLabelFull' pointSize: 8 * pointSizeFactor);  					startLabel.TextColor = timeTextColor;    					string startTimeString = printTask.PrintStart.ToString("MMM d yyyy h:mm ") + printTask.PrintStart.ToString("tt").ToLower();  					TextWidget startDate = new TextWidget(startTimeString' pointSize: 12 * pointSizeFactor);  					startDate.TextColor = timeTextColor;    					startTimeContainer.AddChild(startLabel);  					startTimeContainer.AddChild(new HorizontalSpacer());  					startTimeContainer.AddChild(startDate);    					FlowLayoutWidget endTimeContainer = new FlowLayoutWidget();  					endTimeContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					endTimeContainer.Padding = new BorderDouble(0' 3);    					string endLabelFull = "{0}:".FormatWith("End".Localize().ToUpper());  					TextWidget endLabel = new TextWidget(endLabelFull' pointSize: 8 * pointSizeFactor);  					endLabel.TextColor = timeTextColor;    					string endTimeString;  					if (printTask.PrintEnd != DateTime.MinValue)  					{  						endTimeString = printTask.PrintEnd.ToString("MMM d yyyy h:mm ") + printTask.PrintEnd.ToString("tt").ToLower();  					}  					else  					{  						endTimeString = "Unknown".Localize();  					}    					TextWidget endDate = new TextWidget(endTimeString' pointSize: 12 * pointSizeFactor);  					endDate.TextColor = timeTextColor;    					endTimeContainer.AddChild(endLabel);  					endTimeContainer.AddChild(new HorizontalSpacer());  					endTimeContainer.AddChild(endDate);    					HorizontalLine horizontalLine = new HorizontalLine();  					horizontalLine.BackgroundColor = RGBA_Bytes.Gray;    					timestampColumn.AddChild(endTimeContainer);  					timestampColumn.AddChild(horizontalLine);  					timestampColumn.AddChild(startTimeContainer);    					timestampColumn.HAnchor = HAnchor.ParentLeftRight;  					timestampColumn.Padding = new BorderDouble(5' 0' 15' 0);    					primaryFlow.AddChild(timestampColumn);  				}    				mainContainer.AddChild(primaryContainer);  				mainContainer.AddChild(rightButtonOverlay);    				this.AddChild(mainContainer);  			}
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,C:\repos\MatterHackers_MatterControl\History\PrintHistoryListItem.cs,AddChildElements,The following statement contains a magic number: {  				GuiWidget indicator = new GuiWidget();  				indicator.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  				indicator.Width = 15;  				if (printTask.PrintComplete)  				{  					indicator.BackgroundColor = new RGBA_Bytes(38' 147' 51' 180);  				}  				else  				{  					indicator.BackgroundColor = new RGBA_Bytes(252' 209' 22' 180);  				}    				FlowLayoutWidget middleColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  				middleColumn.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				middleColumn.Padding = new BorderDouble(6' 3);  				{  					FlowLayoutWidget labelContainer = new FlowLayoutWidget();  					labelContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;    					string labelName = textInfo.ToTitleCase(printTask.PrintName);  					labelName = labelName.Replace('_'' ' ');  					partLabel = new TextWidget(labelName' pointSize: 15 * pointSizeFactor);  					partLabel.TextColor = WidgetTextColor;    					labelContainer.AddChild(partLabel);    					middleColumn.AddChild(labelContainer);  				}    				RGBA_Bytes timeTextColor = new RGBA_Bytes(34' 34' 34);    				FlowLayoutWidget buttonContainer = new FlowLayoutWidget();  				buttonContainer.Margin = new BorderDouble(0);  				buttonContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				{  					TextWidget statusIndicator = new TextWidget("Status: Completed".Localize()' pointSize: 8 * pointSizeFactor);  					statusIndicator.Margin = new BorderDouble(right: 3);  					//buttonContainer.AddChild(statusIndicator);    					string printTimeLabel = "Time".Localize().ToUpper();  					string printTimeLabelFull = string.Format("{0}: "' printTimeLabel);  					TextWidget timeLabel = new TextWidget(printTimeLabelFull' pointSize: 8 * pointSizeFactor);  					timeLabel.TextColor = timeTextColor;    					TextWidget timeIndicator;  					int minutes = printTask.PrintTimeMinutes;  					if (minutes < 0)  					{  						timeIndicator = new TextWidget("Unknown".Localize());  					}  					else if (minutes > 60)  					{  						timeIndicator = new TextWidget("{0}hrs {1}min".FormatWith(printTask.PrintTimeMinutes / 60' printTask.PrintTimeMinutes % 60)' pointSize: 12 * pointSizeFactor);  					}  					else  					{  						timeIndicator = new TextWidget(string.Format("{0}min"' printTask.PrintTimeMinutes)' pointSize: 12 * pointSizeFactor);  					}    					if (printTask.PercentDone > 0)  					{  						timeIndicator.AutoExpandBoundsToText = true;  						timeIndicator.Text += $" ({printTask.PercentDone:0.0}%)";  						  						if(printTask.RecoveryCount > 0)  						{  							if (printTask.RecoveryCount == 1)  							{  								timeIndicator.Text += " - " + "recovered once".Localize();  							}  							else  							{  								timeIndicator.Text += " - " + "recovered {0} times".FormatWith(printTask.RecoveryCount);  							}  						}  					}    					timeIndicator.Margin = new BorderDouble(right: 6);  					timeIndicator.TextColor = timeTextColor;    					buttonContainer.AddChild(timeLabel);  					buttonContainer.AddChild(timeIndicator);  					buttonContainer.AddChild(new HorizontalSpacer());  					middleColumn.AddChild(buttonContainer);  				}    				GuiWidget primaryContainer = new GuiWidget();  				primaryContainer.HAnchor = HAnchor.ParentLeftRight;  				primaryContainer.VAnchor = VAnchor.ParentBottomTop;    				FlowLayoutWidget primaryFlow = new FlowLayoutWidget(FlowDirection.LeftToRight);  				primaryFlow.HAnchor = HAnchor.ParentLeftRight;  				primaryFlow.VAnchor = VAnchor.ParentBottomTop;    				primaryFlow.AddChild(indicator);  				primaryFlow.AddChild(middleColumn);    				primaryContainer.AddChild(primaryFlow);    				rightButtonOverlay = new SlideWidget();  				rightButtonOverlay.VAnchor = VAnchor.ParentBottomTop;  				rightButtonOverlay.HAnchor = Agg.UI.HAnchor.ParentRight;  				rightButtonOverlay.Width = rightOverlayWidth;  				rightButtonOverlay.Visible = false;    				FlowLayoutWidget rightMiddleColumnContainer = new FlowLayoutWidget(FlowDirection.LeftToRight);  				rightMiddleColumnContainer.VAnchor = VAnchor.ParentBottomTop;  				{  					TextWidget viewLabel = new TextWidget("View".Localize());  					viewLabel.TextColor = RGBA_Bytes.White;  					viewLabel.VAnchor = VAnchor.ParentCenter;  					viewLabel.HAnchor = HAnchor.ParentCenter;    					FatFlatClickWidget viewButton = new FatFlatClickWidget(viewLabel);  					viewButton.VAnchor = VAnchor.ParentBottomTop;  					viewButton.BackgroundColor = ActiveTheme.Instance.SecondaryAccentColor;  					viewButton.Width = actionButtonSize;  					viewButton.Click += ViewButton_Click;  					rightMiddleColumnContainer.AddChild(viewButton);    					TextWidget printLabel = new TextWidget("Print".Localize());  					printLabel.TextColor = RGBA_Bytes.White;  					printLabel.VAnchor = VAnchor.ParentCenter;  					printLabel.HAnchor = HAnchor.ParentCenter;    					FatFlatClickWidget printButton = new FatFlatClickWidget(printLabel);  					printButton.VAnchor = VAnchor.ParentBottomTop;  					printButton.BackgroundColor = ActiveTheme.Instance.PrimaryAccentColor;  					printButton.Width = actionButtonSize;  					printButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							if (!PrinterCommunication.PrinterConnectionAndCommunication.Instance.PrintIsActive)  							{  								QueueData.Instance.AddItem(new PrintItemWrapper(printTask.PrintItemId)' 0);  								QueueData.Instance.SelectedIndex = 0;  								PrinterCommunication.PrinterConnectionAndCommunication.Instance.PrintActivePartIfPossible();  							}  							else  							{  								QueueData.Instance.AddItem(new PrintItemWrapper(printTask.PrintItemId));  							}  							rightButtonOverlay.SlideOut();  						});  					};  					rightMiddleColumnContainer.AddChild(printButton);  				}  				rightButtonOverlay.AddChild(rightMiddleColumnContainer);    				if (showTimestamp)  				{  					FlowLayoutWidget timestampColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  					timestampColumn.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  					timestampColumn.BackgroundColor = RGBA_Bytes.LightGray;  					timestampColumn.Padding = new BorderDouble(6' 0);    					FlowLayoutWidget startTimeContainer = new FlowLayoutWidget();  					startTimeContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					startTimeContainer.Padding = new BorderDouble(0' 3);    					string startLabelFull = "{0}:".FormatWith("Start".Localize().ToUpper());  					TextWidget startLabel = new TextWidget(startLabelFull' pointSize: 8 * pointSizeFactor);  					startLabel.TextColor = timeTextColor;    					string startTimeString = printTask.PrintStart.ToString("MMM d yyyy h:mm ") + printTask.PrintStart.ToString("tt").ToLower();  					TextWidget startDate = new TextWidget(startTimeString' pointSize: 12 * pointSizeFactor);  					startDate.TextColor = timeTextColor;    					startTimeContainer.AddChild(startLabel);  					startTimeContainer.AddChild(new HorizontalSpacer());  					startTimeContainer.AddChild(startDate);    					FlowLayoutWidget endTimeContainer = new FlowLayoutWidget();  					endTimeContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					endTimeContainer.Padding = new BorderDouble(0' 3);    					string endLabelFull = "{0}:".FormatWith("End".Localize().ToUpper());  					TextWidget endLabel = new TextWidget(endLabelFull' pointSize: 8 * pointSizeFactor);  					endLabel.TextColor = timeTextColor;    					string endTimeString;  					if (printTask.PrintEnd != DateTime.MinValue)  					{  						endTimeString = printTask.PrintEnd.ToString("MMM d yyyy h:mm ") + printTask.PrintEnd.ToString("tt").ToLower();  					}  					else  					{  						endTimeString = "Unknown".Localize();  					}    					TextWidget endDate = new TextWidget(endTimeString' pointSize: 12 * pointSizeFactor);  					endDate.TextColor = timeTextColor;    					endTimeContainer.AddChild(endLabel);  					endTimeContainer.AddChild(new HorizontalSpacer());  					endTimeContainer.AddChild(endDate);    					HorizontalLine horizontalLine = new HorizontalLine();  					horizontalLine.BackgroundColor = RGBA_Bytes.Gray;    					timestampColumn.AddChild(endTimeContainer);  					timestampColumn.AddChild(horizontalLine);  					timestampColumn.AddChild(startTimeContainer);    					timestampColumn.HAnchor = HAnchor.ParentLeftRight;  					timestampColumn.Padding = new BorderDouble(5' 0' 15' 0);    					primaryFlow.AddChild(timestampColumn);  				}    				mainContainer.AddChild(primaryContainer);  				mainContainer.AddChild(rightButtonOverlay);    				this.AddChild(mainContainer);  			}
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,C:\repos\MatterHackers_MatterControl\History\PrintHistoryListItem.cs,AddChildElements,The following statement contains a magic number: {  				GuiWidget indicator = new GuiWidget();  				indicator.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  				indicator.Width = 15;  				if (printTask.PrintComplete)  				{  					indicator.BackgroundColor = new RGBA_Bytes(38' 147' 51' 180);  				}  				else  				{  					indicator.BackgroundColor = new RGBA_Bytes(252' 209' 22' 180);  				}    				FlowLayoutWidget middleColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  				middleColumn.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				middleColumn.Padding = new BorderDouble(6' 3);  				{  					FlowLayoutWidget labelContainer = new FlowLayoutWidget();  					labelContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;    					string labelName = textInfo.ToTitleCase(printTask.PrintName);  					labelName = labelName.Replace('_'' ' ');  					partLabel = new TextWidget(labelName' pointSize: 15 * pointSizeFactor);  					partLabel.TextColor = WidgetTextColor;    					labelContainer.AddChild(partLabel);    					middleColumn.AddChild(labelContainer);  				}    				RGBA_Bytes timeTextColor = new RGBA_Bytes(34' 34' 34);    				FlowLayoutWidget buttonContainer = new FlowLayoutWidget();  				buttonContainer.Margin = new BorderDouble(0);  				buttonContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				{  					TextWidget statusIndicator = new TextWidget("Status: Completed".Localize()' pointSize: 8 * pointSizeFactor);  					statusIndicator.Margin = new BorderDouble(right: 3);  					//buttonContainer.AddChild(statusIndicator);    					string printTimeLabel = "Time".Localize().ToUpper();  					string printTimeLabelFull = string.Format("{0}: "' printTimeLabel);  					TextWidget timeLabel = new TextWidget(printTimeLabelFull' pointSize: 8 * pointSizeFactor);  					timeLabel.TextColor = timeTextColor;    					TextWidget timeIndicator;  					int minutes = printTask.PrintTimeMinutes;  					if (minutes < 0)  					{  						timeIndicator = new TextWidget("Unknown".Localize());  					}  					else if (minutes > 60)  					{  						timeIndicator = new TextWidget("{0}hrs {1}min".FormatWith(printTask.PrintTimeMinutes / 60' printTask.PrintTimeMinutes % 60)' pointSize: 12 * pointSizeFactor);  					}  					else  					{  						timeIndicator = new TextWidget(string.Format("{0}min"' printTask.PrintTimeMinutes)' pointSize: 12 * pointSizeFactor);  					}    					if (printTask.PercentDone > 0)  					{  						timeIndicator.AutoExpandBoundsToText = true;  						timeIndicator.Text += $" ({printTask.PercentDone:0.0}%)";  						  						if(printTask.RecoveryCount > 0)  						{  							if (printTask.RecoveryCount == 1)  							{  								timeIndicator.Text += " - " + "recovered once".Localize();  							}  							else  							{  								timeIndicator.Text += " - " + "recovered {0} times".FormatWith(printTask.RecoveryCount);  							}  						}  					}    					timeIndicator.Margin = new BorderDouble(right: 6);  					timeIndicator.TextColor = timeTextColor;    					buttonContainer.AddChild(timeLabel);  					buttonContainer.AddChild(timeIndicator);  					buttonContainer.AddChild(new HorizontalSpacer());  					middleColumn.AddChild(buttonContainer);  				}    				GuiWidget primaryContainer = new GuiWidget();  				primaryContainer.HAnchor = HAnchor.ParentLeftRight;  				primaryContainer.VAnchor = VAnchor.ParentBottomTop;    				FlowLayoutWidget primaryFlow = new FlowLayoutWidget(FlowDirection.LeftToRight);  				primaryFlow.HAnchor = HAnchor.ParentLeftRight;  				primaryFlow.VAnchor = VAnchor.ParentBottomTop;    				primaryFlow.AddChild(indicator);  				primaryFlow.AddChild(middleColumn);    				primaryContainer.AddChild(primaryFlow);    				rightButtonOverlay = new SlideWidget();  				rightButtonOverlay.VAnchor = VAnchor.ParentBottomTop;  				rightButtonOverlay.HAnchor = Agg.UI.HAnchor.ParentRight;  				rightButtonOverlay.Width = rightOverlayWidth;  				rightButtonOverlay.Visible = false;    				FlowLayoutWidget rightMiddleColumnContainer = new FlowLayoutWidget(FlowDirection.LeftToRight);  				rightMiddleColumnContainer.VAnchor = VAnchor.ParentBottomTop;  				{  					TextWidget viewLabel = new TextWidget("View".Localize());  					viewLabel.TextColor = RGBA_Bytes.White;  					viewLabel.VAnchor = VAnchor.ParentCenter;  					viewLabel.HAnchor = HAnchor.ParentCenter;    					FatFlatClickWidget viewButton = new FatFlatClickWidget(viewLabel);  					viewButton.VAnchor = VAnchor.ParentBottomTop;  					viewButton.BackgroundColor = ActiveTheme.Instance.SecondaryAccentColor;  					viewButton.Width = actionButtonSize;  					viewButton.Click += ViewButton_Click;  					rightMiddleColumnContainer.AddChild(viewButton);    					TextWidget printLabel = new TextWidget("Print".Localize());  					printLabel.TextColor = RGBA_Bytes.White;  					printLabel.VAnchor = VAnchor.ParentCenter;  					printLabel.HAnchor = HAnchor.ParentCenter;    					FatFlatClickWidget printButton = new FatFlatClickWidget(printLabel);  					printButton.VAnchor = VAnchor.ParentBottomTop;  					printButton.BackgroundColor = ActiveTheme.Instance.PrimaryAccentColor;  					printButton.Width = actionButtonSize;  					printButton.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							if (!PrinterCommunication.PrinterConnectionAndCommunication.Instance.PrintIsActive)  							{  								QueueData.Instance.AddItem(new PrintItemWrapper(printTask.PrintItemId)' 0);  								QueueData.Instance.SelectedIndex = 0;  								PrinterCommunication.PrinterConnectionAndCommunication.Instance.PrintActivePartIfPossible();  							}  							else  							{  								QueueData.Instance.AddItem(new PrintItemWrapper(printTask.PrintItemId));  							}  							rightButtonOverlay.SlideOut();  						});  					};  					rightMiddleColumnContainer.AddChild(printButton);  				}  				rightButtonOverlay.AddChild(rightMiddleColumnContainer);    				if (showTimestamp)  				{  					FlowLayoutWidget timestampColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  					timestampColumn.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  					timestampColumn.BackgroundColor = RGBA_Bytes.LightGray;  					timestampColumn.Padding = new BorderDouble(6' 0);    					FlowLayoutWidget startTimeContainer = new FlowLayoutWidget();  					startTimeContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					startTimeContainer.Padding = new BorderDouble(0' 3);    					string startLabelFull = "{0}:".FormatWith("Start".Localize().ToUpper());  					TextWidget startLabel = new TextWidget(startLabelFull' pointSize: 8 * pointSizeFactor);  					startLabel.TextColor = timeTextColor;    					string startTimeString = printTask.PrintStart.ToString("MMM d yyyy h:mm ") + printTask.PrintStart.ToString("tt").ToLower();  					TextWidget startDate = new TextWidget(startTimeString' pointSize: 12 * pointSizeFactor);  					startDate.TextColor = timeTextColor;    					startTimeContainer.AddChild(startLabel);  					startTimeContainer.AddChild(new HorizontalSpacer());  					startTimeContainer.AddChild(startDate);    					FlowLayoutWidget endTimeContainer = new FlowLayoutWidget();  					endTimeContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  					endTimeContainer.Padding = new BorderDouble(0' 3);    					string endLabelFull = "{0}:".FormatWith("End".Localize().ToUpper());  					TextWidget endLabel = new TextWidget(endLabelFull' pointSize: 8 * pointSizeFactor);  					endLabel.TextColor = timeTextColor;    					string endTimeString;  					if (printTask.PrintEnd != DateTime.MinValue)  					{  						endTimeString = printTask.PrintEnd.ToString("MMM d yyyy h:mm ") + printTask.PrintEnd.ToString("tt").ToLower();  					}  					else  					{  						endTimeString = "Unknown".Localize();  					}    					TextWidget endDate = new TextWidget(endTimeString' pointSize: 12 * pointSizeFactor);  					endDate.TextColor = timeTextColor;    					endTimeContainer.AddChild(endLabel);  					endTimeContainer.AddChild(new HorizontalSpacer());  					endTimeContainer.AddChild(endDate);    					HorizontalLine horizontalLine = new HorizontalLine();  					horizontalLine.BackgroundColor = RGBA_Bytes.Gray;    					timestampColumn.AddChild(endTimeContainer);  					timestampColumn.AddChild(horizontalLine);  					timestampColumn.AddChild(startTimeContainer);    					timestampColumn.HAnchor = HAnchor.ParentLeftRight;  					timestampColumn.Padding = new BorderDouble(5' 0' 15' 0);    					primaryFlow.AddChild(timestampColumn);  				}    				mainContainer.AddChild(primaryContainer);  				mainContainer.AddChild(rightButtonOverlay);    				this.AddChild(mainContainer);  			}
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,C:\repos\MatterHackers_MatterControl\History\PrintHistoryListItem.cs,SetDisplayAttributes,The following statement contains a magic number: linkButtonFactory.fontSize = 10;
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,C:\repos\MatterHackers_MatterControl\History\PrintHistoryListItem.cs,SetDisplayAttributes,The following statement contains a magic number: this.Height = 50;
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,C:\repos\MatterHackers_MatterControl\History\PrintHistoryListItem.cs,SetDisplayAttributes,The following statement contains a magic number: this.Margin = new BorderDouble(6' 0' 6' 6);
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,C:\repos\MatterHackers_MatterControl\History\PrintHistoryListItem.cs,SetDisplayAttributes,The following statement contains a magic number: this.Margin = new BorderDouble(6' 0' 6' 6);
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,C:\repos\MatterHackers_MatterControl\History\PrintHistoryListItem.cs,SetDisplayAttributes,The following statement contains a magic number: this.Margin = new BorderDouble(6' 0' 6' 6);
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,C:\repos\MatterHackers_MatterControl\History\PrintHistoryListItem.cs,ShowCantFindFileMessage,The following statement contains a magic number: UiThread.RunOnIdle(() =>  			{  				string maxLengthName = printItemWrapper.FileLocation;  				int maxLength = 43;  				if (maxLengthName.Length > maxLength)  				{  					string start = maxLengthName.Substring(0' 15) + "...";  					int amountRemaining = (maxLength - start.Length);  					string end = maxLengthName.Substring(maxLengthName.Length - amountRemaining' amountRemaining);  					maxLengthName = start + end;  				}  				string notFoundMessage = "Oops! Could not find this file:".Localize();  				string message = "{0}:\n'{1}'".FormatWith(notFoundMessage' maxLengthName);  				string titleLabel = "Item not Found".Localize();  				StyledMessageBox.ShowMessageBox(onConfirmRemove' message' titleLabel' StyledMessageBox.MessageType.OK);  			});
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,C:\repos\MatterHackers_MatterControl\History\PrintHistoryListItem.cs,ShowCantFindFileMessage,The following statement contains a magic number: UiThread.RunOnIdle(() =>  			{  				string maxLengthName = printItemWrapper.FileLocation;  				int maxLength = 43;  				if (maxLengthName.Length > maxLength)  				{  					string start = maxLengthName.Substring(0' 15) + "...";  					int amountRemaining = (maxLength - start.Length);  					string end = maxLengthName.Substring(maxLengthName.Length - amountRemaining' amountRemaining);  					maxLengthName = start + end;  				}  				string notFoundMessage = "Oops! Could not find this file:".Localize();  				string message = "{0}:\n'{1}'".FormatWith(notFoundMessage' maxLengthName);  				string titleLabel = "Item not Found".Localize();  				StyledMessageBox.ShowMessageBox(onConfirmRemove' message' titleLabel' StyledMessageBox.MessageType.OK);  			});
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,C:\repos\MatterHackers_MatterControl\History\PrintHistoryListItem.cs,OnDraw,The following statement contains a magic number: if (this.isSelectedItem)  			{  				this.BackgroundColor = ActiveTheme.Instance.PrimaryAccentColor;  				this.partLabel.TextColor = RGBA_Bytes.White;  				this.selectionCheckBox.TextColor = RGBA_Bytes.White;    				//RectangleDouble Bounds = LocalBounds;  				//RoundedRect rectBorder = new RoundedRect(Bounds' 0);  				//graphics2D.Render(new Stroke(rectBorder' 3)' RGBA_Bytes.White);  			}  			else if (this.isHoverItem)  			{  				RectangleDouble Bounds = LocalBounds;  				RoundedRect rectBorder = new RoundedRect(Bounds' 0);    				this.BackgroundColor = ActiveTheme.Instance.SecondaryAccentColor;  				this.partLabel.TextColor = RGBA_Bytes.White;  				this.selectionCheckBox.TextColor = RGBA_Bytes.White;    				graphics2D.Render(new Stroke(rectBorder' 3)' ActiveTheme.Instance.PrimaryAccentColor);  			}  			else  			{  				this.BackgroundColor = new RGBA_Bytes(255' 255' 255' 255);  				this.partLabel.TextColor = RGBA_Bytes.Black;  			}
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,C:\repos\MatterHackers_MatterControl\History\PrintHistoryListItem.cs,OnDraw,The following statement contains a magic number: if (this.isSelectedItem)  			{  				this.BackgroundColor = ActiveTheme.Instance.PrimaryAccentColor;  				this.partLabel.TextColor = RGBA_Bytes.White;  				this.selectionCheckBox.TextColor = RGBA_Bytes.White;    				//RectangleDouble Bounds = LocalBounds;  				//RoundedRect rectBorder = new RoundedRect(Bounds' 0);  				//graphics2D.Render(new Stroke(rectBorder' 3)' RGBA_Bytes.White);  			}  			else if (this.isHoverItem)  			{  				RectangleDouble Bounds = LocalBounds;  				RoundedRect rectBorder = new RoundedRect(Bounds' 0);    				this.BackgroundColor = ActiveTheme.Instance.SecondaryAccentColor;  				this.partLabel.TextColor = RGBA_Bytes.White;  				this.selectionCheckBox.TextColor = RGBA_Bytes.White;    				graphics2D.Render(new Stroke(rectBorder' 3)' ActiveTheme.Instance.PrimaryAccentColor);  			}  			else  			{  				this.BackgroundColor = new RGBA_Bytes(255' 255' 255' 255);  				this.partLabel.TextColor = RGBA_Bytes.Black;  			}
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,C:\repos\MatterHackers_MatterControl\History\PrintHistoryListItem.cs,OnDraw,The following statement contains a magic number: if (this.isSelectedItem)  			{  				this.BackgroundColor = ActiveTheme.Instance.PrimaryAccentColor;  				this.partLabel.TextColor = RGBA_Bytes.White;  				this.selectionCheckBox.TextColor = RGBA_Bytes.White;    				//RectangleDouble Bounds = LocalBounds;  				//RoundedRect rectBorder = new RoundedRect(Bounds' 0);  				//graphics2D.Render(new Stroke(rectBorder' 3)' RGBA_Bytes.White);  			}  			else if (this.isHoverItem)  			{  				RectangleDouble Bounds = LocalBounds;  				RoundedRect rectBorder = new RoundedRect(Bounds' 0);    				this.BackgroundColor = ActiveTheme.Instance.SecondaryAccentColor;  				this.partLabel.TextColor = RGBA_Bytes.White;  				this.selectionCheckBox.TextColor = RGBA_Bytes.White;    				graphics2D.Render(new Stroke(rectBorder' 3)' ActiveTheme.Instance.PrimaryAccentColor);  			}  			else  			{  				this.BackgroundColor = new RGBA_Bytes(255' 255' 255' 255);  				this.partLabel.TextColor = RGBA_Bytes.Black;  			}
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,C:\repos\MatterHackers_MatterControl\History\PrintHistoryListItem.cs,OnDraw,The following statement contains a magic number: if (this.isSelectedItem)  			{  				this.BackgroundColor = ActiveTheme.Instance.PrimaryAccentColor;  				this.partLabel.TextColor = RGBA_Bytes.White;  				this.selectionCheckBox.TextColor = RGBA_Bytes.White;    				//RectangleDouble Bounds = LocalBounds;  				//RoundedRect rectBorder = new RoundedRect(Bounds' 0);  				//graphics2D.Render(new Stroke(rectBorder' 3)' RGBA_Bytes.White);  			}  			else if (this.isHoverItem)  			{  				RectangleDouble Bounds = LocalBounds;  				RoundedRect rectBorder = new RoundedRect(Bounds' 0);    				this.BackgroundColor = ActiveTheme.Instance.SecondaryAccentColor;  				this.partLabel.TextColor = RGBA_Bytes.White;  				this.selectionCheckBox.TextColor = RGBA_Bytes.White;    				graphics2D.Render(new Stroke(rectBorder' 3)' ActiveTheme.Instance.PrimaryAccentColor);  			}  			else  			{  				this.BackgroundColor = new RGBA_Bytes(255' 255' 255' 255);  				this.partLabel.TextColor = RGBA_Bytes.Black;  			}
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,C:\repos\MatterHackers_MatterControl\History\PrintHistoryListItem.cs,OnDraw,The following statement contains a magic number: if (this.isSelectedItem)  			{  				this.BackgroundColor = ActiveTheme.Instance.PrimaryAccentColor;  				this.partLabel.TextColor = RGBA_Bytes.White;  				this.selectionCheckBox.TextColor = RGBA_Bytes.White;    				//RectangleDouble Bounds = LocalBounds;  				//RoundedRect rectBorder = new RoundedRect(Bounds' 0);  				//graphics2D.Render(new Stroke(rectBorder' 3)' RGBA_Bytes.White);  			}  			else if (this.isHoverItem)  			{  				RectangleDouble Bounds = LocalBounds;  				RoundedRect rectBorder = new RoundedRect(Bounds' 0);    				this.BackgroundColor = ActiveTheme.Instance.SecondaryAccentColor;  				this.partLabel.TextColor = RGBA_Bytes.White;  				this.selectionCheckBox.TextColor = RGBA_Bytes.White;    				graphics2D.Render(new Stroke(rectBorder' 3)' ActiveTheme.Instance.PrimaryAccentColor);  			}  			else  			{  				this.BackgroundColor = new RGBA_Bytes(255' 255' 255' 255);  				this.partLabel.TextColor = RGBA_Bytes.Black;  			}
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryWidget,C:\repos\MatterHackers_MatterControl\History\PrintHistoryWidget.cs,PrintHistoryWidget,The following statement contains a magic number: {  				FlowLayoutWidget completedStatsContainer = new FlowLayoutWidget();  				completedStatsContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				completedStatsContainer.Padding = new BorderDouble(6' 2);    				showOnlyCompletedCheckbox = new CheckBox("Only Show Completed".Localize()' historyPanelTextColor' textSize: 10);  				showOnlyCompletedCheckbox.Margin = new BorderDouble(top: 8);  				bool showOnlyCompleted = (UserSettings.Instance.get("PrintHistoryFilterShowCompleted") == "true");  				showOnlyCompletedCheckbox.Checked = showOnlyCompleted;  				showOnlyCompletedCheckbox.Width = 200;    				completedStatsContainer.AddChild(new TextWidget("Completed Prints:".Localize() + " "' pointSize: 10' textColor: historyPanelTextColor));  				completedPrintsCount = new TextWidget(GetCompletedPrints().ToString()' pointSize: 14' textColor: historyPanelTextColor);  				completedPrintsCount.AutoExpandBoundsToText = true;  				completedStatsContainer.AddChild(completedPrintsCount);  				completedStatsContainer.AddChild(new HorizontalSpacer());  				completedStatsContainer.AddChild(showOnlyCompletedCheckbox);    				FlowLayoutWidget historyStatsContainer = new FlowLayoutWidget();  				historyStatsContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				historyStatsContainer.Padding = new BorderDouble(6' 2);    				showTimestampCheckbox = new CheckBox("Show Timestamp".Localize()' historyPanelTextColor' textSize: 10);  				//showTimestampCheckbox.Margin = new BorderDouble(top: 8);  				bool showTimestamp = (UserSettings.Instance.get("PrintHistoryFilterShowTimestamp") == "true");  				showTimestampCheckbox.Checked = showTimestamp;  				showTimestampCheckbox.Width = 200;    				historyStatsContainer.AddChild(new TextWidget("Total Print Time:".Localize() + " "' pointSize: 10' textColor: historyPanelTextColor));  				totalPrintTime = new TextWidget(GetPrintTimeString()' pointSize: 14' textColor: historyPanelTextColor);  				totalPrintTime.AutoExpandBoundsToText = true;  				historyStatsContainer.AddChild(totalPrintTime);  				historyStatsContainer.AddChild(new HorizontalSpacer());  				historyStatsContainer.AddChild(showTimestampCheckbox);    				FlowLayoutWidget searchPanel = new FlowLayoutWidget(FlowDirection.TopToBottom);  				searchPanel.BackgroundColor = ActiveTheme.Instance.TransparentDarkOverlay;  				searchPanel.HAnchor = HAnchor.ParentLeftRight;  				searchPanel.Padding = new BorderDouble(0' 6' 0' 2);    				searchPanel.AddChild(completedStatsContainer);  				searchPanel.AddChild(historyStatsContainer);    				FlowLayoutWidget buttonPanel = new FlowLayoutWidget();  				buttonPanel.HAnchor = HAnchor.ParentLeftRight;  				buttonPanel.Padding = new BorderDouble(0' 3);  				{  					buttonPanel.AddChild(new HorizontalSpacer());  				}    				allControls.AddChild(searchPanel);  				historyView = new PrintHistoryDataView();  				historyView.DoneLoading += historyView_DoneLoading;  				allControls.AddChild(historyView);  				allControls.AddChild(buttonPanel);  			}
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryWidget,C:\repos\MatterHackers_MatterControl\History\PrintHistoryWidget.cs,PrintHistoryWidget,The following statement contains a magic number: {  				FlowLayoutWidget completedStatsContainer = new FlowLayoutWidget();  				completedStatsContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				completedStatsContainer.Padding = new BorderDouble(6' 2);    				showOnlyCompletedCheckbox = new CheckBox("Only Show Completed".Localize()' historyPanelTextColor' textSize: 10);  				showOnlyCompletedCheckbox.Margin = new BorderDouble(top: 8);  				bool showOnlyCompleted = (UserSettings.Instance.get("PrintHistoryFilterShowCompleted") == "true");  				showOnlyCompletedCheckbox.Checked = showOnlyCompleted;  				showOnlyCompletedCheckbox.Width = 200;    				completedStatsContainer.AddChild(new TextWidget("Completed Prints:".Localize() + " "' pointSize: 10' textColor: historyPanelTextColor));  				completedPrintsCount = new TextWidget(GetCompletedPrints().ToString()' pointSize: 14' textColor: historyPanelTextColor);  				completedPrintsCount.AutoExpandBoundsToText = true;  				completedStatsContainer.AddChild(completedPrintsCount);  				completedStatsContainer.AddChild(new HorizontalSpacer());  				completedStatsContainer.AddChild(showOnlyCompletedCheckbox);    				FlowLayoutWidget historyStatsContainer = new FlowLayoutWidget();  				historyStatsContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				historyStatsContainer.Padding = new BorderDouble(6' 2);    				showTimestampCheckbox = new CheckBox("Show Timestamp".Localize()' historyPanelTextColor' textSize: 10);  				//showTimestampCheckbox.Margin = new BorderDouble(top: 8);  				bool showTimestamp = (UserSettings.Instance.get("PrintHistoryFilterShowTimestamp") == "true");  				showTimestampCheckbox.Checked = showTimestamp;  				showTimestampCheckbox.Width = 200;    				historyStatsContainer.AddChild(new TextWidget("Total Print Time:".Localize() + " "' pointSize: 10' textColor: historyPanelTextColor));  				totalPrintTime = new TextWidget(GetPrintTimeString()' pointSize: 14' textColor: historyPanelTextColor);  				totalPrintTime.AutoExpandBoundsToText = true;  				historyStatsContainer.AddChild(totalPrintTime);  				historyStatsContainer.AddChild(new HorizontalSpacer());  				historyStatsContainer.AddChild(showTimestampCheckbox);    				FlowLayoutWidget searchPanel = new FlowLayoutWidget(FlowDirection.TopToBottom);  				searchPanel.BackgroundColor = ActiveTheme.Instance.TransparentDarkOverlay;  				searchPanel.HAnchor = HAnchor.ParentLeftRight;  				searchPanel.Padding = new BorderDouble(0' 6' 0' 2);    				searchPanel.AddChild(completedStatsContainer);  				searchPanel.AddChild(historyStatsContainer);    				FlowLayoutWidget buttonPanel = new FlowLayoutWidget();  				buttonPanel.HAnchor = HAnchor.ParentLeftRight;  				buttonPanel.Padding = new BorderDouble(0' 3);  				{  					buttonPanel.AddChild(new HorizontalSpacer());  				}    				allControls.AddChild(searchPanel);  				historyView = new PrintHistoryDataView();  				historyView.DoneLoading += historyView_DoneLoading;  				allControls.AddChild(historyView);  				allControls.AddChild(buttonPanel);  			}
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryWidget,C:\repos\MatterHackers_MatterControl\History\PrintHistoryWidget.cs,PrintHistoryWidget,The following statement contains a magic number: {  				FlowLayoutWidget completedStatsContainer = new FlowLayoutWidget();  				completedStatsContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				completedStatsContainer.Padding = new BorderDouble(6' 2);    				showOnlyCompletedCheckbox = new CheckBox("Only Show Completed".Localize()' historyPanelTextColor' textSize: 10);  				showOnlyCompletedCheckbox.Margin = new BorderDouble(top: 8);  				bool showOnlyCompleted = (UserSettings.Instance.get("PrintHistoryFilterShowCompleted") == "true");  				showOnlyCompletedCheckbox.Checked = showOnlyCompleted;  				showOnlyCompletedCheckbox.Width = 200;    				completedStatsContainer.AddChild(new TextWidget("Completed Prints:".Localize() + " "' pointSize: 10' textColor: historyPanelTextColor));  				completedPrintsCount = new TextWidget(GetCompletedPrints().ToString()' pointSize: 14' textColor: historyPanelTextColor);  				completedPrintsCount.AutoExpandBoundsToText = true;  				completedStatsContainer.AddChild(completedPrintsCount);  				completedStatsContainer.AddChild(new HorizontalSpacer());  				completedStatsContainer.AddChild(showOnlyCompletedCheckbox);    				FlowLayoutWidget historyStatsContainer = new FlowLayoutWidget();  				historyStatsContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				historyStatsContainer.Padding = new BorderDouble(6' 2);    				showTimestampCheckbox = new CheckBox("Show Timestamp".Localize()' historyPanelTextColor' textSize: 10);  				//showTimestampCheckbox.Margin = new BorderDouble(top: 8);  				bool showTimestamp = (UserSettings.Instance.get("PrintHistoryFilterShowTimestamp") == "true");  				showTimestampCheckbox.Checked = showTimestamp;  				showTimestampCheckbox.Width = 200;    				historyStatsContainer.AddChild(new TextWidget("Total Print Time:".Localize() + " "' pointSize: 10' textColor: historyPanelTextColor));  				totalPrintTime = new TextWidget(GetPrintTimeString()' pointSize: 14' textColor: historyPanelTextColor);  				totalPrintTime.AutoExpandBoundsToText = true;  				historyStatsContainer.AddChild(totalPrintTime);  				historyStatsContainer.AddChild(new HorizontalSpacer());  				historyStatsContainer.AddChild(showTimestampCheckbox);    				FlowLayoutWidget searchPanel = new FlowLayoutWidget(FlowDirection.TopToBottom);  				searchPanel.BackgroundColor = ActiveTheme.Instance.TransparentDarkOverlay;  				searchPanel.HAnchor = HAnchor.ParentLeftRight;  				searchPanel.Padding = new BorderDouble(0' 6' 0' 2);    				searchPanel.AddChild(completedStatsContainer);  				searchPanel.AddChild(historyStatsContainer);    				FlowLayoutWidget buttonPanel = new FlowLayoutWidget();  				buttonPanel.HAnchor = HAnchor.ParentLeftRight;  				buttonPanel.Padding = new BorderDouble(0' 3);  				{  					buttonPanel.AddChild(new HorizontalSpacer());  				}    				allControls.AddChild(searchPanel);  				historyView = new PrintHistoryDataView();  				historyView.DoneLoading += historyView_DoneLoading;  				allControls.AddChild(historyView);  				allControls.AddChild(buttonPanel);  			}
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryWidget,C:\repos\MatterHackers_MatterControl\History\PrintHistoryWidget.cs,PrintHistoryWidget,The following statement contains a magic number: {  				FlowLayoutWidget completedStatsContainer = new FlowLayoutWidget();  				completedStatsContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				completedStatsContainer.Padding = new BorderDouble(6' 2);    				showOnlyCompletedCheckbox = new CheckBox("Only Show Completed".Localize()' historyPanelTextColor' textSize: 10);  				showOnlyCompletedCheckbox.Margin = new BorderDouble(top: 8);  				bool showOnlyCompleted = (UserSettings.Instance.get("PrintHistoryFilterShowCompleted") == "true");  				showOnlyCompletedCheckbox.Checked = showOnlyCompleted;  				showOnlyCompletedCheckbox.Width = 200;    				completedStatsContainer.AddChild(new TextWidget("Completed Prints:".Localize() + " "' pointSize: 10' textColor: historyPanelTextColor));  				completedPrintsCount = new TextWidget(GetCompletedPrints().ToString()' pointSize: 14' textColor: historyPanelTextColor);  				completedPrintsCount.AutoExpandBoundsToText = true;  				completedStatsContainer.AddChild(completedPrintsCount);  				completedStatsContainer.AddChild(new HorizontalSpacer());  				completedStatsContainer.AddChild(showOnlyCompletedCheckbox);    				FlowLayoutWidget historyStatsContainer = new FlowLayoutWidget();  				historyStatsContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				historyStatsContainer.Padding = new BorderDouble(6' 2);    				showTimestampCheckbox = new CheckBox("Show Timestamp".Localize()' historyPanelTextColor' textSize: 10);  				//showTimestampCheckbox.Margin = new BorderDouble(top: 8);  				bool showTimestamp = (UserSettings.Instance.get("PrintHistoryFilterShowTimestamp") == "true");  				showTimestampCheckbox.Checked = showTimestamp;  				showTimestampCheckbox.Width = 200;    				historyStatsContainer.AddChild(new TextWidget("Total Print Time:".Localize() + " "' pointSize: 10' textColor: historyPanelTextColor));  				totalPrintTime = new TextWidget(GetPrintTimeString()' pointSize: 14' textColor: historyPanelTextColor);  				totalPrintTime.AutoExpandBoundsToText = true;  				historyStatsContainer.AddChild(totalPrintTime);  				historyStatsContainer.AddChild(new HorizontalSpacer());  				historyStatsContainer.AddChild(showTimestampCheckbox);    				FlowLayoutWidget searchPanel = new FlowLayoutWidget(FlowDirection.TopToBottom);  				searchPanel.BackgroundColor = ActiveTheme.Instance.TransparentDarkOverlay;  				searchPanel.HAnchor = HAnchor.ParentLeftRight;  				searchPanel.Padding = new BorderDouble(0' 6' 0' 2);    				searchPanel.AddChild(completedStatsContainer);  				searchPanel.AddChild(historyStatsContainer);    				FlowLayoutWidget buttonPanel = new FlowLayoutWidget();  				buttonPanel.HAnchor = HAnchor.ParentLeftRight;  				buttonPanel.Padding = new BorderDouble(0' 3);  				{  					buttonPanel.AddChild(new HorizontalSpacer());  				}    				allControls.AddChild(searchPanel);  				historyView = new PrintHistoryDataView();  				historyView.DoneLoading += historyView_DoneLoading;  				allControls.AddChild(historyView);  				allControls.AddChild(buttonPanel);  			}
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryWidget,C:\repos\MatterHackers_MatterControl\History\PrintHistoryWidget.cs,PrintHistoryWidget,The following statement contains a magic number: {  				FlowLayoutWidget completedStatsContainer = new FlowLayoutWidget();  				completedStatsContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				completedStatsContainer.Padding = new BorderDouble(6' 2);    				showOnlyCompletedCheckbox = new CheckBox("Only Show Completed".Localize()' historyPanelTextColor' textSize: 10);  				showOnlyCompletedCheckbox.Margin = new BorderDouble(top: 8);  				bool showOnlyCompleted = (UserSettings.Instance.get("PrintHistoryFilterShowCompleted") == "true");  				showOnlyCompletedCheckbox.Checked = showOnlyCompleted;  				showOnlyCompletedCheckbox.Width = 200;    				completedStatsContainer.AddChild(new TextWidget("Completed Prints:".Localize() + " "' pointSize: 10' textColor: historyPanelTextColor));  				completedPrintsCount = new TextWidget(GetCompletedPrints().ToString()' pointSize: 14' textColor: historyPanelTextColor);  				completedPrintsCount.AutoExpandBoundsToText = true;  				completedStatsContainer.AddChild(completedPrintsCount);  				completedStatsContainer.AddChild(new HorizontalSpacer());  				completedStatsContainer.AddChild(showOnlyCompletedCheckbox);    				FlowLayoutWidget historyStatsContainer = new FlowLayoutWidget();  				historyStatsContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				historyStatsContainer.Padding = new BorderDouble(6' 2);    				showTimestampCheckbox = new CheckBox("Show Timestamp".Localize()' historyPanelTextColor' textSize: 10);  				//showTimestampCheckbox.Margin = new BorderDouble(top: 8);  				bool showTimestamp = (UserSettings.Instance.get("PrintHistoryFilterShowTimestamp") == "true");  				showTimestampCheckbox.Checked = showTimestamp;  				showTimestampCheckbox.Width = 200;    				historyStatsContainer.AddChild(new TextWidget("Total Print Time:".Localize() + " "' pointSize: 10' textColor: historyPanelTextColor));  				totalPrintTime = new TextWidget(GetPrintTimeString()' pointSize: 14' textColor: historyPanelTextColor);  				totalPrintTime.AutoExpandBoundsToText = true;  				historyStatsContainer.AddChild(totalPrintTime);  				historyStatsContainer.AddChild(new HorizontalSpacer());  				historyStatsContainer.AddChild(showTimestampCheckbox);    				FlowLayoutWidget searchPanel = new FlowLayoutWidget(FlowDirection.TopToBottom);  				searchPanel.BackgroundColor = ActiveTheme.Instance.TransparentDarkOverlay;  				searchPanel.HAnchor = HAnchor.ParentLeftRight;  				searchPanel.Padding = new BorderDouble(0' 6' 0' 2);    				searchPanel.AddChild(completedStatsContainer);  				searchPanel.AddChild(historyStatsContainer);    				FlowLayoutWidget buttonPanel = new FlowLayoutWidget();  				buttonPanel.HAnchor = HAnchor.ParentLeftRight;  				buttonPanel.Padding = new BorderDouble(0' 3);  				{  					buttonPanel.AddChild(new HorizontalSpacer());  				}    				allControls.AddChild(searchPanel);  				historyView = new PrintHistoryDataView();  				historyView.DoneLoading += historyView_DoneLoading;  				allControls.AddChild(historyView);  				allControls.AddChild(buttonPanel);  			}
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryWidget,C:\repos\MatterHackers_MatterControl\History\PrintHistoryWidget.cs,PrintHistoryWidget,The following statement contains a magic number: {  				FlowLayoutWidget completedStatsContainer = new FlowLayoutWidget();  				completedStatsContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				completedStatsContainer.Padding = new BorderDouble(6' 2);    				showOnlyCompletedCheckbox = new CheckBox("Only Show Completed".Localize()' historyPanelTextColor' textSize: 10);  				showOnlyCompletedCheckbox.Margin = new BorderDouble(top: 8);  				bool showOnlyCompleted = (UserSettings.Instance.get("PrintHistoryFilterShowCompleted") == "true");  				showOnlyCompletedCheckbox.Checked = showOnlyCompleted;  				showOnlyCompletedCheckbox.Width = 200;    				completedStatsContainer.AddChild(new TextWidget("Completed Prints:".Localize() + " "' pointSize: 10' textColor: historyPanelTextColor));  				completedPrintsCount = new TextWidget(GetCompletedPrints().ToString()' pointSize: 14' textColor: historyPanelTextColor);  				completedPrintsCount.AutoExpandBoundsToText = true;  				completedStatsContainer.AddChild(completedPrintsCount);  				completedStatsContainer.AddChild(new HorizontalSpacer());  				completedStatsContainer.AddChild(showOnlyCompletedCheckbox);    				FlowLayoutWidget historyStatsContainer = new FlowLayoutWidget();  				historyStatsContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				historyStatsContainer.Padding = new BorderDouble(6' 2);    				showTimestampCheckbox = new CheckBox("Show Timestamp".Localize()' historyPanelTextColor' textSize: 10);  				//showTimestampCheckbox.Margin = new BorderDouble(top: 8);  				bool showTimestamp = (UserSettings.Instance.get("PrintHistoryFilterShowTimestamp") == "true");  				showTimestampCheckbox.Checked = showTimestamp;  				showTimestampCheckbox.Width = 200;    				historyStatsContainer.AddChild(new TextWidget("Total Print Time:".Localize() + " "' pointSize: 10' textColor: historyPanelTextColor));  				totalPrintTime = new TextWidget(GetPrintTimeString()' pointSize: 14' textColor: historyPanelTextColor);  				totalPrintTime.AutoExpandBoundsToText = true;  				historyStatsContainer.AddChild(totalPrintTime);  				historyStatsContainer.AddChild(new HorizontalSpacer());  				historyStatsContainer.AddChild(showTimestampCheckbox);    				FlowLayoutWidget searchPanel = new FlowLayoutWidget(FlowDirection.TopToBottom);  				searchPanel.BackgroundColor = ActiveTheme.Instance.TransparentDarkOverlay;  				searchPanel.HAnchor = HAnchor.ParentLeftRight;  				searchPanel.Padding = new BorderDouble(0' 6' 0' 2);    				searchPanel.AddChild(completedStatsContainer);  				searchPanel.AddChild(historyStatsContainer);    				FlowLayoutWidget buttonPanel = new FlowLayoutWidget();  				buttonPanel.HAnchor = HAnchor.ParentLeftRight;  				buttonPanel.Padding = new BorderDouble(0' 3);  				{  					buttonPanel.AddChild(new HorizontalSpacer());  				}    				allControls.AddChild(searchPanel);  				historyView = new PrintHistoryDataView();  				historyView.DoneLoading += historyView_DoneLoading;  				allControls.AddChild(historyView);  				allControls.AddChild(buttonPanel);  			}
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryWidget,C:\repos\MatterHackers_MatterControl\History\PrintHistoryWidget.cs,PrintHistoryWidget,The following statement contains a magic number: {  				FlowLayoutWidget completedStatsContainer = new FlowLayoutWidget();  				completedStatsContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				completedStatsContainer.Padding = new BorderDouble(6' 2);    				showOnlyCompletedCheckbox = new CheckBox("Only Show Completed".Localize()' historyPanelTextColor' textSize: 10);  				showOnlyCompletedCheckbox.Margin = new BorderDouble(top: 8);  				bool showOnlyCompleted = (UserSettings.Instance.get("PrintHistoryFilterShowCompleted") == "true");  				showOnlyCompletedCheckbox.Checked = showOnlyCompleted;  				showOnlyCompletedCheckbox.Width = 200;    				completedStatsContainer.AddChild(new TextWidget("Completed Prints:".Localize() + " "' pointSize: 10' textColor: historyPanelTextColor));  				completedPrintsCount = new TextWidget(GetCompletedPrints().ToString()' pointSize: 14' textColor: historyPanelTextColor);  				completedPrintsCount.AutoExpandBoundsToText = true;  				completedStatsContainer.AddChild(completedPrintsCount);  				completedStatsContainer.AddChild(new HorizontalSpacer());  				completedStatsContainer.AddChild(showOnlyCompletedCheckbox);    				FlowLayoutWidget historyStatsContainer = new FlowLayoutWidget();  				historyStatsContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				historyStatsContainer.Padding = new BorderDouble(6' 2);    				showTimestampCheckbox = new CheckBox("Show Timestamp".Localize()' historyPanelTextColor' textSize: 10);  				//showTimestampCheckbox.Margin = new BorderDouble(top: 8);  				bool showTimestamp = (UserSettings.Instance.get("PrintHistoryFilterShowTimestamp") == "true");  				showTimestampCheckbox.Checked = showTimestamp;  				showTimestampCheckbox.Width = 200;    				historyStatsContainer.AddChild(new TextWidget("Total Print Time:".Localize() + " "' pointSize: 10' textColor: historyPanelTextColor));  				totalPrintTime = new TextWidget(GetPrintTimeString()' pointSize: 14' textColor: historyPanelTextColor);  				totalPrintTime.AutoExpandBoundsToText = true;  				historyStatsContainer.AddChild(totalPrintTime);  				historyStatsContainer.AddChild(new HorizontalSpacer());  				historyStatsContainer.AddChild(showTimestampCheckbox);    				FlowLayoutWidget searchPanel = new FlowLayoutWidget(FlowDirection.TopToBottom);  				searchPanel.BackgroundColor = ActiveTheme.Instance.TransparentDarkOverlay;  				searchPanel.HAnchor = HAnchor.ParentLeftRight;  				searchPanel.Padding = new BorderDouble(0' 6' 0' 2);    				searchPanel.AddChild(completedStatsContainer);  				searchPanel.AddChild(historyStatsContainer);    				FlowLayoutWidget buttonPanel = new FlowLayoutWidget();  				buttonPanel.HAnchor = HAnchor.ParentLeftRight;  				buttonPanel.Padding = new BorderDouble(0' 3);  				{  					buttonPanel.AddChild(new HorizontalSpacer());  				}    				allControls.AddChild(searchPanel);  				historyView = new PrintHistoryDataView();  				historyView.DoneLoading += historyView_DoneLoading;  				allControls.AddChild(historyView);  				allControls.AddChild(buttonPanel);  			}
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryWidget,C:\repos\MatterHackers_MatterControl\History\PrintHistoryWidget.cs,PrintHistoryWidget,The following statement contains a magic number: {  				FlowLayoutWidget completedStatsContainer = new FlowLayoutWidget();  				completedStatsContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				completedStatsContainer.Padding = new BorderDouble(6' 2);    				showOnlyCompletedCheckbox = new CheckBox("Only Show Completed".Localize()' historyPanelTextColor' textSize: 10);  				showOnlyCompletedCheckbox.Margin = new BorderDouble(top: 8);  				bool showOnlyCompleted = (UserSettings.Instance.get("PrintHistoryFilterShowCompleted") == "true");  				showOnlyCompletedCheckbox.Checked = showOnlyCompleted;  				showOnlyCompletedCheckbox.Width = 200;    				completedStatsContainer.AddChild(new TextWidget("Completed Prints:".Localize() + " "' pointSize: 10' textColor: historyPanelTextColor));  				completedPrintsCount = new TextWidget(GetCompletedPrints().ToString()' pointSize: 14' textColor: historyPanelTextColor);  				completedPrintsCount.AutoExpandBoundsToText = true;  				completedStatsContainer.AddChild(completedPrintsCount);  				completedStatsContainer.AddChild(new HorizontalSpacer());  				completedStatsContainer.AddChild(showOnlyCompletedCheckbox);    				FlowLayoutWidget historyStatsContainer = new FlowLayoutWidget();  				historyStatsContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				historyStatsContainer.Padding = new BorderDouble(6' 2);    				showTimestampCheckbox = new CheckBox("Show Timestamp".Localize()' historyPanelTextColor' textSize: 10);  				//showTimestampCheckbox.Margin = new BorderDouble(top: 8);  				bool showTimestamp = (UserSettings.Instance.get("PrintHistoryFilterShowTimestamp") == "true");  				showTimestampCheckbox.Checked = showTimestamp;  				showTimestampCheckbox.Width = 200;    				historyStatsContainer.AddChild(new TextWidget("Total Print Time:".Localize() + " "' pointSize: 10' textColor: historyPanelTextColor));  				totalPrintTime = new TextWidget(GetPrintTimeString()' pointSize: 14' textColor: historyPanelTextColor);  				totalPrintTime.AutoExpandBoundsToText = true;  				historyStatsContainer.AddChild(totalPrintTime);  				historyStatsContainer.AddChild(new HorizontalSpacer());  				historyStatsContainer.AddChild(showTimestampCheckbox);    				FlowLayoutWidget searchPanel = new FlowLayoutWidget(FlowDirection.TopToBottom);  				searchPanel.BackgroundColor = ActiveTheme.Instance.TransparentDarkOverlay;  				searchPanel.HAnchor = HAnchor.ParentLeftRight;  				searchPanel.Padding = new BorderDouble(0' 6' 0' 2);    				searchPanel.AddChild(completedStatsContainer);  				searchPanel.AddChild(historyStatsContainer);    				FlowLayoutWidget buttonPanel = new FlowLayoutWidget();  				buttonPanel.HAnchor = HAnchor.ParentLeftRight;  				buttonPanel.Padding = new BorderDouble(0' 3);  				{  					buttonPanel.AddChild(new HorizontalSpacer());  				}    				allControls.AddChild(searchPanel);  				historyView = new PrintHistoryDataView();  				historyView.DoneLoading += historyView_DoneLoading;  				allControls.AddChild(historyView);  				allControls.AddChild(buttonPanel);  			}
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryWidget,C:\repos\MatterHackers_MatterControl\History\PrintHistoryWidget.cs,PrintHistoryWidget,The following statement contains a magic number: {  				FlowLayoutWidget completedStatsContainer = new FlowLayoutWidget();  				completedStatsContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				completedStatsContainer.Padding = new BorderDouble(6' 2);    				showOnlyCompletedCheckbox = new CheckBox("Only Show Completed".Localize()' historyPanelTextColor' textSize: 10);  				showOnlyCompletedCheckbox.Margin = new BorderDouble(top: 8);  				bool showOnlyCompleted = (UserSettings.Instance.get("PrintHistoryFilterShowCompleted") == "true");  				showOnlyCompletedCheckbox.Checked = showOnlyCompleted;  				showOnlyCompletedCheckbox.Width = 200;    				completedStatsContainer.AddChild(new TextWidget("Completed Prints:".Localize() + " "' pointSize: 10' textColor: historyPanelTextColor));  				completedPrintsCount = new TextWidget(GetCompletedPrints().ToString()' pointSize: 14' textColor: historyPanelTextColor);  				completedPrintsCount.AutoExpandBoundsToText = true;  				completedStatsContainer.AddChild(completedPrintsCount);  				completedStatsContainer.AddChild(new HorizontalSpacer());  				completedStatsContainer.AddChild(showOnlyCompletedCheckbox);    				FlowLayoutWidget historyStatsContainer = new FlowLayoutWidget();  				historyStatsContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				historyStatsContainer.Padding = new BorderDouble(6' 2);    				showTimestampCheckbox = new CheckBox("Show Timestamp".Localize()' historyPanelTextColor' textSize: 10);  				//showTimestampCheckbox.Margin = new BorderDouble(top: 8);  				bool showTimestamp = (UserSettings.Instance.get("PrintHistoryFilterShowTimestamp") == "true");  				showTimestampCheckbox.Checked = showTimestamp;  				showTimestampCheckbox.Width = 200;    				historyStatsContainer.AddChild(new TextWidget("Total Print Time:".Localize() + " "' pointSize: 10' textColor: historyPanelTextColor));  				totalPrintTime = new TextWidget(GetPrintTimeString()' pointSize: 14' textColor: historyPanelTextColor);  				totalPrintTime.AutoExpandBoundsToText = true;  				historyStatsContainer.AddChild(totalPrintTime);  				historyStatsContainer.AddChild(new HorizontalSpacer());  				historyStatsContainer.AddChild(showTimestampCheckbox);    				FlowLayoutWidget searchPanel = new FlowLayoutWidget(FlowDirection.TopToBottom);  				searchPanel.BackgroundColor = ActiveTheme.Instance.TransparentDarkOverlay;  				searchPanel.HAnchor = HAnchor.ParentLeftRight;  				searchPanel.Padding = new BorderDouble(0' 6' 0' 2);    				searchPanel.AddChild(completedStatsContainer);  				searchPanel.AddChild(historyStatsContainer);    				FlowLayoutWidget buttonPanel = new FlowLayoutWidget();  				buttonPanel.HAnchor = HAnchor.ParentLeftRight;  				buttonPanel.Padding = new BorderDouble(0' 3);  				{  					buttonPanel.AddChild(new HorizontalSpacer());  				}    				allControls.AddChild(searchPanel);  				historyView = new PrintHistoryDataView();  				historyView.DoneLoading += historyView_DoneLoading;  				allControls.AddChild(historyView);  				allControls.AddChild(buttonPanel);  			}
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryWidget,C:\repos\MatterHackers_MatterControl\History\PrintHistoryWidget.cs,PrintHistoryWidget,The following statement contains a magic number: {  				FlowLayoutWidget completedStatsContainer = new FlowLayoutWidget();  				completedStatsContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				completedStatsContainer.Padding = new BorderDouble(6' 2);    				showOnlyCompletedCheckbox = new CheckBox("Only Show Completed".Localize()' historyPanelTextColor' textSize: 10);  				showOnlyCompletedCheckbox.Margin = new BorderDouble(top: 8);  				bool showOnlyCompleted = (UserSettings.Instance.get("PrintHistoryFilterShowCompleted") == "true");  				showOnlyCompletedCheckbox.Checked = showOnlyCompleted;  				showOnlyCompletedCheckbox.Width = 200;    				completedStatsContainer.AddChild(new TextWidget("Completed Prints:".Localize() + " "' pointSize: 10' textColor: historyPanelTextColor));  				completedPrintsCount = new TextWidget(GetCompletedPrints().ToString()' pointSize: 14' textColor: historyPanelTextColor);  				completedPrintsCount.AutoExpandBoundsToText = true;  				completedStatsContainer.AddChild(completedPrintsCount);  				completedStatsContainer.AddChild(new HorizontalSpacer());  				completedStatsContainer.AddChild(showOnlyCompletedCheckbox);    				FlowLayoutWidget historyStatsContainer = new FlowLayoutWidget();  				historyStatsContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				historyStatsContainer.Padding = new BorderDouble(6' 2);    				showTimestampCheckbox = new CheckBox("Show Timestamp".Localize()' historyPanelTextColor' textSize: 10);  				//showTimestampCheckbox.Margin = new BorderDouble(top: 8);  				bool showTimestamp = (UserSettings.Instance.get("PrintHistoryFilterShowTimestamp") == "true");  				showTimestampCheckbox.Checked = showTimestamp;  				showTimestampCheckbox.Width = 200;    				historyStatsContainer.AddChild(new TextWidget("Total Print Time:".Localize() + " "' pointSize: 10' textColor: historyPanelTextColor));  				totalPrintTime = new TextWidget(GetPrintTimeString()' pointSize: 14' textColor: historyPanelTextColor);  				totalPrintTime.AutoExpandBoundsToText = true;  				historyStatsContainer.AddChild(totalPrintTime);  				historyStatsContainer.AddChild(new HorizontalSpacer());  				historyStatsContainer.AddChild(showTimestampCheckbox);    				FlowLayoutWidget searchPanel = new FlowLayoutWidget(FlowDirection.TopToBottom);  				searchPanel.BackgroundColor = ActiveTheme.Instance.TransparentDarkOverlay;  				searchPanel.HAnchor = HAnchor.ParentLeftRight;  				searchPanel.Padding = new BorderDouble(0' 6' 0' 2);    				searchPanel.AddChild(completedStatsContainer);  				searchPanel.AddChild(historyStatsContainer);    				FlowLayoutWidget buttonPanel = new FlowLayoutWidget();  				buttonPanel.HAnchor = HAnchor.ParentLeftRight;  				buttonPanel.Padding = new BorderDouble(0' 3);  				{  					buttonPanel.AddChild(new HorizontalSpacer());  				}    				allControls.AddChild(searchPanel);  				historyView = new PrintHistoryDataView();  				historyView.DoneLoading += historyView_DoneLoading;  				allControls.AddChild(historyView);  				allControls.AddChild(buttonPanel);  			}
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryWidget,C:\repos\MatterHackers_MatterControl\History\PrintHistoryWidget.cs,PrintHistoryWidget,The following statement contains a magic number: {  				FlowLayoutWidget completedStatsContainer = new FlowLayoutWidget();  				completedStatsContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				completedStatsContainer.Padding = new BorderDouble(6' 2);    				showOnlyCompletedCheckbox = new CheckBox("Only Show Completed".Localize()' historyPanelTextColor' textSize: 10);  				showOnlyCompletedCheckbox.Margin = new BorderDouble(top: 8);  				bool showOnlyCompleted = (UserSettings.Instance.get("PrintHistoryFilterShowCompleted") == "true");  				showOnlyCompletedCheckbox.Checked = showOnlyCompleted;  				showOnlyCompletedCheckbox.Width = 200;    				completedStatsContainer.AddChild(new TextWidget("Completed Prints:".Localize() + " "' pointSize: 10' textColor: historyPanelTextColor));  				completedPrintsCount = new TextWidget(GetCompletedPrints().ToString()' pointSize: 14' textColor: historyPanelTextColor);  				completedPrintsCount.AutoExpandBoundsToText = true;  				completedStatsContainer.AddChild(completedPrintsCount);  				completedStatsContainer.AddChild(new HorizontalSpacer());  				completedStatsContainer.AddChild(showOnlyCompletedCheckbox);    				FlowLayoutWidget historyStatsContainer = new FlowLayoutWidget();  				historyStatsContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				historyStatsContainer.Padding = new BorderDouble(6' 2);    				showTimestampCheckbox = new CheckBox("Show Timestamp".Localize()' historyPanelTextColor' textSize: 10);  				//showTimestampCheckbox.Margin = new BorderDouble(top: 8);  				bool showTimestamp = (UserSettings.Instance.get("PrintHistoryFilterShowTimestamp") == "true");  				showTimestampCheckbox.Checked = showTimestamp;  				showTimestampCheckbox.Width = 200;    				historyStatsContainer.AddChild(new TextWidget("Total Print Time:".Localize() + " "' pointSize: 10' textColor: historyPanelTextColor));  				totalPrintTime = new TextWidget(GetPrintTimeString()' pointSize: 14' textColor: historyPanelTextColor);  				totalPrintTime.AutoExpandBoundsToText = true;  				historyStatsContainer.AddChild(totalPrintTime);  				historyStatsContainer.AddChild(new HorizontalSpacer());  				historyStatsContainer.AddChild(showTimestampCheckbox);    				FlowLayoutWidget searchPanel = new FlowLayoutWidget(FlowDirection.TopToBottom);  				searchPanel.BackgroundColor = ActiveTheme.Instance.TransparentDarkOverlay;  				searchPanel.HAnchor = HAnchor.ParentLeftRight;  				searchPanel.Padding = new BorderDouble(0' 6' 0' 2);    				searchPanel.AddChild(completedStatsContainer);  				searchPanel.AddChild(historyStatsContainer);    				FlowLayoutWidget buttonPanel = new FlowLayoutWidget();  				buttonPanel.HAnchor = HAnchor.ParentLeftRight;  				buttonPanel.Padding = new BorderDouble(0' 3);  				{  					buttonPanel.AddChild(new HorizontalSpacer());  				}    				allControls.AddChild(searchPanel);  				historyView = new PrintHistoryDataView();  				historyView.DoneLoading += historyView_DoneLoading;  				allControls.AddChild(historyView);  				allControls.AddChild(buttonPanel);  			}
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryWidget,C:\repos\MatterHackers_MatterControl\History\PrintHistoryWidget.cs,PrintHistoryWidget,The following statement contains a magic number: {  				FlowLayoutWidget completedStatsContainer = new FlowLayoutWidget();  				completedStatsContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				completedStatsContainer.Padding = new BorderDouble(6' 2);    				showOnlyCompletedCheckbox = new CheckBox("Only Show Completed".Localize()' historyPanelTextColor' textSize: 10);  				showOnlyCompletedCheckbox.Margin = new BorderDouble(top: 8);  				bool showOnlyCompleted = (UserSettings.Instance.get("PrintHistoryFilterShowCompleted") == "true");  				showOnlyCompletedCheckbox.Checked = showOnlyCompleted;  				showOnlyCompletedCheckbox.Width = 200;    				completedStatsContainer.AddChild(new TextWidget("Completed Prints:".Localize() + " "' pointSize: 10' textColor: historyPanelTextColor));  				completedPrintsCount = new TextWidget(GetCompletedPrints().ToString()' pointSize: 14' textColor: historyPanelTextColor);  				completedPrintsCount.AutoExpandBoundsToText = true;  				completedStatsContainer.AddChild(completedPrintsCount);  				completedStatsContainer.AddChild(new HorizontalSpacer());  				completedStatsContainer.AddChild(showOnlyCompletedCheckbox);    				FlowLayoutWidget historyStatsContainer = new FlowLayoutWidget();  				historyStatsContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				historyStatsContainer.Padding = new BorderDouble(6' 2);    				showTimestampCheckbox = new CheckBox("Show Timestamp".Localize()' historyPanelTextColor' textSize: 10);  				//showTimestampCheckbox.Margin = new BorderDouble(top: 8);  				bool showTimestamp = (UserSettings.Instance.get("PrintHistoryFilterShowTimestamp") == "true");  				showTimestampCheckbox.Checked = showTimestamp;  				showTimestampCheckbox.Width = 200;    				historyStatsContainer.AddChild(new TextWidget("Total Print Time:".Localize() + " "' pointSize: 10' textColor: historyPanelTextColor));  				totalPrintTime = new TextWidget(GetPrintTimeString()' pointSize: 14' textColor: historyPanelTextColor);  				totalPrintTime.AutoExpandBoundsToText = true;  				historyStatsContainer.AddChild(totalPrintTime);  				historyStatsContainer.AddChild(new HorizontalSpacer());  				historyStatsContainer.AddChild(showTimestampCheckbox);    				FlowLayoutWidget searchPanel = new FlowLayoutWidget(FlowDirection.TopToBottom);  				searchPanel.BackgroundColor = ActiveTheme.Instance.TransparentDarkOverlay;  				searchPanel.HAnchor = HAnchor.ParentLeftRight;  				searchPanel.Padding = new BorderDouble(0' 6' 0' 2);    				searchPanel.AddChild(completedStatsContainer);  				searchPanel.AddChild(historyStatsContainer);    				FlowLayoutWidget buttonPanel = new FlowLayoutWidget();  				buttonPanel.HAnchor = HAnchor.ParentLeftRight;  				buttonPanel.Padding = new BorderDouble(0' 3);  				{  					buttonPanel.AddChild(new HorizontalSpacer());  				}    				allControls.AddChild(searchPanel);  				historyView = new PrintHistoryDataView();  				historyView.DoneLoading += historyView_DoneLoading;  				allControls.AddChild(historyView);  				allControls.AddChild(buttonPanel);  			}
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryWidget,C:\repos\MatterHackers_MatterControl\History\PrintHistoryWidget.cs,PrintHistoryWidget,The following statement contains a magic number: {  				FlowLayoutWidget completedStatsContainer = new FlowLayoutWidget();  				completedStatsContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				completedStatsContainer.Padding = new BorderDouble(6' 2);    				showOnlyCompletedCheckbox = new CheckBox("Only Show Completed".Localize()' historyPanelTextColor' textSize: 10);  				showOnlyCompletedCheckbox.Margin = new BorderDouble(top: 8);  				bool showOnlyCompleted = (UserSettings.Instance.get("PrintHistoryFilterShowCompleted") == "true");  				showOnlyCompletedCheckbox.Checked = showOnlyCompleted;  				showOnlyCompletedCheckbox.Width = 200;    				completedStatsContainer.AddChild(new TextWidget("Completed Prints:".Localize() + " "' pointSize: 10' textColor: historyPanelTextColor));  				completedPrintsCount = new TextWidget(GetCompletedPrints().ToString()' pointSize: 14' textColor: historyPanelTextColor);  				completedPrintsCount.AutoExpandBoundsToText = true;  				completedStatsContainer.AddChild(completedPrintsCount);  				completedStatsContainer.AddChild(new HorizontalSpacer());  				completedStatsContainer.AddChild(showOnlyCompletedCheckbox);    				FlowLayoutWidget historyStatsContainer = new FlowLayoutWidget();  				historyStatsContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				historyStatsContainer.Padding = new BorderDouble(6' 2);    				showTimestampCheckbox = new CheckBox("Show Timestamp".Localize()' historyPanelTextColor' textSize: 10);  				//showTimestampCheckbox.Margin = new BorderDouble(top: 8);  				bool showTimestamp = (UserSettings.Instance.get("PrintHistoryFilterShowTimestamp") == "true");  				showTimestampCheckbox.Checked = showTimestamp;  				showTimestampCheckbox.Width = 200;    				historyStatsContainer.AddChild(new TextWidget("Total Print Time:".Localize() + " "' pointSize: 10' textColor: historyPanelTextColor));  				totalPrintTime = new TextWidget(GetPrintTimeString()' pointSize: 14' textColor: historyPanelTextColor);  				totalPrintTime.AutoExpandBoundsToText = true;  				historyStatsContainer.AddChild(totalPrintTime);  				historyStatsContainer.AddChild(new HorizontalSpacer());  				historyStatsContainer.AddChild(showTimestampCheckbox);    				FlowLayoutWidget searchPanel = new FlowLayoutWidget(FlowDirection.TopToBottom);  				searchPanel.BackgroundColor = ActiveTheme.Instance.TransparentDarkOverlay;  				searchPanel.HAnchor = HAnchor.ParentLeftRight;  				searchPanel.Padding = new BorderDouble(0' 6' 0' 2);    				searchPanel.AddChild(completedStatsContainer);  				searchPanel.AddChild(historyStatsContainer);    				FlowLayoutWidget buttonPanel = new FlowLayoutWidget();  				buttonPanel.HAnchor = HAnchor.ParentLeftRight;  				buttonPanel.Padding = new BorderDouble(0' 3);  				{  					buttonPanel.AddChild(new HorizontalSpacer());  				}    				allControls.AddChild(searchPanel);  				historyView = new PrintHistoryDataView();  				historyView.DoneLoading += historyView_DoneLoading;  				allControls.AddChild(historyView);  				allControls.AddChild(buttonPanel);  			}
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryWidget,C:\repos\MatterHackers_MatterControl\History\PrintHistoryWidget.cs,PrintHistoryWidget,The following statement contains a magic number: {  				FlowLayoutWidget completedStatsContainer = new FlowLayoutWidget();  				completedStatsContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				completedStatsContainer.Padding = new BorderDouble(6' 2);    				showOnlyCompletedCheckbox = new CheckBox("Only Show Completed".Localize()' historyPanelTextColor' textSize: 10);  				showOnlyCompletedCheckbox.Margin = new BorderDouble(top: 8);  				bool showOnlyCompleted = (UserSettings.Instance.get("PrintHistoryFilterShowCompleted") == "true");  				showOnlyCompletedCheckbox.Checked = showOnlyCompleted;  				showOnlyCompletedCheckbox.Width = 200;    				completedStatsContainer.AddChild(new TextWidget("Completed Prints:".Localize() + " "' pointSize: 10' textColor: historyPanelTextColor));  				completedPrintsCount = new TextWidget(GetCompletedPrints().ToString()' pointSize: 14' textColor: historyPanelTextColor);  				completedPrintsCount.AutoExpandBoundsToText = true;  				completedStatsContainer.AddChild(completedPrintsCount);  				completedStatsContainer.AddChild(new HorizontalSpacer());  				completedStatsContainer.AddChild(showOnlyCompletedCheckbox);    				FlowLayoutWidget historyStatsContainer = new FlowLayoutWidget();  				historyStatsContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				historyStatsContainer.Padding = new BorderDouble(6' 2);    				showTimestampCheckbox = new CheckBox("Show Timestamp".Localize()' historyPanelTextColor' textSize: 10);  				//showTimestampCheckbox.Margin = new BorderDouble(top: 8);  				bool showTimestamp = (UserSettings.Instance.get("PrintHistoryFilterShowTimestamp") == "true");  				showTimestampCheckbox.Checked = showTimestamp;  				showTimestampCheckbox.Width = 200;    				historyStatsContainer.AddChild(new TextWidget("Total Print Time:".Localize() + " "' pointSize: 10' textColor: historyPanelTextColor));  				totalPrintTime = new TextWidget(GetPrintTimeString()' pointSize: 14' textColor: historyPanelTextColor);  				totalPrintTime.AutoExpandBoundsToText = true;  				historyStatsContainer.AddChild(totalPrintTime);  				historyStatsContainer.AddChild(new HorizontalSpacer());  				historyStatsContainer.AddChild(showTimestampCheckbox);    				FlowLayoutWidget searchPanel = new FlowLayoutWidget(FlowDirection.TopToBottom);  				searchPanel.BackgroundColor = ActiveTheme.Instance.TransparentDarkOverlay;  				searchPanel.HAnchor = HAnchor.ParentLeftRight;  				searchPanel.Padding = new BorderDouble(0' 6' 0' 2);    				searchPanel.AddChild(completedStatsContainer);  				searchPanel.AddChild(historyStatsContainer);    				FlowLayoutWidget buttonPanel = new FlowLayoutWidget();  				buttonPanel.HAnchor = HAnchor.ParentLeftRight;  				buttonPanel.Padding = new BorderDouble(0' 3);  				{  					buttonPanel.AddChild(new HorizontalSpacer());  				}    				allControls.AddChild(searchPanel);  				historyView = new PrintHistoryDataView();  				historyView.DoneLoading += historyView_DoneLoading;  				allControls.AddChild(historyView);  				allControls.AddChild(buttonPanel);  			}
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryWidget,C:\repos\MatterHackers_MatterControl\History\PrintHistoryWidget.cs,PrintHistoryWidget,The following statement contains a magic number: {  				FlowLayoutWidget completedStatsContainer = new FlowLayoutWidget();  				completedStatsContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				completedStatsContainer.Padding = new BorderDouble(6' 2);    				showOnlyCompletedCheckbox = new CheckBox("Only Show Completed".Localize()' historyPanelTextColor' textSize: 10);  				showOnlyCompletedCheckbox.Margin = new BorderDouble(top: 8);  				bool showOnlyCompleted = (UserSettings.Instance.get("PrintHistoryFilterShowCompleted") == "true");  				showOnlyCompletedCheckbox.Checked = showOnlyCompleted;  				showOnlyCompletedCheckbox.Width = 200;    				completedStatsContainer.AddChild(new TextWidget("Completed Prints:".Localize() + " "' pointSize: 10' textColor: historyPanelTextColor));  				completedPrintsCount = new TextWidget(GetCompletedPrints().ToString()' pointSize: 14' textColor: historyPanelTextColor);  				completedPrintsCount.AutoExpandBoundsToText = true;  				completedStatsContainer.AddChild(completedPrintsCount);  				completedStatsContainer.AddChild(new HorizontalSpacer());  				completedStatsContainer.AddChild(showOnlyCompletedCheckbox);    				FlowLayoutWidget historyStatsContainer = new FlowLayoutWidget();  				historyStatsContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				historyStatsContainer.Padding = new BorderDouble(6' 2);    				showTimestampCheckbox = new CheckBox("Show Timestamp".Localize()' historyPanelTextColor' textSize: 10);  				//showTimestampCheckbox.Margin = new BorderDouble(top: 8);  				bool showTimestamp = (UserSettings.Instance.get("PrintHistoryFilterShowTimestamp") == "true");  				showTimestampCheckbox.Checked = showTimestamp;  				showTimestampCheckbox.Width = 200;    				historyStatsContainer.AddChild(new TextWidget("Total Print Time:".Localize() + " "' pointSize: 10' textColor: historyPanelTextColor));  				totalPrintTime = new TextWidget(GetPrintTimeString()' pointSize: 14' textColor: historyPanelTextColor);  				totalPrintTime.AutoExpandBoundsToText = true;  				historyStatsContainer.AddChild(totalPrintTime);  				historyStatsContainer.AddChild(new HorizontalSpacer());  				historyStatsContainer.AddChild(showTimestampCheckbox);    				FlowLayoutWidget searchPanel = new FlowLayoutWidget(FlowDirection.TopToBottom);  				searchPanel.BackgroundColor = ActiveTheme.Instance.TransparentDarkOverlay;  				searchPanel.HAnchor = HAnchor.ParentLeftRight;  				searchPanel.Padding = new BorderDouble(0' 6' 0' 2);    				searchPanel.AddChild(completedStatsContainer);  				searchPanel.AddChild(historyStatsContainer);    				FlowLayoutWidget buttonPanel = new FlowLayoutWidget();  				buttonPanel.HAnchor = HAnchor.ParentLeftRight;  				buttonPanel.Padding = new BorderDouble(0' 3);  				{  					buttonPanel.AddChild(new HorizontalSpacer());  				}    				allControls.AddChild(searchPanel);  				historyView = new PrintHistoryDataView();  				historyView.DoneLoading += historyView_DoneLoading;  				allControls.AddChild(historyView);  				allControls.AddChild(buttonPanel);  			}
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryWidget,C:\repos\MatterHackers_MatterControl\History\PrintHistoryWidget.cs,PrintHistoryWidget,The following statement contains a magic number: {  				FlowLayoutWidget completedStatsContainer = new FlowLayoutWidget();  				completedStatsContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				completedStatsContainer.Padding = new BorderDouble(6' 2);    				showOnlyCompletedCheckbox = new CheckBox("Only Show Completed".Localize()' historyPanelTextColor' textSize: 10);  				showOnlyCompletedCheckbox.Margin = new BorderDouble(top: 8);  				bool showOnlyCompleted = (UserSettings.Instance.get("PrintHistoryFilterShowCompleted") == "true");  				showOnlyCompletedCheckbox.Checked = showOnlyCompleted;  				showOnlyCompletedCheckbox.Width = 200;    				completedStatsContainer.AddChild(new TextWidget("Completed Prints:".Localize() + " "' pointSize: 10' textColor: historyPanelTextColor));  				completedPrintsCount = new TextWidget(GetCompletedPrints().ToString()' pointSize: 14' textColor: historyPanelTextColor);  				completedPrintsCount.AutoExpandBoundsToText = true;  				completedStatsContainer.AddChild(completedPrintsCount);  				completedStatsContainer.AddChild(new HorizontalSpacer());  				completedStatsContainer.AddChild(showOnlyCompletedCheckbox);    				FlowLayoutWidget historyStatsContainer = new FlowLayoutWidget();  				historyStatsContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				historyStatsContainer.Padding = new BorderDouble(6' 2);    				showTimestampCheckbox = new CheckBox("Show Timestamp".Localize()' historyPanelTextColor' textSize: 10);  				//showTimestampCheckbox.Margin = new BorderDouble(top: 8);  				bool showTimestamp = (UserSettings.Instance.get("PrintHistoryFilterShowTimestamp") == "true");  				showTimestampCheckbox.Checked = showTimestamp;  				showTimestampCheckbox.Width = 200;    				historyStatsContainer.AddChild(new TextWidget("Total Print Time:".Localize() + " "' pointSize: 10' textColor: historyPanelTextColor));  				totalPrintTime = new TextWidget(GetPrintTimeString()' pointSize: 14' textColor: historyPanelTextColor);  				totalPrintTime.AutoExpandBoundsToText = true;  				historyStatsContainer.AddChild(totalPrintTime);  				historyStatsContainer.AddChild(new HorizontalSpacer());  				historyStatsContainer.AddChild(showTimestampCheckbox);    				FlowLayoutWidget searchPanel = new FlowLayoutWidget(FlowDirection.TopToBottom);  				searchPanel.BackgroundColor = ActiveTheme.Instance.TransparentDarkOverlay;  				searchPanel.HAnchor = HAnchor.ParentLeftRight;  				searchPanel.Padding = new BorderDouble(0' 6' 0' 2);    				searchPanel.AddChild(completedStatsContainer);  				searchPanel.AddChild(historyStatsContainer);    				FlowLayoutWidget buttonPanel = new FlowLayoutWidget();  				buttonPanel.HAnchor = HAnchor.ParentLeftRight;  				buttonPanel.Padding = new BorderDouble(0' 3);  				{  					buttonPanel.AddChild(new HorizontalSpacer());  				}    				allControls.AddChild(searchPanel);  				historyView = new PrintHistoryDataView();  				historyView.DoneLoading += historyView_DoneLoading;  				allControls.AddChild(historyView);  				allControls.AddChild(buttonPanel);  			}
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryWidget,C:\repos\MatterHackers_MatterControl\History\PrintHistoryWidget.cs,GetPrintTimeString,The following statement contains a magic number: if (seconds <= 0)  			{  				timeString = "0min";  			}  			else if (seconds > 86400)  			{  				timeString = "{0}d {1}hrs {2}min".FormatWith(span.Days' span.Hours' span.Minutes);  			}  			else if (seconds > 3600)  			{  				timeString = "{0}hrs {1}min".FormatWith(span.Hours' span.Minutes);  			}  			else  			{  				timeString = "{0}min".FormatWith(span.Minutes);  			}
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryWidget,C:\repos\MatterHackers_MatterControl\History\PrintHistoryWidget.cs,GetPrintTimeString,The following statement contains a magic number: if (seconds <= 0)  			{  				timeString = "0min";  			}  			else if (seconds > 86400)  			{  				timeString = "{0}d {1}hrs {2}min".FormatWith(span.Days' span.Hours' span.Minutes);  			}  			else if (seconds > 3600)  			{  				timeString = "{0}hrs {1}min".FormatWith(span.Hours' span.Minutes);  			}  			else  			{  				timeString = "{0}min".FormatWith(span.Minutes);  			}
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryWidget,C:\repos\MatterHackers_MatterControl\History\PrintHistoryWidget.cs,SetDisplayAttributes,The following statement contains a magic number: this.Padding = new BorderDouble(3);
Magic Number,MatterHackers.MatterControl.PrintLibrary,LibraryRowItemCollection,C:\repos\MatterHackers_MatterControl\Library\LibraryRowItemCollection.cs,GetItemActionButtons,The following statement contains a magic number: openButton.Width = 100;
Magic Number,MatterHackers.MatterControl.PrintLibrary,LibraryRowItemCollection,C:\repos\MatterHackers_MatterControl\Library\LibraryRowItemCollection.cs,GetItemActionButtons,The following statement contains a magic number: buttonContainer.Width = 100;
Magic Number,MatterHackers.MatterControl.PrintLibrary,LibraryRowItemCollection,C:\repos\MatterHackers_MatterControl\Library\LibraryRowItemCollection.cs,SetDisplayAttributes,The following statement contains a magic number: this.Height = 50 * GuiWidget.DeviceScale;
Magic Number,MatterHackers.MatterControl.PrintLibrary,LibraryRowItemCollection,C:\repos\MatterHackers_MatterControl\Library\LibraryRowItemCollection.cs,SetDisplayAttributes,The following statement contains a magic number: this.Margin = new BorderDouble(6' 0' 6' 6);
Magic Number,MatterHackers.MatterControl.PrintLibrary,LibraryRowItemCollection,C:\repos\MatterHackers_MatterControl\Library\LibraryRowItemCollection.cs,SetDisplayAttributes,The following statement contains a magic number: this.Margin = new BorderDouble(6' 0' 6' 6);
Magic Number,MatterHackers.MatterControl.PrintLibrary,LibraryRowItemCollection,C:\repos\MatterHackers_MatterControl\Library\LibraryRowItemCollection.cs,SetDisplayAttributes,The following statement contains a magic number: this.Margin = new BorderDouble(6' 0' 6' 6);
Magic Number,MatterHackers.MatterControl.PrintLibrary,LibraryRowItemPart,C:\repos\MatterHackers_MatterControl\Library\LibraryRowItemPart.cs,AddLoadingProgressBar,The following statement contains a magic number: processingProgressControl = new ProgressControl("Downloading...".Localize()' RGBA_Bytes.Black' ActiveTheme.Instance.SecondaryAccentColor' (int)(100 * GuiWidget.DeviceScale)' 5' 0)              {                  PointSize = 8'              };
Magic Number,MatterHackers.MatterControl.PrintLibrary,LibraryRowItemPart,C:\repos\MatterHackers_MatterControl\Library\LibraryRowItemPart.cs,AddLoadingProgressBar,The following statement contains a magic number: processingProgressControl = new ProgressControl("Downloading...".Localize()' RGBA_Bytes.Black' ActiveTheme.Instance.SecondaryAccentColor' (int)(100 * GuiWidget.DeviceScale)' 5' 0)              {                  PointSize = 8'              };
Magic Number,MatterHackers.MatterControl.PrintLibrary,LibraryRowItemPart,C:\repos\MatterHackers_MatterControl\Library\LibraryRowItemPart.cs,AddLoadingProgressBar,The following statement contains a magic number: processingProgressControl = new ProgressControl("Downloading...".Localize()' RGBA_Bytes.Black' ActiveTheme.Instance.SecondaryAccentColor' (int)(100 * GuiWidget.DeviceScale)' 5' 0)              {                  PointSize = 8'              };
Magic Number,MatterHackers.MatterControl.PrintLibrary,LibraryRowItemPart,C:\repos\MatterHackers_MatterControl\Library\LibraryRowItemPart.cs,OnDraw,The following statement contains a magic number: if (this.IsSelectedItem)  			{  				this.BackgroundColor = ActiveTheme.Instance.PrimaryAccentColor;  				this.partLabel.TextColor = RGBA_Bytes.White;  				this.selectionCheckBox.TextColor = RGBA_Bytes.White;  			}  			else if (this.IsHoverItem)  			{  				RectangleDouble Bounds = LocalBounds;  				RoundedRect rectBorder = new RoundedRect(Bounds' 0);    				this.BackgroundColor = RGBA_Bytes.White;  				this.partLabel.TextColor = RGBA_Bytes.Black;  				this.selectionCheckBox.TextColor = RGBA_Bytes.Black;    				graphics2D.Render(new Stroke(rectBorder' 3)' ActiveTheme.Instance.SecondaryAccentColor);  			}  			else  			{  				this.BackgroundColor = new RGBA_Bytes(255' 255' 255' 255);  				this.partLabel.TextColor = RGBA_Bytes.Black;  				this.selectionCheckBox.TextColor = RGBA_Bytes.Black;  			}
Magic Number,MatterHackers.MatterControl.PrintLibrary,LibraryRowItemPart,C:\repos\MatterHackers_MatterControl\Library\LibraryRowItemPart.cs,OnDraw,The following statement contains a magic number: if (this.IsSelectedItem)  			{  				this.BackgroundColor = ActiveTheme.Instance.PrimaryAccentColor;  				this.partLabel.TextColor = RGBA_Bytes.White;  				this.selectionCheckBox.TextColor = RGBA_Bytes.White;  			}  			else if (this.IsHoverItem)  			{  				RectangleDouble Bounds = LocalBounds;  				RoundedRect rectBorder = new RoundedRect(Bounds' 0);    				this.BackgroundColor = RGBA_Bytes.White;  				this.partLabel.TextColor = RGBA_Bytes.Black;  				this.selectionCheckBox.TextColor = RGBA_Bytes.Black;    				graphics2D.Render(new Stroke(rectBorder' 3)' ActiveTheme.Instance.SecondaryAccentColor);  			}  			else  			{  				this.BackgroundColor = new RGBA_Bytes(255' 255' 255' 255);  				this.partLabel.TextColor = RGBA_Bytes.Black;  				this.selectionCheckBox.TextColor = RGBA_Bytes.Black;  			}
Magic Number,MatterHackers.MatterControl.PrintLibrary,LibraryRowItemPart,C:\repos\MatterHackers_MatterControl\Library\LibraryRowItemPart.cs,OnDraw,The following statement contains a magic number: if (this.IsSelectedItem)  			{  				this.BackgroundColor = ActiveTheme.Instance.PrimaryAccentColor;  				this.partLabel.TextColor = RGBA_Bytes.White;  				this.selectionCheckBox.TextColor = RGBA_Bytes.White;  			}  			else if (this.IsHoverItem)  			{  				RectangleDouble Bounds = LocalBounds;  				RoundedRect rectBorder = new RoundedRect(Bounds' 0);    				this.BackgroundColor = RGBA_Bytes.White;  				this.partLabel.TextColor = RGBA_Bytes.Black;  				this.selectionCheckBox.TextColor = RGBA_Bytes.Black;    				graphics2D.Render(new Stroke(rectBorder' 3)' ActiveTheme.Instance.SecondaryAccentColor);  			}  			else  			{  				this.BackgroundColor = new RGBA_Bytes(255' 255' 255' 255);  				this.partLabel.TextColor = RGBA_Bytes.Black;  				this.selectionCheckBox.TextColor = RGBA_Bytes.Black;  			}
Magic Number,MatterHackers.MatterControl.PrintLibrary,LibraryRowItemPart,C:\repos\MatterHackers_MatterControl\Library\LibraryRowItemPart.cs,OnDraw,The following statement contains a magic number: if (this.IsSelectedItem)  			{  				this.BackgroundColor = ActiveTheme.Instance.PrimaryAccentColor;  				this.partLabel.TextColor = RGBA_Bytes.White;  				this.selectionCheckBox.TextColor = RGBA_Bytes.White;  			}  			else if (this.IsHoverItem)  			{  				RectangleDouble Bounds = LocalBounds;  				RoundedRect rectBorder = new RoundedRect(Bounds' 0);    				this.BackgroundColor = RGBA_Bytes.White;  				this.partLabel.TextColor = RGBA_Bytes.Black;  				this.selectionCheckBox.TextColor = RGBA_Bytes.Black;    				graphics2D.Render(new Stroke(rectBorder' 3)' ActiveTheme.Instance.SecondaryAccentColor);  			}  			else  			{  				this.BackgroundColor = new RGBA_Bytes(255' 255' 255' 255);  				this.partLabel.TextColor = RGBA_Bytes.Black;  				this.selectionCheckBox.TextColor = RGBA_Bytes.Black;  			}
Magic Number,MatterHackers.MatterControl.PrintLibrary,LibraryRowItemPart,C:\repos\MatterHackers_MatterControl\Library\LibraryRowItemPart.cs,OnDraw,The following statement contains a magic number: if (this.IsSelectedItem)  			{  				this.BackgroundColor = ActiveTheme.Instance.PrimaryAccentColor;  				this.partLabel.TextColor = RGBA_Bytes.White;  				this.selectionCheckBox.TextColor = RGBA_Bytes.White;  			}  			else if (this.IsHoverItem)  			{  				RectangleDouble Bounds = LocalBounds;  				RoundedRect rectBorder = new RoundedRect(Bounds' 0);    				this.BackgroundColor = RGBA_Bytes.White;  				this.partLabel.TextColor = RGBA_Bytes.Black;  				this.selectionCheckBox.TextColor = RGBA_Bytes.Black;    				graphics2D.Render(new Stroke(rectBorder' 3)' ActiveTheme.Instance.SecondaryAccentColor);  			}  			else  			{  				this.BackgroundColor = new RGBA_Bytes(255' 255' 255' 255);  				this.partLabel.TextColor = RGBA_Bytes.Black;  				this.selectionCheckBox.TextColor = RGBA_Bytes.Black;  			}
Magic Number,MatterHackers.MatterControl.PrintLibrary,LibraryRowItemPart,C:\repos\MatterHackers_MatterControl\Library\LibraryRowItemPart.cs,GetItemActionButtons,The following statement contains a magic number: printButton.Width = 100;
Magic Number,MatterHackers.MatterControl.PrintLibrary,LibraryRowItemPart,C:\repos\MatterHackers_MatterControl\Library\LibraryRowItemPart.cs,GetItemActionButtons,The following statement contains a magic number: viewButton.Width = 100;
Magic Number,MatterHackers.MatterControl.PrintLibrary,LibraryRowItemPart,C:\repos\MatterHackers_MatterControl\Library\LibraryRowItemPart.cs,GetItemActionButtons,The following statement contains a magic number: buttonContainer.Width = 200;
Magic Number,MatterHackers.MatterControl.PrintLibrary,LibraryRowItemPart,C:\repos\MatterHackers_MatterControl\Library\LibraryRowItemPart.cs,SetDisplayAttributes,The following statement contains a magic number: this.Height = 50 * GuiWidget.DeviceScale;
Magic Number,MatterHackers.MatterControl.PrintLibrary,LibraryRowItemPart,C:\repos\MatterHackers_MatterControl\Library\LibraryRowItemPart.cs,SetDisplayAttributes,The following statement contains a magic number: this.Margin = new BorderDouble(6' 0' 6' 6);
Magic Number,MatterHackers.MatterControl.PrintLibrary,LibraryRowItemPart,C:\repos\MatterHackers_MatterControl\Library\LibraryRowItemPart.cs,SetDisplayAttributes,The following statement contains a magic number: this.Margin = new BorderDouble(6' 0' 6' 6);
Magic Number,MatterHackers.MatterControl.PrintLibrary,LibraryRowItemPart,C:\repos\MatterHackers_MatterControl\Library\LibraryRowItemPart.cs,SetDisplayAttributes,The following statement contains a magic number: this.Margin = new BorderDouble(6' 0' 6' 6);
Magic Number,MatterHackers.MatterControl.PrintLibrary,LibraryDataView,C:\repos\MatterHackers_MatterControl\Library\LibraryDataView.cs,LibraryDataView,The following statement contains a magic number: {  				this.AnchorAll();  				this.BackgroundColor = ActiveTheme.Instance.SecondaryBackgroundColor;  				this.ScrollArea.Padding = new BorderDouble(3);  			}
Magic Number,MatterHackers.MatterControl.PrintLibrary,LibraryDataView,C:\repos\MatterHackers_MatterControl\Library\LibraryDataView.cs,GetThumbnailWidget,The following statement contains a magic number: Vector2 expectedSize = new Vector2((int)(50 * GuiWidget.DeviceScale)' (int)(50 * GuiWidget.DeviceScale));
Magic Number,MatterHackers.MatterControl.PrintLibrary,LibraryDataView,C:\repos\MatterHackers_MatterControl\Library\LibraryDataView.cs,GetThumbnailWidget,The following statement contains a magic number: Vector2 expectedSize = new Vector2((int)(50 * GuiWidget.DeviceScale)' (int)(50 * GuiWidget.DeviceScale));
Magic Number,MatterHackers.MatterControl.PrintLibrary,LibraryRowItem,C:\repos\MatterHackers_MatterControl\Library\LibraryRowItem.cs,OnDraw,The following statement contains a magic number: if (this.IsSelectedItem && !this.IsViewHelperItem)  			{  				this.BackgroundColor = ActiveTheme.Instance.PrimaryAccentColor;  				this.partLabel.TextColor = RGBA_Bytes.White;  				this.selectionCheckBox.TextColor = RGBA_Bytes.White;  			}  			else if (this.IsHoverItem)  			{  				RectangleDouble Bounds = LocalBounds;  				RoundedRect rectBorder = new RoundedRect(Bounds' 0);    				this.BackgroundColor = RGBA_Bytes.White;  				this.partLabel.TextColor = RGBA_Bytes.Black;  				this.selectionCheckBox.TextColor = RGBA_Bytes.Black;    				graphics2D.Render(new Stroke(rectBorder' 3)' ActiveTheme.Instance.SecondaryAccentColor);  			}  			else  			{  				this.BackgroundColor = new RGBA_Bytes(255' 255' 255' 255);  				this.partLabel.TextColor = RGBA_Bytes.Black;  				this.selectionCheckBox.TextColor = RGBA_Bytes.Black;  			}
Magic Number,MatterHackers.MatterControl.PrintLibrary,LibraryRowItem,C:\repos\MatterHackers_MatterControl\Library\LibraryRowItem.cs,OnDraw,The following statement contains a magic number: if (this.IsSelectedItem && !this.IsViewHelperItem)  			{  				this.BackgroundColor = ActiveTheme.Instance.PrimaryAccentColor;  				this.partLabel.TextColor = RGBA_Bytes.White;  				this.selectionCheckBox.TextColor = RGBA_Bytes.White;  			}  			else if (this.IsHoverItem)  			{  				RectangleDouble Bounds = LocalBounds;  				RoundedRect rectBorder = new RoundedRect(Bounds' 0);    				this.BackgroundColor = RGBA_Bytes.White;  				this.partLabel.TextColor = RGBA_Bytes.Black;  				this.selectionCheckBox.TextColor = RGBA_Bytes.Black;    				graphics2D.Render(new Stroke(rectBorder' 3)' ActiveTheme.Instance.SecondaryAccentColor);  			}  			else  			{  				this.BackgroundColor = new RGBA_Bytes(255' 255' 255' 255);  				this.partLabel.TextColor = RGBA_Bytes.Black;  				this.selectionCheckBox.TextColor = RGBA_Bytes.Black;  			}
Magic Number,MatterHackers.MatterControl.PrintLibrary,LibraryRowItem,C:\repos\MatterHackers_MatterControl\Library\LibraryRowItem.cs,OnDraw,The following statement contains a magic number: if (this.IsSelectedItem && !this.IsViewHelperItem)  			{  				this.BackgroundColor = ActiveTheme.Instance.PrimaryAccentColor;  				this.partLabel.TextColor = RGBA_Bytes.White;  				this.selectionCheckBox.TextColor = RGBA_Bytes.White;  			}  			else if (this.IsHoverItem)  			{  				RectangleDouble Bounds = LocalBounds;  				RoundedRect rectBorder = new RoundedRect(Bounds' 0);    				this.BackgroundColor = RGBA_Bytes.White;  				this.partLabel.TextColor = RGBA_Bytes.Black;  				this.selectionCheckBox.TextColor = RGBA_Bytes.Black;    				graphics2D.Render(new Stroke(rectBorder' 3)' ActiveTheme.Instance.SecondaryAccentColor);  			}  			else  			{  				this.BackgroundColor = new RGBA_Bytes(255' 255' 255' 255);  				this.partLabel.TextColor = RGBA_Bytes.Black;  				this.selectionCheckBox.TextColor = RGBA_Bytes.Black;  			}
Magic Number,MatterHackers.MatterControl.PrintLibrary,LibraryRowItem,C:\repos\MatterHackers_MatterControl\Library\LibraryRowItem.cs,OnDraw,The following statement contains a magic number: if (this.IsSelectedItem && !this.IsViewHelperItem)  			{  				this.BackgroundColor = ActiveTheme.Instance.PrimaryAccentColor;  				this.partLabel.TextColor = RGBA_Bytes.White;  				this.selectionCheckBox.TextColor = RGBA_Bytes.White;  			}  			else if (this.IsHoverItem)  			{  				RectangleDouble Bounds = LocalBounds;  				RoundedRect rectBorder = new RoundedRect(Bounds' 0);    				this.BackgroundColor = RGBA_Bytes.White;  				this.partLabel.TextColor = RGBA_Bytes.Black;  				this.selectionCheckBox.TextColor = RGBA_Bytes.Black;    				graphics2D.Render(new Stroke(rectBorder' 3)' ActiveTheme.Instance.SecondaryAccentColor);  			}  			else  			{  				this.BackgroundColor = new RGBA_Bytes(255' 255' 255' 255);  				this.partLabel.TextColor = RGBA_Bytes.Black;  				this.selectionCheckBox.TextColor = RGBA_Bytes.Black;  			}
Magic Number,MatterHackers.MatterControl.PrintLibrary,LibraryRowItem,C:\repos\MatterHackers_MatterControl\Library\LibraryRowItem.cs,OnDraw,The following statement contains a magic number: if (this.IsSelectedItem && !this.IsViewHelperItem)  			{  				this.BackgroundColor = ActiveTheme.Instance.PrimaryAccentColor;  				this.partLabel.TextColor = RGBA_Bytes.White;  				this.selectionCheckBox.TextColor = RGBA_Bytes.White;  			}  			else if (this.IsHoverItem)  			{  				RectangleDouble Bounds = LocalBounds;  				RoundedRect rectBorder = new RoundedRect(Bounds' 0);    				this.BackgroundColor = RGBA_Bytes.White;  				this.partLabel.TextColor = RGBA_Bytes.Black;  				this.selectionCheckBox.TextColor = RGBA_Bytes.Black;    				graphics2D.Render(new Stroke(rectBorder' 3)' ActiveTheme.Instance.SecondaryAccentColor);  			}  			else  			{  				this.BackgroundColor = new RGBA_Bytes(255' 255' 255' 255);  				this.partLabel.TextColor = RGBA_Bytes.Black;  				this.selectionCheckBox.TextColor = RGBA_Bytes.Black;  			}
Magic Number,MatterHackers.MatterControl.PrintLibrary,LibraryRowItem,C:\repos\MatterHackers_MatterControl\Library\LibraryRowItem.cs,CreateGuiElements,The following statement contains a magic number: linkButtonFactory.fontSize = 10;
Magic Number,MatterHackers.MatterControl.PrintLibrary,LibraryRowItem,C:\repos\MatterHackers_MatterControl\Library\LibraryRowItem.cs,CreateGuiElements,The following statement contains a magic number: {  				partLabel = new TextWidget(this.ItemName.Replace('_'' ' ')' pointSize: 14);    				GuiWidget primaryContainer = new GuiWidget();  				primaryContainer.HAnchor = HAnchor.ParentLeftRight;  				primaryContainer.VAnchor = VAnchor.ParentBottomTop;  				primaryContainer.Name = "Row Item " + partLabel.Text;    				FlowLayoutWidget primaryFlow = new FlowLayoutWidget(FlowDirection.LeftToRight);  				primaryFlow.HAnchor = HAnchor.ParentLeftRight;  				primaryFlow.VAnchor = VAnchor.ParentBottomTop;    				selectionCheckBoxContainer = new GuiWidget();  				selectionCheckBoxContainer.VAnchor = VAnchor.ParentBottomTop;  				selectionCheckBoxContainer.Width = 40;  				selectionCheckBoxContainer.Visible = false;  				selectionCheckBoxContainer.Margin = new BorderDouble(left: 6);  				selectionCheckBox = new CheckBox("");  				selectionCheckBox.Click += selectionCheckBox_Click;  				selectionCheckBox.Name = "Row Item Select Checkbox";  				selectionCheckBox.VAnchor = VAnchor.ParentCenter;  				selectionCheckBox.HAnchor = HAnchor.ParentCenter;  				selectionCheckBoxContainer.AddChild(selectionCheckBox);    				middleColumn = new GuiWidget(0.0' 0.0);  				middleColumn.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				middleColumn.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  				middleColumn.Margin = new BorderDouble(10' 3);  				{  					partLabel.TextColor = WidgetTextColor;  					partLabel.MinimumSize = new Vector2(1' 18);  					partLabel.VAnchor = VAnchor.ParentCenter;  					middleColumn.AddChild(partLabel);    					bool mouseDownOnMiddle = false;  					middleColumn.MouseDown += (sender' e) =>  					{  						// Abort normal processing for view helpers  						if (this.IsViewHelperItem)  						{  							return;  						}  						mouseDownOnMiddle = true;  					};    					middleColumn.MouseUp += (sender' e) =>  					{  						if (mouseDownOnMiddle &  						middleColumn.LocalBounds.Contains(e.Position))  						{  							if (this.libraryDataView.EditMode)  							{  								if (this.IsSelectedItem)  								{  									libraryDataView.SelectedItems.Remove(this);  								}  								else  								{  									libraryDataView.SelectedItems.Add(this);  								}  								Invalidate();  							}  							else  							{  								// we only have single selection  								if (this.IsSelectedItem)  								{  									// It is already selected' do nothing.  								}  								else  								{  									libraryDataView.ClearSelectedItems();  									libraryDataView.SelectedItems.Add(this);  									Invalidate();  								}  							}  						}    						mouseDownOnMiddle = false;  					};  				}  				primaryFlow.AddChild(selectionCheckBoxContainer);    				primaryFlow.AddChild(thumbnailWidget);  				primaryFlow.AddChild(middleColumn);    				primaryContainer.AddChild(primaryFlow);    				rightButtonOverlay = GetItemActionButtons();  				rightButtonOverlay.Visible = false;    				mainContainer.AddChild(primaryContainer);  				mainContainer.AddChild(rightButtonOverlay);  			}
Magic Number,MatterHackers.MatterControl.PrintLibrary,LibraryRowItem,C:\repos\MatterHackers_MatterControl\Library\LibraryRowItem.cs,CreateGuiElements,The following statement contains a magic number: {  				partLabel = new TextWidget(this.ItemName.Replace('_'' ' ')' pointSize: 14);    				GuiWidget primaryContainer = new GuiWidget();  				primaryContainer.HAnchor = HAnchor.ParentLeftRight;  				primaryContainer.VAnchor = VAnchor.ParentBottomTop;  				primaryContainer.Name = "Row Item " + partLabel.Text;    				FlowLayoutWidget primaryFlow = new FlowLayoutWidget(FlowDirection.LeftToRight);  				primaryFlow.HAnchor = HAnchor.ParentLeftRight;  				primaryFlow.VAnchor = VAnchor.ParentBottomTop;    				selectionCheckBoxContainer = new GuiWidget();  				selectionCheckBoxContainer.VAnchor = VAnchor.ParentBottomTop;  				selectionCheckBoxContainer.Width = 40;  				selectionCheckBoxContainer.Visible = false;  				selectionCheckBoxContainer.Margin = new BorderDouble(left: 6);  				selectionCheckBox = new CheckBox("");  				selectionCheckBox.Click += selectionCheckBox_Click;  				selectionCheckBox.Name = "Row Item Select Checkbox";  				selectionCheckBox.VAnchor = VAnchor.ParentCenter;  				selectionCheckBox.HAnchor = HAnchor.ParentCenter;  				selectionCheckBoxContainer.AddChild(selectionCheckBox);    				middleColumn = new GuiWidget(0.0' 0.0);  				middleColumn.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				middleColumn.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  				middleColumn.Margin = new BorderDouble(10' 3);  				{  					partLabel.TextColor = WidgetTextColor;  					partLabel.MinimumSize = new Vector2(1' 18);  					partLabel.VAnchor = VAnchor.ParentCenter;  					middleColumn.AddChild(partLabel);    					bool mouseDownOnMiddle = false;  					middleColumn.MouseDown += (sender' e) =>  					{  						// Abort normal processing for view helpers  						if (this.IsViewHelperItem)  						{  							return;  						}  						mouseDownOnMiddle = true;  					};    					middleColumn.MouseUp += (sender' e) =>  					{  						if (mouseDownOnMiddle &  						middleColumn.LocalBounds.Contains(e.Position))  						{  							if (this.libraryDataView.EditMode)  							{  								if (this.IsSelectedItem)  								{  									libraryDataView.SelectedItems.Remove(this);  								}  								else  								{  									libraryDataView.SelectedItems.Add(this);  								}  								Invalidate();  							}  							else  							{  								// we only have single selection  								if (this.IsSelectedItem)  								{  									// It is already selected' do nothing.  								}  								else  								{  									libraryDataView.ClearSelectedItems();  									libraryDataView.SelectedItems.Add(this);  									Invalidate();  								}  							}  						}    						mouseDownOnMiddle = false;  					};  				}  				primaryFlow.AddChild(selectionCheckBoxContainer);    				primaryFlow.AddChild(thumbnailWidget);  				primaryFlow.AddChild(middleColumn);    				primaryContainer.AddChild(primaryFlow);    				rightButtonOverlay = GetItemActionButtons();  				rightButtonOverlay.Visible = false;    				mainContainer.AddChild(primaryContainer);  				mainContainer.AddChild(rightButtonOverlay);  			}
Magic Number,MatterHackers.MatterControl.PrintLibrary,LibraryRowItem,C:\repos\MatterHackers_MatterControl\Library\LibraryRowItem.cs,CreateGuiElements,The following statement contains a magic number: {  				partLabel = new TextWidget(this.ItemName.Replace('_'' ' ')' pointSize: 14);    				GuiWidget primaryContainer = new GuiWidget();  				primaryContainer.HAnchor = HAnchor.ParentLeftRight;  				primaryContainer.VAnchor = VAnchor.ParentBottomTop;  				primaryContainer.Name = "Row Item " + partLabel.Text;    				FlowLayoutWidget primaryFlow = new FlowLayoutWidget(FlowDirection.LeftToRight);  				primaryFlow.HAnchor = HAnchor.ParentLeftRight;  				primaryFlow.VAnchor = VAnchor.ParentBottomTop;    				selectionCheckBoxContainer = new GuiWidget();  				selectionCheckBoxContainer.VAnchor = VAnchor.ParentBottomTop;  				selectionCheckBoxContainer.Width = 40;  				selectionCheckBoxContainer.Visible = false;  				selectionCheckBoxContainer.Margin = new BorderDouble(left: 6);  				selectionCheckBox = new CheckBox("");  				selectionCheckBox.Click += selectionCheckBox_Click;  				selectionCheckBox.Name = "Row Item Select Checkbox";  				selectionCheckBox.VAnchor = VAnchor.ParentCenter;  				selectionCheckBox.HAnchor = HAnchor.ParentCenter;  				selectionCheckBoxContainer.AddChild(selectionCheckBox);    				middleColumn = new GuiWidget(0.0' 0.0);  				middleColumn.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				middleColumn.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  				middleColumn.Margin = new BorderDouble(10' 3);  				{  					partLabel.TextColor = WidgetTextColor;  					partLabel.MinimumSize = new Vector2(1' 18);  					partLabel.VAnchor = VAnchor.ParentCenter;  					middleColumn.AddChild(partLabel);    					bool mouseDownOnMiddle = false;  					middleColumn.MouseDown += (sender' e) =>  					{  						// Abort normal processing for view helpers  						if (this.IsViewHelperItem)  						{  							return;  						}  						mouseDownOnMiddle = true;  					};    					middleColumn.MouseUp += (sender' e) =>  					{  						if (mouseDownOnMiddle &  						middleColumn.LocalBounds.Contains(e.Position))  						{  							if (this.libraryDataView.EditMode)  							{  								if (this.IsSelectedItem)  								{  									libraryDataView.SelectedItems.Remove(this);  								}  								else  								{  									libraryDataView.SelectedItems.Add(this);  								}  								Invalidate();  							}  							else  							{  								// we only have single selection  								if (this.IsSelectedItem)  								{  									// It is already selected' do nothing.  								}  								else  								{  									libraryDataView.ClearSelectedItems();  									libraryDataView.SelectedItems.Add(this);  									Invalidate();  								}  							}  						}    						mouseDownOnMiddle = false;  					};  				}  				primaryFlow.AddChild(selectionCheckBoxContainer);    				primaryFlow.AddChild(thumbnailWidget);  				primaryFlow.AddChild(middleColumn);    				primaryContainer.AddChild(primaryFlow);    				rightButtonOverlay = GetItemActionButtons();  				rightButtonOverlay.Visible = false;    				mainContainer.AddChild(primaryContainer);  				mainContainer.AddChild(rightButtonOverlay);  			}
Magic Number,MatterHackers.MatterControl.PrintLibrary,LibraryRowItem,C:\repos\MatterHackers_MatterControl\Library\LibraryRowItem.cs,CreateGuiElements,The following statement contains a magic number: {  				partLabel = new TextWidget(this.ItemName.Replace('_'' ' ')' pointSize: 14);    				GuiWidget primaryContainer = new GuiWidget();  				primaryContainer.HAnchor = HAnchor.ParentLeftRight;  				primaryContainer.VAnchor = VAnchor.ParentBottomTop;  				primaryContainer.Name = "Row Item " + partLabel.Text;    				FlowLayoutWidget primaryFlow = new FlowLayoutWidget(FlowDirection.LeftToRight);  				primaryFlow.HAnchor = HAnchor.ParentLeftRight;  				primaryFlow.VAnchor = VAnchor.ParentBottomTop;    				selectionCheckBoxContainer = new GuiWidget();  				selectionCheckBoxContainer.VAnchor = VAnchor.ParentBottomTop;  				selectionCheckBoxContainer.Width = 40;  				selectionCheckBoxContainer.Visible = false;  				selectionCheckBoxContainer.Margin = new BorderDouble(left: 6);  				selectionCheckBox = new CheckBox("");  				selectionCheckBox.Click += selectionCheckBox_Click;  				selectionCheckBox.Name = "Row Item Select Checkbox";  				selectionCheckBox.VAnchor = VAnchor.ParentCenter;  				selectionCheckBox.HAnchor = HAnchor.ParentCenter;  				selectionCheckBoxContainer.AddChild(selectionCheckBox);    				middleColumn = new GuiWidget(0.0' 0.0);  				middleColumn.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				middleColumn.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  				middleColumn.Margin = new BorderDouble(10' 3);  				{  					partLabel.TextColor = WidgetTextColor;  					partLabel.MinimumSize = new Vector2(1' 18);  					partLabel.VAnchor = VAnchor.ParentCenter;  					middleColumn.AddChild(partLabel);    					bool mouseDownOnMiddle = false;  					middleColumn.MouseDown += (sender' e) =>  					{  						// Abort normal processing for view helpers  						if (this.IsViewHelperItem)  						{  							return;  						}  						mouseDownOnMiddle = true;  					};    					middleColumn.MouseUp += (sender' e) =>  					{  						if (mouseDownOnMiddle &  						middleColumn.LocalBounds.Contains(e.Position))  						{  							if (this.libraryDataView.EditMode)  							{  								if (this.IsSelectedItem)  								{  									libraryDataView.SelectedItems.Remove(this);  								}  								else  								{  									libraryDataView.SelectedItems.Add(this);  								}  								Invalidate();  							}  							else  							{  								// we only have single selection  								if (this.IsSelectedItem)  								{  									// It is already selected' do nothing.  								}  								else  								{  									libraryDataView.ClearSelectedItems();  									libraryDataView.SelectedItems.Add(this);  									Invalidate();  								}  							}  						}    						mouseDownOnMiddle = false;  					};  				}  				primaryFlow.AddChild(selectionCheckBoxContainer);    				primaryFlow.AddChild(thumbnailWidget);  				primaryFlow.AddChild(middleColumn);    				primaryContainer.AddChild(primaryFlow);    				rightButtonOverlay = GetItemActionButtons();  				rightButtonOverlay.Visible = false;    				mainContainer.AddChild(primaryContainer);  				mainContainer.AddChild(rightButtonOverlay);  			}
Magic Number,MatterHackers.MatterControl.PrintLibrary,LibraryRowItem,C:\repos\MatterHackers_MatterControl\Library\LibraryRowItem.cs,CreateGuiElements,The following statement contains a magic number: {  				partLabel = new TextWidget(this.ItemName.Replace('_'' ' ')' pointSize: 14);    				GuiWidget primaryContainer = new GuiWidget();  				primaryContainer.HAnchor = HAnchor.ParentLeftRight;  				primaryContainer.VAnchor = VAnchor.ParentBottomTop;  				primaryContainer.Name = "Row Item " + partLabel.Text;    				FlowLayoutWidget primaryFlow = new FlowLayoutWidget(FlowDirection.LeftToRight);  				primaryFlow.HAnchor = HAnchor.ParentLeftRight;  				primaryFlow.VAnchor = VAnchor.ParentBottomTop;    				selectionCheckBoxContainer = new GuiWidget();  				selectionCheckBoxContainer.VAnchor = VAnchor.ParentBottomTop;  				selectionCheckBoxContainer.Width = 40;  				selectionCheckBoxContainer.Visible = false;  				selectionCheckBoxContainer.Margin = new BorderDouble(left: 6);  				selectionCheckBox = new CheckBox("");  				selectionCheckBox.Click += selectionCheckBox_Click;  				selectionCheckBox.Name = "Row Item Select Checkbox";  				selectionCheckBox.VAnchor = VAnchor.ParentCenter;  				selectionCheckBox.HAnchor = HAnchor.ParentCenter;  				selectionCheckBoxContainer.AddChild(selectionCheckBox);    				middleColumn = new GuiWidget(0.0' 0.0);  				middleColumn.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				middleColumn.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  				middleColumn.Margin = new BorderDouble(10' 3);  				{  					partLabel.TextColor = WidgetTextColor;  					partLabel.MinimumSize = new Vector2(1' 18);  					partLabel.VAnchor = VAnchor.ParentCenter;  					middleColumn.AddChild(partLabel);    					bool mouseDownOnMiddle = false;  					middleColumn.MouseDown += (sender' e) =>  					{  						// Abort normal processing for view helpers  						if (this.IsViewHelperItem)  						{  							return;  						}  						mouseDownOnMiddle = true;  					};    					middleColumn.MouseUp += (sender' e) =>  					{  						if (mouseDownOnMiddle &  						middleColumn.LocalBounds.Contains(e.Position))  						{  							if (this.libraryDataView.EditMode)  							{  								if (this.IsSelectedItem)  								{  									libraryDataView.SelectedItems.Remove(this);  								}  								else  								{  									libraryDataView.SelectedItems.Add(this);  								}  								Invalidate();  							}  							else  							{  								// we only have single selection  								if (this.IsSelectedItem)  								{  									// It is already selected' do nothing.  								}  								else  								{  									libraryDataView.ClearSelectedItems();  									libraryDataView.SelectedItems.Add(this);  									Invalidate();  								}  							}  						}    						mouseDownOnMiddle = false;  					};  				}  				primaryFlow.AddChild(selectionCheckBoxContainer);    				primaryFlow.AddChild(thumbnailWidget);  				primaryFlow.AddChild(middleColumn);    				primaryContainer.AddChild(primaryFlow);    				rightButtonOverlay = GetItemActionButtons();  				rightButtonOverlay.Visible = false;    				mainContainer.AddChild(primaryContainer);  				mainContainer.AddChild(rightButtonOverlay);  			}
Magic Number,MatterHackers.MatterControl.PrintLibrary,LibraryRowItem,C:\repos\MatterHackers_MatterControl\Library\LibraryRowItem.cs,CreateGuiElements,The following statement contains a magic number: {  				partLabel = new TextWidget(this.ItemName.Replace('_'' ' ')' pointSize: 14);    				GuiWidget primaryContainer = new GuiWidget();  				primaryContainer.HAnchor = HAnchor.ParentLeftRight;  				primaryContainer.VAnchor = VAnchor.ParentBottomTop;  				primaryContainer.Name = "Row Item " + partLabel.Text;    				FlowLayoutWidget primaryFlow = new FlowLayoutWidget(FlowDirection.LeftToRight);  				primaryFlow.HAnchor = HAnchor.ParentLeftRight;  				primaryFlow.VAnchor = VAnchor.ParentBottomTop;    				selectionCheckBoxContainer = new GuiWidget();  				selectionCheckBoxContainer.VAnchor = VAnchor.ParentBottomTop;  				selectionCheckBoxContainer.Width = 40;  				selectionCheckBoxContainer.Visible = false;  				selectionCheckBoxContainer.Margin = new BorderDouble(left: 6);  				selectionCheckBox = new CheckBox("");  				selectionCheckBox.Click += selectionCheckBox_Click;  				selectionCheckBox.Name = "Row Item Select Checkbox";  				selectionCheckBox.VAnchor = VAnchor.ParentCenter;  				selectionCheckBox.HAnchor = HAnchor.ParentCenter;  				selectionCheckBoxContainer.AddChild(selectionCheckBox);    				middleColumn = new GuiWidget(0.0' 0.0);  				middleColumn.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				middleColumn.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  				middleColumn.Margin = new BorderDouble(10' 3);  				{  					partLabel.TextColor = WidgetTextColor;  					partLabel.MinimumSize = new Vector2(1' 18);  					partLabel.VAnchor = VAnchor.ParentCenter;  					middleColumn.AddChild(partLabel);    					bool mouseDownOnMiddle = false;  					middleColumn.MouseDown += (sender' e) =>  					{  						// Abort normal processing for view helpers  						if (this.IsViewHelperItem)  						{  							return;  						}  						mouseDownOnMiddle = true;  					};    					middleColumn.MouseUp += (sender' e) =>  					{  						if (mouseDownOnMiddle &  						middleColumn.LocalBounds.Contains(e.Position))  						{  							if (this.libraryDataView.EditMode)  							{  								if (this.IsSelectedItem)  								{  									libraryDataView.SelectedItems.Remove(this);  								}  								else  								{  									libraryDataView.SelectedItems.Add(this);  								}  								Invalidate();  							}  							else  							{  								// we only have single selection  								if (this.IsSelectedItem)  								{  									// It is already selected' do nothing.  								}  								else  								{  									libraryDataView.ClearSelectedItems();  									libraryDataView.SelectedItems.Add(this);  									Invalidate();  								}  							}  						}    						mouseDownOnMiddle = false;  					};  				}  				primaryFlow.AddChild(selectionCheckBoxContainer);    				primaryFlow.AddChild(thumbnailWidget);  				primaryFlow.AddChild(middleColumn);    				primaryContainer.AddChild(primaryFlow);    				rightButtonOverlay = GetItemActionButtons();  				rightButtonOverlay.Visible = false;    				mainContainer.AddChild(primaryContainer);  				mainContainer.AddChild(rightButtonOverlay);  			}
Magic Number,MatterHackers.MatterControl.PrintLibrary,LibraryRowItem,C:\repos\MatterHackers_MatterControl\Library\LibraryRowItem.cs,SetDisplayAttributes,The following statement contains a magic number: this.Height = 50 * GuiWidget.DeviceScale;
Magic Number,MatterHackers.MatterControl.PrintLibrary,LibraryRowItem,C:\repos\MatterHackers_MatterControl\Library\LibraryRowItem.cs,SetDisplayAttributes,The following statement contains a magic number: this.Margin = new BorderDouble(6' 0' 6' 6);
Magic Number,MatterHackers.MatterControl.PrintLibrary,LibraryRowItem,C:\repos\MatterHackers_MatterControl\Library\LibraryRowItem.cs,SetDisplayAttributes,The following statement contains a magic number: this.Margin = new BorderDouble(6' 0' 6' 6);
Magic Number,MatterHackers.MatterControl.PrintLibrary,LibraryRowItem,C:\repos\MatterHackers_MatterControl\Library\LibraryRowItem.cs,SetDisplayAttributes,The following statement contains a magic number: this.Margin = new BorderDouble(6' 0' 6' 6);
Magic Number,MatterHackers.MatterControl.PrintLibrary,PrintLibraryWidget,C:\repos\MatterHackers_MatterControl\Library\PrintLibraryWidget.cs,LoadContent,The following statement contains a magic number: this.Padding = new BorderDouble(3);
Magic Number,MatterHackers.MatterControl.PrintLibrary,PrintLibraryWidget,C:\repos\MatterHackers_MatterControl\Library\PrintLibraryWidget.cs,LoadContent,The following statement contains a magic number: editButtonFactory.Margin = new BorderDouble(10' 0);
Magic Number,MatterHackers.MatterControl.PrintLibrary,PrintLibraryWidget,C:\repos\MatterHackers_MatterControl\Library\PrintLibraryWidget.cs,LoadContent,The following statement contains a magic number: {  				enterEditModeButton = editButtonFactory.Generate("Edit".Localize()' centerText: true);  				enterEditModeButton.Click += enterEditModeButtonClick;    				leaveEditModeButton = editButtonFactory.Generate("Done".Localize()' centerText: true);  				leaveEditModeButton.Click += leaveEditModeButtonClick;    				// make sure the buttons are the same size even when localized  				if (leaveEditModeButton.Width < enterEditModeButton.Width)  				{  					editButtonFactory.FixedWidth = enterEditModeButton.Width;  					leaveEditModeButton = editButtonFactory.Generate("Done".Localize()' centerText: true);  					leaveEditModeButton.Click += leaveEditModeButtonClick;  				}  				else  				{  					editButtonFactory.FixedWidth = leaveEditModeButton.Width;  					enterEditModeButton = editButtonFactory.Generate("Edit".Localize()' centerText: true);  					enterEditModeButton.Click += enterEditModeButtonClick;  				}    				enterEditModeButton.Name = "Library Edit Button";    				leaveEditModeButton.Visible = false;    				FlowLayoutWidget navigationPanel = new FlowLayoutWidget();  				navigationPanel.HAnchor = HAnchor.ParentLeftRight;  				navigationPanel.Padding = new BorderDouble(0);  				navigationPanel.BackgroundColor = ActiveTheme.Instance.TransparentLightOverlay;    				navigationLabel = new TextWidget("My Library".Localize()' pointSize: 14);  				navigationLabel.VAnchor = Agg.UI.VAnchor.ParentCenter;  				navigationLabel.TextColor = ActiveTheme.Instance.PrimaryTextColor;    				navigationPanel.AddChild(new GuiWidget(50' 0)); //Add this as temporary balance to edit buttons  				navigationPanel.AddChild(new HorizontalSpacer());  				navigationPanel.AddChild(navigationLabel);  				navigationPanel.AddChild(new HorizontalSpacer());    				buttonPanel = new FlowLayoutWidget();  				buttonPanel.HAnchor = HAnchor.ParentLeftRight;  				buttonPanel.Padding = new BorderDouble(0' 3);  				buttonPanel.MinimumSize = new Vector2(0' 46);    				AddLibraryButtonElements();    				//allControls.AddChild(navigationPanel);  				allControls.AddChild(CreateSearchPannel());    				libraryDataView = new LibraryDataView();  				breadCrumbWidget = new FolderBreadCrumbWidget(libraryDataView.SetCurrentLibraryProvider' libraryDataView.CurrentLibraryProvider);  				FlowLayoutWidget breadCrumbSpaceHolder = new FlowLayoutWidget()  				{  					HAnchor = HAnchor.ParentLeftRight'  				};  				breadCrumbSpaceHolder.AddChild(breadCrumbWidget);  				libraryDataView.ChangedCurrentLibraryProvider += breadCrumbWidget.SetBreadCrumbs;    				libraryDataView.ChangedCurrentLibraryProvider += LibraryProviderChanged;  				breadCrumbAndActionBar = new FlowLayoutWidget()  				{  					HAnchor = HAnchor.ParentLeftRight'  				};    				breadCrumbAndActionBar.AddChild(breadCrumbSpaceHolder);  				breadCrumbAndActionBar.AddChild(CreateActionsMenu());    				allControls.AddChild(breadCrumbAndActionBar);    				allControls.AddChild(libraryDataView);  				allControls.AddChild(buttonPanel);  			}
Magic Number,MatterHackers.MatterControl.PrintLibrary,PrintLibraryWidget,C:\repos\MatterHackers_MatterControl\Library\PrintLibraryWidget.cs,LoadContent,The following statement contains a magic number: {  				enterEditModeButton = editButtonFactory.Generate("Edit".Localize()' centerText: true);  				enterEditModeButton.Click += enterEditModeButtonClick;    				leaveEditModeButton = editButtonFactory.Generate("Done".Localize()' centerText: true);  				leaveEditModeButton.Click += leaveEditModeButtonClick;    				// make sure the buttons are the same size even when localized  				if (leaveEditModeButton.Width < enterEditModeButton.Width)  				{  					editButtonFactory.FixedWidth = enterEditModeButton.Width;  					leaveEditModeButton = editButtonFactory.Generate("Done".Localize()' centerText: true);  					leaveEditModeButton.Click += leaveEditModeButtonClick;  				}  				else  				{  					editButtonFactory.FixedWidth = leaveEditModeButton.Width;  					enterEditModeButton = editButtonFactory.Generate("Edit".Localize()' centerText: true);  					enterEditModeButton.Click += enterEditModeButtonClick;  				}    				enterEditModeButton.Name = "Library Edit Button";    				leaveEditModeButton.Visible = false;    				FlowLayoutWidget navigationPanel = new FlowLayoutWidget();  				navigationPanel.HAnchor = HAnchor.ParentLeftRight;  				navigationPanel.Padding = new BorderDouble(0);  				navigationPanel.BackgroundColor = ActiveTheme.Instance.TransparentLightOverlay;    				navigationLabel = new TextWidget("My Library".Localize()' pointSize: 14);  				navigationLabel.VAnchor = Agg.UI.VAnchor.ParentCenter;  				navigationLabel.TextColor = ActiveTheme.Instance.PrimaryTextColor;    				navigationPanel.AddChild(new GuiWidget(50' 0)); //Add this as temporary balance to edit buttons  				navigationPanel.AddChild(new HorizontalSpacer());  				navigationPanel.AddChild(navigationLabel);  				navigationPanel.AddChild(new HorizontalSpacer());    				buttonPanel = new FlowLayoutWidget();  				buttonPanel.HAnchor = HAnchor.ParentLeftRight;  				buttonPanel.Padding = new BorderDouble(0' 3);  				buttonPanel.MinimumSize = new Vector2(0' 46);    				AddLibraryButtonElements();    				//allControls.AddChild(navigationPanel);  				allControls.AddChild(CreateSearchPannel());    				libraryDataView = new LibraryDataView();  				breadCrumbWidget = new FolderBreadCrumbWidget(libraryDataView.SetCurrentLibraryProvider' libraryDataView.CurrentLibraryProvider);  				FlowLayoutWidget breadCrumbSpaceHolder = new FlowLayoutWidget()  				{  					HAnchor = HAnchor.ParentLeftRight'  				};  				breadCrumbSpaceHolder.AddChild(breadCrumbWidget);  				libraryDataView.ChangedCurrentLibraryProvider += breadCrumbWidget.SetBreadCrumbs;    				libraryDataView.ChangedCurrentLibraryProvider += LibraryProviderChanged;  				breadCrumbAndActionBar = new FlowLayoutWidget()  				{  					HAnchor = HAnchor.ParentLeftRight'  				};    				breadCrumbAndActionBar.AddChild(breadCrumbSpaceHolder);  				breadCrumbAndActionBar.AddChild(CreateActionsMenu());    				allControls.AddChild(breadCrumbAndActionBar);    				allControls.AddChild(libraryDataView);  				allControls.AddChild(buttonPanel);  			}
Magic Number,MatterHackers.MatterControl.PrintLibrary,PrintLibraryWidget,C:\repos\MatterHackers_MatterControl\Library\PrintLibraryWidget.cs,LoadContent,The following statement contains a magic number: {  				enterEditModeButton = editButtonFactory.Generate("Edit".Localize()' centerText: true);  				enterEditModeButton.Click += enterEditModeButtonClick;    				leaveEditModeButton = editButtonFactory.Generate("Done".Localize()' centerText: true);  				leaveEditModeButton.Click += leaveEditModeButtonClick;    				// make sure the buttons are the same size even when localized  				if (leaveEditModeButton.Width < enterEditModeButton.Width)  				{  					editButtonFactory.FixedWidth = enterEditModeButton.Width;  					leaveEditModeButton = editButtonFactory.Generate("Done".Localize()' centerText: true);  					leaveEditModeButton.Click += leaveEditModeButtonClick;  				}  				else  				{  					editButtonFactory.FixedWidth = leaveEditModeButton.Width;  					enterEditModeButton = editButtonFactory.Generate("Edit".Localize()' centerText: true);  					enterEditModeButton.Click += enterEditModeButtonClick;  				}    				enterEditModeButton.Name = "Library Edit Button";    				leaveEditModeButton.Visible = false;    				FlowLayoutWidget navigationPanel = new FlowLayoutWidget();  				navigationPanel.HAnchor = HAnchor.ParentLeftRight;  				navigationPanel.Padding = new BorderDouble(0);  				navigationPanel.BackgroundColor = ActiveTheme.Instance.TransparentLightOverlay;    				navigationLabel = new TextWidget("My Library".Localize()' pointSize: 14);  				navigationLabel.VAnchor = Agg.UI.VAnchor.ParentCenter;  				navigationLabel.TextColor = ActiveTheme.Instance.PrimaryTextColor;    				navigationPanel.AddChild(new GuiWidget(50' 0)); //Add this as temporary balance to edit buttons  				navigationPanel.AddChild(new HorizontalSpacer());  				navigationPanel.AddChild(navigationLabel);  				navigationPanel.AddChild(new HorizontalSpacer());    				buttonPanel = new FlowLayoutWidget();  				buttonPanel.HAnchor = HAnchor.ParentLeftRight;  				buttonPanel.Padding = new BorderDouble(0' 3);  				buttonPanel.MinimumSize = new Vector2(0' 46);    				AddLibraryButtonElements();    				//allControls.AddChild(navigationPanel);  				allControls.AddChild(CreateSearchPannel());    				libraryDataView = new LibraryDataView();  				breadCrumbWidget = new FolderBreadCrumbWidget(libraryDataView.SetCurrentLibraryProvider' libraryDataView.CurrentLibraryProvider);  				FlowLayoutWidget breadCrumbSpaceHolder = new FlowLayoutWidget()  				{  					HAnchor = HAnchor.ParentLeftRight'  				};  				breadCrumbSpaceHolder.AddChild(breadCrumbWidget);  				libraryDataView.ChangedCurrentLibraryProvider += breadCrumbWidget.SetBreadCrumbs;    				libraryDataView.ChangedCurrentLibraryProvider += LibraryProviderChanged;  				breadCrumbAndActionBar = new FlowLayoutWidget()  				{  					HAnchor = HAnchor.ParentLeftRight'  				};    				breadCrumbAndActionBar.AddChild(breadCrumbSpaceHolder);  				breadCrumbAndActionBar.AddChild(CreateActionsMenu());    				allControls.AddChild(breadCrumbAndActionBar);    				allControls.AddChild(libraryDataView);  				allControls.AddChild(buttonPanel);  			}
Magic Number,MatterHackers.MatterControl.PrintLibrary,PrintLibraryWidget,C:\repos\MatterHackers_MatterControl\Library\PrintLibraryWidget.cs,LoadContent,The following statement contains a magic number: {  				enterEditModeButton = editButtonFactory.Generate("Edit".Localize()' centerText: true);  				enterEditModeButton.Click += enterEditModeButtonClick;    				leaveEditModeButton = editButtonFactory.Generate("Done".Localize()' centerText: true);  				leaveEditModeButton.Click += leaveEditModeButtonClick;    				// make sure the buttons are the same size even when localized  				if (leaveEditModeButton.Width < enterEditModeButton.Width)  				{  					editButtonFactory.FixedWidth = enterEditModeButton.Width;  					leaveEditModeButton = editButtonFactory.Generate("Done".Localize()' centerText: true);  					leaveEditModeButton.Click += leaveEditModeButtonClick;  				}  				else  				{  					editButtonFactory.FixedWidth = leaveEditModeButton.Width;  					enterEditModeButton = editButtonFactory.Generate("Edit".Localize()' centerText: true);  					enterEditModeButton.Click += enterEditModeButtonClick;  				}    				enterEditModeButton.Name = "Library Edit Button";    				leaveEditModeButton.Visible = false;    				FlowLayoutWidget navigationPanel = new FlowLayoutWidget();  				navigationPanel.HAnchor = HAnchor.ParentLeftRight;  				navigationPanel.Padding = new BorderDouble(0);  				navigationPanel.BackgroundColor = ActiveTheme.Instance.TransparentLightOverlay;    				navigationLabel = new TextWidget("My Library".Localize()' pointSize: 14);  				navigationLabel.VAnchor = Agg.UI.VAnchor.ParentCenter;  				navigationLabel.TextColor = ActiveTheme.Instance.PrimaryTextColor;    				navigationPanel.AddChild(new GuiWidget(50' 0)); //Add this as temporary balance to edit buttons  				navigationPanel.AddChild(new HorizontalSpacer());  				navigationPanel.AddChild(navigationLabel);  				navigationPanel.AddChild(new HorizontalSpacer());    				buttonPanel = new FlowLayoutWidget();  				buttonPanel.HAnchor = HAnchor.ParentLeftRight;  				buttonPanel.Padding = new BorderDouble(0' 3);  				buttonPanel.MinimumSize = new Vector2(0' 46);    				AddLibraryButtonElements();    				//allControls.AddChild(navigationPanel);  				allControls.AddChild(CreateSearchPannel());    				libraryDataView = new LibraryDataView();  				breadCrumbWidget = new FolderBreadCrumbWidget(libraryDataView.SetCurrentLibraryProvider' libraryDataView.CurrentLibraryProvider);  				FlowLayoutWidget breadCrumbSpaceHolder = new FlowLayoutWidget()  				{  					HAnchor = HAnchor.ParentLeftRight'  				};  				breadCrumbSpaceHolder.AddChild(breadCrumbWidget);  				libraryDataView.ChangedCurrentLibraryProvider += breadCrumbWidget.SetBreadCrumbs;    				libraryDataView.ChangedCurrentLibraryProvider += LibraryProviderChanged;  				breadCrumbAndActionBar = new FlowLayoutWidget()  				{  					HAnchor = HAnchor.ParentLeftRight'  				};    				breadCrumbAndActionBar.AddChild(breadCrumbSpaceHolder);  				breadCrumbAndActionBar.AddChild(CreateActionsMenu());    				allControls.AddChild(breadCrumbAndActionBar);    				allControls.AddChild(libraryDataView);  				allControls.AddChild(buttonPanel);  			}
Magic Number,MatterHackers.MatterControl.PrintLibrary,PrintLibraryWidget,C:\repos\MatterHackers_MatterControl\Library\PrintLibraryWidget.cs,CreateSearchPannel,The following statement contains a magic number: {  				searchInput = new MHTextEditWidget(messageWhenEmptyAndNotSelected: "Search Library".Localize());  				searchInput.Name = "Search Library Edit";  				searchInput.Margin = new BorderDouble(0' 3' 0' 0);  				searchInput.HAnchor = HAnchor.ParentLeftRight;  				searchInput.VAnchor = VAnchor.ParentCenter;  				searchInput.ActualTextEditWidget.EnterPressed += new KeyEventHandler(searchInputEnterPressed);    				double oldWidth = editButtonFactory.FixedWidth;  				editButtonFactory.FixedWidth = 0;  				Button searchButton = editButtonFactory.Generate("Search".Localize()' centerText: true);  				searchButton.Name = "Search Library Button";  				searchButton.Click += searchButtonClick;  				editButtonFactory.FixedWidth = oldWidth;    				searchPanel.AddChild(enterEditModeButton);  				searchPanel.AddChild(leaveEditModeButton);  				searchPanel.AddChild(searchInput);  				searchPanel.AddChild(searchButton);  			}
Magic Number,MatterHackers.MatterControl.PrintLibrary,PrintLibraryWidget,C:\repos\MatterHackers_MatterControl\Library\PrintLibraryWidget.cs,CreateActionsMenu,The following statement contains a magic number: actionMenu.BorderColor = new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 100);
Magic Number,MatterHackers.MatterControl.PrintLibrary,PrintLibraryWidget,C:\repos\MatterHackers_MatterControl\Library\PrintLibraryWidget.cs,CreateActionsMenu,The following statement contains a magic number: actionMenu.Margin = new BorderDouble(3);
Magic Number,MatterHackers.MatterControl.PrintLibrary,PrintLibraryWidget,C:\repos\MatterHackers_MatterControl\Library\PrintLibraryWidget.cs,CreateActionsMenu,The following statement contains a magic number: actionMenu.Padding = new BorderDouble(10);
Magic Number,MatterHackers.MatterControl.PrintLibrary,PrintLibraryWidget,C:\repos\MatterHackers_MatterControl\Library\PrintLibraryWidget.cs,AddLibraryButtonElements,The following statement contains a magic number: {  				addToLibraryButton = textImageButtonFactory.Generate("Add".Localize()' "icon_circle_plus.png");  				addToLibraryButton.Enabled = false; // The library selector (the first library selected) is protected so we can't add to it.   				addToLibraryButton.ToolTipText = "Add an .stl' .amf' .gcode or .zip file to the Library".Localize();  				addToLibraryButton.Name = "Library Add Button";  				buttonPanel.AddChild(addToLibraryButton);  				addToLibraryButton.Margin = new BorderDouble(0' 0' 3' 0);  				addToLibraryButton.Click += (sender' e) => UiThread.RunOnIdle(importToLibraryloadFile_ClickOnIdle);  			}
Magic Number,MatterHackers.MatterControl.PrintLibrary,PrintLibraryWidget,C:\repos\MatterHackers_MatterControl\Library\PrintLibraryWidget.cs,AddLibraryButtonElements,The following statement contains a magic number: {  				createFolderButton = textImageButtonFactory.Generate("Create Folder".Localize());  				createFolderButton.Enabled = false; // The library selector (the first library selected) is protected so we can't add to it.  				createFolderButton.Name = "Create Folder From Library Button";  				buttonPanel.AddChild(createFolderButton);  				createFolderButton.Margin = new BorderDouble(0' 0' 3' 0);  				createFolderButton.Click += (sender' e) =>  				{  					if (createFolderWindow == null)  					{  						createFolderWindow = new CreateFolderWindow((returnInfo) =>  						{  							this.libraryDataView.CurrentLibraryProvider.AddCollectionToLibrary(returnInfo.newName);  						});  						createFolderWindow.Closed += (sender2' e2) => { createFolderWindow = null; };  					}  					else  					{  						createFolderWindow.BringToFront();  					}  				};  			}
Magic Number,MatterHackers.MatterControl.PrintLibrary,PrintLibraryWidget,C:\repos\MatterHackers_MatterControl\Library\PrintLibraryWidget.cs,AddLibraryButtonElements,The following statement contains a magic number: {  				providerMessageWidget = new TextWidget("")  				{  					PointSize = 8'  					HAnchor = HAnchor.ParentRight'  					VAnchor = VAnchor.ParentBottom'  					TextColor = ActiveTheme.Instance.SecondaryTextColor'  					Margin = new BorderDouble(6)'  					AutoExpandBoundsToText = true'  				};    				providerMessageContainer = new GuiWidget()  				{  					VAnchor = VAnchor.FitToChildren | VAnchor.ParentTop'  					HAnchor = HAnchor.ParentLeftRight'  					Visible = false'  				};    				providerMessageContainer.AddChild(providerMessageWidget);  				buttonPanel.AddChild(providerMessageContainer' -1);  			}
Magic Number,MatterHackers.MatterControl.PrintLibrary,PrintLibraryWidget,C:\repos\MatterHackers_MatterControl\Library\PrintLibraryWidget.cs,AddLibraryButtonElements,The following statement contains a magic number: {  				providerMessageWidget = new TextWidget("")  				{  					PointSize = 8'  					HAnchor = HAnchor.ParentRight'  					VAnchor = VAnchor.ParentBottom'  					TextColor = ActiveTheme.Instance.SecondaryTextColor'  					Margin = new BorderDouble(6)'  					AutoExpandBoundsToText = true'  				};    				providerMessageContainer = new GuiWidget()  				{  					VAnchor = VAnchor.FitToChildren | VAnchor.ParentTop'  					HAnchor = HAnchor.ParentLeftRight'  					Visible = false'  				};    				providerMessageContainer.AddChild(providerMessageWidget);  				buttonPanel.AddChild(providerMessageContainer' -1);  			}
Magic Number,MatterHackers.MatterControl.SetupWizard,PrinterProfileHistoryPage,C:\repos\MatterHackers_MatterControl\SetupWizard\PrinterProfileHistoryPage.cs,LoadHistoryItems,The following statement contains a magic number: if(printerProfileData != null)  			{  				loadingText.Visible= false;    				List<DateTime> sourceTimes = new List<DateTime>();  				foreach (var printerProfile in results.OrderByDescending(d => d.Key))  				{  					// AppEngine results are current in the form of: "2016-07-21 00:43:30.965830"  					sourceTimes.Add(Convert.ToDateTime(printerProfile.Key).ToLocalTime());  				}    				var groupedTimes = RelativeTime.GroupTimes(DateTime.Now' sourceTimes);    				FlowLayoutWidget topToBottomStuff = new FlowLayoutWidget(FlowDirection.TopToBottom);  				scrollWindow.AddChild(topToBottomStuff);  				foreach (var group in groupedTimes)  				{  					// add in the group header  					topToBottomStuff.AddChild(new TextWidget(RelativeTime.BlockDescriptions[group.Key]' textColor: ActiveTheme.Instance.PrimaryTextColor)  					{  						Margin = new BorderDouble(0' 0' 0' 5)'  					});    					foreach (var time in group.Value)  					{  						// add in the radio buttons  						var profileVersionButton = new RadioButton(time.Value' textColor: ActiveTheme.Instance.PrimaryTextColor)  						{  							Margin = new BorderDouble(5' 0)'  						};  						profileVersionButton.Checked = false;  						radioButtonList.Add(profileVersionButton);  						topToBottomStuff.AddChild(profileVersionButton);  					}  				}    				foreach(var printerProfile in results)  				{  					orderedProfiles.Add(printerProfile.Key.ToString());  				}  			}  			else  			{  				loadingText.Text = "Failed To Download History!";  				loadingText.TextColor = RGBA_Bytes.Red;  			}
Magic Number,MatterHackers.MatterControl.SetupWizard,PrinterProfileHistoryPage,C:\repos\MatterHackers_MatterControl\SetupWizard\PrinterProfileHistoryPage.cs,LoadHistoryItems,The following statement contains a magic number: if(printerProfileData != null)  			{  				loadingText.Visible= false;    				List<DateTime> sourceTimes = new List<DateTime>();  				foreach (var printerProfile in results.OrderByDescending(d => d.Key))  				{  					// AppEngine results are current in the form of: "2016-07-21 00:43:30.965830"  					sourceTimes.Add(Convert.ToDateTime(printerProfile.Key).ToLocalTime());  				}    				var groupedTimes = RelativeTime.GroupTimes(DateTime.Now' sourceTimes);    				FlowLayoutWidget topToBottomStuff = new FlowLayoutWidget(FlowDirection.TopToBottom);  				scrollWindow.AddChild(topToBottomStuff);  				foreach (var group in groupedTimes)  				{  					// add in the group header  					topToBottomStuff.AddChild(new TextWidget(RelativeTime.BlockDescriptions[group.Key]' textColor: ActiveTheme.Instance.PrimaryTextColor)  					{  						Margin = new BorderDouble(0' 0' 0' 5)'  					});    					foreach (var time in group.Value)  					{  						// add in the radio buttons  						var profileVersionButton = new RadioButton(time.Value' textColor: ActiveTheme.Instance.PrimaryTextColor)  						{  							Margin = new BorderDouble(5' 0)'  						};  						profileVersionButton.Checked = false;  						radioButtonList.Add(profileVersionButton);  						topToBottomStuff.AddChild(profileVersionButton);  					}  				}    				foreach(var printerProfile in results)  				{  					orderedProfiles.Add(printerProfile.Key.ToString());  				}  			}  			else  			{  				loadingText.Text = "Failed To Download History!";  				loadingText.TextColor = RGBA_Bytes.Red;  			}
Magic Number,MatterHackers.MatterControl.SetupWizard,SyncingPrintersPage,C:\repos\MatterHackers_MatterControl\SetupWizard\SyncingPrintersPage.cs,SyncingPrintersPage,The following statement contains a magic number: syncingDetails = new TextWidget("Retrieving sync information...".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor' pointSize:10);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,GCodeMacro,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\GCodeMacro.cs,FixMacroName,The following statement contains a magic number: int lengthLimit = 24;
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,ProfileMigrations,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\ProfileMigrations.cs,MigrateDocument,The following statement contains a magic number: if (fromVersion < 201606271)  			{  				JObject oemProfile = jObject["OemProfile"] as JObject;  				if (oemProfile != null)  				{  					jObject.Property("OemProfile").Remove();  					jObject["OemLayer"] = oemProfile["OemLayer"];    				}  				jObject["DocumentVersion"] = 201606271;  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,ProfileMigrations,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\ProfileMigrations.cs,MigrateDocument,The following statement contains a magic number: if (fromVersion < 201606271)  			{  				JObject oemProfile = jObject["OemProfile"] as JObject;  				if (oemProfile != null)  				{  					jObject.Property("OemProfile").Remove();  					jObject["OemLayer"] = oemProfile["OemLayer"];    				}  				jObject["DocumentVersion"] = 201606271;  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,PrinterSettingsLayer,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\PrinterSettingsLayer.cs,LoadFromIni,The following statement contains a magic number: var settings = from line in File.ReadAllLines(filePath)  						   let segments = line.Split('=')  						   where !line.StartsWith("#") && !string.IsNullOrEmpty(line) && segments.Length == 2  						   select new  						   {  							   Key = segments[0].Trim()'  							   Value = segments[1].Trim()  						   };
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SettingsHelpers,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\SettingsHelpers.cs,GetPrintLevelingData,The following statement contains a magic number: if (printLevelingData == null)  			{  				printLevelingData = PrintLevelingData.Create(  					ActiveSliceSettings.Instance'  					printerSettings.GetValue(SettingsKey.print_leveling_data));    				if (printLevelingData.SampledPositions.Count == 3)  				{  					PrintLevelingPlane.Instance.SetPrintLevelingEquation(  						printLevelingData.SampledPositions[0]'  						printLevelingData.SampledPositions[1]'  						printLevelingData.SampledPositions[2]'  						ActiveSliceSettings.Instance.GetValue<Vector2>(SettingsKey.print_center));  				}  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SettingsHelpers,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\SettingsHelpers.cs,GetPrintLevelingData,The following statement contains a magic number: if (printLevelingData == null)  			{  				printLevelingData = PrintLevelingData.Create(  					ActiveSliceSettings.Instance'  					printerSettings.GetValue(SettingsKey.print_leveling_data));    				if (printLevelingData.SampledPositions.Count == 3)  				{  					PrintLevelingPlane.Instance.SetPrintLevelingEquation(  						printLevelingData.SampledPositions[0]'  						printLevelingData.SampledPositions[1]'  						printLevelingData.SampledPositions[2]'  						ActiveSliceSettings.Instance.GetValue<Vector2>(SettingsKey.print_center));  				}  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SettingsHelpers,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\SettingsHelpers.cs,UpdateLevelSettings,The following statement contains a magic number: if (levelingData.SampledPositions.Count > 2)  			{  				PrintLevelingPlane.Instance.SetPrintLevelingEquation(  					levelingData.SampledPositions[0]'  					levelingData.SampledPositions[1]'  					levelingData.SampledPositions[2]'  					ActiveSliceSettings.Instance.GetValue<Vector2>(SettingsKey.print_center));  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SettingsHelpers,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\SettingsHelpers.cs,UpdateLevelSettings,The following statement contains a magic number: if (levelingData.SampledPositions.Count > 2)  			{  				PrintLevelingPlane.Instance.SetPrintLevelingEquation(  					levelingData.SampledPositions[0]'  					levelingData.SampledPositions[1]'  					levelingData.SampledPositions[2]'  					ActiveSliceSettings.Instance.GetValue<Vector2>(SettingsKey.print_center));  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SettingsHelpers,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\SettingsHelpers.cs,ManualMovementSpeeds,The following statement contains a magic number: Vector3 feedRate = new Vector3(3000' 3000' 315);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SettingsHelpers,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\SettingsHelpers.cs,ManualMovementSpeeds,The following statement contains a magic number: Vector3 feedRate = new Vector3(3000' 3000' 315);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SettingsHelpers,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\SettingsHelpers.cs,ManualMovementSpeeds,The following statement contains a magic number: Vector3 feedRate = new Vector3(3000' 3000' 315);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SettingsHelpers,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\SettingsHelpers.cs,ManualMovementSpeeds,The following statement contains a magic number: if (!string.IsNullOrEmpty(savedSettings))  			{  				var segments = savedSettings.Split(''');  				feedRate.x = double.Parse(segments[1]);  				feedRate.y = double.Parse(segments[3]);  				feedRate.z = double.Parse(segments[5]);  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SettingsHelpers,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\SettingsHelpers.cs,ManualMovementSpeeds,The following statement contains a magic number: if (!string.IsNullOrEmpty(savedSettings))  			{  				var segments = savedSettings.Split(''');  				feedRate.x = double.Parse(segments[1]);  				feedRate.y = double.Parse(segments[3]);  				feedRate.z = double.Parse(segments[5]);  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SettingsHelpers,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\SettingsHelpers.cs,GetMovementSpeeds,The following statement contains a magic number: for (int i = 0; i < allSpeeds.Length / 2; i++)  			{  				speeds.Add(allSpeeds[i * 2 + 0]' double.Parse(allSpeeds[i * 2 + 1]));  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SettingsHelpers,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\SettingsHelpers.cs,GetMovementSpeeds,The following statement contains a magic number: for (int i = 0; i < allSpeeds.Length / 2; i++)  			{  				speeds.Add(allSpeeds[i * 2 + 0]' double.Parse(allSpeeds[i * 2 + 1]));  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SettingsHelpers,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\SettingsHelpers.cs,GetMovementSpeeds,The following statement contains a magic number: for (int i = 0; i < allSpeeds.Length / 2; i++)  			{  				speeds.Add(allSpeeds[i * 2 + 0]' double.Parse(allSpeeds[i * 2 + 1]));  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsDetailControl,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsDetailControl.cs,SliceSettingsDetailControl,The following statement contains a magic number: settingsDetailSelector = new DropDownList("Basic"' maxHeight: 200);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsDetailControl,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsDetailControl.cs,SliceSettingsDetailControl,The following statement contains a magic number: settingsDetailSelector.Margin = new BorderDouble(5' 3);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsDetailControl,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsDetailControl.cs,SliceSettingsDetailControl,The following statement contains a magic number: settingsDetailSelector.Margin = new BorderDouble(5' 3);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsDetailControl,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsDetailControl.cs,SliceSettingsDetailControl,The following statement contains a magic number: settingsDetailSelector.BorderColor = new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 100);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsDetailControl,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsDetailControl.cs,GetSliceOptionsMenuDropList,The following statement contains a magic number: sliceOptionsMenuDropList = new DropDownMenu("Options".Localize() + "... ")  			{  				HoverColor = new RGBA_Bytes(0' 0' 0' 50)'  				NormalColor = new RGBA_Bytes(0' 0' 0' 0)'  				BorderColor = new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 100)'  				BackgroundColor = new RGBA_Bytes(0' 0' 0' 0)'  				BorderWidth = 1'  				MenuAsWideAsItems = false'  				AlignToRightEdge = true'  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsDetailControl,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsDetailControl.cs,GetSliceOptionsMenuDropList,The following statement contains a magic number: sliceOptionsMenuDropList = new DropDownMenu("Options".Localize() + "... ")  			{  				HoverColor = new RGBA_Bytes(0' 0' 0' 50)'  				NormalColor = new RGBA_Bytes(0' 0' 0' 0)'  				BorderColor = new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 100)'  				BackgroundColor = new RGBA_Bytes(0' 0' 0' 0)'  				BorderWidth = 1'  				MenuAsWideAsItems = false'  				AlignToRightEdge = true'  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,PrinterSettings,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\PrinterSettings.cs,GenerateSha1,The following statement contains a magic number: using (var fileStream = new FileStream(DocumentPath' FileMode.Open))  			using (var bufferedStream = new BufferedStream(fileStream' 1200000))  			{  				return GenerateSha1(bufferedStream);  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,PrinterSettings,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\PrinterSettings.cs,GetFirstValidHistoryItem,The following statement contains a magic number: if (recentProfileHistoryItems != null)  			{  				// Iterate history' skipping the first item' limiting to the next five' attempt to load and return the first success  				foreach (var keyValue in recentProfileHistoryItems.OrderByDescending(kvp => kvp.Key).Skip(1).Take(5))  				{  					// Attempt to download and parse each profile' returning if successful  					try  					{  						var printerSettings = await ApplicationController.GetPrinterProfileAsync(printerInfo' keyValue.Value);  						if (printerSettings != null)  						{  							return printerSettings;  						}  					}  					catch { }  				};  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,PrinterSettings,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\PrinterSettings.cs,GetValue,The following statement contains a magic number: if (typeof(T) == typeof(bool))  			{  				return (T)(object)(this.GetValue(settingsKey) == "1");  			}  			else if (typeof(T) == typeof(int))  			{  				int result;  				int.TryParse(this.GetValue(settingsKey)' out result);  				return (T)(object)(result);  			}  			else if (typeof(T) == typeof(Vector2))  			{  				string[] twoValues = GetValue(settingsKey).Split(''');  				if (twoValues.Length != 2)  				{  					throw new Exception(string.Format("Not parsing {0} as a Vector2"' settingsKey));  				}  				Vector2 valueAsVector2 = new Vector2();  				valueAsVector2.x = Helpers.ParseDouble(twoValues[0]);  				valueAsVector2.y = Helpers.ParseDouble(twoValues[1]);  				return (T)(object)(valueAsVector2);  			}  			else if (typeof(T) == typeof(double))  			{  				string settingsStringh = GetValue(settingsKey);  				if (settingsStringh.Contains("%"))  				{  					string onlyNumber = settingsStringh.Replace("%"' "");  					double ratio = Helpers.ParseDouble(onlyNumber) / 100;    					if (settingsKey == SettingsKey.first_layer_height)  					{  						return (T)(object)(GetValue<double>(SettingsKey.layer_height) * ratio);  					}  					else if (settingsKey == SettingsKey.first_layer_extrusion_width   						|| settingsKey == SettingsKey.external_perimeter_extrusion_width)  					{  						return (T)(object)(GetValue<double>(SettingsKey.nozzle_diameter) * ratio);  					}    					return (T)(object)(ratio);  				}  				else if (settingsKey == SettingsKey.first_layer_extrusion_width  					|| settingsKey == SettingsKey.external_perimeter_extrusion_width)  				{  					double extrusionResult;  					double.TryParse(this.GetValue(settingsKey)' out extrusionResult);  					return (T)(object)(extrusionResult == 0 ? GetValue<double>(SettingsKey.nozzle_diameter) : extrusionResult);  				}    				if (settingsKey == SettingsKey.bed_temperature  					&& !this.GetValue<bool>(SettingsKey.has_heated_bed))  				{  					return (T)Convert.ChangeType(0' typeof(double));  				}    				double result;  				double.TryParse(this.GetValue(settingsKey)' out result);  				return (T)(object)(result);  			}  			else if (typeof(T) == typeof(BedShape))  			{  				switch (GetValue(settingsKey))  				{  					case "rectangular":  						return (T)(object)BedShape.Rectangular;    					case "circular":  						return (T)(object)BedShape.Circular;    					default:  #if DEBUG  						throw new NotImplementedException(string.Format("'{0}' is not a known bed_shape."' GetValue(SettingsKey.bed_shape)));  #else  						return (T)(object)BedShape.Rectangular;  #endif  				}  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,PrinterSettings,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\PrinterSettings.cs,GetValue,The following statement contains a magic number: if (typeof(T) == typeof(bool))  			{  				return (T)(object)(this.GetValue(settingsKey) == "1");  			}  			else if (typeof(T) == typeof(int))  			{  				int result;  				int.TryParse(this.GetValue(settingsKey)' out result);  				return (T)(object)(result);  			}  			else if (typeof(T) == typeof(Vector2))  			{  				string[] twoValues = GetValue(settingsKey).Split(''');  				if (twoValues.Length != 2)  				{  					throw new Exception(string.Format("Not parsing {0} as a Vector2"' settingsKey));  				}  				Vector2 valueAsVector2 = new Vector2();  				valueAsVector2.x = Helpers.ParseDouble(twoValues[0]);  				valueAsVector2.y = Helpers.ParseDouble(twoValues[1]);  				return (T)(object)(valueAsVector2);  			}  			else if (typeof(T) == typeof(double))  			{  				string settingsStringh = GetValue(settingsKey);  				if (settingsStringh.Contains("%"))  				{  					string onlyNumber = settingsStringh.Replace("%"' "");  					double ratio = Helpers.ParseDouble(onlyNumber) / 100;    					if (settingsKey == SettingsKey.first_layer_height)  					{  						return (T)(object)(GetValue<double>(SettingsKey.layer_height) * ratio);  					}  					else if (settingsKey == SettingsKey.first_layer_extrusion_width   						|| settingsKey == SettingsKey.external_perimeter_extrusion_width)  					{  						return (T)(object)(GetValue<double>(SettingsKey.nozzle_diameter) * ratio);  					}    					return (T)(object)(ratio);  				}  				else if (settingsKey == SettingsKey.first_layer_extrusion_width  					|| settingsKey == SettingsKey.external_perimeter_extrusion_width)  				{  					double extrusionResult;  					double.TryParse(this.GetValue(settingsKey)' out extrusionResult);  					return (T)(object)(extrusionResult == 0 ? GetValue<double>(SettingsKey.nozzle_diameter) : extrusionResult);  				}    				if (settingsKey == SettingsKey.bed_temperature  					&& !this.GetValue<bool>(SettingsKey.has_heated_bed))  				{  					return (T)Convert.ChangeType(0' typeof(double));  				}    				double result;  				double.TryParse(this.GetValue(settingsKey)' out result);  				return (T)(object)(result);  			}  			else if (typeof(T) == typeof(BedShape))  			{  				switch (GetValue(settingsKey))  				{  					case "rectangular":  						return (T)(object)BedShape.Rectangular;    					case "circular":  						return (T)(object)BedShape.Circular;    					default:  #if DEBUG  						throw new NotImplementedException(string.Format("'{0}' is not a known bed_shape."' GetValue(SettingsKey.bed_shape)));  #else  						return (T)(object)BedShape.Rectangular;  #endif  				}  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,PrinterSettings,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\PrinterSettings.cs,IsValid,The following statement contains a magic number: try  			{  				if (GetValue<double>(SettingsKey.layer_height) > GetValue<double>(SettingsKey.nozzle_diameter))  				{  					string error = "'Layer Height' must be less than or equal to the 'Nozzle Diameter'.".Localize();  					string details = string.Format("Layer Height = {0}\nNozzle Diameter = {1}".Localize()' GetValue<double>(SettingsKey.layer_height)' GetValue<double>(SettingsKey.nozzle_diameter));  					string location = "Location: 'Settings & Controls' -> 'Settings' -> 'General' -> 'Layers/Surface'".Localize();  					StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize());  					return false;  				}  				else if (GetValue<double>(SettingsKey.first_layer_height) > GetValue<double>(SettingsKey.nozzle_diameter))  				{  					string error = "'First Layer Height' must be less than or equal to the 'Nozzle Diameter'.".Localize();  					string details = string.Format("First Layer Height = {0}\nNozzle Diameter = {1}".Localize()' GetValue<double>(SettingsKey.first_layer_height)' GetValue<double>(SettingsKey.nozzle_diameter));  					string location = "Location: 'Settings & Controls' -> 'Settings' -> 'General' -> 'Layers/Surface'".Localize();  					StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize());  					return false;  				}    				// Print recovery can only work with a manually leveled or software leveled bed. Hardware leveling does not work.  				if (GetValue<bool>(SettingsKey.recover_is_enabled))  				{  					string location = "Location: 'Settings & Controls' -> 'Settings' -> 'Printer' -> 'Print Recovery' -> 'Enable Recovery'".Localize();  					string[] startGCode = GetValue("start_gcode").Replace("\\n"' "\n").Split('\n');  					foreach (string startGCodeLine in startGCode)  					{  						if (startGCodeLine.StartsWith("G29"))  						{  							string error = "Start G-Code cannot contain G29 if Print Recovery is enabled.".Localize();  							string details = "Your Start G-Code should not contain a G29 if you are planning on using Print Recovery. Change your start G-Code or turn off Print Recovery".Localize();  							StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize());  							return false;  						}    						if (startGCodeLine.StartsWith("G30"))  						{  							string error = "Start G-Code cannot contain G30 if Print Leveling is enabled.".Localize();  							string details = "Your Start G-Code should not contain a G30 if you are planning on using Print Recovery. Change your start G-Code or turn off Print Recovery".Localize();  							StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize());  							return false;  						}  					}  				}    				// If we have print leveling turned on then make sure we don't have any leveling commands in the start gcode.  				if (GetValue<bool>(SettingsKey.print_leveling_enabled))  				{  					string location = "Location: 'Settings & Controls' -> 'Settings' -> 'Printer' -> 'Custom G-Code' -> 'Start G-Code'".Localize();  					string[] startGCode = GetValue("start_gcode").Replace("\\n"' "\n").Split('\n');  					foreach (string startGCodeLine in startGCode)  					{  						if (startGCodeLine.StartsWith("G29"))  						{  							string error = "Start G-Code cannot contain G29 if Print Leveling is enabled.".Localize();  							string details = "Your Start G-Code should not contain a G29 if you are planning on using print leveling. Change your start G-Code or turn off print leveling".Localize();  							StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize());  							return false;  						}    						if (startGCodeLine.StartsWith("G30"))  						{  							string error = "Start G-Code cannot contain G30 if Print Leveling is enabled.".Localize();  							string details = "Your Start G-Code should not contain a G30 if you are planning on using print leveling. Change your start G-Code or turn off print leveling".Localize();  							StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize());  							return false;  						}  					}  				}    				if (GetValue<double>(SettingsKey.first_layer_extrusion_width) > GetValue<double>(SettingsKey.nozzle_diameter) * 4)  				{  					string error = "'First Layer Extrusion Width' must be less than or equal to the 'Nozzle Diameter' * 4.".Localize();  					string details = string.Format("First Layer Extrusion Width = {0}\nNozzle Diameter = {1}".Localize()' GetValue(SettingsKey.first_layer_extrusion_width)' GetValue<double>(SettingsKey.nozzle_diameter));  					string location = "Location: 'Settings & Controls' -> 'Settings' -> 'Filament' -> 'Extrusion' -> 'First Layer'".Localize();  					StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize());  					return false;  				}    				if (GetValue<double>(SettingsKey.first_layer_extrusion_width) <= 0)  				{  					string error = "'First Layer Extrusion Width' must be greater than 0.".Localize();  					string details = string.Format("First Layer Extrusion Width = {0}".Localize()' GetValue(SettingsKey.first_layer_extrusion_width));  					string location = "Location: 'Settings & Controls' -> 'Settings' -> 'Filament' -> 'Extrusion' -> 'First Layer'".Localize();  					StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize());  					return false;  				}    				if (GetValue<double>(SettingsKey.external_perimeter_extrusion_width) > GetValue<double>(SettingsKey.nozzle_diameter) * 4)  				{  					string error = "'External Perimeter Extrusion Width' must be less than or equal to the 'Nozzle Diameter' * 4.".Localize();  					string details = string.Format("External Perimeter Extrusion Width = {0}\nNozzle Diameter = {1}".Localize()' GetValue(SettingsKey.external_perimeter_extrusion_width)' GetValue<double>(SettingsKey.nozzle_diameter));  					string location = "Location: 'Settings & Controls' -> 'Settings' -> 'Filament' -> 'Extrusion' -> 'External Perimeter'".Localize();  					StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize());  					return false;  				}    				if (GetValue<double>(SettingsKey.external_perimeter_extrusion_width) <= 0)  				{  					string error = "'External Perimeter Extrusion Width' must be greater than 0.".Localize();  					string details = string.Format("External Perimeter Extrusion Width = {0}".Localize()' GetValue(SettingsKey.external_perimeter_extrusion_width));  					string location = "Location: 'Settings & Controls' -> 'Settings' -> 'Filament' -> 'Extrusion' -> 'External Perimeter'".Localize();  					StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize());  					return false;  				}    				if (GetValue<double>(SettingsKey.min_fan_speed) > 100)  				{  					string error = "The Minimum Fan Speed can only go as high as 100%.".Localize();  					string details = string.Format("It is currently set to {0}.".Localize()' GetValue<double>(SettingsKey.min_fan_speed));  					string location = "Location: 'Settings & Controls' -> 'Settings' -> 'Filament' -> 'Cooling'".Localize();  					StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize());  					return false;  				}    				if (GetValue<double>("max_fan_speed") > 100)  				{  					string error = "The Maximum Fan Speed can only go as high as 100%.".Localize();  					string details = string.Format("It is currently set to {0}.".Localize()' GetValue<double>("max_fan_speed"));  					string location = "Location: 'Settings & Controls' -> 'Settings' -> 'Filament' -> 'Cooling'".Localize();  					StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize());  					return false;  				}    				if (GetValue<int>(SettingsKey.extruder_count) < 1)  				{  					string error = "The Extruder Count must be at least 1.".Localize();  					string details = string.Format("It is currently set to {0}.".Localize()' GetValue<int>(SettingsKey.extruder_count));  					string location = "Location: 'Settings & Controls' -> 'Settings' -> 'Printer' -> 'Features'".Localize();  					StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize());  					return false;  				}    				if (GetValue<double>(SettingsKey.fill_density) < 0 || GetValue<double>(SettingsKey.fill_density) > 1)  				{  					string error = "The Fill Density must be between 0 and 1.".Localize();  					string details = string.Format("It is currently set to {0}.".Localize()' GetValue<double>(SettingsKey.fill_density));  					string location = "Location: 'Settings & Controls' -> 'Settings' -> 'General' -> 'Infill'".Localize();  					StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize());  					return false;  				}    				if (GetValue<double>(SettingsKey.fill_density) == 1  					&& GetValue("infill_type") != "LINES")  				{  					string error = "Solid Infill works best when set to LINES.".Localize();  					string details = string.Format("It is currently set to {0}.".Localize()' GetValue("infill_type"));  					string location = "Location: 'Settings & Controls' -> 'Settings' -> 'General' -> 'Infill Type'".Localize();  					StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize());  					return true;  				}      				string normalSpeedLocation = "Location: 'Settings & Controls' -> 'Settings' -> 'General' -> 'Speed'".Localize();  				// If the given speed is part of the current slice engine then check that it is greater than 0.  				if (!ValidateGoodSpeedSettingGreaterThan0("bridge_speed"' normalSpeedLocation)) return false;  				if (!ValidateGoodSpeedSettingGreaterThan0("external_perimeter_speed"' normalSpeedLocation)) return false;  				if (!ValidateGoodSpeedSettingGreaterThan0(SettingsKey.first_layer_speed' normalSpeedLocation)) return false;  				if (!ValidateGoodSpeedSettingGreaterThan0("gap_fill_speed"' normalSpeedLocation)) return false;  				if (!ValidateGoodSpeedSettingGreaterThan0("infill_speed"' normalSpeedLocation)) return false;  				if (!ValidateGoodSpeedSettingGreaterThan0("perimeter_speed"' normalSpeedLocation)) return false;  				if (!ValidateGoodSpeedSettingGreaterThan0("small_perimeter_speed"' normalSpeedLocation)) return false;  				if (!ValidateGoodSpeedSettingGreaterThan0("solid_infill_speed"' normalSpeedLocation)) return false;  				if (!ValidateGoodSpeedSettingGreaterThan0("support_material_speed"' normalSpeedLocation)) return false;  				if (!ValidateGoodSpeedSettingGreaterThan0("top_solid_infill_speed"' normalSpeedLocation)) return false;  				if (!ValidateGoodSpeedSettingGreaterThan0("travel_speed"' normalSpeedLocation)) return false;    				string retractSpeedLocation = "Location: 'Settings & Controls' -> 'Settings' -> 'Filament' -> 'Filament' -> 'Retraction'".Localize();  				if (!ValidateGoodSpeedSettingGreaterThan0("retract_speed"' retractSpeedLocation)) return false;  			}  			catch (Exception e)  			{  				Debug.Print(e.Message);  				GuiWidget.BreakInDebugger();  				string stackTraceNoBackslashRs = e.StackTrace.Replace("\r"' "");  				ContactFormWindow.Open("Parse Error while slicing".Localize()' e.Message + stackTraceNoBackslashRs);  				return false;  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,PrinterSettings,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\PrinterSettings.cs,IsValid,The following statement contains a magic number: try  			{  				if (GetValue<double>(SettingsKey.layer_height) > GetValue<double>(SettingsKey.nozzle_diameter))  				{  					string error = "'Layer Height' must be less than or equal to the 'Nozzle Diameter'.".Localize();  					string details = string.Format("Layer Height = {0}\nNozzle Diameter = {1}".Localize()' GetValue<double>(SettingsKey.layer_height)' GetValue<double>(SettingsKey.nozzle_diameter));  					string location = "Location: 'Settings & Controls' -> 'Settings' -> 'General' -> 'Layers/Surface'".Localize();  					StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize());  					return false;  				}  				else if (GetValue<double>(SettingsKey.first_layer_height) > GetValue<double>(SettingsKey.nozzle_diameter))  				{  					string error = "'First Layer Height' must be less than or equal to the 'Nozzle Diameter'.".Localize();  					string details = string.Format("First Layer Height = {0}\nNozzle Diameter = {1}".Localize()' GetValue<double>(SettingsKey.first_layer_height)' GetValue<double>(SettingsKey.nozzle_diameter));  					string location = "Location: 'Settings & Controls' -> 'Settings' -> 'General' -> 'Layers/Surface'".Localize();  					StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize());  					return false;  				}    				// Print recovery can only work with a manually leveled or software leveled bed. Hardware leveling does not work.  				if (GetValue<bool>(SettingsKey.recover_is_enabled))  				{  					string location = "Location: 'Settings & Controls' -> 'Settings' -> 'Printer' -> 'Print Recovery' -> 'Enable Recovery'".Localize();  					string[] startGCode = GetValue("start_gcode").Replace("\\n"' "\n").Split('\n');  					foreach (string startGCodeLine in startGCode)  					{  						if (startGCodeLine.StartsWith("G29"))  						{  							string error = "Start G-Code cannot contain G29 if Print Recovery is enabled.".Localize();  							string details = "Your Start G-Code should not contain a G29 if you are planning on using Print Recovery. Change your start G-Code or turn off Print Recovery".Localize();  							StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize());  							return false;  						}    						if (startGCodeLine.StartsWith("G30"))  						{  							string error = "Start G-Code cannot contain G30 if Print Leveling is enabled.".Localize();  							string details = "Your Start G-Code should not contain a G30 if you are planning on using Print Recovery. Change your start G-Code or turn off Print Recovery".Localize();  							StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize());  							return false;  						}  					}  				}    				// If we have print leveling turned on then make sure we don't have any leveling commands in the start gcode.  				if (GetValue<bool>(SettingsKey.print_leveling_enabled))  				{  					string location = "Location: 'Settings & Controls' -> 'Settings' -> 'Printer' -> 'Custom G-Code' -> 'Start G-Code'".Localize();  					string[] startGCode = GetValue("start_gcode").Replace("\\n"' "\n").Split('\n');  					foreach (string startGCodeLine in startGCode)  					{  						if (startGCodeLine.StartsWith("G29"))  						{  							string error = "Start G-Code cannot contain G29 if Print Leveling is enabled.".Localize();  							string details = "Your Start G-Code should not contain a G29 if you are planning on using print leveling. Change your start G-Code or turn off print leveling".Localize();  							StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize());  							return false;  						}    						if (startGCodeLine.StartsWith("G30"))  						{  							string error = "Start G-Code cannot contain G30 if Print Leveling is enabled.".Localize();  							string details = "Your Start G-Code should not contain a G30 if you are planning on using print leveling. Change your start G-Code or turn off print leveling".Localize();  							StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize());  							return false;  						}  					}  				}    				if (GetValue<double>(SettingsKey.first_layer_extrusion_width) > GetValue<double>(SettingsKey.nozzle_diameter) * 4)  				{  					string error = "'First Layer Extrusion Width' must be less than or equal to the 'Nozzle Diameter' * 4.".Localize();  					string details = string.Format("First Layer Extrusion Width = {0}\nNozzle Diameter = {1}".Localize()' GetValue(SettingsKey.first_layer_extrusion_width)' GetValue<double>(SettingsKey.nozzle_diameter));  					string location = "Location: 'Settings & Controls' -> 'Settings' -> 'Filament' -> 'Extrusion' -> 'First Layer'".Localize();  					StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize());  					return false;  				}    				if (GetValue<double>(SettingsKey.first_layer_extrusion_width) <= 0)  				{  					string error = "'First Layer Extrusion Width' must be greater than 0.".Localize();  					string details = string.Format("First Layer Extrusion Width = {0}".Localize()' GetValue(SettingsKey.first_layer_extrusion_width));  					string location = "Location: 'Settings & Controls' -> 'Settings' -> 'Filament' -> 'Extrusion' -> 'First Layer'".Localize();  					StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize());  					return false;  				}    				if (GetValue<double>(SettingsKey.external_perimeter_extrusion_width) > GetValue<double>(SettingsKey.nozzle_diameter) * 4)  				{  					string error = "'External Perimeter Extrusion Width' must be less than or equal to the 'Nozzle Diameter' * 4.".Localize();  					string details = string.Format("External Perimeter Extrusion Width = {0}\nNozzle Diameter = {1}".Localize()' GetValue(SettingsKey.external_perimeter_extrusion_width)' GetValue<double>(SettingsKey.nozzle_diameter));  					string location = "Location: 'Settings & Controls' -> 'Settings' -> 'Filament' -> 'Extrusion' -> 'External Perimeter'".Localize();  					StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize());  					return false;  				}    				if (GetValue<double>(SettingsKey.external_perimeter_extrusion_width) <= 0)  				{  					string error = "'External Perimeter Extrusion Width' must be greater than 0.".Localize();  					string details = string.Format("External Perimeter Extrusion Width = {0}".Localize()' GetValue(SettingsKey.external_perimeter_extrusion_width));  					string location = "Location: 'Settings & Controls' -> 'Settings' -> 'Filament' -> 'Extrusion' -> 'External Perimeter'".Localize();  					StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize());  					return false;  				}    				if (GetValue<double>(SettingsKey.min_fan_speed) > 100)  				{  					string error = "The Minimum Fan Speed can only go as high as 100%.".Localize();  					string details = string.Format("It is currently set to {0}.".Localize()' GetValue<double>(SettingsKey.min_fan_speed));  					string location = "Location: 'Settings & Controls' -> 'Settings' -> 'Filament' -> 'Cooling'".Localize();  					StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize());  					return false;  				}    				if (GetValue<double>("max_fan_speed") > 100)  				{  					string error = "The Maximum Fan Speed can only go as high as 100%.".Localize();  					string details = string.Format("It is currently set to {0}.".Localize()' GetValue<double>("max_fan_speed"));  					string location = "Location: 'Settings & Controls' -> 'Settings' -> 'Filament' -> 'Cooling'".Localize();  					StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize());  					return false;  				}    				if (GetValue<int>(SettingsKey.extruder_count) < 1)  				{  					string error = "The Extruder Count must be at least 1.".Localize();  					string details = string.Format("It is currently set to {0}.".Localize()' GetValue<int>(SettingsKey.extruder_count));  					string location = "Location: 'Settings & Controls' -> 'Settings' -> 'Printer' -> 'Features'".Localize();  					StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize());  					return false;  				}    				if (GetValue<double>(SettingsKey.fill_density) < 0 || GetValue<double>(SettingsKey.fill_density) > 1)  				{  					string error = "The Fill Density must be between 0 and 1.".Localize();  					string details = string.Format("It is currently set to {0}.".Localize()' GetValue<double>(SettingsKey.fill_density));  					string location = "Location: 'Settings & Controls' -> 'Settings' -> 'General' -> 'Infill'".Localize();  					StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize());  					return false;  				}    				if (GetValue<double>(SettingsKey.fill_density) == 1  					&& GetValue("infill_type") != "LINES")  				{  					string error = "Solid Infill works best when set to LINES.".Localize();  					string details = string.Format("It is currently set to {0}.".Localize()' GetValue("infill_type"));  					string location = "Location: 'Settings & Controls' -> 'Settings' -> 'General' -> 'Infill Type'".Localize();  					StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize());  					return true;  				}      				string normalSpeedLocation = "Location: 'Settings & Controls' -> 'Settings' -> 'General' -> 'Speed'".Localize();  				// If the given speed is part of the current slice engine then check that it is greater than 0.  				if (!ValidateGoodSpeedSettingGreaterThan0("bridge_speed"' normalSpeedLocation)) return false;  				if (!ValidateGoodSpeedSettingGreaterThan0("external_perimeter_speed"' normalSpeedLocation)) return false;  				if (!ValidateGoodSpeedSettingGreaterThan0(SettingsKey.first_layer_speed' normalSpeedLocation)) return false;  				if (!ValidateGoodSpeedSettingGreaterThan0("gap_fill_speed"' normalSpeedLocation)) return false;  				if (!ValidateGoodSpeedSettingGreaterThan0("infill_speed"' normalSpeedLocation)) return false;  				if (!ValidateGoodSpeedSettingGreaterThan0("perimeter_speed"' normalSpeedLocation)) return false;  				if (!ValidateGoodSpeedSettingGreaterThan0("small_perimeter_speed"' normalSpeedLocation)) return false;  				if (!ValidateGoodSpeedSettingGreaterThan0("solid_infill_speed"' normalSpeedLocation)) return false;  				if (!ValidateGoodSpeedSettingGreaterThan0("support_material_speed"' normalSpeedLocation)) return false;  				if (!ValidateGoodSpeedSettingGreaterThan0("top_solid_infill_speed"' normalSpeedLocation)) return false;  				if (!ValidateGoodSpeedSettingGreaterThan0("travel_speed"' normalSpeedLocation)) return false;    				string retractSpeedLocation = "Location: 'Settings & Controls' -> 'Settings' -> 'Filament' -> 'Filament' -> 'Retraction'".Localize();  				if (!ValidateGoodSpeedSettingGreaterThan0("retract_speed"' retractSpeedLocation)) return false;  			}  			catch (Exception e)  			{  				Debug.Print(e.Message);  				GuiWidget.BreakInDebugger();  				string stackTraceNoBackslashRs = e.StackTrace.Replace("\r"' "");  				ContactFormWindow.Open("Parse Error while slicing".Localize()' e.Message + stackTraceNoBackslashRs);  				return false;  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,PrinterSettings,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\PrinterSettings.cs,IsValid,The following statement contains a magic number: try  			{  				if (GetValue<double>(SettingsKey.layer_height) > GetValue<double>(SettingsKey.nozzle_diameter))  				{  					string error = "'Layer Height' must be less than or equal to the 'Nozzle Diameter'.".Localize();  					string details = string.Format("Layer Height = {0}\nNozzle Diameter = {1}".Localize()' GetValue<double>(SettingsKey.layer_height)' GetValue<double>(SettingsKey.nozzle_diameter));  					string location = "Location: 'Settings & Controls' -> 'Settings' -> 'General' -> 'Layers/Surface'".Localize();  					StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize());  					return false;  				}  				else if (GetValue<double>(SettingsKey.first_layer_height) > GetValue<double>(SettingsKey.nozzle_diameter))  				{  					string error = "'First Layer Height' must be less than or equal to the 'Nozzle Diameter'.".Localize();  					string details = string.Format("First Layer Height = {0}\nNozzle Diameter = {1}".Localize()' GetValue<double>(SettingsKey.first_layer_height)' GetValue<double>(SettingsKey.nozzle_diameter));  					string location = "Location: 'Settings & Controls' -> 'Settings' -> 'General' -> 'Layers/Surface'".Localize();  					StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize());  					return false;  				}    				// Print recovery can only work with a manually leveled or software leveled bed. Hardware leveling does not work.  				if (GetValue<bool>(SettingsKey.recover_is_enabled))  				{  					string location = "Location: 'Settings & Controls' -> 'Settings' -> 'Printer' -> 'Print Recovery' -> 'Enable Recovery'".Localize();  					string[] startGCode = GetValue("start_gcode").Replace("\\n"' "\n").Split('\n');  					foreach (string startGCodeLine in startGCode)  					{  						if (startGCodeLine.StartsWith("G29"))  						{  							string error = "Start G-Code cannot contain G29 if Print Recovery is enabled.".Localize();  							string details = "Your Start G-Code should not contain a G29 if you are planning on using Print Recovery. Change your start G-Code or turn off Print Recovery".Localize();  							StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize());  							return false;  						}    						if (startGCodeLine.StartsWith("G30"))  						{  							string error = "Start G-Code cannot contain G30 if Print Leveling is enabled.".Localize();  							string details = "Your Start G-Code should not contain a G30 if you are planning on using Print Recovery. Change your start G-Code or turn off Print Recovery".Localize();  							StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize());  							return false;  						}  					}  				}    				// If we have print leveling turned on then make sure we don't have any leveling commands in the start gcode.  				if (GetValue<bool>(SettingsKey.print_leveling_enabled))  				{  					string location = "Location: 'Settings & Controls' -> 'Settings' -> 'Printer' -> 'Custom G-Code' -> 'Start G-Code'".Localize();  					string[] startGCode = GetValue("start_gcode").Replace("\\n"' "\n").Split('\n');  					foreach (string startGCodeLine in startGCode)  					{  						if (startGCodeLine.StartsWith("G29"))  						{  							string error = "Start G-Code cannot contain G29 if Print Leveling is enabled.".Localize();  							string details = "Your Start G-Code should not contain a G29 if you are planning on using print leveling. Change your start G-Code or turn off print leveling".Localize();  							StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize());  							return false;  						}    						if (startGCodeLine.StartsWith("G30"))  						{  							string error = "Start G-Code cannot contain G30 if Print Leveling is enabled.".Localize();  							string details = "Your Start G-Code should not contain a G30 if you are planning on using print leveling. Change your start G-Code or turn off print leveling".Localize();  							StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize());  							return false;  						}  					}  				}    				if (GetValue<double>(SettingsKey.first_layer_extrusion_width) > GetValue<double>(SettingsKey.nozzle_diameter) * 4)  				{  					string error = "'First Layer Extrusion Width' must be less than or equal to the 'Nozzle Diameter' * 4.".Localize();  					string details = string.Format("First Layer Extrusion Width = {0}\nNozzle Diameter = {1}".Localize()' GetValue(SettingsKey.first_layer_extrusion_width)' GetValue<double>(SettingsKey.nozzle_diameter));  					string location = "Location: 'Settings & Controls' -> 'Settings' -> 'Filament' -> 'Extrusion' -> 'First Layer'".Localize();  					StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize());  					return false;  				}    				if (GetValue<double>(SettingsKey.first_layer_extrusion_width) <= 0)  				{  					string error = "'First Layer Extrusion Width' must be greater than 0.".Localize();  					string details = string.Format("First Layer Extrusion Width = {0}".Localize()' GetValue(SettingsKey.first_layer_extrusion_width));  					string location = "Location: 'Settings & Controls' -> 'Settings' -> 'Filament' -> 'Extrusion' -> 'First Layer'".Localize();  					StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize());  					return false;  				}    				if (GetValue<double>(SettingsKey.external_perimeter_extrusion_width) > GetValue<double>(SettingsKey.nozzle_diameter) * 4)  				{  					string error = "'External Perimeter Extrusion Width' must be less than or equal to the 'Nozzle Diameter' * 4.".Localize();  					string details = string.Format("External Perimeter Extrusion Width = {0}\nNozzle Diameter = {1}".Localize()' GetValue(SettingsKey.external_perimeter_extrusion_width)' GetValue<double>(SettingsKey.nozzle_diameter));  					string location = "Location: 'Settings & Controls' -> 'Settings' -> 'Filament' -> 'Extrusion' -> 'External Perimeter'".Localize();  					StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize());  					return false;  				}    				if (GetValue<double>(SettingsKey.external_perimeter_extrusion_width) <= 0)  				{  					string error = "'External Perimeter Extrusion Width' must be greater than 0.".Localize();  					string details = string.Format("External Perimeter Extrusion Width = {0}".Localize()' GetValue(SettingsKey.external_perimeter_extrusion_width));  					string location = "Location: 'Settings & Controls' -> 'Settings' -> 'Filament' -> 'Extrusion' -> 'External Perimeter'".Localize();  					StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize());  					return false;  				}    				if (GetValue<double>(SettingsKey.min_fan_speed) > 100)  				{  					string error = "The Minimum Fan Speed can only go as high as 100%.".Localize();  					string details = string.Format("It is currently set to {0}.".Localize()' GetValue<double>(SettingsKey.min_fan_speed));  					string location = "Location: 'Settings & Controls' -> 'Settings' -> 'Filament' -> 'Cooling'".Localize();  					StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize());  					return false;  				}    				if (GetValue<double>("max_fan_speed") > 100)  				{  					string error = "The Maximum Fan Speed can only go as high as 100%.".Localize();  					string details = string.Format("It is currently set to {0}.".Localize()' GetValue<double>("max_fan_speed"));  					string location = "Location: 'Settings & Controls' -> 'Settings' -> 'Filament' -> 'Cooling'".Localize();  					StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize());  					return false;  				}    				if (GetValue<int>(SettingsKey.extruder_count) < 1)  				{  					string error = "The Extruder Count must be at least 1.".Localize();  					string details = string.Format("It is currently set to {0}.".Localize()' GetValue<int>(SettingsKey.extruder_count));  					string location = "Location: 'Settings & Controls' -> 'Settings' -> 'Printer' -> 'Features'".Localize();  					StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize());  					return false;  				}    				if (GetValue<double>(SettingsKey.fill_density) < 0 || GetValue<double>(SettingsKey.fill_density) > 1)  				{  					string error = "The Fill Density must be between 0 and 1.".Localize();  					string details = string.Format("It is currently set to {0}.".Localize()' GetValue<double>(SettingsKey.fill_density));  					string location = "Location: 'Settings & Controls' -> 'Settings' -> 'General' -> 'Infill'".Localize();  					StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize());  					return false;  				}    				if (GetValue<double>(SettingsKey.fill_density) == 1  					&& GetValue("infill_type") != "LINES")  				{  					string error = "Solid Infill works best when set to LINES.".Localize();  					string details = string.Format("It is currently set to {0}.".Localize()' GetValue("infill_type"));  					string location = "Location: 'Settings & Controls' -> 'Settings' -> 'General' -> 'Infill Type'".Localize();  					StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize());  					return true;  				}      				string normalSpeedLocation = "Location: 'Settings & Controls' -> 'Settings' -> 'General' -> 'Speed'".Localize();  				// If the given speed is part of the current slice engine then check that it is greater than 0.  				if (!ValidateGoodSpeedSettingGreaterThan0("bridge_speed"' normalSpeedLocation)) return false;  				if (!ValidateGoodSpeedSettingGreaterThan0("external_perimeter_speed"' normalSpeedLocation)) return false;  				if (!ValidateGoodSpeedSettingGreaterThan0(SettingsKey.first_layer_speed' normalSpeedLocation)) return false;  				if (!ValidateGoodSpeedSettingGreaterThan0("gap_fill_speed"' normalSpeedLocation)) return false;  				if (!ValidateGoodSpeedSettingGreaterThan0("infill_speed"' normalSpeedLocation)) return false;  				if (!ValidateGoodSpeedSettingGreaterThan0("perimeter_speed"' normalSpeedLocation)) return false;  				if (!ValidateGoodSpeedSettingGreaterThan0("small_perimeter_speed"' normalSpeedLocation)) return false;  				if (!ValidateGoodSpeedSettingGreaterThan0("solid_infill_speed"' normalSpeedLocation)) return false;  				if (!ValidateGoodSpeedSettingGreaterThan0("support_material_speed"' normalSpeedLocation)) return false;  				if (!ValidateGoodSpeedSettingGreaterThan0("top_solid_infill_speed"' normalSpeedLocation)) return false;  				if (!ValidateGoodSpeedSettingGreaterThan0("travel_speed"' normalSpeedLocation)) return false;    				string retractSpeedLocation = "Location: 'Settings & Controls' -> 'Settings' -> 'Filament' -> 'Filament' -> 'Retraction'".Localize();  				if (!ValidateGoodSpeedSettingGreaterThan0("retract_speed"' retractSpeedLocation)) return false;  			}  			catch (Exception e)  			{  				Debug.Print(e.Message);  				GuiWidget.BreakInDebugger();  				string stackTraceNoBackslashRs = e.StackTrace.Replace("\r"' "");  				ContactFormWindow.Open("Parse Error while slicing".Localize()' e.Message + stackTraceNoBackslashRs);  				return false;  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,PrinterSettings,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\PrinterSettings.cs,IsValid,The following statement contains a magic number: try  			{  				if (GetValue<double>(SettingsKey.layer_height) > GetValue<double>(SettingsKey.nozzle_diameter))  				{  					string error = "'Layer Height' must be less than or equal to the 'Nozzle Diameter'.".Localize();  					string details = string.Format("Layer Height = {0}\nNozzle Diameter = {1}".Localize()' GetValue<double>(SettingsKey.layer_height)' GetValue<double>(SettingsKey.nozzle_diameter));  					string location = "Location: 'Settings & Controls' -> 'Settings' -> 'General' -> 'Layers/Surface'".Localize();  					StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize());  					return false;  				}  				else if (GetValue<double>(SettingsKey.first_layer_height) > GetValue<double>(SettingsKey.nozzle_diameter))  				{  					string error = "'First Layer Height' must be less than or equal to the 'Nozzle Diameter'.".Localize();  					string details = string.Format("First Layer Height = {0}\nNozzle Diameter = {1}".Localize()' GetValue<double>(SettingsKey.first_layer_height)' GetValue<double>(SettingsKey.nozzle_diameter));  					string location = "Location: 'Settings & Controls' -> 'Settings' -> 'General' -> 'Layers/Surface'".Localize();  					StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize());  					return false;  				}    				// Print recovery can only work with a manually leveled or software leveled bed. Hardware leveling does not work.  				if (GetValue<bool>(SettingsKey.recover_is_enabled))  				{  					string location = "Location: 'Settings & Controls' -> 'Settings' -> 'Printer' -> 'Print Recovery' -> 'Enable Recovery'".Localize();  					string[] startGCode = GetValue("start_gcode").Replace("\\n"' "\n").Split('\n');  					foreach (string startGCodeLine in startGCode)  					{  						if (startGCodeLine.StartsWith("G29"))  						{  							string error = "Start G-Code cannot contain G29 if Print Recovery is enabled.".Localize();  							string details = "Your Start G-Code should not contain a G29 if you are planning on using Print Recovery. Change your start G-Code or turn off Print Recovery".Localize();  							StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize());  							return false;  						}    						if (startGCodeLine.StartsWith("G30"))  						{  							string error = "Start G-Code cannot contain G30 if Print Leveling is enabled.".Localize();  							string details = "Your Start G-Code should not contain a G30 if you are planning on using Print Recovery. Change your start G-Code or turn off Print Recovery".Localize();  							StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize());  							return false;  						}  					}  				}    				// If we have print leveling turned on then make sure we don't have any leveling commands in the start gcode.  				if (GetValue<bool>(SettingsKey.print_leveling_enabled))  				{  					string location = "Location: 'Settings & Controls' -> 'Settings' -> 'Printer' -> 'Custom G-Code' -> 'Start G-Code'".Localize();  					string[] startGCode = GetValue("start_gcode").Replace("\\n"' "\n").Split('\n');  					foreach (string startGCodeLine in startGCode)  					{  						if (startGCodeLine.StartsWith("G29"))  						{  							string error = "Start G-Code cannot contain G29 if Print Leveling is enabled.".Localize();  							string details = "Your Start G-Code should not contain a G29 if you are planning on using print leveling. Change your start G-Code or turn off print leveling".Localize();  							StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize());  							return false;  						}    						if (startGCodeLine.StartsWith("G30"))  						{  							string error = "Start G-Code cannot contain G30 if Print Leveling is enabled.".Localize();  							string details = "Your Start G-Code should not contain a G30 if you are planning on using print leveling. Change your start G-Code or turn off print leveling".Localize();  							StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize());  							return false;  						}  					}  				}    				if (GetValue<double>(SettingsKey.first_layer_extrusion_width) > GetValue<double>(SettingsKey.nozzle_diameter) * 4)  				{  					string error = "'First Layer Extrusion Width' must be less than or equal to the 'Nozzle Diameter' * 4.".Localize();  					string details = string.Format("First Layer Extrusion Width = {0}\nNozzle Diameter = {1}".Localize()' GetValue(SettingsKey.first_layer_extrusion_width)' GetValue<double>(SettingsKey.nozzle_diameter));  					string location = "Location: 'Settings & Controls' -> 'Settings' -> 'Filament' -> 'Extrusion' -> 'First Layer'".Localize();  					StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize());  					return false;  				}    				if (GetValue<double>(SettingsKey.first_layer_extrusion_width) <= 0)  				{  					string error = "'First Layer Extrusion Width' must be greater than 0.".Localize();  					string details = string.Format("First Layer Extrusion Width = {0}".Localize()' GetValue(SettingsKey.first_layer_extrusion_width));  					string location = "Location: 'Settings & Controls' -> 'Settings' -> 'Filament' -> 'Extrusion' -> 'First Layer'".Localize();  					StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize());  					return false;  				}    				if (GetValue<double>(SettingsKey.external_perimeter_extrusion_width) > GetValue<double>(SettingsKey.nozzle_diameter) * 4)  				{  					string error = "'External Perimeter Extrusion Width' must be less than or equal to the 'Nozzle Diameter' * 4.".Localize();  					string details = string.Format("External Perimeter Extrusion Width = {0}\nNozzle Diameter = {1}".Localize()' GetValue(SettingsKey.external_perimeter_extrusion_width)' GetValue<double>(SettingsKey.nozzle_diameter));  					string location = "Location: 'Settings & Controls' -> 'Settings' -> 'Filament' -> 'Extrusion' -> 'External Perimeter'".Localize();  					StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize());  					return false;  				}    				if (GetValue<double>(SettingsKey.external_perimeter_extrusion_width) <= 0)  				{  					string error = "'External Perimeter Extrusion Width' must be greater than 0.".Localize();  					string details = string.Format("External Perimeter Extrusion Width = {0}".Localize()' GetValue(SettingsKey.external_perimeter_extrusion_width));  					string location = "Location: 'Settings & Controls' -> 'Settings' -> 'Filament' -> 'Extrusion' -> 'External Perimeter'".Localize();  					StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize());  					return false;  				}    				if (GetValue<double>(SettingsKey.min_fan_speed) > 100)  				{  					string error = "The Minimum Fan Speed can only go as high as 100%.".Localize();  					string details = string.Format("It is currently set to {0}.".Localize()' GetValue<double>(SettingsKey.min_fan_speed));  					string location = "Location: 'Settings & Controls' -> 'Settings' -> 'Filament' -> 'Cooling'".Localize();  					StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize());  					return false;  				}    				if (GetValue<double>("max_fan_speed") > 100)  				{  					string error = "The Maximum Fan Speed can only go as high as 100%.".Localize();  					string details = string.Format("It is currently set to {0}.".Localize()' GetValue<double>("max_fan_speed"));  					string location = "Location: 'Settings & Controls' -> 'Settings' -> 'Filament' -> 'Cooling'".Localize();  					StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize());  					return false;  				}    				if (GetValue<int>(SettingsKey.extruder_count) < 1)  				{  					string error = "The Extruder Count must be at least 1.".Localize();  					string details = string.Format("It is currently set to {0}.".Localize()' GetValue<int>(SettingsKey.extruder_count));  					string location = "Location: 'Settings & Controls' -> 'Settings' -> 'Printer' -> 'Features'".Localize();  					StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize());  					return false;  				}    				if (GetValue<double>(SettingsKey.fill_density) < 0 || GetValue<double>(SettingsKey.fill_density) > 1)  				{  					string error = "The Fill Density must be between 0 and 1.".Localize();  					string details = string.Format("It is currently set to {0}.".Localize()' GetValue<double>(SettingsKey.fill_density));  					string location = "Location: 'Settings & Controls' -> 'Settings' -> 'General' -> 'Infill'".Localize();  					StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize());  					return false;  				}    				if (GetValue<double>(SettingsKey.fill_density) == 1  					&& GetValue("infill_type") != "LINES")  				{  					string error = "Solid Infill works best when set to LINES.".Localize();  					string details = string.Format("It is currently set to {0}.".Localize()' GetValue("infill_type"));  					string location = "Location: 'Settings & Controls' -> 'Settings' -> 'General' -> 'Infill Type'".Localize();  					StyledMessageBox.ShowMessageBox(null' string.Format("{0}\n\n{1}\n\n{2}"' error' details' location)' "Slice Error".Localize());  					return true;  				}      				string normalSpeedLocation = "Location: 'Settings & Controls' -> 'Settings' -> 'General' -> 'Speed'".Localize();  				// If the given speed is part of the current slice engine then check that it is greater than 0.  				if (!ValidateGoodSpeedSettingGreaterThan0("bridge_speed"' normalSpeedLocation)) return false;  				if (!ValidateGoodSpeedSettingGreaterThan0("external_perimeter_speed"' normalSpeedLocation)) return false;  				if (!ValidateGoodSpeedSettingGreaterThan0(SettingsKey.first_layer_speed' normalSpeedLocation)) return false;  				if (!ValidateGoodSpeedSettingGreaterThan0("gap_fill_speed"' normalSpeedLocation)) return false;  				if (!ValidateGoodSpeedSettingGreaterThan0("infill_speed"' normalSpeedLocation)) return false;  				if (!ValidateGoodSpeedSettingGreaterThan0("perimeter_speed"' normalSpeedLocation)) return false;  				if (!ValidateGoodSpeedSettingGreaterThan0("small_perimeter_speed"' normalSpeedLocation)) return false;  				if (!ValidateGoodSpeedSettingGreaterThan0("solid_infill_speed"' normalSpeedLocation)) return false;  				if (!ValidateGoodSpeedSettingGreaterThan0("support_material_speed"' normalSpeedLocation)) return false;  				if (!ValidateGoodSpeedSettingGreaterThan0("top_solid_infill_speed"' normalSpeedLocation)) return false;  				if (!ValidateGoodSpeedSettingGreaterThan0("travel_speed"' normalSpeedLocation)) return false;    				string retractSpeedLocation = "Location: 'Settings & Controls' -> 'Settings' -> 'Filament' -> 'Filament' -> 'Retraction'".Localize();  				if (!ValidateGoodSpeedSettingGreaterThan0("retract_speed"' retractSpeedLocation)) return false;  			}  			catch (Exception e)  			{  				Debug.Print(e.Message);  				GuiWidget.BreakInDebugger();  				string stackTraceNoBackslashRs = e.StackTrace.Replace("\r"' "");  				ContactFormWindow.Open("Parse Error while slicing".Localize()' e.Message + stackTraceNoBackslashRs);  				return false;  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,PresetSelectorWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SettingsControlSelectors.cs,PresetSelectorWidget,The following statement contains a magic number: GuiWidget accentBar = new GuiWidget(7' 5)  			{  				BackgroundColor = accentColor'  				HAnchor = HAnchor.ParentLeftRight  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,PresetSelectorWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SettingsControlSelectors.cs,PresetSelectorWidget,The following statement contains a magic number: GuiWidget accentBar = new GuiWidget(7' 5)  			{  				BackgroundColor = accentColor'  				HAnchor = HAnchor.ParentLeftRight  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,PresetSelectorWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SettingsControlSelectors.cs,PresetSelectorWidget,The following statement contains a magic number: TextWidget labelText = new TextWidget(label.Localize().ToUpper())  			{  				TextColor = ActiveTheme.Instance.PrimaryTextColor'  				HAnchor = Agg.UI.HAnchor.ParentCenter'  				Margin = new BorderDouble(0' 3' 0' 6)  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,PresetSelectorWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SettingsControlSelectors.cs,PresetSelectorWidget,The following statement contains a magic number: TextWidget labelText = new TextWidget(label.Localize().ToUpper())  			{  				TextColor = ActiveTheme.Instance.PrimaryTextColor'  				HAnchor = Agg.UI.HAnchor.ParentCenter'  				Margin = new BorderDouble(0' 3' 0' 6)  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,PresetSelectorWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SettingsControlSelectors.cs,GetPulldownContainer,The following statement contains a magic number: container.Padding = new BorderDouble(6' 0);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,PresetSelectorWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SettingsControlSelectors.cs,GetPulldownContainer,The following statement contains a magic number: editButton.Margin = new BorderDouble(left: 6);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,PresetSelectorWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SettingsControlSelectors.cs,CreateDropdown,The following statement contains a magic number: var dropDownList = new DropDownList(defaultMenuItemText' maxHeight: 300' useLeftIcons: true)  			{  				HAnchor = HAnchor.ParentLeftRight'  				MenuItemsPadding = new BorderDouble(10' 4' 10' 6)'  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,PresetSelectorWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SettingsControlSelectors.cs,CreateDropdown,The following statement contains a magic number: var dropDownList = new DropDownList(defaultMenuItemText' maxHeight: 300' useLeftIcons: true)  			{  				HAnchor = HAnchor.ParentLeftRight'  				MenuItemsPadding = new BorderDouble(10' 4' 10' 6)'  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,PresetSelectorWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SettingsControlSelectors.cs,CreateDropdown,The following statement contains a magic number: var dropDownList = new DropDownList(defaultMenuItemText' maxHeight: 300' useLeftIcons: true)  			{  				HAnchor = HAnchor.ParentLeftRight'  				MenuItemsPadding = new BorderDouble(10' 4' 10' 6)'  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,PresetSelectorWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SettingsControlSelectors.cs,CreateDropdown,The following statement contains a magic number: var dropDownList = new DropDownList(defaultMenuItemText' maxHeight: 300' useLeftIcons: true)  			{  				HAnchor = HAnchor.ParentLeftRight'  				MenuItemsPadding = new BorderDouble(10' 4' 10' 6)'  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,PresetSelectorWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SettingsControlSelectors.cs,CreateDropdown,The following statement contains a magic number: var dropDownList = new DropDownList(defaultMenuItemText' maxHeight: 300' useLeftIcons: true)  			{  				HAnchor = HAnchor.ParentLeftRight'  				MenuItemsPadding = new BorderDouble(10' 4' 10' 6)'  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,PresetSelectorWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SettingsControlSelectors.cs,CreateDropdown,The following statement contains a magic number: dropDownList.Margin = new BorderDouble(0' 3);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,PresetSelectorWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SettingsControlSelectors.cs,CreateDropdown,The following statement contains a magic number: MenuItem addNewPreset = dropDownList.AddItem(StaticData.Instance.LoadIcon("icon_plus.png"' 32' 32)' "Add New Setting".Localize() + "..."' "new");
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,PresetSelectorWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SettingsControlSelectors.cs,CreateDropdown,The following statement contains a magic number: MenuItem addNewPreset = dropDownList.AddItem(StaticData.Instance.LoadIcon("icon_plus.png"' 32' 32)' "Add New Setting".Localize() + "..."' "new");
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceEngineSelector,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SettingsControlSelectors.cs,SliceEngineSelector,The following statement contains a magic number: foreach (SliceEngineInfo engineMenuItem in SlicingQueue.AvailableSliceEngines)  			{  				MenuItem item = AddItem(engineMenuItem.Name);  				item.Enabled = ActiveSliceSettings.Instance.GetValue<int>(SettingsKey.extruder_count) < 2 || engineMenuItem.Name == "MatterSlice";    				SlicingEngineTypes itemEngineType = engineMenuItem.GetSliceEngineType();  				item.Selected += (sender' e) =>  				{  					if (ActiveSliceSettings.Instance.Helpers.ActiveSliceEngineType() != itemEngineType)  					{  						ActiveSliceSettings.Instance.Helpers.ActiveSliceEngineType(itemEngineType);  						ApplicationController.Instance.ReloadAdvancedControlsPanel();  					}  				};    				//Set item as selected if it matches the active slice engine  				if (itemEngineType == ActiveSliceSettings.Instance.Helpers.ActiveSliceEngineType())  				{  					SelectedLabel = engineMenuItem.Name;  				}  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SlicePresetsWindow,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SlicePresetsWindow\SlicePresetsWindow.cs,SlicePresetsWindow,The following statement contains a magic number: this.MinimumSize = new Vector2(640' 480);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SlicePresetsWindow,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SlicePresetsWindow\SlicePresetsWindow.cs,SlicePresetsWindow,The following statement contains a magic number: this.MinimumSize = new Vector2(640' 480);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SlicePresetsWindow,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SlicePresetsWindow\SlicePresetsWindow.cs,SlicePresetsWindow,The following statement contains a magic number: var linkButtonFactory = new LinkButtonFactory()  			{  				fontSize = 8'  				textColor = ActiveTheme.Instance.SecondaryAccentColor  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SlicePresetsWindow,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SlicePresetsWindow\SlicePresetsWindow.cs,SlicePresetsWindow,The following statement contains a magic number: FlowLayoutWidget mainContainer = new FlowLayoutWidget(FlowDirection.TopToBottom)  			{  				Padding = new BorderDouble(3)  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SlicePresetsWindow,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SlicePresetsWindow\SlicePresetsWindow.cs,GetTopRow,The following statement contains a magic number: var topRow = new FlowLayoutWidget()  			{  				HAnchor = HAnchor.ParentLeftRight'  				Padding = new BorderDouble(0' 3)  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SlicePresetsWindow,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SlicePresetsWindow\SlicePresetsWindow.cs,GetTopRow,The following statement contains a magic number: topRow.AddChild(new TextWidget("Preset Name:".Localize()' pointSize: 14)  			{  				TextColor = ActiveTheme.Instance.PrimaryTextColor'  				VAnchor = VAnchor.ParentCenter'  				Margin = new BorderDouble(right: 4)  			});
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SlicePresetsWindow,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SlicePresetsWindow\SlicePresetsWindow.cs,GetTopRow,The following statement contains a magic number: topRow.AddChild(new TextWidget("Preset Name:".Localize()' pointSize: 14)  			{  				TextColor = ActiveTheme.Instance.PrimaryTextColor'  				VAnchor = VAnchor.ParentCenter'  				Margin = new BorderDouble(right: 4)  			});
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SlicePresetsWindow,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SlicePresetsWindow\SlicePresetsWindow.cs,GetBottomRow,The following statement contains a magic number: var container = new FlowLayoutWidget()  			{  				HAnchor = HAnchor.ParentLeftRight'  				Margin = new BorderDouble(top: 3)  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,EngineMappingsMatterSlice,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SlicerMapping\EngineMappingMatterSlice.cs,EngineMappingsMatterSlice,The following statement contains a magic number: mappedSettings = new MappedSetting[]  			{  				new AsCountOrDistance("bottom_solid_layers"' "numberOfBottomLayers"' SettingsKey.layer_height)'  				new AsCountOrDistance("perimeters"' "numberOfPerimeters"' SettingsKey.nozzle_diameter)'  				new AsCountOrDistance("raft_extra_distance_around_part"' "raftExtraDistanceAroundPart"' SettingsKey.nozzle_diameter)'  				new AsCountOrDistance("skirts"' "numberOfSkirtLoops"' SettingsKey.nozzle_diameter)'  				new AsCountOrDistance("support_material_interface_layers"' "supportInterfaceLayers"' SettingsKey.layer_height)'  				new AsCountOrDistance("top_solid_layers"' "numberOfTopLayers"' SettingsKey.layer_height)'  				new AsCountOrDistance("brims"' "numberOfBrimLoops"' SettingsKey.nozzle_diameter)'  				new AsPercentOfReferenceOrDirect(SettingsKey.external_perimeter_extrusion_width' "outsidePerimeterExtrusionWidth"' SettingsKey.nozzle_diameter)'  				new AsPercentOfReferenceOrDirect("external_perimeter_speed"' "outsidePerimeterSpeed"' "perimeter_speed")'  				new AsPercentOfReferenceOrDirect(SettingsKey.first_layer_speed' "firstLayerSpeed"' "infill_speed")'  				new AsPercentOfReferenceOrDirect("raft_print_speed"' "raftPrintSpeed"' "infill_speed")'  				new AsPercentOfReferenceOrDirect("top_solid_infill_speed"' "topInfillSpeed"' "infill_speed")'  				new AsPercentOfReferenceOrDirect(SettingsKey.first_layer_extrusion_width' "firstLayerExtrusionWidth"' SettingsKey.nozzle_diameter)'  				new AsPercentOfReferenceOrDirect(SettingsKey.first_layer_height' "firstLayerThickness"' SettingsKey.layer_height)'  				new ExtruderOffsets("extruder_offset"' "extruderOffsets")'  				new GCodeForSlicer("before_toolchange_gcode"' "beforeToolchangeCode")'  				new GCodeForSlicer("end_gcode"' "endCode")'  				new GCodeForSlicer("toolchange_gcode"' "toolChangeCode")'  				new MapFirstValue("retract_before_travel"' "minimumTravelToCauseRetraction")'  				new MapFirstValue("retract_length"' "retractionOnTravel")'  				new MapFirstValue("retract_lift"' "retractionZHop")'  				new MapFirstValue("retract_restart_extra"' "unretractExtraExtrusion")'  				new MapFirstValue("retract_speed"' "retractionSpeed")'  				new MappedSetting("bridge_fan_speed"' "bridgeFanSpeedPercent")'  				new MappedSetting("bridge_speed"' "bridgeSpeed")'  				new MappedSetting("disable_fan_first_layers"' "firstLayerToAllowFan")'  				new MappedSetting("extrusion_multiplier"' "extrusionMultiplier")'  				new MappedSetting("fill_angle"' "infillStartingAngle")'  				new MappedSetting("infill_overlap_perimeter"' "infillExtendIntoPerimeter")'  				new MappedSetting("infill_speed"' "infillSpeed")'  				new MappedSetting("infill_type"' "infillType")'  				new GCodeForSlicer("layer_gcode"' "layerChangeCode")'  				new MappedSetting("max_fan_speed"' "fanSpeedMaxPercent")'  				new MappedSetting("min_extrusion_before_retract"' "minimumExtrusionBeforeRetraction")'  				new MappedSetting("min_fan_speed"' "fanSpeedMinPercent")'  				new MappedSetting("min_print_speed"' "minimumPrintingSpeed")'  				new MappedSetting("perimeter_speed"' "insidePerimetersSpeed")'  				new MappedSetting("raft_air_gap"' "raftAirGap")'  				new MappedSetting("raft_fan_speed_percent"' "raftFanSpeedPercent")'  				new MappedSetting("retract_length_tool_change"' "retractionOnExtruderSwitch")'  				new MappedSetting("retract_restart_extra_toolchange"' "unretractExtraOnExtruderSwitch")'  				new MappedSetting("skirt_distance"' "skirtDistanceFromObject")'  				new MappedSetting("slowdown_below_layer_time"' "minimumLayerTimeSeconds")'  				new MappedSetting("support_air_gap"' "supportAirGap")'  				new MappedSetting("support_material_infill_angle"' "supportInfillStartingAngle")'  				new MappedSetting("support_material_percent"' "supportPercent")'  				new MappedSetting("support_material_spacing"' "supportLineSpacing")'  				new MappedSetting("support_material_speed"' "supportMaterialSpeed")'  				new MappedSetting("support_material_xy_distance"' "supportXYDistanceFromObject")'  				new MappedSetting("support_type"' "supportType")'  				new MappedSetting("travel_speed"' "travelSpeed")'  				new MappedSetting("wipe_shield_distance"' "wipeShieldDistanceFromObject")'  				new MappedSetting("wipe_tower_size"' "wipeTowerSize")'  				new MappedSetting("z_offset"' "zOffset")'  				new MappedSetting(SettingsKey.bottom_clip_amount' "bottomClipAmount")'  				new MappedSetting(SettingsKey.filament_diameter' "filamentDiameter")'  				new MappedSetting(SettingsKey.layer_height' "layerThickness")'  				new MappedSetting(SettingsKey.nozzle_diameter' "extrusionWidth")'  				new MappedToBoolString("avoid_crossing_perimeters"' "avoidCrossingPerimeters")'  				new MappedToBoolString("create_raft"' "enableRaft")'  				new MappedToBoolString("external_perimeters_first"' "outsidePerimetersFirst")'  				new MappedToBoolString("output_only_first_layer"' "outputOnlyFirstLayer")'  				new MappedToBoolString("retract_when_changing_islands"' "retractWhenChangingIslands")'  				new MappedToBoolString("support_material"' "generateSupport")'  				new MappedToBoolString("support_material_create_internal_support"' "generateInternalSupport")'  				new MappedToBoolString("support_material_create_perimeter"' "generateSupportPerimeter")'  				new MappedToBoolString("wipe"' "wipeAfterRetraction")'  				new MappedToBoolString(SettingsKey.center_part_on_bed' "centerObjectInXy")'  				new MappedToBoolString(SettingsKey.expand_thin_walls' "expandThinWalls")'  				new MappedToBoolString(SettingsKey.merge_overlapping_lines' "MergeOverlappingLines")'  				new MappedToBoolString(SettingsKey.fill_thin_gaps' "fillThinGaps")'  				new MappedToBoolString(SettingsKey.spiral_vase' "continuousSpiralOuterPerimeter")'  				new MapPositionToPlaceObjectCenter(SettingsKey.print_center' "positionToPlaceObjectCenter")'  				new MapStartGCode("start_gcode"' "startCode"' true)'  				new ScaledSingleNumber("fill_density"' "infillPercent"' 100)'  				new ScaledSingleNumber(SettingsKey.perimeter_start_end_overlap' "perimeterStartEndOverlapRatio"' .01)'  				new SkirtLengthMapping("min_skirt_length"' "skirtMinLength")'  				new SupportExtrusionWidth("support_material_extrusion_width"'"supportExtrusionPercent")'  				new ValuePlusConstant("raft_extruder"' "raftExtruder"' -1)'  				new ValuePlusConstant("support_material_extruder"' "supportExtruder"' -1)'  				new ValuePlusConstant("support_material_interface_extruder"' "supportInterfaceExtruder"' -1)'  				new VisibleButNotMappedToEngine("extruder_count")'  				new VisibleButNotMappedToEngine("extruders_share_temperature")'  				new VisibleButNotMappedToEngine(SettingsKey.baby_step_z_offset)'  				new VisibleButNotMappedToEngine("g0")'  				new VisibleButNotMappedToEngine("solid_shell")'  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,EngineMappingsMatterSlice,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SlicerMapping\EngineMappingMatterSlice.cs,EngineMappingsMatterSlice,The following statement contains a magic number: mappedSettings = new MappedSetting[]  			{  				new AsCountOrDistance("bottom_solid_layers"' "numberOfBottomLayers"' SettingsKey.layer_height)'  				new AsCountOrDistance("perimeters"' "numberOfPerimeters"' SettingsKey.nozzle_diameter)'  				new AsCountOrDistance("raft_extra_distance_around_part"' "raftExtraDistanceAroundPart"' SettingsKey.nozzle_diameter)'  				new AsCountOrDistance("skirts"' "numberOfSkirtLoops"' SettingsKey.nozzle_diameter)'  				new AsCountOrDistance("support_material_interface_layers"' "supportInterfaceLayers"' SettingsKey.layer_height)'  				new AsCountOrDistance("top_solid_layers"' "numberOfTopLayers"' SettingsKey.layer_height)'  				new AsCountOrDistance("brims"' "numberOfBrimLoops"' SettingsKey.nozzle_diameter)'  				new AsPercentOfReferenceOrDirect(SettingsKey.external_perimeter_extrusion_width' "outsidePerimeterExtrusionWidth"' SettingsKey.nozzle_diameter)'  				new AsPercentOfReferenceOrDirect("external_perimeter_speed"' "outsidePerimeterSpeed"' "perimeter_speed")'  				new AsPercentOfReferenceOrDirect(SettingsKey.first_layer_speed' "firstLayerSpeed"' "infill_speed")'  				new AsPercentOfReferenceOrDirect("raft_print_speed"' "raftPrintSpeed"' "infill_speed")'  				new AsPercentOfReferenceOrDirect("top_solid_infill_speed"' "topInfillSpeed"' "infill_speed")'  				new AsPercentOfReferenceOrDirect(SettingsKey.first_layer_extrusion_width' "firstLayerExtrusionWidth"' SettingsKey.nozzle_diameter)'  				new AsPercentOfReferenceOrDirect(SettingsKey.first_layer_height' "firstLayerThickness"' SettingsKey.layer_height)'  				new ExtruderOffsets("extruder_offset"' "extruderOffsets")'  				new GCodeForSlicer("before_toolchange_gcode"' "beforeToolchangeCode")'  				new GCodeForSlicer("end_gcode"' "endCode")'  				new GCodeForSlicer("toolchange_gcode"' "toolChangeCode")'  				new MapFirstValue("retract_before_travel"' "minimumTravelToCauseRetraction")'  				new MapFirstValue("retract_length"' "retractionOnTravel")'  				new MapFirstValue("retract_lift"' "retractionZHop")'  				new MapFirstValue("retract_restart_extra"' "unretractExtraExtrusion")'  				new MapFirstValue("retract_speed"' "retractionSpeed")'  				new MappedSetting("bridge_fan_speed"' "bridgeFanSpeedPercent")'  				new MappedSetting("bridge_speed"' "bridgeSpeed")'  				new MappedSetting("disable_fan_first_layers"' "firstLayerToAllowFan")'  				new MappedSetting("extrusion_multiplier"' "extrusionMultiplier")'  				new MappedSetting("fill_angle"' "infillStartingAngle")'  				new MappedSetting("infill_overlap_perimeter"' "infillExtendIntoPerimeter")'  				new MappedSetting("infill_speed"' "infillSpeed")'  				new MappedSetting("infill_type"' "infillType")'  				new GCodeForSlicer("layer_gcode"' "layerChangeCode")'  				new MappedSetting("max_fan_speed"' "fanSpeedMaxPercent")'  				new MappedSetting("min_extrusion_before_retract"' "minimumExtrusionBeforeRetraction")'  				new MappedSetting("min_fan_speed"' "fanSpeedMinPercent")'  				new MappedSetting("min_print_speed"' "minimumPrintingSpeed")'  				new MappedSetting("perimeter_speed"' "insidePerimetersSpeed")'  				new MappedSetting("raft_air_gap"' "raftAirGap")'  				new MappedSetting("raft_fan_speed_percent"' "raftFanSpeedPercent")'  				new MappedSetting("retract_length_tool_change"' "retractionOnExtruderSwitch")'  				new MappedSetting("retract_restart_extra_toolchange"' "unretractExtraOnExtruderSwitch")'  				new MappedSetting("skirt_distance"' "skirtDistanceFromObject")'  				new MappedSetting("slowdown_below_layer_time"' "minimumLayerTimeSeconds")'  				new MappedSetting("support_air_gap"' "supportAirGap")'  				new MappedSetting("support_material_infill_angle"' "supportInfillStartingAngle")'  				new MappedSetting("support_material_percent"' "supportPercent")'  				new MappedSetting("support_material_spacing"' "supportLineSpacing")'  				new MappedSetting("support_material_speed"' "supportMaterialSpeed")'  				new MappedSetting("support_material_xy_distance"' "supportXYDistanceFromObject")'  				new MappedSetting("support_type"' "supportType")'  				new MappedSetting("travel_speed"' "travelSpeed")'  				new MappedSetting("wipe_shield_distance"' "wipeShieldDistanceFromObject")'  				new MappedSetting("wipe_tower_size"' "wipeTowerSize")'  				new MappedSetting("z_offset"' "zOffset")'  				new MappedSetting(SettingsKey.bottom_clip_amount' "bottomClipAmount")'  				new MappedSetting(SettingsKey.filament_diameter' "filamentDiameter")'  				new MappedSetting(SettingsKey.layer_height' "layerThickness")'  				new MappedSetting(SettingsKey.nozzle_diameter' "extrusionWidth")'  				new MappedToBoolString("avoid_crossing_perimeters"' "avoidCrossingPerimeters")'  				new MappedToBoolString("create_raft"' "enableRaft")'  				new MappedToBoolString("external_perimeters_first"' "outsidePerimetersFirst")'  				new MappedToBoolString("output_only_first_layer"' "outputOnlyFirstLayer")'  				new MappedToBoolString("retract_when_changing_islands"' "retractWhenChangingIslands")'  				new MappedToBoolString("support_material"' "generateSupport")'  				new MappedToBoolString("support_material_create_internal_support"' "generateInternalSupport")'  				new MappedToBoolString("support_material_create_perimeter"' "generateSupportPerimeter")'  				new MappedToBoolString("wipe"' "wipeAfterRetraction")'  				new MappedToBoolString(SettingsKey.center_part_on_bed' "centerObjectInXy")'  				new MappedToBoolString(SettingsKey.expand_thin_walls' "expandThinWalls")'  				new MappedToBoolString(SettingsKey.merge_overlapping_lines' "MergeOverlappingLines")'  				new MappedToBoolString(SettingsKey.fill_thin_gaps' "fillThinGaps")'  				new MappedToBoolString(SettingsKey.spiral_vase' "continuousSpiralOuterPerimeter")'  				new MapPositionToPlaceObjectCenter(SettingsKey.print_center' "positionToPlaceObjectCenter")'  				new MapStartGCode("start_gcode"' "startCode"' true)'  				new ScaledSingleNumber("fill_density"' "infillPercent"' 100)'  				new ScaledSingleNumber(SettingsKey.perimeter_start_end_overlap' "perimeterStartEndOverlapRatio"' .01)'  				new SkirtLengthMapping("min_skirt_length"' "skirtMinLength")'  				new SupportExtrusionWidth("support_material_extrusion_width"'"supportExtrusionPercent")'  				new ValuePlusConstant("raft_extruder"' "raftExtruder"' -1)'  				new ValuePlusConstant("support_material_extruder"' "supportExtruder"' -1)'  				new ValuePlusConstant("support_material_interface_extruder"' "supportInterfaceExtruder"' -1)'  				new VisibleButNotMappedToEngine("extruder_count")'  				new VisibleButNotMappedToEngine("extruders_share_temperature")'  				new VisibleButNotMappedToEngine(SettingsKey.baby_step_z_offset)'  				new VisibleButNotMappedToEngine("g0")'  				new VisibleButNotMappedToEngine("solid_shell")'  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,EngineMappingCura,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SlicerMapping\EngineMappingCura.cs,EngineMappingCura,The following statement contains a magic number: curaSettings = new MappedSetting[]  			{  				new ScaledSingleNumber(SettingsKey.layer_height' "layerThickness"' 1000)'  				new AsPercentOfReferenceOrDirect(SettingsKey.first_layer_height' "initialLayerThickness"' SettingsKey.layer_height' 1000)'  				new ScaledSingleNumber(SettingsKey.filament_diameter' "filamentDiameter"' 1000)'  				//filamentFlow  				//layer0extrusionWidth  				new ScaledSingleNumber(SettingsKey.nozzle_diameter' "extrusionWidth"' 1000)'  				new AsCountOrDistance("perimeters"' "insetCount"' SettingsKey.nozzle_diameter)'  				new AsCountOrDistance("bottom_solid_layers"' "downSkinCount"' SettingsKey.layer_height)'  				new AsCountOrDistance("top_solid_layers"' "upSkinCount"' SettingsKey.layer_height)'  				new ScaledSingleNumber("skirt_distance"' "skirtDistance"' 1000)'  				new AsCountOrDistance("skirts"' "skirtLineCount"' SettingsKey.nozzle_diameter)'  				new SkirtLengthMapping("min_skirt_length"' "skirtMinLength")'    				new MappedSetting("infill_speed"' "printSpeed")'  				new MappedSetting("infill_speed"' "infillSpeed")'  				new MappedSetting("travel_speed"' "moveSpeed")'  				new AsPercentOfReferenceOrDirect(SettingsKey.first_layer_speed' "initialLayerSpeed"' "infill_speed")'    				new MappedSetting("perimeter_speed"' "insetXSpeed")'  				new AsPercentOfReferenceOrDirect("external_perimeter_speed"' "inset0Speed"' "perimeter_speed")'    				new ScaledSingleNumber(SettingsKey.bottom_clip_amount' "objectSink"' 1000)'    				new MappedSetting("max_fan_speed"' "fanSpeedMin")'  				new MappedSetting("min_fan_speed"' "fanSpeedMax")'    				new FanTranslator("disable_fan_first_layers"' "fanFullOnLayerNr")'  				new MappedSetting("cool_extruder_lift"' "coolHeadLift")'    				new ScaledSingleNumber("retract_length"' "retractionAmount"' 1000)'  				new MapFirstValue("retract_speed"' "retractionSpeed")'  				new ScaledSingleNumber("retract_before_travel"' "retractionMinimalDistance"' 1000)'  				new ScaledSingleNumber("min_extrusion_before_retract"' "minimalExtrusionBeforeRetraction"' 1000)'    				new ScaledSingleNumber("retract_lift"' "retractionZHop"' 1000)'    				new MappedSetting(SettingsKey.spiral_vase' "spiralizeMode")'  				new PrintCenterX(SettingsKey.print_center' "posx")'  				new PrintCenterY(SettingsKey.print_center' "posy")'    				// needs testing' not working  				new ScaledSingleNumber("support_material_spacing"' "supportLineDistance"' 1000)'  				new SupportMatterial("support_material"' "supportAngle")'  				new VisibleButNotMappedToEngine("support_material_threshold")'  				new MappedSetting("support_material_create_internal_support"' "supportEverywhere")'  				new ScaledSingleNumber("support_material_xy_distance"' "supportXYDistance"' 1000)'  				new ScaledSingleNumber("support_material_z_distance"' "supportZDistance"' 1000)'    				new SupportTypeMapping("support_type"' "supportType")'    				new MappedSetting("slowdown_below_layer_time"' "minimalLayerTime")'    				new InfillTranslator("fill_density"' "sparseInfillLineDistance")'    				new MapStartGCode("start_gcode"' "startCode"' false)'  				new MapEndGCode("end_gcode"' "endCode")'  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,EngineMappingCura,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SlicerMapping\EngineMappingCura.cs,EngineMappingCura,The following statement contains a magic number: curaSettings = new MappedSetting[]  			{  				new ScaledSingleNumber(SettingsKey.layer_height' "layerThickness"' 1000)'  				new AsPercentOfReferenceOrDirect(SettingsKey.first_layer_height' "initialLayerThickness"' SettingsKey.layer_height' 1000)'  				new ScaledSingleNumber(SettingsKey.filament_diameter' "filamentDiameter"' 1000)'  				//filamentFlow  				//layer0extrusionWidth  				new ScaledSingleNumber(SettingsKey.nozzle_diameter' "extrusionWidth"' 1000)'  				new AsCountOrDistance("perimeters"' "insetCount"' SettingsKey.nozzle_diameter)'  				new AsCountOrDistance("bottom_solid_layers"' "downSkinCount"' SettingsKey.layer_height)'  				new AsCountOrDistance("top_solid_layers"' "upSkinCount"' SettingsKey.layer_height)'  				new ScaledSingleNumber("skirt_distance"' "skirtDistance"' 1000)'  				new AsCountOrDistance("skirts"' "skirtLineCount"' SettingsKey.nozzle_diameter)'  				new SkirtLengthMapping("min_skirt_length"' "skirtMinLength")'    				new MappedSetting("infill_speed"' "printSpeed")'  				new MappedSetting("infill_speed"' "infillSpeed")'  				new MappedSetting("travel_speed"' "moveSpeed")'  				new AsPercentOfReferenceOrDirect(SettingsKey.first_layer_speed' "initialLayerSpeed"' "infill_speed")'    				new MappedSetting("perimeter_speed"' "insetXSpeed")'  				new AsPercentOfReferenceOrDirect("external_perimeter_speed"' "inset0Speed"' "perimeter_speed")'    				new ScaledSingleNumber(SettingsKey.bottom_clip_amount' "objectSink"' 1000)'    				new MappedSetting("max_fan_speed"' "fanSpeedMin")'  				new MappedSetting("min_fan_speed"' "fanSpeedMax")'    				new FanTranslator("disable_fan_first_layers"' "fanFullOnLayerNr")'  				new MappedSetting("cool_extruder_lift"' "coolHeadLift")'    				new ScaledSingleNumber("retract_length"' "retractionAmount"' 1000)'  				new MapFirstValue("retract_speed"' "retractionSpeed")'  				new ScaledSingleNumber("retract_before_travel"' "retractionMinimalDistance"' 1000)'  				new ScaledSingleNumber("min_extrusion_before_retract"' "minimalExtrusionBeforeRetraction"' 1000)'    				new ScaledSingleNumber("retract_lift"' "retractionZHop"' 1000)'    				new MappedSetting(SettingsKey.spiral_vase' "spiralizeMode")'  				new PrintCenterX(SettingsKey.print_center' "posx")'  				new PrintCenterY(SettingsKey.print_center' "posy")'    				// needs testing' not working  				new ScaledSingleNumber("support_material_spacing"' "supportLineDistance"' 1000)'  				new SupportMatterial("support_material"' "supportAngle")'  				new VisibleButNotMappedToEngine("support_material_threshold")'  				new MappedSetting("support_material_create_internal_support"' "supportEverywhere")'  				new ScaledSingleNumber("support_material_xy_distance"' "supportXYDistance"' 1000)'  				new ScaledSingleNumber("support_material_z_distance"' "supportZDistance"' 1000)'    				new SupportTypeMapping("support_type"' "supportType")'    				new MappedSetting("slowdown_below_layer_time"' "minimalLayerTime")'    				new InfillTranslator("fill_density"' "sparseInfillLineDistance")'    				new MapStartGCode("start_gcode"' "startCode"' false)'  				new MapEndGCode("end_gcode"' "endCode")'  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,EngineMappingCura,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SlicerMapping\EngineMappingCura.cs,EngineMappingCura,The following statement contains a magic number: curaSettings = new MappedSetting[]  			{  				new ScaledSingleNumber(SettingsKey.layer_height' "layerThickness"' 1000)'  				new AsPercentOfReferenceOrDirect(SettingsKey.first_layer_height' "initialLayerThickness"' SettingsKey.layer_height' 1000)'  				new ScaledSingleNumber(SettingsKey.filament_diameter' "filamentDiameter"' 1000)'  				//filamentFlow  				//layer0extrusionWidth  				new ScaledSingleNumber(SettingsKey.nozzle_diameter' "extrusionWidth"' 1000)'  				new AsCountOrDistance("perimeters"' "insetCount"' SettingsKey.nozzle_diameter)'  				new AsCountOrDistance("bottom_solid_layers"' "downSkinCount"' SettingsKey.layer_height)'  				new AsCountOrDistance("top_solid_layers"' "upSkinCount"' SettingsKey.layer_height)'  				new ScaledSingleNumber("skirt_distance"' "skirtDistance"' 1000)'  				new AsCountOrDistance("skirts"' "skirtLineCount"' SettingsKey.nozzle_diameter)'  				new SkirtLengthMapping("min_skirt_length"' "skirtMinLength")'    				new MappedSetting("infill_speed"' "printSpeed")'  				new MappedSetting("infill_speed"' "infillSpeed")'  				new MappedSetting("travel_speed"' "moveSpeed")'  				new AsPercentOfReferenceOrDirect(SettingsKey.first_layer_speed' "initialLayerSpeed"' "infill_speed")'    				new MappedSetting("perimeter_speed"' "insetXSpeed")'  				new AsPercentOfReferenceOrDirect("external_perimeter_speed"' "inset0Speed"' "perimeter_speed")'    				new ScaledSingleNumber(SettingsKey.bottom_clip_amount' "objectSink"' 1000)'    				new MappedSetting("max_fan_speed"' "fanSpeedMin")'  				new MappedSetting("min_fan_speed"' "fanSpeedMax")'    				new FanTranslator("disable_fan_first_layers"' "fanFullOnLayerNr")'  				new MappedSetting("cool_extruder_lift"' "coolHeadLift")'    				new ScaledSingleNumber("retract_length"' "retractionAmount"' 1000)'  				new MapFirstValue("retract_speed"' "retractionSpeed")'  				new ScaledSingleNumber("retract_before_travel"' "retractionMinimalDistance"' 1000)'  				new ScaledSingleNumber("min_extrusion_before_retract"' "minimalExtrusionBeforeRetraction"' 1000)'    				new ScaledSingleNumber("retract_lift"' "retractionZHop"' 1000)'    				new MappedSetting(SettingsKey.spiral_vase' "spiralizeMode")'  				new PrintCenterX(SettingsKey.print_center' "posx")'  				new PrintCenterY(SettingsKey.print_center' "posy")'    				// needs testing' not working  				new ScaledSingleNumber("support_material_spacing"' "supportLineDistance"' 1000)'  				new SupportMatterial("support_material"' "supportAngle")'  				new VisibleButNotMappedToEngine("support_material_threshold")'  				new MappedSetting("support_material_create_internal_support"' "supportEverywhere")'  				new ScaledSingleNumber("support_material_xy_distance"' "supportXYDistance"' 1000)'  				new ScaledSingleNumber("support_material_z_distance"' "supportZDistance"' 1000)'    				new SupportTypeMapping("support_type"' "supportType")'    				new MappedSetting("slowdown_below_layer_time"' "minimalLayerTime")'    				new InfillTranslator("fill_density"' "sparseInfillLineDistance")'    				new MapStartGCode("start_gcode"' "startCode"' false)'  				new MapEndGCode("end_gcode"' "endCode")'  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,EngineMappingCura,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SlicerMapping\EngineMappingCura.cs,EngineMappingCura,The following statement contains a magic number: curaSettings = new MappedSetting[]  			{  				new ScaledSingleNumber(SettingsKey.layer_height' "layerThickness"' 1000)'  				new AsPercentOfReferenceOrDirect(SettingsKey.first_layer_height' "initialLayerThickness"' SettingsKey.layer_height' 1000)'  				new ScaledSingleNumber(SettingsKey.filament_diameter' "filamentDiameter"' 1000)'  				//filamentFlow  				//layer0extrusionWidth  				new ScaledSingleNumber(SettingsKey.nozzle_diameter' "extrusionWidth"' 1000)'  				new AsCountOrDistance("perimeters"' "insetCount"' SettingsKey.nozzle_diameter)'  				new AsCountOrDistance("bottom_solid_layers"' "downSkinCount"' SettingsKey.layer_height)'  				new AsCountOrDistance("top_solid_layers"' "upSkinCount"' SettingsKey.layer_height)'  				new ScaledSingleNumber("skirt_distance"' "skirtDistance"' 1000)'  				new AsCountOrDistance("skirts"' "skirtLineCount"' SettingsKey.nozzle_diameter)'  				new SkirtLengthMapping("min_skirt_length"' "skirtMinLength")'    				new MappedSetting("infill_speed"' "printSpeed")'  				new MappedSetting("infill_speed"' "infillSpeed")'  				new MappedSetting("travel_speed"' "moveSpeed")'  				new AsPercentOfReferenceOrDirect(SettingsKey.first_layer_speed' "initialLayerSpeed"' "infill_speed")'    				new MappedSetting("perimeter_speed"' "insetXSpeed")'  				new AsPercentOfReferenceOrDirect("external_perimeter_speed"' "inset0Speed"' "perimeter_speed")'    				new ScaledSingleNumber(SettingsKey.bottom_clip_amount' "objectSink"' 1000)'    				new MappedSetting("max_fan_speed"' "fanSpeedMin")'  				new MappedSetting("min_fan_speed"' "fanSpeedMax")'    				new FanTranslator("disable_fan_first_layers"' "fanFullOnLayerNr")'  				new MappedSetting("cool_extruder_lift"' "coolHeadLift")'    				new ScaledSingleNumber("retract_length"' "retractionAmount"' 1000)'  				new MapFirstValue("retract_speed"' "retractionSpeed")'  				new ScaledSingleNumber("retract_before_travel"' "retractionMinimalDistance"' 1000)'  				new ScaledSingleNumber("min_extrusion_before_retract"' "minimalExtrusionBeforeRetraction"' 1000)'    				new ScaledSingleNumber("retract_lift"' "retractionZHop"' 1000)'    				new MappedSetting(SettingsKey.spiral_vase' "spiralizeMode")'  				new PrintCenterX(SettingsKey.print_center' "posx")'  				new PrintCenterY(SettingsKey.print_center' "posy")'    				// needs testing' not working  				new ScaledSingleNumber("support_material_spacing"' "supportLineDistance"' 1000)'  				new SupportMatterial("support_material"' "supportAngle")'  				new VisibleButNotMappedToEngine("support_material_threshold")'  				new MappedSetting("support_material_create_internal_support"' "supportEverywhere")'  				new ScaledSingleNumber("support_material_xy_distance"' "supportXYDistance"' 1000)'  				new ScaledSingleNumber("support_material_z_distance"' "supportZDistance"' 1000)'    				new SupportTypeMapping("support_type"' "supportType")'    				new MappedSetting("slowdown_below_layer_time"' "minimalLayerTime")'    				new InfillTranslator("fill_density"' "sparseInfillLineDistance")'    				new MapStartGCode("start_gcode"' "startCode"' false)'  				new MapEndGCode("end_gcode"' "endCode")'  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,EngineMappingCura,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SlicerMapping\EngineMappingCura.cs,EngineMappingCura,The following statement contains a magic number: curaSettings = new MappedSetting[]  			{  				new ScaledSingleNumber(SettingsKey.layer_height' "layerThickness"' 1000)'  				new AsPercentOfReferenceOrDirect(SettingsKey.first_layer_height' "initialLayerThickness"' SettingsKey.layer_height' 1000)'  				new ScaledSingleNumber(SettingsKey.filament_diameter' "filamentDiameter"' 1000)'  				//filamentFlow  				//layer0extrusionWidth  				new ScaledSingleNumber(SettingsKey.nozzle_diameter' "extrusionWidth"' 1000)'  				new AsCountOrDistance("perimeters"' "insetCount"' SettingsKey.nozzle_diameter)'  				new AsCountOrDistance("bottom_solid_layers"' "downSkinCount"' SettingsKey.layer_height)'  				new AsCountOrDistance("top_solid_layers"' "upSkinCount"' SettingsKey.layer_height)'  				new ScaledSingleNumber("skirt_distance"' "skirtDistance"' 1000)'  				new AsCountOrDistance("skirts"' "skirtLineCount"' SettingsKey.nozzle_diameter)'  				new SkirtLengthMapping("min_skirt_length"' "skirtMinLength")'    				new MappedSetting("infill_speed"' "printSpeed")'  				new MappedSetting("infill_speed"' "infillSpeed")'  				new MappedSetting("travel_speed"' "moveSpeed")'  				new AsPercentOfReferenceOrDirect(SettingsKey.first_layer_speed' "initialLayerSpeed"' "infill_speed")'    				new MappedSetting("perimeter_speed"' "insetXSpeed")'  				new AsPercentOfReferenceOrDirect("external_perimeter_speed"' "inset0Speed"' "perimeter_speed")'    				new ScaledSingleNumber(SettingsKey.bottom_clip_amount' "objectSink"' 1000)'    				new MappedSetting("max_fan_speed"' "fanSpeedMin")'  				new MappedSetting("min_fan_speed"' "fanSpeedMax")'    				new FanTranslator("disable_fan_first_layers"' "fanFullOnLayerNr")'  				new MappedSetting("cool_extruder_lift"' "coolHeadLift")'    				new ScaledSingleNumber("retract_length"' "retractionAmount"' 1000)'  				new MapFirstValue("retract_speed"' "retractionSpeed")'  				new ScaledSingleNumber("retract_before_travel"' "retractionMinimalDistance"' 1000)'  				new ScaledSingleNumber("min_extrusion_before_retract"' "minimalExtrusionBeforeRetraction"' 1000)'    				new ScaledSingleNumber("retract_lift"' "retractionZHop"' 1000)'    				new MappedSetting(SettingsKey.spiral_vase' "spiralizeMode")'  				new PrintCenterX(SettingsKey.print_center' "posx")'  				new PrintCenterY(SettingsKey.print_center' "posy")'    				// needs testing' not working  				new ScaledSingleNumber("support_material_spacing"' "supportLineDistance"' 1000)'  				new SupportMatterial("support_material"' "supportAngle")'  				new VisibleButNotMappedToEngine("support_material_threshold")'  				new MappedSetting("support_material_create_internal_support"' "supportEverywhere")'  				new ScaledSingleNumber("support_material_xy_distance"' "supportXYDistance"' 1000)'  				new ScaledSingleNumber("support_material_z_distance"' "supportZDistance"' 1000)'    				new SupportTypeMapping("support_type"' "supportType")'    				new MappedSetting("slowdown_below_layer_time"' "minimalLayerTime")'    				new InfillTranslator("fill_density"' "sparseInfillLineDistance")'    				new MapStartGCode("start_gcode"' "startCode"' false)'  				new MapEndGCode("end_gcode"' "endCode")'  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,EngineMappingCura,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SlicerMapping\EngineMappingCura.cs,EngineMappingCura,The following statement contains a magic number: curaSettings = new MappedSetting[]  			{  				new ScaledSingleNumber(SettingsKey.layer_height' "layerThickness"' 1000)'  				new AsPercentOfReferenceOrDirect(SettingsKey.first_layer_height' "initialLayerThickness"' SettingsKey.layer_height' 1000)'  				new ScaledSingleNumber(SettingsKey.filament_diameter' "filamentDiameter"' 1000)'  				//filamentFlow  				//layer0extrusionWidth  				new ScaledSingleNumber(SettingsKey.nozzle_diameter' "extrusionWidth"' 1000)'  				new AsCountOrDistance("perimeters"' "insetCount"' SettingsKey.nozzle_diameter)'  				new AsCountOrDistance("bottom_solid_layers"' "downSkinCount"' SettingsKey.layer_height)'  				new AsCountOrDistance("top_solid_layers"' "upSkinCount"' SettingsKey.layer_height)'  				new ScaledSingleNumber("skirt_distance"' "skirtDistance"' 1000)'  				new AsCountOrDistance("skirts"' "skirtLineCount"' SettingsKey.nozzle_diameter)'  				new SkirtLengthMapping("min_skirt_length"' "skirtMinLength")'    				new MappedSetting("infill_speed"' "printSpeed")'  				new MappedSetting("infill_speed"' "infillSpeed")'  				new MappedSetting("travel_speed"' "moveSpeed")'  				new AsPercentOfReferenceOrDirect(SettingsKey.first_layer_speed' "initialLayerSpeed"' "infill_speed")'    				new MappedSetting("perimeter_speed"' "insetXSpeed")'  				new AsPercentOfReferenceOrDirect("external_perimeter_speed"' "inset0Speed"' "perimeter_speed")'    				new ScaledSingleNumber(SettingsKey.bottom_clip_amount' "objectSink"' 1000)'    				new MappedSetting("max_fan_speed"' "fanSpeedMin")'  				new MappedSetting("min_fan_speed"' "fanSpeedMax")'    				new FanTranslator("disable_fan_first_layers"' "fanFullOnLayerNr")'  				new MappedSetting("cool_extruder_lift"' "coolHeadLift")'    				new ScaledSingleNumber("retract_length"' "retractionAmount"' 1000)'  				new MapFirstValue("retract_speed"' "retractionSpeed")'  				new ScaledSingleNumber("retract_before_travel"' "retractionMinimalDistance"' 1000)'  				new ScaledSingleNumber("min_extrusion_before_retract"' "minimalExtrusionBeforeRetraction"' 1000)'    				new ScaledSingleNumber("retract_lift"' "retractionZHop"' 1000)'    				new MappedSetting(SettingsKey.spiral_vase' "spiralizeMode")'  				new PrintCenterX(SettingsKey.print_center' "posx")'  				new PrintCenterY(SettingsKey.print_center' "posy")'    				// needs testing' not working  				new ScaledSingleNumber("support_material_spacing"' "supportLineDistance"' 1000)'  				new SupportMatterial("support_material"' "supportAngle")'  				new VisibleButNotMappedToEngine("support_material_threshold")'  				new MappedSetting("support_material_create_internal_support"' "supportEverywhere")'  				new ScaledSingleNumber("support_material_xy_distance"' "supportXYDistance"' 1000)'  				new ScaledSingleNumber("support_material_z_distance"' "supportZDistance"' 1000)'    				new SupportTypeMapping("support_type"' "supportType")'    				new MappedSetting("slowdown_below_layer_time"' "minimalLayerTime")'    				new InfillTranslator("fill_density"' "sparseInfillLineDistance")'    				new MapStartGCode("start_gcode"' "startCode"' false)'  				new MapEndGCode("end_gcode"' "endCode")'  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,EngineMappingCura,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SlicerMapping\EngineMappingCura.cs,EngineMappingCura,The following statement contains a magic number: curaSettings = new MappedSetting[]  			{  				new ScaledSingleNumber(SettingsKey.layer_height' "layerThickness"' 1000)'  				new AsPercentOfReferenceOrDirect(SettingsKey.first_layer_height' "initialLayerThickness"' SettingsKey.layer_height' 1000)'  				new ScaledSingleNumber(SettingsKey.filament_diameter' "filamentDiameter"' 1000)'  				//filamentFlow  				//layer0extrusionWidth  				new ScaledSingleNumber(SettingsKey.nozzle_diameter' "extrusionWidth"' 1000)'  				new AsCountOrDistance("perimeters"' "insetCount"' SettingsKey.nozzle_diameter)'  				new AsCountOrDistance("bottom_solid_layers"' "downSkinCount"' SettingsKey.layer_height)'  				new AsCountOrDistance("top_solid_layers"' "upSkinCount"' SettingsKey.layer_height)'  				new ScaledSingleNumber("skirt_distance"' "skirtDistance"' 1000)'  				new AsCountOrDistance("skirts"' "skirtLineCount"' SettingsKey.nozzle_diameter)'  				new SkirtLengthMapping("min_skirt_length"' "skirtMinLength")'    				new MappedSetting("infill_speed"' "printSpeed")'  				new MappedSetting("infill_speed"' "infillSpeed")'  				new MappedSetting("travel_speed"' "moveSpeed")'  				new AsPercentOfReferenceOrDirect(SettingsKey.first_layer_speed' "initialLayerSpeed"' "infill_speed")'    				new MappedSetting("perimeter_speed"' "insetXSpeed")'  				new AsPercentOfReferenceOrDirect("external_perimeter_speed"' "inset0Speed"' "perimeter_speed")'    				new ScaledSingleNumber(SettingsKey.bottom_clip_amount' "objectSink"' 1000)'    				new MappedSetting("max_fan_speed"' "fanSpeedMin")'  				new MappedSetting("min_fan_speed"' "fanSpeedMax")'    				new FanTranslator("disable_fan_first_layers"' "fanFullOnLayerNr")'  				new MappedSetting("cool_extruder_lift"' "coolHeadLift")'    				new ScaledSingleNumber("retract_length"' "retractionAmount"' 1000)'  				new MapFirstValue("retract_speed"' "retractionSpeed")'  				new ScaledSingleNumber("retract_before_travel"' "retractionMinimalDistance"' 1000)'  				new ScaledSingleNumber("min_extrusion_before_retract"' "minimalExtrusionBeforeRetraction"' 1000)'    				new ScaledSingleNumber("retract_lift"' "retractionZHop"' 1000)'    				new MappedSetting(SettingsKey.spiral_vase' "spiralizeMode")'  				new PrintCenterX(SettingsKey.print_center' "posx")'  				new PrintCenterY(SettingsKey.print_center' "posy")'    				// needs testing' not working  				new ScaledSingleNumber("support_material_spacing"' "supportLineDistance"' 1000)'  				new SupportMatterial("support_material"' "supportAngle")'  				new VisibleButNotMappedToEngine("support_material_threshold")'  				new MappedSetting("support_material_create_internal_support"' "supportEverywhere")'  				new ScaledSingleNumber("support_material_xy_distance"' "supportXYDistance"' 1000)'  				new ScaledSingleNumber("support_material_z_distance"' "supportZDistance"' 1000)'    				new SupportTypeMapping("support_type"' "supportType")'    				new MappedSetting("slowdown_below_layer_time"' "minimalLayerTime")'    				new InfillTranslator("fill_density"' "sparseInfillLineDistance")'    				new MapStartGCode("start_gcode"' "startCode"' false)'  				new MapEndGCode("end_gcode"' "endCode")'  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,EngineMappingCura,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SlicerMapping\EngineMappingCura.cs,EngineMappingCura,The following statement contains a magic number: curaSettings = new MappedSetting[]  			{  				new ScaledSingleNumber(SettingsKey.layer_height' "layerThickness"' 1000)'  				new AsPercentOfReferenceOrDirect(SettingsKey.first_layer_height' "initialLayerThickness"' SettingsKey.layer_height' 1000)'  				new ScaledSingleNumber(SettingsKey.filament_diameter' "filamentDiameter"' 1000)'  				//filamentFlow  				//layer0extrusionWidth  				new ScaledSingleNumber(SettingsKey.nozzle_diameter' "extrusionWidth"' 1000)'  				new AsCountOrDistance("perimeters"' "insetCount"' SettingsKey.nozzle_diameter)'  				new AsCountOrDistance("bottom_solid_layers"' "downSkinCount"' SettingsKey.layer_height)'  				new AsCountOrDistance("top_solid_layers"' "upSkinCount"' SettingsKey.layer_height)'  				new ScaledSingleNumber("skirt_distance"' "skirtDistance"' 1000)'  				new AsCountOrDistance("skirts"' "skirtLineCount"' SettingsKey.nozzle_diameter)'  				new SkirtLengthMapping("min_skirt_length"' "skirtMinLength")'    				new MappedSetting("infill_speed"' "printSpeed")'  				new MappedSetting("infill_speed"' "infillSpeed")'  				new MappedSetting("travel_speed"' "moveSpeed")'  				new AsPercentOfReferenceOrDirect(SettingsKey.first_layer_speed' "initialLayerSpeed"' "infill_speed")'    				new MappedSetting("perimeter_speed"' "insetXSpeed")'  				new AsPercentOfReferenceOrDirect("external_perimeter_speed"' "inset0Speed"' "perimeter_speed")'    				new ScaledSingleNumber(SettingsKey.bottom_clip_amount' "objectSink"' 1000)'    				new MappedSetting("max_fan_speed"' "fanSpeedMin")'  				new MappedSetting("min_fan_speed"' "fanSpeedMax")'    				new FanTranslator("disable_fan_first_layers"' "fanFullOnLayerNr")'  				new MappedSetting("cool_extruder_lift"' "coolHeadLift")'    				new ScaledSingleNumber("retract_length"' "retractionAmount"' 1000)'  				new MapFirstValue("retract_speed"' "retractionSpeed")'  				new ScaledSingleNumber("retract_before_travel"' "retractionMinimalDistance"' 1000)'  				new ScaledSingleNumber("min_extrusion_before_retract"' "minimalExtrusionBeforeRetraction"' 1000)'    				new ScaledSingleNumber("retract_lift"' "retractionZHop"' 1000)'    				new MappedSetting(SettingsKey.spiral_vase' "spiralizeMode")'  				new PrintCenterX(SettingsKey.print_center' "posx")'  				new PrintCenterY(SettingsKey.print_center' "posy")'    				// needs testing' not working  				new ScaledSingleNumber("support_material_spacing"' "supportLineDistance"' 1000)'  				new SupportMatterial("support_material"' "supportAngle")'  				new VisibleButNotMappedToEngine("support_material_threshold")'  				new MappedSetting("support_material_create_internal_support"' "supportEverywhere")'  				new ScaledSingleNumber("support_material_xy_distance"' "supportXYDistance"' 1000)'  				new ScaledSingleNumber("support_material_z_distance"' "supportZDistance"' 1000)'    				new SupportTypeMapping("support_type"' "supportType")'    				new MappedSetting("slowdown_below_layer_time"' "minimalLayerTime")'    				new InfillTranslator("fill_density"' "sparseInfillLineDistance")'    				new MapStartGCode("start_gcode"' "startCode"' false)'  				new MapEndGCode("end_gcode"' "endCode")'  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,EngineMappingCura,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SlicerMapping\EngineMappingCura.cs,EngineMappingCura,The following statement contains a magic number: curaSettings = new MappedSetting[]  			{  				new ScaledSingleNumber(SettingsKey.layer_height' "layerThickness"' 1000)'  				new AsPercentOfReferenceOrDirect(SettingsKey.first_layer_height' "initialLayerThickness"' SettingsKey.layer_height' 1000)'  				new ScaledSingleNumber(SettingsKey.filament_diameter' "filamentDiameter"' 1000)'  				//filamentFlow  				//layer0extrusionWidth  				new ScaledSingleNumber(SettingsKey.nozzle_diameter' "extrusionWidth"' 1000)'  				new AsCountOrDistance("perimeters"' "insetCount"' SettingsKey.nozzle_diameter)'  				new AsCountOrDistance("bottom_solid_layers"' "downSkinCount"' SettingsKey.layer_height)'  				new AsCountOrDistance("top_solid_layers"' "upSkinCount"' SettingsKey.layer_height)'  				new ScaledSingleNumber("skirt_distance"' "skirtDistance"' 1000)'  				new AsCountOrDistance("skirts"' "skirtLineCount"' SettingsKey.nozzle_diameter)'  				new SkirtLengthMapping("min_skirt_length"' "skirtMinLength")'    				new MappedSetting("infill_speed"' "printSpeed")'  				new MappedSetting("infill_speed"' "infillSpeed")'  				new MappedSetting("travel_speed"' "moveSpeed")'  				new AsPercentOfReferenceOrDirect(SettingsKey.first_layer_speed' "initialLayerSpeed"' "infill_speed")'    				new MappedSetting("perimeter_speed"' "insetXSpeed")'  				new AsPercentOfReferenceOrDirect("external_perimeter_speed"' "inset0Speed"' "perimeter_speed")'    				new ScaledSingleNumber(SettingsKey.bottom_clip_amount' "objectSink"' 1000)'    				new MappedSetting("max_fan_speed"' "fanSpeedMin")'  				new MappedSetting("min_fan_speed"' "fanSpeedMax")'    				new FanTranslator("disable_fan_first_layers"' "fanFullOnLayerNr")'  				new MappedSetting("cool_extruder_lift"' "coolHeadLift")'    				new ScaledSingleNumber("retract_length"' "retractionAmount"' 1000)'  				new MapFirstValue("retract_speed"' "retractionSpeed")'  				new ScaledSingleNumber("retract_before_travel"' "retractionMinimalDistance"' 1000)'  				new ScaledSingleNumber("min_extrusion_before_retract"' "minimalExtrusionBeforeRetraction"' 1000)'    				new ScaledSingleNumber("retract_lift"' "retractionZHop"' 1000)'    				new MappedSetting(SettingsKey.spiral_vase' "spiralizeMode")'  				new PrintCenterX(SettingsKey.print_center' "posx")'  				new PrintCenterY(SettingsKey.print_center' "posy")'    				// needs testing' not working  				new ScaledSingleNumber("support_material_spacing"' "supportLineDistance"' 1000)'  				new SupportMatterial("support_material"' "supportAngle")'  				new VisibleButNotMappedToEngine("support_material_threshold")'  				new MappedSetting("support_material_create_internal_support"' "supportEverywhere")'  				new ScaledSingleNumber("support_material_xy_distance"' "supportXYDistance"' 1000)'  				new ScaledSingleNumber("support_material_z_distance"' "supportZDistance"' 1000)'    				new SupportTypeMapping("support_type"' "supportType")'    				new MappedSetting("slowdown_below_layer_time"' "minimalLayerTime")'    				new InfillTranslator("fill_density"' "sparseInfillLineDistance")'    				new MapStartGCode("start_gcode"' "startCode"' false)'  				new MapEndGCode("end_gcode"' "endCode")'  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,EngineMappingCura,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SlicerMapping\EngineMappingCura.cs,EngineMappingCura,The following statement contains a magic number: curaSettings = new MappedSetting[]  			{  				new ScaledSingleNumber(SettingsKey.layer_height' "layerThickness"' 1000)'  				new AsPercentOfReferenceOrDirect(SettingsKey.first_layer_height' "initialLayerThickness"' SettingsKey.layer_height' 1000)'  				new ScaledSingleNumber(SettingsKey.filament_diameter' "filamentDiameter"' 1000)'  				//filamentFlow  				//layer0extrusionWidth  				new ScaledSingleNumber(SettingsKey.nozzle_diameter' "extrusionWidth"' 1000)'  				new AsCountOrDistance("perimeters"' "insetCount"' SettingsKey.nozzle_diameter)'  				new AsCountOrDistance("bottom_solid_layers"' "downSkinCount"' SettingsKey.layer_height)'  				new AsCountOrDistance("top_solid_layers"' "upSkinCount"' SettingsKey.layer_height)'  				new ScaledSingleNumber("skirt_distance"' "skirtDistance"' 1000)'  				new AsCountOrDistance("skirts"' "skirtLineCount"' SettingsKey.nozzle_diameter)'  				new SkirtLengthMapping("min_skirt_length"' "skirtMinLength")'    				new MappedSetting("infill_speed"' "printSpeed")'  				new MappedSetting("infill_speed"' "infillSpeed")'  				new MappedSetting("travel_speed"' "moveSpeed")'  				new AsPercentOfReferenceOrDirect(SettingsKey.first_layer_speed' "initialLayerSpeed"' "infill_speed")'    				new MappedSetting("perimeter_speed"' "insetXSpeed")'  				new AsPercentOfReferenceOrDirect("external_perimeter_speed"' "inset0Speed"' "perimeter_speed")'    				new ScaledSingleNumber(SettingsKey.bottom_clip_amount' "objectSink"' 1000)'    				new MappedSetting("max_fan_speed"' "fanSpeedMin")'  				new MappedSetting("min_fan_speed"' "fanSpeedMax")'    				new FanTranslator("disable_fan_first_layers"' "fanFullOnLayerNr")'  				new MappedSetting("cool_extruder_lift"' "coolHeadLift")'    				new ScaledSingleNumber("retract_length"' "retractionAmount"' 1000)'  				new MapFirstValue("retract_speed"' "retractionSpeed")'  				new ScaledSingleNumber("retract_before_travel"' "retractionMinimalDistance"' 1000)'  				new ScaledSingleNumber("min_extrusion_before_retract"' "minimalExtrusionBeforeRetraction"' 1000)'    				new ScaledSingleNumber("retract_lift"' "retractionZHop"' 1000)'    				new MappedSetting(SettingsKey.spiral_vase' "spiralizeMode")'  				new PrintCenterX(SettingsKey.print_center' "posx")'  				new PrintCenterY(SettingsKey.print_center' "posy")'    				// needs testing' not working  				new ScaledSingleNumber("support_material_spacing"' "supportLineDistance"' 1000)'  				new SupportMatterial("support_material"' "supportAngle")'  				new VisibleButNotMappedToEngine("support_material_threshold")'  				new MappedSetting("support_material_create_internal_support"' "supportEverywhere")'  				new ScaledSingleNumber("support_material_xy_distance"' "supportXYDistance"' 1000)'  				new ScaledSingleNumber("support_material_z_distance"' "supportZDistance"' 1000)'    				new SupportTypeMapping("support_type"' "supportType")'    				new MappedSetting("slowdown_below_layer_time"' "minimalLayerTime")'    				new InfillTranslator("fill_density"' "sparseInfillLineDistance")'    				new MapStartGCode("start_gcode"' "startCode"' false)'  				new MapEndGCode("end_gcode"' "endCode")'  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,EngineMappingCura,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SlicerMapping\EngineMappingCura.cs,EngineMappingCura,The following statement contains a magic number: curaSettings = new MappedSetting[]  			{  				new ScaledSingleNumber(SettingsKey.layer_height' "layerThickness"' 1000)'  				new AsPercentOfReferenceOrDirect(SettingsKey.first_layer_height' "initialLayerThickness"' SettingsKey.layer_height' 1000)'  				new ScaledSingleNumber(SettingsKey.filament_diameter' "filamentDiameter"' 1000)'  				//filamentFlow  				//layer0extrusionWidth  				new ScaledSingleNumber(SettingsKey.nozzle_diameter' "extrusionWidth"' 1000)'  				new AsCountOrDistance("perimeters"' "insetCount"' SettingsKey.nozzle_diameter)'  				new AsCountOrDistance("bottom_solid_layers"' "downSkinCount"' SettingsKey.layer_height)'  				new AsCountOrDistance("top_solid_layers"' "upSkinCount"' SettingsKey.layer_height)'  				new ScaledSingleNumber("skirt_distance"' "skirtDistance"' 1000)'  				new AsCountOrDistance("skirts"' "skirtLineCount"' SettingsKey.nozzle_diameter)'  				new SkirtLengthMapping("min_skirt_length"' "skirtMinLength")'    				new MappedSetting("infill_speed"' "printSpeed")'  				new MappedSetting("infill_speed"' "infillSpeed")'  				new MappedSetting("travel_speed"' "moveSpeed")'  				new AsPercentOfReferenceOrDirect(SettingsKey.first_layer_speed' "initialLayerSpeed"' "infill_speed")'    				new MappedSetting("perimeter_speed"' "insetXSpeed")'  				new AsPercentOfReferenceOrDirect("external_perimeter_speed"' "inset0Speed"' "perimeter_speed")'    				new ScaledSingleNumber(SettingsKey.bottom_clip_amount' "objectSink"' 1000)'    				new MappedSetting("max_fan_speed"' "fanSpeedMin")'  				new MappedSetting("min_fan_speed"' "fanSpeedMax")'    				new FanTranslator("disable_fan_first_layers"' "fanFullOnLayerNr")'  				new MappedSetting("cool_extruder_lift"' "coolHeadLift")'    				new ScaledSingleNumber("retract_length"' "retractionAmount"' 1000)'  				new MapFirstValue("retract_speed"' "retractionSpeed")'  				new ScaledSingleNumber("retract_before_travel"' "retractionMinimalDistance"' 1000)'  				new ScaledSingleNumber("min_extrusion_before_retract"' "minimalExtrusionBeforeRetraction"' 1000)'    				new ScaledSingleNumber("retract_lift"' "retractionZHop"' 1000)'    				new MappedSetting(SettingsKey.spiral_vase' "spiralizeMode")'  				new PrintCenterX(SettingsKey.print_center' "posx")'  				new PrintCenterY(SettingsKey.print_center' "posy")'    				// needs testing' not working  				new ScaledSingleNumber("support_material_spacing"' "supportLineDistance"' 1000)'  				new SupportMatterial("support_material"' "supportAngle")'  				new VisibleButNotMappedToEngine("support_material_threshold")'  				new MappedSetting("support_material_create_internal_support"' "supportEverywhere")'  				new ScaledSingleNumber("support_material_xy_distance"' "supportXYDistance"' 1000)'  				new ScaledSingleNumber("support_material_z_distance"' "supportZDistance"' 1000)'    				new SupportTypeMapping("support_type"' "supportType")'    				new MappedSetting("slowdown_below_layer_time"' "minimalLayerTime")'    				new InfillTranslator("fill_density"' "sparseInfillLineDistance")'    				new MapStartGCode("start_gcode"' "startCode"' false)'  				new MapEndGCode("end_gcode"' "endCode")'  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,EngineMappingCura,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SlicerMapping\EngineMappingCura.cs,EngineMappingCura,The following statement contains a magic number: curaSettings = new MappedSetting[]  			{  				new ScaledSingleNumber(SettingsKey.layer_height' "layerThickness"' 1000)'  				new AsPercentOfReferenceOrDirect(SettingsKey.first_layer_height' "initialLayerThickness"' SettingsKey.layer_height' 1000)'  				new ScaledSingleNumber(SettingsKey.filament_diameter' "filamentDiameter"' 1000)'  				//filamentFlow  				//layer0extrusionWidth  				new ScaledSingleNumber(SettingsKey.nozzle_diameter' "extrusionWidth"' 1000)'  				new AsCountOrDistance("perimeters"' "insetCount"' SettingsKey.nozzle_diameter)'  				new AsCountOrDistance("bottom_solid_layers"' "downSkinCount"' SettingsKey.layer_height)'  				new AsCountOrDistance("top_solid_layers"' "upSkinCount"' SettingsKey.layer_height)'  				new ScaledSingleNumber("skirt_distance"' "skirtDistance"' 1000)'  				new AsCountOrDistance("skirts"' "skirtLineCount"' SettingsKey.nozzle_diameter)'  				new SkirtLengthMapping("min_skirt_length"' "skirtMinLength")'    				new MappedSetting("infill_speed"' "printSpeed")'  				new MappedSetting("infill_speed"' "infillSpeed")'  				new MappedSetting("travel_speed"' "moveSpeed")'  				new AsPercentOfReferenceOrDirect(SettingsKey.first_layer_speed' "initialLayerSpeed"' "infill_speed")'    				new MappedSetting("perimeter_speed"' "insetXSpeed")'  				new AsPercentOfReferenceOrDirect("external_perimeter_speed"' "inset0Speed"' "perimeter_speed")'    				new ScaledSingleNumber(SettingsKey.bottom_clip_amount' "objectSink"' 1000)'    				new MappedSetting("max_fan_speed"' "fanSpeedMin")'  				new MappedSetting("min_fan_speed"' "fanSpeedMax")'    				new FanTranslator("disable_fan_first_layers"' "fanFullOnLayerNr")'  				new MappedSetting("cool_extruder_lift"' "coolHeadLift")'    				new ScaledSingleNumber("retract_length"' "retractionAmount"' 1000)'  				new MapFirstValue("retract_speed"' "retractionSpeed")'  				new ScaledSingleNumber("retract_before_travel"' "retractionMinimalDistance"' 1000)'  				new ScaledSingleNumber("min_extrusion_before_retract"' "minimalExtrusionBeforeRetraction"' 1000)'    				new ScaledSingleNumber("retract_lift"' "retractionZHop"' 1000)'    				new MappedSetting(SettingsKey.spiral_vase' "spiralizeMode")'  				new PrintCenterX(SettingsKey.print_center' "posx")'  				new PrintCenterY(SettingsKey.print_center' "posy")'    				// needs testing' not working  				new ScaledSingleNumber("support_material_spacing"' "supportLineDistance"' 1000)'  				new SupportMatterial("support_material"' "supportAngle")'  				new VisibleButNotMappedToEngine("support_material_threshold")'  				new MappedSetting("support_material_create_internal_support"' "supportEverywhere")'  				new ScaledSingleNumber("support_material_xy_distance"' "supportXYDistance"' 1000)'  				new ScaledSingleNumber("support_material_z_distance"' "supportZDistance"' 1000)'    				new SupportTypeMapping("support_type"' "supportType")'    				new MappedSetting("slowdown_below_layer_time"' "minimalLayerTime")'    				new InfillTranslator("fill_density"' "sparseInfillLineDistance")'    				new MapStartGCode("start_gcode"' "startCode"' false)'  				new MapEndGCode("end_gcode"' "endCode")'  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,EngineMappingCura,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SlicerMapping\EngineMappingCura.cs,EngineMappingCura,The following statement contains a magic number: curaSettings = new MappedSetting[]  			{  				new ScaledSingleNumber(SettingsKey.layer_height' "layerThickness"' 1000)'  				new AsPercentOfReferenceOrDirect(SettingsKey.first_layer_height' "initialLayerThickness"' SettingsKey.layer_height' 1000)'  				new ScaledSingleNumber(SettingsKey.filament_diameter' "filamentDiameter"' 1000)'  				//filamentFlow  				//layer0extrusionWidth  				new ScaledSingleNumber(SettingsKey.nozzle_diameter' "extrusionWidth"' 1000)'  				new AsCountOrDistance("perimeters"' "insetCount"' SettingsKey.nozzle_diameter)'  				new AsCountOrDistance("bottom_solid_layers"' "downSkinCount"' SettingsKey.layer_height)'  				new AsCountOrDistance("top_solid_layers"' "upSkinCount"' SettingsKey.layer_height)'  				new ScaledSingleNumber("skirt_distance"' "skirtDistance"' 1000)'  				new AsCountOrDistance("skirts"' "skirtLineCount"' SettingsKey.nozzle_diameter)'  				new SkirtLengthMapping("min_skirt_length"' "skirtMinLength")'    				new MappedSetting("infill_speed"' "printSpeed")'  				new MappedSetting("infill_speed"' "infillSpeed")'  				new MappedSetting("travel_speed"' "moveSpeed")'  				new AsPercentOfReferenceOrDirect(SettingsKey.first_layer_speed' "initialLayerSpeed"' "infill_speed")'    				new MappedSetting("perimeter_speed"' "insetXSpeed")'  				new AsPercentOfReferenceOrDirect("external_perimeter_speed"' "inset0Speed"' "perimeter_speed")'    				new ScaledSingleNumber(SettingsKey.bottom_clip_amount' "objectSink"' 1000)'    				new MappedSetting("max_fan_speed"' "fanSpeedMin")'  				new MappedSetting("min_fan_speed"' "fanSpeedMax")'    				new FanTranslator("disable_fan_first_layers"' "fanFullOnLayerNr")'  				new MappedSetting("cool_extruder_lift"' "coolHeadLift")'    				new ScaledSingleNumber("retract_length"' "retractionAmount"' 1000)'  				new MapFirstValue("retract_speed"' "retractionSpeed")'  				new ScaledSingleNumber("retract_before_travel"' "retractionMinimalDistance"' 1000)'  				new ScaledSingleNumber("min_extrusion_before_retract"' "minimalExtrusionBeforeRetraction"' 1000)'    				new ScaledSingleNumber("retract_lift"' "retractionZHop"' 1000)'    				new MappedSetting(SettingsKey.spiral_vase' "spiralizeMode")'  				new PrintCenterX(SettingsKey.print_center' "posx")'  				new PrintCenterY(SettingsKey.print_center' "posy")'    				// needs testing' not working  				new ScaledSingleNumber("support_material_spacing"' "supportLineDistance"' 1000)'  				new SupportMatterial("support_material"' "supportAngle")'  				new VisibleButNotMappedToEngine("support_material_threshold")'  				new MappedSetting("support_material_create_internal_support"' "supportEverywhere")'  				new ScaledSingleNumber("support_material_xy_distance"' "supportXYDistance"' 1000)'  				new ScaledSingleNumber("support_material_z_distance"' "supportZDistance"' 1000)'    				new SupportTypeMapping("support_type"' "supportType")'    				new MappedSetting("slowdown_below_layer_time"' "minimalLayerTime")'    				new InfillTranslator("fill_density"' "sparseInfillLineDistance")'    				new MapStartGCode("start_gcode"' "startCode"' false)'  				new MapEndGCode("end_gcode"' "endCode")'  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SettingsControlBar,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SettingsControlBar.cs,SettingsControlBar,The following statement contains a magic number: this.AddChild(new GuiWidget(8' 0));
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SettingsControlBar,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SettingsControlBar.cs,SettingsControlBar,The following statement contains a magic number: if (numberOfHeatedExtruders > 1)  			{  				List<RGBA_Bytes> colorList = new List<RGBA_Bytes>() { RGBA_Bytes.Orange' RGBA_Bytes.Violet' RGBA_Bytes.YellowGreen };    				for (int i = 0; i < numberOfHeatedExtruders; i++)  				{  					if (i > 0)  					{  						this.AddChild(new GuiWidget(8' 0));  					}  					int colorIndex = i % colorList.Count;  					RGBA_Bytes color = colorList[colorIndex];  					this.AddChild(new PresetSelectorWidget(string.Format("{0} {1}"' "Material".Localize()' i + 1)' color' NamedSettingsLayers.Material' i));  				}  			}  			else  			{  				this.AddChild(new PresetSelectorWidget("Material".Localize()' RGBA_Bytes.Orange' NamedSettingsLayers.Material' 0));  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SettingsControlBar,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SettingsControlBar.cs,SettingsControlBar,The following statement contains a magic number: this.Height = 60 * GuiWidget.DeviceScale;
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,NoSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,NoSettingsWidget,The following statement contains a magic number: this.Padding = new BorderDouble(3' 0);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,NoSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,NoSettingsWidget,The following statement contains a magic number: var noConnectionMessageContainer = new AltGroupBox(new TextWidget("No Printer Selected".Localize()' pointSize: 18' textColor: ActiveTheme.Instance.SecondaryAccentColor));
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,NoSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,NoSettingsWidget,The following statement contains a magic number: noConnectionMessageContainer.Margin = new BorderDouble(top: 10);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,NoSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,NoSettingsWidget,The following statement contains a magic number: noConnectionMessageContainer.Height = 90;
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,NoSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,NoSettingsWidget,The following statement contains a magic number: TextWidget noConnectionMessage = new TextWidget(noConnectionString' pointSize: 10);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,NoSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,NoSettingsWidget,The following statement contains a magic number: noConnectionMessage.Margin = new BorderDouble(5);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,SliceSettingsWidget,The following statement contains a magic number: int size = (int)(16 * GuiWidget.DeviceScale);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,SliceSettingsWidget,The following statement contains a magic number: if (OsInformation.OperatingSystem == OSType.Android)  			{  				restoreNormal = ColorCircle(size' new RGBA_Bytes(200' 0' 0));  			}  			else  			{  				restoreNormal = ColorCircle(size' new RGBA_Bytes(128' 128' 128));  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,SliceSettingsWidget,The following statement contains a magic number: if (OsInformation.OperatingSystem == OSType.Android)  			{  				restoreNormal = ColorCircle(size' new RGBA_Bytes(200' 0' 0));  			}  			else  			{  				restoreNormal = ColorCircle(size' new RGBA_Bytes(128' 128' 128));  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,SliceSettingsWidget,The following statement contains a magic number: if (OsInformation.OperatingSystem == OSType.Android)  			{  				restoreNormal = ColorCircle(size' new RGBA_Bytes(200' 0' 0));  			}  			else  			{  				restoreNormal = ColorCircle(size' new RGBA_Bytes(128' 128' 128));  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,SliceSettingsWidget,The following statement contains a magic number: if (OsInformation.OperatingSystem == OSType.Android)  			{  				restoreNormal = ColorCircle(size' new RGBA_Bytes(200' 0' 0));  			}  			else  			{  				restoreNormal = ColorCircle(size' new RGBA_Bytes(128' 128' 128));  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,SliceSettingsWidget,The following statement contains a magic number: restoreHover = ColorCircle(size' new RGBA_Bytes(200' 0' 0));
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,SliceSettingsWidget,The following statement contains a magic number: restorePressed = ColorCircle(size' new RGBA_Bytes(255' 0' 0));
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,SliceSettingsWidget,The following statement contains a magic number: textImageButtonFactory.FixedHeight = 15 * GuiWidget.DeviceScale;
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,SliceSettingsWidget,The following statement contains a magic number: textImageButtonFactory.fontSize = 8;
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,SliceSettingsWidget,The following statement contains a magic number: textImageButtonFactory.normalBorderColor = new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 200);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,SliceSettingsWidget,The following statement contains a magic number: textImageButtonFactory.hoverBorderColor = new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 200);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,SliceSettingsWidget,The following statement contains a magic number: buttonFactory.FixedHeight = 20 * GuiWidget.DeviceScale;
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,SliceSettingsWidget,The following statement contains a magic number: buttonFactory.fontSize = 10;
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,SliceSettingsWidget,The following statement contains a magic number: pageTopToBottomLayout.Padding = new BorderDouble(3' 0);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,SliceSettingsWidget,The following statement contains a magic number: settingsControlBar = new SettingsControlBar()  			{  				HAnchor = HAnchor.ParentLeftRight'  				BackgroundColor = ActiveTheme.Instance.TransparentDarkOverlay'  				Padding = new BorderDouble(8' 12' 8' 8)  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,SliceSettingsWidget,The following statement contains a magic number: settingsControlBar = new SettingsControlBar()  			{  				HAnchor = HAnchor.ParentLeftRight'  				BackgroundColor = ActiveTheme.Instance.TransparentDarkOverlay'  				Padding = new BorderDouble(8' 12' 8' 8)  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,SliceSettingsWidget,The following statement contains a magic number: settingsControlBar = new SettingsControlBar()  			{  				HAnchor = HAnchor.ParentLeftRight'  				BackgroundColor = ActiveTheme.Instance.TransparentDarkOverlay'  				Padding = new BorderDouble(8' 12' 8' 8)  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,SliceSettingsWidget,The following statement contains a magic number: settingsControlBar = new SettingsControlBar()  			{  				HAnchor = HAnchor.ParentLeftRight'  				BackgroundColor = ActiveTheme.Instance.TransparentDarkOverlay'  				Padding = new BorderDouble(8' 12' 8' 8)  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,SliceSettingsWidget,The following statement contains a magic number: noConnectionMessageContainer = new AltGroupBox(new TextWidget("No Printer Selected".Localize()' pointSize: 18' textColor: ActiveTheme.Instance.SecondaryAccentColor));
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,SliceSettingsWidget,The following statement contains a magic number: noConnectionMessageContainer.Margin = new BorderDouble(top: 10);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,SliceSettingsWidget,The following statement contains a magic number: noConnectionMessageContainer.Height = 90;
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,SliceSettingsWidget,The following statement contains a magic number: TextWidget noConnectionMessage = new TextWidget(noConnectionString' pointSize: 10);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,SliceSettingsWidget,The following statement contains a magic number: noConnectionMessage.Margin = new BorderDouble(5);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,SliceSettingsWidget,The following statement contains a magic number: topCategoryTabs.Margin = new BorderDouble(top: 8);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,SliceSettingsWidget,The following statement contains a magic number: for (int topCategoryIndex = 0; topCategoryIndex < SliceSettingsOrganizer.Instance.UserLevels[UserLevel].CategoriesList.Count; topCategoryIndex++)  			{  				OrganizerCategory category = SliceSettingsOrganizer.Instance.UserLevels[UserLevel].CategoriesList[topCategoryIndex];  				string categoryPageLabel = category.Name.Localize();  				TabPage categoryPage = new TabPage(categoryPageLabel);  				SimpleTextTabWidget textTabWidget = new SimpleTextTabWidget(categoryPage' category.Name + " Tab"' 16'  					ActiveTheme.Instance.TabLabelSelected' new RGBA_Bytes()' ActiveTheme.Instance.TabLabelUnselected' new RGBA_Bytes());  				categoryPage.AnchorAll();  				topCategoryTabs.AddTab(textTabWidget);    				TabControl sideTabs = CreateSideTabsAndPages(category);  				sideTabBarsListForLayout.Add(sideTabs.TabBar);    				categoryPage.AddChild(sideTabs);  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,SliceSettingsWidget,The following statement contains a magic number: if (sliceSettingsDetailControl.SelectedValue == "Advanced" && ActiveSliceSettings.Instance.Helpers.ActiveSliceEngineType() == SlicingEngineTypes.Slic3r)  			{  				TabPage extraSettingsPage = new TabPage("Other");  				SimpleTextTabWidget extraSettingsTextTabWidget = new SimpleTextTabWidget(extraSettingsPage' "Other Tab"' 16'  						ActiveTheme.Instance.TabLabelSelected' new RGBA_Bytes()' ActiveTheme.Instance.TabLabelUnselected' new RGBA_Bytes());  				extraSettingsPage.AnchorAll();  				int count;  				TabControl extraSettingsSideTabs = CreateExtraSettingsSideTabsAndPages(topCategoryTabs' out count);  				if (count > 0)  				{  					topCategoryTabs.AddTab(extraSettingsTextTabWidget);  					sideTabBarsListForLayout.Add(extraSettingsSideTabs.TabBar);  					extraSettingsPage.AddChild(extraSettingsSideTabs);  				}  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSideTabsAndPages,The following statement contains a magic number: leftSideGroupTabs.Margin = new BorderDouble(0' 0' 0' 5);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSideTabsAndPages,The following statement contains a magic number: foreach (OrganizerGroup group in category.GroupsList)  			{  				tabIndexForItem = 0;  				string groupTabLabel = group.Name.Localize();  				TabPage groupTabPage = new TabPage(groupTabLabel);  				groupTabPage.HAnchor = HAnchor.ParentLeftRight;    				//Side Tabs  				SimpleTextTabWidget groupTabWidget = new SimpleTextTabWidget(groupTabPage' group.Name + " Tab"' 14'  				   ActiveTheme.Instance.TabLabelSelected' new RGBA_Bytes()' ActiveTheme.Instance.TabLabelUnselected' new RGBA_Bytes());  				groupTabWidget.HAnchor = Agg.UI.HAnchor.ParentLeftRight;    				FlowLayoutWidget subGroupLayoutTopToBottom = new FlowLayoutWidget(FlowDirection.TopToBottom);  				subGroupLayoutTopToBottom.AnchorAll();    				bool needToAddSubGroup = false;  				foreach (OrganizerSubGroup subGroup in group.SubGroupsList)  				{  					string subGroupTitle = subGroup.Name;  					int numberOfCopies = 1;    					if (subGroup.Name == "Extruder X")  					{  						numberOfCopies = ActiveSliceSettings.Instance.GetValue<int>(SettingsKey.extruder_count);  					}    					for (int copyIndex = 0; copyIndex < numberOfCopies; copyIndex++)  					{  						if (subGroup.Name == "Extruder X")  						{  							subGroupTitle = "{0} {1}".FormatWith("Extruder".Localize()' copyIndex + 1);  						}    						bool addedSettingToSubGroup = false;  						FlowLayoutWidget topToBottomSettings = new FlowLayoutWidget(FlowDirection.TopToBottom);  						topToBottomSettings.HAnchor = Agg.UI.HAnchor.ParentLeftRight;    						this.HAnchor = HAnchor.ParentLeftRight;    						var sliceEngineMapping = ActiveSliceSettings.Instance.Helpers.ActiveSliceEngine();    						foreach (SliceSettingData settingData in subGroup.SettingDataList)  						{  							// Note: tab sections may disappear if they when they are empty' as controlled by:  							// settingShouldBeShown / addedSettingToSubGroup / needToAddSubGroup  							bool settingShouldBeShown = CheckIfShouldBeShown(settingData);    							if (sliceEngineMapping.MapContains(settingData.SlicerConfigName)  								&& settingShouldBeShown)  							{  								addedSettingToSubGroup = true;  								bool addControl;  								GuiWidget controlsForThisSetting = CreateSettingInfoUIControls(  									settingData'   									layerCascade'   									persistenceLayer'   									viewFilter'   									copyIndex'  									out addControl'  									ref tabIndexForItem);    								if (addControl)  								{  									topToBottomSettings.AddChild(controlsForThisSetting);  									GuiWidget helpBox = AddInHelpText(topToBottomSettings' settingData);  									if (!sliceSettingsDetailControl.ShowingHelp)  									{  										helpBox.Visible = false;  									}  									sliceSettingsDetailControl.ShowHelpChanged += (s' e) =>  									{  										helpBox.Visible = sliceSettingsDetailControl.ShowingHelp;  									};  									topToBottomSettings.AddChild(helpBox);  								}  							}  						}    						if (addedSettingToSubGroup)  						{  							needToAddSubGroup = true;  							string groupBoxLabel = subGroupTitle.Localize();  							AltGroupBox groupBox = new AltGroupBox(groupBoxLabel);  							groupBox.TextColor = ActiveTheme.Instance.PrimaryTextColor;  							groupBox.BorderColor = ActiveTheme.Instance.PrimaryTextColor;  							groupBox.AddChild(topToBottomSettings);  							groupBox.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  							groupBox.Margin = new BorderDouble(3' 3' 3' 0);    							subGroupLayoutTopToBottom.AddChild(groupBox);  						}  					}  				}    				if (needToAddSubGroup)  				{  					SliceSettingListControl scrollOnGroupTab = new SliceSettingListControl();    					subGroupLayoutTopToBottom.VAnchor = VAnchor.FitToChildren;  					subGroupLayoutTopToBottom.HAnchor = Agg.UI.HAnchor.ParentLeftRight;    					scrollOnGroupTab.AddChild(subGroupLayoutTopToBottom);  					groupTabPage.AddChild(scrollOnGroupTab);  					leftSideGroupTabs.AddTab(groupTabWidget);    					// Make sure we have the right scroll position when we create this view  					// This code is not working yet. Scroll widgets get a scroll event when the tab becomes visible that is always reseting them.  					// So it is not usefull to enable this and in fact makes the tabs inconsistently scrolled. It is just here for reference. // 2015 04 16' LBB  					if (false)  					{  						string settingsScrollPosition = "SliceSettingsWidget_{0}_{1}_ScrollPosition".FormatWith(category.Name' group.Name);    						UiThread.RunOnIdle(() =>  						{  							int scrollPosition = UserSettings.Instance.Fields.GetInt(settingsScrollPosition' -100000);  							if (scrollPosition != -100000)  							{  								scrollOnGroupTab.ScrollPosition = new Vector2(0' scrollPosition);  							}  						});    						scrollOnGroupTab.ScrollPositionChanged += (object sender' EventArgs e) =>  						{  							if (scrollOnGroupTab.CanSelect)  							{  								UserSettings.Instance.Fields.SetInt(settingsScrollPosition' (int)scrollOnGroupTab.ScrollPosition.y);  							}  						};  					}  				}    				if(group.Name == "Connection")  				{  					subGroupLayoutTopToBottom.AddChild(SliceSettingsWidget.CreatePrinterExtraControls(isPrimaryView: true));  				}  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSideTabsAndPages,The following statement contains a magic number: foreach (OrganizerGroup group in category.GroupsList)  			{  				tabIndexForItem = 0;  				string groupTabLabel = group.Name.Localize();  				TabPage groupTabPage = new TabPage(groupTabLabel);  				groupTabPage.HAnchor = HAnchor.ParentLeftRight;    				//Side Tabs  				SimpleTextTabWidget groupTabWidget = new SimpleTextTabWidget(groupTabPage' group.Name + " Tab"' 14'  				   ActiveTheme.Instance.TabLabelSelected' new RGBA_Bytes()' ActiveTheme.Instance.TabLabelUnselected' new RGBA_Bytes());  				groupTabWidget.HAnchor = Agg.UI.HAnchor.ParentLeftRight;    				FlowLayoutWidget subGroupLayoutTopToBottom = new FlowLayoutWidget(FlowDirection.TopToBottom);  				subGroupLayoutTopToBottom.AnchorAll();    				bool needToAddSubGroup = false;  				foreach (OrganizerSubGroup subGroup in group.SubGroupsList)  				{  					string subGroupTitle = subGroup.Name;  					int numberOfCopies = 1;    					if (subGroup.Name == "Extruder X")  					{  						numberOfCopies = ActiveSliceSettings.Instance.GetValue<int>(SettingsKey.extruder_count);  					}    					for (int copyIndex = 0; copyIndex < numberOfCopies; copyIndex++)  					{  						if (subGroup.Name == "Extruder X")  						{  							subGroupTitle = "{0} {1}".FormatWith("Extruder".Localize()' copyIndex + 1);  						}    						bool addedSettingToSubGroup = false;  						FlowLayoutWidget topToBottomSettings = new FlowLayoutWidget(FlowDirection.TopToBottom);  						topToBottomSettings.HAnchor = Agg.UI.HAnchor.ParentLeftRight;    						this.HAnchor = HAnchor.ParentLeftRight;    						var sliceEngineMapping = ActiveSliceSettings.Instance.Helpers.ActiveSliceEngine();    						foreach (SliceSettingData settingData in subGroup.SettingDataList)  						{  							// Note: tab sections may disappear if they when they are empty' as controlled by:  							// settingShouldBeShown / addedSettingToSubGroup / needToAddSubGroup  							bool settingShouldBeShown = CheckIfShouldBeShown(settingData);    							if (sliceEngineMapping.MapContains(settingData.SlicerConfigName)  								&& settingShouldBeShown)  							{  								addedSettingToSubGroup = true;  								bool addControl;  								GuiWidget controlsForThisSetting = CreateSettingInfoUIControls(  									settingData'   									layerCascade'   									persistenceLayer'   									viewFilter'   									copyIndex'  									out addControl'  									ref tabIndexForItem);    								if (addControl)  								{  									topToBottomSettings.AddChild(controlsForThisSetting);  									GuiWidget helpBox = AddInHelpText(topToBottomSettings' settingData);  									if (!sliceSettingsDetailControl.ShowingHelp)  									{  										helpBox.Visible = false;  									}  									sliceSettingsDetailControl.ShowHelpChanged += (s' e) =>  									{  										helpBox.Visible = sliceSettingsDetailControl.ShowingHelp;  									};  									topToBottomSettings.AddChild(helpBox);  								}  							}  						}    						if (addedSettingToSubGroup)  						{  							needToAddSubGroup = true;  							string groupBoxLabel = subGroupTitle.Localize();  							AltGroupBox groupBox = new AltGroupBox(groupBoxLabel);  							groupBox.TextColor = ActiveTheme.Instance.PrimaryTextColor;  							groupBox.BorderColor = ActiveTheme.Instance.PrimaryTextColor;  							groupBox.AddChild(topToBottomSettings);  							groupBox.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  							groupBox.Margin = new BorderDouble(3' 3' 3' 0);    							subGroupLayoutTopToBottom.AddChild(groupBox);  						}  					}  				}    				if (needToAddSubGroup)  				{  					SliceSettingListControl scrollOnGroupTab = new SliceSettingListControl();    					subGroupLayoutTopToBottom.VAnchor = VAnchor.FitToChildren;  					subGroupLayoutTopToBottom.HAnchor = Agg.UI.HAnchor.ParentLeftRight;    					scrollOnGroupTab.AddChild(subGroupLayoutTopToBottom);  					groupTabPage.AddChild(scrollOnGroupTab);  					leftSideGroupTabs.AddTab(groupTabWidget);    					// Make sure we have the right scroll position when we create this view  					// This code is not working yet. Scroll widgets get a scroll event when the tab becomes visible that is always reseting them.  					// So it is not usefull to enable this and in fact makes the tabs inconsistently scrolled. It is just here for reference. // 2015 04 16' LBB  					if (false)  					{  						string settingsScrollPosition = "SliceSettingsWidget_{0}_{1}_ScrollPosition".FormatWith(category.Name' group.Name);    						UiThread.RunOnIdle(() =>  						{  							int scrollPosition = UserSettings.Instance.Fields.GetInt(settingsScrollPosition' -100000);  							if (scrollPosition != -100000)  							{  								scrollOnGroupTab.ScrollPosition = new Vector2(0' scrollPosition);  							}  						});    						scrollOnGroupTab.ScrollPositionChanged += (object sender' EventArgs e) =>  						{  							if (scrollOnGroupTab.CanSelect)  							{  								UserSettings.Instance.Fields.SetInt(settingsScrollPosition' (int)scrollOnGroupTab.ScrollPosition.y);  							}  						};  					}  				}    				if(group.Name == "Connection")  				{  					subGroupLayoutTopToBottom.AddChild(SliceSettingsWidget.CreatePrinterExtraControls(isPrimaryView: true));  				}  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSideTabsAndPages,The following statement contains a magic number: foreach (OrganizerGroup group in category.GroupsList)  			{  				tabIndexForItem = 0;  				string groupTabLabel = group.Name.Localize();  				TabPage groupTabPage = new TabPage(groupTabLabel);  				groupTabPage.HAnchor = HAnchor.ParentLeftRight;    				//Side Tabs  				SimpleTextTabWidget groupTabWidget = new SimpleTextTabWidget(groupTabPage' group.Name + " Tab"' 14'  				   ActiveTheme.Instance.TabLabelSelected' new RGBA_Bytes()' ActiveTheme.Instance.TabLabelUnselected' new RGBA_Bytes());  				groupTabWidget.HAnchor = Agg.UI.HAnchor.ParentLeftRight;    				FlowLayoutWidget subGroupLayoutTopToBottom = new FlowLayoutWidget(FlowDirection.TopToBottom);  				subGroupLayoutTopToBottom.AnchorAll();    				bool needToAddSubGroup = false;  				foreach (OrganizerSubGroup subGroup in group.SubGroupsList)  				{  					string subGroupTitle = subGroup.Name;  					int numberOfCopies = 1;    					if (subGroup.Name == "Extruder X")  					{  						numberOfCopies = ActiveSliceSettings.Instance.GetValue<int>(SettingsKey.extruder_count);  					}    					for (int copyIndex = 0; copyIndex < numberOfCopies; copyIndex++)  					{  						if (subGroup.Name == "Extruder X")  						{  							subGroupTitle = "{0} {1}".FormatWith("Extruder".Localize()' copyIndex + 1);  						}    						bool addedSettingToSubGroup = false;  						FlowLayoutWidget topToBottomSettings = new FlowLayoutWidget(FlowDirection.TopToBottom);  						topToBottomSettings.HAnchor = Agg.UI.HAnchor.ParentLeftRight;    						this.HAnchor = HAnchor.ParentLeftRight;    						var sliceEngineMapping = ActiveSliceSettings.Instance.Helpers.ActiveSliceEngine();    						foreach (SliceSettingData settingData in subGroup.SettingDataList)  						{  							// Note: tab sections may disappear if they when they are empty' as controlled by:  							// settingShouldBeShown / addedSettingToSubGroup / needToAddSubGroup  							bool settingShouldBeShown = CheckIfShouldBeShown(settingData);    							if (sliceEngineMapping.MapContains(settingData.SlicerConfigName)  								&& settingShouldBeShown)  							{  								addedSettingToSubGroup = true;  								bool addControl;  								GuiWidget controlsForThisSetting = CreateSettingInfoUIControls(  									settingData'   									layerCascade'   									persistenceLayer'   									viewFilter'   									copyIndex'  									out addControl'  									ref tabIndexForItem);    								if (addControl)  								{  									topToBottomSettings.AddChild(controlsForThisSetting);  									GuiWidget helpBox = AddInHelpText(topToBottomSettings' settingData);  									if (!sliceSettingsDetailControl.ShowingHelp)  									{  										helpBox.Visible = false;  									}  									sliceSettingsDetailControl.ShowHelpChanged += (s' e) =>  									{  										helpBox.Visible = sliceSettingsDetailControl.ShowingHelp;  									};  									topToBottomSettings.AddChild(helpBox);  								}  							}  						}    						if (addedSettingToSubGroup)  						{  							needToAddSubGroup = true;  							string groupBoxLabel = subGroupTitle.Localize();  							AltGroupBox groupBox = new AltGroupBox(groupBoxLabel);  							groupBox.TextColor = ActiveTheme.Instance.PrimaryTextColor;  							groupBox.BorderColor = ActiveTheme.Instance.PrimaryTextColor;  							groupBox.AddChild(topToBottomSettings);  							groupBox.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  							groupBox.Margin = new BorderDouble(3' 3' 3' 0);    							subGroupLayoutTopToBottom.AddChild(groupBox);  						}  					}  				}    				if (needToAddSubGroup)  				{  					SliceSettingListControl scrollOnGroupTab = new SliceSettingListControl();    					subGroupLayoutTopToBottom.VAnchor = VAnchor.FitToChildren;  					subGroupLayoutTopToBottom.HAnchor = Agg.UI.HAnchor.ParentLeftRight;    					scrollOnGroupTab.AddChild(subGroupLayoutTopToBottom);  					groupTabPage.AddChild(scrollOnGroupTab);  					leftSideGroupTabs.AddTab(groupTabWidget);    					// Make sure we have the right scroll position when we create this view  					// This code is not working yet. Scroll widgets get a scroll event when the tab becomes visible that is always reseting them.  					// So it is not usefull to enable this and in fact makes the tabs inconsistently scrolled. It is just here for reference. // 2015 04 16' LBB  					if (false)  					{  						string settingsScrollPosition = "SliceSettingsWidget_{0}_{1}_ScrollPosition".FormatWith(category.Name' group.Name);    						UiThread.RunOnIdle(() =>  						{  							int scrollPosition = UserSettings.Instance.Fields.GetInt(settingsScrollPosition' -100000);  							if (scrollPosition != -100000)  							{  								scrollOnGroupTab.ScrollPosition = new Vector2(0' scrollPosition);  							}  						});    						scrollOnGroupTab.ScrollPositionChanged += (object sender' EventArgs e) =>  						{  							if (scrollOnGroupTab.CanSelect)  							{  								UserSettings.Instance.Fields.SetInt(settingsScrollPosition' (int)scrollOnGroupTab.ScrollPosition.y);  							}  						};  					}  				}    				if(group.Name == "Connection")  				{  					subGroupLayoutTopToBottom.AddChild(SliceSettingsWidget.CreatePrinterExtraControls(isPrimaryView: true));  				}  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSideTabsAndPages,The following statement contains a magic number: foreach (OrganizerGroup group in category.GroupsList)  			{  				tabIndexForItem = 0;  				string groupTabLabel = group.Name.Localize();  				TabPage groupTabPage = new TabPage(groupTabLabel);  				groupTabPage.HAnchor = HAnchor.ParentLeftRight;    				//Side Tabs  				SimpleTextTabWidget groupTabWidget = new SimpleTextTabWidget(groupTabPage' group.Name + " Tab"' 14'  				   ActiveTheme.Instance.TabLabelSelected' new RGBA_Bytes()' ActiveTheme.Instance.TabLabelUnselected' new RGBA_Bytes());  				groupTabWidget.HAnchor = Agg.UI.HAnchor.ParentLeftRight;    				FlowLayoutWidget subGroupLayoutTopToBottom = new FlowLayoutWidget(FlowDirection.TopToBottom);  				subGroupLayoutTopToBottom.AnchorAll();    				bool needToAddSubGroup = false;  				foreach (OrganizerSubGroup subGroup in group.SubGroupsList)  				{  					string subGroupTitle = subGroup.Name;  					int numberOfCopies = 1;    					if (subGroup.Name == "Extruder X")  					{  						numberOfCopies = ActiveSliceSettings.Instance.GetValue<int>(SettingsKey.extruder_count);  					}    					for (int copyIndex = 0; copyIndex < numberOfCopies; copyIndex++)  					{  						if (subGroup.Name == "Extruder X")  						{  							subGroupTitle = "{0} {1}".FormatWith("Extruder".Localize()' copyIndex + 1);  						}    						bool addedSettingToSubGroup = false;  						FlowLayoutWidget topToBottomSettings = new FlowLayoutWidget(FlowDirection.TopToBottom);  						topToBottomSettings.HAnchor = Agg.UI.HAnchor.ParentLeftRight;    						this.HAnchor = HAnchor.ParentLeftRight;    						var sliceEngineMapping = ActiveSliceSettings.Instance.Helpers.ActiveSliceEngine();    						foreach (SliceSettingData settingData in subGroup.SettingDataList)  						{  							// Note: tab sections may disappear if they when they are empty' as controlled by:  							// settingShouldBeShown / addedSettingToSubGroup / needToAddSubGroup  							bool settingShouldBeShown = CheckIfShouldBeShown(settingData);    							if (sliceEngineMapping.MapContains(settingData.SlicerConfigName)  								&& settingShouldBeShown)  							{  								addedSettingToSubGroup = true;  								bool addControl;  								GuiWidget controlsForThisSetting = CreateSettingInfoUIControls(  									settingData'   									layerCascade'   									persistenceLayer'   									viewFilter'   									copyIndex'  									out addControl'  									ref tabIndexForItem);    								if (addControl)  								{  									topToBottomSettings.AddChild(controlsForThisSetting);  									GuiWidget helpBox = AddInHelpText(topToBottomSettings' settingData);  									if (!sliceSettingsDetailControl.ShowingHelp)  									{  										helpBox.Visible = false;  									}  									sliceSettingsDetailControl.ShowHelpChanged += (s' e) =>  									{  										helpBox.Visible = sliceSettingsDetailControl.ShowingHelp;  									};  									topToBottomSettings.AddChild(helpBox);  								}  							}  						}    						if (addedSettingToSubGroup)  						{  							needToAddSubGroup = true;  							string groupBoxLabel = subGroupTitle.Localize();  							AltGroupBox groupBox = new AltGroupBox(groupBoxLabel);  							groupBox.TextColor = ActiveTheme.Instance.PrimaryTextColor;  							groupBox.BorderColor = ActiveTheme.Instance.PrimaryTextColor;  							groupBox.AddChild(topToBottomSettings);  							groupBox.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  							groupBox.Margin = new BorderDouble(3' 3' 3' 0);    							subGroupLayoutTopToBottom.AddChild(groupBox);  						}  					}  				}    				if (needToAddSubGroup)  				{  					SliceSettingListControl scrollOnGroupTab = new SliceSettingListControl();    					subGroupLayoutTopToBottom.VAnchor = VAnchor.FitToChildren;  					subGroupLayoutTopToBottom.HAnchor = Agg.UI.HAnchor.ParentLeftRight;    					scrollOnGroupTab.AddChild(subGroupLayoutTopToBottom);  					groupTabPage.AddChild(scrollOnGroupTab);  					leftSideGroupTabs.AddTab(groupTabWidget);    					// Make sure we have the right scroll position when we create this view  					// This code is not working yet. Scroll widgets get a scroll event when the tab becomes visible that is always reseting them.  					// So it is not usefull to enable this and in fact makes the tabs inconsistently scrolled. It is just here for reference. // 2015 04 16' LBB  					if (false)  					{  						string settingsScrollPosition = "SliceSettingsWidget_{0}_{1}_ScrollPosition".FormatWith(category.Name' group.Name);    						UiThread.RunOnIdle(() =>  						{  							int scrollPosition = UserSettings.Instance.Fields.GetInt(settingsScrollPosition' -100000);  							if (scrollPosition != -100000)  							{  								scrollOnGroupTab.ScrollPosition = new Vector2(0' scrollPosition);  							}  						});    						scrollOnGroupTab.ScrollPositionChanged += (object sender' EventArgs e) =>  						{  							if (scrollOnGroupTab.CanSelect)  							{  								UserSettings.Instance.Fields.SetInt(settingsScrollPosition' (int)scrollOnGroupTab.ScrollPosition.y);  							}  						};  					}  				}    				if(group.Name == "Connection")  				{  					subGroupLayoutTopToBottom.AddChild(SliceSettingsWidget.CreatePrinterExtraControls(isPrimaryView: true));  				}  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSideTabsAndPages,The following statement contains a magic number: foreach (OrganizerGroup group in category.GroupsList)  			{  				tabIndexForItem = 0;  				string groupTabLabel = group.Name.Localize();  				TabPage groupTabPage = new TabPage(groupTabLabel);  				groupTabPage.HAnchor = HAnchor.ParentLeftRight;    				//Side Tabs  				SimpleTextTabWidget groupTabWidget = new SimpleTextTabWidget(groupTabPage' group.Name + " Tab"' 14'  				   ActiveTheme.Instance.TabLabelSelected' new RGBA_Bytes()' ActiveTheme.Instance.TabLabelUnselected' new RGBA_Bytes());  				groupTabWidget.HAnchor = Agg.UI.HAnchor.ParentLeftRight;    				FlowLayoutWidget subGroupLayoutTopToBottom = new FlowLayoutWidget(FlowDirection.TopToBottom);  				subGroupLayoutTopToBottom.AnchorAll();    				bool needToAddSubGroup = false;  				foreach (OrganizerSubGroup subGroup in group.SubGroupsList)  				{  					string subGroupTitle = subGroup.Name;  					int numberOfCopies = 1;    					if (subGroup.Name == "Extruder X")  					{  						numberOfCopies = ActiveSliceSettings.Instance.GetValue<int>(SettingsKey.extruder_count);  					}    					for (int copyIndex = 0; copyIndex < numberOfCopies; copyIndex++)  					{  						if (subGroup.Name == "Extruder X")  						{  							subGroupTitle = "{0} {1}".FormatWith("Extruder".Localize()' copyIndex + 1);  						}    						bool addedSettingToSubGroup = false;  						FlowLayoutWidget topToBottomSettings = new FlowLayoutWidget(FlowDirection.TopToBottom);  						topToBottomSettings.HAnchor = Agg.UI.HAnchor.ParentLeftRight;    						this.HAnchor = HAnchor.ParentLeftRight;    						var sliceEngineMapping = ActiveSliceSettings.Instance.Helpers.ActiveSliceEngine();    						foreach (SliceSettingData settingData in subGroup.SettingDataList)  						{  							// Note: tab sections may disappear if they when they are empty' as controlled by:  							// settingShouldBeShown / addedSettingToSubGroup / needToAddSubGroup  							bool settingShouldBeShown = CheckIfShouldBeShown(settingData);    							if (sliceEngineMapping.MapContains(settingData.SlicerConfigName)  								&& settingShouldBeShown)  							{  								addedSettingToSubGroup = true;  								bool addControl;  								GuiWidget controlsForThisSetting = CreateSettingInfoUIControls(  									settingData'   									layerCascade'   									persistenceLayer'   									viewFilter'   									copyIndex'  									out addControl'  									ref tabIndexForItem);    								if (addControl)  								{  									topToBottomSettings.AddChild(controlsForThisSetting);  									GuiWidget helpBox = AddInHelpText(topToBottomSettings' settingData);  									if (!sliceSettingsDetailControl.ShowingHelp)  									{  										helpBox.Visible = false;  									}  									sliceSettingsDetailControl.ShowHelpChanged += (s' e) =>  									{  										helpBox.Visible = sliceSettingsDetailControl.ShowingHelp;  									};  									topToBottomSettings.AddChild(helpBox);  								}  							}  						}    						if (addedSettingToSubGroup)  						{  							needToAddSubGroup = true;  							string groupBoxLabel = subGroupTitle.Localize();  							AltGroupBox groupBox = new AltGroupBox(groupBoxLabel);  							groupBox.TextColor = ActiveTheme.Instance.PrimaryTextColor;  							groupBox.BorderColor = ActiveTheme.Instance.PrimaryTextColor;  							groupBox.AddChild(topToBottomSettings);  							groupBox.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  							groupBox.Margin = new BorderDouble(3' 3' 3' 0);    							subGroupLayoutTopToBottom.AddChild(groupBox);  						}  					}  				}    				if (needToAddSubGroup)  				{  					SliceSettingListControl scrollOnGroupTab = new SliceSettingListControl();    					subGroupLayoutTopToBottom.VAnchor = VAnchor.FitToChildren;  					subGroupLayoutTopToBottom.HAnchor = Agg.UI.HAnchor.ParentLeftRight;    					scrollOnGroupTab.AddChild(subGroupLayoutTopToBottom);  					groupTabPage.AddChild(scrollOnGroupTab);  					leftSideGroupTabs.AddTab(groupTabWidget);    					// Make sure we have the right scroll position when we create this view  					// This code is not working yet. Scroll widgets get a scroll event when the tab becomes visible that is always reseting them.  					// So it is not usefull to enable this and in fact makes the tabs inconsistently scrolled. It is just here for reference. // 2015 04 16' LBB  					if (false)  					{  						string settingsScrollPosition = "SliceSettingsWidget_{0}_{1}_ScrollPosition".FormatWith(category.Name' group.Name);    						UiThread.RunOnIdle(() =>  						{  							int scrollPosition = UserSettings.Instance.Fields.GetInt(settingsScrollPosition' -100000);  							if (scrollPosition != -100000)  							{  								scrollOnGroupTab.ScrollPosition = new Vector2(0' scrollPosition);  							}  						});    						scrollOnGroupTab.ScrollPositionChanged += (object sender' EventArgs e) =>  						{  							if (scrollOnGroupTab.CanSelect)  							{  								UserSettings.Instance.Fields.SetInt(settingsScrollPosition' (int)scrollOnGroupTab.ScrollPosition.y);  							}  						};  					}  				}    				if(group.Name == "Connection")  				{  					subGroupLayoutTopToBottom.AddChild(SliceSettingsWidget.CreatePrinterExtraControls(isPrimaryView: true));  				}  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSideTabsAndPages,The following statement contains a magic number: foreach (OrganizerGroup group in category.GroupsList)  			{  				tabIndexForItem = 0;  				string groupTabLabel = group.Name.Localize();  				TabPage groupTabPage = new TabPage(groupTabLabel);  				groupTabPage.HAnchor = HAnchor.ParentLeftRight;    				//Side Tabs  				SimpleTextTabWidget groupTabWidget = new SimpleTextTabWidget(groupTabPage' group.Name + " Tab"' 14'  				   ActiveTheme.Instance.TabLabelSelected' new RGBA_Bytes()' ActiveTheme.Instance.TabLabelUnselected' new RGBA_Bytes());  				groupTabWidget.HAnchor = Agg.UI.HAnchor.ParentLeftRight;    				FlowLayoutWidget subGroupLayoutTopToBottom = new FlowLayoutWidget(FlowDirection.TopToBottom);  				subGroupLayoutTopToBottom.AnchorAll();    				bool needToAddSubGroup = false;  				foreach (OrganizerSubGroup subGroup in group.SubGroupsList)  				{  					string subGroupTitle = subGroup.Name;  					int numberOfCopies = 1;    					if (subGroup.Name == "Extruder X")  					{  						numberOfCopies = ActiveSliceSettings.Instance.GetValue<int>(SettingsKey.extruder_count);  					}    					for (int copyIndex = 0; copyIndex < numberOfCopies; copyIndex++)  					{  						if (subGroup.Name == "Extruder X")  						{  							subGroupTitle = "{0} {1}".FormatWith("Extruder".Localize()' copyIndex + 1);  						}    						bool addedSettingToSubGroup = false;  						FlowLayoutWidget topToBottomSettings = new FlowLayoutWidget(FlowDirection.TopToBottom);  						topToBottomSettings.HAnchor = Agg.UI.HAnchor.ParentLeftRight;    						this.HAnchor = HAnchor.ParentLeftRight;    						var sliceEngineMapping = ActiveSliceSettings.Instance.Helpers.ActiveSliceEngine();    						foreach (SliceSettingData settingData in subGroup.SettingDataList)  						{  							// Note: tab sections may disappear if they when they are empty' as controlled by:  							// settingShouldBeShown / addedSettingToSubGroup / needToAddSubGroup  							bool settingShouldBeShown = CheckIfShouldBeShown(settingData);    							if (sliceEngineMapping.MapContains(settingData.SlicerConfigName)  								&& settingShouldBeShown)  							{  								addedSettingToSubGroup = true;  								bool addControl;  								GuiWidget controlsForThisSetting = CreateSettingInfoUIControls(  									settingData'   									layerCascade'   									persistenceLayer'   									viewFilter'   									copyIndex'  									out addControl'  									ref tabIndexForItem);    								if (addControl)  								{  									topToBottomSettings.AddChild(controlsForThisSetting);  									GuiWidget helpBox = AddInHelpText(topToBottomSettings' settingData);  									if (!sliceSettingsDetailControl.ShowingHelp)  									{  										helpBox.Visible = false;  									}  									sliceSettingsDetailControl.ShowHelpChanged += (s' e) =>  									{  										helpBox.Visible = sliceSettingsDetailControl.ShowingHelp;  									};  									topToBottomSettings.AddChild(helpBox);  								}  							}  						}    						if (addedSettingToSubGroup)  						{  							needToAddSubGroup = true;  							string groupBoxLabel = subGroupTitle.Localize();  							AltGroupBox groupBox = new AltGroupBox(groupBoxLabel);  							groupBox.TextColor = ActiveTheme.Instance.PrimaryTextColor;  							groupBox.BorderColor = ActiveTheme.Instance.PrimaryTextColor;  							groupBox.AddChild(topToBottomSettings);  							groupBox.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  							groupBox.Margin = new BorderDouble(3' 3' 3' 0);    							subGroupLayoutTopToBottom.AddChild(groupBox);  						}  					}  				}    				if (needToAddSubGroup)  				{  					SliceSettingListControl scrollOnGroupTab = new SliceSettingListControl();    					subGroupLayoutTopToBottom.VAnchor = VAnchor.FitToChildren;  					subGroupLayoutTopToBottom.HAnchor = Agg.UI.HAnchor.ParentLeftRight;    					scrollOnGroupTab.AddChild(subGroupLayoutTopToBottom);  					groupTabPage.AddChild(scrollOnGroupTab);  					leftSideGroupTabs.AddTab(groupTabWidget);    					// Make sure we have the right scroll position when we create this view  					// This code is not working yet. Scroll widgets get a scroll event when the tab becomes visible that is always reseting them.  					// So it is not usefull to enable this and in fact makes the tabs inconsistently scrolled. It is just here for reference. // 2015 04 16' LBB  					if (false)  					{  						string settingsScrollPosition = "SliceSettingsWidget_{0}_{1}_ScrollPosition".FormatWith(category.Name' group.Name);    						UiThread.RunOnIdle(() =>  						{  							int scrollPosition = UserSettings.Instance.Fields.GetInt(settingsScrollPosition' -100000);  							if (scrollPosition != -100000)  							{  								scrollOnGroupTab.ScrollPosition = new Vector2(0' scrollPosition);  							}  						});    						scrollOnGroupTab.ScrollPositionChanged += (object sender' EventArgs e) =>  						{  							if (scrollOnGroupTab.CanSelect)  							{  								UserSettings.Instance.Fields.SetInt(settingsScrollPosition' (int)scrollOnGroupTab.ScrollPosition.y);  							}  						};  					}  				}    				if(group.Name == "Connection")  				{  					subGroupLayoutTopToBottom.AddChild(SliceSettingsWidget.CreatePrinterExtraControls(isPrimaryView: true));  				}  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,AddInHelpText,The following statement contains a magic number: double textRegionWidth = 380 * GuiWidget.DeviceScale;
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,AddInHelpText,The following statement contains a magic number: allText.Padding = new BorderDouble(5);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,AddInHelpText,The following statement contains a magic number: double helpPointSize = 10;
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,AddInHelpText,The following statement contains a magic number: helpWidget.Margin = new BorderDouble(5' 0' 0' 0);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateExtraSettingsSideTabsAndPages,The following statement contains a magic number: int rightContentWidth = (int)(280 * GuiWidget.DeviceScale + .5);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateExtraSettingsSideTabsAndPages,The following statement contains a magic number: int rightContentWidth = (int)(280 * GuiWidget.DeviceScale + .5);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateExtraSettingsSideTabsAndPages,The following statement contains a magic number: leftSideGroupTabs.Margin = new BorderDouble(0' 0' 0' 5);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateExtraSettingsSideTabsAndPages,The following statement contains a magic number: {  				TabPage groupTabPage = new TabPage("Extra Settings");  				SimpleTextTabWidget groupTabWidget = new SimpleTextTabWidget(groupTabPage' "Extra Settings Tab"' 14'  				   ActiveTheme.Instance.TabLabelSelected' new RGBA_Bytes()' ActiveTheme.Instance.TabLabelUnselected' new RGBA_Bytes());  				leftSideGroupTabs.AddTab(groupTabWidget);    				FlowLayoutWidget subGroupLayoutTopToBottom = new FlowLayoutWidget(FlowDirection.TopToBottom);  				subGroupLayoutTopToBottom.HAnchor = Agg.UI.HAnchor.Max_FitToChildren_ParentWidth;  				subGroupLayoutTopToBottom.VAnchor = VAnchor.FitToChildren;    				FlowLayoutWidget topToBottomSettings = new FlowLayoutWidget(FlowDirection.TopToBottom);  				topToBottomSettings.HAnchor = Agg.UI.HAnchor.Max_FitToChildren_ParentWidth;    				this.HAnchor = HAnchor.ParentLeftRight;    				var sliceEngineMapping = ActiveSliceSettings.Instance.Helpers.ActiveSliceEngine();    				foreach (var keyValue in ActiveSliceSettings.Instance.BaseLayer)  				{  					if (!SliceSettingsOrganizer.Instance.Contains(UserLevel' keyValue.Key))  					{  						SliceSettingData settingData = new SliceSettingData(keyValue.Key' keyValue.Key' SliceSettingData.DataEditTypes.STRING);  						if (sliceEngineMapping.MapContains(settingData.SlicerConfigName))  						{  							bool addControl;  							GuiWidget controlsForThisSetting = CreateSettingInfoUIControls(  								settingData'  								layerCascade'  								persistenceLayer'  								viewFilter'  								0'  								out addControl'  								ref tabIndexForItem);    							if (addControl)  							{  								topToBottomSettings.AddChild(controlsForThisSetting);  							}  							count++;  						}  					}  				}    				AltGroupBox groupBox = new AltGroupBox("Extra".Localize());  				groupBox.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				groupBox.BorderColor = ActiveTheme.Instance.PrimaryTextColor;  				groupBox.AddChild(topToBottomSettings);  				groupBox.VAnchor = VAnchor.FitToChildren;  				groupBox.HAnchor = Agg.UI.HAnchor.Max_FitToChildren_ParentWidth;    				subGroupLayoutTopToBottom.AddChild(groupBox);    				SliceSettingListControl scrollOnGroupTab = new SliceSettingListControl();  				scrollOnGroupTab.AnchorAll();  				scrollOnGroupTab.AddChild(subGroupLayoutTopToBottom);  				groupTabPage.AddChild(scrollOnGroupTab);  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,GetExtraSettingsWidget,The following statement contains a magic number: var nameHolder = new GuiWidget()  			{  				HAnchor = HAnchor.ParentLeftRight'  				VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  				Padding = new BorderDouble(5' 0)'  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,GetExtraSettingsWidget,The following statement contains a magic number: nameHolder.AddChild(new WrappedTextWidget(settingData.ExtraSettings.Localize()' pointSize: 8' textColor: ActiveTheme.Instance.PrimaryTextColor));
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreatePrinterExtraControls,The following statement contains a magic number: if (isPrimaryView)  			{  				// OEM_LAYER_DATE:  				string lastUpdateTime = "March 1' 2016";  				if (ActiveSliceSettings.Instance?.OemLayer != null)  				{  					string fromCreatedDate = ActiveSliceSettings.Instance.OemLayer.ValueOrDefault(SettingsKey.created_date);  					try  					{  						if (!string.IsNullOrEmpty(fromCreatedDate))  						{  							DateTime time = Convert.ToDateTime(fromCreatedDate).ToLocalTime();  							lastUpdateTime = time.ToString("MMMM d' yyyy h:mm tt");  						}  					}  					catch  					{  					}  				}    				var row = new FlowLayoutWidget()  				{  					BackgroundColor = ActiveTheme.Instance.TertiaryBackgroundColor'  					Padding = new BorderDouble(5)'  					Margin = new BorderDouble(3' 20' 3' 0)'  					HAnchor = HAnchor.ParentLeftRight  				};    				string make = ActiveSliceSettings.Instance.GetValue(SettingsKey.make);  				string model = ActiveSliceSettings.Instance.GetValue(SettingsKey.model);    				string title = $"{make} {model}";  				if (title == "Other Other")  				{  					title = "Custom Profile".Localize();  				}    				row.AddChild(new TextWidget(title' pointSize: 9)  				{  					Margin = new BorderDouble(0' 4' 10' 4)'  					TextColor = ActiveTheme.Instance.PrimaryTextColor'  				});    				row.AddChild(new HorizontalSpacer());    				row.AddChild(new TextWidget(lastUpdateTime' pointSize: 9)  				{  					Margin = new BorderDouble(0' 4' 10' 4)'  					TextColor = ActiveTheme.Instance.PrimaryTextColor'  				});    				dataArea.AddChild(row);  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreatePrinterExtraControls,The following statement contains a magic number: if (isPrimaryView)  			{  				// OEM_LAYER_DATE:  				string lastUpdateTime = "March 1' 2016";  				if (ActiveSliceSettings.Instance?.OemLayer != null)  				{  					string fromCreatedDate = ActiveSliceSettings.Instance.OemLayer.ValueOrDefault(SettingsKey.created_date);  					try  					{  						if (!string.IsNullOrEmpty(fromCreatedDate))  						{  							DateTime time = Convert.ToDateTime(fromCreatedDate).ToLocalTime();  							lastUpdateTime = time.ToString("MMMM d' yyyy h:mm tt");  						}  					}  					catch  					{  					}  				}    				var row = new FlowLayoutWidget()  				{  					BackgroundColor = ActiveTheme.Instance.TertiaryBackgroundColor'  					Padding = new BorderDouble(5)'  					Margin = new BorderDouble(3' 20' 3' 0)'  					HAnchor = HAnchor.ParentLeftRight  				};    				string make = ActiveSliceSettings.Instance.GetValue(SettingsKey.make);  				string model = ActiveSliceSettings.Instance.GetValue(SettingsKey.model);    				string title = $"{make} {model}";  				if (title == "Other Other")  				{  					title = "Custom Profile".Localize();  				}    				row.AddChild(new TextWidget(title' pointSize: 9)  				{  					Margin = new BorderDouble(0' 4' 10' 4)'  					TextColor = ActiveTheme.Instance.PrimaryTextColor'  				});    				row.AddChild(new HorizontalSpacer());    				row.AddChild(new TextWidget(lastUpdateTime' pointSize: 9)  				{  					Margin = new BorderDouble(0' 4' 10' 4)'  					TextColor = ActiveTheme.Instance.PrimaryTextColor'  				});    				dataArea.AddChild(row);  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreatePrinterExtraControls,The following statement contains a magic number: if (isPrimaryView)  			{  				// OEM_LAYER_DATE:  				string lastUpdateTime = "March 1' 2016";  				if (ActiveSliceSettings.Instance?.OemLayer != null)  				{  					string fromCreatedDate = ActiveSliceSettings.Instance.OemLayer.ValueOrDefault(SettingsKey.created_date);  					try  					{  						if (!string.IsNullOrEmpty(fromCreatedDate))  						{  							DateTime time = Convert.ToDateTime(fromCreatedDate).ToLocalTime();  							lastUpdateTime = time.ToString("MMMM d' yyyy h:mm tt");  						}  					}  					catch  					{  					}  				}    				var row = new FlowLayoutWidget()  				{  					BackgroundColor = ActiveTheme.Instance.TertiaryBackgroundColor'  					Padding = new BorderDouble(5)'  					Margin = new BorderDouble(3' 20' 3' 0)'  					HAnchor = HAnchor.ParentLeftRight  				};    				string make = ActiveSliceSettings.Instance.GetValue(SettingsKey.make);  				string model = ActiveSliceSettings.Instance.GetValue(SettingsKey.model);    				string title = $"{make} {model}";  				if (title == "Other Other")  				{  					title = "Custom Profile".Localize();  				}    				row.AddChild(new TextWidget(title' pointSize: 9)  				{  					Margin = new BorderDouble(0' 4' 10' 4)'  					TextColor = ActiveTheme.Instance.PrimaryTextColor'  				});    				row.AddChild(new HorizontalSpacer());    				row.AddChild(new TextWidget(lastUpdateTime' pointSize: 9)  				{  					Margin = new BorderDouble(0' 4' 10' 4)'  					TextColor = ActiveTheme.Instance.PrimaryTextColor'  				});    				dataArea.AddChild(row);  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreatePrinterExtraControls,The following statement contains a magic number: if (isPrimaryView)  			{  				// OEM_LAYER_DATE:  				string lastUpdateTime = "March 1' 2016";  				if (ActiveSliceSettings.Instance?.OemLayer != null)  				{  					string fromCreatedDate = ActiveSliceSettings.Instance.OemLayer.ValueOrDefault(SettingsKey.created_date);  					try  					{  						if (!string.IsNullOrEmpty(fromCreatedDate))  						{  							DateTime time = Convert.ToDateTime(fromCreatedDate).ToLocalTime();  							lastUpdateTime = time.ToString("MMMM d' yyyy h:mm tt");  						}  					}  					catch  					{  					}  				}    				var row = new FlowLayoutWidget()  				{  					BackgroundColor = ActiveTheme.Instance.TertiaryBackgroundColor'  					Padding = new BorderDouble(5)'  					Margin = new BorderDouble(3' 20' 3' 0)'  					HAnchor = HAnchor.ParentLeftRight  				};    				string make = ActiveSliceSettings.Instance.GetValue(SettingsKey.make);  				string model = ActiveSliceSettings.Instance.GetValue(SettingsKey.model);    				string title = $"{make} {model}";  				if (title == "Other Other")  				{  					title = "Custom Profile".Localize();  				}    				row.AddChild(new TextWidget(title' pointSize: 9)  				{  					Margin = new BorderDouble(0' 4' 10' 4)'  					TextColor = ActiveTheme.Instance.PrimaryTextColor'  				});    				row.AddChild(new HorizontalSpacer());    				row.AddChild(new TextWidget(lastUpdateTime' pointSize: 9)  				{  					Margin = new BorderDouble(0' 4' 10' 4)'  					TextColor = ActiveTheme.Instance.PrimaryTextColor'  				});    				dataArea.AddChild(row);  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreatePrinterExtraControls,The following statement contains a magic number: if (isPrimaryView)  			{  				// OEM_LAYER_DATE:  				string lastUpdateTime = "March 1' 2016";  				if (ActiveSliceSettings.Instance?.OemLayer != null)  				{  					string fromCreatedDate = ActiveSliceSettings.Instance.OemLayer.ValueOrDefault(SettingsKey.created_date);  					try  					{  						if (!string.IsNullOrEmpty(fromCreatedDate))  						{  							DateTime time = Convert.ToDateTime(fromCreatedDate).ToLocalTime();  							lastUpdateTime = time.ToString("MMMM d' yyyy h:mm tt");  						}  					}  					catch  					{  					}  				}    				var row = new FlowLayoutWidget()  				{  					BackgroundColor = ActiveTheme.Instance.TertiaryBackgroundColor'  					Padding = new BorderDouble(5)'  					Margin = new BorderDouble(3' 20' 3' 0)'  					HAnchor = HAnchor.ParentLeftRight  				};    				string make = ActiveSliceSettings.Instance.GetValue(SettingsKey.make);  				string model = ActiveSliceSettings.Instance.GetValue(SettingsKey.model);    				string title = $"{make} {model}";  				if (title == "Other Other")  				{  					title = "Custom Profile".Localize();  				}    				row.AddChild(new TextWidget(title' pointSize: 9)  				{  					Margin = new BorderDouble(0' 4' 10' 4)'  					TextColor = ActiveTheme.Instance.PrimaryTextColor'  				});    				row.AddChild(new HorizontalSpacer());    				row.AddChild(new TextWidget(lastUpdateTime' pointSize: 9)  				{  					Margin = new BorderDouble(0' 4' 10' 4)'  					TextColor = ActiveTheme.Instance.PrimaryTextColor'  				});    				dataArea.AddChild(row);  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreatePrinterExtraControls,The following statement contains a magic number: if (isPrimaryView)  			{  				// OEM_LAYER_DATE:  				string lastUpdateTime = "March 1' 2016";  				if (ActiveSliceSettings.Instance?.OemLayer != null)  				{  					string fromCreatedDate = ActiveSliceSettings.Instance.OemLayer.ValueOrDefault(SettingsKey.created_date);  					try  					{  						if (!string.IsNullOrEmpty(fromCreatedDate))  						{  							DateTime time = Convert.ToDateTime(fromCreatedDate).ToLocalTime();  							lastUpdateTime = time.ToString("MMMM d' yyyy h:mm tt");  						}  					}  					catch  					{  					}  				}    				var row = new FlowLayoutWidget()  				{  					BackgroundColor = ActiveTheme.Instance.TertiaryBackgroundColor'  					Padding = new BorderDouble(5)'  					Margin = new BorderDouble(3' 20' 3' 0)'  					HAnchor = HAnchor.ParentLeftRight  				};    				string make = ActiveSliceSettings.Instance.GetValue(SettingsKey.make);  				string model = ActiveSliceSettings.Instance.GetValue(SettingsKey.model);    				string title = $"{make} {model}";  				if (title == "Other Other")  				{  					title = "Custom Profile".Localize();  				}    				row.AddChild(new TextWidget(title' pointSize: 9)  				{  					Margin = new BorderDouble(0' 4' 10' 4)'  					TextColor = ActiveTheme.Instance.PrimaryTextColor'  				});    				row.AddChild(new HorizontalSpacer());    				row.AddChild(new TextWidget(lastUpdateTime' pointSize: 9)  				{  					Margin = new BorderDouble(0' 4' 10' 4)'  					TextColor = ActiveTheme.Instance.PrimaryTextColor'  				});    				dataArea.AddChild(row);  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreatePrinterExtraControls,The following statement contains a magic number: if (isPrimaryView)  			{  				// OEM_LAYER_DATE:  				string lastUpdateTime = "March 1' 2016";  				if (ActiveSliceSettings.Instance?.OemLayer != null)  				{  					string fromCreatedDate = ActiveSliceSettings.Instance.OemLayer.ValueOrDefault(SettingsKey.created_date);  					try  					{  						if (!string.IsNullOrEmpty(fromCreatedDate))  						{  							DateTime time = Convert.ToDateTime(fromCreatedDate).ToLocalTime();  							lastUpdateTime = time.ToString("MMMM d' yyyy h:mm tt");  						}  					}  					catch  					{  					}  				}    				var row = new FlowLayoutWidget()  				{  					BackgroundColor = ActiveTheme.Instance.TertiaryBackgroundColor'  					Padding = new BorderDouble(5)'  					Margin = new BorderDouble(3' 20' 3' 0)'  					HAnchor = HAnchor.ParentLeftRight  				};    				string make = ActiveSliceSettings.Instance.GetValue(SettingsKey.make);  				string model = ActiveSliceSettings.Instance.GetValue(SettingsKey.model);    				string title = $"{make} {model}";  				if (title == "Other Other")  				{  					title = "Custom Profile".Localize();  				}    				row.AddChild(new TextWidget(title' pointSize: 9)  				{  					Margin = new BorderDouble(0' 4' 10' 4)'  					TextColor = ActiveTheme.Instance.PrimaryTextColor'  				});    				row.AddChild(new HorizontalSpacer());    				row.AddChild(new TextWidget(lastUpdateTime' pointSize: 9)  				{  					Margin = new BorderDouble(0' 4' 10' 4)'  					TextColor = ActiveTheme.Instance.PrimaryTextColor'  				});    				dataArea.AddChild(row);  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreatePrinterExtraControls,The following statement contains a magic number: if (isPrimaryView)  			{  				// OEM_LAYER_DATE:  				string lastUpdateTime = "March 1' 2016";  				if (ActiveSliceSettings.Instance?.OemLayer != null)  				{  					string fromCreatedDate = ActiveSliceSettings.Instance.OemLayer.ValueOrDefault(SettingsKey.created_date);  					try  					{  						if (!string.IsNullOrEmpty(fromCreatedDate))  						{  							DateTime time = Convert.ToDateTime(fromCreatedDate).ToLocalTime();  							lastUpdateTime = time.ToString("MMMM d' yyyy h:mm tt");  						}  					}  					catch  					{  					}  				}    				var row = new FlowLayoutWidget()  				{  					BackgroundColor = ActiveTheme.Instance.TertiaryBackgroundColor'  					Padding = new BorderDouble(5)'  					Margin = new BorderDouble(3' 20' 3' 0)'  					HAnchor = HAnchor.ParentLeftRight  				};    				string make = ActiveSliceSettings.Instance.GetValue(SettingsKey.make);  				string model = ActiveSliceSettings.Instance.GetValue(SettingsKey.model);    				string title = $"{make} {model}";  				if (title == "Other Other")  				{  					title = "Custom Profile".Localize();  				}    				row.AddChild(new TextWidget(title' pointSize: 9)  				{  					Margin = new BorderDouble(0' 4' 10' 4)'  					TextColor = ActiveTheme.Instance.PrimaryTextColor'  				});    				row.AddChild(new HorizontalSpacer());    				row.AddChild(new TextWidget(lastUpdateTime' pointSize: 9)  				{  					Margin = new BorderDouble(0' 4' 10' 4)'  					TextColor = ActiveTheme.Instance.PrimaryTextColor'  				});    				dataArea.AddChild(row);  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreatePrinterExtraControls,The following statement contains a magic number: if (isPrimaryView)  			{  				// OEM_LAYER_DATE:  				string lastUpdateTime = "March 1' 2016";  				if (ActiveSliceSettings.Instance?.OemLayer != null)  				{  					string fromCreatedDate = ActiveSliceSettings.Instance.OemLayer.ValueOrDefault(SettingsKey.created_date);  					try  					{  						if (!string.IsNullOrEmpty(fromCreatedDate))  						{  							DateTime time = Convert.ToDateTime(fromCreatedDate).ToLocalTime();  							lastUpdateTime = time.ToString("MMMM d' yyyy h:mm tt");  						}  					}  					catch  					{  					}  				}    				var row = new FlowLayoutWidget()  				{  					BackgroundColor = ActiveTheme.Instance.TertiaryBackgroundColor'  					Padding = new BorderDouble(5)'  					Margin = new BorderDouble(3' 20' 3' 0)'  					HAnchor = HAnchor.ParentLeftRight  				};    				string make = ActiveSliceSettings.Instance.GetValue(SettingsKey.make);  				string model = ActiveSliceSettings.Instance.GetValue(SettingsKey.model);    				string title = $"{make} {model}";  				if (title == "Other Other")  				{  					title = "Custom Profile".Localize();  				}    				row.AddChild(new TextWidget(title' pointSize: 9)  				{  					Margin = new BorderDouble(0' 4' 10' 4)'  					TextColor = ActiveTheme.Instance.PrimaryTextColor'  				});    				row.AddChild(new HorizontalSpacer());    				row.AddChild(new TextWidget(lastUpdateTime' pointSize: 9)  				{  					Margin = new BorderDouble(0' 4' 10' 4)'  					TextColor = ActiveTheme.Instance.PrimaryTextColor'  				});    				dataArea.AddChild(row);  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreatePrinterExtraControls,The following statement contains a magic number: if (isPrimaryView)  			{  				// OEM_LAYER_DATE:  				string lastUpdateTime = "March 1' 2016";  				if (ActiveSliceSettings.Instance?.OemLayer != null)  				{  					string fromCreatedDate = ActiveSliceSettings.Instance.OemLayer.ValueOrDefault(SettingsKey.created_date);  					try  					{  						if (!string.IsNullOrEmpty(fromCreatedDate))  						{  							DateTime time = Convert.ToDateTime(fromCreatedDate).ToLocalTime();  							lastUpdateTime = time.ToString("MMMM d' yyyy h:mm tt");  						}  					}  					catch  					{  					}  				}    				var row = new FlowLayoutWidget()  				{  					BackgroundColor = ActiveTheme.Instance.TertiaryBackgroundColor'  					Padding = new BorderDouble(5)'  					Margin = new BorderDouble(3' 20' 3' 0)'  					HAnchor = HAnchor.ParentLeftRight  				};    				string make = ActiveSliceSettings.Instance.GetValue(SettingsKey.make);  				string model = ActiveSliceSettings.Instance.GetValue(SettingsKey.model);    				string title = $"{make} {model}";  				if (title == "Other Other")  				{  					title = "Custom Profile".Localize();  				}    				row.AddChild(new TextWidget(title' pointSize: 9)  				{  					Margin = new BorderDouble(0' 4' 10' 4)'  					TextColor = ActiveTheme.Instance.PrimaryTextColor'  				});    				row.AddChild(new HorizontalSpacer());    				row.AddChild(new TextWidget(lastUpdateTime' pointSize: 9)  				{  					Margin = new BorderDouble(0' 4' 10' 4)'  					TextColor = ActiveTheme.Instance.PrimaryTextColor'  				});    				dataArea.AddChild(row);  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreatePrinterExtraControls,The following statement contains a magic number: if (isPrimaryView)  			{  				// OEM_LAYER_DATE:  				string lastUpdateTime = "March 1' 2016";  				if (ActiveSliceSettings.Instance?.OemLayer != null)  				{  					string fromCreatedDate = ActiveSliceSettings.Instance.OemLayer.ValueOrDefault(SettingsKey.created_date);  					try  					{  						if (!string.IsNullOrEmpty(fromCreatedDate))  						{  							DateTime time = Convert.ToDateTime(fromCreatedDate).ToLocalTime();  							lastUpdateTime = time.ToString("MMMM d' yyyy h:mm tt");  						}  					}  					catch  					{  					}  				}    				var row = new FlowLayoutWidget()  				{  					BackgroundColor = ActiveTheme.Instance.TertiaryBackgroundColor'  					Padding = new BorderDouble(5)'  					Margin = new BorderDouble(3' 20' 3' 0)'  					HAnchor = HAnchor.ParentLeftRight  				};    				string make = ActiveSliceSettings.Instance.GetValue(SettingsKey.make);  				string model = ActiveSliceSettings.Instance.GetValue(SettingsKey.model);    				string title = $"{make} {model}";  				if (title == "Other Other")  				{  					title = "Custom Profile".Localize();  				}    				row.AddChild(new TextWidget(title' pointSize: 9)  				{  					Margin = new BorderDouble(0' 4' 10' 4)'  					TextColor = ActiveTheme.Instance.PrimaryTextColor'  				});    				row.AddChild(new HorizontalSpacer());    				row.AddChild(new TextWidget(lastUpdateTime' pointSize: 9)  				{  					Margin = new BorderDouble(0' 4' 10' 4)'  					TextColor = ActiveTheme.Instance.PrimaryTextColor'  				});    				dataArea.AddChild(row);  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreatePrinterExtraControls,The following statement contains a magic number: if (isPrimaryView)  			{  				// OEM_LAYER_DATE:  				string lastUpdateTime = "March 1' 2016";  				if (ActiveSliceSettings.Instance?.OemLayer != null)  				{  					string fromCreatedDate = ActiveSliceSettings.Instance.OemLayer.ValueOrDefault(SettingsKey.created_date);  					try  					{  						if (!string.IsNullOrEmpty(fromCreatedDate))  						{  							DateTime time = Convert.ToDateTime(fromCreatedDate).ToLocalTime();  							lastUpdateTime = time.ToString("MMMM d' yyyy h:mm tt");  						}  					}  					catch  					{  					}  				}    				var row = new FlowLayoutWidget()  				{  					BackgroundColor = ActiveTheme.Instance.TertiaryBackgroundColor'  					Padding = new BorderDouble(5)'  					Margin = new BorderDouble(3' 20' 3' 0)'  					HAnchor = HAnchor.ParentLeftRight  				};    				string make = ActiveSliceSettings.Instance.GetValue(SettingsKey.make);  				string model = ActiveSliceSettings.Instance.GetValue(SettingsKey.model);    				string title = $"{make} {model}";  				if (title == "Other Other")  				{  					title = "Custom Profile".Localize();  				}    				row.AddChild(new TextWidget(title' pointSize: 9)  				{  					Margin = new BorderDouble(0' 4' 10' 4)'  					TextColor = ActiveTheme.Instance.PrimaryTextColor'  				});    				row.AddChild(new HorizontalSpacer());    				row.AddChild(new TextWidget(lastUpdateTime' pointSize: 9)  				{  					Margin = new BorderDouble(0' 4' 10' 4)'  					TextColor = ActiveTheme.Instance.PrimaryTextColor'  				});    				dataArea.AddChild(row);  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreatePrinterExtraControls,The following statement contains a magic number: {  				// This is a place holder type to allow us to put in the control that will allow the deletion of a printer profile  				TextImageButtonFactory buttonFactory = new TextImageButtonFactory();  				buttonFactory.borderWidth = 1;  				if (ActiveTheme.Instance.IsDarkTheme)  				{  					buttonFactory.normalBorderColor = new RGBA_Bytes(99' 99' 99);  				}  				else  				{  					buttonFactory.normalBorderColor = new RGBA_Bytes(140' 140' 140);  				}    				buttonFactory.normalTextColor = RGBA_Bytes.Red;  				var button = buttonFactory.Generate("Delete Printer".Localize());  				button.Name = "Delete Printer Button";  				button.HAnchor = HAnchor.ParentCenter;  				button.Click += (s' e) =>  				{  					StyledMessageBox.ShowMessageBox((doDelete) =>  					{  						if (doDelete)  						{  							ActiveSliceSettings.Instance.Helpers.SetMarkedForDelete(true);  						}  					}' "Are you sure you want to delete your currently selected printer?".Localize()' "Delete Printer?".Localize()' StyledMessageBox.MessageType.YES_NO' "Delete Printer".Localize());  				};  				dataArea.AddChild(button);  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreatePrinterExtraControls,The following statement contains a magic number: {  				// This is a place holder type to allow us to put in the control that will allow the deletion of a printer profile  				TextImageButtonFactory buttonFactory = new TextImageButtonFactory();  				buttonFactory.borderWidth = 1;  				if (ActiveTheme.Instance.IsDarkTheme)  				{  					buttonFactory.normalBorderColor = new RGBA_Bytes(99' 99' 99);  				}  				else  				{  					buttonFactory.normalBorderColor = new RGBA_Bytes(140' 140' 140);  				}    				buttonFactory.normalTextColor = RGBA_Bytes.Red;  				var button = buttonFactory.Generate("Delete Printer".Localize());  				button.Name = "Delete Printer Button";  				button.HAnchor = HAnchor.ParentCenter;  				button.Click += (s' e) =>  				{  					StyledMessageBox.ShowMessageBox((doDelete) =>  					{  						if (doDelete)  						{  							ActiveSliceSettings.Instance.Helpers.SetMarkedForDelete(true);  						}  					}' "Are you sure you want to delete your currently selected printer?".Localize()' "Delete Printer?".Localize()' StyledMessageBox.MessageType.YES_NO' "Delete Printer".Localize());  				};  				dataArea.AddChild(button);  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreatePrinterExtraControls,The following statement contains a magic number: {  				// This is a place holder type to allow us to put in the control that will allow the deletion of a printer profile  				TextImageButtonFactory buttonFactory = new TextImageButtonFactory();  				buttonFactory.borderWidth = 1;  				if (ActiveTheme.Instance.IsDarkTheme)  				{  					buttonFactory.normalBorderColor = new RGBA_Bytes(99' 99' 99);  				}  				else  				{  					buttonFactory.normalBorderColor = new RGBA_Bytes(140' 140' 140);  				}    				buttonFactory.normalTextColor = RGBA_Bytes.Red;  				var button = buttonFactory.Generate("Delete Printer".Localize());  				button.Name = "Delete Printer Button";  				button.HAnchor = HAnchor.ParentCenter;  				button.Click += (s' e) =>  				{  					StyledMessageBox.ShowMessageBox((doDelete) =>  					{  						if (doDelete)  						{  							ActiveSliceSettings.Instance.Helpers.SetMarkedForDelete(true);  						}  					}' "Are you sure you want to delete your currently selected printer?".Localize()' "Delete Printer?".Localize()' StyledMessageBox.MessageType.YES_NO' "Delete Printer".Localize());  				};  				dataArea.AddChild(button);  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreatePrinterExtraControls,The following statement contains a magic number: {  				// This is a place holder type to allow us to put in the control that will allow the deletion of a printer profile  				TextImageButtonFactory buttonFactory = new TextImageButtonFactory();  				buttonFactory.borderWidth = 1;  				if (ActiveTheme.Instance.IsDarkTheme)  				{  					buttonFactory.normalBorderColor = new RGBA_Bytes(99' 99' 99);  				}  				else  				{  					buttonFactory.normalBorderColor = new RGBA_Bytes(140' 140' 140);  				}    				buttonFactory.normalTextColor = RGBA_Bytes.Red;  				var button = buttonFactory.Generate("Delete Printer".Localize());  				button.Name = "Delete Printer Button";  				button.HAnchor = HAnchor.ParentCenter;  				button.Click += (s' e) =>  				{  					StyledMessageBox.ShowMessageBox((doDelete) =>  					{  						if (doDelete)  						{  							ActiveSliceSettings.Instance.Helpers.SetMarkedForDelete(true);  						}  					}' "Are you sure you want to delete your currently selected printer?".Localize()' "Delete Printer?".Localize()' StyledMessageBox.MessageType.YES_NO' "Delete Printer".Localize());  				};  				dataArea.AddChild(button);  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreatePrinterExtraControls,The following statement contains a magic number: {  				// This is a place holder type to allow us to put in the control that will allow the deletion of a printer profile  				TextImageButtonFactory buttonFactory = new TextImageButtonFactory();  				buttonFactory.borderWidth = 1;  				if (ActiveTheme.Instance.IsDarkTheme)  				{  					buttonFactory.normalBorderColor = new RGBA_Bytes(99' 99' 99);  				}  				else  				{  					buttonFactory.normalBorderColor = new RGBA_Bytes(140' 140' 140);  				}    				buttonFactory.normalTextColor = RGBA_Bytes.Red;  				var button = buttonFactory.Generate("Delete Printer".Localize());  				button.Name = "Delete Printer Button";  				button.HAnchor = HAnchor.ParentCenter;  				button.Click += (s' e) =>  				{  					StyledMessageBox.ShowMessageBox((doDelete) =>  					{  						if (doDelete)  						{  							ActiveSliceSettings.Instance.Helpers.SetMarkedForDelete(true);  						}  					}' "Are you sure you want to delete your currently selected printer?".Localize()' "Delete Printer?".Localize()' StyledMessageBox.MessageType.YES_NO' "Delete Printer".Localize());  				};  				dataArea.AddChild(button);  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreatePrinterExtraControls,The following statement contains a magic number: {  				// This is a place holder type to allow us to put in the control that will allow the deletion of a printer profile  				TextImageButtonFactory buttonFactory = new TextImageButtonFactory();  				buttonFactory.borderWidth = 1;  				if (ActiveTheme.Instance.IsDarkTheme)  				{  					buttonFactory.normalBorderColor = new RGBA_Bytes(99' 99' 99);  				}  				else  				{  					buttonFactory.normalBorderColor = new RGBA_Bytes(140' 140' 140);  				}    				buttonFactory.normalTextColor = RGBA_Bytes.Red;  				var button = buttonFactory.Generate("Delete Printer".Localize());  				button.Name = "Delete Printer Button";  				button.HAnchor = HAnchor.ParentCenter;  				button.Click += (s' e) =>  				{  					StyledMessageBox.ShowMessageBox((doDelete) =>  					{  						if (doDelete)  						{  							ActiveSliceSettings.Instance.Helpers.SetMarkedForDelete(true);  						}  					}' "Are you sure you want to delete your currently selected printer?".Localize()' "Delete Printer?".Localize()' StyledMessageBox.MessageType.YES_NO' "Delete Printer".Localize());  				};  				dataArea.AddChild(button);  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The following statement contains a magic number: GuiWidget unitsArea = new GuiWidget()  			{  				HAnchor = HAnchor.AbsolutePosition'  				VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  				Width = settingData.ShowAsOverride ? 50 * GuiWidget.DeviceScale : 5'  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The following statement contains a magic number: GuiWidget unitsArea = new GuiWidget()  			{  				HAnchor = HAnchor.AbsolutePosition'  				VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  				Width = settingData.ShowAsOverride ? 50 * GuiWidget.DeviceScale : 5'  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The following statement contains a magic number: GuiWidget restoreArea = new GuiWidget()  			{  				HAnchor = HAnchor.AbsolutePosition'  				VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  				Width = settingData.ShowAsOverride ? 30 * GuiWidget.DeviceScale : 0'  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The following statement contains a magic number: if (!PrinterSettings.KnownSettings.Contains(settingData.SlicerConfigName))  			{  				// the setting we think we are adding is not in the known settings it may have been deprecated  				TextWidget settingName = new TextWidget(String.Format("Setting '{0}' not found in known settings"' settingData.SlicerConfigName));  				settingName.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				//settingName.MinimumSize = new Vector2(minSettingNameWidth' settingName.MinimumSize.y);  				nameArea.AddChild(settingName);  				nameArea.BackgroundColor = RGBA_Bytes.Red;  			}  			else  			{  				int intEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int doubleEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int vectorXYEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int multiLineEditHeight = (int)(120 * GuiWidget.DeviceScale + .5);    				if (settingData.DataEditType != SliceSettingData.DataEditTypes.MULTI_LINE_TEXT)  				{  					var nameHolder = new GuiWidget()  					{  						Padding = new BorderDouble(0' 0' 5' 0)'  						VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  						HAnchor = HAnchor.ParentLeftRight'  					};    					nameHolder.AddChild(new WrappedTextWidget(settingData.PresentationName.Localize()' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor));    					nameArea.AddChild(nameHolder);  				}    				switch (settingData.DataEditType)  				{  					case SliceSettingData.DataEditTypes.INT:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();  							int currentValue;  							int.TryParse(sliceSettingValue' out currentValue);    							var intEditWidget = new MHNumberEdit(currentValue' pixelWidth: intEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Name = settingData.PresentationName + " Edit"'  							};  							intEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							content.AddChild(intEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' intEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								intEditWidget.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.DOUBLE:  						{  							double currentValue;  							double.TryParse(sliceSettingValue' out currentValue);    							var doubleEditWidget = new MHNumberEdit(currentValue' allowNegatives: true' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2 = 0;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.POSITIVE_DOUBLE:  						{  							const string multiValuesAreDiffernt = "-";  							FlowLayoutWidget content = new FlowLayoutWidget();    							var doubleEditWidget = new MHNumberEdit(0' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								Name = settingData.PresentationName + " Textbox"'  								SelectAllOnFocus = true  							};    							double currentValue;  							bool ChangesMultipleOtherSettings = settingData.SetSettingsOnChange.Count > 0;  							if (ChangesMultipleOtherSettings)  							{  								bool allTheSame = true;  								string setting = GetActiveValue(settingData.SetSettingsOnChange[0]["TargetSetting"]' layerCascade);  								for (int i = 1; i < settingData.SetSettingsOnChange.Count; i++)  								{  									string nextSetting = GetActiveValue(settingData.SetSettingsOnChange[i]["TargetSetting"]' layerCascade);  									if (setting != nextSetting)  									{  										allTheSame = false;  										break;  									}  								}    								if (allTheSame && setting.EndsWith("mm"))  								{  									double.TryParse(setting.Substring(0' setting.Length - 2)' out currentValue);  									doubleEditWidget.ActuallNumberEdit.Value = currentValue;  								}  								else  								{  									doubleEditWidget.ActuallNumberEdit.InternalNumberEdit.Text = multiValuesAreDiffernt;  								}  							}  							else // just set the setting normally  							{  								double.TryParse(sliceSettingValue' out currentValue);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue;  							}  							doubleEditWidget.ActuallNumberEdit.InternalTextEditWidget.MarkAsStartingState();  							  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								NumberEdit numberEdit = (NumberEdit)sender;  								// If this setting sets other settings' then do that.  								if (ChangesMultipleOtherSettings  									&& numberEdit.Text != multiValuesAreDiffernt)  								{  									{  										ActiveSliceSettings.Instance.SetValue(settingData.SetSettingsOnChange[0]["TargetSetting"]' numberEdit.Value.ToString() + "mm"' persistenceLayer);  									}  								}    								// also always save to the local setting  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' numberEdit.Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							content.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' doubleEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2 = 0;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.OFFSET:  						{  							double currentValue;  							double.TryParse(sliceSettingValue' out currentValue);  							var doubleEditWidget = new MHNumberEdit(currentValue' allowDecimals: true' allowNegatives: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true    							};  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.DOUBLE_OR_PERCENT:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();    							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: doubleEditWidth - 2' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								var textEditWidget = (TextEditWidget)sender;  								string text = textEditWidget.Text.Trim();    								bool isPercent = text.Contains("%");  								if (isPercent)  								{  									text = text.Substring(0' text.IndexOf("%"));  								}  								double result;  								double.TryParse(text' out result);  								text = result.ToString();  								if (isPercent)  								{  									text += "%";  								}  								textEditWidget.Text = text;  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' textEditWidget.Text' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							stringEdit.ActualTextEditWidget.InternalTextEditWidget.AllSelected += (sender' e) =>  							{  								// select everything up to the % (if present)  								InternalTextEditWidget textEditWidget = (InternalTextEditWidget)sender;  								int percentIndex = textEditWidget.Text.IndexOf("%");  								if (percentIndex != -1)  								{  									textEditWidget.SetSelection(0' percentIndex - 1);  								}  							};    							content.AddChild(stringEdit);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.INT_OR_MM:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();    							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: doubleEditWidth - 2' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};    							string startingText = stringEdit.Text;  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								TextEditWidget textEditWidget = (TextEditWidget)sender;  								// only validate when we lose focus  								if (!textEditWidget.ContainsFocus)  								{  									string text = textEditWidget.Text;  									text = text.Trim();  									bool isMm = text.Contains("mm");  									if (isMm)  									{  										text = text.Substring(0' text.IndexOf("mm"));  									}  									double result;  									double.TryParse(text' out result);  									text = result.ToString();  									if (isMm)  									{  										text += "mm";  									}  									else  									{  										result = (int)result;  										text = result.ToString();  									}  									textEditWidget.Text = text;  									startingText = stringEdit.Text;  								}  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' textEditWidget.Text' persistenceLayer);  								settingsRow.UpdateStyle();    								// make sure we are still looking for the final validation before saving.  								if (textEditWidget.ContainsFocus)  								{  									UiThread.RunOnIdle(() =>  									{  										string currentText = textEditWidget.Text;  										int cursorIndex = textEditWidget.InternalTextEditWidget.CharIndexToInsertBefore;  										textEditWidget.Text = startingText;  										textEditWidget.InternalTextEditWidget.MarkAsStartingState();  										textEditWidget.Text = currentText;  										textEditWidget.InternalTextEditWidget.CharIndexToInsertBefore = cursorIndex;  									});  								}  							};    							stringEdit.ActualTextEditWidget.InternalTextEditWidget.AllSelected += (sender' e) =>  							{  								// select everything up to the mm (if present)  								InternalTextEditWidget textEditWidget = (InternalTextEditWidget)sender;  								int mMIndex = textEditWidget.Text.IndexOf("mm");  								if (mMIndex != -1)  								{  									textEditWidget.SetSelection(0' mMIndex - 1);  								}  							};    							content.AddChild(stringEdit);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.CHECK_BOX:  						{  							var checkBoxWidget = new CheckBox("")  							{  								Name = settingData.PresentationName + " Checkbox"'  								ToolTipText = settingData.HelpText'  								VAnchor = Agg.UI.VAnchor.ParentBottom'  								TextColor = ActiveTheme.Instance.PrimaryTextColor'  								Checked = sliceSettingValue == "1"  							};  							checkBoxWidget.Click += (sender' e) =>  							{  								// SetValue should only be called when the checkbox is clicked. If this code makes its way into checkstatechanged  								// we end up adding a key back into the dictionary after we call .ClearValue' resulting in the blue override bar reappearing after  								// clearing a useroverride with the red x  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' checkBoxWidget.Checked ? "1" : "0"' persistenceLayer);  							};  							checkBoxWidget.CheckedStateChanged += (s' e) =>  							{  								// Linked settings should be updated in all cases (user clicked checkbox' user clicked clear)  								foreach (var setSettingsData in settingData.SetSettingsOnChange)  								{  									string targetValue;  									if (setSettingsData.TryGetValue(checkBoxWidget.Checked ? "OnValue" : "OffValue"' out targetValue))  									{  										ActiveSliceSettings.Instance.SetValue(setSettingsData["TargetSetting"]' targetValue' persistenceLayer);  									}  								}    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(checkBoxWidget);    							settingsRow.ValueChanged = (text) =>  							{  								checkBoxWidget.Checked = text == "1";  							};  						}  						break;    					case SliceSettingData.DataEditTypes.STRING:  						{  							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: settingData.ShowAsOverride ? 120 : 200' tabIndex: tabIndexForItem++)  							{  								Name = settingData.PresentationName + " Edit"'  							};  							stringEdit.ToolTipText = settingData.HelpText;  							  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((TextEditWidget)sender).Text' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							dataArea.AddChild(stringEdit);    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.MULTI_LINE_TEXT:  						{  							string convertedNewLines = sliceSettingValue.Replace("\\n"' "\n");  							var stringEdit = new MHTextEditWidget(convertedNewLines' pixelWidth: 320' pixelHeight: multiLineEditHeight' multiLine: true' tabIndex: tabIndexForItem++' typeFace: ApplicationController.MonoSpacedTypeFace)  							{  								HAnchor = HAnchor.ParentLeftRight'  							};    							stringEdit.DrawFromHintedCache();    							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((TextEditWidget)sender).Text.Replace("\n"' "\\n")' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							nameArea.HAnchor = HAnchor.AbsolutePosition;  							nameArea.Width = 0;  							dataArea.AddChild(stringEdit);  							dataArea.HAnchor = HAnchor.ParentLeftRight;    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text.Replace("\\n"' "\n");  							};  						}  						break;    					case SliceSettingData.DataEditTypes.COM_PORT:  						{  #if __ANDROID__  							addControl = false;  #endif    							EventHandler localUnregisterEvents = null;    							bool canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect;  							// The COM_PORT control is unique in its approach to the SlicerConfigName. It uses "com_port" settings name to  							// bind to a context that will place it in the SliceSetting view but it binds its values to a machine  							// specific dictionary key that is not exposed in the UI. At runtime we lookup and store to '<machinename>_com_port'  							// ensuring that a single printer can be shared across different devices and we'll select the correct com port in each case  							var selectableOptions = new DropDownList("None".Localize()' maxHeight: 200)  							{  								ToolTipText = settingData.HelpText'  								Margin = new BorderDouble()'  								Name = "Serial Port Dropdown"'  								// Prevent droplist interaction when connected  								Enabled = canChangeComPort'  								TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150)'  								BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150)'  							};    							selectableOptions.Click += (s' e) =>  							{  								AddComMenuItems(settingData' persistenceLayer' settingsRow' selectableOptions);  							};    							AddComMenuItems(settingData' persistenceLayer' settingsRow' selectableOptions);    							dataArea.AddChild(selectableOptions);    							settingsRow.ValueChanged = (text) =>  							{  								// Lookup the machine specific comport value rather than the passed in text value  								selectableOptions.SelectedLabel = ActiveSliceSettings.Instance.Helpers.ComPort();  							};    							// Prevent droplist interaction when connected  							PrinterConnectionAndCommunication.Instance.CommunicationStateChanged.RegisterEvent((s' e) =>  							{  								canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect;  								selectableOptions.Enabled = canChangeComPort;  								selectableOptions.TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150);  								selectableOptions.BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150);  							}' ref localUnregisterEvents);    							// Release event listener on close  							selectableOptions.Closed += (s' e) =>  							{  								localUnregisterEvents?.Invoke(null' null);  							};  						}  						break;    					case SliceSettingData.DataEditTypes.LIST:  						{  							var selectableOptions = new DropDownList("None".Localize()' maxHeight: 200)  							{  								ToolTipText = settingData.HelpText'  								Margin = new BorderDouble()  							};    							foreach (string listItem in settingData.ExtraSettings.Split('''))  							{  								MenuItem newItem = selectableOptions.AddItem(listItem);  								if (newItem.Text == sliceSettingValue)  								{  									selectableOptions.SelectedLabel = sliceSettingValue;  								}    								newItem.Selected += (sender' e) =>  								{  									MenuItem menuItem = ((MenuItem)sender);  									ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' menuItem.Text' persistenceLayer);    									settingsRow.UpdateStyle();  								};  							}    							dataArea.AddChild(selectableOptions);    							settingsRow.ValueChanged = (text) =>  							{  								selectableOptions.SelectedLabel = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.HARDWARE_PRESENT:  						{  							var checkBoxWidget = new CheckBox("")  							{  								Name = settingData.PresentationName + " Checkbox"'  								ToolTipText = settingData.HelpText'  								VAnchor = Agg.UI.VAnchor.ParentBottom'  								TextColor = ActiveTheme.Instance.PrimaryTextColor'  								Checked = sliceSettingValue == "1"  							};    							checkBoxWidget.Click += (sender' e) =>  							{  								bool isChecked = ((CheckBox)sender).Checked;  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' isChecked ? "1" : "0"' persistenceLayer);    								settingsRow.UpdateStyle();  							};    							dataArea.AddChild(checkBoxWidget);    							settingsRow.ValueChanged = (text) =>  							{  								checkBoxWidget.Checked = text == "1";  							};  						}  						break;    					case SliceSettingData.DataEditTypes.VECTOR2:  						{  							string[] xyValueStrings = sliceSettingValue.Split(''');  							if (xyValueStrings.Length != 2)  							{  								xyValueStrings = new string[] { "0"' "0" };  							}    							double currentXValue;  							double.TryParse(xyValueStrings[0]' out currentXValue);    							var xEditWidget = new MHNumberEdit(currentXValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};    							double currentYValue;  							double.TryParse(xyValueStrings[1]' out currentYValue);    							var yEditWidget = new MHNumberEdit(currentYValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Margin = new BorderDouble(20' 0' 0' 0)'  							};    							xEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(xEditWidget);  							dataArea.AddChild(new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  							{  								VAnchor = VAnchor.ParentCenter'  								Margin = new BorderDouble(5' 0)'  							});    							yEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(yEditWidget);  							var yLabel = new GuiWidget()  							{  								VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  								Padding = new BorderDouble(5' 0)'  								HAnchor = HAnchor.ParentLeftRight'  							};  							yLabel.AddChild(new WrappedTextWidget("Y"' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));  							unitsArea.AddChild(yLabel);    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2;  								string[] xyValueStrings2 = text.Split(''');  								if (xyValueStrings2.Length != 2)  								{  									xyValueStrings2 = new string[] { "0"' "0" };  								}    								double.TryParse(xyValueStrings2[0]' out currentValue2);  								xEditWidget.ActuallNumberEdit.Value = currentValue2;    								double.TryParse(xyValueStrings2[1]' out currentValue2);  								yEditWidget.ActuallNumberEdit.Value = currentValue2;  							};    						}  						break;    					case SliceSettingData.DataEditTypes.OFFSET2:  						{  							Vector2 offset = ActiveSliceSettings.Instance.Helpers.ExtruderOffset(extruderIndex);    							var xEditWidget = new MHNumberEdit(offset.x' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  							};    							var yEditWidget = new MHNumberEdit(offset.y' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Margin = new BorderDouble(20' 0' 0' 0)'  							};    							xEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								int extruderIndexLocal = extruderIndex;  								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(xEditWidget);  							dataArea.AddChild(new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  							{  								VAnchor = VAnchor.ParentCenter'  								Margin = new BorderDouble(5' 0)'  							});    							yEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								int extruderIndexLocal = extruderIndex;  								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(yEditWidget);  							var yLabel = new GuiWidget()  							{  								Padding = new BorderDouble(5' 0)'  								HAnchor = HAnchor.ParentLeftRight'  								VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  							};  							yLabel.AddChild(new WrappedTextWidget("Y"' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));  							unitsArea.AddChild(yLabel);    							settingsRow.ValueChanged = (text) =>  							{  								Vector2 offset2 = ActiveSliceSettings.Instance.Helpers.ExtruderOffset(extruderIndex);  								xEditWidget.ActuallNumberEdit.Value = offset2.x;  								yEditWidget.ActuallNumberEdit.Value = offset2.y;  							};  						}  						break;    					default:  						var missingSetting = new TextWidget(String.Format("Missing the setting for '{0}'."' settingData.DataEditType.ToString()))  						{  							TextColor = ActiveTheme.Instance.PrimaryTextColor'  							BackgroundColor = RGBA_Bytes.Red  						};  						dataArea.AddChild(missingSetting);  						break;  				}  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The following statement contains a magic number: if (!PrinterSettings.KnownSettings.Contains(settingData.SlicerConfigName))  			{  				// the setting we think we are adding is not in the known settings it may have been deprecated  				TextWidget settingName = new TextWidget(String.Format("Setting '{0}' not found in known settings"' settingData.SlicerConfigName));  				settingName.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				//settingName.MinimumSize = new Vector2(minSettingNameWidth' settingName.MinimumSize.y);  				nameArea.AddChild(settingName);  				nameArea.BackgroundColor = RGBA_Bytes.Red;  			}  			else  			{  				int intEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int doubleEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int vectorXYEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int multiLineEditHeight = (int)(120 * GuiWidget.DeviceScale + .5);    				if (settingData.DataEditType != SliceSettingData.DataEditTypes.MULTI_LINE_TEXT)  				{  					var nameHolder = new GuiWidget()  					{  						Padding = new BorderDouble(0' 0' 5' 0)'  						VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  						HAnchor = HAnchor.ParentLeftRight'  					};    					nameHolder.AddChild(new WrappedTextWidget(settingData.PresentationName.Localize()' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor));    					nameArea.AddChild(nameHolder);  				}    				switch (settingData.DataEditType)  				{  					case SliceSettingData.DataEditTypes.INT:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();  							int currentValue;  							int.TryParse(sliceSettingValue' out currentValue);    							var intEditWidget = new MHNumberEdit(currentValue' pixelWidth: intEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Name = settingData.PresentationName + " Edit"'  							};  							intEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							content.AddChild(intEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' intEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								intEditWidget.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.DOUBLE:  						{  							double currentValue;  							double.TryParse(sliceSettingValue' out currentValue);    							var doubleEditWidget = new MHNumberEdit(currentValue' allowNegatives: true' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2 = 0;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.POSITIVE_DOUBLE:  						{  							const string multiValuesAreDiffernt = "-";  							FlowLayoutWidget content = new FlowLayoutWidget();    							var doubleEditWidget = new MHNumberEdit(0' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								Name = settingData.PresentationName + " Textbox"'  								SelectAllOnFocus = true  							};    							double currentValue;  							bool ChangesMultipleOtherSettings = settingData.SetSettingsOnChange.Count > 0;  							if (ChangesMultipleOtherSettings)  							{  								bool allTheSame = true;  								string setting = GetActiveValue(settingData.SetSettingsOnChange[0]["TargetSetting"]' layerCascade);  								for (int i = 1; i < settingData.SetSettingsOnChange.Count; i++)  								{  									string nextSetting = GetActiveValue(settingData.SetSettingsOnChange[i]["TargetSetting"]' layerCascade);  									if (setting != nextSetting)  									{  										allTheSame = false;  										break;  									}  								}    								if (allTheSame && setting.EndsWith("mm"))  								{  									double.TryParse(setting.Substring(0' setting.Length - 2)' out currentValue);  									doubleEditWidget.ActuallNumberEdit.Value = currentValue;  								}  								else  								{  									doubleEditWidget.ActuallNumberEdit.InternalNumberEdit.Text = multiValuesAreDiffernt;  								}  							}  							else // just set the setting normally  							{  								double.TryParse(sliceSettingValue' out currentValue);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue;  							}  							doubleEditWidget.ActuallNumberEdit.InternalTextEditWidget.MarkAsStartingState();  							  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								NumberEdit numberEdit = (NumberEdit)sender;  								// If this setting sets other settings' then do that.  								if (ChangesMultipleOtherSettings  									&& numberEdit.Text != multiValuesAreDiffernt)  								{  									{  										ActiveSliceSettings.Instance.SetValue(settingData.SetSettingsOnChange[0]["TargetSetting"]' numberEdit.Value.ToString() + "mm"' persistenceLayer);  									}  								}    								// also always save to the local setting  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' numberEdit.Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							content.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' doubleEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2 = 0;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.OFFSET:  						{  							double currentValue;  							double.TryParse(sliceSettingValue' out currentValue);  							var doubleEditWidget = new MHNumberEdit(currentValue' allowDecimals: true' allowNegatives: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true    							};  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.DOUBLE_OR_PERCENT:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();    							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: doubleEditWidth - 2' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								var textEditWidget = (TextEditWidget)sender;  								string text = textEditWidget.Text.Trim();    								bool isPercent = text.Contains("%");  								if (isPercent)  								{  									text = text.Substring(0' text.IndexOf("%"));  								}  								double result;  								double.TryParse(text' out result);  								text = result.ToString();  								if (isPercent)  								{  									text += "%";  								}  								textEditWidget.Text = text;  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' textEditWidget.Text' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							stringEdit.ActualTextEditWidget.InternalTextEditWidget.AllSelected += (sender' e) =>  							{  								// select everything up to the % (if present)  								InternalTextEditWidget textEditWidget = (InternalTextEditWidget)sender;  								int percentIndex = textEditWidget.Text.IndexOf("%");  								if (percentIndex != -1)  								{  									textEditWidget.SetSelection(0' percentIndex - 1);  								}  							};    							content.AddChild(stringEdit);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.INT_OR_MM:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();    							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: doubleEditWidth - 2' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};    							string startingText = stringEdit.Text;  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								TextEditWidget textEditWidget = (TextEditWidget)sender;  								// only validate when we lose focus  								if (!textEditWidget.ContainsFocus)  								{  									string text = textEditWidget.Text;  									text = text.Trim();  									bool isMm = text.Contains("mm");  									if (isMm)  									{  										text = text.Substring(0' text.IndexOf("mm"));  									}  									double result;  									double.TryParse(text' out result);  									text = result.ToString();  									if (isMm)  									{  										text += "mm";  									}  									else  									{  										result = (int)result;  										text = result.ToString();  									}  									textEditWidget.Text = text;  									startingText = stringEdit.Text;  								}  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' textEditWidget.Text' persistenceLayer);  								settingsRow.UpdateStyle();    								// make sure we are still looking for the final validation before saving.  								if (textEditWidget.ContainsFocus)  								{  									UiThread.RunOnIdle(() =>  									{  										string currentText = textEditWidget.Text;  										int cursorIndex = textEditWidget.InternalTextEditWidget.CharIndexToInsertBefore;  										textEditWidget.Text = startingText;  										textEditWidget.InternalTextEditWidget.MarkAsStartingState();  										textEditWidget.Text = currentText;  										textEditWidget.InternalTextEditWidget.CharIndexToInsertBefore = cursorIndex;  									});  								}  							};    							stringEdit.ActualTextEditWidget.InternalTextEditWidget.AllSelected += (sender' e) =>  							{  								// select everything up to the mm (if present)  								InternalTextEditWidget textEditWidget = (InternalTextEditWidget)sender;  								int mMIndex = textEditWidget.Text.IndexOf("mm");  								if (mMIndex != -1)  								{  									textEditWidget.SetSelection(0' mMIndex - 1);  								}  							};    							content.AddChild(stringEdit);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.CHECK_BOX:  						{  							var checkBoxWidget = new CheckBox("")  							{  								Name = settingData.PresentationName + " Checkbox"'  								ToolTipText = settingData.HelpText'  								VAnchor = Agg.UI.VAnchor.ParentBottom'  								TextColor = ActiveTheme.Instance.PrimaryTextColor'  								Checked = sliceSettingValue == "1"  							};  							checkBoxWidget.Click += (sender' e) =>  							{  								// SetValue should only be called when the checkbox is clicked. If this code makes its way into checkstatechanged  								// we end up adding a key back into the dictionary after we call .ClearValue' resulting in the blue override bar reappearing after  								// clearing a useroverride with the red x  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' checkBoxWidget.Checked ? "1" : "0"' persistenceLayer);  							};  							checkBoxWidget.CheckedStateChanged += (s' e) =>  							{  								// Linked settings should be updated in all cases (user clicked checkbox' user clicked clear)  								foreach (var setSettingsData in settingData.SetSettingsOnChange)  								{  									string targetValue;  									if (setSettingsData.TryGetValue(checkBoxWidget.Checked ? "OnValue" : "OffValue"' out targetValue))  									{  										ActiveSliceSettings.Instance.SetValue(setSettingsData["TargetSetting"]' targetValue' persistenceLayer);  									}  								}    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(checkBoxWidget);    							settingsRow.ValueChanged = (text) =>  							{  								checkBoxWidget.Checked = text == "1";  							};  						}  						break;    					case SliceSettingData.DataEditTypes.STRING:  						{  							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: settingData.ShowAsOverride ? 120 : 200' tabIndex: tabIndexForItem++)  							{  								Name = settingData.PresentationName + " Edit"'  							};  							stringEdit.ToolTipText = settingData.HelpText;  							  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((TextEditWidget)sender).Text' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							dataArea.AddChild(stringEdit);    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.MULTI_LINE_TEXT:  						{  							string convertedNewLines = sliceSettingValue.Replace("\\n"' "\n");  							var stringEdit = new MHTextEditWidget(convertedNewLines' pixelWidth: 320' pixelHeight: multiLineEditHeight' multiLine: true' tabIndex: tabIndexForItem++' typeFace: ApplicationController.MonoSpacedTypeFace)  							{  								HAnchor = HAnchor.ParentLeftRight'  							};    							stringEdit.DrawFromHintedCache();    							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((TextEditWidget)sender).Text.Replace("\n"' "\\n")' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							nameArea.HAnchor = HAnchor.AbsolutePosition;  							nameArea.Width = 0;  							dataArea.AddChild(stringEdit);  							dataArea.HAnchor = HAnchor.ParentLeftRight;    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text.Replace("\\n"' "\n");  							};  						}  						break;    					case SliceSettingData.DataEditTypes.COM_PORT:  						{  #if __ANDROID__  							addControl = false;  #endif    							EventHandler localUnregisterEvents = null;    							bool canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect;  							// The COM_PORT control is unique in its approach to the SlicerConfigName. It uses "com_port" settings name to  							// bind to a context that will place it in the SliceSetting view but it binds its values to a machine  							// specific dictionary key that is not exposed in the UI. At runtime we lookup and store to '<machinename>_com_port'  							// ensuring that a single printer can be shared across different devices and we'll select the correct com port in each case  							var selectableOptions = new DropDownList("None".Localize()' maxHeight: 200)  							{  								ToolTipText = settingData.HelpText'  								Margin = new BorderDouble()'  								Name = "Serial Port Dropdown"'  								// Prevent droplist interaction when connected  								Enabled = canChangeComPort'  								TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150)'  								BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150)'  							};    							selectableOptions.Click += (s' e) =>  							{  								AddComMenuItems(settingData' persistenceLayer' settingsRow' selectableOptions);  							};    							AddComMenuItems(settingData' persistenceLayer' settingsRow' selectableOptions);    							dataArea.AddChild(selectableOptions);    							settingsRow.ValueChanged = (text) =>  							{  								// Lookup the machine specific comport value rather than the passed in text value  								selectableOptions.SelectedLabel = ActiveSliceSettings.Instance.Helpers.ComPort();  							};    							// Prevent droplist interaction when connected  							PrinterConnectionAndCommunication.Instance.CommunicationStateChanged.RegisterEvent((s' e) =>  							{  								canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect;  								selectableOptions.Enabled = canChangeComPort;  								selectableOptions.TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150);  								selectableOptions.BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150);  							}' ref localUnregisterEvents);    							// Release event listener on close  							selectableOptions.Closed += (s' e) =>  							{  								localUnregisterEvents?.Invoke(null' null);  							};  						}  						break;    					case SliceSettingData.DataEditTypes.LIST:  						{  							var selectableOptions = new DropDownList("None".Localize()' maxHeight: 200)  							{  								ToolTipText = settingData.HelpText'  								Margin = new BorderDouble()  							};    							foreach (string listItem in settingData.ExtraSettings.Split('''))  							{  								MenuItem newItem = selectableOptions.AddItem(listItem);  								if (newItem.Text == sliceSettingValue)  								{  									selectableOptions.SelectedLabel = sliceSettingValue;  								}    								newItem.Selected += (sender' e) =>  								{  									MenuItem menuItem = ((MenuItem)sender);  									ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' menuItem.Text' persistenceLayer);    									settingsRow.UpdateStyle();  								};  							}    							dataArea.AddChild(selectableOptions);    							settingsRow.ValueChanged = (text) =>  							{  								selectableOptions.SelectedLabel = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.HARDWARE_PRESENT:  						{  							var checkBoxWidget = new CheckBox("")  							{  								Name = settingData.PresentationName + " Checkbox"'  								ToolTipText = settingData.HelpText'  								VAnchor = Agg.UI.VAnchor.ParentBottom'  								TextColor = ActiveTheme.Instance.PrimaryTextColor'  								Checked = sliceSettingValue == "1"  							};    							checkBoxWidget.Click += (sender' e) =>  							{  								bool isChecked = ((CheckBox)sender).Checked;  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' isChecked ? "1" : "0"' persistenceLayer);    								settingsRow.UpdateStyle();  							};    							dataArea.AddChild(checkBoxWidget);    							settingsRow.ValueChanged = (text) =>  							{  								checkBoxWidget.Checked = text == "1";  							};  						}  						break;    					case SliceSettingData.DataEditTypes.VECTOR2:  						{  							string[] xyValueStrings = sliceSettingValue.Split(''');  							if (xyValueStrings.Length != 2)  							{  								xyValueStrings = new string[] { "0"' "0" };  							}    							double currentXValue;  							double.TryParse(xyValueStrings[0]' out currentXValue);    							var xEditWidget = new MHNumberEdit(currentXValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};    							double currentYValue;  							double.TryParse(xyValueStrings[1]' out currentYValue);    							var yEditWidget = new MHNumberEdit(currentYValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Margin = new BorderDouble(20' 0' 0' 0)'  							};    							xEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(xEditWidget);  							dataArea.AddChild(new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  							{  								VAnchor = VAnchor.ParentCenter'  								Margin = new BorderDouble(5' 0)'  							});    							yEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(yEditWidget);  							var yLabel = new GuiWidget()  							{  								VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  								Padding = new BorderDouble(5' 0)'  								HAnchor = HAnchor.ParentLeftRight'  							};  							yLabel.AddChild(new WrappedTextWidget("Y"' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));  							unitsArea.AddChild(yLabel);    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2;  								string[] xyValueStrings2 = text.Split(''');  								if (xyValueStrings2.Length != 2)  								{  									xyValueStrings2 = new string[] { "0"' "0" };  								}    								double.TryParse(xyValueStrings2[0]' out currentValue2);  								xEditWidget.ActuallNumberEdit.Value = currentValue2;    								double.TryParse(xyValueStrings2[1]' out currentValue2);  								yEditWidget.ActuallNumberEdit.Value = currentValue2;  							};    						}  						break;    					case SliceSettingData.DataEditTypes.OFFSET2:  						{  							Vector2 offset = ActiveSliceSettings.Instance.Helpers.ExtruderOffset(extruderIndex);    							var xEditWidget = new MHNumberEdit(offset.x' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  							};    							var yEditWidget = new MHNumberEdit(offset.y' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Margin = new BorderDouble(20' 0' 0' 0)'  							};    							xEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								int extruderIndexLocal = extruderIndex;  								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(xEditWidget);  							dataArea.AddChild(new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  							{  								VAnchor = VAnchor.ParentCenter'  								Margin = new BorderDouble(5' 0)'  							});    							yEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								int extruderIndexLocal = extruderIndex;  								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(yEditWidget);  							var yLabel = new GuiWidget()  							{  								Padding = new BorderDouble(5' 0)'  								HAnchor = HAnchor.ParentLeftRight'  								VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  							};  							yLabel.AddChild(new WrappedTextWidget("Y"' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));  							unitsArea.AddChild(yLabel);    							settingsRow.ValueChanged = (text) =>  							{  								Vector2 offset2 = ActiveSliceSettings.Instance.Helpers.ExtruderOffset(extruderIndex);  								xEditWidget.ActuallNumberEdit.Value = offset2.x;  								yEditWidget.ActuallNumberEdit.Value = offset2.y;  							};  						}  						break;    					default:  						var missingSetting = new TextWidget(String.Format("Missing the setting for '{0}'."' settingData.DataEditType.ToString()))  						{  							TextColor = ActiveTheme.Instance.PrimaryTextColor'  							BackgroundColor = RGBA_Bytes.Red  						};  						dataArea.AddChild(missingSetting);  						break;  				}  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The following statement contains a magic number: if (!PrinterSettings.KnownSettings.Contains(settingData.SlicerConfigName))  			{  				// the setting we think we are adding is not in the known settings it may have been deprecated  				TextWidget settingName = new TextWidget(String.Format("Setting '{0}' not found in known settings"' settingData.SlicerConfigName));  				settingName.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				//settingName.MinimumSize = new Vector2(minSettingNameWidth' settingName.MinimumSize.y);  				nameArea.AddChild(settingName);  				nameArea.BackgroundColor = RGBA_Bytes.Red;  			}  			else  			{  				int intEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int doubleEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int vectorXYEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int multiLineEditHeight = (int)(120 * GuiWidget.DeviceScale + .5);    				if (settingData.DataEditType != SliceSettingData.DataEditTypes.MULTI_LINE_TEXT)  				{  					var nameHolder = new GuiWidget()  					{  						Padding = new BorderDouble(0' 0' 5' 0)'  						VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  						HAnchor = HAnchor.ParentLeftRight'  					};    					nameHolder.AddChild(new WrappedTextWidget(settingData.PresentationName.Localize()' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor));    					nameArea.AddChild(nameHolder);  				}    				switch (settingData.DataEditType)  				{  					case SliceSettingData.DataEditTypes.INT:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();  							int currentValue;  							int.TryParse(sliceSettingValue' out currentValue);    							var intEditWidget = new MHNumberEdit(currentValue' pixelWidth: intEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Name = settingData.PresentationName + " Edit"'  							};  							intEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							content.AddChild(intEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' intEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								intEditWidget.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.DOUBLE:  						{  							double currentValue;  							double.TryParse(sliceSettingValue' out currentValue);    							var doubleEditWidget = new MHNumberEdit(currentValue' allowNegatives: true' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2 = 0;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.POSITIVE_DOUBLE:  						{  							const string multiValuesAreDiffernt = "-";  							FlowLayoutWidget content = new FlowLayoutWidget();    							var doubleEditWidget = new MHNumberEdit(0' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								Name = settingData.PresentationName + " Textbox"'  								SelectAllOnFocus = true  							};    							double currentValue;  							bool ChangesMultipleOtherSettings = settingData.SetSettingsOnChange.Count > 0;  							if (ChangesMultipleOtherSettings)  							{  								bool allTheSame = true;  								string setting = GetActiveValue(settingData.SetSettingsOnChange[0]["TargetSetting"]' layerCascade);  								for (int i = 1; i < settingData.SetSettingsOnChange.Count; i++)  								{  									string nextSetting = GetActiveValue(settingData.SetSettingsOnChange[i]["TargetSetting"]' layerCascade);  									if (setting != nextSetting)  									{  										allTheSame = false;  										break;  									}  								}    								if (allTheSame && setting.EndsWith("mm"))  								{  									double.TryParse(setting.Substring(0' setting.Length - 2)' out currentValue);  									doubleEditWidget.ActuallNumberEdit.Value = currentValue;  								}  								else  								{  									doubleEditWidget.ActuallNumberEdit.InternalNumberEdit.Text = multiValuesAreDiffernt;  								}  							}  							else // just set the setting normally  							{  								double.TryParse(sliceSettingValue' out currentValue);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue;  							}  							doubleEditWidget.ActuallNumberEdit.InternalTextEditWidget.MarkAsStartingState();  							  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								NumberEdit numberEdit = (NumberEdit)sender;  								// If this setting sets other settings' then do that.  								if (ChangesMultipleOtherSettings  									&& numberEdit.Text != multiValuesAreDiffernt)  								{  									{  										ActiveSliceSettings.Instance.SetValue(settingData.SetSettingsOnChange[0]["TargetSetting"]' numberEdit.Value.ToString() + "mm"' persistenceLayer);  									}  								}    								// also always save to the local setting  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' numberEdit.Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							content.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' doubleEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2 = 0;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.OFFSET:  						{  							double currentValue;  							double.TryParse(sliceSettingValue' out currentValue);  							var doubleEditWidget = new MHNumberEdit(currentValue' allowDecimals: true' allowNegatives: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true    							};  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.DOUBLE_OR_PERCENT:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();    							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: doubleEditWidth - 2' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								var textEditWidget = (TextEditWidget)sender;  								string text = textEditWidget.Text.Trim();    								bool isPercent = text.Contains("%");  								if (isPercent)  								{  									text = text.Substring(0' text.IndexOf("%"));  								}  								double result;  								double.TryParse(text' out result);  								text = result.ToString();  								if (isPercent)  								{  									text += "%";  								}  								textEditWidget.Text = text;  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' textEditWidget.Text' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							stringEdit.ActualTextEditWidget.InternalTextEditWidget.AllSelected += (sender' e) =>  							{  								// select everything up to the % (if present)  								InternalTextEditWidget textEditWidget = (InternalTextEditWidget)sender;  								int percentIndex = textEditWidget.Text.IndexOf("%");  								if (percentIndex != -1)  								{  									textEditWidget.SetSelection(0' percentIndex - 1);  								}  							};    							content.AddChild(stringEdit);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.INT_OR_MM:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();    							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: doubleEditWidth - 2' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};    							string startingText = stringEdit.Text;  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								TextEditWidget textEditWidget = (TextEditWidget)sender;  								// only validate when we lose focus  								if (!textEditWidget.ContainsFocus)  								{  									string text = textEditWidget.Text;  									text = text.Trim();  									bool isMm = text.Contains("mm");  									if (isMm)  									{  										text = text.Substring(0' text.IndexOf("mm"));  									}  									double result;  									double.TryParse(text' out result);  									text = result.ToString();  									if (isMm)  									{  										text += "mm";  									}  									else  									{  										result = (int)result;  										text = result.ToString();  									}  									textEditWidget.Text = text;  									startingText = stringEdit.Text;  								}  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' textEditWidget.Text' persistenceLayer);  								settingsRow.UpdateStyle();    								// make sure we are still looking for the final validation before saving.  								if (textEditWidget.ContainsFocus)  								{  									UiThread.RunOnIdle(() =>  									{  										string currentText = textEditWidget.Text;  										int cursorIndex = textEditWidget.InternalTextEditWidget.CharIndexToInsertBefore;  										textEditWidget.Text = startingText;  										textEditWidget.InternalTextEditWidget.MarkAsStartingState();  										textEditWidget.Text = currentText;  										textEditWidget.InternalTextEditWidget.CharIndexToInsertBefore = cursorIndex;  									});  								}  							};    							stringEdit.ActualTextEditWidget.InternalTextEditWidget.AllSelected += (sender' e) =>  							{  								// select everything up to the mm (if present)  								InternalTextEditWidget textEditWidget = (InternalTextEditWidget)sender;  								int mMIndex = textEditWidget.Text.IndexOf("mm");  								if (mMIndex != -1)  								{  									textEditWidget.SetSelection(0' mMIndex - 1);  								}  							};    							content.AddChild(stringEdit);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.CHECK_BOX:  						{  							var checkBoxWidget = new CheckBox("")  							{  								Name = settingData.PresentationName + " Checkbox"'  								ToolTipText = settingData.HelpText'  								VAnchor = Agg.UI.VAnchor.ParentBottom'  								TextColor = ActiveTheme.Instance.PrimaryTextColor'  								Checked = sliceSettingValue == "1"  							};  							checkBoxWidget.Click += (sender' e) =>  							{  								// SetValue should only be called when the checkbox is clicked. If this code makes its way into checkstatechanged  								// we end up adding a key back into the dictionary after we call .ClearValue' resulting in the blue override bar reappearing after  								// clearing a useroverride with the red x  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' checkBoxWidget.Checked ? "1" : "0"' persistenceLayer);  							};  							checkBoxWidget.CheckedStateChanged += (s' e) =>  							{  								// Linked settings should be updated in all cases (user clicked checkbox' user clicked clear)  								foreach (var setSettingsData in settingData.SetSettingsOnChange)  								{  									string targetValue;  									if (setSettingsData.TryGetValue(checkBoxWidget.Checked ? "OnValue" : "OffValue"' out targetValue))  									{  										ActiveSliceSettings.Instance.SetValue(setSettingsData["TargetSetting"]' targetValue' persistenceLayer);  									}  								}    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(checkBoxWidget);    							settingsRow.ValueChanged = (text) =>  							{  								checkBoxWidget.Checked = text == "1";  							};  						}  						break;    					case SliceSettingData.DataEditTypes.STRING:  						{  							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: settingData.ShowAsOverride ? 120 : 200' tabIndex: tabIndexForItem++)  							{  								Name = settingData.PresentationName + " Edit"'  							};  							stringEdit.ToolTipText = settingData.HelpText;  							  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((TextEditWidget)sender).Text' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							dataArea.AddChild(stringEdit);    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.MULTI_LINE_TEXT:  						{  							string convertedNewLines = sliceSettingValue.Replace("\\n"' "\n");  							var stringEdit = new MHTextEditWidget(convertedNewLines' pixelWidth: 320' pixelHeight: multiLineEditHeight' multiLine: true' tabIndex: tabIndexForItem++' typeFace: ApplicationController.MonoSpacedTypeFace)  							{  								HAnchor = HAnchor.ParentLeftRight'  							};    							stringEdit.DrawFromHintedCache();    							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((TextEditWidget)sender).Text.Replace("\n"' "\\n")' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							nameArea.HAnchor = HAnchor.AbsolutePosition;  							nameArea.Width = 0;  							dataArea.AddChild(stringEdit);  							dataArea.HAnchor = HAnchor.ParentLeftRight;    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text.Replace("\\n"' "\n");  							};  						}  						break;    					case SliceSettingData.DataEditTypes.COM_PORT:  						{  #if __ANDROID__  							addControl = false;  #endif    							EventHandler localUnregisterEvents = null;    							bool canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect;  							// The COM_PORT control is unique in its approach to the SlicerConfigName. It uses "com_port" settings name to  							// bind to a context that will place it in the SliceSetting view but it binds its values to a machine  							// specific dictionary key that is not exposed in the UI. At runtime we lookup and store to '<machinename>_com_port'  							// ensuring that a single printer can be shared across different devices and we'll select the correct com port in each case  							var selectableOptions = new DropDownList("None".Localize()' maxHeight: 200)  							{  								ToolTipText = settingData.HelpText'  								Margin = new BorderDouble()'  								Name = "Serial Port Dropdown"'  								// Prevent droplist interaction when connected  								Enabled = canChangeComPort'  								TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150)'  								BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150)'  							};    							selectableOptions.Click += (s' e) =>  							{  								AddComMenuItems(settingData' persistenceLayer' settingsRow' selectableOptions);  							};    							AddComMenuItems(settingData' persistenceLayer' settingsRow' selectableOptions);    							dataArea.AddChild(selectableOptions);    							settingsRow.ValueChanged = (text) =>  							{  								// Lookup the machine specific comport value rather than the passed in text value  								selectableOptions.SelectedLabel = ActiveSliceSettings.Instance.Helpers.ComPort();  							};    							// Prevent droplist interaction when connected  							PrinterConnectionAndCommunication.Instance.CommunicationStateChanged.RegisterEvent((s' e) =>  							{  								canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect;  								selectableOptions.Enabled = canChangeComPort;  								selectableOptions.TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150);  								selectableOptions.BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150);  							}' ref localUnregisterEvents);    							// Release event listener on close  							selectableOptions.Closed += (s' e) =>  							{  								localUnregisterEvents?.Invoke(null' null);  							};  						}  						break;    					case SliceSettingData.DataEditTypes.LIST:  						{  							var selectableOptions = new DropDownList("None".Localize()' maxHeight: 200)  							{  								ToolTipText = settingData.HelpText'  								Margin = new BorderDouble()  							};    							foreach (string listItem in settingData.ExtraSettings.Split('''))  							{  								MenuItem newItem = selectableOptions.AddItem(listItem);  								if (newItem.Text == sliceSettingValue)  								{  									selectableOptions.SelectedLabel = sliceSettingValue;  								}    								newItem.Selected += (sender' e) =>  								{  									MenuItem menuItem = ((MenuItem)sender);  									ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' menuItem.Text' persistenceLayer);    									settingsRow.UpdateStyle();  								};  							}    							dataArea.AddChild(selectableOptions);    							settingsRow.ValueChanged = (text) =>  							{  								selectableOptions.SelectedLabel = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.HARDWARE_PRESENT:  						{  							var checkBoxWidget = new CheckBox("")  							{  								Name = settingData.PresentationName + " Checkbox"'  								ToolTipText = settingData.HelpText'  								VAnchor = Agg.UI.VAnchor.ParentBottom'  								TextColor = ActiveTheme.Instance.PrimaryTextColor'  								Checked = sliceSettingValue == "1"  							};    							checkBoxWidget.Click += (sender' e) =>  							{  								bool isChecked = ((CheckBox)sender).Checked;  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' isChecked ? "1" : "0"' persistenceLayer);    								settingsRow.UpdateStyle();  							};    							dataArea.AddChild(checkBoxWidget);    							settingsRow.ValueChanged = (text) =>  							{  								checkBoxWidget.Checked = text == "1";  							};  						}  						break;    					case SliceSettingData.DataEditTypes.VECTOR2:  						{  							string[] xyValueStrings = sliceSettingValue.Split(''');  							if (xyValueStrings.Length != 2)  							{  								xyValueStrings = new string[] { "0"' "0" };  							}    							double currentXValue;  							double.TryParse(xyValueStrings[0]' out currentXValue);    							var xEditWidget = new MHNumberEdit(currentXValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};    							double currentYValue;  							double.TryParse(xyValueStrings[1]' out currentYValue);    							var yEditWidget = new MHNumberEdit(currentYValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Margin = new BorderDouble(20' 0' 0' 0)'  							};    							xEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(xEditWidget);  							dataArea.AddChild(new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  							{  								VAnchor = VAnchor.ParentCenter'  								Margin = new BorderDouble(5' 0)'  							});    							yEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(yEditWidget);  							var yLabel = new GuiWidget()  							{  								VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  								Padding = new BorderDouble(5' 0)'  								HAnchor = HAnchor.ParentLeftRight'  							};  							yLabel.AddChild(new WrappedTextWidget("Y"' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));  							unitsArea.AddChild(yLabel);    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2;  								string[] xyValueStrings2 = text.Split(''');  								if (xyValueStrings2.Length != 2)  								{  									xyValueStrings2 = new string[] { "0"' "0" };  								}    								double.TryParse(xyValueStrings2[0]' out currentValue2);  								xEditWidget.ActuallNumberEdit.Value = currentValue2;    								double.TryParse(xyValueStrings2[1]' out currentValue2);  								yEditWidget.ActuallNumberEdit.Value = currentValue2;  							};    						}  						break;    					case SliceSettingData.DataEditTypes.OFFSET2:  						{  							Vector2 offset = ActiveSliceSettings.Instance.Helpers.ExtruderOffset(extruderIndex);    							var xEditWidget = new MHNumberEdit(offset.x' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  							};    							var yEditWidget = new MHNumberEdit(offset.y' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Margin = new BorderDouble(20' 0' 0' 0)'  							};    							xEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								int extruderIndexLocal = extruderIndex;  								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(xEditWidget);  							dataArea.AddChild(new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  							{  								VAnchor = VAnchor.ParentCenter'  								Margin = new BorderDouble(5' 0)'  							});    							yEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								int extruderIndexLocal = extruderIndex;  								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(yEditWidget);  							var yLabel = new GuiWidget()  							{  								Padding = new BorderDouble(5' 0)'  								HAnchor = HAnchor.ParentLeftRight'  								VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  							};  							yLabel.AddChild(new WrappedTextWidget("Y"' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));  							unitsArea.AddChild(yLabel);    							settingsRow.ValueChanged = (text) =>  							{  								Vector2 offset2 = ActiveSliceSettings.Instance.Helpers.ExtruderOffset(extruderIndex);  								xEditWidget.ActuallNumberEdit.Value = offset2.x;  								yEditWidget.ActuallNumberEdit.Value = offset2.y;  							};  						}  						break;    					default:  						var missingSetting = new TextWidget(String.Format("Missing the setting for '{0}'."' settingData.DataEditType.ToString()))  						{  							TextColor = ActiveTheme.Instance.PrimaryTextColor'  							BackgroundColor = RGBA_Bytes.Red  						};  						dataArea.AddChild(missingSetting);  						break;  				}  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The following statement contains a magic number: if (!PrinterSettings.KnownSettings.Contains(settingData.SlicerConfigName))  			{  				// the setting we think we are adding is not in the known settings it may have been deprecated  				TextWidget settingName = new TextWidget(String.Format("Setting '{0}' not found in known settings"' settingData.SlicerConfigName));  				settingName.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				//settingName.MinimumSize = new Vector2(minSettingNameWidth' settingName.MinimumSize.y);  				nameArea.AddChild(settingName);  				nameArea.BackgroundColor = RGBA_Bytes.Red;  			}  			else  			{  				int intEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int doubleEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int vectorXYEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int multiLineEditHeight = (int)(120 * GuiWidget.DeviceScale + .5);    				if (settingData.DataEditType != SliceSettingData.DataEditTypes.MULTI_LINE_TEXT)  				{  					var nameHolder = new GuiWidget()  					{  						Padding = new BorderDouble(0' 0' 5' 0)'  						VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  						HAnchor = HAnchor.ParentLeftRight'  					};    					nameHolder.AddChild(new WrappedTextWidget(settingData.PresentationName.Localize()' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor));    					nameArea.AddChild(nameHolder);  				}    				switch (settingData.DataEditType)  				{  					case SliceSettingData.DataEditTypes.INT:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();  							int currentValue;  							int.TryParse(sliceSettingValue' out currentValue);    							var intEditWidget = new MHNumberEdit(currentValue' pixelWidth: intEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Name = settingData.PresentationName + " Edit"'  							};  							intEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							content.AddChild(intEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' intEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								intEditWidget.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.DOUBLE:  						{  							double currentValue;  							double.TryParse(sliceSettingValue' out currentValue);    							var doubleEditWidget = new MHNumberEdit(currentValue' allowNegatives: true' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2 = 0;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.POSITIVE_DOUBLE:  						{  							const string multiValuesAreDiffernt = "-";  							FlowLayoutWidget content = new FlowLayoutWidget();    							var doubleEditWidget = new MHNumberEdit(0' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								Name = settingData.PresentationName + " Textbox"'  								SelectAllOnFocus = true  							};    							double currentValue;  							bool ChangesMultipleOtherSettings = settingData.SetSettingsOnChange.Count > 0;  							if (ChangesMultipleOtherSettings)  							{  								bool allTheSame = true;  								string setting = GetActiveValue(settingData.SetSettingsOnChange[0]["TargetSetting"]' layerCascade);  								for (int i = 1; i < settingData.SetSettingsOnChange.Count; i++)  								{  									string nextSetting = GetActiveValue(settingData.SetSettingsOnChange[i]["TargetSetting"]' layerCascade);  									if (setting != nextSetting)  									{  										allTheSame = false;  										break;  									}  								}    								if (allTheSame && setting.EndsWith("mm"))  								{  									double.TryParse(setting.Substring(0' setting.Length - 2)' out currentValue);  									doubleEditWidget.ActuallNumberEdit.Value = currentValue;  								}  								else  								{  									doubleEditWidget.ActuallNumberEdit.InternalNumberEdit.Text = multiValuesAreDiffernt;  								}  							}  							else // just set the setting normally  							{  								double.TryParse(sliceSettingValue' out currentValue);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue;  							}  							doubleEditWidget.ActuallNumberEdit.InternalTextEditWidget.MarkAsStartingState();  							  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								NumberEdit numberEdit = (NumberEdit)sender;  								// If this setting sets other settings' then do that.  								if (ChangesMultipleOtherSettings  									&& numberEdit.Text != multiValuesAreDiffernt)  								{  									{  										ActiveSliceSettings.Instance.SetValue(settingData.SetSettingsOnChange[0]["TargetSetting"]' numberEdit.Value.ToString() + "mm"' persistenceLayer);  									}  								}    								// also always save to the local setting  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' numberEdit.Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							content.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' doubleEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2 = 0;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.OFFSET:  						{  							double currentValue;  							double.TryParse(sliceSettingValue' out currentValue);  							var doubleEditWidget = new MHNumberEdit(currentValue' allowDecimals: true' allowNegatives: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true    							};  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.DOUBLE_OR_PERCENT:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();    							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: doubleEditWidth - 2' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								var textEditWidget = (TextEditWidget)sender;  								string text = textEditWidget.Text.Trim();    								bool isPercent = text.Contains("%");  								if (isPercent)  								{  									text = text.Substring(0' text.IndexOf("%"));  								}  								double result;  								double.TryParse(text' out result);  								text = result.ToString();  								if (isPercent)  								{  									text += "%";  								}  								textEditWidget.Text = text;  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' textEditWidget.Text' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							stringEdit.ActualTextEditWidget.InternalTextEditWidget.AllSelected += (sender' e) =>  							{  								// select everything up to the % (if present)  								InternalTextEditWidget textEditWidget = (InternalTextEditWidget)sender;  								int percentIndex = textEditWidget.Text.IndexOf("%");  								if (percentIndex != -1)  								{  									textEditWidget.SetSelection(0' percentIndex - 1);  								}  							};    							content.AddChild(stringEdit);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.INT_OR_MM:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();    							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: doubleEditWidth - 2' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};    							string startingText = stringEdit.Text;  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								TextEditWidget textEditWidget = (TextEditWidget)sender;  								// only validate when we lose focus  								if (!textEditWidget.ContainsFocus)  								{  									string text = textEditWidget.Text;  									text = text.Trim();  									bool isMm = text.Contains("mm");  									if (isMm)  									{  										text = text.Substring(0' text.IndexOf("mm"));  									}  									double result;  									double.TryParse(text' out result);  									text = result.ToString();  									if (isMm)  									{  										text += "mm";  									}  									else  									{  										result = (int)result;  										text = result.ToString();  									}  									textEditWidget.Text = text;  									startingText = stringEdit.Text;  								}  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' textEditWidget.Text' persistenceLayer);  								settingsRow.UpdateStyle();    								// make sure we are still looking for the final validation before saving.  								if (textEditWidget.ContainsFocus)  								{  									UiThread.RunOnIdle(() =>  									{  										string currentText = textEditWidget.Text;  										int cursorIndex = textEditWidget.InternalTextEditWidget.CharIndexToInsertBefore;  										textEditWidget.Text = startingText;  										textEditWidget.InternalTextEditWidget.MarkAsStartingState();  										textEditWidget.Text = currentText;  										textEditWidget.InternalTextEditWidget.CharIndexToInsertBefore = cursorIndex;  									});  								}  							};    							stringEdit.ActualTextEditWidget.InternalTextEditWidget.AllSelected += (sender' e) =>  							{  								// select everything up to the mm (if present)  								InternalTextEditWidget textEditWidget = (InternalTextEditWidget)sender;  								int mMIndex = textEditWidget.Text.IndexOf("mm");  								if (mMIndex != -1)  								{  									textEditWidget.SetSelection(0' mMIndex - 1);  								}  							};    							content.AddChild(stringEdit);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.CHECK_BOX:  						{  							var checkBoxWidget = new CheckBox("")  							{  								Name = settingData.PresentationName + " Checkbox"'  								ToolTipText = settingData.HelpText'  								VAnchor = Agg.UI.VAnchor.ParentBottom'  								TextColor = ActiveTheme.Instance.PrimaryTextColor'  								Checked = sliceSettingValue == "1"  							};  							checkBoxWidget.Click += (sender' e) =>  							{  								// SetValue should only be called when the checkbox is clicked. If this code makes its way into checkstatechanged  								// we end up adding a key back into the dictionary after we call .ClearValue' resulting in the blue override bar reappearing after  								// clearing a useroverride with the red x  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' checkBoxWidget.Checked ? "1" : "0"' persistenceLayer);  							};  							checkBoxWidget.CheckedStateChanged += (s' e) =>  							{  								// Linked settings should be updated in all cases (user clicked checkbox' user clicked clear)  								foreach (var setSettingsData in settingData.SetSettingsOnChange)  								{  									string targetValue;  									if (setSettingsData.TryGetValue(checkBoxWidget.Checked ? "OnValue" : "OffValue"' out targetValue))  									{  										ActiveSliceSettings.Instance.SetValue(setSettingsData["TargetSetting"]' targetValue' persistenceLayer);  									}  								}    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(checkBoxWidget);    							settingsRow.ValueChanged = (text) =>  							{  								checkBoxWidget.Checked = text == "1";  							};  						}  						break;    					case SliceSettingData.DataEditTypes.STRING:  						{  							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: settingData.ShowAsOverride ? 120 : 200' tabIndex: tabIndexForItem++)  							{  								Name = settingData.PresentationName + " Edit"'  							};  							stringEdit.ToolTipText = settingData.HelpText;  							  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((TextEditWidget)sender).Text' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							dataArea.AddChild(stringEdit);    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.MULTI_LINE_TEXT:  						{  							string convertedNewLines = sliceSettingValue.Replace("\\n"' "\n");  							var stringEdit = new MHTextEditWidget(convertedNewLines' pixelWidth: 320' pixelHeight: multiLineEditHeight' multiLine: true' tabIndex: tabIndexForItem++' typeFace: ApplicationController.MonoSpacedTypeFace)  							{  								HAnchor = HAnchor.ParentLeftRight'  							};    							stringEdit.DrawFromHintedCache();    							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((TextEditWidget)sender).Text.Replace("\n"' "\\n")' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							nameArea.HAnchor = HAnchor.AbsolutePosition;  							nameArea.Width = 0;  							dataArea.AddChild(stringEdit);  							dataArea.HAnchor = HAnchor.ParentLeftRight;    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text.Replace("\\n"' "\n");  							};  						}  						break;    					case SliceSettingData.DataEditTypes.COM_PORT:  						{  #if __ANDROID__  							addControl = false;  #endif    							EventHandler localUnregisterEvents = null;    							bool canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect;  							// The COM_PORT control is unique in its approach to the SlicerConfigName. It uses "com_port" settings name to  							// bind to a context that will place it in the SliceSetting view but it binds its values to a machine  							// specific dictionary key that is not exposed in the UI. At runtime we lookup and store to '<machinename>_com_port'  							// ensuring that a single printer can be shared across different devices and we'll select the correct com port in each case  							var selectableOptions = new DropDownList("None".Localize()' maxHeight: 200)  							{  								ToolTipText = settingData.HelpText'  								Margin = new BorderDouble()'  								Name = "Serial Port Dropdown"'  								// Prevent droplist interaction when connected  								Enabled = canChangeComPort'  								TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150)'  								BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150)'  							};    							selectableOptions.Click += (s' e) =>  							{  								AddComMenuItems(settingData' persistenceLayer' settingsRow' selectableOptions);  							};    							AddComMenuItems(settingData' persistenceLayer' settingsRow' selectableOptions);    							dataArea.AddChild(selectableOptions);    							settingsRow.ValueChanged = (text) =>  							{  								// Lookup the machine specific comport value rather than the passed in text value  								selectableOptions.SelectedLabel = ActiveSliceSettings.Instance.Helpers.ComPort();  							};    							// Prevent droplist interaction when connected  							PrinterConnectionAndCommunication.Instance.CommunicationStateChanged.RegisterEvent((s' e) =>  							{  								canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect;  								selectableOptions.Enabled = canChangeComPort;  								selectableOptions.TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150);  								selectableOptions.BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150);  							}' ref localUnregisterEvents);    							// Release event listener on close  							selectableOptions.Closed += (s' e) =>  							{  								localUnregisterEvents?.Invoke(null' null);  							};  						}  						break;    					case SliceSettingData.DataEditTypes.LIST:  						{  							var selectableOptions = new DropDownList("None".Localize()' maxHeight: 200)  							{  								ToolTipText = settingData.HelpText'  								Margin = new BorderDouble()  							};    							foreach (string listItem in settingData.ExtraSettings.Split('''))  							{  								MenuItem newItem = selectableOptions.AddItem(listItem);  								if (newItem.Text == sliceSettingValue)  								{  									selectableOptions.SelectedLabel = sliceSettingValue;  								}    								newItem.Selected += (sender' e) =>  								{  									MenuItem menuItem = ((MenuItem)sender);  									ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' menuItem.Text' persistenceLayer);    									settingsRow.UpdateStyle();  								};  							}    							dataArea.AddChild(selectableOptions);    							settingsRow.ValueChanged = (text) =>  							{  								selectableOptions.SelectedLabel = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.HARDWARE_PRESENT:  						{  							var checkBoxWidget = new CheckBox("")  							{  								Name = settingData.PresentationName + " Checkbox"'  								ToolTipText = settingData.HelpText'  								VAnchor = Agg.UI.VAnchor.ParentBottom'  								TextColor = ActiveTheme.Instance.PrimaryTextColor'  								Checked = sliceSettingValue == "1"  							};    							checkBoxWidget.Click += (sender' e) =>  							{  								bool isChecked = ((CheckBox)sender).Checked;  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' isChecked ? "1" : "0"' persistenceLayer);    								settingsRow.UpdateStyle();  							};    							dataArea.AddChild(checkBoxWidget);    							settingsRow.ValueChanged = (text) =>  							{  								checkBoxWidget.Checked = text == "1";  							};  						}  						break;    					case SliceSettingData.DataEditTypes.VECTOR2:  						{  							string[] xyValueStrings = sliceSettingValue.Split(''');  							if (xyValueStrings.Length != 2)  							{  								xyValueStrings = new string[] { "0"' "0" };  							}    							double currentXValue;  							double.TryParse(xyValueStrings[0]' out currentXValue);    							var xEditWidget = new MHNumberEdit(currentXValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};    							double currentYValue;  							double.TryParse(xyValueStrings[1]' out currentYValue);    							var yEditWidget = new MHNumberEdit(currentYValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Margin = new BorderDouble(20' 0' 0' 0)'  							};    							xEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(xEditWidget);  							dataArea.AddChild(new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  							{  								VAnchor = VAnchor.ParentCenter'  								Margin = new BorderDouble(5' 0)'  							});    							yEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(yEditWidget);  							var yLabel = new GuiWidget()  							{  								VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  								Padding = new BorderDouble(5' 0)'  								HAnchor = HAnchor.ParentLeftRight'  							};  							yLabel.AddChild(new WrappedTextWidget("Y"' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));  							unitsArea.AddChild(yLabel);    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2;  								string[] xyValueStrings2 = text.Split(''');  								if (xyValueStrings2.Length != 2)  								{  									xyValueStrings2 = new string[] { "0"' "0" };  								}    								double.TryParse(xyValueStrings2[0]' out currentValue2);  								xEditWidget.ActuallNumberEdit.Value = currentValue2;    								double.TryParse(xyValueStrings2[1]' out currentValue2);  								yEditWidget.ActuallNumberEdit.Value = currentValue2;  							};    						}  						break;    					case SliceSettingData.DataEditTypes.OFFSET2:  						{  							Vector2 offset = ActiveSliceSettings.Instance.Helpers.ExtruderOffset(extruderIndex);    							var xEditWidget = new MHNumberEdit(offset.x' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  							};    							var yEditWidget = new MHNumberEdit(offset.y' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Margin = new BorderDouble(20' 0' 0' 0)'  							};    							xEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								int extruderIndexLocal = extruderIndex;  								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(xEditWidget);  							dataArea.AddChild(new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  							{  								VAnchor = VAnchor.ParentCenter'  								Margin = new BorderDouble(5' 0)'  							});    							yEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								int extruderIndexLocal = extruderIndex;  								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(yEditWidget);  							var yLabel = new GuiWidget()  							{  								Padding = new BorderDouble(5' 0)'  								HAnchor = HAnchor.ParentLeftRight'  								VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  							};  							yLabel.AddChild(new WrappedTextWidget("Y"' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));  							unitsArea.AddChild(yLabel);    							settingsRow.ValueChanged = (text) =>  							{  								Vector2 offset2 = ActiveSliceSettings.Instance.Helpers.ExtruderOffset(extruderIndex);  								xEditWidget.ActuallNumberEdit.Value = offset2.x;  								yEditWidget.ActuallNumberEdit.Value = offset2.y;  							};  						}  						break;    					default:  						var missingSetting = new TextWidget(String.Format("Missing the setting for '{0}'."' settingData.DataEditType.ToString()))  						{  							TextColor = ActiveTheme.Instance.PrimaryTextColor'  							BackgroundColor = RGBA_Bytes.Red  						};  						dataArea.AddChild(missingSetting);  						break;  				}  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The following statement contains a magic number: if (!PrinterSettings.KnownSettings.Contains(settingData.SlicerConfigName))  			{  				// the setting we think we are adding is not in the known settings it may have been deprecated  				TextWidget settingName = new TextWidget(String.Format("Setting '{0}' not found in known settings"' settingData.SlicerConfigName));  				settingName.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				//settingName.MinimumSize = new Vector2(minSettingNameWidth' settingName.MinimumSize.y);  				nameArea.AddChild(settingName);  				nameArea.BackgroundColor = RGBA_Bytes.Red;  			}  			else  			{  				int intEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int doubleEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int vectorXYEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int multiLineEditHeight = (int)(120 * GuiWidget.DeviceScale + .5);    				if (settingData.DataEditType != SliceSettingData.DataEditTypes.MULTI_LINE_TEXT)  				{  					var nameHolder = new GuiWidget()  					{  						Padding = new BorderDouble(0' 0' 5' 0)'  						VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  						HAnchor = HAnchor.ParentLeftRight'  					};    					nameHolder.AddChild(new WrappedTextWidget(settingData.PresentationName.Localize()' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor));    					nameArea.AddChild(nameHolder);  				}    				switch (settingData.DataEditType)  				{  					case SliceSettingData.DataEditTypes.INT:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();  							int currentValue;  							int.TryParse(sliceSettingValue' out currentValue);    							var intEditWidget = new MHNumberEdit(currentValue' pixelWidth: intEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Name = settingData.PresentationName + " Edit"'  							};  							intEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							content.AddChild(intEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' intEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								intEditWidget.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.DOUBLE:  						{  							double currentValue;  							double.TryParse(sliceSettingValue' out currentValue);    							var doubleEditWidget = new MHNumberEdit(currentValue' allowNegatives: true' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2 = 0;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.POSITIVE_DOUBLE:  						{  							const string multiValuesAreDiffernt = "-";  							FlowLayoutWidget content = new FlowLayoutWidget();    							var doubleEditWidget = new MHNumberEdit(0' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								Name = settingData.PresentationName + " Textbox"'  								SelectAllOnFocus = true  							};    							double currentValue;  							bool ChangesMultipleOtherSettings = settingData.SetSettingsOnChange.Count > 0;  							if (ChangesMultipleOtherSettings)  							{  								bool allTheSame = true;  								string setting = GetActiveValue(settingData.SetSettingsOnChange[0]["TargetSetting"]' layerCascade);  								for (int i = 1; i < settingData.SetSettingsOnChange.Count; i++)  								{  									string nextSetting = GetActiveValue(settingData.SetSettingsOnChange[i]["TargetSetting"]' layerCascade);  									if (setting != nextSetting)  									{  										allTheSame = false;  										break;  									}  								}    								if (allTheSame && setting.EndsWith("mm"))  								{  									double.TryParse(setting.Substring(0' setting.Length - 2)' out currentValue);  									doubleEditWidget.ActuallNumberEdit.Value = currentValue;  								}  								else  								{  									doubleEditWidget.ActuallNumberEdit.InternalNumberEdit.Text = multiValuesAreDiffernt;  								}  							}  							else // just set the setting normally  							{  								double.TryParse(sliceSettingValue' out currentValue);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue;  							}  							doubleEditWidget.ActuallNumberEdit.InternalTextEditWidget.MarkAsStartingState();  							  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								NumberEdit numberEdit = (NumberEdit)sender;  								// If this setting sets other settings' then do that.  								if (ChangesMultipleOtherSettings  									&& numberEdit.Text != multiValuesAreDiffernt)  								{  									{  										ActiveSliceSettings.Instance.SetValue(settingData.SetSettingsOnChange[0]["TargetSetting"]' numberEdit.Value.ToString() + "mm"' persistenceLayer);  									}  								}    								// also always save to the local setting  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' numberEdit.Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							content.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' doubleEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2 = 0;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.OFFSET:  						{  							double currentValue;  							double.TryParse(sliceSettingValue' out currentValue);  							var doubleEditWidget = new MHNumberEdit(currentValue' allowDecimals: true' allowNegatives: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true    							};  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.DOUBLE_OR_PERCENT:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();    							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: doubleEditWidth - 2' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								var textEditWidget = (TextEditWidget)sender;  								string text = textEditWidget.Text.Trim();    								bool isPercent = text.Contains("%");  								if (isPercent)  								{  									text = text.Substring(0' text.IndexOf("%"));  								}  								double result;  								double.TryParse(text' out result);  								text = result.ToString();  								if (isPercent)  								{  									text += "%";  								}  								textEditWidget.Text = text;  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' textEditWidget.Text' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							stringEdit.ActualTextEditWidget.InternalTextEditWidget.AllSelected += (sender' e) =>  							{  								// select everything up to the % (if present)  								InternalTextEditWidget textEditWidget = (InternalTextEditWidget)sender;  								int percentIndex = textEditWidget.Text.IndexOf("%");  								if (percentIndex != -1)  								{  									textEditWidget.SetSelection(0' percentIndex - 1);  								}  							};    							content.AddChild(stringEdit);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.INT_OR_MM:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();    							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: doubleEditWidth - 2' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};    							string startingText = stringEdit.Text;  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								TextEditWidget textEditWidget = (TextEditWidget)sender;  								// only validate when we lose focus  								if (!textEditWidget.ContainsFocus)  								{  									string text = textEditWidget.Text;  									text = text.Trim();  									bool isMm = text.Contains("mm");  									if (isMm)  									{  										text = text.Substring(0' text.IndexOf("mm"));  									}  									double result;  									double.TryParse(text' out result);  									text = result.ToString();  									if (isMm)  									{  										text += "mm";  									}  									else  									{  										result = (int)result;  										text = result.ToString();  									}  									textEditWidget.Text = text;  									startingText = stringEdit.Text;  								}  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' textEditWidget.Text' persistenceLayer);  								settingsRow.UpdateStyle();    								// make sure we are still looking for the final validation before saving.  								if (textEditWidget.ContainsFocus)  								{  									UiThread.RunOnIdle(() =>  									{  										string currentText = textEditWidget.Text;  										int cursorIndex = textEditWidget.InternalTextEditWidget.CharIndexToInsertBefore;  										textEditWidget.Text = startingText;  										textEditWidget.InternalTextEditWidget.MarkAsStartingState();  										textEditWidget.Text = currentText;  										textEditWidget.InternalTextEditWidget.CharIndexToInsertBefore = cursorIndex;  									});  								}  							};    							stringEdit.ActualTextEditWidget.InternalTextEditWidget.AllSelected += (sender' e) =>  							{  								// select everything up to the mm (if present)  								InternalTextEditWidget textEditWidget = (InternalTextEditWidget)sender;  								int mMIndex = textEditWidget.Text.IndexOf("mm");  								if (mMIndex != -1)  								{  									textEditWidget.SetSelection(0' mMIndex - 1);  								}  							};    							content.AddChild(stringEdit);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.CHECK_BOX:  						{  							var checkBoxWidget = new CheckBox("")  							{  								Name = settingData.PresentationName + " Checkbox"'  								ToolTipText = settingData.HelpText'  								VAnchor = Agg.UI.VAnchor.ParentBottom'  								TextColor = ActiveTheme.Instance.PrimaryTextColor'  								Checked = sliceSettingValue == "1"  							};  							checkBoxWidget.Click += (sender' e) =>  							{  								// SetValue should only be called when the checkbox is clicked. If this code makes its way into checkstatechanged  								// we end up adding a key back into the dictionary after we call .ClearValue' resulting in the blue override bar reappearing after  								// clearing a useroverride with the red x  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' checkBoxWidget.Checked ? "1" : "0"' persistenceLayer);  							};  							checkBoxWidget.CheckedStateChanged += (s' e) =>  							{  								// Linked settings should be updated in all cases (user clicked checkbox' user clicked clear)  								foreach (var setSettingsData in settingData.SetSettingsOnChange)  								{  									string targetValue;  									if (setSettingsData.TryGetValue(checkBoxWidget.Checked ? "OnValue" : "OffValue"' out targetValue))  									{  										ActiveSliceSettings.Instance.SetValue(setSettingsData["TargetSetting"]' targetValue' persistenceLayer);  									}  								}    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(checkBoxWidget);    							settingsRow.ValueChanged = (text) =>  							{  								checkBoxWidget.Checked = text == "1";  							};  						}  						break;    					case SliceSettingData.DataEditTypes.STRING:  						{  							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: settingData.ShowAsOverride ? 120 : 200' tabIndex: tabIndexForItem++)  							{  								Name = settingData.PresentationName + " Edit"'  							};  							stringEdit.ToolTipText = settingData.HelpText;  							  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((TextEditWidget)sender).Text' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							dataArea.AddChild(stringEdit);    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.MULTI_LINE_TEXT:  						{  							string convertedNewLines = sliceSettingValue.Replace("\\n"' "\n");  							var stringEdit = new MHTextEditWidget(convertedNewLines' pixelWidth: 320' pixelHeight: multiLineEditHeight' multiLine: true' tabIndex: tabIndexForItem++' typeFace: ApplicationController.MonoSpacedTypeFace)  							{  								HAnchor = HAnchor.ParentLeftRight'  							};    							stringEdit.DrawFromHintedCache();    							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((TextEditWidget)sender).Text.Replace("\n"' "\\n")' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							nameArea.HAnchor = HAnchor.AbsolutePosition;  							nameArea.Width = 0;  							dataArea.AddChild(stringEdit);  							dataArea.HAnchor = HAnchor.ParentLeftRight;    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text.Replace("\\n"' "\n");  							};  						}  						break;    					case SliceSettingData.DataEditTypes.COM_PORT:  						{  #if __ANDROID__  							addControl = false;  #endif    							EventHandler localUnregisterEvents = null;    							bool canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect;  							// The COM_PORT control is unique in its approach to the SlicerConfigName. It uses "com_port" settings name to  							// bind to a context that will place it in the SliceSetting view but it binds its values to a machine  							// specific dictionary key that is not exposed in the UI. At runtime we lookup and store to '<machinename>_com_port'  							// ensuring that a single printer can be shared across different devices and we'll select the correct com port in each case  							var selectableOptions = new DropDownList("None".Localize()' maxHeight: 200)  							{  								ToolTipText = settingData.HelpText'  								Margin = new BorderDouble()'  								Name = "Serial Port Dropdown"'  								// Prevent droplist interaction when connected  								Enabled = canChangeComPort'  								TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150)'  								BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150)'  							};    							selectableOptions.Click += (s' e) =>  							{  								AddComMenuItems(settingData' persistenceLayer' settingsRow' selectableOptions);  							};    							AddComMenuItems(settingData' persistenceLayer' settingsRow' selectableOptions);    							dataArea.AddChild(selectableOptions);    							settingsRow.ValueChanged = (text) =>  							{  								// Lookup the machine specific comport value rather than the passed in text value  								selectableOptions.SelectedLabel = ActiveSliceSettings.Instance.Helpers.ComPort();  							};    							// Prevent droplist interaction when connected  							PrinterConnectionAndCommunication.Instance.CommunicationStateChanged.RegisterEvent((s' e) =>  							{  								canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect;  								selectableOptions.Enabled = canChangeComPort;  								selectableOptions.TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150);  								selectableOptions.BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150);  							}' ref localUnregisterEvents);    							// Release event listener on close  							selectableOptions.Closed += (s' e) =>  							{  								localUnregisterEvents?.Invoke(null' null);  							};  						}  						break;    					case SliceSettingData.DataEditTypes.LIST:  						{  							var selectableOptions = new DropDownList("None".Localize()' maxHeight: 200)  							{  								ToolTipText = settingData.HelpText'  								Margin = new BorderDouble()  							};    							foreach (string listItem in settingData.ExtraSettings.Split('''))  							{  								MenuItem newItem = selectableOptions.AddItem(listItem);  								if (newItem.Text == sliceSettingValue)  								{  									selectableOptions.SelectedLabel = sliceSettingValue;  								}    								newItem.Selected += (sender' e) =>  								{  									MenuItem menuItem = ((MenuItem)sender);  									ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' menuItem.Text' persistenceLayer);    									settingsRow.UpdateStyle();  								};  							}    							dataArea.AddChild(selectableOptions);    							settingsRow.ValueChanged = (text) =>  							{  								selectableOptions.SelectedLabel = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.HARDWARE_PRESENT:  						{  							var checkBoxWidget = new CheckBox("")  							{  								Name = settingData.PresentationName + " Checkbox"'  								ToolTipText = settingData.HelpText'  								VAnchor = Agg.UI.VAnchor.ParentBottom'  								TextColor = ActiveTheme.Instance.PrimaryTextColor'  								Checked = sliceSettingValue == "1"  							};    							checkBoxWidget.Click += (sender' e) =>  							{  								bool isChecked = ((CheckBox)sender).Checked;  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' isChecked ? "1" : "0"' persistenceLayer);    								settingsRow.UpdateStyle();  							};    							dataArea.AddChild(checkBoxWidget);    							settingsRow.ValueChanged = (text) =>  							{  								checkBoxWidget.Checked = text == "1";  							};  						}  						break;    					case SliceSettingData.DataEditTypes.VECTOR2:  						{  							string[] xyValueStrings = sliceSettingValue.Split(''');  							if (xyValueStrings.Length != 2)  							{  								xyValueStrings = new string[] { "0"' "0" };  							}    							double currentXValue;  							double.TryParse(xyValueStrings[0]' out currentXValue);    							var xEditWidget = new MHNumberEdit(currentXValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};    							double currentYValue;  							double.TryParse(xyValueStrings[1]' out currentYValue);    							var yEditWidget = new MHNumberEdit(currentYValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Margin = new BorderDouble(20' 0' 0' 0)'  							};    							xEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(xEditWidget);  							dataArea.AddChild(new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  							{  								VAnchor = VAnchor.ParentCenter'  								Margin = new BorderDouble(5' 0)'  							});    							yEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(yEditWidget);  							var yLabel = new GuiWidget()  							{  								VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  								Padding = new BorderDouble(5' 0)'  								HAnchor = HAnchor.ParentLeftRight'  							};  							yLabel.AddChild(new WrappedTextWidget("Y"' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));  							unitsArea.AddChild(yLabel);    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2;  								string[] xyValueStrings2 = text.Split(''');  								if (xyValueStrings2.Length != 2)  								{  									xyValueStrings2 = new string[] { "0"' "0" };  								}    								double.TryParse(xyValueStrings2[0]' out currentValue2);  								xEditWidget.ActuallNumberEdit.Value = currentValue2;    								double.TryParse(xyValueStrings2[1]' out currentValue2);  								yEditWidget.ActuallNumberEdit.Value = currentValue2;  							};    						}  						break;    					case SliceSettingData.DataEditTypes.OFFSET2:  						{  							Vector2 offset = ActiveSliceSettings.Instance.Helpers.ExtruderOffset(extruderIndex);    							var xEditWidget = new MHNumberEdit(offset.x' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  							};    							var yEditWidget = new MHNumberEdit(offset.y' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Margin = new BorderDouble(20' 0' 0' 0)'  							};    							xEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								int extruderIndexLocal = extruderIndex;  								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(xEditWidget);  							dataArea.AddChild(new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  							{  								VAnchor = VAnchor.ParentCenter'  								Margin = new BorderDouble(5' 0)'  							});    							yEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								int extruderIndexLocal = extruderIndex;  								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(yEditWidget);  							var yLabel = new GuiWidget()  							{  								Padding = new BorderDouble(5' 0)'  								HAnchor = HAnchor.ParentLeftRight'  								VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  							};  							yLabel.AddChild(new WrappedTextWidget("Y"' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));  							unitsArea.AddChild(yLabel);    							settingsRow.ValueChanged = (text) =>  							{  								Vector2 offset2 = ActiveSliceSettings.Instance.Helpers.ExtruderOffset(extruderIndex);  								xEditWidget.ActuallNumberEdit.Value = offset2.x;  								yEditWidget.ActuallNumberEdit.Value = offset2.y;  							};  						}  						break;    					default:  						var missingSetting = new TextWidget(String.Format("Missing the setting for '{0}'."' settingData.DataEditType.ToString()))  						{  							TextColor = ActiveTheme.Instance.PrimaryTextColor'  							BackgroundColor = RGBA_Bytes.Red  						};  						dataArea.AddChild(missingSetting);  						break;  				}  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The following statement contains a magic number: if (!PrinterSettings.KnownSettings.Contains(settingData.SlicerConfigName))  			{  				// the setting we think we are adding is not in the known settings it may have been deprecated  				TextWidget settingName = new TextWidget(String.Format("Setting '{0}' not found in known settings"' settingData.SlicerConfigName));  				settingName.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				//settingName.MinimumSize = new Vector2(minSettingNameWidth' settingName.MinimumSize.y);  				nameArea.AddChild(settingName);  				nameArea.BackgroundColor = RGBA_Bytes.Red;  			}  			else  			{  				int intEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int doubleEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int vectorXYEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int multiLineEditHeight = (int)(120 * GuiWidget.DeviceScale + .5);    				if (settingData.DataEditType != SliceSettingData.DataEditTypes.MULTI_LINE_TEXT)  				{  					var nameHolder = new GuiWidget()  					{  						Padding = new BorderDouble(0' 0' 5' 0)'  						VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  						HAnchor = HAnchor.ParentLeftRight'  					};    					nameHolder.AddChild(new WrappedTextWidget(settingData.PresentationName.Localize()' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor));    					nameArea.AddChild(nameHolder);  				}    				switch (settingData.DataEditType)  				{  					case SliceSettingData.DataEditTypes.INT:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();  							int currentValue;  							int.TryParse(sliceSettingValue' out currentValue);    							var intEditWidget = new MHNumberEdit(currentValue' pixelWidth: intEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Name = settingData.PresentationName + " Edit"'  							};  							intEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							content.AddChild(intEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' intEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								intEditWidget.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.DOUBLE:  						{  							double currentValue;  							double.TryParse(sliceSettingValue' out currentValue);    							var doubleEditWidget = new MHNumberEdit(currentValue' allowNegatives: true' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2 = 0;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.POSITIVE_DOUBLE:  						{  							const string multiValuesAreDiffernt = "-";  							FlowLayoutWidget content = new FlowLayoutWidget();    							var doubleEditWidget = new MHNumberEdit(0' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								Name = settingData.PresentationName + " Textbox"'  								SelectAllOnFocus = true  							};    							double currentValue;  							bool ChangesMultipleOtherSettings = settingData.SetSettingsOnChange.Count > 0;  							if (ChangesMultipleOtherSettings)  							{  								bool allTheSame = true;  								string setting = GetActiveValue(settingData.SetSettingsOnChange[0]["TargetSetting"]' layerCascade);  								for (int i = 1; i < settingData.SetSettingsOnChange.Count; i++)  								{  									string nextSetting = GetActiveValue(settingData.SetSettingsOnChange[i]["TargetSetting"]' layerCascade);  									if (setting != nextSetting)  									{  										allTheSame = false;  										break;  									}  								}    								if (allTheSame && setting.EndsWith("mm"))  								{  									double.TryParse(setting.Substring(0' setting.Length - 2)' out currentValue);  									doubleEditWidget.ActuallNumberEdit.Value = currentValue;  								}  								else  								{  									doubleEditWidget.ActuallNumberEdit.InternalNumberEdit.Text = multiValuesAreDiffernt;  								}  							}  							else // just set the setting normally  							{  								double.TryParse(sliceSettingValue' out currentValue);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue;  							}  							doubleEditWidget.ActuallNumberEdit.InternalTextEditWidget.MarkAsStartingState();  							  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								NumberEdit numberEdit = (NumberEdit)sender;  								// If this setting sets other settings' then do that.  								if (ChangesMultipleOtherSettings  									&& numberEdit.Text != multiValuesAreDiffernt)  								{  									{  										ActiveSliceSettings.Instance.SetValue(settingData.SetSettingsOnChange[0]["TargetSetting"]' numberEdit.Value.ToString() + "mm"' persistenceLayer);  									}  								}    								// also always save to the local setting  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' numberEdit.Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							content.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' doubleEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2 = 0;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.OFFSET:  						{  							double currentValue;  							double.TryParse(sliceSettingValue' out currentValue);  							var doubleEditWidget = new MHNumberEdit(currentValue' allowDecimals: true' allowNegatives: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true    							};  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.DOUBLE_OR_PERCENT:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();    							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: doubleEditWidth - 2' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								var textEditWidget = (TextEditWidget)sender;  								string text = textEditWidget.Text.Trim();    								bool isPercent = text.Contains("%");  								if (isPercent)  								{  									text = text.Substring(0' text.IndexOf("%"));  								}  								double result;  								double.TryParse(text' out result);  								text = result.ToString();  								if (isPercent)  								{  									text += "%";  								}  								textEditWidget.Text = text;  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' textEditWidget.Text' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							stringEdit.ActualTextEditWidget.InternalTextEditWidget.AllSelected += (sender' e) =>  							{  								// select everything up to the % (if present)  								InternalTextEditWidget textEditWidget = (InternalTextEditWidget)sender;  								int percentIndex = textEditWidget.Text.IndexOf("%");  								if (percentIndex != -1)  								{  									textEditWidget.SetSelection(0' percentIndex - 1);  								}  							};    							content.AddChild(stringEdit);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.INT_OR_MM:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();    							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: doubleEditWidth - 2' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};    							string startingText = stringEdit.Text;  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								TextEditWidget textEditWidget = (TextEditWidget)sender;  								// only validate when we lose focus  								if (!textEditWidget.ContainsFocus)  								{  									string text = textEditWidget.Text;  									text = text.Trim();  									bool isMm = text.Contains("mm");  									if (isMm)  									{  										text = text.Substring(0' text.IndexOf("mm"));  									}  									double result;  									double.TryParse(text' out result);  									text = result.ToString();  									if (isMm)  									{  										text += "mm";  									}  									else  									{  										result = (int)result;  										text = result.ToString();  									}  									textEditWidget.Text = text;  									startingText = stringEdit.Text;  								}  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' textEditWidget.Text' persistenceLayer);  								settingsRow.UpdateStyle();    								// make sure we are still looking for the final validation before saving.  								if (textEditWidget.ContainsFocus)  								{  									UiThread.RunOnIdle(() =>  									{  										string currentText = textEditWidget.Text;  										int cursorIndex = textEditWidget.InternalTextEditWidget.CharIndexToInsertBefore;  										textEditWidget.Text = startingText;  										textEditWidget.InternalTextEditWidget.MarkAsStartingState();  										textEditWidget.Text = currentText;  										textEditWidget.InternalTextEditWidget.CharIndexToInsertBefore = cursorIndex;  									});  								}  							};    							stringEdit.ActualTextEditWidget.InternalTextEditWidget.AllSelected += (sender' e) =>  							{  								// select everything up to the mm (if present)  								InternalTextEditWidget textEditWidget = (InternalTextEditWidget)sender;  								int mMIndex = textEditWidget.Text.IndexOf("mm");  								if (mMIndex != -1)  								{  									textEditWidget.SetSelection(0' mMIndex - 1);  								}  							};    							content.AddChild(stringEdit);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.CHECK_BOX:  						{  							var checkBoxWidget = new CheckBox("")  							{  								Name = settingData.PresentationName + " Checkbox"'  								ToolTipText = settingData.HelpText'  								VAnchor = Agg.UI.VAnchor.ParentBottom'  								TextColor = ActiveTheme.Instance.PrimaryTextColor'  								Checked = sliceSettingValue == "1"  							};  							checkBoxWidget.Click += (sender' e) =>  							{  								// SetValue should only be called when the checkbox is clicked. If this code makes its way into checkstatechanged  								// we end up adding a key back into the dictionary after we call .ClearValue' resulting in the blue override bar reappearing after  								// clearing a useroverride with the red x  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' checkBoxWidget.Checked ? "1" : "0"' persistenceLayer);  							};  							checkBoxWidget.CheckedStateChanged += (s' e) =>  							{  								// Linked settings should be updated in all cases (user clicked checkbox' user clicked clear)  								foreach (var setSettingsData in settingData.SetSettingsOnChange)  								{  									string targetValue;  									if (setSettingsData.TryGetValue(checkBoxWidget.Checked ? "OnValue" : "OffValue"' out targetValue))  									{  										ActiveSliceSettings.Instance.SetValue(setSettingsData["TargetSetting"]' targetValue' persistenceLayer);  									}  								}    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(checkBoxWidget);    							settingsRow.ValueChanged = (text) =>  							{  								checkBoxWidget.Checked = text == "1";  							};  						}  						break;    					case SliceSettingData.DataEditTypes.STRING:  						{  							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: settingData.ShowAsOverride ? 120 : 200' tabIndex: tabIndexForItem++)  							{  								Name = settingData.PresentationName + " Edit"'  							};  							stringEdit.ToolTipText = settingData.HelpText;  							  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((TextEditWidget)sender).Text' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							dataArea.AddChild(stringEdit);    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.MULTI_LINE_TEXT:  						{  							string convertedNewLines = sliceSettingValue.Replace("\\n"' "\n");  							var stringEdit = new MHTextEditWidget(convertedNewLines' pixelWidth: 320' pixelHeight: multiLineEditHeight' multiLine: true' tabIndex: tabIndexForItem++' typeFace: ApplicationController.MonoSpacedTypeFace)  							{  								HAnchor = HAnchor.ParentLeftRight'  							};    							stringEdit.DrawFromHintedCache();    							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((TextEditWidget)sender).Text.Replace("\n"' "\\n")' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							nameArea.HAnchor = HAnchor.AbsolutePosition;  							nameArea.Width = 0;  							dataArea.AddChild(stringEdit);  							dataArea.HAnchor = HAnchor.ParentLeftRight;    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text.Replace("\\n"' "\n");  							};  						}  						break;    					case SliceSettingData.DataEditTypes.COM_PORT:  						{  #if __ANDROID__  							addControl = false;  #endif    							EventHandler localUnregisterEvents = null;    							bool canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect;  							// The COM_PORT control is unique in its approach to the SlicerConfigName. It uses "com_port" settings name to  							// bind to a context that will place it in the SliceSetting view but it binds its values to a machine  							// specific dictionary key that is not exposed in the UI. At runtime we lookup and store to '<machinename>_com_port'  							// ensuring that a single printer can be shared across different devices and we'll select the correct com port in each case  							var selectableOptions = new DropDownList("None".Localize()' maxHeight: 200)  							{  								ToolTipText = settingData.HelpText'  								Margin = new BorderDouble()'  								Name = "Serial Port Dropdown"'  								// Prevent droplist interaction when connected  								Enabled = canChangeComPort'  								TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150)'  								BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150)'  							};    							selectableOptions.Click += (s' e) =>  							{  								AddComMenuItems(settingData' persistenceLayer' settingsRow' selectableOptions);  							};    							AddComMenuItems(settingData' persistenceLayer' settingsRow' selectableOptions);    							dataArea.AddChild(selectableOptions);    							settingsRow.ValueChanged = (text) =>  							{  								// Lookup the machine specific comport value rather than the passed in text value  								selectableOptions.SelectedLabel = ActiveSliceSettings.Instance.Helpers.ComPort();  							};    							// Prevent droplist interaction when connected  							PrinterConnectionAndCommunication.Instance.CommunicationStateChanged.RegisterEvent((s' e) =>  							{  								canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect;  								selectableOptions.Enabled = canChangeComPort;  								selectableOptions.TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150);  								selectableOptions.BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150);  							}' ref localUnregisterEvents);    							// Release event listener on close  							selectableOptions.Closed += (s' e) =>  							{  								localUnregisterEvents?.Invoke(null' null);  							};  						}  						break;    					case SliceSettingData.DataEditTypes.LIST:  						{  							var selectableOptions = new DropDownList("None".Localize()' maxHeight: 200)  							{  								ToolTipText = settingData.HelpText'  								Margin = new BorderDouble()  							};    							foreach (string listItem in settingData.ExtraSettings.Split('''))  							{  								MenuItem newItem = selectableOptions.AddItem(listItem);  								if (newItem.Text == sliceSettingValue)  								{  									selectableOptions.SelectedLabel = sliceSettingValue;  								}    								newItem.Selected += (sender' e) =>  								{  									MenuItem menuItem = ((MenuItem)sender);  									ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' menuItem.Text' persistenceLayer);    									settingsRow.UpdateStyle();  								};  							}    							dataArea.AddChild(selectableOptions);    							settingsRow.ValueChanged = (text) =>  							{  								selectableOptions.SelectedLabel = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.HARDWARE_PRESENT:  						{  							var checkBoxWidget = new CheckBox("")  							{  								Name = settingData.PresentationName + " Checkbox"'  								ToolTipText = settingData.HelpText'  								VAnchor = Agg.UI.VAnchor.ParentBottom'  								TextColor = ActiveTheme.Instance.PrimaryTextColor'  								Checked = sliceSettingValue == "1"  							};    							checkBoxWidget.Click += (sender' e) =>  							{  								bool isChecked = ((CheckBox)sender).Checked;  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' isChecked ? "1" : "0"' persistenceLayer);    								settingsRow.UpdateStyle();  							};    							dataArea.AddChild(checkBoxWidget);    							settingsRow.ValueChanged = (text) =>  							{  								checkBoxWidget.Checked = text == "1";  							};  						}  						break;    					case SliceSettingData.DataEditTypes.VECTOR2:  						{  							string[] xyValueStrings = sliceSettingValue.Split(''');  							if (xyValueStrings.Length != 2)  							{  								xyValueStrings = new string[] { "0"' "0" };  							}    							double currentXValue;  							double.TryParse(xyValueStrings[0]' out currentXValue);    							var xEditWidget = new MHNumberEdit(currentXValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};    							double currentYValue;  							double.TryParse(xyValueStrings[1]' out currentYValue);    							var yEditWidget = new MHNumberEdit(currentYValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Margin = new BorderDouble(20' 0' 0' 0)'  							};    							xEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(xEditWidget);  							dataArea.AddChild(new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  							{  								VAnchor = VAnchor.ParentCenter'  								Margin = new BorderDouble(5' 0)'  							});    							yEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(yEditWidget);  							var yLabel = new GuiWidget()  							{  								VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  								Padding = new BorderDouble(5' 0)'  								HAnchor = HAnchor.ParentLeftRight'  							};  							yLabel.AddChild(new WrappedTextWidget("Y"' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));  							unitsArea.AddChild(yLabel);    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2;  								string[] xyValueStrings2 = text.Split(''');  								if (xyValueStrings2.Length != 2)  								{  									xyValueStrings2 = new string[] { "0"' "0" };  								}    								double.TryParse(xyValueStrings2[0]' out currentValue2);  								xEditWidget.ActuallNumberEdit.Value = currentValue2;    								double.TryParse(xyValueStrings2[1]' out currentValue2);  								yEditWidget.ActuallNumberEdit.Value = currentValue2;  							};    						}  						break;    					case SliceSettingData.DataEditTypes.OFFSET2:  						{  							Vector2 offset = ActiveSliceSettings.Instance.Helpers.ExtruderOffset(extruderIndex);    							var xEditWidget = new MHNumberEdit(offset.x' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  							};    							var yEditWidget = new MHNumberEdit(offset.y' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Margin = new BorderDouble(20' 0' 0' 0)'  							};    							xEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								int extruderIndexLocal = extruderIndex;  								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(xEditWidget);  							dataArea.AddChild(new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  							{  								VAnchor = VAnchor.ParentCenter'  								Margin = new BorderDouble(5' 0)'  							});    							yEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								int extruderIndexLocal = extruderIndex;  								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(yEditWidget);  							var yLabel = new GuiWidget()  							{  								Padding = new BorderDouble(5' 0)'  								HAnchor = HAnchor.ParentLeftRight'  								VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  							};  							yLabel.AddChild(new WrappedTextWidget("Y"' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));  							unitsArea.AddChild(yLabel);    							settingsRow.ValueChanged = (text) =>  							{  								Vector2 offset2 = ActiveSliceSettings.Instance.Helpers.ExtruderOffset(extruderIndex);  								xEditWidget.ActuallNumberEdit.Value = offset2.x;  								yEditWidget.ActuallNumberEdit.Value = offset2.y;  							};  						}  						break;    					default:  						var missingSetting = new TextWidget(String.Format("Missing the setting for '{0}'."' settingData.DataEditType.ToString()))  						{  							TextColor = ActiveTheme.Instance.PrimaryTextColor'  							BackgroundColor = RGBA_Bytes.Red  						};  						dataArea.AddChild(missingSetting);  						break;  				}  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The following statement contains a magic number: if (!PrinterSettings.KnownSettings.Contains(settingData.SlicerConfigName))  			{  				// the setting we think we are adding is not in the known settings it may have been deprecated  				TextWidget settingName = new TextWidget(String.Format("Setting '{0}' not found in known settings"' settingData.SlicerConfigName));  				settingName.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				//settingName.MinimumSize = new Vector2(minSettingNameWidth' settingName.MinimumSize.y);  				nameArea.AddChild(settingName);  				nameArea.BackgroundColor = RGBA_Bytes.Red;  			}  			else  			{  				int intEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int doubleEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int vectorXYEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int multiLineEditHeight = (int)(120 * GuiWidget.DeviceScale + .5);    				if (settingData.DataEditType != SliceSettingData.DataEditTypes.MULTI_LINE_TEXT)  				{  					var nameHolder = new GuiWidget()  					{  						Padding = new BorderDouble(0' 0' 5' 0)'  						VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  						HAnchor = HAnchor.ParentLeftRight'  					};    					nameHolder.AddChild(new WrappedTextWidget(settingData.PresentationName.Localize()' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor));    					nameArea.AddChild(nameHolder);  				}    				switch (settingData.DataEditType)  				{  					case SliceSettingData.DataEditTypes.INT:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();  							int currentValue;  							int.TryParse(sliceSettingValue' out currentValue);    							var intEditWidget = new MHNumberEdit(currentValue' pixelWidth: intEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Name = settingData.PresentationName + " Edit"'  							};  							intEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							content.AddChild(intEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' intEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								intEditWidget.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.DOUBLE:  						{  							double currentValue;  							double.TryParse(sliceSettingValue' out currentValue);    							var doubleEditWidget = new MHNumberEdit(currentValue' allowNegatives: true' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2 = 0;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.POSITIVE_DOUBLE:  						{  							const string multiValuesAreDiffernt = "-";  							FlowLayoutWidget content = new FlowLayoutWidget();    							var doubleEditWidget = new MHNumberEdit(0' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								Name = settingData.PresentationName + " Textbox"'  								SelectAllOnFocus = true  							};    							double currentValue;  							bool ChangesMultipleOtherSettings = settingData.SetSettingsOnChange.Count > 0;  							if (ChangesMultipleOtherSettings)  							{  								bool allTheSame = true;  								string setting = GetActiveValue(settingData.SetSettingsOnChange[0]["TargetSetting"]' layerCascade);  								for (int i = 1; i < settingData.SetSettingsOnChange.Count; i++)  								{  									string nextSetting = GetActiveValue(settingData.SetSettingsOnChange[i]["TargetSetting"]' layerCascade);  									if (setting != nextSetting)  									{  										allTheSame = false;  										break;  									}  								}    								if (allTheSame && setting.EndsWith("mm"))  								{  									double.TryParse(setting.Substring(0' setting.Length - 2)' out currentValue);  									doubleEditWidget.ActuallNumberEdit.Value = currentValue;  								}  								else  								{  									doubleEditWidget.ActuallNumberEdit.InternalNumberEdit.Text = multiValuesAreDiffernt;  								}  							}  							else // just set the setting normally  							{  								double.TryParse(sliceSettingValue' out currentValue);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue;  							}  							doubleEditWidget.ActuallNumberEdit.InternalTextEditWidget.MarkAsStartingState();  							  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								NumberEdit numberEdit = (NumberEdit)sender;  								// If this setting sets other settings' then do that.  								if (ChangesMultipleOtherSettings  									&& numberEdit.Text != multiValuesAreDiffernt)  								{  									{  										ActiveSliceSettings.Instance.SetValue(settingData.SetSettingsOnChange[0]["TargetSetting"]' numberEdit.Value.ToString() + "mm"' persistenceLayer);  									}  								}    								// also always save to the local setting  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' numberEdit.Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							content.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' doubleEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2 = 0;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.OFFSET:  						{  							double currentValue;  							double.TryParse(sliceSettingValue' out currentValue);  							var doubleEditWidget = new MHNumberEdit(currentValue' allowDecimals: true' allowNegatives: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true    							};  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.DOUBLE_OR_PERCENT:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();    							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: doubleEditWidth - 2' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								var textEditWidget = (TextEditWidget)sender;  								string text = textEditWidget.Text.Trim();    								bool isPercent = text.Contains("%");  								if (isPercent)  								{  									text = text.Substring(0' text.IndexOf("%"));  								}  								double result;  								double.TryParse(text' out result);  								text = result.ToString();  								if (isPercent)  								{  									text += "%";  								}  								textEditWidget.Text = text;  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' textEditWidget.Text' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							stringEdit.ActualTextEditWidget.InternalTextEditWidget.AllSelected += (sender' e) =>  							{  								// select everything up to the % (if present)  								InternalTextEditWidget textEditWidget = (InternalTextEditWidget)sender;  								int percentIndex = textEditWidget.Text.IndexOf("%");  								if (percentIndex != -1)  								{  									textEditWidget.SetSelection(0' percentIndex - 1);  								}  							};    							content.AddChild(stringEdit);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.INT_OR_MM:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();    							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: doubleEditWidth - 2' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};    							string startingText = stringEdit.Text;  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								TextEditWidget textEditWidget = (TextEditWidget)sender;  								// only validate when we lose focus  								if (!textEditWidget.ContainsFocus)  								{  									string text = textEditWidget.Text;  									text = text.Trim();  									bool isMm = text.Contains("mm");  									if (isMm)  									{  										text = text.Substring(0' text.IndexOf("mm"));  									}  									double result;  									double.TryParse(text' out result);  									text = result.ToString();  									if (isMm)  									{  										text += "mm";  									}  									else  									{  										result = (int)result;  										text = result.ToString();  									}  									textEditWidget.Text = text;  									startingText = stringEdit.Text;  								}  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' textEditWidget.Text' persistenceLayer);  								settingsRow.UpdateStyle();    								// make sure we are still looking for the final validation before saving.  								if (textEditWidget.ContainsFocus)  								{  									UiThread.RunOnIdle(() =>  									{  										string currentText = textEditWidget.Text;  										int cursorIndex = textEditWidget.InternalTextEditWidget.CharIndexToInsertBefore;  										textEditWidget.Text = startingText;  										textEditWidget.InternalTextEditWidget.MarkAsStartingState();  										textEditWidget.Text = currentText;  										textEditWidget.InternalTextEditWidget.CharIndexToInsertBefore = cursorIndex;  									});  								}  							};    							stringEdit.ActualTextEditWidget.InternalTextEditWidget.AllSelected += (sender' e) =>  							{  								// select everything up to the mm (if present)  								InternalTextEditWidget textEditWidget = (InternalTextEditWidget)sender;  								int mMIndex = textEditWidget.Text.IndexOf("mm");  								if (mMIndex != -1)  								{  									textEditWidget.SetSelection(0' mMIndex - 1);  								}  							};    							content.AddChild(stringEdit);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.CHECK_BOX:  						{  							var checkBoxWidget = new CheckBox("")  							{  								Name = settingData.PresentationName + " Checkbox"'  								ToolTipText = settingData.HelpText'  								VAnchor = Agg.UI.VAnchor.ParentBottom'  								TextColor = ActiveTheme.Instance.PrimaryTextColor'  								Checked = sliceSettingValue == "1"  							};  							checkBoxWidget.Click += (sender' e) =>  							{  								// SetValue should only be called when the checkbox is clicked. If this code makes its way into checkstatechanged  								// we end up adding a key back into the dictionary after we call .ClearValue' resulting in the blue override bar reappearing after  								// clearing a useroverride with the red x  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' checkBoxWidget.Checked ? "1" : "0"' persistenceLayer);  							};  							checkBoxWidget.CheckedStateChanged += (s' e) =>  							{  								// Linked settings should be updated in all cases (user clicked checkbox' user clicked clear)  								foreach (var setSettingsData in settingData.SetSettingsOnChange)  								{  									string targetValue;  									if (setSettingsData.TryGetValue(checkBoxWidget.Checked ? "OnValue" : "OffValue"' out targetValue))  									{  										ActiveSliceSettings.Instance.SetValue(setSettingsData["TargetSetting"]' targetValue' persistenceLayer);  									}  								}    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(checkBoxWidget);    							settingsRow.ValueChanged = (text) =>  							{  								checkBoxWidget.Checked = text == "1";  							};  						}  						break;    					case SliceSettingData.DataEditTypes.STRING:  						{  							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: settingData.ShowAsOverride ? 120 : 200' tabIndex: tabIndexForItem++)  							{  								Name = settingData.PresentationName + " Edit"'  							};  							stringEdit.ToolTipText = settingData.HelpText;  							  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((TextEditWidget)sender).Text' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							dataArea.AddChild(stringEdit);    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.MULTI_LINE_TEXT:  						{  							string convertedNewLines = sliceSettingValue.Replace("\\n"' "\n");  							var stringEdit = new MHTextEditWidget(convertedNewLines' pixelWidth: 320' pixelHeight: multiLineEditHeight' multiLine: true' tabIndex: tabIndexForItem++' typeFace: ApplicationController.MonoSpacedTypeFace)  							{  								HAnchor = HAnchor.ParentLeftRight'  							};    							stringEdit.DrawFromHintedCache();    							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((TextEditWidget)sender).Text.Replace("\n"' "\\n")' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							nameArea.HAnchor = HAnchor.AbsolutePosition;  							nameArea.Width = 0;  							dataArea.AddChild(stringEdit);  							dataArea.HAnchor = HAnchor.ParentLeftRight;    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text.Replace("\\n"' "\n");  							};  						}  						break;    					case SliceSettingData.DataEditTypes.COM_PORT:  						{  #if __ANDROID__  							addControl = false;  #endif    							EventHandler localUnregisterEvents = null;    							bool canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect;  							// The COM_PORT control is unique in its approach to the SlicerConfigName. It uses "com_port" settings name to  							// bind to a context that will place it in the SliceSetting view but it binds its values to a machine  							// specific dictionary key that is not exposed in the UI. At runtime we lookup and store to '<machinename>_com_port'  							// ensuring that a single printer can be shared across different devices and we'll select the correct com port in each case  							var selectableOptions = new DropDownList("None".Localize()' maxHeight: 200)  							{  								ToolTipText = settingData.HelpText'  								Margin = new BorderDouble()'  								Name = "Serial Port Dropdown"'  								// Prevent droplist interaction when connected  								Enabled = canChangeComPort'  								TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150)'  								BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150)'  							};    							selectableOptions.Click += (s' e) =>  							{  								AddComMenuItems(settingData' persistenceLayer' settingsRow' selectableOptions);  							};    							AddComMenuItems(settingData' persistenceLayer' settingsRow' selectableOptions);    							dataArea.AddChild(selectableOptions);    							settingsRow.ValueChanged = (text) =>  							{  								// Lookup the machine specific comport value rather than the passed in text value  								selectableOptions.SelectedLabel = ActiveSliceSettings.Instance.Helpers.ComPort();  							};    							// Prevent droplist interaction when connected  							PrinterConnectionAndCommunication.Instance.CommunicationStateChanged.RegisterEvent((s' e) =>  							{  								canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect;  								selectableOptions.Enabled = canChangeComPort;  								selectableOptions.TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150);  								selectableOptions.BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150);  							}' ref localUnregisterEvents);    							// Release event listener on close  							selectableOptions.Closed += (s' e) =>  							{  								localUnregisterEvents?.Invoke(null' null);  							};  						}  						break;    					case SliceSettingData.DataEditTypes.LIST:  						{  							var selectableOptions = new DropDownList("None".Localize()' maxHeight: 200)  							{  								ToolTipText = settingData.HelpText'  								Margin = new BorderDouble()  							};    							foreach (string listItem in settingData.ExtraSettings.Split('''))  							{  								MenuItem newItem = selectableOptions.AddItem(listItem);  								if (newItem.Text == sliceSettingValue)  								{  									selectableOptions.SelectedLabel = sliceSettingValue;  								}    								newItem.Selected += (sender' e) =>  								{  									MenuItem menuItem = ((MenuItem)sender);  									ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' menuItem.Text' persistenceLayer);    									settingsRow.UpdateStyle();  								};  							}    							dataArea.AddChild(selectableOptions);    							settingsRow.ValueChanged = (text) =>  							{  								selectableOptions.SelectedLabel = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.HARDWARE_PRESENT:  						{  							var checkBoxWidget = new CheckBox("")  							{  								Name = settingData.PresentationName + " Checkbox"'  								ToolTipText = settingData.HelpText'  								VAnchor = Agg.UI.VAnchor.ParentBottom'  								TextColor = ActiveTheme.Instance.PrimaryTextColor'  								Checked = sliceSettingValue == "1"  							};    							checkBoxWidget.Click += (sender' e) =>  							{  								bool isChecked = ((CheckBox)sender).Checked;  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' isChecked ? "1" : "0"' persistenceLayer);    								settingsRow.UpdateStyle();  							};    							dataArea.AddChild(checkBoxWidget);    							settingsRow.ValueChanged = (text) =>  							{  								checkBoxWidget.Checked = text == "1";  							};  						}  						break;    					case SliceSettingData.DataEditTypes.VECTOR2:  						{  							string[] xyValueStrings = sliceSettingValue.Split(''');  							if (xyValueStrings.Length != 2)  							{  								xyValueStrings = new string[] { "0"' "0" };  							}    							double currentXValue;  							double.TryParse(xyValueStrings[0]' out currentXValue);    							var xEditWidget = new MHNumberEdit(currentXValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};    							double currentYValue;  							double.TryParse(xyValueStrings[1]' out currentYValue);    							var yEditWidget = new MHNumberEdit(currentYValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Margin = new BorderDouble(20' 0' 0' 0)'  							};    							xEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(xEditWidget);  							dataArea.AddChild(new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  							{  								VAnchor = VAnchor.ParentCenter'  								Margin = new BorderDouble(5' 0)'  							});    							yEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(yEditWidget);  							var yLabel = new GuiWidget()  							{  								VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  								Padding = new BorderDouble(5' 0)'  								HAnchor = HAnchor.ParentLeftRight'  							};  							yLabel.AddChild(new WrappedTextWidget("Y"' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));  							unitsArea.AddChild(yLabel);    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2;  								string[] xyValueStrings2 = text.Split(''');  								if (xyValueStrings2.Length != 2)  								{  									xyValueStrings2 = new string[] { "0"' "0" };  								}    								double.TryParse(xyValueStrings2[0]' out currentValue2);  								xEditWidget.ActuallNumberEdit.Value = currentValue2;    								double.TryParse(xyValueStrings2[1]' out currentValue2);  								yEditWidget.ActuallNumberEdit.Value = currentValue2;  							};    						}  						break;    					case SliceSettingData.DataEditTypes.OFFSET2:  						{  							Vector2 offset = ActiveSliceSettings.Instance.Helpers.ExtruderOffset(extruderIndex);    							var xEditWidget = new MHNumberEdit(offset.x' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  							};    							var yEditWidget = new MHNumberEdit(offset.y' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Margin = new BorderDouble(20' 0' 0' 0)'  							};    							xEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								int extruderIndexLocal = extruderIndex;  								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(xEditWidget);  							dataArea.AddChild(new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  							{  								VAnchor = VAnchor.ParentCenter'  								Margin = new BorderDouble(5' 0)'  							});    							yEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								int extruderIndexLocal = extruderIndex;  								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(yEditWidget);  							var yLabel = new GuiWidget()  							{  								Padding = new BorderDouble(5' 0)'  								HAnchor = HAnchor.ParentLeftRight'  								VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  							};  							yLabel.AddChild(new WrappedTextWidget("Y"' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));  							unitsArea.AddChild(yLabel);    							settingsRow.ValueChanged = (text) =>  							{  								Vector2 offset2 = ActiveSliceSettings.Instance.Helpers.ExtruderOffset(extruderIndex);  								xEditWidget.ActuallNumberEdit.Value = offset2.x;  								yEditWidget.ActuallNumberEdit.Value = offset2.y;  							};  						}  						break;    					default:  						var missingSetting = new TextWidget(String.Format("Missing the setting for '{0}'."' settingData.DataEditType.ToString()))  						{  							TextColor = ActiveTheme.Instance.PrimaryTextColor'  							BackgroundColor = RGBA_Bytes.Red  						};  						dataArea.AddChild(missingSetting);  						break;  				}  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The following statement contains a magic number: if (!PrinterSettings.KnownSettings.Contains(settingData.SlicerConfigName))  			{  				// the setting we think we are adding is not in the known settings it may have been deprecated  				TextWidget settingName = new TextWidget(String.Format("Setting '{0}' not found in known settings"' settingData.SlicerConfigName));  				settingName.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				//settingName.MinimumSize = new Vector2(minSettingNameWidth' settingName.MinimumSize.y);  				nameArea.AddChild(settingName);  				nameArea.BackgroundColor = RGBA_Bytes.Red;  			}  			else  			{  				int intEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int doubleEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int vectorXYEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int multiLineEditHeight = (int)(120 * GuiWidget.DeviceScale + .5);    				if (settingData.DataEditType != SliceSettingData.DataEditTypes.MULTI_LINE_TEXT)  				{  					var nameHolder = new GuiWidget()  					{  						Padding = new BorderDouble(0' 0' 5' 0)'  						VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  						HAnchor = HAnchor.ParentLeftRight'  					};    					nameHolder.AddChild(new WrappedTextWidget(settingData.PresentationName.Localize()' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor));    					nameArea.AddChild(nameHolder);  				}    				switch (settingData.DataEditType)  				{  					case SliceSettingData.DataEditTypes.INT:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();  							int currentValue;  							int.TryParse(sliceSettingValue' out currentValue);    							var intEditWidget = new MHNumberEdit(currentValue' pixelWidth: intEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Name = settingData.PresentationName + " Edit"'  							};  							intEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							content.AddChild(intEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' intEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								intEditWidget.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.DOUBLE:  						{  							double currentValue;  							double.TryParse(sliceSettingValue' out currentValue);    							var doubleEditWidget = new MHNumberEdit(currentValue' allowNegatives: true' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2 = 0;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.POSITIVE_DOUBLE:  						{  							const string multiValuesAreDiffernt = "-";  							FlowLayoutWidget content = new FlowLayoutWidget();    							var doubleEditWidget = new MHNumberEdit(0' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								Name = settingData.PresentationName + " Textbox"'  								SelectAllOnFocus = true  							};    							double currentValue;  							bool ChangesMultipleOtherSettings = settingData.SetSettingsOnChange.Count > 0;  							if (ChangesMultipleOtherSettings)  							{  								bool allTheSame = true;  								string setting = GetActiveValue(settingData.SetSettingsOnChange[0]["TargetSetting"]' layerCascade);  								for (int i = 1; i < settingData.SetSettingsOnChange.Count; i++)  								{  									string nextSetting = GetActiveValue(settingData.SetSettingsOnChange[i]["TargetSetting"]' layerCascade);  									if (setting != nextSetting)  									{  										allTheSame = false;  										break;  									}  								}    								if (allTheSame && setting.EndsWith("mm"))  								{  									double.TryParse(setting.Substring(0' setting.Length - 2)' out currentValue);  									doubleEditWidget.ActuallNumberEdit.Value = currentValue;  								}  								else  								{  									doubleEditWidget.ActuallNumberEdit.InternalNumberEdit.Text = multiValuesAreDiffernt;  								}  							}  							else // just set the setting normally  							{  								double.TryParse(sliceSettingValue' out currentValue);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue;  							}  							doubleEditWidget.ActuallNumberEdit.InternalTextEditWidget.MarkAsStartingState();  							  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								NumberEdit numberEdit = (NumberEdit)sender;  								// If this setting sets other settings' then do that.  								if (ChangesMultipleOtherSettings  									&& numberEdit.Text != multiValuesAreDiffernt)  								{  									{  										ActiveSliceSettings.Instance.SetValue(settingData.SetSettingsOnChange[0]["TargetSetting"]' numberEdit.Value.ToString() + "mm"' persistenceLayer);  									}  								}    								// also always save to the local setting  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' numberEdit.Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							content.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' doubleEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2 = 0;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.OFFSET:  						{  							double currentValue;  							double.TryParse(sliceSettingValue' out currentValue);  							var doubleEditWidget = new MHNumberEdit(currentValue' allowDecimals: true' allowNegatives: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true    							};  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.DOUBLE_OR_PERCENT:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();    							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: doubleEditWidth - 2' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								var textEditWidget = (TextEditWidget)sender;  								string text = textEditWidget.Text.Trim();    								bool isPercent = text.Contains("%");  								if (isPercent)  								{  									text = text.Substring(0' text.IndexOf("%"));  								}  								double result;  								double.TryParse(text' out result);  								text = result.ToString();  								if (isPercent)  								{  									text += "%";  								}  								textEditWidget.Text = text;  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' textEditWidget.Text' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							stringEdit.ActualTextEditWidget.InternalTextEditWidget.AllSelected += (sender' e) =>  							{  								// select everything up to the % (if present)  								InternalTextEditWidget textEditWidget = (InternalTextEditWidget)sender;  								int percentIndex = textEditWidget.Text.IndexOf("%");  								if (percentIndex != -1)  								{  									textEditWidget.SetSelection(0' percentIndex - 1);  								}  							};    							content.AddChild(stringEdit);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.INT_OR_MM:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();    							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: doubleEditWidth - 2' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};    							string startingText = stringEdit.Text;  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								TextEditWidget textEditWidget = (TextEditWidget)sender;  								// only validate when we lose focus  								if (!textEditWidget.ContainsFocus)  								{  									string text = textEditWidget.Text;  									text = text.Trim();  									bool isMm = text.Contains("mm");  									if (isMm)  									{  										text = text.Substring(0' text.IndexOf("mm"));  									}  									double result;  									double.TryParse(text' out result);  									text = result.ToString();  									if (isMm)  									{  										text += "mm";  									}  									else  									{  										result = (int)result;  										text = result.ToString();  									}  									textEditWidget.Text = text;  									startingText = stringEdit.Text;  								}  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' textEditWidget.Text' persistenceLayer);  								settingsRow.UpdateStyle();    								// make sure we are still looking for the final validation before saving.  								if (textEditWidget.ContainsFocus)  								{  									UiThread.RunOnIdle(() =>  									{  										string currentText = textEditWidget.Text;  										int cursorIndex = textEditWidget.InternalTextEditWidget.CharIndexToInsertBefore;  										textEditWidget.Text = startingText;  										textEditWidget.InternalTextEditWidget.MarkAsStartingState();  										textEditWidget.Text = currentText;  										textEditWidget.InternalTextEditWidget.CharIndexToInsertBefore = cursorIndex;  									});  								}  							};    							stringEdit.ActualTextEditWidget.InternalTextEditWidget.AllSelected += (sender' e) =>  							{  								// select everything up to the mm (if present)  								InternalTextEditWidget textEditWidget = (InternalTextEditWidget)sender;  								int mMIndex = textEditWidget.Text.IndexOf("mm");  								if (mMIndex != -1)  								{  									textEditWidget.SetSelection(0' mMIndex - 1);  								}  							};    							content.AddChild(stringEdit);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.CHECK_BOX:  						{  							var checkBoxWidget = new CheckBox("")  							{  								Name = settingData.PresentationName + " Checkbox"'  								ToolTipText = settingData.HelpText'  								VAnchor = Agg.UI.VAnchor.ParentBottom'  								TextColor = ActiveTheme.Instance.PrimaryTextColor'  								Checked = sliceSettingValue == "1"  							};  							checkBoxWidget.Click += (sender' e) =>  							{  								// SetValue should only be called when the checkbox is clicked. If this code makes its way into checkstatechanged  								// we end up adding a key back into the dictionary after we call .ClearValue' resulting in the blue override bar reappearing after  								// clearing a useroverride with the red x  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' checkBoxWidget.Checked ? "1" : "0"' persistenceLayer);  							};  							checkBoxWidget.CheckedStateChanged += (s' e) =>  							{  								// Linked settings should be updated in all cases (user clicked checkbox' user clicked clear)  								foreach (var setSettingsData in settingData.SetSettingsOnChange)  								{  									string targetValue;  									if (setSettingsData.TryGetValue(checkBoxWidget.Checked ? "OnValue" : "OffValue"' out targetValue))  									{  										ActiveSliceSettings.Instance.SetValue(setSettingsData["TargetSetting"]' targetValue' persistenceLayer);  									}  								}    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(checkBoxWidget);    							settingsRow.ValueChanged = (text) =>  							{  								checkBoxWidget.Checked = text == "1";  							};  						}  						break;    					case SliceSettingData.DataEditTypes.STRING:  						{  							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: settingData.ShowAsOverride ? 120 : 200' tabIndex: tabIndexForItem++)  							{  								Name = settingData.PresentationName + " Edit"'  							};  							stringEdit.ToolTipText = settingData.HelpText;  							  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((TextEditWidget)sender).Text' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							dataArea.AddChild(stringEdit);    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.MULTI_LINE_TEXT:  						{  							string convertedNewLines = sliceSettingValue.Replace("\\n"' "\n");  							var stringEdit = new MHTextEditWidget(convertedNewLines' pixelWidth: 320' pixelHeight: multiLineEditHeight' multiLine: true' tabIndex: tabIndexForItem++' typeFace: ApplicationController.MonoSpacedTypeFace)  							{  								HAnchor = HAnchor.ParentLeftRight'  							};    							stringEdit.DrawFromHintedCache();    							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((TextEditWidget)sender).Text.Replace("\n"' "\\n")' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							nameArea.HAnchor = HAnchor.AbsolutePosition;  							nameArea.Width = 0;  							dataArea.AddChild(stringEdit);  							dataArea.HAnchor = HAnchor.ParentLeftRight;    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text.Replace("\\n"' "\n");  							};  						}  						break;    					case SliceSettingData.DataEditTypes.COM_PORT:  						{  #if __ANDROID__  							addControl = false;  #endif    							EventHandler localUnregisterEvents = null;    							bool canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect;  							// The COM_PORT control is unique in its approach to the SlicerConfigName. It uses "com_port" settings name to  							// bind to a context that will place it in the SliceSetting view but it binds its values to a machine  							// specific dictionary key that is not exposed in the UI. At runtime we lookup and store to '<machinename>_com_port'  							// ensuring that a single printer can be shared across different devices and we'll select the correct com port in each case  							var selectableOptions = new DropDownList("None".Localize()' maxHeight: 200)  							{  								ToolTipText = settingData.HelpText'  								Margin = new BorderDouble()'  								Name = "Serial Port Dropdown"'  								// Prevent droplist interaction when connected  								Enabled = canChangeComPort'  								TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150)'  								BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150)'  							};    							selectableOptions.Click += (s' e) =>  							{  								AddComMenuItems(settingData' persistenceLayer' settingsRow' selectableOptions);  							};    							AddComMenuItems(settingData' persistenceLayer' settingsRow' selectableOptions);    							dataArea.AddChild(selectableOptions);    							settingsRow.ValueChanged = (text) =>  							{  								// Lookup the machine specific comport value rather than the passed in text value  								selectableOptions.SelectedLabel = ActiveSliceSettings.Instance.Helpers.ComPort();  							};    							// Prevent droplist interaction when connected  							PrinterConnectionAndCommunication.Instance.CommunicationStateChanged.RegisterEvent((s' e) =>  							{  								canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect;  								selectableOptions.Enabled = canChangeComPort;  								selectableOptions.TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150);  								selectableOptions.BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150);  							}' ref localUnregisterEvents);    							// Release event listener on close  							selectableOptions.Closed += (s' e) =>  							{  								localUnregisterEvents?.Invoke(null' null);  							};  						}  						break;    					case SliceSettingData.DataEditTypes.LIST:  						{  							var selectableOptions = new DropDownList("None".Localize()' maxHeight: 200)  							{  								ToolTipText = settingData.HelpText'  								Margin = new BorderDouble()  							};    							foreach (string listItem in settingData.ExtraSettings.Split('''))  							{  								MenuItem newItem = selectableOptions.AddItem(listItem);  								if (newItem.Text == sliceSettingValue)  								{  									selectableOptions.SelectedLabel = sliceSettingValue;  								}    								newItem.Selected += (sender' e) =>  								{  									MenuItem menuItem = ((MenuItem)sender);  									ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' menuItem.Text' persistenceLayer);    									settingsRow.UpdateStyle();  								};  							}    							dataArea.AddChild(selectableOptions);    							settingsRow.ValueChanged = (text) =>  							{  								selectableOptions.SelectedLabel = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.HARDWARE_PRESENT:  						{  							var checkBoxWidget = new CheckBox("")  							{  								Name = settingData.PresentationName + " Checkbox"'  								ToolTipText = settingData.HelpText'  								VAnchor = Agg.UI.VAnchor.ParentBottom'  								TextColor = ActiveTheme.Instance.PrimaryTextColor'  								Checked = sliceSettingValue == "1"  							};    							checkBoxWidget.Click += (sender' e) =>  							{  								bool isChecked = ((CheckBox)sender).Checked;  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' isChecked ? "1" : "0"' persistenceLayer);    								settingsRow.UpdateStyle();  							};    							dataArea.AddChild(checkBoxWidget);    							settingsRow.ValueChanged = (text) =>  							{  								checkBoxWidget.Checked = text == "1";  							};  						}  						break;    					case SliceSettingData.DataEditTypes.VECTOR2:  						{  							string[] xyValueStrings = sliceSettingValue.Split(''');  							if (xyValueStrings.Length != 2)  							{  								xyValueStrings = new string[] { "0"' "0" };  							}    							double currentXValue;  							double.TryParse(xyValueStrings[0]' out currentXValue);    							var xEditWidget = new MHNumberEdit(currentXValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};    							double currentYValue;  							double.TryParse(xyValueStrings[1]' out currentYValue);    							var yEditWidget = new MHNumberEdit(currentYValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Margin = new BorderDouble(20' 0' 0' 0)'  							};    							xEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(xEditWidget);  							dataArea.AddChild(new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  							{  								VAnchor = VAnchor.ParentCenter'  								Margin = new BorderDouble(5' 0)'  							});    							yEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(yEditWidget);  							var yLabel = new GuiWidget()  							{  								VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  								Padding = new BorderDouble(5' 0)'  								HAnchor = HAnchor.ParentLeftRight'  							};  							yLabel.AddChild(new WrappedTextWidget("Y"' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));  							unitsArea.AddChild(yLabel);    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2;  								string[] xyValueStrings2 = text.Split(''');  								if (xyValueStrings2.Length != 2)  								{  									xyValueStrings2 = new string[] { "0"' "0" };  								}    								double.TryParse(xyValueStrings2[0]' out currentValue2);  								xEditWidget.ActuallNumberEdit.Value = currentValue2;    								double.TryParse(xyValueStrings2[1]' out currentValue2);  								yEditWidget.ActuallNumberEdit.Value = currentValue2;  							};    						}  						break;    					case SliceSettingData.DataEditTypes.OFFSET2:  						{  							Vector2 offset = ActiveSliceSettings.Instance.Helpers.ExtruderOffset(extruderIndex);    							var xEditWidget = new MHNumberEdit(offset.x' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  							};    							var yEditWidget = new MHNumberEdit(offset.y' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Margin = new BorderDouble(20' 0' 0' 0)'  							};    							xEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								int extruderIndexLocal = extruderIndex;  								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(xEditWidget);  							dataArea.AddChild(new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  							{  								VAnchor = VAnchor.ParentCenter'  								Margin = new BorderDouble(5' 0)'  							});    							yEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								int extruderIndexLocal = extruderIndex;  								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(yEditWidget);  							var yLabel = new GuiWidget()  							{  								Padding = new BorderDouble(5' 0)'  								HAnchor = HAnchor.ParentLeftRight'  								VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  							};  							yLabel.AddChild(new WrappedTextWidget("Y"' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));  							unitsArea.AddChild(yLabel);    							settingsRow.ValueChanged = (text) =>  							{  								Vector2 offset2 = ActiveSliceSettings.Instance.Helpers.ExtruderOffset(extruderIndex);  								xEditWidget.ActuallNumberEdit.Value = offset2.x;  								yEditWidget.ActuallNumberEdit.Value = offset2.y;  							};  						}  						break;    					default:  						var missingSetting = new TextWidget(String.Format("Missing the setting for '{0}'."' settingData.DataEditType.ToString()))  						{  							TextColor = ActiveTheme.Instance.PrimaryTextColor'  							BackgroundColor = RGBA_Bytes.Red  						};  						dataArea.AddChild(missingSetting);  						break;  				}  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The following statement contains a magic number: if (!PrinterSettings.KnownSettings.Contains(settingData.SlicerConfigName))  			{  				// the setting we think we are adding is not in the known settings it may have been deprecated  				TextWidget settingName = new TextWidget(String.Format("Setting '{0}' not found in known settings"' settingData.SlicerConfigName));  				settingName.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				//settingName.MinimumSize = new Vector2(minSettingNameWidth' settingName.MinimumSize.y);  				nameArea.AddChild(settingName);  				nameArea.BackgroundColor = RGBA_Bytes.Red;  			}  			else  			{  				int intEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int doubleEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int vectorXYEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int multiLineEditHeight = (int)(120 * GuiWidget.DeviceScale + .5);    				if (settingData.DataEditType != SliceSettingData.DataEditTypes.MULTI_LINE_TEXT)  				{  					var nameHolder = new GuiWidget()  					{  						Padding = new BorderDouble(0' 0' 5' 0)'  						VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  						HAnchor = HAnchor.ParentLeftRight'  					};    					nameHolder.AddChild(new WrappedTextWidget(settingData.PresentationName.Localize()' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor));    					nameArea.AddChild(nameHolder);  				}    				switch (settingData.DataEditType)  				{  					case SliceSettingData.DataEditTypes.INT:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();  							int currentValue;  							int.TryParse(sliceSettingValue' out currentValue);    							var intEditWidget = new MHNumberEdit(currentValue' pixelWidth: intEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Name = settingData.PresentationName + " Edit"'  							};  							intEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							content.AddChild(intEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' intEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								intEditWidget.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.DOUBLE:  						{  							double currentValue;  							double.TryParse(sliceSettingValue' out currentValue);    							var doubleEditWidget = new MHNumberEdit(currentValue' allowNegatives: true' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2 = 0;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.POSITIVE_DOUBLE:  						{  							const string multiValuesAreDiffernt = "-";  							FlowLayoutWidget content = new FlowLayoutWidget();    							var doubleEditWidget = new MHNumberEdit(0' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								Name = settingData.PresentationName + " Textbox"'  								SelectAllOnFocus = true  							};    							double currentValue;  							bool ChangesMultipleOtherSettings = settingData.SetSettingsOnChange.Count > 0;  							if (ChangesMultipleOtherSettings)  							{  								bool allTheSame = true;  								string setting = GetActiveValue(settingData.SetSettingsOnChange[0]["TargetSetting"]' layerCascade);  								for (int i = 1; i < settingData.SetSettingsOnChange.Count; i++)  								{  									string nextSetting = GetActiveValue(settingData.SetSettingsOnChange[i]["TargetSetting"]' layerCascade);  									if (setting != nextSetting)  									{  										allTheSame = false;  										break;  									}  								}    								if (allTheSame && setting.EndsWith("mm"))  								{  									double.TryParse(setting.Substring(0' setting.Length - 2)' out currentValue);  									doubleEditWidget.ActuallNumberEdit.Value = currentValue;  								}  								else  								{  									doubleEditWidget.ActuallNumberEdit.InternalNumberEdit.Text = multiValuesAreDiffernt;  								}  							}  							else // just set the setting normally  							{  								double.TryParse(sliceSettingValue' out currentValue);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue;  							}  							doubleEditWidget.ActuallNumberEdit.InternalTextEditWidget.MarkAsStartingState();  							  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								NumberEdit numberEdit = (NumberEdit)sender;  								// If this setting sets other settings' then do that.  								if (ChangesMultipleOtherSettings  									&& numberEdit.Text != multiValuesAreDiffernt)  								{  									{  										ActiveSliceSettings.Instance.SetValue(settingData.SetSettingsOnChange[0]["TargetSetting"]' numberEdit.Value.ToString() + "mm"' persistenceLayer);  									}  								}    								// also always save to the local setting  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' numberEdit.Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							content.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' doubleEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2 = 0;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.OFFSET:  						{  							double currentValue;  							double.TryParse(sliceSettingValue' out currentValue);  							var doubleEditWidget = new MHNumberEdit(currentValue' allowDecimals: true' allowNegatives: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true    							};  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.DOUBLE_OR_PERCENT:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();    							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: doubleEditWidth - 2' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								var textEditWidget = (TextEditWidget)sender;  								string text = textEditWidget.Text.Trim();    								bool isPercent = text.Contains("%");  								if (isPercent)  								{  									text = text.Substring(0' text.IndexOf("%"));  								}  								double result;  								double.TryParse(text' out result);  								text = result.ToString();  								if (isPercent)  								{  									text += "%";  								}  								textEditWidget.Text = text;  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' textEditWidget.Text' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							stringEdit.ActualTextEditWidget.InternalTextEditWidget.AllSelected += (sender' e) =>  							{  								// select everything up to the % (if present)  								InternalTextEditWidget textEditWidget = (InternalTextEditWidget)sender;  								int percentIndex = textEditWidget.Text.IndexOf("%");  								if (percentIndex != -1)  								{  									textEditWidget.SetSelection(0' percentIndex - 1);  								}  							};    							content.AddChild(stringEdit);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.INT_OR_MM:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();    							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: doubleEditWidth - 2' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};    							string startingText = stringEdit.Text;  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								TextEditWidget textEditWidget = (TextEditWidget)sender;  								// only validate when we lose focus  								if (!textEditWidget.ContainsFocus)  								{  									string text = textEditWidget.Text;  									text = text.Trim();  									bool isMm = text.Contains("mm");  									if (isMm)  									{  										text = text.Substring(0' text.IndexOf("mm"));  									}  									double result;  									double.TryParse(text' out result);  									text = result.ToString();  									if (isMm)  									{  										text += "mm";  									}  									else  									{  										result = (int)result;  										text = result.ToString();  									}  									textEditWidget.Text = text;  									startingText = stringEdit.Text;  								}  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' textEditWidget.Text' persistenceLayer);  								settingsRow.UpdateStyle();    								// make sure we are still looking for the final validation before saving.  								if (textEditWidget.ContainsFocus)  								{  									UiThread.RunOnIdle(() =>  									{  										string currentText = textEditWidget.Text;  										int cursorIndex = textEditWidget.InternalTextEditWidget.CharIndexToInsertBefore;  										textEditWidget.Text = startingText;  										textEditWidget.InternalTextEditWidget.MarkAsStartingState();  										textEditWidget.Text = currentText;  										textEditWidget.InternalTextEditWidget.CharIndexToInsertBefore = cursorIndex;  									});  								}  							};    							stringEdit.ActualTextEditWidget.InternalTextEditWidget.AllSelected += (sender' e) =>  							{  								// select everything up to the mm (if present)  								InternalTextEditWidget textEditWidget = (InternalTextEditWidget)sender;  								int mMIndex = textEditWidget.Text.IndexOf("mm");  								if (mMIndex != -1)  								{  									textEditWidget.SetSelection(0' mMIndex - 1);  								}  							};    							content.AddChild(stringEdit);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.CHECK_BOX:  						{  							var checkBoxWidget = new CheckBox("")  							{  								Name = settingData.PresentationName + " Checkbox"'  								ToolTipText = settingData.HelpText'  								VAnchor = Agg.UI.VAnchor.ParentBottom'  								TextColor = ActiveTheme.Instance.PrimaryTextColor'  								Checked = sliceSettingValue == "1"  							};  							checkBoxWidget.Click += (sender' e) =>  							{  								// SetValue should only be called when the checkbox is clicked. If this code makes its way into checkstatechanged  								// we end up adding a key back into the dictionary after we call .ClearValue' resulting in the blue override bar reappearing after  								// clearing a useroverride with the red x  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' checkBoxWidget.Checked ? "1" : "0"' persistenceLayer);  							};  							checkBoxWidget.CheckedStateChanged += (s' e) =>  							{  								// Linked settings should be updated in all cases (user clicked checkbox' user clicked clear)  								foreach (var setSettingsData in settingData.SetSettingsOnChange)  								{  									string targetValue;  									if (setSettingsData.TryGetValue(checkBoxWidget.Checked ? "OnValue" : "OffValue"' out targetValue))  									{  										ActiveSliceSettings.Instance.SetValue(setSettingsData["TargetSetting"]' targetValue' persistenceLayer);  									}  								}    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(checkBoxWidget);    							settingsRow.ValueChanged = (text) =>  							{  								checkBoxWidget.Checked = text == "1";  							};  						}  						break;    					case SliceSettingData.DataEditTypes.STRING:  						{  							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: settingData.ShowAsOverride ? 120 : 200' tabIndex: tabIndexForItem++)  							{  								Name = settingData.PresentationName + " Edit"'  							};  							stringEdit.ToolTipText = settingData.HelpText;  							  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((TextEditWidget)sender).Text' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							dataArea.AddChild(stringEdit);    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.MULTI_LINE_TEXT:  						{  							string convertedNewLines = sliceSettingValue.Replace("\\n"' "\n");  							var stringEdit = new MHTextEditWidget(convertedNewLines' pixelWidth: 320' pixelHeight: multiLineEditHeight' multiLine: true' tabIndex: tabIndexForItem++' typeFace: ApplicationController.MonoSpacedTypeFace)  							{  								HAnchor = HAnchor.ParentLeftRight'  							};    							stringEdit.DrawFromHintedCache();    							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((TextEditWidget)sender).Text.Replace("\n"' "\\n")' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							nameArea.HAnchor = HAnchor.AbsolutePosition;  							nameArea.Width = 0;  							dataArea.AddChild(stringEdit);  							dataArea.HAnchor = HAnchor.ParentLeftRight;    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text.Replace("\\n"' "\n");  							};  						}  						break;    					case SliceSettingData.DataEditTypes.COM_PORT:  						{  #if __ANDROID__  							addControl = false;  #endif    							EventHandler localUnregisterEvents = null;    							bool canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect;  							// The COM_PORT control is unique in its approach to the SlicerConfigName. It uses "com_port" settings name to  							// bind to a context that will place it in the SliceSetting view but it binds its values to a machine  							// specific dictionary key that is not exposed in the UI. At runtime we lookup and store to '<machinename>_com_port'  							// ensuring that a single printer can be shared across different devices and we'll select the correct com port in each case  							var selectableOptions = new DropDownList("None".Localize()' maxHeight: 200)  							{  								ToolTipText = settingData.HelpText'  								Margin = new BorderDouble()'  								Name = "Serial Port Dropdown"'  								// Prevent droplist interaction when connected  								Enabled = canChangeComPort'  								TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150)'  								BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150)'  							};    							selectableOptions.Click += (s' e) =>  							{  								AddComMenuItems(settingData' persistenceLayer' settingsRow' selectableOptions);  							};    							AddComMenuItems(settingData' persistenceLayer' settingsRow' selectableOptions);    							dataArea.AddChild(selectableOptions);    							settingsRow.ValueChanged = (text) =>  							{  								// Lookup the machine specific comport value rather than the passed in text value  								selectableOptions.SelectedLabel = ActiveSliceSettings.Instance.Helpers.ComPort();  							};    							// Prevent droplist interaction when connected  							PrinterConnectionAndCommunication.Instance.CommunicationStateChanged.RegisterEvent((s' e) =>  							{  								canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect;  								selectableOptions.Enabled = canChangeComPort;  								selectableOptions.TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150);  								selectableOptions.BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150);  							}' ref localUnregisterEvents);    							// Release event listener on close  							selectableOptions.Closed += (s' e) =>  							{  								localUnregisterEvents?.Invoke(null' null);  							};  						}  						break;    					case SliceSettingData.DataEditTypes.LIST:  						{  							var selectableOptions = new DropDownList("None".Localize()' maxHeight: 200)  							{  								ToolTipText = settingData.HelpText'  								Margin = new BorderDouble()  							};    							foreach (string listItem in settingData.ExtraSettings.Split('''))  							{  								MenuItem newItem = selectableOptions.AddItem(listItem);  								if (newItem.Text == sliceSettingValue)  								{  									selectableOptions.SelectedLabel = sliceSettingValue;  								}    								newItem.Selected += (sender' e) =>  								{  									MenuItem menuItem = ((MenuItem)sender);  									ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' menuItem.Text' persistenceLayer);    									settingsRow.UpdateStyle();  								};  							}    							dataArea.AddChild(selectableOptions);    							settingsRow.ValueChanged = (text) =>  							{  								selectableOptions.SelectedLabel = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.HARDWARE_PRESENT:  						{  							var checkBoxWidget = new CheckBox("")  							{  								Name = settingData.PresentationName + " Checkbox"'  								ToolTipText = settingData.HelpText'  								VAnchor = Agg.UI.VAnchor.ParentBottom'  								TextColor = ActiveTheme.Instance.PrimaryTextColor'  								Checked = sliceSettingValue == "1"  							};    							checkBoxWidget.Click += (sender' e) =>  							{  								bool isChecked = ((CheckBox)sender).Checked;  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' isChecked ? "1" : "0"' persistenceLayer);    								settingsRow.UpdateStyle();  							};    							dataArea.AddChild(checkBoxWidget);    							settingsRow.ValueChanged = (text) =>  							{  								checkBoxWidget.Checked = text == "1";  							};  						}  						break;    					case SliceSettingData.DataEditTypes.VECTOR2:  						{  							string[] xyValueStrings = sliceSettingValue.Split(''');  							if (xyValueStrings.Length != 2)  							{  								xyValueStrings = new string[] { "0"' "0" };  							}    							double currentXValue;  							double.TryParse(xyValueStrings[0]' out currentXValue);    							var xEditWidget = new MHNumberEdit(currentXValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};    							double currentYValue;  							double.TryParse(xyValueStrings[1]' out currentYValue);    							var yEditWidget = new MHNumberEdit(currentYValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Margin = new BorderDouble(20' 0' 0' 0)'  							};    							xEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(xEditWidget);  							dataArea.AddChild(new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  							{  								VAnchor = VAnchor.ParentCenter'  								Margin = new BorderDouble(5' 0)'  							});    							yEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(yEditWidget);  							var yLabel = new GuiWidget()  							{  								VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  								Padding = new BorderDouble(5' 0)'  								HAnchor = HAnchor.ParentLeftRight'  							};  							yLabel.AddChild(new WrappedTextWidget("Y"' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));  							unitsArea.AddChild(yLabel);    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2;  								string[] xyValueStrings2 = text.Split(''');  								if (xyValueStrings2.Length != 2)  								{  									xyValueStrings2 = new string[] { "0"' "0" };  								}    								double.TryParse(xyValueStrings2[0]' out currentValue2);  								xEditWidget.ActuallNumberEdit.Value = currentValue2;    								double.TryParse(xyValueStrings2[1]' out currentValue2);  								yEditWidget.ActuallNumberEdit.Value = currentValue2;  							};    						}  						break;    					case SliceSettingData.DataEditTypes.OFFSET2:  						{  							Vector2 offset = ActiveSliceSettings.Instance.Helpers.ExtruderOffset(extruderIndex);    							var xEditWidget = new MHNumberEdit(offset.x' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  							};    							var yEditWidget = new MHNumberEdit(offset.y' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Margin = new BorderDouble(20' 0' 0' 0)'  							};    							xEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								int extruderIndexLocal = extruderIndex;  								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(xEditWidget);  							dataArea.AddChild(new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  							{  								VAnchor = VAnchor.ParentCenter'  								Margin = new BorderDouble(5' 0)'  							});    							yEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								int extruderIndexLocal = extruderIndex;  								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(yEditWidget);  							var yLabel = new GuiWidget()  							{  								Padding = new BorderDouble(5' 0)'  								HAnchor = HAnchor.ParentLeftRight'  								VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  							};  							yLabel.AddChild(new WrappedTextWidget("Y"' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));  							unitsArea.AddChild(yLabel);    							settingsRow.ValueChanged = (text) =>  							{  								Vector2 offset2 = ActiveSliceSettings.Instance.Helpers.ExtruderOffset(extruderIndex);  								xEditWidget.ActuallNumberEdit.Value = offset2.x;  								yEditWidget.ActuallNumberEdit.Value = offset2.y;  							};  						}  						break;    					default:  						var missingSetting = new TextWidget(String.Format("Missing the setting for '{0}'."' settingData.DataEditType.ToString()))  						{  							TextColor = ActiveTheme.Instance.PrimaryTextColor'  							BackgroundColor = RGBA_Bytes.Red  						};  						dataArea.AddChild(missingSetting);  						break;  				}  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The following statement contains a magic number: if (!PrinterSettings.KnownSettings.Contains(settingData.SlicerConfigName))  			{  				// the setting we think we are adding is not in the known settings it may have been deprecated  				TextWidget settingName = new TextWidget(String.Format("Setting '{0}' not found in known settings"' settingData.SlicerConfigName));  				settingName.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				//settingName.MinimumSize = new Vector2(minSettingNameWidth' settingName.MinimumSize.y);  				nameArea.AddChild(settingName);  				nameArea.BackgroundColor = RGBA_Bytes.Red;  			}  			else  			{  				int intEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int doubleEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int vectorXYEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int multiLineEditHeight = (int)(120 * GuiWidget.DeviceScale + .5);    				if (settingData.DataEditType != SliceSettingData.DataEditTypes.MULTI_LINE_TEXT)  				{  					var nameHolder = new GuiWidget()  					{  						Padding = new BorderDouble(0' 0' 5' 0)'  						VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  						HAnchor = HAnchor.ParentLeftRight'  					};    					nameHolder.AddChild(new WrappedTextWidget(settingData.PresentationName.Localize()' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor));    					nameArea.AddChild(nameHolder);  				}    				switch (settingData.DataEditType)  				{  					case SliceSettingData.DataEditTypes.INT:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();  							int currentValue;  							int.TryParse(sliceSettingValue' out currentValue);    							var intEditWidget = new MHNumberEdit(currentValue' pixelWidth: intEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Name = settingData.PresentationName + " Edit"'  							};  							intEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							content.AddChild(intEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' intEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								intEditWidget.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.DOUBLE:  						{  							double currentValue;  							double.TryParse(sliceSettingValue' out currentValue);    							var doubleEditWidget = new MHNumberEdit(currentValue' allowNegatives: true' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2 = 0;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.POSITIVE_DOUBLE:  						{  							const string multiValuesAreDiffernt = "-";  							FlowLayoutWidget content = new FlowLayoutWidget();    							var doubleEditWidget = new MHNumberEdit(0' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								Name = settingData.PresentationName + " Textbox"'  								SelectAllOnFocus = true  							};    							double currentValue;  							bool ChangesMultipleOtherSettings = settingData.SetSettingsOnChange.Count > 0;  							if (ChangesMultipleOtherSettings)  							{  								bool allTheSame = true;  								string setting = GetActiveValue(settingData.SetSettingsOnChange[0]["TargetSetting"]' layerCascade);  								for (int i = 1; i < settingData.SetSettingsOnChange.Count; i++)  								{  									string nextSetting = GetActiveValue(settingData.SetSettingsOnChange[i]["TargetSetting"]' layerCascade);  									if (setting != nextSetting)  									{  										allTheSame = false;  										break;  									}  								}    								if (allTheSame && setting.EndsWith("mm"))  								{  									double.TryParse(setting.Substring(0' setting.Length - 2)' out currentValue);  									doubleEditWidget.ActuallNumberEdit.Value = currentValue;  								}  								else  								{  									doubleEditWidget.ActuallNumberEdit.InternalNumberEdit.Text = multiValuesAreDiffernt;  								}  							}  							else // just set the setting normally  							{  								double.TryParse(sliceSettingValue' out currentValue);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue;  							}  							doubleEditWidget.ActuallNumberEdit.InternalTextEditWidget.MarkAsStartingState();  							  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								NumberEdit numberEdit = (NumberEdit)sender;  								// If this setting sets other settings' then do that.  								if (ChangesMultipleOtherSettings  									&& numberEdit.Text != multiValuesAreDiffernt)  								{  									{  										ActiveSliceSettings.Instance.SetValue(settingData.SetSettingsOnChange[0]["TargetSetting"]' numberEdit.Value.ToString() + "mm"' persistenceLayer);  									}  								}    								// also always save to the local setting  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' numberEdit.Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							content.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' doubleEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2 = 0;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.OFFSET:  						{  							double currentValue;  							double.TryParse(sliceSettingValue' out currentValue);  							var doubleEditWidget = new MHNumberEdit(currentValue' allowDecimals: true' allowNegatives: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true    							};  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.DOUBLE_OR_PERCENT:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();    							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: doubleEditWidth - 2' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								var textEditWidget = (TextEditWidget)sender;  								string text = textEditWidget.Text.Trim();    								bool isPercent = text.Contains("%");  								if (isPercent)  								{  									text = text.Substring(0' text.IndexOf("%"));  								}  								double result;  								double.TryParse(text' out result);  								text = result.ToString();  								if (isPercent)  								{  									text += "%";  								}  								textEditWidget.Text = text;  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' textEditWidget.Text' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							stringEdit.ActualTextEditWidget.InternalTextEditWidget.AllSelected += (sender' e) =>  							{  								// select everything up to the % (if present)  								InternalTextEditWidget textEditWidget = (InternalTextEditWidget)sender;  								int percentIndex = textEditWidget.Text.IndexOf("%");  								if (percentIndex != -1)  								{  									textEditWidget.SetSelection(0' percentIndex - 1);  								}  							};    							content.AddChild(stringEdit);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.INT_OR_MM:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();    							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: doubleEditWidth - 2' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};    							string startingText = stringEdit.Text;  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								TextEditWidget textEditWidget = (TextEditWidget)sender;  								// only validate when we lose focus  								if (!textEditWidget.ContainsFocus)  								{  									string text = textEditWidget.Text;  									text = text.Trim();  									bool isMm = text.Contains("mm");  									if (isMm)  									{  										text = text.Substring(0' text.IndexOf("mm"));  									}  									double result;  									double.TryParse(text' out result);  									text = result.ToString();  									if (isMm)  									{  										text += "mm";  									}  									else  									{  										result = (int)result;  										text = result.ToString();  									}  									textEditWidget.Text = text;  									startingText = stringEdit.Text;  								}  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' textEditWidget.Text' persistenceLayer);  								settingsRow.UpdateStyle();    								// make sure we are still looking for the final validation before saving.  								if (textEditWidget.ContainsFocus)  								{  									UiThread.RunOnIdle(() =>  									{  										string currentText = textEditWidget.Text;  										int cursorIndex = textEditWidget.InternalTextEditWidget.CharIndexToInsertBefore;  										textEditWidget.Text = startingText;  										textEditWidget.InternalTextEditWidget.MarkAsStartingState();  										textEditWidget.Text = currentText;  										textEditWidget.InternalTextEditWidget.CharIndexToInsertBefore = cursorIndex;  									});  								}  							};    							stringEdit.ActualTextEditWidget.InternalTextEditWidget.AllSelected += (sender' e) =>  							{  								// select everything up to the mm (if present)  								InternalTextEditWidget textEditWidget = (InternalTextEditWidget)sender;  								int mMIndex = textEditWidget.Text.IndexOf("mm");  								if (mMIndex != -1)  								{  									textEditWidget.SetSelection(0' mMIndex - 1);  								}  							};    							content.AddChild(stringEdit);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.CHECK_BOX:  						{  							var checkBoxWidget = new CheckBox("")  							{  								Name = settingData.PresentationName + " Checkbox"'  								ToolTipText = settingData.HelpText'  								VAnchor = Agg.UI.VAnchor.ParentBottom'  								TextColor = ActiveTheme.Instance.PrimaryTextColor'  								Checked = sliceSettingValue == "1"  							};  							checkBoxWidget.Click += (sender' e) =>  							{  								// SetValue should only be called when the checkbox is clicked. If this code makes its way into checkstatechanged  								// we end up adding a key back into the dictionary after we call .ClearValue' resulting in the blue override bar reappearing after  								// clearing a useroverride with the red x  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' checkBoxWidget.Checked ? "1" : "0"' persistenceLayer);  							};  							checkBoxWidget.CheckedStateChanged += (s' e) =>  							{  								// Linked settings should be updated in all cases (user clicked checkbox' user clicked clear)  								foreach (var setSettingsData in settingData.SetSettingsOnChange)  								{  									string targetValue;  									if (setSettingsData.TryGetValue(checkBoxWidget.Checked ? "OnValue" : "OffValue"' out targetValue))  									{  										ActiveSliceSettings.Instance.SetValue(setSettingsData["TargetSetting"]' targetValue' persistenceLayer);  									}  								}    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(checkBoxWidget);    							settingsRow.ValueChanged = (text) =>  							{  								checkBoxWidget.Checked = text == "1";  							};  						}  						break;    					case SliceSettingData.DataEditTypes.STRING:  						{  							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: settingData.ShowAsOverride ? 120 : 200' tabIndex: tabIndexForItem++)  							{  								Name = settingData.PresentationName + " Edit"'  							};  							stringEdit.ToolTipText = settingData.HelpText;  							  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((TextEditWidget)sender).Text' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							dataArea.AddChild(stringEdit);    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.MULTI_LINE_TEXT:  						{  							string convertedNewLines = sliceSettingValue.Replace("\\n"' "\n");  							var stringEdit = new MHTextEditWidget(convertedNewLines' pixelWidth: 320' pixelHeight: multiLineEditHeight' multiLine: true' tabIndex: tabIndexForItem++' typeFace: ApplicationController.MonoSpacedTypeFace)  							{  								HAnchor = HAnchor.ParentLeftRight'  							};    							stringEdit.DrawFromHintedCache();    							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((TextEditWidget)sender).Text.Replace("\n"' "\\n")' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							nameArea.HAnchor = HAnchor.AbsolutePosition;  							nameArea.Width = 0;  							dataArea.AddChild(stringEdit);  							dataArea.HAnchor = HAnchor.ParentLeftRight;    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text.Replace("\\n"' "\n");  							};  						}  						break;    					case SliceSettingData.DataEditTypes.COM_PORT:  						{  #if __ANDROID__  							addControl = false;  #endif    							EventHandler localUnregisterEvents = null;    							bool canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect;  							// The COM_PORT control is unique in its approach to the SlicerConfigName. It uses "com_port" settings name to  							// bind to a context that will place it in the SliceSetting view but it binds its values to a machine  							// specific dictionary key that is not exposed in the UI. At runtime we lookup and store to '<machinename>_com_port'  							// ensuring that a single printer can be shared across different devices and we'll select the correct com port in each case  							var selectableOptions = new DropDownList("None".Localize()' maxHeight: 200)  							{  								ToolTipText = settingData.HelpText'  								Margin = new BorderDouble()'  								Name = "Serial Port Dropdown"'  								// Prevent droplist interaction when connected  								Enabled = canChangeComPort'  								TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150)'  								BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150)'  							};    							selectableOptions.Click += (s' e) =>  							{  								AddComMenuItems(settingData' persistenceLayer' settingsRow' selectableOptions);  							};    							AddComMenuItems(settingData' persistenceLayer' settingsRow' selectableOptions);    							dataArea.AddChild(selectableOptions);    							settingsRow.ValueChanged = (text) =>  							{  								// Lookup the machine specific comport value rather than the passed in text value  								selectableOptions.SelectedLabel = ActiveSliceSettings.Instance.Helpers.ComPort();  							};    							// Prevent droplist interaction when connected  							PrinterConnectionAndCommunication.Instance.CommunicationStateChanged.RegisterEvent((s' e) =>  							{  								canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect;  								selectableOptions.Enabled = canChangeComPort;  								selectableOptions.TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150);  								selectableOptions.BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150);  							}' ref localUnregisterEvents);    							// Release event listener on close  							selectableOptions.Closed += (s' e) =>  							{  								localUnregisterEvents?.Invoke(null' null);  							};  						}  						break;    					case SliceSettingData.DataEditTypes.LIST:  						{  							var selectableOptions = new DropDownList("None".Localize()' maxHeight: 200)  							{  								ToolTipText = settingData.HelpText'  								Margin = new BorderDouble()  							};    							foreach (string listItem in settingData.ExtraSettings.Split('''))  							{  								MenuItem newItem = selectableOptions.AddItem(listItem);  								if (newItem.Text == sliceSettingValue)  								{  									selectableOptions.SelectedLabel = sliceSettingValue;  								}    								newItem.Selected += (sender' e) =>  								{  									MenuItem menuItem = ((MenuItem)sender);  									ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' menuItem.Text' persistenceLayer);    									settingsRow.UpdateStyle();  								};  							}    							dataArea.AddChild(selectableOptions);    							settingsRow.ValueChanged = (text) =>  							{  								selectableOptions.SelectedLabel = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.HARDWARE_PRESENT:  						{  							var checkBoxWidget = new CheckBox("")  							{  								Name = settingData.PresentationName + " Checkbox"'  								ToolTipText = settingData.HelpText'  								VAnchor = Agg.UI.VAnchor.ParentBottom'  								TextColor = ActiveTheme.Instance.PrimaryTextColor'  								Checked = sliceSettingValue == "1"  							};    							checkBoxWidget.Click += (sender' e) =>  							{  								bool isChecked = ((CheckBox)sender).Checked;  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' isChecked ? "1" : "0"' persistenceLayer);    								settingsRow.UpdateStyle();  							};    							dataArea.AddChild(checkBoxWidget);    							settingsRow.ValueChanged = (text) =>  							{  								checkBoxWidget.Checked = text == "1";  							};  						}  						break;    					case SliceSettingData.DataEditTypes.VECTOR2:  						{  							string[] xyValueStrings = sliceSettingValue.Split(''');  							if (xyValueStrings.Length != 2)  							{  								xyValueStrings = new string[] { "0"' "0" };  							}    							double currentXValue;  							double.TryParse(xyValueStrings[0]' out currentXValue);    							var xEditWidget = new MHNumberEdit(currentXValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};    							double currentYValue;  							double.TryParse(xyValueStrings[1]' out currentYValue);    							var yEditWidget = new MHNumberEdit(currentYValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Margin = new BorderDouble(20' 0' 0' 0)'  							};    							xEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(xEditWidget);  							dataArea.AddChild(new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  							{  								VAnchor = VAnchor.ParentCenter'  								Margin = new BorderDouble(5' 0)'  							});    							yEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(yEditWidget);  							var yLabel = new GuiWidget()  							{  								VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  								Padding = new BorderDouble(5' 0)'  								HAnchor = HAnchor.ParentLeftRight'  							};  							yLabel.AddChild(new WrappedTextWidget("Y"' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));  							unitsArea.AddChild(yLabel);    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2;  								string[] xyValueStrings2 = text.Split(''');  								if (xyValueStrings2.Length != 2)  								{  									xyValueStrings2 = new string[] { "0"' "0" };  								}    								double.TryParse(xyValueStrings2[0]' out currentValue2);  								xEditWidget.ActuallNumberEdit.Value = currentValue2;    								double.TryParse(xyValueStrings2[1]' out currentValue2);  								yEditWidget.ActuallNumberEdit.Value = currentValue2;  							};    						}  						break;    					case SliceSettingData.DataEditTypes.OFFSET2:  						{  							Vector2 offset = ActiveSliceSettings.Instance.Helpers.ExtruderOffset(extruderIndex);    							var xEditWidget = new MHNumberEdit(offset.x' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  							};    							var yEditWidget = new MHNumberEdit(offset.y' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Margin = new BorderDouble(20' 0' 0' 0)'  							};    							xEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								int extruderIndexLocal = extruderIndex;  								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(xEditWidget);  							dataArea.AddChild(new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  							{  								VAnchor = VAnchor.ParentCenter'  								Margin = new BorderDouble(5' 0)'  							});    							yEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								int extruderIndexLocal = extruderIndex;  								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(yEditWidget);  							var yLabel = new GuiWidget()  							{  								Padding = new BorderDouble(5' 0)'  								HAnchor = HAnchor.ParentLeftRight'  								VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  							};  							yLabel.AddChild(new WrappedTextWidget("Y"' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));  							unitsArea.AddChild(yLabel);    							settingsRow.ValueChanged = (text) =>  							{  								Vector2 offset2 = ActiveSliceSettings.Instance.Helpers.ExtruderOffset(extruderIndex);  								xEditWidget.ActuallNumberEdit.Value = offset2.x;  								yEditWidget.ActuallNumberEdit.Value = offset2.y;  							};  						}  						break;    					default:  						var missingSetting = new TextWidget(String.Format("Missing the setting for '{0}'."' settingData.DataEditType.ToString()))  						{  							TextColor = ActiveTheme.Instance.PrimaryTextColor'  							BackgroundColor = RGBA_Bytes.Red  						};  						dataArea.AddChild(missingSetting);  						break;  				}  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The following statement contains a magic number: if (!PrinterSettings.KnownSettings.Contains(settingData.SlicerConfigName))  			{  				// the setting we think we are adding is not in the known settings it may have been deprecated  				TextWidget settingName = new TextWidget(String.Format("Setting '{0}' not found in known settings"' settingData.SlicerConfigName));  				settingName.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				//settingName.MinimumSize = new Vector2(minSettingNameWidth' settingName.MinimumSize.y);  				nameArea.AddChild(settingName);  				nameArea.BackgroundColor = RGBA_Bytes.Red;  			}  			else  			{  				int intEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int doubleEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int vectorXYEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int multiLineEditHeight = (int)(120 * GuiWidget.DeviceScale + .5);    				if (settingData.DataEditType != SliceSettingData.DataEditTypes.MULTI_LINE_TEXT)  				{  					var nameHolder = new GuiWidget()  					{  						Padding = new BorderDouble(0' 0' 5' 0)'  						VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  						HAnchor = HAnchor.ParentLeftRight'  					};    					nameHolder.AddChild(new WrappedTextWidget(settingData.PresentationName.Localize()' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor));    					nameArea.AddChild(nameHolder);  				}    				switch (settingData.DataEditType)  				{  					case SliceSettingData.DataEditTypes.INT:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();  							int currentValue;  							int.TryParse(sliceSettingValue' out currentValue);    							var intEditWidget = new MHNumberEdit(currentValue' pixelWidth: intEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Name = settingData.PresentationName + " Edit"'  							};  							intEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							content.AddChild(intEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' intEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								intEditWidget.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.DOUBLE:  						{  							double currentValue;  							double.TryParse(sliceSettingValue' out currentValue);    							var doubleEditWidget = new MHNumberEdit(currentValue' allowNegatives: true' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2 = 0;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.POSITIVE_DOUBLE:  						{  							const string multiValuesAreDiffernt = "-";  							FlowLayoutWidget content = new FlowLayoutWidget();    							var doubleEditWidget = new MHNumberEdit(0' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								Name = settingData.PresentationName + " Textbox"'  								SelectAllOnFocus = true  							};    							double currentValue;  							bool ChangesMultipleOtherSettings = settingData.SetSettingsOnChange.Count > 0;  							if (ChangesMultipleOtherSettings)  							{  								bool allTheSame = true;  								string setting = GetActiveValue(settingData.SetSettingsOnChange[0]["TargetSetting"]' layerCascade);  								for (int i = 1; i < settingData.SetSettingsOnChange.Count; i++)  								{  									string nextSetting = GetActiveValue(settingData.SetSettingsOnChange[i]["TargetSetting"]' layerCascade);  									if (setting != nextSetting)  									{  										allTheSame = false;  										break;  									}  								}    								if (allTheSame && setting.EndsWith("mm"))  								{  									double.TryParse(setting.Substring(0' setting.Length - 2)' out currentValue);  									doubleEditWidget.ActuallNumberEdit.Value = currentValue;  								}  								else  								{  									doubleEditWidget.ActuallNumberEdit.InternalNumberEdit.Text = multiValuesAreDiffernt;  								}  							}  							else // just set the setting normally  							{  								double.TryParse(sliceSettingValue' out currentValue);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue;  							}  							doubleEditWidget.ActuallNumberEdit.InternalTextEditWidget.MarkAsStartingState();  							  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								NumberEdit numberEdit = (NumberEdit)sender;  								// If this setting sets other settings' then do that.  								if (ChangesMultipleOtherSettings  									&& numberEdit.Text != multiValuesAreDiffernt)  								{  									{  										ActiveSliceSettings.Instance.SetValue(settingData.SetSettingsOnChange[0]["TargetSetting"]' numberEdit.Value.ToString() + "mm"' persistenceLayer);  									}  								}    								// also always save to the local setting  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' numberEdit.Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							content.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' doubleEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2 = 0;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.OFFSET:  						{  							double currentValue;  							double.TryParse(sliceSettingValue' out currentValue);  							var doubleEditWidget = new MHNumberEdit(currentValue' allowDecimals: true' allowNegatives: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true    							};  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.DOUBLE_OR_PERCENT:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();    							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: doubleEditWidth - 2' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								var textEditWidget = (TextEditWidget)sender;  								string text = textEditWidget.Text.Trim();    								bool isPercent = text.Contains("%");  								if (isPercent)  								{  									text = text.Substring(0' text.IndexOf("%"));  								}  								double result;  								double.TryParse(text' out result);  								text = result.ToString();  								if (isPercent)  								{  									text += "%";  								}  								textEditWidget.Text = text;  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' textEditWidget.Text' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							stringEdit.ActualTextEditWidget.InternalTextEditWidget.AllSelected += (sender' e) =>  							{  								// select everything up to the % (if present)  								InternalTextEditWidget textEditWidget = (InternalTextEditWidget)sender;  								int percentIndex = textEditWidget.Text.IndexOf("%");  								if (percentIndex != -1)  								{  									textEditWidget.SetSelection(0' percentIndex - 1);  								}  							};    							content.AddChild(stringEdit);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.INT_OR_MM:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();    							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: doubleEditWidth - 2' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};    							string startingText = stringEdit.Text;  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								TextEditWidget textEditWidget = (TextEditWidget)sender;  								// only validate when we lose focus  								if (!textEditWidget.ContainsFocus)  								{  									string text = textEditWidget.Text;  									text = text.Trim();  									bool isMm = text.Contains("mm");  									if (isMm)  									{  										text = text.Substring(0' text.IndexOf("mm"));  									}  									double result;  									double.TryParse(text' out result);  									text = result.ToString();  									if (isMm)  									{  										text += "mm";  									}  									else  									{  										result = (int)result;  										text = result.ToString();  									}  									textEditWidget.Text = text;  									startingText = stringEdit.Text;  								}  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' textEditWidget.Text' persistenceLayer);  								settingsRow.UpdateStyle();    								// make sure we are still looking for the final validation before saving.  								if (textEditWidget.ContainsFocus)  								{  									UiThread.RunOnIdle(() =>  									{  										string currentText = textEditWidget.Text;  										int cursorIndex = textEditWidget.InternalTextEditWidget.CharIndexToInsertBefore;  										textEditWidget.Text = startingText;  										textEditWidget.InternalTextEditWidget.MarkAsStartingState();  										textEditWidget.Text = currentText;  										textEditWidget.InternalTextEditWidget.CharIndexToInsertBefore = cursorIndex;  									});  								}  							};    							stringEdit.ActualTextEditWidget.InternalTextEditWidget.AllSelected += (sender' e) =>  							{  								// select everything up to the mm (if present)  								InternalTextEditWidget textEditWidget = (InternalTextEditWidget)sender;  								int mMIndex = textEditWidget.Text.IndexOf("mm");  								if (mMIndex != -1)  								{  									textEditWidget.SetSelection(0' mMIndex - 1);  								}  							};    							content.AddChild(stringEdit);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.CHECK_BOX:  						{  							var checkBoxWidget = new CheckBox("")  							{  								Name = settingData.PresentationName + " Checkbox"'  								ToolTipText = settingData.HelpText'  								VAnchor = Agg.UI.VAnchor.ParentBottom'  								TextColor = ActiveTheme.Instance.PrimaryTextColor'  								Checked = sliceSettingValue == "1"  							};  							checkBoxWidget.Click += (sender' e) =>  							{  								// SetValue should only be called when the checkbox is clicked. If this code makes its way into checkstatechanged  								// we end up adding a key back into the dictionary after we call .ClearValue' resulting in the blue override bar reappearing after  								// clearing a useroverride with the red x  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' checkBoxWidget.Checked ? "1" : "0"' persistenceLayer);  							};  							checkBoxWidget.CheckedStateChanged += (s' e) =>  							{  								// Linked settings should be updated in all cases (user clicked checkbox' user clicked clear)  								foreach (var setSettingsData in settingData.SetSettingsOnChange)  								{  									string targetValue;  									if (setSettingsData.TryGetValue(checkBoxWidget.Checked ? "OnValue" : "OffValue"' out targetValue))  									{  										ActiveSliceSettings.Instance.SetValue(setSettingsData["TargetSetting"]' targetValue' persistenceLayer);  									}  								}    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(checkBoxWidget);    							settingsRow.ValueChanged = (text) =>  							{  								checkBoxWidget.Checked = text == "1";  							};  						}  						break;    					case SliceSettingData.DataEditTypes.STRING:  						{  							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: settingData.ShowAsOverride ? 120 : 200' tabIndex: tabIndexForItem++)  							{  								Name = settingData.PresentationName + " Edit"'  							};  							stringEdit.ToolTipText = settingData.HelpText;  							  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((TextEditWidget)sender).Text' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							dataArea.AddChild(stringEdit);    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.MULTI_LINE_TEXT:  						{  							string convertedNewLines = sliceSettingValue.Replace("\\n"' "\n");  							var stringEdit = new MHTextEditWidget(convertedNewLines' pixelWidth: 320' pixelHeight: multiLineEditHeight' multiLine: true' tabIndex: tabIndexForItem++' typeFace: ApplicationController.MonoSpacedTypeFace)  							{  								HAnchor = HAnchor.ParentLeftRight'  							};    							stringEdit.DrawFromHintedCache();    							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((TextEditWidget)sender).Text.Replace("\n"' "\\n")' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							nameArea.HAnchor = HAnchor.AbsolutePosition;  							nameArea.Width = 0;  							dataArea.AddChild(stringEdit);  							dataArea.HAnchor = HAnchor.ParentLeftRight;    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text.Replace("\\n"' "\n");  							};  						}  						break;    					case SliceSettingData.DataEditTypes.COM_PORT:  						{  #if __ANDROID__  							addControl = false;  #endif    							EventHandler localUnregisterEvents = null;    							bool canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect;  							// The COM_PORT control is unique in its approach to the SlicerConfigName. It uses "com_port" settings name to  							// bind to a context that will place it in the SliceSetting view but it binds its values to a machine  							// specific dictionary key that is not exposed in the UI. At runtime we lookup and store to '<machinename>_com_port'  							// ensuring that a single printer can be shared across different devices and we'll select the correct com port in each case  							var selectableOptions = new DropDownList("None".Localize()' maxHeight: 200)  							{  								ToolTipText = settingData.HelpText'  								Margin = new BorderDouble()'  								Name = "Serial Port Dropdown"'  								// Prevent droplist interaction when connected  								Enabled = canChangeComPort'  								TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150)'  								BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150)'  							};    							selectableOptions.Click += (s' e) =>  							{  								AddComMenuItems(settingData' persistenceLayer' settingsRow' selectableOptions);  							};    							AddComMenuItems(settingData' persistenceLayer' settingsRow' selectableOptions);    							dataArea.AddChild(selectableOptions);    							settingsRow.ValueChanged = (text) =>  							{  								// Lookup the machine specific comport value rather than the passed in text value  								selectableOptions.SelectedLabel = ActiveSliceSettings.Instance.Helpers.ComPort();  							};    							// Prevent droplist interaction when connected  							PrinterConnectionAndCommunication.Instance.CommunicationStateChanged.RegisterEvent((s' e) =>  							{  								canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect;  								selectableOptions.Enabled = canChangeComPort;  								selectableOptions.TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150);  								selectableOptions.BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150);  							}' ref localUnregisterEvents);    							// Release event listener on close  							selectableOptions.Closed += (s' e) =>  							{  								localUnregisterEvents?.Invoke(null' null);  							};  						}  						break;    					case SliceSettingData.DataEditTypes.LIST:  						{  							var selectableOptions = new DropDownList("None".Localize()' maxHeight: 200)  							{  								ToolTipText = settingData.HelpText'  								Margin = new BorderDouble()  							};    							foreach (string listItem in settingData.ExtraSettings.Split('''))  							{  								MenuItem newItem = selectableOptions.AddItem(listItem);  								if (newItem.Text == sliceSettingValue)  								{  									selectableOptions.SelectedLabel = sliceSettingValue;  								}    								newItem.Selected += (sender' e) =>  								{  									MenuItem menuItem = ((MenuItem)sender);  									ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' menuItem.Text' persistenceLayer);    									settingsRow.UpdateStyle();  								};  							}    							dataArea.AddChild(selectableOptions);    							settingsRow.ValueChanged = (text) =>  							{  								selectableOptions.SelectedLabel = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.HARDWARE_PRESENT:  						{  							var checkBoxWidget = new CheckBox("")  							{  								Name = settingData.PresentationName + " Checkbox"'  								ToolTipText = settingData.HelpText'  								VAnchor = Agg.UI.VAnchor.ParentBottom'  								TextColor = ActiveTheme.Instance.PrimaryTextColor'  								Checked = sliceSettingValue == "1"  							};    							checkBoxWidget.Click += (sender' e) =>  							{  								bool isChecked = ((CheckBox)sender).Checked;  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' isChecked ? "1" : "0"' persistenceLayer);    								settingsRow.UpdateStyle();  							};    							dataArea.AddChild(checkBoxWidget);    							settingsRow.ValueChanged = (text) =>  							{  								checkBoxWidget.Checked = text == "1";  							};  						}  						break;    					case SliceSettingData.DataEditTypes.VECTOR2:  						{  							string[] xyValueStrings = sliceSettingValue.Split(''');  							if (xyValueStrings.Length != 2)  							{  								xyValueStrings = new string[] { "0"' "0" };  							}    							double currentXValue;  							double.TryParse(xyValueStrings[0]' out currentXValue);    							var xEditWidget = new MHNumberEdit(currentXValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};    							double currentYValue;  							double.TryParse(xyValueStrings[1]' out currentYValue);    							var yEditWidget = new MHNumberEdit(currentYValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Margin = new BorderDouble(20' 0' 0' 0)'  							};    							xEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(xEditWidget);  							dataArea.AddChild(new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  							{  								VAnchor = VAnchor.ParentCenter'  								Margin = new BorderDouble(5' 0)'  							});    							yEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(yEditWidget);  							var yLabel = new GuiWidget()  							{  								VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  								Padding = new BorderDouble(5' 0)'  								HAnchor = HAnchor.ParentLeftRight'  							};  							yLabel.AddChild(new WrappedTextWidget("Y"' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));  							unitsArea.AddChild(yLabel);    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2;  								string[] xyValueStrings2 = text.Split(''');  								if (xyValueStrings2.Length != 2)  								{  									xyValueStrings2 = new string[] { "0"' "0" };  								}    								double.TryParse(xyValueStrings2[0]' out currentValue2);  								xEditWidget.ActuallNumberEdit.Value = currentValue2;    								double.TryParse(xyValueStrings2[1]' out currentValue2);  								yEditWidget.ActuallNumberEdit.Value = currentValue2;  							};    						}  						break;    					case SliceSettingData.DataEditTypes.OFFSET2:  						{  							Vector2 offset = ActiveSliceSettings.Instance.Helpers.ExtruderOffset(extruderIndex);    							var xEditWidget = new MHNumberEdit(offset.x' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  							};    							var yEditWidget = new MHNumberEdit(offset.y' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Margin = new BorderDouble(20' 0' 0' 0)'  							};    							xEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								int extruderIndexLocal = extruderIndex;  								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(xEditWidget);  							dataArea.AddChild(new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  							{  								VAnchor = VAnchor.ParentCenter'  								Margin = new BorderDouble(5' 0)'  							});    							yEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								int extruderIndexLocal = extruderIndex;  								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(yEditWidget);  							var yLabel = new GuiWidget()  							{  								Padding = new BorderDouble(5' 0)'  								HAnchor = HAnchor.ParentLeftRight'  								VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  							};  							yLabel.AddChild(new WrappedTextWidget("Y"' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));  							unitsArea.AddChild(yLabel);    							settingsRow.ValueChanged = (text) =>  							{  								Vector2 offset2 = ActiveSliceSettings.Instance.Helpers.ExtruderOffset(extruderIndex);  								xEditWidget.ActuallNumberEdit.Value = offset2.x;  								yEditWidget.ActuallNumberEdit.Value = offset2.y;  							};  						}  						break;    					default:  						var missingSetting = new TextWidget(String.Format("Missing the setting for '{0}'."' settingData.DataEditType.ToString()))  						{  							TextColor = ActiveTheme.Instance.PrimaryTextColor'  							BackgroundColor = RGBA_Bytes.Red  						};  						dataArea.AddChild(missingSetting);  						break;  				}  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The following statement contains a magic number: if (!PrinterSettings.KnownSettings.Contains(settingData.SlicerConfigName))  			{  				// the setting we think we are adding is not in the known settings it may have been deprecated  				TextWidget settingName = new TextWidget(String.Format("Setting '{0}' not found in known settings"' settingData.SlicerConfigName));  				settingName.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				//settingName.MinimumSize = new Vector2(minSettingNameWidth' settingName.MinimumSize.y);  				nameArea.AddChild(settingName);  				nameArea.BackgroundColor = RGBA_Bytes.Red;  			}  			else  			{  				int intEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int doubleEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int vectorXYEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int multiLineEditHeight = (int)(120 * GuiWidget.DeviceScale + .5);    				if (settingData.DataEditType != SliceSettingData.DataEditTypes.MULTI_LINE_TEXT)  				{  					var nameHolder = new GuiWidget()  					{  						Padding = new BorderDouble(0' 0' 5' 0)'  						VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  						HAnchor = HAnchor.ParentLeftRight'  					};    					nameHolder.AddChild(new WrappedTextWidget(settingData.PresentationName.Localize()' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor));    					nameArea.AddChild(nameHolder);  				}    				switch (settingData.DataEditType)  				{  					case SliceSettingData.DataEditTypes.INT:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();  							int currentValue;  							int.TryParse(sliceSettingValue' out currentValue);    							var intEditWidget = new MHNumberEdit(currentValue' pixelWidth: intEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Name = settingData.PresentationName + " Edit"'  							};  							intEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							content.AddChild(intEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' intEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								intEditWidget.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.DOUBLE:  						{  							double currentValue;  							double.TryParse(sliceSettingValue' out currentValue);    							var doubleEditWidget = new MHNumberEdit(currentValue' allowNegatives: true' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2 = 0;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.POSITIVE_DOUBLE:  						{  							const string multiValuesAreDiffernt = "-";  							FlowLayoutWidget content = new FlowLayoutWidget();    							var doubleEditWidget = new MHNumberEdit(0' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								Name = settingData.PresentationName + " Textbox"'  								SelectAllOnFocus = true  							};    							double currentValue;  							bool ChangesMultipleOtherSettings = settingData.SetSettingsOnChange.Count > 0;  							if (ChangesMultipleOtherSettings)  							{  								bool allTheSame = true;  								string setting = GetActiveValue(settingData.SetSettingsOnChange[0]["TargetSetting"]' layerCascade);  								for (int i = 1; i < settingData.SetSettingsOnChange.Count; i++)  								{  									string nextSetting = GetActiveValue(settingData.SetSettingsOnChange[i]["TargetSetting"]' layerCascade);  									if (setting != nextSetting)  									{  										allTheSame = false;  										break;  									}  								}    								if (allTheSame && setting.EndsWith("mm"))  								{  									double.TryParse(setting.Substring(0' setting.Length - 2)' out currentValue);  									doubleEditWidget.ActuallNumberEdit.Value = currentValue;  								}  								else  								{  									doubleEditWidget.ActuallNumberEdit.InternalNumberEdit.Text = multiValuesAreDiffernt;  								}  							}  							else // just set the setting normally  							{  								double.TryParse(sliceSettingValue' out currentValue);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue;  							}  							doubleEditWidget.ActuallNumberEdit.InternalTextEditWidget.MarkAsStartingState();  							  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								NumberEdit numberEdit = (NumberEdit)sender;  								// If this setting sets other settings' then do that.  								if (ChangesMultipleOtherSettings  									&& numberEdit.Text != multiValuesAreDiffernt)  								{  									{  										ActiveSliceSettings.Instance.SetValue(settingData.SetSettingsOnChange[0]["TargetSetting"]' numberEdit.Value.ToString() + "mm"' persistenceLayer);  									}  								}    								// also always save to the local setting  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' numberEdit.Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							content.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' doubleEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2 = 0;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.OFFSET:  						{  							double currentValue;  							double.TryParse(sliceSettingValue' out currentValue);  							var doubleEditWidget = new MHNumberEdit(currentValue' allowDecimals: true' allowNegatives: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true    							};  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.DOUBLE_OR_PERCENT:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();    							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: doubleEditWidth - 2' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								var textEditWidget = (TextEditWidget)sender;  								string text = textEditWidget.Text.Trim();    								bool isPercent = text.Contains("%");  								if (isPercent)  								{  									text = text.Substring(0' text.IndexOf("%"));  								}  								double result;  								double.TryParse(text' out result);  								text = result.ToString();  								if (isPercent)  								{  									text += "%";  								}  								textEditWidget.Text = text;  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' textEditWidget.Text' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							stringEdit.ActualTextEditWidget.InternalTextEditWidget.AllSelected += (sender' e) =>  							{  								// select everything up to the % (if present)  								InternalTextEditWidget textEditWidget = (InternalTextEditWidget)sender;  								int percentIndex = textEditWidget.Text.IndexOf("%");  								if (percentIndex != -1)  								{  									textEditWidget.SetSelection(0' percentIndex - 1);  								}  							};    							content.AddChild(stringEdit);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.INT_OR_MM:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();    							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: doubleEditWidth - 2' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};    							string startingText = stringEdit.Text;  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								TextEditWidget textEditWidget = (TextEditWidget)sender;  								// only validate when we lose focus  								if (!textEditWidget.ContainsFocus)  								{  									string text = textEditWidget.Text;  									text = text.Trim();  									bool isMm = text.Contains("mm");  									if (isMm)  									{  										text = text.Substring(0' text.IndexOf("mm"));  									}  									double result;  									double.TryParse(text' out result);  									text = result.ToString();  									if (isMm)  									{  										text += "mm";  									}  									else  									{  										result = (int)result;  										text = result.ToString();  									}  									textEditWidget.Text = text;  									startingText = stringEdit.Text;  								}  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' textEditWidget.Text' persistenceLayer);  								settingsRow.UpdateStyle();    								// make sure we are still looking for the final validation before saving.  								if (textEditWidget.ContainsFocus)  								{  									UiThread.RunOnIdle(() =>  									{  										string currentText = textEditWidget.Text;  										int cursorIndex = textEditWidget.InternalTextEditWidget.CharIndexToInsertBefore;  										textEditWidget.Text = startingText;  										textEditWidget.InternalTextEditWidget.MarkAsStartingState();  										textEditWidget.Text = currentText;  										textEditWidget.InternalTextEditWidget.CharIndexToInsertBefore = cursorIndex;  									});  								}  							};    							stringEdit.ActualTextEditWidget.InternalTextEditWidget.AllSelected += (sender' e) =>  							{  								// select everything up to the mm (if present)  								InternalTextEditWidget textEditWidget = (InternalTextEditWidget)sender;  								int mMIndex = textEditWidget.Text.IndexOf("mm");  								if (mMIndex != -1)  								{  									textEditWidget.SetSelection(0' mMIndex - 1);  								}  							};    							content.AddChild(stringEdit);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.CHECK_BOX:  						{  							var checkBoxWidget = new CheckBox("")  							{  								Name = settingData.PresentationName + " Checkbox"'  								ToolTipText = settingData.HelpText'  								VAnchor = Agg.UI.VAnchor.ParentBottom'  								TextColor = ActiveTheme.Instance.PrimaryTextColor'  								Checked = sliceSettingValue == "1"  							};  							checkBoxWidget.Click += (sender' e) =>  							{  								// SetValue should only be called when the checkbox is clicked. If this code makes its way into checkstatechanged  								// we end up adding a key back into the dictionary after we call .ClearValue' resulting in the blue override bar reappearing after  								// clearing a useroverride with the red x  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' checkBoxWidget.Checked ? "1" : "0"' persistenceLayer);  							};  							checkBoxWidget.CheckedStateChanged += (s' e) =>  							{  								// Linked settings should be updated in all cases (user clicked checkbox' user clicked clear)  								foreach (var setSettingsData in settingData.SetSettingsOnChange)  								{  									string targetValue;  									if (setSettingsData.TryGetValue(checkBoxWidget.Checked ? "OnValue" : "OffValue"' out targetValue))  									{  										ActiveSliceSettings.Instance.SetValue(setSettingsData["TargetSetting"]' targetValue' persistenceLayer);  									}  								}    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(checkBoxWidget);    							settingsRow.ValueChanged = (text) =>  							{  								checkBoxWidget.Checked = text == "1";  							};  						}  						break;    					case SliceSettingData.DataEditTypes.STRING:  						{  							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: settingData.ShowAsOverride ? 120 : 200' tabIndex: tabIndexForItem++)  							{  								Name = settingData.PresentationName + " Edit"'  							};  							stringEdit.ToolTipText = settingData.HelpText;  							  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((TextEditWidget)sender).Text' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							dataArea.AddChild(stringEdit);    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.MULTI_LINE_TEXT:  						{  							string convertedNewLines = sliceSettingValue.Replace("\\n"' "\n");  							var stringEdit = new MHTextEditWidget(convertedNewLines' pixelWidth: 320' pixelHeight: multiLineEditHeight' multiLine: true' tabIndex: tabIndexForItem++' typeFace: ApplicationController.MonoSpacedTypeFace)  							{  								HAnchor = HAnchor.ParentLeftRight'  							};    							stringEdit.DrawFromHintedCache();    							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((TextEditWidget)sender).Text.Replace("\n"' "\\n")' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							nameArea.HAnchor = HAnchor.AbsolutePosition;  							nameArea.Width = 0;  							dataArea.AddChild(stringEdit);  							dataArea.HAnchor = HAnchor.ParentLeftRight;    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text.Replace("\\n"' "\n");  							};  						}  						break;    					case SliceSettingData.DataEditTypes.COM_PORT:  						{  #if __ANDROID__  							addControl = false;  #endif    							EventHandler localUnregisterEvents = null;    							bool canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect;  							// The COM_PORT control is unique in its approach to the SlicerConfigName. It uses "com_port" settings name to  							// bind to a context that will place it in the SliceSetting view but it binds its values to a machine  							// specific dictionary key that is not exposed in the UI. At runtime we lookup and store to '<machinename>_com_port'  							// ensuring that a single printer can be shared across different devices and we'll select the correct com port in each case  							var selectableOptions = new DropDownList("None".Localize()' maxHeight: 200)  							{  								ToolTipText = settingData.HelpText'  								Margin = new BorderDouble()'  								Name = "Serial Port Dropdown"'  								// Prevent droplist interaction when connected  								Enabled = canChangeComPort'  								TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150)'  								BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150)'  							};    							selectableOptions.Click += (s' e) =>  							{  								AddComMenuItems(settingData' persistenceLayer' settingsRow' selectableOptions);  							};    							AddComMenuItems(settingData' persistenceLayer' settingsRow' selectableOptions);    							dataArea.AddChild(selectableOptions);    							settingsRow.ValueChanged = (text) =>  							{  								// Lookup the machine specific comport value rather than the passed in text value  								selectableOptions.SelectedLabel = ActiveSliceSettings.Instance.Helpers.ComPort();  							};    							// Prevent droplist interaction when connected  							PrinterConnectionAndCommunication.Instance.CommunicationStateChanged.RegisterEvent((s' e) =>  							{  								canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect;  								selectableOptions.Enabled = canChangeComPort;  								selectableOptions.TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150);  								selectableOptions.BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150);  							}' ref localUnregisterEvents);    							// Release event listener on close  							selectableOptions.Closed += (s' e) =>  							{  								localUnregisterEvents?.Invoke(null' null);  							};  						}  						break;    					case SliceSettingData.DataEditTypes.LIST:  						{  							var selectableOptions = new DropDownList("None".Localize()' maxHeight: 200)  							{  								ToolTipText = settingData.HelpText'  								Margin = new BorderDouble()  							};    							foreach (string listItem in settingData.ExtraSettings.Split('''))  							{  								MenuItem newItem = selectableOptions.AddItem(listItem);  								if (newItem.Text == sliceSettingValue)  								{  									selectableOptions.SelectedLabel = sliceSettingValue;  								}    								newItem.Selected += (sender' e) =>  								{  									MenuItem menuItem = ((MenuItem)sender);  									ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' menuItem.Text' persistenceLayer);    									settingsRow.UpdateStyle();  								};  							}    							dataArea.AddChild(selectableOptions);    							settingsRow.ValueChanged = (text) =>  							{  								selectableOptions.SelectedLabel = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.HARDWARE_PRESENT:  						{  							var checkBoxWidget = new CheckBox("")  							{  								Name = settingData.PresentationName + " Checkbox"'  								ToolTipText = settingData.HelpText'  								VAnchor = Agg.UI.VAnchor.ParentBottom'  								TextColor = ActiveTheme.Instance.PrimaryTextColor'  								Checked = sliceSettingValue == "1"  							};    							checkBoxWidget.Click += (sender' e) =>  							{  								bool isChecked = ((CheckBox)sender).Checked;  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' isChecked ? "1" : "0"' persistenceLayer);    								settingsRow.UpdateStyle();  							};    							dataArea.AddChild(checkBoxWidget);    							settingsRow.ValueChanged = (text) =>  							{  								checkBoxWidget.Checked = text == "1";  							};  						}  						break;    					case SliceSettingData.DataEditTypes.VECTOR2:  						{  							string[] xyValueStrings = sliceSettingValue.Split(''');  							if (xyValueStrings.Length != 2)  							{  								xyValueStrings = new string[] { "0"' "0" };  							}    							double currentXValue;  							double.TryParse(xyValueStrings[0]' out currentXValue);    							var xEditWidget = new MHNumberEdit(currentXValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};    							double currentYValue;  							double.TryParse(xyValueStrings[1]' out currentYValue);    							var yEditWidget = new MHNumberEdit(currentYValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Margin = new BorderDouble(20' 0' 0' 0)'  							};    							xEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(xEditWidget);  							dataArea.AddChild(new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  							{  								VAnchor = VAnchor.ParentCenter'  								Margin = new BorderDouble(5' 0)'  							});    							yEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(yEditWidget);  							var yLabel = new GuiWidget()  							{  								VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  								Padding = new BorderDouble(5' 0)'  								HAnchor = HAnchor.ParentLeftRight'  							};  							yLabel.AddChild(new WrappedTextWidget("Y"' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));  							unitsArea.AddChild(yLabel);    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2;  								string[] xyValueStrings2 = text.Split(''');  								if (xyValueStrings2.Length != 2)  								{  									xyValueStrings2 = new string[] { "0"' "0" };  								}    								double.TryParse(xyValueStrings2[0]' out currentValue2);  								xEditWidget.ActuallNumberEdit.Value = currentValue2;    								double.TryParse(xyValueStrings2[1]' out currentValue2);  								yEditWidget.ActuallNumberEdit.Value = currentValue2;  							};    						}  						break;    					case SliceSettingData.DataEditTypes.OFFSET2:  						{  							Vector2 offset = ActiveSliceSettings.Instance.Helpers.ExtruderOffset(extruderIndex);    							var xEditWidget = new MHNumberEdit(offset.x' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  							};    							var yEditWidget = new MHNumberEdit(offset.y' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Margin = new BorderDouble(20' 0' 0' 0)'  							};    							xEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								int extruderIndexLocal = extruderIndex;  								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(xEditWidget);  							dataArea.AddChild(new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  							{  								VAnchor = VAnchor.ParentCenter'  								Margin = new BorderDouble(5' 0)'  							});    							yEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								int extruderIndexLocal = extruderIndex;  								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(yEditWidget);  							var yLabel = new GuiWidget()  							{  								Padding = new BorderDouble(5' 0)'  								HAnchor = HAnchor.ParentLeftRight'  								VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  							};  							yLabel.AddChild(new WrappedTextWidget("Y"' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));  							unitsArea.AddChild(yLabel);    							settingsRow.ValueChanged = (text) =>  							{  								Vector2 offset2 = ActiveSliceSettings.Instance.Helpers.ExtruderOffset(extruderIndex);  								xEditWidget.ActuallNumberEdit.Value = offset2.x;  								yEditWidget.ActuallNumberEdit.Value = offset2.y;  							};  						}  						break;    					default:  						var missingSetting = new TextWidget(String.Format("Missing the setting for '{0}'."' settingData.DataEditType.ToString()))  						{  							TextColor = ActiveTheme.Instance.PrimaryTextColor'  							BackgroundColor = RGBA_Bytes.Red  						};  						dataArea.AddChild(missingSetting);  						break;  				}  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The following statement contains a magic number: if (!PrinterSettings.KnownSettings.Contains(settingData.SlicerConfigName))  			{  				// the setting we think we are adding is not in the known settings it may have been deprecated  				TextWidget settingName = new TextWidget(String.Format("Setting '{0}' not found in known settings"' settingData.SlicerConfigName));  				settingName.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				//settingName.MinimumSize = new Vector2(minSettingNameWidth' settingName.MinimumSize.y);  				nameArea.AddChild(settingName);  				nameArea.BackgroundColor = RGBA_Bytes.Red;  			}  			else  			{  				int intEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int doubleEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int vectorXYEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int multiLineEditHeight = (int)(120 * GuiWidget.DeviceScale + .5);    				if (settingData.DataEditType != SliceSettingData.DataEditTypes.MULTI_LINE_TEXT)  				{  					var nameHolder = new GuiWidget()  					{  						Padding = new BorderDouble(0' 0' 5' 0)'  						VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  						HAnchor = HAnchor.ParentLeftRight'  					};    					nameHolder.AddChild(new WrappedTextWidget(settingData.PresentationName.Localize()' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor));    					nameArea.AddChild(nameHolder);  				}    				switch (settingData.DataEditType)  				{  					case SliceSettingData.DataEditTypes.INT:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();  							int currentValue;  							int.TryParse(sliceSettingValue' out currentValue);    							var intEditWidget = new MHNumberEdit(currentValue' pixelWidth: intEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Name = settingData.PresentationName + " Edit"'  							};  							intEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							content.AddChild(intEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' intEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								intEditWidget.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.DOUBLE:  						{  							double currentValue;  							double.TryParse(sliceSettingValue' out currentValue);    							var doubleEditWidget = new MHNumberEdit(currentValue' allowNegatives: true' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2 = 0;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.POSITIVE_DOUBLE:  						{  							const string multiValuesAreDiffernt = "-";  							FlowLayoutWidget content = new FlowLayoutWidget();    							var doubleEditWidget = new MHNumberEdit(0' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								Name = settingData.PresentationName + " Textbox"'  								SelectAllOnFocus = true  							};    							double currentValue;  							bool ChangesMultipleOtherSettings = settingData.SetSettingsOnChange.Count > 0;  							if (ChangesMultipleOtherSettings)  							{  								bool allTheSame = true;  								string setting = GetActiveValue(settingData.SetSettingsOnChange[0]["TargetSetting"]' layerCascade);  								for (int i = 1; i < settingData.SetSettingsOnChange.Count; i++)  								{  									string nextSetting = GetActiveValue(settingData.SetSettingsOnChange[i]["TargetSetting"]' layerCascade);  									if (setting != nextSetting)  									{  										allTheSame = false;  										break;  									}  								}    								if (allTheSame && setting.EndsWith("mm"))  								{  									double.TryParse(setting.Substring(0' setting.Length - 2)' out currentValue);  									doubleEditWidget.ActuallNumberEdit.Value = currentValue;  								}  								else  								{  									doubleEditWidget.ActuallNumberEdit.InternalNumberEdit.Text = multiValuesAreDiffernt;  								}  							}  							else // just set the setting normally  							{  								double.TryParse(sliceSettingValue' out currentValue);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue;  							}  							doubleEditWidget.ActuallNumberEdit.InternalTextEditWidget.MarkAsStartingState();  							  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								NumberEdit numberEdit = (NumberEdit)sender;  								// If this setting sets other settings' then do that.  								if (ChangesMultipleOtherSettings  									&& numberEdit.Text != multiValuesAreDiffernt)  								{  									{  										ActiveSliceSettings.Instance.SetValue(settingData.SetSettingsOnChange[0]["TargetSetting"]' numberEdit.Value.ToString() + "mm"' persistenceLayer);  									}  								}    								// also always save to the local setting  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' numberEdit.Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							content.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' doubleEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2 = 0;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.OFFSET:  						{  							double currentValue;  							double.TryParse(sliceSettingValue' out currentValue);  							var doubleEditWidget = new MHNumberEdit(currentValue' allowDecimals: true' allowNegatives: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true    							};  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.DOUBLE_OR_PERCENT:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();    							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: doubleEditWidth - 2' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								var textEditWidget = (TextEditWidget)sender;  								string text = textEditWidget.Text.Trim();    								bool isPercent = text.Contains("%");  								if (isPercent)  								{  									text = text.Substring(0' text.IndexOf("%"));  								}  								double result;  								double.TryParse(text' out result);  								text = result.ToString();  								if (isPercent)  								{  									text += "%";  								}  								textEditWidget.Text = text;  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' textEditWidget.Text' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							stringEdit.ActualTextEditWidget.InternalTextEditWidget.AllSelected += (sender' e) =>  							{  								// select everything up to the % (if present)  								InternalTextEditWidget textEditWidget = (InternalTextEditWidget)sender;  								int percentIndex = textEditWidget.Text.IndexOf("%");  								if (percentIndex != -1)  								{  									textEditWidget.SetSelection(0' percentIndex - 1);  								}  							};    							content.AddChild(stringEdit);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.INT_OR_MM:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();    							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: doubleEditWidth - 2' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};    							string startingText = stringEdit.Text;  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								TextEditWidget textEditWidget = (TextEditWidget)sender;  								// only validate when we lose focus  								if (!textEditWidget.ContainsFocus)  								{  									string text = textEditWidget.Text;  									text = text.Trim();  									bool isMm = text.Contains("mm");  									if (isMm)  									{  										text = text.Substring(0' text.IndexOf("mm"));  									}  									double result;  									double.TryParse(text' out result);  									text = result.ToString();  									if (isMm)  									{  										text += "mm";  									}  									else  									{  										result = (int)result;  										text = result.ToString();  									}  									textEditWidget.Text = text;  									startingText = stringEdit.Text;  								}  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' textEditWidget.Text' persistenceLayer);  								settingsRow.UpdateStyle();    								// make sure we are still looking for the final validation before saving.  								if (textEditWidget.ContainsFocus)  								{  									UiThread.RunOnIdle(() =>  									{  										string currentText = textEditWidget.Text;  										int cursorIndex = textEditWidget.InternalTextEditWidget.CharIndexToInsertBefore;  										textEditWidget.Text = startingText;  										textEditWidget.InternalTextEditWidget.MarkAsStartingState();  										textEditWidget.Text = currentText;  										textEditWidget.InternalTextEditWidget.CharIndexToInsertBefore = cursorIndex;  									});  								}  							};    							stringEdit.ActualTextEditWidget.InternalTextEditWidget.AllSelected += (sender' e) =>  							{  								// select everything up to the mm (if present)  								InternalTextEditWidget textEditWidget = (InternalTextEditWidget)sender;  								int mMIndex = textEditWidget.Text.IndexOf("mm");  								if (mMIndex != -1)  								{  									textEditWidget.SetSelection(0' mMIndex - 1);  								}  							};    							content.AddChild(stringEdit);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.CHECK_BOX:  						{  							var checkBoxWidget = new CheckBox("")  							{  								Name = settingData.PresentationName + " Checkbox"'  								ToolTipText = settingData.HelpText'  								VAnchor = Agg.UI.VAnchor.ParentBottom'  								TextColor = ActiveTheme.Instance.PrimaryTextColor'  								Checked = sliceSettingValue == "1"  							};  							checkBoxWidget.Click += (sender' e) =>  							{  								// SetValue should only be called when the checkbox is clicked. If this code makes its way into checkstatechanged  								// we end up adding a key back into the dictionary after we call .ClearValue' resulting in the blue override bar reappearing after  								// clearing a useroverride with the red x  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' checkBoxWidget.Checked ? "1" : "0"' persistenceLayer);  							};  							checkBoxWidget.CheckedStateChanged += (s' e) =>  							{  								// Linked settings should be updated in all cases (user clicked checkbox' user clicked clear)  								foreach (var setSettingsData in settingData.SetSettingsOnChange)  								{  									string targetValue;  									if (setSettingsData.TryGetValue(checkBoxWidget.Checked ? "OnValue" : "OffValue"' out targetValue))  									{  										ActiveSliceSettings.Instance.SetValue(setSettingsData["TargetSetting"]' targetValue' persistenceLayer);  									}  								}    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(checkBoxWidget);    							settingsRow.ValueChanged = (text) =>  							{  								checkBoxWidget.Checked = text == "1";  							};  						}  						break;    					case SliceSettingData.DataEditTypes.STRING:  						{  							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: settingData.ShowAsOverride ? 120 : 200' tabIndex: tabIndexForItem++)  							{  								Name = settingData.PresentationName + " Edit"'  							};  							stringEdit.ToolTipText = settingData.HelpText;  							  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((TextEditWidget)sender).Text' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							dataArea.AddChild(stringEdit);    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.MULTI_LINE_TEXT:  						{  							string convertedNewLines = sliceSettingValue.Replace("\\n"' "\n");  							var stringEdit = new MHTextEditWidget(convertedNewLines' pixelWidth: 320' pixelHeight: multiLineEditHeight' multiLine: true' tabIndex: tabIndexForItem++' typeFace: ApplicationController.MonoSpacedTypeFace)  							{  								HAnchor = HAnchor.ParentLeftRight'  							};    							stringEdit.DrawFromHintedCache();    							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((TextEditWidget)sender).Text.Replace("\n"' "\\n")' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							nameArea.HAnchor = HAnchor.AbsolutePosition;  							nameArea.Width = 0;  							dataArea.AddChild(stringEdit);  							dataArea.HAnchor = HAnchor.ParentLeftRight;    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text.Replace("\\n"' "\n");  							};  						}  						break;    					case SliceSettingData.DataEditTypes.COM_PORT:  						{  #if __ANDROID__  							addControl = false;  #endif    							EventHandler localUnregisterEvents = null;    							bool canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect;  							// The COM_PORT control is unique in its approach to the SlicerConfigName. It uses "com_port" settings name to  							// bind to a context that will place it in the SliceSetting view but it binds its values to a machine  							// specific dictionary key that is not exposed in the UI. At runtime we lookup and store to '<machinename>_com_port'  							// ensuring that a single printer can be shared across different devices and we'll select the correct com port in each case  							var selectableOptions = new DropDownList("None".Localize()' maxHeight: 200)  							{  								ToolTipText = settingData.HelpText'  								Margin = new BorderDouble()'  								Name = "Serial Port Dropdown"'  								// Prevent droplist interaction when connected  								Enabled = canChangeComPort'  								TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150)'  								BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150)'  							};    							selectableOptions.Click += (s' e) =>  							{  								AddComMenuItems(settingData' persistenceLayer' settingsRow' selectableOptions);  							};    							AddComMenuItems(settingData' persistenceLayer' settingsRow' selectableOptions);    							dataArea.AddChild(selectableOptions);    							settingsRow.ValueChanged = (text) =>  							{  								// Lookup the machine specific comport value rather than the passed in text value  								selectableOptions.SelectedLabel = ActiveSliceSettings.Instance.Helpers.ComPort();  							};    							// Prevent droplist interaction when connected  							PrinterConnectionAndCommunication.Instance.CommunicationStateChanged.RegisterEvent((s' e) =>  							{  								canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect;  								selectableOptions.Enabled = canChangeComPort;  								selectableOptions.TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150);  								selectableOptions.BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150);  							}' ref localUnregisterEvents);    							// Release event listener on close  							selectableOptions.Closed += (s' e) =>  							{  								localUnregisterEvents?.Invoke(null' null);  							};  						}  						break;    					case SliceSettingData.DataEditTypes.LIST:  						{  							var selectableOptions = new DropDownList("None".Localize()' maxHeight: 200)  							{  								ToolTipText = settingData.HelpText'  								Margin = new BorderDouble()  							};    							foreach (string listItem in settingData.ExtraSettings.Split('''))  							{  								MenuItem newItem = selectableOptions.AddItem(listItem);  								if (newItem.Text == sliceSettingValue)  								{  									selectableOptions.SelectedLabel = sliceSettingValue;  								}    								newItem.Selected += (sender' e) =>  								{  									MenuItem menuItem = ((MenuItem)sender);  									ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' menuItem.Text' persistenceLayer);    									settingsRow.UpdateStyle();  								};  							}    							dataArea.AddChild(selectableOptions);    							settingsRow.ValueChanged = (text) =>  							{  								selectableOptions.SelectedLabel = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.HARDWARE_PRESENT:  						{  							var checkBoxWidget = new CheckBox("")  							{  								Name = settingData.PresentationName + " Checkbox"'  								ToolTipText = settingData.HelpText'  								VAnchor = Agg.UI.VAnchor.ParentBottom'  								TextColor = ActiveTheme.Instance.PrimaryTextColor'  								Checked = sliceSettingValue == "1"  							};    							checkBoxWidget.Click += (sender' e) =>  							{  								bool isChecked = ((CheckBox)sender).Checked;  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' isChecked ? "1" : "0"' persistenceLayer);    								settingsRow.UpdateStyle();  							};    							dataArea.AddChild(checkBoxWidget);    							settingsRow.ValueChanged = (text) =>  							{  								checkBoxWidget.Checked = text == "1";  							};  						}  						break;    					case SliceSettingData.DataEditTypes.VECTOR2:  						{  							string[] xyValueStrings = sliceSettingValue.Split(''');  							if (xyValueStrings.Length != 2)  							{  								xyValueStrings = new string[] { "0"' "0" };  							}    							double currentXValue;  							double.TryParse(xyValueStrings[0]' out currentXValue);    							var xEditWidget = new MHNumberEdit(currentXValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};    							double currentYValue;  							double.TryParse(xyValueStrings[1]' out currentYValue);    							var yEditWidget = new MHNumberEdit(currentYValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Margin = new BorderDouble(20' 0' 0' 0)'  							};    							xEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(xEditWidget);  							dataArea.AddChild(new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  							{  								VAnchor = VAnchor.ParentCenter'  								Margin = new BorderDouble(5' 0)'  							});    							yEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(yEditWidget);  							var yLabel = new GuiWidget()  							{  								VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  								Padding = new BorderDouble(5' 0)'  								HAnchor = HAnchor.ParentLeftRight'  							};  							yLabel.AddChild(new WrappedTextWidget("Y"' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));  							unitsArea.AddChild(yLabel);    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2;  								string[] xyValueStrings2 = text.Split(''');  								if (xyValueStrings2.Length != 2)  								{  									xyValueStrings2 = new string[] { "0"' "0" };  								}    								double.TryParse(xyValueStrings2[0]' out currentValue2);  								xEditWidget.ActuallNumberEdit.Value = currentValue2;    								double.TryParse(xyValueStrings2[1]' out currentValue2);  								yEditWidget.ActuallNumberEdit.Value = currentValue2;  							};    						}  						break;    					case SliceSettingData.DataEditTypes.OFFSET2:  						{  							Vector2 offset = ActiveSliceSettings.Instance.Helpers.ExtruderOffset(extruderIndex);    							var xEditWidget = new MHNumberEdit(offset.x' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  							};    							var yEditWidget = new MHNumberEdit(offset.y' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Margin = new BorderDouble(20' 0' 0' 0)'  							};    							xEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								int extruderIndexLocal = extruderIndex;  								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(xEditWidget);  							dataArea.AddChild(new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  							{  								VAnchor = VAnchor.ParentCenter'  								Margin = new BorderDouble(5' 0)'  							});    							yEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								int extruderIndexLocal = extruderIndex;  								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(yEditWidget);  							var yLabel = new GuiWidget()  							{  								Padding = new BorderDouble(5' 0)'  								HAnchor = HAnchor.ParentLeftRight'  								VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  							};  							yLabel.AddChild(new WrappedTextWidget("Y"' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));  							unitsArea.AddChild(yLabel);    							settingsRow.ValueChanged = (text) =>  							{  								Vector2 offset2 = ActiveSliceSettings.Instance.Helpers.ExtruderOffset(extruderIndex);  								xEditWidget.ActuallNumberEdit.Value = offset2.x;  								yEditWidget.ActuallNumberEdit.Value = offset2.y;  							};  						}  						break;    					default:  						var missingSetting = new TextWidget(String.Format("Missing the setting for '{0}'."' settingData.DataEditType.ToString()))  						{  							TextColor = ActiveTheme.Instance.PrimaryTextColor'  							BackgroundColor = RGBA_Bytes.Red  						};  						dataArea.AddChild(missingSetting);  						break;  				}  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The following statement contains a magic number: if (!PrinterSettings.KnownSettings.Contains(settingData.SlicerConfigName))  			{  				// the setting we think we are adding is not in the known settings it may have been deprecated  				TextWidget settingName = new TextWidget(String.Format("Setting '{0}' not found in known settings"' settingData.SlicerConfigName));  				settingName.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				//settingName.MinimumSize = new Vector2(minSettingNameWidth' settingName.MinimumSize.y);  				nameArea.AddChild(settingName);  				nameArea.BackgroundColor = RGBA_Bytes.Red;  			}  			else  			{  				int intEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int doubleEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int vectorXYEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int multiLineEditHeight = (int)(120 * GuiWidget.DeviceScale + .5);    				if (settingData.DataEditType != SliceSettingData.DataEditTypes.MULTI_LINE_TEXT)  				{  					var nameHolder = new GuiWidget()  					{  						Padding = new BorderDouble(0' 0' 5' 0)'  						VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  						HAnchor = HAnchor.ParentLeftRight'  					};    					nameHolder.AddChild(new WrappedTextWidget(settingData.PresentationName.Localize()' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor));    					nameArea.AddChild(nameHolder);  				}    				switch (settingData.DataEditType)  				{  					case SliceSettingData.DataEditTypes.INT:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();  							int currentValue;  							int.TryParse(sliceSettingValue' out currentValue);    							var intEditWidget = new MHNumberEdit(currentValue' pixelWidth: intEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Name = settingData.PresentationName + " Edit"'  							};  							intEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							content.AddChild(intEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' intEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								intEditWidget.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.DOUBLE:  						{  							double currentValue;  							double.TryParse(sliceSettingValue' out currentValue);    							var doubleEditWidget = new MHNumberEdit(currentValue' allowNegatives: true' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2 = 0;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.POSITIVE_DOUBLE:  						{  							const string multiValuesAreDiffernt = "-";  							FlowLayoutWidget content = new FlowLayoutWidget();    							var doubleEditWidget = new MHNumberEdit(0' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								Name = settingData.PresentationName + " Textbox"'  								SelectAllOnFocus = true  							};    							double currentValue;  							bool ChangesMultipleOtherSettings = settingData.SetSettingsOnChange.Count > 0;  							if (ChangesMultipleOtherSettings)  							{  								bool allTheSame = true;  								string setting = GetActiveValue(settingData.SetSettingsOnChange[0]["TargetSetting"]' layerCascade);  								for (int i = 1; i < settingData.SetSettingsOnChange.Count; i++)  								{  									string nextSetting = GetActiveValue(settingData.SetSettingsOnChange[i]["TargetSetting"]' layerCascade);  									if (setting != nextSetting)  									{  										allTheSame = false;  										break;  									}  								}    								if (allTheSame && setting.EndsWith("mm"))  								{  									double.TryParse(setting.Substring(0' setting.Length - 2)' out currentValue);  									doubleEditWidget.ActuallNumberEdit.Value = currentValue;  								}  								else  								{  									doubleEditWidget.ActuallNumberEdit.InternalNumberEdit.Text = multiValuesAreDiffernt;  								}  							}  							else // just set the setting normally  							{  								double.TryParse(sliceSettingValue' out currentValue);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue;  							}  							doubleEditWidget.ActuallNumberEdit.InternalTextEditWidget.MarkAsStartingState();  							  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								NumberEdit numberEdit = (NumberEdit)sender;  								// If this setting sets other settings' then do that.  								if (ChangesMultipleOtherSettings  									&& numberEdit.Text != multiValuesAreDiffernt)  								{  									{  										ActiveSliceSettings.Instance.SetValue(settingData.SetSettingsOnChange[0]["TargetSetting"]' numberEdit.Value.ToString() + "mm"' persistenceLayer);  									}  								}    								// also always save to the local setting  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' numberEdit.Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							content.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' doubleEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2 = 0;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.OFFSET:  						{  							double currentValue;  							double.TryParse(sliceSettingValue' out currentValue);  							var doubleEditWidget = new MHNumberEdit(currentValue' allowDecimals: true' allowNegatives: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true    							};  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.DOUBLE_OR_PERCENT:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();    							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: doubleEditWidth - 2' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								var textEditWidget = (TextEditWidget)sender;  								string text = textEditWidget.Text.Trim();    								bool isPercent = text.Contains("%");  								if (isPercent)  								{  									text = text.Substring(0' text.IndexOf("%"));  								}  								double result;  								double.TryParse(text' out result);  								text = result.ToString();  								if (isPercent)  								{  									text += "%";  								}  								textEditWidget.Text = text;  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' textEditWidget.Text' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							stringEdit.ActualTextEditWidget.InternalTextEditWidget.AllSelected += (sender' e) =>  							{  								// select everything up to the % (if present)  								InternalTextEditWidget textEditWidget = (InternalTextEditWidget)sender;  								int percentIndex = textEditWidget.Text.IndexOf("%");  								if (percentIndex != -1)  								{  									textEditWidget.SetSelection(0' percentIndex - 1);  								}  							};    							content.AddChild(stringEdit);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.INT_OR_MM:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();    							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: doubleEditWidth - 2' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};    							string startingText = stringEdit.Text;  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								TextEditWidget textEditWidget = (TextEditWidget)sender;  								// only validate when we lose focus  								if (!textEditWidget.ContainsFocus)  								{  									string text = textEditWidget.Text;  									text = text.Trim();  									bool isMm = text.Contains("mm");  									if (isMm)  									{  										text = text.Substring(0' text.IndexOf("mm"));  									}  									double result;  									double.TryParse(text' out result);  									text = result.ToString();  									if (isMm)  									{  										text += "mm";  									}  									else  									{  										result = (int)result;  										text = result.ToString();  									}  									textEditWidget.Text = text;  									startingText = stringEdit.Text;  								}  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' textEditWidget.Text' persistenceLayer);  								settingsRow.UpdateStyle();    								// make sure we are still looking for the final validation before saving.  								if (textEditWidget.ContainsFocus)  								{  									UiThread.RunOnIdle(() =>  									{  										string currentText = textEditWidget.Text;  										int cursorIndex = textEditWidget.InternalTextEditWidget.CharIndexToInsertBefore;  										textEditWidget.Text = startingText;  										textEditWidget.InternalTextEditWidget.MarkAsStartingState();  										textEditWidget.Text = currentText;  										textEditWidget.InternalTextEditWidget.CharIndexToInsertBefore = cursorIndex;  									});  								}  							};    							stringEdit.ActualTextEditWidget.InternalTextEditWidget.AllSelected += (sender' e) =>  							{  								// select everything up to the mm (if present)  								InternalTextEditWidget textEditWidget = (InternalTextEditWidget)sender;  								int mMIndex = textEditWidget.Text.IndexOf("mm");  								if (mMIndex != -1)  								{  									textEditWidget.SetSelection(0' mMIndex - 1);  								}  							};    							content.AddChild(stringEdit);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.CHECK_BOX:  						{  							var checkBoxWidget = new CheckBox("")  							{  								Name = settingData.PresentationName + " Checkbox"'  								ToolTipText = settingData.HelpText'  								VAnchor = Agg.UI.VAnchor.ParentBottom'  								TextColor = ActiveTheme.Instance.PrimaryTextColor'  								Checked = sliceSettingValue == "1"  							};  							checkBoxWidget.Click += (sender' e) =>  							{  								// SetValue should only be called when the checkbox is clicked. If this code makes its way into checkstatechanged  								// we end up adding a key back into the dictionary after we call .ClearValue' resulting in the blue override bar reappearing after  								// clearing a useroverride with the red x  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' checkBoxWidget.Checked ? "1" : "0"' persistenceLayer);  							};  							checkBoxWidget.CheckedStateChanged += (s' e) =>  							{  								// Linked settings should be updated in all cases (user clicked checkbox' user clicked clear)  								foreach (var setSettingsData in settingData.SetSettingsOnChange)  								{  									string targetValue;  									if (setSettingsData.TryGetValue(checkBoxWidget.Checked ? "OnValue" : "OffValue"' out targetValue))  									{  										ActiveSliceSettings.Instance.SetValue(setSettingsData["TargetSetting"]' targetValue' persistenceLayer);  									}  								}    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(checkBoxWidget);    							settingsRow.ValueChanged = (text) =>  							{  								checkBoxWidget.Checked = text == "1";  							};  						}  						break;    					case SliceSettingData.DataEditTypes.STRING:  						{  							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: settingData.ShowAsOverride ? 120 : 200' tabIndex: tabIndexForItem++)  							{  								Name = settingData.PresentationName + " Edit"'  							};  							stringEdit.ToolTipText = settingData.HelpText;  							  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((TextEditWidget)sender).Text' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							dataArea.AddChild(stringEdit);    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.MULTI_LINE_TEXT:  						{  							string convertedNewLines = sliceSettingValue.Replace("\\n"' "\n");  							var stringEdit = new MHTextEditWidget(convertedNewLines' pixelWidth: 320' pixelHeight: multiLineEditHeight' multiLine: true' tabIndex: tabIndexForItem++' typeFace: ApplicationController.MonoSpacedTypeFace)  							{  								HAnchor = HAnchor.ParentLeftRight'  							};    							stringEdit.DrawFromHintedCache();    							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((TextEditWidget)sender).Text.Replace("\n"' "\\n")' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							nameArea.HAnchor = HAnchor.AbsolutePosition;  							nameArea.Width = 0;  							dataArea.AddChild(stringEdit);  							dataArea.HAnchor = HAnchor.ParentLeftRight;    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text.Replace("\\n"' "\n");  							};  						}  						break;    					case SliceSettingData.DataEditTypes.COM_PORT:  						{  #if __ANDROID__  							addControl = false;  #endif    							EventHandler localUnregisterEvents = null;    							bool canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect;  							// The COM_PORT control is unique in its approach to the SlicerConfigName. It uses "com_port" settings name to  							// bind to a context that will place it in the SliceSetting view but it binds its values to a machine  							// specific dictionary key that is not exposed in the UI. At runtime we lookup and store to '<machinename>_com_port'  							// ensuring that a single printer can be shared across different devices and we'll select the correct com port in each case  							var selectableOptions = new DropDownList("None".Localize()' maxHeight: 200)  							{  								ToolTipText = settingData.HelpText'  								Margin = new BorderDouble()'  								Name = "Serial Port Dropdown"'  								// Prevent droplist interaction when connected  								Enabled = canChangeComPort'  								TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150)'  								BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150)'  							};    							selectableOptions.Click += (s' e) =>  							{  								AddComMenuItems(settingData' persistenceLayer' settingsRow' selectableOptions);  							};    							AddComMenuItems(settingData' persistenceLayer' settingsRow' selectableOptions);    							dataArea.AddChild(selectableOptions);    							settingsRow.ValueChanged = (text) =>  							{  								// Lookup the machine specific comport value rather than the passed in text value  								selectableOptions.SelectedLabel = ActiveSliceSettings.Instance.Helpers.ComPort();  							};    							// Prevent droplist interaction when connected  							PrinterConnectionAndCommunication.Instance.CommunicationStateChanged.RegisterEvent((s' e) =>  							{  								canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect;  								selectableOptions.Enabled = canChangeComPort;  								selectableOptions.TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150);  								selectableOptions.BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150);  							}' ref localUnregisterEvents);    							// Release event listener on close  							selectableOptions.Closed += (s' e) =>  							{  								localUnregisterEvents?.Invoke(null' null);  							};  						}  						break;    					case SliceSettingData.DataEditTypes.LIST:  						{  							var selectableOptions = new DropDownList("None".Localize()' maxHeight: 200)  							{  								ToolTipText = settingData.HelpText'  								Margin = new BorderDouble()  							};    							foreach (string listItem in settingData.ExtraSettings.Split('''))  							{  								MenuItem newItem = selectableOptions.AddItem(listItem);  								if (newItem.Text == sliceSettingValue)  								{  									selectableOptions.SelectedLabel = sliceSettingValue;  								}    								newItem.Selected += (sender' e) =>  								{  									MenuItem menuItem = ((MenuItem)sender);  									ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' menuItem.Text' persistenceLayer);    									settingsRow.UpdateStyle();  								};  							}    							dataArea.AddChild(selectableOptions);    							settingsRow.ValueChanged = (text) =>  							{  								selectableOptions.SelectedLabel = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.HARDWARE_PRESENT:  						{  							var checkBoxWidget = new CheckBox("")  							{  								Name = settingData.PresentationName + " Checkbox"'  								ToolTipText = settingData.HelpText'  								VAnchor = Agg.UI.VAnchor.ParentBottom'  								TextColor = ActiveTheme.Instance.PrimaryTextColor'  								Checked = sliceSettingValue == "1"  							};    							checkBoxWidget.Click += (sender' e) =>  							{  								bool isChecked = ((CheckBox)sender).Checked;  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' isChecked ? "1" : "0"' persistenceLayer);    								settingsRow.UpdateStyle();  							};    							dataArea.AddChild(checkBoxWidget);    							settingsRow.ValueChanged = (text) =>  							{  								checkBoxWidget.Checked = text == "1";  							};  						}  						break;    					case SliceSettingData.DataEditTypes.VECTOR2:  						{  							string[] xyValueStrings = sliceSettingValue.Split(''');  							if (xyValueStrings.Length != 2)  							{  								xyValueStrings = new string[] { "0"' "0" };  							}    							double currentXValue;  							double.TryParse(xyValueStrings[0]' out currentXValue);    							var xEditWidget = new MHNumberEdit(currentXValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};    							double currentYValue;  							double.TryParse(xyValueStrings[1]' out currentYValue);    							var yEditWidget = new MHNumberEdit(currentYValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Margin = new BorderDouble(20' 0' 0' 0)'  							};    							xEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(xEditWidget);  							dataArea.AddChild(new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  							{  								VAnchor = VAnchor.ParentCenter'  								Margin = new BorderDouble(5' 0)'  							});    							yEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(yEditWidget);  							var yLabel = new GuiWidget()  							{  								VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  								Padding = new BorderDouble(5' 0)'  								HAnchor = HAnchor.ParentLeftRight'  							};  							yLabel.AddChild(new WrappedTextWidget("Y"' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));  							unitsArea.AddChild(yLabel);    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2;  								string[] xyValueStrings2 = text.Split(''');  								if (xyValueStrings2.Length != 2)  								{  									xyValueStrings2 = new string[] { "0"' "0" };  								}    								double.TryParse(xyValueStrings2[0]' out currentValue2);  								xEditWidget.ActuallNumberEdit.Value = currentValue2;    								double.TryParse(xyValueStrings2[1]' out currentValue2);  								yEditWidget.ActuallNumberEdit.Value = currentValue2;  							};    						}  						break;    					case SliceSettingData.DataEditTypes.OFFSET2:  						{  							Vector2 offset = ActiveSliceSettings.Instance.Helpers.ExtruderOffset(extruderIndex);    							var xEditWidget = new MHNumberEdit(offset.x' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  							};    							var yEditWidget = new MHNumberEdit(offset.y' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Margin = new BorderDouble(20' 0' 0' 0)'  							};    							xEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								int extruderIndexLocal = extruderIndex;  								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(xEditWidget);  							dataArea.AddChild(new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  							{  								VAnchor = VAnchor.ParentCenter'  								Margin = new BorderDouble(5' 0)'  							});    							yEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								int extruderIndexLocal = extruderIndex;  								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(yEditWidget);  							var yLabel = new GuiWidget()  							{  								Padding = new BorderDouble(5' 0)'  								HAnchor = HAnchor.ParentLeftRight'  								VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  							};  							yLabel.AddChild(new WrappedTextWidget("Y"' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));  							unitsArea.AddChild(yLabel);    							settingsRow.ValueChanged = (text) =>  							{  								Vector2 offset2 = ActiveSliceSettings.Instance.Helpers.ExtruderOffset(extruderIndex);  								xEditWidget.ActuallNumberEdit.Value = offset2.x;  								yEditWidget.ActuallNumberEdit.Value = offset2.y;  							};  						}  						break;    					default:  						var missingSetting = new TextWidget(String.Format("Missing the setting for '{0}'."' settingData.DataEditType.ToString()))  						{  							TextColor = ActiveTheme.Instance.PrimaryTextColor'  							BackgroundColor = RGBA_Bytes.Red  						};  						dataArea.AddChild(missingSetting);  						break;  				}  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The following statement contains a magic number: if (!PrinterSettings.KnownSettings.Contains(settingData.SlicerConfigName))  			{  				// the setting we think we are adding is not in the known settings it may have been deprecated  				TextWidget settingName = new TextWidget(String.Format("Setting '{0}' not found in known settings"' settingData.SlicerConfigName));  				settingName.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				//settingName.MinimumSize = new Vector2(minSettingNameWidth' settingName.MinimumSize.y);  				nameArea.AddChild(settingName);  				nameArea.BackgroundColor = RGBA_Bytes.Red;  			}  			else  			{  				int intEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int doubleEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int vectorXYEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int multiLineEditHeight = (int)(120 * GuiWidget.DeviceScale + .5);    				if (settingData.DataEditType != SliceSettingData.DataEditTypes.MULTI_LINE_TEXT)  				{  					var nameHolder = new GuiWidget()  					{  						Padding = new BorderDouble(0' 0' 5' 0)'  						VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  						HAnchor = HAnchor.ParentLeftRight'  					};    					nameHolder.AddChild(new WrappedTextWidget(settingData.PresentationName.Localize()' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor));    					nameArea.AddChild(nameHolder);  				}    				switch (settingData.DataEditType)  				{  					case SliceSettingData.DataEditTypes.INT:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();  							int currentValue;  							int.TryParse(sliceSettingValue' out currentValue);    							var intEditWidget = new MHNumberEdit(currentValue' pixelWidth: intEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Name = settingData.PresentationName + " Edit"'  							};  							intEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							content.AddChild(intEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' intEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								intEditWidget.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.DOUBLE:  						{  							double currentValue;  							double.TryParse(sliceSettingValue' out currentValue);    							var doubleEditWidget = new MHNumberEdit(currentValue' allowNegatives: true' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2 = 0;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.POSITIVE_DOUBLE:  						{  							const string multiValuesAreDiffernt = "-";  							FlowLayoutWidget content = new FlowLayoutWidget();    							var doubleEditWidget = new MHNumberEdit(0' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								Name = settingData.PresentationName + " Textbox"'  								SelectAllOnFocus = true  							};    							double currentValue;  							bool ChangesMultipleOtherSettings = settingData.SetSettingsOnChange.Count > 0;  							if (ChangesMultipleOtherSettings)  							{  								bool allTheSame = true;  								string setting = GetActiveValue(settingData.SetSettingsOnChange[0]["TargetSetting"]' layerCascade);  								for (int i = 1; i < settingData.SetSettingsOnChange.Count; i++)  								{  									string nextSetting = GetActiveValue(settingData.SetSettingsOnChange[i]["TargetSetting"]' layerCascade);  									if (setting != nextSetting)  									{  										allTheSame = false;  										break;  									}  								}    								if (allTheSame && setting.EndsWith("mm"))  								{  									double.TryParse(setting.Substring(0' setting.Length - 2)' out currentValue);  									doubleEditWidget.ActuallNumberEdit.Value = currentValue;  								}  								else  								{  									doubleEditWidget.ActuallNumberEdit.InternalNumberEdit.Text = multiValuesAreDiffernt;  								}  							}  							else // just set the setting normally  							{  								double.TryParse(sliceSettingValue' out currentValue);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue;  							}  							doubleEditWidget.ActuallNumberEdit.InternalTextEditWidget.MarkAsStartingState();  							  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								NumberEdit numberEdit = (NumberEdit)sender;  								// If this setting sets other settings' then do that.  								if (ChangesMultipleOtherSettings  									&& numberEdit.Text != multiValuesAreDiffernt)  								{  									{  										ActiveSliceSettings.Instance.SetValue(settingData.SetSettingsOnChange[0]["TargetSetting"]' numberEdit.Value.ToString() + "mm"' persistenceLayer);  									}  								}    								// also always save to the local setting  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' numberEdit.Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							content.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' doubleEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2 = 0;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.OFFSET:  						{  							double currentValue;  							double.TryParse(sliceSettingValue' out currentValue);  							var doubleEditWidget = new MHNumberEdit(currentValue' allowDecimals: true' allowNegatives: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true    							};  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.DOUBLE_OR_PERCENT:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();    							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: doubleEditWidth - 2' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								var textEditWidget = (TextEditWidget)sender;  								string text = textEditWidget.Text.Trim();    								bool isPercent = text.Contains("%");  								if (isPercent)  								{  									text = text.Substring(0' text.IndexOf("%"));  								}  								double result;  								double.TryParse(text' out result);  								text = result.ToString();  								if (isPercent)  								{  									text += "%";  								}  								textEditWidget.Text = text;  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' textEditWidget.Text' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							stringEdit.ActualTextEditWidget.InternalTextEditWidget.AllSelected += (sender' e) =>  							{  								// select everything up to the % (if present)  								InternalTextEditWidget textEditWidget = (InternalTextEditWidget)sender;  								int percentIndex = textEditWidget.Text.IndexOf("%");  								if (percentIndex != -1)  								{  									textEditWidget.SetSelection(0' percentIndex - 1);  								}  							};    							content.AddChild(stringEdit);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.INT_OR_MM:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();    							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: doubleEditWidth - 2' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};    							string startingText = stringEdit.Text;  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								TextEditWidget textEditWidget = (TextEditWidget)sender;  								// only validate when we lose focus  								if (!textEditWidget.ContainsFocus)  								{  									string text = textEditWidget.Text;  									text = text.Trim();  									bool isMm = text.Contains("mm");  									if (isMm)  									{  										text = text.Substring(0' text.IndexOf("mm"));  									}  									double result;  									double.TryParse(text' out result);  									text = result.ToString();  									if (isMm)  									{  										text += "mm";  									}  									else  									{  										result = (int)result;  										text = result.ToString();  									}  									textEditWidget.Text = text;  									startingText = stringEdit.Text;  								}  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' textEditWidget.Text' persistenceLayer);  								settingsRow.UpdateStyle();    								// make sure we are still looking for the final validation before saving.  								if (textEditWidget.ContainsFocus)  								{  									UiThread.RunOnIdle(() =>  									{  										string currentText = textEditWidget.Text;  										int cursorIndex = textEditWidget.InternalTextEditWidget.CharIndexToInsertBefore;  										textEditWidget.Text = startingText;  										textEditWidget.InternalTextEditWidget.MarkAsStartingState();  										textEditWidget.Text = currentText;  										textEditWidget.InternalTextEditWidget.CharIndexToInsertBefore = cursorIndex;  									});  								}  							};    							stringEdit.ActualTextEditWidget.InternalTextEditWidget.AllSelected += (sender' e) =>  							{  								// select everything up to the mm (if present)  								InternalTextEditWidget textEditWidget = (InternalTextEditWidget)sender;  								int mMIndex = textEditWidget.Text.IndexOf("mm");  								if (mMIndex != -1)  								{  									textEditWidget.SetSelection(0' mMIndex - 1);  								}  							};    							content.AddChild(stringEdit);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.CHECK_BOX:  						{  							var checkBoxWidget = new CheckBox("")  							{  								Name = settingData.PresentationName + " Checkbox"'  								ToolTipText = settingData.HelpText'  								VAnchor = Agg.UI.VAnchor.ParentBottom'  								TextColor = ActiveTheme.Instance.PrimaryTextColor'  								Checked = sliceSettingValue == "1"  							};  							checkBoxWidget.Click += (sender' e) =>  							{  								// SetValue should only be called when the checkbox is clicked. If this code makes its way into checkstatechanged  								// we end up adding a key back into the dictionary after we call .ClearValue' resulting in the blue override bar reappearing after  								// clearing a useroverride with the red x  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' checkBoxWidget.Checked ? "1" : "0"' persistenceLayer);  							};  							checkBoxWidget.CheckedStateChanged += (s' e) =>  							{  								// Linked settings should be updated in all cases (user clicked checkbox' user clicked clear)  								foreach (var setSettingsData in settingData.SetSettingsOnChange)  								{  									string targetValue;  									if (setSettingsData.TryGetValue(checkBoxWidget.Checked ? "OnValue" : "OffValue"' out targetValue))  									{  										ActiveSliceSettings.Instance.SetValue(setSettingsData["TargetSetting"]' targetValue' persistenceLayer);  									}  								}    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(checkBoxWidget);    							settingsRow.ValueChanged = (text) =>  							{  								checkBoxWidget.Checked = text == "1";  							};  						}  						break;    					case SliceSettingData.DataEditTypes.STRING:  						{  							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: settingData.ShowAsOverride ? 120 : 200' tabIndex: tabIndexForItem++)  							{  								Name = settingData.PresentationName + " Edit"'  							};  							stringEdit.ToolTipText = settingData.HelpText;  							  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((TextEditWidget)sender).Text' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							dataArea.AddChild(stringEdit);    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.MULTI_LINE_TEXT:  						{  							string convertedNewLines = sliceSettingValue.Replace("\\n"' "\n");  							var stringEdit = new MHTextEditWidget(convertedNewLines' pixelWidth: 320' pixelHeight: multiLineEditHeight' multiLine: true' tabIndex: tabIndexForItem++' typeFace: ApplicationController.MonoSpacedTypeFace)  							{  								HAnchor = HAnchor.ParentLeftRight'  							};    							stringEdit.DrawFromHintedCache();    							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((TextEditWidget)sender).Text.Replace("\n"' "\\n")' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							nameArea.HAnchor = HAnchor.AbsolutePosition;  							nameArea.Width = 0;  							dataArea.AddChild(stringEdit);  							dataArea.HAnchor = HAnchor.ParentLeftRight;    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text.Replace("\\n"' "\n");  							};  						}  						break;    					case SliceSettingData.DataEditTypes.COM_PORT:  						{  #if __ANDROID__  							addControl = false;  #endif    							EventHandler localUnregisterEvents = null;    							bool canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect;  							// The COM_PORT control is unique in its approach to the SlicerConfigName. It uses "com_port" settings name to  							// bind to a context that will place it in the SliceSetting view but it binds its values to a machine  							// specific dictionary key that is not exposed in the UI. At runtime we lookup and store to '<machinename>_com_port'  							// ensuring that a single printer can be shared across different devices and we'll select the correct com port in each case  							var selectableOptions = new DropDownList("None".Localize()' maxHeight: 200)  							{  								ToolTipText = settingData.HelpText'  								Margin = new BorderDouble()'  								Name = "Serial Port Dropdown"'  								// Prevent droplist interaction when connected  								Enabled = canChangeComPort'  								TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150)'  								BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150)'  							};    							selectableOptions.Click += (s' e) =>  							{  								AddComMenuItems(settingData' persistenceLayer' settingsRow' selectableOptions);  							};    							AddComMenuItems(settingData' persistenceLayer' settingsRow' selectableOptions);    							dataArea.AddChild(selectableOptions);    							settingsRow.ValueChanged = (text) =>  							{  								// Lookup the machine specific comport value rather than the passed in text value  								selectableOptions.SelectedLabel = ActiveSliceSettings.Instance.Helpers.ComPort();  							};    							// Prevent droplist interaction when connected  							PrinterConnectionAndCommunication.Instance.CommunicationStateChanged.RegisterEvent((s' e) =>  							{  								canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect;  								selectableOptions.Enabled = canChangeComPort;  								selectableOptions.TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150);  								selectableOptions.BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150);  							}' ref localUnregisterEvents);    							// Release event listener on close  							selectableOptions.Closed += (s' e) =>  							{  								localUnregisterEvents?.Invoke(null' null);  							};  						}  						break;    					case SliceSettingData.DataEditTypes.LIST:  						{  							var selectableOptions = new DropDownList("None".Localize()' maxHeight: 200)  							{  								ToolTipText = settingData.HelpText'  								Margin = new BorderDouble()  							};    							foreach (string listItem in settingData.ExtraSettings.Split('''))  							{  								MenuItem newItem = selectableOptions.AddItem(listItem);  								if (newItem.Text == sliceSettingValue)  								{  									selectableOptions.SelectedLabel = sliceSettingValue;  								}    								newItem.Selected += (sender' e) =>  								{  									MenuItem menuItem = ((MenuItem)sender);  									ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' menuItem.Text' persistenceLayer);    									settingsRow.UpdateStyle();  								};  							}    							dataArea.AddChild(selectableOptions);    							settingsRow.ValueChanged = (text) =>  							{  								selectableOptions.SelectedLabel = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.HARDWARE_PRESENT:  						{  							var checkBoxWidget = new CheckBox("")  							{  								Name = settingData.PresentationName + " Checkbox"'  								ToolTipText = settingData.HelpText'  								VAnchor = Agg.UI.VAnchor.ParentBottom'  								TextColor = ActiveTheme.Instance.PrimaryTextColor'  								Checked = sliceSettingValue == "1"  							};    							checkBoxWidget.Click += (sender' e) =>  							{  								bool isChecked = ((CheckBox)sender).Checked;  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' isChecked ? "1" : "0"' persistenceLayer);    								settingsRow.UpdateStyle();  							};    							dataArea.AddChild(checkBoxWidget);    							settingsRow.ValueChanged = (text) =>  							{  								checkBoxWidget.Checked = text == "1";  							};  						}  						break;    					case SliceSettingData.DataEditTypes.VECTOR2:  						{  							string[] xyValueStrings = sliceSettingValue.Split(''');  							if (xyValueStrings.Length != 2)  							{  								xyValueStrings = new string[] { "0"' "0" };  							}    							double currentXValue;  							double.TryParse(xyValueStrings[0]' out currentXValue);    							var xEditWidget = new MHNumberEdit(currentXValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};    							double currentYValue;  							double.TryParse(xyValueStrings[1]' out currentYValue);    							var yEditWidget = new MHNumberEdit(currentYValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Margin = new BorderDouble(20' 0' 0' 0)'  							};    							xEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(xEditWidget);  							dataArea.AddChild(new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  							{  								VAnchor = VAnchor.ParentCenter'  								Margin = new BorderDouble(5' 0)'  							});    							yEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(yEditWidget);  							var yLabel = new GuiWidget()  							{  								VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  								Padding = new BorderDouble(5' 0)'  								HAnchor = HAnchor.ParentLeftRight'  							};  							yLabel.AddChild(new WrappedTextWidget("Y"' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));  							unitsArea.AddChild(yLabel);    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2;  								string[] xyValueStrings2 = text.Split(''');  								if (xyValueStrings2.Length != 2)  								{  									xyValueStrings2 = new string[] { "0"' "0" };  								}    								double.TryParse(xyValueStrings2[0]' out currentValue2);  								xEditWidget.ActuallNumberEdit.Value = currentValue2;    								double.TryParse(xyValueStrings2[1]' out currentValue2);  								yEditWidget.ActuallNumberEdit.Value = currentValue2;  							};    						}  						break;    					case SliceSettingData.DataEditTypes.OFFSET2:  						{  							Vector2 offset = ActiveSliceSettings.Instance.Helpers.ExtruderOffset(extruderIndex);    							var xEditWidget = new MHNumberEdit(offset.x' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  							};    							var yEditWidget = new MHNumberEdit(offset.y' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Margin = new BorderDouble(20' 0' 0' 0)'  							};    							xEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								int extruderIndexLocal = extruderIndex;  								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(xEditWidget);  							dataArea.AddChild(new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  							{  								VAnchor = VAnchor.ParentCenter'  								Margin = new BorderDouble(5' 0)'  							});    							yEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								int extruderIndexLocal = extruderIndex;  								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(yEditWidget);  							var yLabel = new GuiWidget()  							{  								Padding = new BorderDouble(5' 0)'  								HAnchor = HAnchor.ParentLeftRight'  								VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  							};  							yLabel.AddChild(new WrappedTextWidget("Y"' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));  							unitsArea.AddChild(yLabel);    							settingsRow.ValueChanged = (text) =>  							{  								Vector2 offset2 = ActiveSliceSettings.Instance.Helpers.ExtruderOffset(extruderIndex);  								xEditWidget.ActuallNumberEdit.Value = offset2.x;  								yEditWidget.ActuallNumberEdit.Value = offset2.y;  							};  						}  						break;    					default:  						var missingSetting = new TextWidget(String.Format("Missing the setting for '{0}'."' settingData.DataEditType.ToString()))  						{  							TextColor = ActiveTheme.Instance.PrimaryTextColor'  							BackgroundColor = RGBA_Bytes.Red  						};  						dataArea.AddChild(missingSetting);  						break;  				}  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The following statement contains a magic number: if (!PrinterSettings.KnownSettings.Contains(settingData.SlicerConfigName))  			{  				// the setting we think we are adding is not in the known settings it may have been deprecated  				TextWidget settingName = new TextWidget(String.Format("Setting '{0}' not found in known settings"' settingData.SlicerConfigName));  				settingName.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				//settingName.MinimumSize = new Vector2(minSettingNameWidth' settingName.MinimumSize.y);  				nameArea.AddChild(settingName);  				nameArea.BackgroundColor = RGBA_Bytes.Red;  			}  			else  			{  				int intEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int doubleEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int vectorXYEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int multiLineEditHeight = (int)(120 * GuiWidget.DeviceScale + .5);    				if (settingData.DataEditType != SliceSettingData.DataEditTypes.MULTI_LINE_TEXT)  				{  					var nameHolder = new GuiWidget()  					{  						Padding = new BorderDouble(0' 0' 5' 0)'  						VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  						HAnchor = HAnchor.ParentLeftRight'  					};    					nameHolder.AddChild(new WrappedTextWidget(settingData.PresentationName.Localize()' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor));    					nameArea.AddChild(nameHolder);  				}    				switch (settingData.DataEditType)  				{  					case SliceSettingData.DataEditTypes.INT:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();  							int currentValue;  							int.TryParse(sliceSettingValue' out currentValue);    							var intEditWidget = new MHNumberEdit(currentValue' pixelWidth: intEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Name = settingData.PresentationName + " Edit"'  							};  							intEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							content.AddChild(intEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' intEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								intEditWidget.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.DOUBLE:  						{  							double currentValue;  							double.TryParse(sliceSettingValue' out currentValue);    							var doubleEditWidget = new MHNumberEdit(currentValue' allowNegatives: true' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2 = 0;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.POSITIVE_DOUBLE:  						{  							const string multiValuesAreDiffernt = "-";  							FlowLayoutWidget content = new FlowLayoutWidget();    							var doubleEditWidget = new MHNumberEdit(0' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								Name = settingData.PresentationName + " Textbox"'  								SelectAllOnFocus = true  							};    							double currentValue;  							bool ChangesMultipleOtherSettings = settingData.SetSettingsOnChange.Count > 0;  							if (ChangesMultipleOtherSettings)  							{  								bool allTheSame = true;  								string setting = GetActiveValue(settingData.SetSettingsOnChange[0]["TargetSetting"]' layerCascade);  								for (int i = 1; i < settingData.SetSettingsOnChange.Count; i++)  								{  									string nextSetting = GetActiveValue(settingData.SetSettingsOnChange[i]["TargetSetting"]' layerCascade);  									if (setting != nextSetting)  									{  										allTheSame = false;  										break;  									}  								}    								if (allTheSame && setting.EndsWith("mm"))  								{  									double.TryParse(setting.Substring(0' setting.Length - 2)' out currentValue);  									doubleEditWidget.ActuallNumberEdit.Value = currentValue;  								}  								else  								{  									doubleEditWidget.ActuallNumberEdit.InternalNumberEdit.Text = multiValuesAreDiffernt;  								}  							}  							else // just set the setting normally  							{  								double.TryParse(sliceSettingValue' out currentValue);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue;  							}  							doubleEditWidget.ActuallNumberEdit.InternalTextEditWidget.MarkAsStartingState();  							  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								NumberEdit numberEdit = (NumberEdit)sender;  								// If this setting sets other settings' then do that.  								if (ChangesMultipleOtherSettings  									&& numberEdit.Text != multiValuesAreDiffernt)  								{  									{  										ActiveSliceSettings.Instance.SetValue(settingData.SetSettingsOnChange[0]["TargetSetting"]' numberEdit.Value.ToString() + "mm"' persistenceLayer);  									}  								}    								// also always save to the local setting  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' numberEdit.Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							content.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' doubleEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2 = 0;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.OFFSET:  						{  							double currentValue;  							double.TryParse(sliceSettingValue' out currentValue);  							var doubleEditWidget = new MHNumberEdit(currentValue' allowDecimals: true' allowNegatives: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true    							};  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.DOUBLE_OR_PERCENT:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();    							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: doubleEditWidth - 2' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								var textEditWidget = (TextEditWidget)sender;  								string text = textEditWidget.Text.Trim();    								bool isPercent = text.Contains("%");  								if (isPercent)  								{  									text = text.Substring(0' text.IndexOf("%"));  								}  								double result;  								double.TryParse(text' out result);  								text = result.ToString();  								if (isPercent)  								{  									text += "%";  								}  								textEditWidget.Text = text;  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' textEditWidget.Text' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							stringEdit.ActualTextEditWidget.InternalTextEditWidget.AllSelected += (sender' e) =>  							{  								// select everything up to the % (if present)  								InternalTextEditWidget textEditWidget = (InternalTextEditWidget)sender;  								int percentIndex = textEditWidget.Text.IndexOf("%");  								if (percentIndex != -1)  								{  									textEditWidget.SetSelection(0' percentIndex - 1);  								}  							};    							content.AddChild(stringEdit);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.INT_OR_MM:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();    							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: doubleEditWidth - 2' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};    							string startingText = stringEdit.Text;  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								TextEditWidget textEditWidget = (TextEditWidget)sender;  								// only validate when we lose focus  								if (!textEditWidget.ContainsFocus)  								{  									string text = textEditWidget.Text;  									text = text.Trim();  									bool isMm = text.Contains("mm");  									if (isMm)  									{  										text = text.Substring(0' text.IndexOf("mm"));  									}  									double result;  									double.TryParse(text' out result);  									text = result.ToString();  									if (isMm)  									{  										text += "mm";  									}  									else  									{  										result = (int)result;  										text = result.ToString();  									}  									textEditWidget.Text = text;  									startingText = stringEdit.Text;  								}  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' textEditWidget.Text' persistenceLayer);  								settingsRow.UpdateStyle();    								// make sure we are still looking for the final validation before saving.  								if (textEditWidget.ContainsFocus)  								{  									UiThread.RunOnIdle(() =>  									{  										string currentText = textEditWidget.Text;  										int cursorIndex = textEditWidget.InternalTextEditWidget.CharIndexToInsertBefore;  										textEditWidget.Text = startingText;  										textEditWidget.InternalTextEditWidget.MarkAsStartingState();  										textEditWidget.Text = currentText;  										textEditWidget.InternalTextEditWidget.CharIndexToInsertBefore = cursorIndex;  									});  								}  							};    							stringEdit.ActualTextEditWidget.InternalTextEditWidget.AllSelected += (sender' e) =>  							{  								// select everything up to the mm (if present)  								InternalTextEditWidget textEditWidget = (InternalTextEditWidget)sender;  								int mMIndex = textEditWidget.Text.IndexOf("mm");  								if (mMIndex != -1)  								{  									textEditWidget.SetSelection(0' mMIndex - 1);  								}  							};    							content.AddChild(stringEdit);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.CHECK_BOX:  						{  							var checkBoxWidget = new CheckBox("")  							{  								Name = settingData.PresentationName + " Checkbox"'  								ToolTipText = settingData.HelpText'  								VAnchor = Agg.UI.VAnchor.ParentBottom'  								TextColor = ActiveTheme.Instance.PrimaryTextColor'  								Checked = sliceSettingValue == "1"  							};  							checkBoxWidget.Click += (sender' e) =>  							{  								// SetValue should only be called when the checkbox is clicked. If this code makes its way into checkstatechanged  								// we end up adding a key back into the dictionary after we call .ClearValue' resulting in the blue override bar reappearing after  								// clearing a useroverride with the red x  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' checkBoxWidget.Checked ? "1" : "0"' persistenceLayer);  							};  							checkBoxWidget.CheckedStateChanged += (s' e) =>  							{  								// Linked settings should be updated in all cases (user clicked checkbox' user clicked clear)  								foreach (var setSettingsData in settingData.SetSettingsOnChange)  								{  									string targetValue;  									if (setSettingsData.TryGetValue(checkBoxWidget.Checked ? "OnValue" : "OffValue"' out targetValue))  									{  										ActiveSliceSettings.Instance.SetValue(setSettingsData["TargetSetting"]' targetValue' persistenceLayer);  									}  								}    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(checkBoxWidget);    							settingsRow.ValueChanged = (text) =>  							{  								checkBoxWidget.Checked = text == "1";  							};  						}  						break;    					case SliceSettingData.DataEditTypes.STRING:  						{  							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: settingData.ShowAsOverride ? 120 : 200' tabIndex: tabIndexForItem++)  							{  								Name = settingData.PresentationName + " Edit"'  							};  							stringEdit.ToolTipText = settingData.HelpText;  							  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((TextEditWidget)sender).Text' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							dataArea.AddChild(stringEdit);    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.MULTI_LINE_TEXT:  						{  							string convertedNewLines = sliceSettingValue.Replace("\\n"' "\n");  							var stringEdit = new MHTextEditWidget(convertedNewLines' pixelWidth: 320' pixelHeight: multiLineEditHeight' multiLine: true' tabIndex: tabIndexForItem++' typeFace: ApplicationController.MonoSpacedTypeFace)  							{  								HAnchor = HAnchor.ParentLeftRight'  							};    							stringEdit.DrawFromHintedCache();    							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((TextEditWidget)sender).Text.Replace("\n"' "\\n")' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							nameArea.HAnchor = HAnchor.AbsolutePosition;  							nameArea.Width = 0;  							dataArea.AddChild(stringEdit);  							dataArea.HAnchor = HAnchor.ParentLeftRight;    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text.Replace("\\n"' "\n");  							};  						}  						break;    					case SliceSettingData.DataEditTypes.COM_PORT:  						{  #if __ANDROID__  							addControl = false;  #endif    							EventHandler localUnregisterEvents = null;    							bool canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect;  							// The COM_PORT control is unique in its approach to the SlicerConfigName. It uses "com_port" settings name to  							// bind to a context that will place it in the SliceSetting view but it binds its values to a machine  							// specific dictionary key that is not exposed in the UI. At runtime we lookup and store to '<machinename>_com_port'  							// ensuring that a single printer can be shared across different devices and we'll select the correct com port in each case  							var selectableOptions = new DropDownList("None".Localize()' maxHeight: 200)  							{  								ToolTipText = settingData.HelpText'  								Margin = new BorderDouble()'  								Name = "Serial Port Dropdown"'  								// Prevent droplist interaction when connected  								Enabled = canChangeComPort'  								TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150)'  								BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150)'  							};    							selectableOptions.Click += (s' e) =>  							{  								AddComMenuItems(settingData' persistenceLayer' settingsRow' selectableOptions);  							};    							AddComMenuItems(settingData' persistenceLayer' settingsRow' selectableOptions);    							dataArea.AddChild(selectableOptions);    							settingsRow.ValueChanged = (text) =>  							{  								// Lookup the machine specific comport value rather than the passed in text value  								selectableOptions.SelectedLabel = ActiveSliceSettings.Instance.Helpers.ComPort();  							};    							// Prevent droplist interaction when connected  							PrinterConnectionAndCommunication.Instance.CommunicationStateChanged.RegisterEvent((s' e) =>  							{  								canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect;  								selectableOptions.Enabled = canChangeComPort;  								selectableOptions.TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150);  								selectableOptions.BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150);  							}' ref localUnregisterEvents);    							// Release event listener on close  							selectableOptions.Closed += (s' e) =>  							{  								localUnregisterEvents?.Invoke(null' null);  							};  						}  						break;    					case SliceSettingData.DataEditTypes.LIST:  						{  							var selectableOptions = new DropDownList("None".Localize()' maxHeight: 200)  							{  								ToolTipText = settingData.HelpText'  								Margin = new BorderDouble()  							};    							foreach (string listItem in settingData.ExtraSettings.Split('''))  							{  								MenuItem newItem = selectableOptions.AddItem(listItem);  								if (newItem.Text == sliceSettingValue)  								{  									selectableOptions.SelectedLabel = sliceSettingValue;  								}    								newItem.Selected += (sender' e) =>  								{  									MenuItem menuItem = ((MenuItem)sender);  									ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' menuItem.Text' persistenceLayer);    									settingsRow.UpdateStyle();  								};  							}    							dataArea.AddChild(selectableOptions);    							settingsRow.ValueChanged = (text) =>  							{  								selectableOptions.SelectedLabel = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.HARDWARE_PRESENT:  						{  							var checkBoxWidget = new CheckBox("")  							{  								Name = settingData.PresentationName + " Checkbox"'  								ToolTipText = settingData.HelpText'  								VAnchor = Agg.UI.VAnchor.ParentBottom'  								TextColor = ActiveTheme.Instance.PrimaryTextColor'  								Checked = sliceSettingValue == "1"  							};    							checkBoxWidget.Click += (sender' e) =>  							{  								bool isChecked = ((CheckBox)sender).Checked;  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' isChecked ? "1" : "0"' persistenceLayer);    								settingsRow.UpdateStyle();  							};    							dataArea.AddChild(checkBoxWidget);    							settingsRow.ValueChanged = (text) =>  							{  								checkBoxWidget.Checked = text == "1";  							};  						}  						break;    					case SliceSettingData.DataEditTypes.VECTOR2:  						{  							string[] xyValueStrings = sliceSettingValue.Split(''');  							if (xyValueStrings.Length != 2)  							{  								xyValueStrings = new string[] { "0"' "0" };  							}    							double currentXValue;  							double.TryParse(xyValueStrings[0]' out currentXValue);    							var xEditWidget = new MHNumberEdit(currentXValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};    							double currentYValue;  							double.TryParse(xyValueStrings[1]' out currentYValue);    							var yEditWidget = new MHNumberEdit(currentYValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Margin = new BorderDouble(20' 0' 0' 0)'  							};    							xEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(xEditWidget);  							dataArea.AddChild(new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  							{  								VAnchor = VAnchor.ParentCenter'  								Margin = new BorderDouble(5' 0)'  							});    							yEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(yEditWidget);  							var yLabel = new GuiWidget()  							{  								VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  								Padding = new BorderDouble(5' 0)'  								HAnchor = HAnchor.ParentLeftRight'  							};  							yLabel.AddChild(new WrappedTextWidget("Y"' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));  							unitsArea.AddChild(yLabel);    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2;  								string[] xyValueStrings2 = text.Split(''');  								if (xyValueStrings2.Length != 2)  								{  									xyValueStrings2 = new string[] { "0"' "0" };  								}    								double.TryParse(xyValueStrings2[0]' out currentValue2);  								xEditWidget.ActuallNumberEdit.Value = currentValue2;    								double.TryParse(xyValueStrings2[1]' out currentValue2);  								yEditWidget.ActuallNumberEdit.Value = currentValue2;  							};    						}  						break;    					case SliceSettingData.DataEditTypes.OFFSET2:  						{  							Vector2 offset = ActiveSliceSettings.Instance.Helpers.ExtruderOffset(extruderIndex);    							var xEditWidget = new MHNumberEdit(offset.x' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  							};    							var yEditWidget = new MHNumberEdit(offset.y' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Margin = new BorderDouble(20' 0' 0' 0)'  							};    							xEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								int extruderIndexLocal = extruderIndex;  								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(xEditWidget);  							dataArea.AddChild(new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  							{  								VAnchor = VAnchor.ParentCenter'  								Margin = new BorderDouble(5' 0)'  							});    							yEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								int extruderIndexLocal = extruderIndex;  								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(yEditWidget);  							var yLabel = new GuiWidget()  							{  								Padding = new BorderDouble(5' 0)'  								HAnchor = HAnchor.ParentLeftRight'  								VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  							};  							yLabel.AddChild(new WrappedTextWidget("Y"' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));  							unitsArea.AddChild(yLabel);    							settingsRow.ValueChanged = (text) =>  							{  								Vector2 offset2 = ActiveSliceSettings.Instance.Helpers.ExtruderOffset(extruderIndex);  								xEditWidget.ActuallNumberEdit.Value = offset2.x;  								yEditWidget.ActuallNumberEdit.Value = offset2.y;  							};  						}  						break;    					default:  						var missingSetting = new TextWidget(String.Format("Missing the setting for '{0}'."' settingData.DataEditType.ToString()))  						{  							TextColor = ActiveTheme.Instance.PrimaryTextColor'  							BackgroundColor = RGBA_Bytes.Red  						};  						dataArea.AddChild(missingSetting);  						break;  				}  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The following statement contains a magic number: if (!PrinterSettings.KnownSettings.Contains(settingData.SlicerConfigName))  			{  				// the setting we think we are adding is not in the known settings it may have been deprecated  				TextWidget settingName = new TextWidget(String.Format("Setting '{0}' not found in known settings"' settingData.SlicerConfigName));  				settingName.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				//settingName.MinimumSize = new Vector2(minSettingNameWidth' settingName.MinimumSize.y);  				nameArea.AddChild(settingName);  				nameArea.BackgroundColor = RGBA_Bytes.Red;  			}  			else  			{  				int intEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int doubleEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int vectorXYEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int multiLineEditHeight = (int)(120 * GuiWidget.DeviceScale + .5);    				if (settingData.DataEditType != SliceSettingData.DataEditTypes.MULTI_LINE_TEXT)  				{  					var nameHolder = new GuiWidget()  					{  						Padding = new BorderDouble(0' 0' 5' 0)'  						VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  						HAnchor = HAnchor.ParentLeftRight'  					};    					nameHolder.AddChild(new WrappedTextWidget(settingData.PresentationName.Localize()' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor));    					nameArea.AddChild(nameHolder);  				}    				switch (settingData.DataEditType)  				{  					case SliceSettingData.DataEditTypes.INT:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();  							int currentValue;  							int.TryParse(sliceSettingValue' out currentValue);    							var intEditWidget = new MHNumberEdit(currentValue' pixelWidth: intEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Name = settingData.PresentationName + " Edit"'  							};  							intEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							content.AddChild(intEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' intEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								intEditWidget.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.DOUBLE:  						{  							double currentValue;  							double.TryParse(sliceSettingValue' out currentValue);    							var doubleEditWidget = new MHNumberEdit(currentValue' allowNegatives: true' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2 = 0;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.POSITIVE_DOUBLE:  						{  							const string multiValuesAreDiffernt = "-";  							FlowLayoutWidget content = new FlowLayoutWidget();    							var doubleEditWidget = new MHNumberEdit(0' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								Name = settingData.PresentationName + " Textbox"'  								SelectAllOnFocus = true  							};    							double currentValue;  							bool ChangesMultipleOtherSettings = settingData.SetSettingsOnChange.Count > 0;  							if (ChangesMultipleOtherSettings)  							{  								bool allTheSame = true;  								string setting = GetActiveValue(settingData.SetSettingsOnChange[0]["TargetSetting"]' layerCascade);  								for (int i = 1; i < settingData.SetSettingsOnChange.Count; i++)  								{  									string nextSetting = GetActiveValue(settingData.SetSettingsOnChange[i]["TargetSetting"]' layerCascade);  									if (setting != nextSetting)  									{  										allTheSame = false;  										break;  									}  								}    								if (allTheSame && setting.EndsWith("mm"))  								{  									double.TryParse(setting.Substring(0' setting.Length - 2)' out currentValue);  									doubleEditWidget.ActuallNumberEdit.Value = currentValue;  								}  								else  								{  									doubleEditWidget.ActuallNumberEdit.InternalNumberEdit.Text = multiValuesAreDiffernt;  								}  							}  							else // just set the setting normally  							{  								double.TryParse(sliceSettingValue' out currentValue);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue;  							}  							doubleEditWidget.ActuallNumberEdit.InternalTextEditWidget.MarkAsStartingState();  							  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								NumberEdit numberEdit = (NumberEdit)sender;  								// If this setting sets other settings' then do that.  								if (ChangesMultipleOtherSettings  									&& numberEdit.Text != multiValuesAreDiffernt)  								{  									{  										ActiveSliceSettings.Instance.SetValue(settingData.SetSettingsOnChange[0]["TargetSetting"]' numberEdit.Value.ToString() + "mm"' persistenceLayer);  									}  								}    								// also always save to the local setting  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' numberEdit.Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							content.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' doubleEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2 = 0;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.OFFSET:  						{  							double currentValue;  							double.TryParse(sliceSettingValue' out currentValue);  							var doubleEditWidget = new MHNumberEdit(currentValue' allowDecimals: true' allowNegatives: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true    							};  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.DOUBLE_OR_PERCENT:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();    							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: doubleEditWidth - 2' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								var textEditWidget = (TextEditWidget)sender;  								string text = textEditWidget.Text.Trim();    								bool isPercent = text.Contains("%");  								if (isPercent)  								{  									text = text.Substring(0' text.IndexOf("%"));  								}  								double result;  								double.TryParse(text' out result);  								text = result.ToString();  								if (isPercent)  								{  									text += "%";  								}  								textEditWidget.Text = text;  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' textEditWidget.Text' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							stringEdit.ActualTextEditWidget.InternalTextEditWidget.AllSelected += (sender' e) =>  							{  								// select everything up to the % (if present)  								InternalTextEditWidget textEditWidget = (InternalTextEditWidget)sender;  								int percentIndex = textEditWidget.Text.IndexOf("%");  								if (percentIndex != -1)  								{  									textEditWidget.SetSelection(0' percentIndex - 1);  								}  							};    							content.AddChild(stringEdit);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.INT_OR_MM:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();    							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: doubleEditWidth - 2' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};    							string startingText = stringEdit.Text;  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								TextEditWidget textEditWidget = (TextEditWidget)sender;  								// only validate when we lose focus  								if (!textEditWidget.ContainsFocus)  								{  									string text = textEditWidget.Text;  									text = text.Trim();  									bool isMm = text.Contains("mm");  									if (isMm)  									{  										text = text.Substring(0' text.IndexOf("mm"));  									}  									double result;  									double.TryParse(text' out result);  									text = result.ToString();  									if (isMm)  									{  										text += "mm";  									}  									else  									{  										result = (int)result;  										text = result.ToString();  									}  									textEditWidget.Text = text;  									startingText = stringEdit.Text;  								}  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' textEditWidget.Text' persistenceLayer);  								settingsRow.UpdateStyle();    								// make sure we are still looking for the final validation before saving.  								if (textEditWidget.ContainsFocus)  								{  									UiThread.RunOnIdle(() =>  									{  										string currentText = textEditWidget.Text;  										int cursorIndex = textEditWidget.InternalTextEditWidget.CharIndexToInsertBefore;  										textEditWidget.Text = startingText;  										textEditWidget.InternalTextEditWidget.MarkAsStartingState();  										textEditWidget.Text = currentText;  										textEditWidget.InternalTextEditWidget.CharIndexToInsertBefore = cursorIndex;  									});  								}  							};    							stringEdit.ActualTextEditWidget.InternalTextEditWidget.AllSelected += (sender' e) =>  							{  								// select everything up to the mm (if present)  								InternalTextEditWidget textEditWidget = (InternalTextEditWidget)sender;  								int mMIndex = textEditWidget.Text.IndexOf("mm");  								if (mMIndex != -1)  								{  									textEditWidget.SetSelection(0' mMIndex - 1);  								}  							};    							content.AddChild(stringEdit);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.CHECK_BOX:  						{  							var checkBoxWidget = new CheckBox("")  							{  								Name = settingData.PresentationName + " Checkbox"'  								ToolTipText = settingData.HelpText'  								VAnchor = Agg.UI.VAnchor.ParentBottom'  								TextColor = ActiveTheme.Instance.PrimaryTextColor'  								Checked = sliceSettingValue == "1"  							};  							checkBoxWidget.Click += (sender' e) =>  							{  								// SetValue should only be called when the checkbox is clicked. If this code makes its way into checkstatechanged  								// we end up adding a key back into the dictionary after we call .ClearValue' resulting in the blue override bar reappearing after  								// clearing a useroverride with the red x  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' checkBoxWidget.Checked ? "1" : "0"' persistenceLayer);  							};  							checkBoxWidget.CheckedStateChanged += (s' e) =>  							{  								// Linked settings should be updated in all cases (user clicked checkbox' user clicked clear)  								foreach (var setSettingsData in settingData.SetSettingsOnChange)  								{  									string targetValue;  									if (setSettingsData.TryGetValue(checkBoxWidget.Checked ? "OnValue" : "OffValue"' out targetValue))  									{  										ActiveSliceSettings.Instance.SetValue(setSettingsData["TargetSetting"]' targetValue' persistenceLayer);  									}  								}    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(checkBoxWidget);    							settingsRow.ValueChanged = (text) =>  							{  								checkBoxWidget.Checked = text == "1";  							};  						}  						break;    					case SliceSettingData.DataEditTypes.STRING:  						{  							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: settingData.ShowAsOverride ? 120 : 200' tabIndex: tabIndexForItem++)  							{  								Name = settingData.PresentationName + " Edit"'  							};  							stringEdit.ToolTipText = settingData.HelpText;  							  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((TextEditWidget)sender).Text' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							dataArea.AddChild(stringEdit);    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.MULTI_LINE_TEXT:  						{  							string convertedNewLines = sliceSettingValue.Replace("\\n"' "\n");  							var stringEdit = new MHTextEditWidget(convertedNewLines' pixelWidth: 320' pixelHeight: multiLineEditHeight' multiLine: true' tabIndex: tabIndexForItem++' typeFace: ApplicationController.MonoSpacedTypeFace)  							{  								HAnchor = HAnchor.ParentLeftRight'  							};    							stringEdit.DrawFromHintedCache();    							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((TextEditWidget)sender).Text.Replace("\n"' "\\n")' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							nameArea.HAnchor = HAnchor.AbsolutePosition;  							nameArea.Width = 0;  							dataArea.AddChild(stringEdit);  							dataArea.HAnchor = HAnchor.ParentLeftRight;    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text.Replace("\\n"' "\n");  							};  						}  						break;    					case SliceSettingData.DataEditTypes.COM_PORT:  						{  #if __ANDROID__  							addControl = false;  #endif    							EventHandler localUnregisterEvents = null;    							bool canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect;  							// The COM_PORT control is unique in its approach to the SlicerConfigName. It uses "com_port" settings name to  							// bind to a context that will place it in the SliceSetting view but it binds its values to a machine  							// specific dictionary key that is not exposed in the UI. At runtime we lookup and store to '<machinename>_com_port'  							// ensuring that a single printer can be shared across different devices and we'll select the correct com port in each case  							var selectableOptions = new DropDownList("None".Localize()' maxHeight: 200)  							{  								ToolTipText = settingData.HelpText'  								Margin = new BorderDouble()'  								Name = "Serial Port Dropdown"'  								// Prevent droplist interaction when connected  								Enabled = canChangeComPort'  								TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150)'  								BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150)'  							};    							selectableOptions.Click += (s' e) =>  							{  								AddComMenuItems(settingData' persistenceLayer' settingsRow' selectableOptions);  							};    							AddComMenuItems(settingData' persistenceLayer' settingsRow' selectableOptions);    							dataArea.AddChild(selectableOptions);    							settingsRow.ValueChanged = (text) =>  							{  								// Lookup the machine specific comport value rather than the passed in text value  								selectableOptions.SelectedLabel = ActiveSliceSettings.Instance.Helpers.ComPort();  							};    							// Prevent droplist interaction when connected  							PrinterConnectionAndCommunication.Instance.CommunicationStateChanged.RegisterEvent((s' e) =>  							{  								canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect;  								selectableOptions.Enabled = canChangeComPort;  								selectableOptions.TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150);  								selectableOptions.BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150);  							}' ref localUnregisterEvents);    							// Release event listener on close  							selectableOptions.Closed += (s' e) =>  							{  								localUnregisterEvents?.Invoke(null' null);  							};  						}  						break;    					case SliceSettingData.DataEditTypes.LIST:  						{  							var selectableOptions = new DropDownList("None".Localize()' maxHeight: 200)  							{  								ToolTipText = settingData.HelpText'  								Margin = new BorderDouble()  							};    							foreach (string listItem in settingData.ExtraSettings.Split('''))  							{  								MenuItem newItem = selectableOptions.AddItem(listItem);  								if (newItem.Text == sliceSettingValue)  								{  									selectableOptions.SelectedLabel = sliceSettingValue;  								}    								newItem.Selected += (sender' e) =>  								{  									MenuItem menuItem = ((MenuItem)sender);  									ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' menuItem.Text' persistenceLayer);    									settingsRow.UpdateStyle();  								};  							}    							dataArea.AddChild(selectableOptions);    							settingsRow.ValueChanged = (text) =>  							{  								selectableOptions.SelectedLabel = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.HARDWARE_PRESENT:  						{  							var checkBoxWidget = new CheckBox("")  							{  								Name = settingData.PresentationName + " Checkbox"'  								ToolTipText = settingData.HelpText'  								VAnchor = Agg.UI.VAnchor.ParentBottom'  								TextColor = ActiveTheme.Instance.PrimaryTextColor'  								Checked = sliceSettingValue == "1"  							};    							checkBoxWidget.Click += (sender' e) =>  							{  								bool isChecked = ((CheckBox)sender).Checked;  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' isChecked ? "1" : "0"' persistenceLayer);    								settingsRow.UpdateStyle();  							};    							dataArea.AddChild(checkBoxWidget);    							settingsRow.ValueChanged = (text) =>  							{  								checkBoxWidget.Checked = text == "1";  							};  						}  						break;    					case SliceSettingData.DataEditTypes.VECTOR2:  						{  							string[] xyValueStrings = sliceSettingValue.Split(''');  							if (xyValueStrings.Length != 2)  							{  								xyValueStrings = new string[] { "0"' "0" };  							}    							double currentXValue;  							double.TryParse(xyValueStrings[0]' out currentXValue);    							var xEditWidget = new MHNumberEdit(currentXValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};    							double currentYValue;  							double.TryParse(xyValueStrings[1]' out currentYValue);    							var yEditWidget = new MHNumberEdit(currentYValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Margin = new BorderDouble(20' 0' 0' 0)'  							};    							xEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(xEditWidget);  							dataArea.AddChild(new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  							{  								VAnchor = VAnchor.ParentCenter'  								Margin = new BorderDouble(5' 0)'  							});    							yEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(yEditWidget);  							var yLabel = new GuiWidget()  							{  								VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  								Padding = new BorderDouble(5' 0)'  								HAnchor = HAnchor.ParentLeftRight'  							};  							yLabel.AddChild(new WrappedTextWidget("Y"' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));  							unitsArea.AddChild(yLabel);    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2;  								string[] xyValueStrings2 = text.Split(''');  								if (xyValueStrings2.Length != 2)  								{  									xyValueStrings2 = new string[] { "0"' "0" };  								}    								double.TryParse(xyValueStrings2[0]' out currentValue2);  								xEditWidget.ActuallNumberEdit.Value = currentValue2;    								double.TryParse(xyValueStrings2[1]' out currentValue2);  								yEditWidget.ActuallNumberEdit.Value = currentValue2;  							};    						}  						break;    					case SliceSettingData.DataEditTypes.OFFSET2:  						{  							Vector2 offset = ActiveSliceSettings.Instance.Helpers.ExtruderOffset(extruderIndex);    							var xEditWidget = new MHNumberEdit(offset.x' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  							};    							var yEditWidget = new MHNumberEdit(offset.y' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Margin = new BorderDouble(20' 0' 0' 0)'  							};    							xEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								int extruderIndexLocal = extruderIndex;  								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(xEditWidget);  							dataArea.AddChild(new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  							{  								VAnchor = VAnchor.ParentCenter'  								Margin = new BorderDouble(5' 0)'  							});    							yEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								int extruderIndexLocal = extruderIndex;  								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(yEditWidget);  							var yLabel = new GuiWidget()  							{  								Padding = new BorderDouble(5' 0)'  								HAnchor = HAnchor.ParentLeftRight'  								VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  							};  							yLabel.AddChild(new WrappedTextWidget("Y"' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));  							unitsArea.AddChild(yLabel);    							settingsRow.ValueChanged = (text) =>  							{  								Vector2 offset2 = ActiveSliceSettings.Instance.Helpers.ExtruderOffset(extruderIndex);  								xEditWidget.ActuallNumberEdit.Value = offset2.x;  								yEditWidget.ActuallNumberEdit.Value = offset2.y;  							};  						}  						break;    					default:  						var missingSetting = new TextWidget(String.Format("Missing the setting for '{0}'."' settingData.DataEditType.ToString()))  						{  							TextColor = ActiveTheme.Instance.PrimaryTextColor'  							BackgroundColor = RGBA_Bytes.Red  						};  						dataArea.AddChild(missingSetting);  						break;  				}  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The following statement contains a magic number: if (!PrinterSettings.KnownSettings.Contains(settingData.SlicerConfigName))  			{  				// the setting we think we are adding is not in the known settings it may have been deprecated  				TextWidget settingName = new TextWidget(String.Format("Setting '{0}' not found in known settings"' settingData.SlicerConfigName));  				settingName.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				//settingName.MinimumSize = new Vector2(minSettingNameWidth' settingName.MinimumSize.y);  				nameArea.AddChild(settingName);  				nameArea.BackgroundColor = RGBA_Bytes.Red;  			}  			else  			{  				int intEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int doubleEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int vectorXYEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int multiLineEditHeight = (int)(120 * GuiWidget.DeviceScale + .5);    				if (settingData.DataEditType != SliceSettingData.DataEditTypes.MULTI_LINE_TEXT)  				{  					var nameHolder = new GuiWidget()  					{  						Padding = new BorderDouble(0' 0' 5' 0)'  						VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  						HAnchor = HAnchor.ParentLeftRight'  					};    					nameHolder.AddChild(new WrappedTextWidget(settingData.PresentationName.Localize()' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor));    					nameArea.AddChild(nameHolder);  				}    				switch (settingData.DataEditType)  				{  					case SliceSettingData.DataEditTypes.INT:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();  							int currentValue;  							int.TryParse(sliceSettingValue' out currentValue);    							var intEditWidget = new MHNumberEdit(currentValue' pixelWidth: intEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Name = settingData.PresentationName + " Edit"'  							};  							intEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							content.AddChild(intEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' intEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								intEditWidget.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.DOUBLE:  						{  							double currentValue;  							double.TryParse(sliceSettingValue' out currentValue);    							var doubleEditWidget = new MHNumberEdit(currentValue' allowNegatives: true' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2 = 0;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.POSITIVE_DOUBLE:  						{  							const string multiValuesAreDiffernt = "-";  							FlowLayoutWidget content = new FlowLayoutWidget();    							var doubleEditWidget = new MHNumberEdit(0' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								Name = settingData.PresentationName + " Textbox"'  								SelectAllOnFocus = true  							};    							double currentValue;  							bool ChangesMultipleOtherSettings = settingData.SetSettingsOnChange.Count > 0;  							if (ChangesMultipleOtherSettings)  							{  								bool allTheSame = true;  								string setting = GetActiveValue(settingData.SetSettingsOnChange[0]["TargetSetting"]' layerCascade);  								for (int i = 1; i < settingData.SetSettingsOnChange.Count; i++)  								{  									string nextSetting = GetActiveValue(settingData.SetSettingsOnChange[i]["TargetSetting"]' layerCascade);  									if (setting != nextSetting)  									{  										allTheSame = false;  										break;  									}  								}    								if (allTheSame && setting.EndsWith("mm"))  								{  									double.TryParse(setting.Substring(0' setting.Length - 2)' out currentValue);  									doubleEditWidget.ActuallNumberEdit.Value = currentValue;  								}  								else  								{  									doubleEditWidget.ActuallNumberEdit.InternalNumberEdit.Text = multiValuesAreDiffernt;  								}  							}  							else // just set the setting normally  							{  								double.TryParse(sliceSettingValue' out currentValue);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue;  							}  							doubleEditWidget.ActuallNumberEdit.InternalTextEditWidget.MarkAsStartingState();  							  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								NumberEdit numberEdit = (NumberEdit)sender;  								// If this setting sets other settings' then do that.  								if (ChangesMultipleOtherSettings  									&& numberEdit.Text != multiValuesAreDiffernt)  								{  									{  										ActiveSliceSettings.Instance.SetValue(settingData.SetSettingsOnChange[0]["TargetSetting"]' numberEdit.Value.ToString() + "mm"' persistenceLayer);  									}  								}    								// also always save to the local setting  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' numberEdit.Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							content.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' doubleEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2 = 0;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.OFFSET:  						{  							double currentValue;  							double.TryParse(sliceSettingValue' out currentValue);  							var doubleEditWidget = new MHNumberEdit(currentValue' allowDecimals: true' allowNegatives: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true    							};  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.DOUBLE_OR_PERCENT:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();    							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: doubleEditWidth - 2' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								var textEditWidget = (TextEditWidget)sender;  								string text = textEditWidget.Text.Trim();    								bool isPercent = text.Contains("%");  								if (isPercent)  								{  									text = text.Substring(0' text.IndexOf("%"));  								}  								double result;  								double.TryParse(text' out result);  								text = result.ToString();  								if (isPercent)  								{  									text += "%";  								}  								textEditWidget.Text = text;  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' textEditWidget.Text' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							stringEdit.ActualTextEditWidget.InternalTextEditWidget.AllSelected += (sender' e) =>  							{  								// select everything up to the % (if present)  								InternalTextEditWidget textEditWidget = (InternalTextEditWidget)sender;  								int percentIndex = textEditWidget.Text.IndexOf("%");  								if (percentIndex != -1)  								{  									textEditWidget.SetSelection(0' percentIndex - 1);  								}  							};    							content.AddChild(stringEdit);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.INT_OR_MM:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();    							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: doubleEditWidth - 2' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};    							string startingText = stringEdit.Text;  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								TextEditWidget textEditWidget = (TextEditWidget)sender;  								// only validate when we lose focus  								if (!textEditWidget.ContainsFocus)  								{  									string text = textEditWidget.Text;  									text = text.Trim();  									bool isMm = text.Contains("mm");  									if (isMm)  									{  										text = text.Substring(0' text.IndexOf("mm"));  									}  									double result;  									double.TryParse(text' out result);  									text = result.ToString();  									if (isMm)  									{  										text += "mm";  									}  									else  									{  										result = (int)result;  										text = result.ToString();  									}  									textEditWidget.Text = text;  									startingText = stringEdit.Text;  								}  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' textEditWidget.Text' persistenceLayer);  								settingsRow.UpdateStyle();    								// make sure we are still looking for the final validation before saving.  								if (textEditWidget.ContainsFocus)  								{  									UiThread.RunOnIdle(() =>  									{  										string currentText = textEditWidget.Text;  										int cursorIndex = textEditWidget.InternalTextEditWidget.CharIndexToInsertBefore;  										textEditWidget.Text = startingText;  										textEditWidget.InternalTextEditWidget.MarkAsStartingState();  										textEditWidget.Text = currentText;  										textEditWidget.InternalTextEditWidget.CharIndexToInsertBefore = cursorIndex;  									});  								}  							};    							stringEdit.ActualTextEditWidget.InternalTextEditWidget.AllSelected += (sender' e) =>  							{  								// select everything up to the mm (if present)  								InternalTextEditWidget textEditWidget = (InternalTextEditWidget)sender;  								int mMIndex = textEditWidget.Text.IndexOf("mm");  								if (mMIndex != -1)  								{  									textEditWidget.SetSelection(0' mMIndex - 1);  								}  							};    							content.AddChild(stringEdit);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.CHECK_BOX:  						{  							var checkBoxWidget = new CheckBox("")  							{  								Name = settingData.PresentationName + " Checkbox"'  								ToolTipText = settingData.HelpText'  								VAnchor = Agg.UI.VAnchor.ParentBottom'  								TextColor = ActiveTheme.Instance.PrimaryTextColor'  								Checked = sliceSettingValue == "1"  							};  							checkBoxWidget.Click += (sender' e) =>  							{  								// SetValue should only be called when the checkbox is clicked. If this code makes its way into checkstatechanged  								// we end up adding a key back into the dictionary after we call .ClearValue' resulting in the blue override bar reappearing after  								// clearing a useroverride with the red x  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' checkBoxWidget.Checked ? "1" : "0"' persistenceLayer);  							};  							checkBoxWidget.CheckedStateChanged += (s' e) =>  							{  								// Linked settings should be updated in all cases (user clicked checkbox' user clicked clear)  								foreach (var setSettingsData in settingData.SetSettingsOnChange)  								{  									string targetValue;  									if (setSettingsData.TryGetValue(checkBoxWidget.Checked ? "OnValue" : "OffValue"' out targetValue))  									{  										ActiveSliceSettings.Instance.SetValue(setSettingsData["TargetSetting"]' targetValue' persistenceLayer);  									}  								}    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(checkBoxWidget);    							settingsRow.ValueChanged = (text) =>  							{  								checkBoxWidget.Checked = text == "1";  							};  						}  						break;    					case SliceSettingData.DataEditTypes.STRING:  						{  							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: settingData.ShowAsOverride ? 120 : 200' tabIndex: tabIndexForItem++)  							{  								Name = settingData.PresentationName + " Edit"'  							};  							stringEdit.ToolTipText = settingData.HelpText;  							  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((TextEditWidget)sender).Text' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							dataArea.AddChild(stringEdit);    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.MULTI_LINE_TEXT:  						{  							string convertedNewLines = sliceSettingValue.Replace("\\n"' "\n");  							var stringEdit = new MHTextEditWidget(convertedNewLines' pixelWidth: 320' pixelHeight: multiLineEditHeight' multiLine: true' tabIndex: tabIndexForItem++' typeFace: ApplicationController.MonoSpacedTypeFace)  							{  								HAnchor = HAnchor.ParentLeftRight'  							};    							stringEdit.DrawFromHintedCache();    							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((TextEditWidget)sender).Text.Replace("\n"' "\\n")' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							nameArea.HAnchor = HAnchor.AbsolutePosition;  							nameArea.Width = 0;  							dataArea.AddChild(stringEdit);  							dataArea.HAnchor = HAnchor.ParentLeftRight;    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text.Replace("\\n"' "\n");  							};  						}  						break;    					case SliceSettingData.DataEditTypes.COM_PORT:  						{  #if __ANDROID__  							addControl = false;  #endif    							EventHandler localUnregisterEvents = null;    							bool canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect;  							// The COM_PORT control is unique in its approach to the SlicerConfigName. It uses "com_port" settings name to  							// bind to a context that will place it in the SliceSetting view but it binds its values to a machine  							// specific dictionary key that is not exposed in the UI. At runtime we lookup and store to '<machinename>_com_port'  							// ensuring that a single printer can be shared across different devices and we'll select the correct com port in each case  							var selectableOptions = new DropDownList("None".Localize()' maxHeight: 200)  							{  								ToolTipText = settingData.HelpText'  								Margin = new BorderDouble()'  								Name = "Serial Port Dropdown"'  								// Prevent droplist interaction when connected  								Enabled = canChangeComPort'  								TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150)'  								BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150)'  							};    							selectableOptions.Click += (s' e) =>  							{  								AddComMenuItems(settingData' persistenceLayer' settingsRow' selectableOptions);  							};    							AddComMenuItems(settingData' persistenceLayer' settingsRow' selectableOptions);    							dataArea.AddChild(selectableOptions);    							settingsRow.ValueChanged = (text) =>  							{  								// Lookup the machine specific comport value rather than the passed in text value  								selectableOptions.SelectedLabel = ActiveSliceSettings.Instance.Helpers.ComPort();  							};    							// Prevent droplist interaction when connected  							PrinterConnectionAndCommunication.Instance.CommunicationStateChanged.RegisterEvent((s' e) =>  							{  								canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect;  								selectableOptions.Enabled = canChangeComPort;  								selectableOptions.TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150);  								selectableOptions.BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150);  							}' ref localUnregisterEvents);    							// Release event listener on close  							selectableOptions.Closed += (s' e) =>  							{  								localUnregisterEvents?.Invoke(null' null);  							};  						}  						break;    					case SliceSettingData.DataEditTypes.LIST:  						{  							var selectableOptions = new DropDownList("None".Localize()' maxHeight: 200)  							{  								ToolTipText = settingData.HelpText'  								Margin = new BorderDouble()  							};    							foreach (string listItem in settingData.ExtraSettings.Split('''))  							{  								MenuItem newItem = selectableOptions.AddItem(listItem);  								if (newItem.Text == sliceSettingValue)  								{  									selectableOptions.SelectedLabel = sliceSettingValue;  								}    								newItem.Selected += (sender' e) =>  								{  									MenuItem menuItem = ((MenuItem)sender);  									ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' menuItem.Text' persistenceLayer);    									settingsRow.UpdateStyle();  								};  							}    							dataArea.AddChild(selectableOptions);    							settingsRow.ValueChanged = (text) =>  							{  								selectableOptions.SelectedLabel = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.HARDWARE_PRESENT:  						{  							var checkBoxWidget = new CheckBox("")  							{  								Name = settingData.PresentationName + " Checkbox"'  								ToolTipText = settingData.HelpText'  								VAnchor = Agg.UI.VAnchor.ParentBottom'  								TextColor = ActiveTheme.Instance.PrimaryTextColor'  								Checked = sliceSettingValue == "1"  							};    							checkBoxWidget.Click += (sender' e) =>  							{  								bool isChecked = ((CheckBox)sender).Checked;  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' isChecked ? "1" : "0"' persistenceLayer);    								settingsRow.UpdateStyle();  							};    							dataArea.AddChild(checkBoxWidget);    							settingsRow.ValueChanged = (text) =>  							{  								checkBoxWidget.Checked = text == "1";  							};  						}  						break;    					case SliceSettingData.DataEditTypes.VECTOR2:  						{  							string[] xyValueStrings = sliceSettingValue.Split(''');  							if (xyValueStrings.Length != 2)  							{  								xyValueStrings = new string[] { "0"' "0" };  							}    							double currentXValue;  							double.TryParse(xyValueStrings[0]' out currentXValue);    							var xEditWidget = new MHNumberEdit(currentXValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};    							double currentYValue;  							double.TryParse(xyValueStrings[1]' out currentYValue);    							var yEditWidget = new MHNumberEdit(currentYValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Margin = new BorderDouble(20' 0' 0' 0)'  							};    							xEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(xEditWidget);  							dataArea.AddChild(new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  							{  								VAnchor = VAnchor.ParentCenter'  								Margin = new BorderDouble(5' 0)'  							});    							yEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(yEditWidget);  							var yLabel = new GuiWidget()  							{  								VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  								Padding = new BorderDouble(5' 0)'  								HAnchor = HAnchor.ParentLeftRight'  							};  							yLabel.AddChild(new WrappedTextWidget("Y"' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));  							unitsArea.AddChild(yLabel);    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2;  								string[] xyValueStrings2 = text.Split(''');  								if (xyValueStrings2.Length != 2)  								{  									xyValueStrings2 = new string[] { "0"' "0" };  								}    								double.TryParse(xyValueStrings2[0]' out currentValue2);  								xEditWidget.ActuallNumberEdit.Value = currentValue2;    								double.TryParse(xyValueStrings2[1]' out currentValue2);  								yEditWidget.ActuallNumberEdit.Value = currentValue2;  							};    						}  						break;    					case SliceSettingData.DataEditTypes.OFFSET2:  						{  							Vector2 offset = ActiveSliceSettings.Instance.Helpers.ExtruderOffset(extruderIndex);    							var xEditWidget = new MHNumberEdit(offset.x' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  							};    							var yEditWidget = new MHNumberEdit(offset.y' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Margin = new BorderDouble(20' 0' 0' 0)'  							};    							xEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								int extruderIndexLocal = extruderIndex;  								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(xEditWidget);  							dataArea.AddChild(new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  							{  								VAnchor = VAnchor.ParentCenter'  								Margin = new BorderDouble(5' 0)'  							});    							yEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								int extruderIndexLocal = extruderIndex;  								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(yEditWidget);  							var yLabel = new GuiWidget()  							{  								Padding = new BorderDouble(5' 0)'  								HAnchor = HAnchor.ParentLeftRight'  								VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  							};  							yLabel.AddChild(new WrappedTextWidget("Y"' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));  							unitsArea.AddChild(yLabel);    							settingsRow.ValueChanged = (text) =>  							{  								Vector2 offset2 = ActiveSliceSettings.Instance.Helpers.ExtruderOffset(extruderIndex);  								xEditWidget.ActuallNumberEdit.Value = offset2.x;  								yEditWidget.ActuallNumberEdit.Value = offset2.y;  							};  						}  						break;    					default:  						var missingSetting = new TextWidget(String.Format("Missing the setting for '{0}'."' settingData.DataEditType.ToString()))  						{  							TextColor = ActiveTheme.Instance.PrimaryTextColor'  							BackgroundColor = RGBA_Bytes.Red  						};  						dataArea.AddChild(missingSetting);  						break;  				}  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The following statement contains a magic number: if (!PrinterSettings.KnownSettings.Contains(settingData.SlicerConfigName))  			{  				// the setting we think we are adding is not in the known settings it may have been deprecated  				TextWidget settingName = new TextWidget(String.Format("Setting '{0}' not found in known settings"' settingData.SlicerConfigName));  				settingName.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				//settingName.MinimumSize = new Vector2(minSettingNameWidth' settingName.MinimumSize.y);  				nameArea.AddChild(settingName);  				nameArea.BackgroundColor = RGBA_Bytes.Red;  			}  			else  			{  				int intEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int doubleEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int vectorXYEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int multiLineEditHeight = (int)(120 * GuiWidget.DeviceScale + .5);    				if (settingData.DataEditType != SliceSettingData.DataEditTypes.MULTI_LINE_TEXT)  				{  					var nameHolder = new GuiWidget()  					{  						Padding = new BorderDouble(0' 0' 5' 0)'  						VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  						HAnchor = HAnchor.ParentLeftRight'  					};    					nameHolder.AddChild(new WrappedTextWidget(settingData.PresentationName.Localize()' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor));    					nameArea.AddChild(nameHolder);  				}    				switch (settingData.DataEditType)  				{  					case SliceSettingData.DataEditTypes.INT:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();  							int currentValue;  							int.TryParse(sliceSettingValue' out currentValue);    							var intEditWidget = new MHNumberEdit(currentValue' pixelWidth: intEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Name = settingData.PresentationName + " Edit"'  							};  							intEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							content.AddChild(intEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' intEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								intEditWidget.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.DOUBLE:  						{  							double currentValue;  							double.TryParse(sliceSettingValue' out currentValue);    							var doubleEditWidget = new MHNumberEdit(currentValue' allowNegatives: true' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2 = 0;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.POSITIVE_DOUBLE:  						{  							const string multiValuesAreDiffernt = "-";  							FlowLayoutWidget content = new FlowLayoutWidget();    							var doubleEditWidget = new MHNumberEdit(0' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								Name = settingData.PresentationName + " Textbox"'  								SelectAllOnFocus = true  							};    							double currentValue;  							bool ChangesMultipleOtherSettings = settingData.SetSettingsOnChange.Count > 0;  							if (ChangesMultipleOtherSettings)  							{  								bool allTheSame = true;  								string setting = GetActiveValue(settingData.SetSettingsOnChange[0]["TargetSetting"]' layerCascade);  								for (int i = 1; i < settingData.SetSettingsOnChange.Count; i++)  								{  									string nextSetting = GetActiveValue(settingData.SetSettingsOnChange[i]["TargetSetting"]' layerCascade);  									if (setting != nextSetting)  									{  										allTheSame = false;  										break;  									}  								}    								if (allTheSame && setting.EndsWith("mm"))  								{  									double.TryParse(setting.Substring(0' setting.Length - 2)' out currentValue);  									doubleEditWidget.ActuallNumberEdit.Value = currentValue;  								}  								else  								{  									doubleEditWidget.ActuallNumberEdit.InternalNumberEdit.Text = multiValuesAreDiffernt;  								}  							}  							else // just set the setting normally  							{  								double.TryParse(sliceSettingValue' out currentValue);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue;  							}  							doubleEditWidget.ActuallNumberEdit.InternalTextEditWidget.MarkAsStartingState();  							  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								NumberEdit numberEdit = (NumberEdit)sender;  								// If this setting sets other settings' then do that.  								if (ChangesMultipleOtherSettings  									&& numberEdit.Text != multiValuesAreDiffernt)  								{  									{  										ActiveSliceSettings.Instance.SetValue(settingData.SetSettingsOnChange[0]["TargetSetting"]' numberEdit.Value.ToString() + "mm"' persistenceLayer);  									}  								}    								// also always save to the local setting  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' numberEdit.Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							content.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' doubleEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2 = 0;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.OFFSET:  						{  							double currentValue;  							double.TryParse(sliceSettingValue' out currentValue);  							var doubleEditWidget = new MHNumberEdit(currentValue' allowDecimals: true' allowNegatives: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true    							};  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.DOUBLE_OR_PERCENT:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();    							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: doubleEditWidth - 2' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								var textEditWidget = (TextEditWidget)sender;  								string text = textEditWidget.Text.Trim();    								bool isPercent = text.Contains("%");  								if (isPercent)  								{  									text = text.Substring(0' text.IndexOf("%"));  								}  								double result;  								double.TryParse(text' out result);  								text = result.ToString();  								if (isPercent)  								{  									text += "%";  								}  								textEditWidget.Text = text;  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' textEditWidget.Text' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							stringEdit.ActualTextEditWidget.InternalTextEditWidget.AllSelected += (sender' e) =>  							{  								// select everything up to the % (if present)  								InternalTextEditWidget textEditWidget = (InternalTextEditWidget)sender;  								int percentIndex = textEditWidget.Text.IndexOf("%");  								if (percentIndex != -1)  								{  									textEditWidget.SetSelection(0' percentIndex - 1);  								}  							};    							content.AddChild(stringEdit);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.INT_OR_MM:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();    							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: doubleEditWidth - 2' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};    							string startingText = stringEdit.Text;  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								TextEditWidget textEditWidget = (TextEditWidget)sender;  								// only validate when we lose focus  								if (!textEditWidget.ContainsFocus)  								{  									string text = textEditWidget.Text;  									text = text.Trim();  									bool isMm = text.Contains("mm");  									if (isMm)  									{  										text = text.Substring(0' text.IndexOf("mm"));  									}  									double result;  									double.TryParse(text' out result);  									text = result.ToString();  									if (isMm)  									{  										text += "mm";  									}  									else  									{  										result = (int)result;  										text = result.ToString();  									}  									textEditWidget.Text = text;  									startingText = stringEdit.Text;  								}  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' textEditWidget.Text' persistenceLayer);  								settingsRow.UpdateStyle();    								// make sure we are still looking for the final validation before saving.  								if (textEditWidget.ContainsFocus)  								{  									UiThread.RunOnIdle(() =>  									{  										string currentText = textEditWidget.Text;  										int cursorIndex = textEditWidget.InternalTextEditWidget.CharIndexToInsertBefore;  										textEditWidget.Text = startingText;  										textEditWidget.InternalTextEditWidget.MarkAsStartingState();  										textEditWidget.Text = currentText;  										textEditWidget.InternalTextEditWidget.CharIndexToInsertBefore = cursorIndex;  									});  								}  							};    							stringEdit.ActualTextEditWidget.InternalTextEditWidget.AllSelected += (sender' e) =>  							{  								// select everything up to the mm (if present)  								InternalTextEditWidget textEditWidget = (InternalTextEditWidget)sender;  								int mMIndex = textEditWidget.Text.IndexOf("mm");  								if (mMIndex != -1)  								{  									textEditWidget.SetSelection(0' mMIndex - 1);  								}  							};    							content.AddChild(stringEdit);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.CHECK_BOX:  						{  							var checkBoxWidget = new CheckBox("")  							{  								Name = settingData.PresentationName + " Checkbox"'  								ToolTipText = settingData.HelpText'  								VAnchor = Agg.UI.VAnchor.ParentBottom'  								TextColor = ActiveTheme.Instance.PrimaryTextColor'  								Checked = sliceSettingValue == "1"  							};  							checkBoxWidget.Click += (sender' e) =>  							{  								// SetValue should only be called when the checkbox is clicked. If this code makes its way into checkstatechanged  								// we end up adding a key back into the dictionary after we call .ClearValue' resulting in the blue override bar reappearing after  								// clearing a useroverride with the red x  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' checkBoxWidget.Checked ? "1" : "0"' persistenceLayer);  							};  							checkBoxWidget.CheckedStateChanged += (s' e) =>  							{  								// Linked settings should be updated in all cases (user clicked checkbox' user clicked clear)  								foreach (var setSettingsData in settingData.SetSettingsOnChange)  								{  									string targetValue;  									if (setSettingsData.TryGetValue(checkBoxWidget.Checked ? "OnValue" : "OffValue"' out targetValue))  									{  										ActiveSliceSettings.Instance.SetValue(setSettingsData["TargetSetting"]' targetValue' persistenceLayer);  									}  								}    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(checkBoxWidget);    							settingsRow.ValueChanged = (text) =>  							{  								checkBoxWidget.Checked = text == "1";  							};  						}  						break;    					case SliceSettingData.DataEditTypes.STRING:  						{  							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: settingData.ShowAsOverride ? 120 : 200' tabIndex: tabIndexForItem++)  							{  								Name = settingData.PresentationName + " Edit"'  							};  							stringEdit.ToolTipText = settingData.HelpText;  							  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((TextEditWidget)sender).Text' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							dataArea.AddChild(stringEdit);    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.MULTI_LINE_TEXT:  						{  							string convertedNewLines = sliceSettingValue.Replace("\\n"' "\n");  							var stringEdit = new MHTextEditWidget(convertedNewLines' pixelWidth: 320' pixelHeight: multiLineEditHeight' multiLine: true' tabIndex: tabIndexForItem++' typeFace: ApplicationController.MonoSpacedTypeFace)  							{  								HAnchor = HAnchor.ParentLeftRight'  							};    							stringEdit.DrawFromHintedCache();    							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((TextEditWidget)sender).Text.Replace("\n"' "\\n")' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							nameArea.HAnchor = HAnchor.AbsolutePosition;  							nameArea.Width = 0;  							dataArea.AddChild(stringEdit);  							dataArea.HAnchor = HAnchor.ParentLeftRight;    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text.Replace("\\n"' "\n");  							};  						}  						break;    					case SliceSettingData.DataEditTypes.COM_PORT:  						{  #if __ANDROID__  							addControl = false;  #endif    							EventHandler localUnregisterEvents = null;    							bool canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect;  							// The COM_PORT control is unique in its approach to the SlicerConfigName. It uses "com_port" settings name to  							// bind to a context that will place it in the SliceSetting view but it binds its values to a machine  							// specific dictionary key that is not exposed in the UI. At runtime we lookup and store to '<machinename>_com_port'  							// ensuring that a single printer can be shared across different devices and we'll select the correct com port in each case  							var selectableOptions = new DropDownList("None".Localize()' maxHeight: 200)  							{  								ToolTipText = settingData.HelpText'  								Margin = new BorderDouble()'  								Name = "Serial Port Dropdown"'  								// Prevent droplist interaction when connected  								Enabled = canChangeComPort'  								TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150)'  								BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150)'  							};    							selectableOptions.Click += (s' e) =>  							{  								AddComMenuItems(settingData' persistenceLayer' settingsRow' selectableOptions);  							};    							AddComMenuItems(settingData' persistenceLayer' settingsRow' selectableOptions);    							dataArea.AddChild(selectableOptions);    							settingsRow.ValueChanged = (text) =>  							{  								// Lookup the machine specific comport value rather than the passed in text value  								selectableOptions.SelectedLabel = ActiveSliceSettings.Instance.Helpers.ComPort();  							};    							// Prevent droplist interaction when connected  							PrinterConnectionAndCommunication.Instance.CommunicationStateChanged.RegisterEvent((s' e) =>  							{  								canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect;  								selectableOptions.Enabled = canChangeComPort;  								selectableOptions.TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150);  								selectableOptions.BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150);  							}' ref localUnregisterEvents);    							// Release event listener on close  							selectableOptions.Closed += (s' e) =>  							{  								localUnregisterEvents?.Invoke(null' null);  							};  						}  						break;    					case SliceSettingData.DataEditTypes.LIST:  						{  							var selectableOptions = new DropDownList("None".Localize()' maxHeight: 200)  							{  								ToolTipText = settingData.HelpText'  								Margin = new BorderDouble()  							};    							foreach (string listItem in settingData.ExtraSettings.Split('''))  							{  								MenuItem newItem = selectableOptions.AddItem(listItem);  								if (newItem.Text == sliceSettingValue)  								{  									selectableOptions.SelectedLabel = sliceSettingValue;  								}    								newItem.Selected += (sender' e) =>  								{  									MenuItem menuItem = ((MenuItem)sender);  									ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' menuItem.Text' persistenceLayer);    									settingsRow.UpdateStyle();  								};  							}    							dataArea.AddChild(selectableOptions);    							settingsRow.ValueChanged = (text) =>  							{  								selectableOptions.SelectedLabel = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.HARDWARE_PRESENT:  						{  							var checkBoxWidget = new CheckBox("")  							{  								Name = settingData.PresentationName + " Checkbox"'  								ToolTipText = settingData.HelpText'  								VAnchor = Agg.UI.VAnchor.ParentBottom'  								TextColor = ActiveTheme.Instance.PrimaryTextColor'  								Checked = sliceSettingValue == "1"  							};    							checkBoxWidget.Click += (sender' e) =>  							{  								bool isChecked = ((CheckBox)sender).Checked;  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' isChecked ? "1" : "0"' persistenceLayer);    								settingsRow.UpdateStyle();  							};    							dataArea.AddChild(checkBoxWidget);    							settingsRow.ValueChanged = (text) =>  							{  								checkBoxWidget.Checked = text == "1";  							};  						}  						break;    					case SliceSettingData.DataEditTypes.VECTOR2:  						{  							string[] xyValueStrings = sliceSettingValue.Split(''');  							if (xyValueStrings.Length != 2)  							{  								xyValueStrings = new string[] { "0"' "0" };  							}    							double currentXValue;  							double.TryParse(xyValueStrings[0]' out currentXValue);    							var xEditWidget = new MHNumberEdit(currentXValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};    							double currentYValue;  							double.TryParse(xyValueStrings[1]' out currentYValue);    							var yEditWidget = new MHNumberEdit(currentYValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Margin = new BorderDouble(20' 0' 0' 0)'  							};    							xEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(xEditWidget);  							dataArea.AddChild(new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  							{  								VAnchor = VAnchor.ParentCenter'  								Margin = new BorderDouble(5' 0)'  							});    							yEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(yEditWidget);  							var yLabel = new GuiWidget()  							{  								VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  								Padding = new BorderDouble(5' 0)'  								HAnchor = HAnchor.ParentLeftRight'  							};  							yLabel.AddChild(new WrappedTextWidget("Y"' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));  							unitsArea.AddChild(yLabel);    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2;  								string[] xyValueStrings2 = text.Split(''');  								if (xyValueStrings2.Length != 2)  								{  									xyValueStrings2 = new string[] { "0"' "0" };  								}    								double.TryParse(xyValueStrings2[0]' out currentValue2);  								xEditWidget.ActuallNumberEdit.Value = currentValue2;    								double.TryParse(xyValueStrings2[1]' out currentValue2);  								yEditWidget.ActuallNumberEdit.Value = currentValue2;  							};    						}  						break;    					case SliceSettingData.DataEditTypes.OFFSET2:  						{  							Vector2 offset = ActiveSliceSettings.Instance.Helpers.ExtruderOffset(extruderIndex);    							var xEditWidget = new MHNumberEdit(offset.x' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  							};    							var yEditWidget = new MHNumberEdit(offset.y' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Margin = new BorderDouble(20' 0' 0' 0)'  							};    							xEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								int extruderIndexLocal = extruderIndex;  								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(xEditWidget);  							dataArea.AddChild(new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  							{  								VAnchor = VAnchor.ParentCenter'  								Margin = new BorderDouble(5' 0)'  							});    							yEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								int extruderIndexLocal = extruderIndex;  								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(yEditWidget);  							var yLabel = new GuiWidget()  							{  								Padding = new BorderDouble(5' 0)'  								HAnchor = HAnchor.ParentLeftRight'  								VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  							};  							yLabel.AddChild(new WrappedTextWidget("Y"' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));  							unitsArea.AddChild(yLabel);    							settingsRow.ValueChanged = (text) =>  							{  								Vector2 offset2 = ActiveSliceSettings.Instance.Helpers.ExtruderOffset(extruderIndex);  								xEditWidget.ActuallNumberEdit.Value = offset2.x;  								yEditWidget.ActuallNumberEdit.Value = offset2.y;  							};  						}  						break;    					default:  						var missingSetting = new TextWidget(String.Format("Missing the setting for '{0}'."' settingData.DataEditType.ToString()))  						{  							TextColor = ActiveTheme.Instance.PrimaryTextColor'  							BackgroundColor = RGBA_Bytes.Red  						};  						dataArea.AddChild(missingSetting);  						break;  				}  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The following statement contains a magic number: if (!PrinterSettings.KnownSettings.Contains(settingData.SlicerConfigName))  			{  				// the setting we think we are adding is not in the known settings it may have been deprecated  				TextWidget settingName = new TextWidget(String.Format("Setting '{0}' not found in known settings"' settingData.SlicerConfigName));  				settingName.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				//settingName.MinimumSize = new Vector2(minSettingNameWidth' settingName.MinimumSize.y);  				nameArea.AddChild(settingName);  				nameArea.BackgroundColor = RGBA_Bytes.Red;  			}  			else  			{  				int intEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int doubleEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int vectorXYEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int multiLineEditHeight = (int)(120 * GuiWidget.DeviceScale + .5);    				if (settingData.DataEditType != SliceSettingData.DataEditTypes.MULTI_LINE_TEXT)  				{  					var nameHolder = new GuiWidget()  					{  						Padding = new BorderDouble(0' 0' 5' 0)'  						VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  						HAnchor = HAnchor.ParentLeftRight'  					};    					nameHolder.AddChild(new WrappedTextWidget(settingData.PresentationName.Localize()' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor));    					nameArea.AddChild(nameHolder);  				}    				switch (settingData.DataEditType)  				{  					case SliceSettingData.DataEditTypes.INT:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();  							int currentValue;  							int.TryParse(sliceSettingValue' out currentValue);    							var intEditWidget = new MHNumberEdit(currentValue' pixelWidth: intEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Name = settingData.PresentationName + " Edit"'  							};  							intEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							content.AddChild(intEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' intEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								intEditWidget.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.DOUBLE:  						{  							double currentValue;  							double.TryParse(sliceSettingValue' out currentValue);    							var doubleEditWidget = new MHNumberEdit(currentValue' allowNegatives: true' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2 = 0;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.POSITIVE_DOUBLE:  						{  							const string multiValuesAreDiffernt = "-";  							FlowLayoutWidget content = new FlowLayoutWidget();    							var doubleEditWidget = new MHNumberEdit(0' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								Name = settingData.PresentationName + " Textbox"'  								SelectAllOnFocus = true  							};    							double currentValue;  							bool ChangesMultipleOtherSettings = settingData.SetSettingsOnChange.Count > 0;  							if (ChangesMultipleOtherSettings)  							{  								bool allTheSame = true;  								string setting = GetActiveValue(settingData.SetSettingsOnChange[0]["TargetSetting"]' layerCascade);  								for (int i = 1; i < settingData.SetSettingsOnChange.Count; i++)  								{  									string nextSetting = GetActiveValue(settingData.SetSettingsOnChange[i]["TargetSetting"]' layerCascade);  									if (setting != nextSetting)  									{  										allTheSame = false;  										break;  									}  								}    								if (allTheSame && setting.EndsWith("mm"))  								{  									double.TryParse(setting.Substring(0' setting.Length - 2)' out currentValue);  									doubleEditWidget.ActuallNumberEdit.Value = currentValue;  								}  								else  								{  									doubleEditWidget.ActuallNumberEdit.InternalNumberEdit.Text = multiValuesAreDiffernt;  								}  							}  							else // just set the setting normally  							{  								double.TryParse(sliceSettingValue' out currentValue);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue;  							}  							doubleEditWidget.ActuallNumberEdit.InternalTextEditWidget.MarkAsStartingState();  							  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								NumberEdit numberEdit = (NumberEdit)sender;  								// If this setting sets other settings' then do that.  								if (ChangesMultipleOtherSettings  									&& numberEdit.Text != multiValuesAreDiffernt)  								{  									{  										ActiveSliceSettings.Instance.SetValue(settingData.SetSettingsOnChange[0]["TargetSetting"]' numberEdit.Value.ToString() + "mm"' persistenceLayer);  									}  								}    								// also always save to the local setting  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' numberEdit.Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							content.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' doubleEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2 = 0;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.OFFSET:  						{  							double currentValue;  							double.TryParse(sliceSettingValue' out currentValue);  							var doubleEditWidget = new MHNumberEdit(currentValue' allowDecimals: true' allowNegatives: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true    							};  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.DOUBLE_OR_PERCENT:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();    							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: doubleEditWidth - 2' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								var textEditWidget = (TextEditWidget)sender;  								string text = textEditWidget.Text.Trim();    								bool isPercent = text.Contains("%");  								if (isPercent)  								{  									text = text.Substring(0' text.IndexOf("%"));  								}  								double result;  								double.TryParse(text' out result);  								text = result.ToString();  								if (isPercent)  								{  									text += "%";  								}  								textEditWidget.Text = text;  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' textEditWidget.Text' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							stringEdit.ActualTextEditWidget.InternalTextEditWidget.AllSelected += (sender' e) =>  							{  								// select everything up to the % (if present)  								InternalTextEditWidget textEditWidget = (InternalTextEditWidget)sender;  								int percentIndex = textEditWidget.Text.IndexOf("%");  								if (percentIndex != -1)  								{  									textEditWidget.SetSelection(0' percentIndex - 1);  								}  							};    							content.AddChild(stringEdit);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.INT_OR_MM:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();    							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: doubleEditWidth - 2' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};    							string startingText = stringEdit.Text;  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								TextEditWidget textEditWidget = (TextEditWidget)sender;  								// only validate when we lose focus  								if (!textEditWidget.ContainsFocus)  								{  									string text = textEditWidget.Text;  									text = text.Trim();  									bool isMm = text.Contains("mm");  									if (isMm)  									{  										text = text.Substring(0' text.IndexOf("mm"));  									}  									double result;  									double.TryParse(text' out result);  									text = result.ToString();  									if (isMm)  									{  										text += "mm";  									}  									else  									{  										result = (int)result;  										text = result.ToString();  									}  									textEditWidget.Text = text;  									startingText = stringEdit.Text;  								}  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' textEditWidget.Text' persistenceLayer);  								settingsRow.UpdateStyle();    								// make sure we are still looking for the final validation before saving.  								if (textEditWidget.ContainsFocus)  								{  									UiThread.RunOnIdle(() =>  									{  										string currentText = textEditWidget.Text;  										int cursorIndex = textEditWidget.InternalTextEditWidget.CharIndexToInsertBefore;  										textEditWidget.Text = startingText;  										textEditWidget.InternalTextEditWidget.MarkAsStartingState();  										textEditWidget.Text = currentText;  										textEditWidget.InternalTextEditWidget.CharIndexToInsertBefore = cursorIndex;  									});  								}  							};    							stringEdit.ActualTextEditWidget.InternalTextEditWidget.AllSelected += (sender' e) =>  							{  								// select everything up to the mm (if present)  								InternalTextEditWidget textEditWidget = (InternalTextEditWidget)sender;  								int mMIndex = textEditWidget.Text.IndexOf("mm");  								if (mMIndex != -1)  								{  									textEditWidget.SetSelection(0' mMIndex - 1);  								}  							};    							content.AddChild(stringEdit);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.CHECK_BOX:  						{  							var checkBoxWidget = new CheckBox("")  							{  								Name = settingData.PresentationName + " Checkbox"'  								ToolTipText = settingData.HelpText'  								VAnchor = Agg.UI.VAnchor.ParentBottom'  								TextColor = ActiveTheme.Instance.PrimaryTextColor'  								Checked = sliceSettingValue == "1"  							};  							checkBoxWidget.Click += (sender' e) =>  							{  								// SetValue should only be called when the checkbox is clicked. If this code makes its way into checkstatechanged  								// we end up adding a key back into the dictionary after we call .ClearValue' resulting in the blue override bar reappearing after  								// clearing a useroverride with the red x  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' checkBoxWidget.Checked ? "1" : "0"' persistenceLayer);  							};  							checkBoxWidget.CheckedStateChanged += (s' e) =>  							{  								// Linked settings should be updated in all cases (user clicked checkbox' user clicked clear)  								foreach (var setSettingsData in settingData.SetSettingsOnChange)  								{  									string targetValue;  									if (setSettingsData.TryGetValue(checkBoxWidget.Checked ? "OnValue" : "OffValue"' out targetValue))  									{  										ActiveSliceSettings.Instance.SetValue(setSettingsData["TargetSetting"]' targetValue' persistenceLayer);  									}  								}    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(checkBoxWidget);    							settingsRow.ValueChanged = (text) =>  							{  								checkBoxWidget.Checked = text == "1";  							};  						}  						break;    					case SliceSettingData.DataEditTypes.STRING:  						{  							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: settingData.ShowAsOverride ? 120 : 200' tabIndex: tabIndexForItem++)  							{  								Name = settingData.PresentationName + " Edit"'  							};  							stringEdit.ToolTipText = settingData.HelpText;  							  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((TextEditWidget)sender).Text' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							dataArea.AddChild(stringEdit);    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.MULTI_LINE_TEXT:  						{  							string convertedNewLines = sliceSettingValue.Replace("\\n"' "\n");  							var stringEdit = new MHTextEditWidget(convertedNewLines' pixelWidth: 320' pixelHeight: multiLineEditHeight' multiLine: true' tabIndex: tabIndexForItem++' typeFace: ApplicationController.MonoSpacedTypeFace)  							{  								HAnchor = HAnchor.ParentLeftRight'  							};    							stringEdit.DrawFromHintedCache();    							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((TextEditWidget)sender).Text.Replace("\n"' "\\n")' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							nameArea.HAnchor = HAnchor.AbsolutePosition;  							nameArea.Width = 0;  							dataArea.AddChild(stringEdit);  							dataArea.HAnchor = HAnchor.ParentLeftRight;    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text.Replace("\\n"' "\n");  							};  						}  						break;    					case SliceSettingData.DataEditTypes.COM_PORT:  						{  #if __ANDROID__  							addControl = false;  #endif    							EventHandler localUnregisterEvents = null;    							bool canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect;  							// The COM_PORT control is unique in its approach to the SlicerConfigName. It uses "com_port" settings name to  							// bind to a context that will place it in the SliceSetting view but it binds its values to a machine  							// specific dictionary key that is not exposed in the UI. At runtime we lookup and store to '<machinename>_com_port'  							// ensuring that a single printer can be shared across different devices and we'll select the correct com port in each case  							var selectableOptions = new DropDownList("None".Localize()' maxHeight: 200)  							{  								ToolTipText = settingData.HelpText'  								Margin = new BorderDouble()'  								Name = "Serial Port Dropdown"'  								// Prevent droplist interaction when connected  								Enabled = canChangeComPort'  								TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150)'  								BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150)'  							};    							selectableOptions.Click += (s' e) =>  							{  								AddComMenuItems(settingData' persistenceLayer' settingsRow' selectableOptions);  							};    							AddComMenuItems(settingData' persistenceLayer' settingsRow' selectableOptions);    							dataArea.AddChild(selectableOptions);    							settingsRow.ValueChanged = (text) =>  							{  								// Lookup the machine specific comport value rather than the passed in text value  								selectableOptions.SelectedLabel = ActiveSliceSettings.Instance.Helpers.ComPort();  							};    							// Prevent droplist interaction when connected  							PrinterConnectionAndCommunication.Instance.CommunicationStateChanged.RegisterEvent((s' e) =>  							{  								canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect;  								selectableOptions.Enabled = canChangeComPort;  								selectableOptions.TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150);  								selectableOptions.BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150);  							}' ref localUnregisterEvents);    							// Release event listener on close  							selectableOptions.Closed += (s' e) =>  							{  								localUnregisterEvents?.Invoke(null' null);  							};  						}  						break;    					case SliceSettingData.DataEditTypes.LIST:  						{  							var selectableOptions = new DropDownList("None".Localize()' maxHeight: 200)  							{  								ToolTipText = settingData.HelpText'  								Margin = new BorderDouble()  							};    							foreach (string listItem in settingData.ExtraSettings.Split('''))  							{  								MenuItem newItem = selectableOptions.AddItem(listItem);  								if (newItem.Text == sliceSettingValue)  								{  									selectableOptions.SelectedLabel = sliceSettingValue;  								}    								newItem.Selected += (sender' e) =>  								{  									MenuItem menuItem = ((MenuItem)sender);  									ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' menuItem.Text' persistenceLayer);    									settingsRow.UpdateStyle();  								};  							}    							dataArea.AddChild(selectableOptions);    							settingsRow.ValueChanged = (text) =>  							{  								selectableOptions.SelectedLabel = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.HARDWARE_PRESENT:  						{  							var checkBoxWidget = new CheckBox("")  							{  								Name = settingData.PresentationName + " Checkbox"'  								ToolTipText = settingData.HelpText'  								VAnchor = Agg.UI.VAnchor.ParentBottom'  								TextColor = ActiveTheme.Instance.PrimaryTextColor'  								Checked = sliceSettingValue == "1"  							};    							checkBoxWidget.Click += (sender' e) =>  							{  								bool isChecked = ((CheckBox)sender).Checked;  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' isChecked ? "1" : "0"' persistenceLayer);    								settingsRow.UpdateStyle();  							};    							dataArea.AddChild(checkBoxWidget);    							settingsRow.ValueChanged = (text) =>  							{  								checkBoxWidget.Checked = text == "1";  							};  						}  						break;    					case SliceSettingData.DataEditTypes.VECTOR2:  						{  							string[] xyValueStrings = sliceSettingValue.Split(''');  							if (xyValueStrings.Length != 2)  							{  								xyValueStrings = new string[] { "0"' "0" };  							}    							double currentXValue;  							double.TryParse(xyValueStrings[0]' out currentXValue);    							var xEditWidget = new MHNumberEdit(currentXValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};    							double currentYValue;  							double.TryParse(xyValueStrings[1]' out currentYValue);    							var yEditWidget = new MHNumberEdit(currentYValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Margin = new BorderDouble(20' 0' 0' 0)'  							};    							xEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(xEditWidget);  							dataArea.AddChild(new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  							{  								VAnchor = VAnchor.ParentCenter'  								Margin = new BorderDouble(5' 0)'  							});    							yEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(yEditWidget);  							var yLabel = new GuiWidget()  							{  								VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  								Padding = new BorderDouble(5' 0)'  								HAnchor = HAnchor.ParentLeftRight'  							};  							yLabel.AddChild(new WrappedTextWidget("Y"' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));  							unitsArea.AddChild(yLabel);    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2;  								string[] xyValueStrings2 = text.Split(''');  								if (xyValueStrings2.Length != 2)  								{  									xyValueStrings2 = new string[] { "0"' "0" };  								}    								double.TryParse(xyValueStrings2[0]' out currentValue2);  								xEditWidget.ActuallNumberEdit.Value = currentValue2;    								double.TryParse(xyValueStrings2[1]' out currentValue2);  								yEditWidget.ActuallNumberEdit.Value = currentValue2;  							};    						}  						break;    					case SliceSettingData.DataEditTypes.OFFSET2:  						{  							Vector2 offset = ActiveSliceSettings.Instance.Helpers.ExtruderOffset(extruderIndex);    							var xEditWidget = new MHNumberEdit(offset.x' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  							};    							var yEditWidget = new MHNumberEdit(offset.y' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Margin = new BorderDouble(20' 0' 0' 0)'  							};    							xEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								int extruderIndexLocal = extruderIndex;  								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(xEditWidget);  							dataArea.AddChild(new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  							{  								VAnchor = VAnchor.ParentCenter'  								Margin = new BorderDouble(5' 0)'  							});    							yEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								int extruderIndexLocal = extruderIndex;  								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(yEditWidget);  							var yLabel = new GuiWidget()  							{  								Padding = new BorderDouble(5' 0)'  								HAnchor = HAnchor.ParentLeftRight'  								VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  							};  							yLabel.AddChild(new WrappedTextWidget("Y"' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));  							unitsArea.AddChild(yLabel);    							settingsRow.ValueChanged = (text) =>  							{  								Vector2 offset2 = ActiveSliceSettings.Instance.Helpers.ExtruderOffset(extruderIndex);  								xEditWidget.ActuallNumberEdit.Value = offset2.x;  								yEditWidget.ActuallNumberEdit.Value = offset2.y;  							};  						}  						break;    					default:  						var missingSetting = new TextWidget(String.Format("Missing the setting for '{0}'."' settingData.DataEditType.ToString()))  						{  							TextColor = ActiveTheme.Instance.PrimaryTextColor'  							BackgroundColor = RGBA_Bytes.Red  						};  						dataArea.AddChild(missingSetting);  						break;  				}  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The following statement contains a magic number: if (!PrinterSettings.KnownSettings.Contains(settingData.SlicerConfigName))  			{  				// the setting we think we are adding is not in the known settings it may have been deprecated  				TextWidget settingName = new TextWidget(String.Format("Setting '{0}' not found in known settings"' settingData.SlicerConfigName));  				settingName.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				//settingName.MinimumSize = new Vector2(minSettingNameWidth' settingName.MinimumSize.y);  				nameArea.AddChild(settingName);  				nameArea.BackgroundColor = RGBA_Bytes.Red;  			}  			else  			{  				int intEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int doubleEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int vectorXYEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int multiLineEditHeight = (int)(120 * GuiWidget.DeviceScale + .5);    				if (settingData.DataEditType != SliceSettingData.DataEditTypes.MULTI_LINE_TEXT)  				{  					var nameHolder = new GuiWidget()  					{  						Padding = new BorderDouble(0' 0' 5' 0)'  						VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  						HAnchor = HAnchor.ParentLeftRight'  					};    					nameHolder.AddChild(new WrappedTextWidget(settingData.PresentationName.Localize()' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor));    					nameArea.AddChild(nameHolder);  				}    				switch (settingData.DataEditType)  				{  					case SliceSettingData.DataEditTypes.INT:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();  							int currentValue;  							int.TryParse(sliceSettingValue' out currentValue);    							var intEditWidget = new MHNumberEdit(currentValue' pixelWidth: intEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Name = settingData.PresentationName + " Edit"'  							};  							intEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							content.AddChild(intEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' intEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								intEditWidget.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.DOUBLE:  						{  							double currentValue;  							double.TryParse(sliceSettingValue' out currentValue);    							var doubleEditWidget = new MHNumberEdit(currentValue' allowNegatives: true' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2 = 0;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.POSITIVE_DOUBLE:  						{  							const string multiValuesAreDiffernt = "-";  							FlowLayoutWidget content = new FlowLayoutWidget();    							var doubleEditWidget = new MHNumberEdit(0' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								Name = settingData.PresentationName + " Textbox"'  								SelectAllOnFocus = true  							};    							double currentValue;  							bool ChangesMultipleOtherSettings = settingData.SetSettingsOnChange.Count > 0;  							if (ChangesMultipleOtherSettings)  							{  								bool allTheSame = true;  								string setting = GetActiveValue(settingData.SetSettingsOnChange[0]["TargetSetting"]' layerCascade);  								for (int i = 1; i < settingData.SetSettingsOnChange.Count; i++)  								{  									string nextSetting = GetActiveValue(settingData.SetSettingsOnChange[i]["TargetSetting"]' layerCascade);  									if (setting != nextSetting)  									{  										allTheSame = false;  										break;  									}  								}    								if (allTheSame && setting.EndsWith("mm"))  								{  									double.TryParse(setting.Substring(0' setting.Length - 2)' out currentValue);  									doubleEditWidget.ActuallNumberEdit.Value = currentValue;  								}  								else  								{  									doubleEditWidget.ActuallNumberEdit.InternalNumberEdit.Text = multiValuesAreDiffernt;  								}  							}  							else // just set the setting normally  							{  								double.TryParse(sliceSettingValue' out currentValue);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue;  							}  							doubleEditWidget.ActuallNumberEdit.InternalTextEditWidget.MarkAsStartingState();  							  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								NumberEdit numberEdit = (NumberEdit)sender;  								// If this setting sets other settings' then do that.  								if (ChangesMultipleOtherSettings  									&& numberEdit.Text != multiValuesAreDiffernt)  								{  									{  										ActiveSliceSettings.Instance.SetValue(settingData.SetSettingsOnChange[0]["TargetSetting"]' numberEdit.Value.ToString() + "mm"' persistenceLayer);  									}  								}    								// also always save to the local setting  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' numberEdit.Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							content.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' doubleEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2 = 0;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.OFFSET:  						{  							double currentValue;  							double.TryParse(sliceSettingValue' out currentValue);  							var doubleEditWidget = new MHNumberEdit(currentValue' allowDecimals: true' allowNegatives: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true    							};  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.DOUBLE_OR_PERCENT:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();    							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: doubleEditWidth - 2' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								var textEditWidget = (TextEditWidget)sender;  								string text = textEditWidget.Text.Trim();    								bool isPercent = text.Contains("%");  								if (isPercent)  								{  									text = text.Substring(0' text.IndexOf("%"));  								}  								double result;  								double.TryParse(text' out result);  								text = result.ToString();  								if (isPercent)  								{  									text += "%";  								}  								textEditWidget.Text = text;  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' textEditWidget.Text' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							stringEdit.ActualTextEditWidget.InternalTextEditWidget.AllSelected += (sender' e) =>  							{  								// select everything up to the % (if present)  								InternalTextEditWidget textEditWidget = (InternalTextEditWidget)sender;  								int percentIndex = textEditWidget.Text.IndexOf("%");  								if (percentIndex != -1)  								{  									textEditWidget.SetSelection(0' percentIndex - 1);  								}  							};    							content.AddChild(stringEdit);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.INT_OR_MM:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();    							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: doubleEditWidth - 2' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};    							string startingText = stringEdit.Text;  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								TextEditWidget textEditWidget = (TextEditWidget)sender;  								// only validate when we lose focus  								if (!textEditWidget.ContainsFocus)  								{  									string text = textEditWidget.Text;  									text = text.Trim();  									bool isMm = text.Contains("mm");  									if (isMm)  									{  										text = text.Substring(0' text.IndexOf("mm"));  									}  									double result;  									double.TryParse(text' out result);  									text = result.ToString();  									if (isMm)  									{  										text += "mm";  									}  									else  									{  										result = (int)result;  										text = result.ToString();  									}  									textEditWidget.Text = text;  									startingText = stringEdit.Text;  								}  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' textEditWidget.Text' persistenceLayer);  								settingsRow.UpdateStyle();    								// make sure we are still looking for the final validation before saving.  								if (textEditWidget.ContainsFocus)  								{  									UiThread.RunOnIdle(() =>  									{  										string currentText = textEditWidget.Text;  										int cursorIndex = textEditWidget.InternalTextEditWidget.CharIndexToInsertBefore;  										textEditWidget.Text = startingText;  										textEditWidget.InternalTextEditWidget.MarkAsStartingState();  										textEditWidget.Text = currentText;  										textEditWidget.InternalTextEditWidget.CharIndexToInsertBefore = cursorIndex;  									});  								}  							};    							stringEdit.ActualTextEditWidget.InternalTextEditWidget.AllSelected += (sender' e) =>  							{  								// select everything up to the mm (if present)  								InternalTextEditWidget textEditWidget = (InternalTextEditWidget)sender;  								int mMIndex = textEditWidget.Text.IndexOf("mm");  								if (mMIndex != -1)  								{  									textEditWidget.SetSelection(0' mMIndex - 1);  								}  							};    							content.AddChild(stringEdit);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.CHECK_BOX:  						{  							var checkBoxWidget = new CheckBox("")  							{  								Name = settingData.PresentationName + " Checkbox"'  								ToolTipText = settingData.HelpText'  								VAnchor = Agg.UI.VAnchor.ParentBottom'  								TextColor = ActiveTheme.Instance.PrimaryTextColor'  								Checked = sliceSettingValue == "1"  							};  							checkBoxWidget.Click += (sender' e) =>  							{  								// SetValue should only be called when the checkbox is clicked. If this code makes its way into checkstatechanged  								// we end up adding a key back into the dictionary after we call .ClearValue' resulting in the blue override bar reappearing after  								// clearing a useroverride with the red x  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' checkBoxWidget.Checked ? "1" : "0"' persistenceLayer);  							};  							checkBoxWidget.CheckedStateChanged += (s' e) =>  							{  								// Linked settings should be updated in all cases (user clicked checkbox' user clicked clear)  								foreach (var setSettingsData in settingData.SetSettingsOnChange)  								{  									string targetValue;  									if (setSettingsData.TryGetValue(checkBoxWidget.Checked ? "OnValue" : "OffValue"' out targetValue))  									{  										ActiveSliceSettings.Instance.SetValue(setSettingsData["TargetSetting"]' targetValue' persistenceLayer);  									}  								}    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(checkBoxWidget);    							settingsRow.ValueChanged = (text) =>  							{  								checkBoxWidget.Checked = text == "1";  							};  						}  						break;    					case SliceSettingData.DataEditTypes.STRING:  						{  							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: settingData.ShowAsOverride ? 120 : 200' tabIndex: tabIndexForItem++)  							{  								Name = settingData.PresentationName + " Edit"'  							};  							stringEdit.ToolTipText = settingData.HelpText;  							  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((TextEditWidget)sender).Text' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							dataArea.AddChild(stringEdit);    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.MULTI_LINE_TEXT:  						{  							string convertedNewLines = sliceSettingValue.Replace("\\n"' "\n");  							var stringEdit = new MHTextEditWidget(convertedNewLines' pixelWidth: 320' pixelHeight: multiLineEditHeight' multiLine: true' tabIndex: tabIndexForItem++' typeFace: ApplicationController.MonoSpacedTypeFace)  							{  								HAnchor = HAnchor.ParentLeftRight'  							};    							stringEdit.DrawFromHintedCache();    							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((TextEditWidget)sender).Text.Replace("\n"' "\\n")' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							nameArea.HAnchor = HAnchor.AbsolutePosition;  							nameArea.Width = 0;  							dataArea.AddChild(stringEdit);  							dataArea.HAnchor = HAnchor.ParentLeftRight;    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text.Replace("\\n"' "\n");  							};  						}  						break;    					case SliceSettingData.DataEditTypes.COM_PORT:  						{  #if __ANDROID__  							addControl = false;  #endif    							EventHandler localUnregisterEvents = null;    							bool canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect;  							// The COM_PORT control is unique in its approach to the SlicerConfigName. It uses "com_port" settings name to  							// bind to a context that will place it in the SliceSetting view but it binds its values to a machine  							// specific dictionary key that is not exposed in the UI. At runtime we lookup and store to '<machinename>_com_port'  							// ensuring that a single printer can be shared across different devices and we'll select the correct com port in each case  							var selectableOptions = new DropDownList("None".Localize()' maxHeight: 200)  							{  								ToolTipText = settingData.HelpText'  								Margin = new BorderDouble()'  								Name = "Serial Port Dropdown"'  								// Prevent droplist interaction when connected  								Enabled = canChangeComPort'  								TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150)'  								BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150)'  							};    							selectableOptions.Click += (s' e) =>  							{  								AddComMenuItems(settingData' persistenceLayer' settingsRow' selectableOptions);  							};    							AddComMenuItems(settingData' persistenceLayer' settingsRow' selectableOptions);    							dataArea.AddChild(selectableOptions);    							settingsRow.ValueChanged = (text) =>  							{  								// Lookup the machine specific comport value rather than the passed in text value  								selectableOptions.SelectedLabel = ActiveSliceSettings.Instance.Helpers.ComPort();  							};    							// Prevent droplist interaction when connected  							PrinterConnectionAndCommunication.Instance.CommunicationStateChanged.RegisterEvent((s' e) =>  							{  								canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect;  								selectableOptions.Enabled = canChangeComPort;  								selectableOptions.TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150);  								selectableOptions.BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150);  							}' ref localUnregisterEvents);    							// Release event listener on close  							selectableOptions.Closed += (s' e) =>  							{  								localUnregisterEvents?.Invoke(null' null);  							};  						}  						break;    					case SliceSettingData.DataEditTypes.LIST:  						{  							var selectableOptions = new DropDownList("None".Localize()' maxHeight: 200)  							{  								ToolTipText = settingData.HelpText'  								Margin = new BorderDouble()  							};    							foreach (string listItem in settingData.ExtraSettings.Split('''))  							{  								MenuItem newItem = selectableOptions.AddItem(listItem);  								if (newItem.Text == sliceSettingValue)  								{  									selectableOptions.SelectedLabel = sliceSettingValue;  								}    								newItem.Selected += (sender' e) =>  								{  									MenuItem menuItem = ((MenuItem)sender);  									ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' menuItem.Text' persistenceLayer);    									settingsRow.UpdateStyle();  								};  							}    							dataArea.AddChild(selectableOptions);    							settingsRow.ValueChanged = (text) =>  							{  								selectableOptions.SelectedLabel = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.HARDWARE_PRESENT:  						{  							var checkBoxWidget = new CheckBox("")  							{  								Name = settingData.PresentationName + " Checkbox"'  								ToolTipText = settingData.HelpText'  								VAnchor = Agg.UI.VAnchor.ParentBottom'  								TextColor = ActiveTheme.Instance.PrimaryTextColor'  								Checked = sliceSettingValue == "1"  							};    							checkBoxWidget.Click += (sender' e) =>  							{  								bool isChecked = ((CheckBox)sender).Checked;  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' isChecked ? "1" : "0"' persistenceLayer);    								settingsRow.UpdateStyle();  							};    							dataArea.AddChild(checkBoxWidget);    							settingsRow.ValueChanged = (text) =>  							{  								checkBoxWidget.Checked = text == "1";  							};  						}  						break;    					case SliceSettingData.DataEditTypes.VECTOR2:  						{  							string[] xyValueStrings = sliceSettingValue.Split(''');  							if (xyValueStrings.Length != 2)  							{  								xyValueStrings = new string[] { "0"' "0" };  							}    							double currentXValue;  							double.TryParse(xyValueStrings[0]' out currentXValue);    							var xEditWidget = new MHNumberEdit(currentXValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};    							double currentYValue;  							double.TryParse(xyValueStrings[1]' out currentYValue);    							var yEditWidget = new MHNumberEdit(currentYValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Margin = new BorderDouble(20' 0' 0' 0)'  							};    							xEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(xEditWidget);  							dataArea.AddChild(new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  							{  								VAnchor = VAnchor.ParentCenter'  								Margin = new BorderDouble(5' 0)'  							});    							yEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(yEditWidget);  							var yLabel = new GuiWidget()  							{  								VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  								Padding = new BorderDouble(5' 0)'  								HAnchor = HAnchor.ParentLeftRight'  							};  							yLabel.AddChild(new WrappedTextWidget("Y"' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));  							unitsArea.AddChild(yLabel);    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2;  								string[] xyValueStrings2 = text.Split(''');  								if (xyValueStrings2.Length != 2)  								{  									xyValueStrings2 = new string[] { "0"' "0" };  								}    								double.TryParse(xyValueStrings2[0]' out currentValue2);  								xEditWidget.ActuallNumberEdit.Value = currentValue2;    								double.TryParse(xyValueStrings2[1]' out currentValue2);  								yEditWidget.ActuallNumberEdit.Value = currentValue2;  							};    						}  						break;    					case SliceSettingData.DataEditTypes.OFFSET2:  						{  							Vector2 offset = ActiveSliceSettings.Instance.Helpers.ExtruderOffset(extruderIndex);    							var xEditWidget = new MHNumberEdit(offset.x' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  							};    							var yEditWidget = new MHNumberEdit(offset.y' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Margin = new BorderDouble(20' 0' 0' 0)'  							};    							xEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								int extruderIndexLocal = extruderIndex;  								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(xEditWidget);  							dataArea.AddChild(new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  							{  								VAnchor = VAnchor.ParentCenter'  								Margin = new BorderDouble(5' 0)'  							});    							yEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								int extruderIndexLocal = extruderIndex;  								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(yEditWidget);  							var yLabel = new GuiWidget()  							{  								Padding = new BorderDouble(5' 0)'  								HAnchor = HAnchor.ParentLeftRight'  								VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  							};  							yLabel.AddChild(new WrappedTextWidget("Y"' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));  							unitsArea.AddChild(yLabel);    							settingsRow.ValueChanged = (text) =>  							{  								Vector2 offset2 = ActiveSliceSettings.Instance.Helpers.ExtruderOffset(extruderIndex);  								xEditWidget.ActuallNumberEdit.Value = offset2.x;  								yEditWidget.ActuallNumberEdit.Value = offset2.y;  							};  						}  						break;    					default:  						var missingSetting = new TextWidget(String.Format("Missing the setting for '{0}'."' settingData.DataEditType.ToString()))  						{  							TextColor = ActiveTheme.Instance.PrimaryTextColor'  							BackgroundColor = RGBA_Bytes.Red  						};  						dataArea.AddChild(missingSetting);  						break;  				}  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The following statement contains a magic number: if (!PrinterSettings.KnownSettings.Contains(settingData.SlicerConfigName))  			{  				// the setting we think we are adding is not in the known settings it may have been deprecated  				TextWidget settingName = new TextWidget(String.Format("Setting '{0}' not found in known settings"' settingData.SlicerConfigName));  				settingName.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				//settingName.MinimumSize = new Vector2(minSettingNameWidth' settingName.MinimumSize.y);  				nameArea.AddChild(settingName);  				nameArea.BackgroundColor = RGBA_Bytes.Red;  			}  			else  			{  				int intEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int doubleEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int vectorXYEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int multiLineEditHeight = (int)(120 * GuiWidget.DeviceScale + .5);    				if (settingData.DataEditType != SliceSettingData.DataEditTypes.MULTI_LINE_TEXT)  				{  					var nameHolder = new GuiWidget()  					{  						Padding = new BorderDouble(0' 0' 5' 0)'  						VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  						HAnchor = HAnchor.ParentLeftRight'  					};    					nameHolder.AddChild(new WrappedTextWidget(settingData.PresentationName.Localize()' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor));    					nameArea.AddChild(nameHolder);  				}    				switch (settingData.DataEditType)  				{  					case SliceSettingData.DataEditTypes.INT:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();  							int currentValue;  							int.TryParse(sliceSettingValue' out currentValue);    							var intEditWidget = new MHNumberEdit(currentValue' pixelWidth: intEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Name = settingData.PresentationName + " Edit"'  							};  							intEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							content.AddChild(intEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' intEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								intEditWidget.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.DOUBLE:  						{  							double currentValue;  							double.TryParse(sliceSettingValue' out currentValue);    							var doubleEditWidget = new MHNumberEdit(currentValue' allowNegatives: true' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2 = 0;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.POSITIVE_DOUBLE:  						{  							const string multiValuesAreDiffernt = "-";  							FlowLayoutWidget content = new FlowLayoutWidget();    							var doubleEditWidget = new MHNumberEdit(0' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								Name = settingData.PresentationName + " Textbox"'  								SelectAllOnFocus = true  							};    							double currentValue;  							bool ChangesMultipleOtherSettings = settingData.SetSettingsOnChange.Count > 0;  							if (ChangesMultipleOtherSettings)  							{  								bool allTheSame = true;  								string setting = GetActiveValue(settingData.SetSettingsOnChange[0]["TargetSetting"]' layerCascade);  								for (int i = 1; i < settingData.SetSettingsOnChange.Count; i++)  								{  									string nextSetting = GetActiveValue(settingData.SetSettingsOnChange[i]["TargetSetting"]' layerCascade);  									if (setting != nextSetting)  									{  										allTheSame = false;  										break;  									}  								}    								if (allTheSame && setting.EndsWith("mm"))  								{  									double.TryParse(setting.Substring(0' setting.Length - 2)' out currentValue);  									doubleEditWidget.ActuallNumberEdit.Value = currentValue;  								}  								else  								{  									doubleEditWidget.ActuallNumberEdit.InternalNumberEdit.Text = multiValuesAreDiffernt;  								}  							}  							else // just set the setting normally  							{  								double.TryParse(sliceSettingValue' out currentValue);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue;  							}  							doubleEditWidget.ActuallNumberEdit.InternalTextEditWidget.MarkAsStartingState();  							  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								NumberEdit numberEdit = (NumberEdit)sender;  								// If this setting sets other settings' then do that.  								if (ChangesMultipleOtherSettings  									&& numberEdit.Text != multiValuesAreDiffernt)  								{  									{  										ActiveSliceSettings.Instance.SetValue(settingData.SetSettingsOnChange[0]["TargetSetting"]' numberEdit.Value.ToString() + "mm"' persistenceLayer);  									}  								}    								// also always save to the local setting  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' numberEdit.Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							content.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' doubleEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2 = 0;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.OFFSET:  						{  							double currentValue;  							double.TryParse(sliceSettingValue' out currentValue);  							var doubleEditWidget = new MHNumberEdit(currentValue' allowDecimals: true' allowNegatives: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true    							};  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.DOUBLE_OR_PERCENT:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();    							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: doubleEditWidth - 2' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								var textEditWidget = (TextEditWidget)sender;  								string text = textEditWidget.Text.Trim();    								bool isPercent = text.Contains("%");  								if (isPercent)  								{  									text = text.Substring(0' text.IndexOf("%"));  								}  								double result;  								double.TryParse(text' out result);  								text = result.ToString();  								if (isPercent)  								{  									text += "%";  								}  								textEditWidget.Text = text;  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' textEditWidget.Text' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							stringEdit.ActualTextEditWidget.InternalTextEditWidget.AllSelected += (sender' e) =>  							{  								// select everything up to the % (if present)  								InternalTextEditWidget textEditWidget = (InternalTextEditWidget)sender;  								int percentIndex = textEditWidget.Text.IndexOf("%");  								if (percentIndex != -1)  								{  									textEditWidget.SetSelection(0' percentIndex - 1);  								}  							};    							content.AddChild(stringEdit);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.INT_OR_MM:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();    							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: doubleEditWidth - 2' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};    							string startingText = stringEdit.Text;  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								TextEditWidget textEditWidget = (TextEditWidget)sender;  								// only validate when we lose focus  								if (!textEditWidget.ContainsFocus)  								{  									string text = textEditWidget.Text;  									text = text.Trim();  									bool isMm = text.Contains("mm");  									if (isMm)  									{  										text = text.Substring(0' text.IndexOf("mm"));  									}  									double result;  									double.TryParse(text' out result);  									text = result.ToString();  									if (isMm)  									{  										text += "mm";  									}  									else  									{  										result = (int)result;  										text = result.ToString();  									}  									textEditWidget.Text = text;  									startingText = stringEdit.Text;  								}  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' textEditWidget.Text' persistenceLayer);  								settingsRow.UpdateStyle();    								// make sure we are still looking for the final validation before saving.  								if (textEditWidget.ContainsFocus)  								{  									UiThread.RunOnIdle(() =>  									{  										string currentText = textEditWidget.Text;  										int cursorIndex = textEditWidget.InternalTextEditWidget.CharIndexToInsertBefore;  										textEditWidget.Text = startingText;  										textEditWidget.InternalTextEditWidget.MarkAsStartingState();  										textEditWidget.Text = currentText;  										textEditWidget.InternalTextEditWidget.CharIndexToInsertBefore = cursorIndex;  									});  								}  							};    							stringEdit.ActualTextEditWidget.InternalTextEditWidget.AllSelected += (sender' e) =>  							{  								// select everything up to the mm (if present)  								InternalTextEditWidget textEditWidget = (InternalTextEditWidget)sender;  								int mMIndex = textEditWidget.Text.IndexOf("mm");  								if (mMIndex != -1)  								{  									textEditWidget.SetSelection(0' mMIndex - 1);  								}  							};    							content.AddChild(stringEdit);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.CHECK_BOX:  						{  							var checkBoxWidget = new CheckBox("")  							{  								Name = settingData.PresentationName + " Checkbox"'  								ToolTipText = settingData.HelpText'  								VAnchor = Agg.UI.VAnchor.ParentBottom'  								TextColor = ActiveTheme.Instance.PrimaryTextColor'  								Checked = sliceSettingValue == "1"  							};  							checkBoxWidget.Click += (sender' e) =>  							{  								// SetValue should only be called when the checkbox is clicked. If this code makes its way into checkstatechanged  								// we end up adding a key back into the dictionary after we call .ClearValue' resulting in the blue override bar reappearing after  								// clearing a useroverride with the red x  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' checkBoxWidget.Checked ? "1" : "0"' persistenceLayer);  							};  							checkBoxWidget.CheckedStateChanged += (s' e) =>  							{  								// Linked settings should be updated in all cases (user clicked checkbox' user clicked clear)  								foreach (var setSettingsData in settingData.SetSettingsOnChange)  								{  									string targetValue;  									if (setSettingsData.TryGetValue(checkBoxWidget.Checked ? "OnValue" : "OffValue"' out targetValue))  									{  										ActiveSliceSettings.Instance.SetValue(setSettingsData["TargetSetting"]' targetValue' persistenceLayer);  									}  								}    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(checkBoxWidget);    							settingsRow.ValueChanged = (text) =>  							{  								checkBoxWidget.Checked = text == "1";  							};  						}  						break;    					case SliceSettingData.DataEditTypes.STRING:  						{  							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: settingData.ShowAsOverride ? 120 : 200' tabIndex: tabIndexForItem++)  							{  								Name = settingData.PresentationName + " Edit"'  							};  							stringEdit.ToolTipText = settingData.HelpText;  							  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((TextEditWidget)sender).Text' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							dataArea.AddChild(stringEdit);    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.MULTI_LINE_TEXT:  						{  							string convertedNewLines = sliceSettingValue.Replace("\\n"' "\n");  							var stringEdit = new MHTextEditWidget(convertedNewLines' pixelWidth: 320' pixelHeight: multiLineEditHeight' multiLine: true' tabIndex: tabIndexForItem++' typeFace: ApplicationController.MonoSpacedTypeFace)  							{  								HAnchor = HAnchor.ParentLeftRight'  							};    							stringEdit.DrawFromHintedCache();    							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((TextEditWidget)sender).Text.Replace("\n"' "\\n")' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							nameArea.HAnchor = HAnchor.AbsolutePosition;  							nameArea.Width = 0;  							dataArea.AddChild(stringEdit);  							dataArea.HAnchor = HAnchor.ParentLeftRight;    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text.Replace("\\n"' "\n");  							};  						}  						break;    					case SliceSettingData.DataEditTypes.COM_PORT:  						{  #if __ANDROID__  							addControl = false;  #endif    							EventHandler localUnregisterEvents = null;    							bool canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect;  							// The COM_PORT control is unique in its approach to the SlicerConfigName. It uses "com_port" settings name to  							// bind to a context that will place it in the SliceSetting view but it binds its values to a machine  							// specific dictionary key that is not exposed in the UI. At runtime we lookup and store to '<machinename>_com_port'  							// ensuring that a single printer can be shared across different devices and we'll select the correct com port in each case  							var selectableOptions = new DropDownList("None".Localize()' maxHeight: 200)  							{  								ToolTipText = settingData.HelpText'  								Margin = new BorderDouble()'  								Name = "Serial Port Dropdown"'  								// Prevent droplist interaction when connected  								Enabled = canChangeComPort'  								TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150)'  								BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150)'  							};    							selectableOptions.Click += (s' e) =>  							{  								AddComMenuItems(settingData' persistenceLayer' settingsRow' selectableOptions);  							};    							AddComMenuItems(settingData' persistenceLayer' settingsRow' selectableOptions);    							dataArea.AddChild(selectableOptions);    							settingsRow.ValueChanged = (text) =>  							{  								// Lookup the machine specific comport value rather than the passed in text value  								selectableOptions.SelectedLabel = ActiveSliceSettings.Instance.Helpers.ComPort();  							};    							// Prevent droplist interaction when connected  							PrinterConnectionAndCommunication.Instance.CommunicationStateChanged.RegisterEvent((s' e) =>  							{  								canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect;  								selectableOptions.Enabled = canChangeComPort;  								selectableOptions.TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150);  								selectableOptions.BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150);  							}' ref localUnregisterEvents);    							// Release event listener on close  							selectableOptions.Closed += (s' e) =>  							{  								localUnregisterEvents?.Invoke(null' null);  							};  						}  						break;    					case SliceSettingData.DataEditTypes.LIST:  						{  							var selectableOptions = new DropDownList("None".Localize()' maxHeight: 200)  							{  								ToolTipText = settingData.HelpText'  								Margin = new BorderDouble()  							};    							foreach (string listItem in settingData.ExtraSettings.Split('''))  							{  								MenuItem newItem = selectableOptions.AddItem(listItem);  								if (newItem.Text == sliceSettingValue)  								{  									selectableOptions.SelectedLabel = sliceSettingValue;  								}    								newItem.Selected += (sender' e) =>  								{  									MenuItem menuItem = ((MenuItem)sender);  									ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' menuItem.Text' persistenceLayer);    									settingsRow.UpdateStyle();  								};  							}    							dataArea.AddChild(selectableOptions);    							settingsRow.ValueChanged = (text) =>  							{  								selectableOptions.SelectedLabel = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.HARDWARE_PRESENT:  						{  							var checkBoxWidget = new CheckBox("")  							{  								Name = settingData.PresentationName + " Checkbox"'  								ToolTipText = settingData.HelpText'  								VAnchor = Agg.UI.VAnchor.ParentBottom'  								TextColor = ActiveTheme.Instance.PrimaryTextColor'  								Checked = sliceSettingValue == "1"  							};    							checkBoxWidget.Click += (sender' e) =>  							{  								bool isChecked = ((CheckBox)sender).Checked;  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' isChecked ? "1" : "0"' persistenceLayer);    								settingsRow.UpdateStyle();  							};    							dataArea.AddChild(checkBoxWidget);    							settingsRow.ValueChanged = (text) =>  							{  								checkBoxWidget.Checked = text == "1";  							};  						}  						break;    					case SliceSettingData.DataEditTypes.VECTOR2:  						{  							string[] xyValueStrings = sliceSettingValue.Split(''');  							if (xyValueStrings.Length != 2)  							{  								xyValueStrings = new string[] { "0"' "0" };  							}    							double currentXValue;  							double.TryParse(xyValueStrings[0]' out currentXValue);    							var xEditWidget = new MHNumberEdit(currentXValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};    							double currentYValue;  							double.TryParse(xyValueStrings[1]' out currentYValue);    							var yEditWidget = new MHNumberEdit(currentYValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Margin = new BorderDouble(20' 0' 0' 0)'  							};    							xEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(xEditWidget);  							dataArea.AddChild(new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  							{  								VAnchor = VAnchor.ParentCenter'  								Margin = new BorderDouble(5' 0)'  							});    							yEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(yEditWidget);  							var yLabel = new GuiWidget()  							{  								VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  								Padding = new BorderDouble(5' 0)'  								HAnchor = HAnchor.ParentLeftRight'  							};  							yLabel.AddChild(new WrappedTextWidget("Y"' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));  							unitsArea.AddChild(yLabel);    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2;  								string[] xyValueStrings2 = text.Split(''');  								if (xyValueStrings2.Length != 2)  								{  									xyValueStrings2 = new string[] { "0"' "0" };  								}    								double.TryParse(xyValueStrings2[0]' out currentValue2);  								xEditWidget.ActuallNumberEdit.Value = currentValue2;    								double.TryParse(xyValueStrings2[1]' out currentValue2);  								yEditWidget.ActuallNumberEdit.Value = currentValue2;  							};    						}  						break;    					case SliceSettingData.DataEditTypes.OFFSET2:  						{  							Vector2 offset = ActiveSliceSettings.Instance.Helpers.ExtruderOffset(extruderIndex);    							var xEditWidget = new MHNumberEdit(offset.x' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  							};    							var yEditWidget = new MHNumberEdit(offset.y' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Margin = new BorderDouble(20' 0' 0' 0)'  							};    							xEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								int extruderIndexLocal = extruderIndex;  								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(xEditWidget);  							dataArea.AddChild(new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  							{  								VAnchor = VAnchor.ParentCenter'  								Margin = new BorderDouble(5' 0)'  							});    							yEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								int extruderIndexLocal = extruderIndex;  								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(yEditWidget);  							var yLabel = new GuiWidget()  							{  								Padding = new BorderDouble(5' 0)'  								HAnchor = HAnchor.ParentLeftRight'  								VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  							};  							yLabel.AddChild(new WrappedTextWidget("Y"' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));  							unitsArea.AddChild(yLabel);    							settingsRow.ValueChanged = (text) =>  							{  								Vector2 offset2 = ActiveSliceSettings.Instance.Helpers.ExtruderOffset(extruderIndex);  								xEditWidget.ActuallNumberEdit.Value = offset2.x;  								yEditWidget.ActuallNumberEdit.Value = offset2.y;  							};  						}  						break;    					default:  						var missingSetting = new TextWidget(String.Format("Missing the setting for '{0}'."' settingData.DataEditType.ToString()))  						{  							TextColor = ActiveTheme.Instance.PrimaryTextColor'  							BackgroundColor = RGBA_Bytes.Red  						};  						dataArea.AddChild(missingSetting);  						break;  				}  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The following statement contains a magic number: if (!PrinterSettings.KnownSettings.Contains(settingData.SlicerConfigName))  			{  				// the setting we think we are adding is not in the known settings it may have been deprecated  				TextWidget settingName = new TextWidget(String.Format("Setting '{0}' not found in known settings"' settingData.SlicerConfigName));  				settingName.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				//settingName.MinimumSize = new Vector2(minSettingNameWidth' settingName.MinimumSize.y);  				nameArea.AddChild(settingName);  				nameArea.BackgroundColor = RGBA_Bytes.Red;  			}  			else  			{  				int intEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int doubleEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int vectorXYEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int multiLineEditHeight = (int)(120 * GuiWidget.DeviceScale + .5);    				if (settingData.DataEditType != SliceSettingData.DataEditTypes.MULTI_LINE_TEXT)  				{  					var nameHolder = new GuiWidget()  					{  						Padding = new BorderDouble(0' 0' 5' 0)'  						VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  						HAnchor = HAnchor.ParentLeftRight'  					};    					nameHolder.AddChild(new WrappedTextWidget(settingData.PresentationName.Localize()' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor));    					nameArea.AddChild(nameHolder);  				}    				switch (settingData.DataEditType)  				{  					case SliceSettingData.DataEditTypes.INT:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();  							int currentValue;  							int.TryParse(sliceSettingValue' out currentValue);    							var intEditWidget = new MHNumberEdit(currentValue' pixelWidth: intEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Name = settingData.PresentationName + " Edit"'  							};  							intEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							content.AddChild(intEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' intEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								intEditWidget.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.DOUBLE:  						{  							double currentValue;  							double.TryParse(sliceSettingValue' out currentValue);    							var doubleEditWidget = new MHNumberEdit(currentValue' allowNegatives: true' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2 = 0;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.POSITIVE_DOUBLE:  						{  							const string multiValuesAreDiffernt = "-";  							FlowLayoutWidget content = new FlowLayoutWidget();    							var doubleEditWidget = new MHNumberEdit(0' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								Name = settingData.PresentationName + " Textbox"'  								SelectAllOnFocus = true  							};    							double currentValue;  							bool ChangesMultipleOtherSettings = settingData.SetSettingsOnChange.Count > 0;  							if (ChangesMultipleOtherSettings)  							{  								bool allTheSame = true;  								string setting = GetActiveValue(settingData.SetSettingsOnChange[0]["TargetSetting"]' layerCascade);  								for (int i = 1; i < settingData.SetSettingsOnChange.Count; i++)  								{  									string nextSetting = GetActiveValue(settingData.SetSettingsOnChange[i]["TargetSetting"]' layerCascade);  									if (setting != nextSetting)  									{  										allTheSame = false;  										break;  									}  								}    								if (allTheSame && setting.EndsWith("mm"))  								{  									double.TryParse(setting.Substring(0' setting.Length - 2)' out currentValue);  									doubleEditWidget.ActuallNumberEdit.Value = currentValue;  								}  								else  								{  									doubleEditWidget.ActuallNumberEdit.InternalNumberEdit.Text = multiValuesAreDiffernt;  								}  							}  							else // just set the setting normally  							{  								double.TryParse(sliceSettingValue' out currentValue);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue;  							}  							doubleEditWidget.ActuallNumberEdit.InternalTextEditWidget.MarkAsStartingState();  							  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								NumberEdit numberEdit = (NumberEdit)sender;  								// If this setting sets other settings' then do that.  								if (ChangesMultipleOtherSettings  									&& numberEdit.Text != multiValuesAreDiffernt)  								{  									{  										ActiveSliceSettings.Instance.SetValue(settingData.SetSettingsOnChange[0]["TargetSetting"]' numberEdit.Value.ToString() + "mm"' persistenceLayer);  									}  								}    								// also always save to the local setting  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' numberEdit.Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							content.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' doubleEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2 = 0;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.OFFSET:  						{  							double currentValue;  							double.TryParse(sliceSettingValue' out currentValue);  							var doubleEditWidget = new MHNumberEdit(currentValue' allowDecimals: true' allowNegatives: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true    							};  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.DOUBLE_OR_PERCENT:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();    							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: doubleEditWidth - 2' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								var textEditWidget = (TextEditWidget)sender;  								string text = textEditWidget.Text.Trim();    								bool isPercent = text.Contains("%");  								if (isPercent)  								{  									text = text.Substring(0' text.IndexOf("%"));  								}  								double result;  								double.TryParse(text' out result);  								text = result.ToString();  								if (isPercent)  								{  									text += "%";  								}  								textEditWidget.Text = text;  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' textEditWidget.Text' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							stringEdit.ActualTextEditWidget.InternalTextEditWidget.AllSelected += (sender' e) =>  							{  								// select everything up to the % (if present)  								InternalTextEditWidget textEditWidget = (InternalTextEditWidget)sender;  								int percentIndex = textEditWidget.Text.IndexOf("%");  								if (percentIndex != -1)  								{  									textEditWidget.SetSelection(0' percentIndex - 1);  								}  							};    							content.AddChild(stringEdit);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.INT_OR_MM:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();    							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: doubleEditWidth - 2' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};    							string startingText = stringEdit.Text;  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								TextEditWidget textEditWidget = (TextEditWidget)sender;  								// only validate when we lose focus  								if (!textEditWidget.ContainsFocus)  								{  									string text = textEditWidget.Text;  									text = text.Trim();  									bool isMm = text.Contains("mm");  									if (isMm)  									{  										text = text.Substring(0' text.IndexOf("mm"));  									}  									double result;  									double.TryParse(text' out result);  									text = result.ToString();  									if (isMm)  									{  										text += "mm";  									}  									else  									{  										result = (int)result;  										text = result.ToString();  									}  									textEditWidget.Text = text;  									startingText = stringEdit.Text;  								}  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' textEditWidget.Text' persistenceLayer);  								settingsRow.UpdateStyle();    								// make sure we are still looking for the final validation before saving.  								if (textEditWidget.ContainsFocus)  								{  									UiThread.RunOnIdle(() =>  									{  										string currentText = textEditWidget.Text;  										int cursorIndex = textEditWidget.InternalTextEditWidget.CharIndexToInsertBefore;  										textEditWidget.Text = startingText;  										textEditWidget.InternalTextEditWidget.MarkAsStartingState();  										textEditWidget.Text = currentText;  										textEditWidget.InternalTextEditWidget.CharIndexToInsertBefore = cursorIndex;  									});  								}  							};    							stringEdit.ActualTextEditWidget.InternalTextEditWidget.AllSelected += (sender' e) =>  							{  								// select everything up to the mm (if present)  								InternalTextEditWidget textEditWidget = (InternalTextEditWidget)sender;  								int mMIndex = textEditWidget.Text.IndexOf("mm");  								if (mMIndex != -1)  								{  									textEditWidget.SetSelection(0' mMIndex - 1);  								}  							};    							content.AddChild(stringEdit);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.CHECK_BOX:  						{  							var checkBoxWidget = new CheckBox("")  							{  								Name = settingData.PresentationName + " Checkbox"'  								ToolTipText = settingData.HelpText'  								VAnchor = Agg.UI.VAnchor.ParentBottom'  								TextColor = ActiveTheme.Instance.PrimaryTextColor'  								Checked = sliceSettingValue == "1"  							};  							checkBoxWidget.Click += (sender' e) =>  							{  								// SetValue should only be called when the checkbox is clicked. If this code makes its way into checkstatechanged  								// we end up adding a key back into the dictionary after we call .ClearValue' resulting in the blue override bar reappearing after  								// clearing a useroverride with the red x  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' checkBoxWidget.Checked ? "1" : "0"' persistenceLayer);  							};  							checkBoxWidget.CheckedStateChanged += (s' e) =>  							{  								// Linked settings should be updated in all cases (user clicked checkbox' user clicked clear)  								foreach (var setSettingsData in settingData.SetSettingsOnChange)  								{  									string targetValue;  									if (setSettingsData.TryGetValue(checkBoxWidget.Checked ? "OnValue" : "OffValue"' out targetValue))  									{  										ActiveSliceSettings.Instance.SetValue(setSettingsData["TargetSetting"]' targetValue' persistenceLayer);  									}  								}    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(checkBoxWidget);    							settingsRow.ValueChanged = (text) =>  							{  								checkBoxWidget.Checked = text == "1";  							};  						}  						break;    					case SliceSettingData.DataEditTypes.STRING:  						{  							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: settingData.ShowAsOverride ? 120 : 200' tabIndex: tabIndexForItem++)  							{  								Name = settingData.PresentationName + " Edit"'  							};  							stringEdit.ToolTipText = settingData.HelpText;  							  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((TextEditWidget)sender).Text' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							dataArea.AddChild(stringEdit);    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.MULTI_LINE_TEXT:  						{  							string convertedNewLines = sliceSettingValue.Replace("\\n"' "\n");  							var stringEdit = new MHTextEditWidget(convertedNewLines' pixelWidth: 320' pixelHeight: multiLineEditHeight' multiLine: true' tabIndex: tabIndexForItem++' typeFace: ApplicationController.MonoSpacedTypeFace)  							{  								HAnchor = HAnchor.ParentLeftRight'  							};    							stringEdit.DrawFromHintedCache();    							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((TextEditWidget)sender).Text.Replace("\n"' "\\n")' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							nameArea.HAnchor = HAnchor.AbsolutePosition;  							nameArea.Width = 0;  							dataArea.AddChild(stringEdit);  							dataArea.HAnchor = HAnchor.ParentLeftRight;    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text.Replace("\\n"' "\n");  							};  						}  						break;    					case SliceSettingData.DataEditTypes.COM_PORT:  						{  #if __ANDROID__  							addControl = false;  #endif    							EventHandler localUnregisterEvents = null;    							bool canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect;  							// The COM_PORT control is unique in its approach to the SlicerConfigName. It uses "com_port" settings name to  							// bind to a context that will place it in the SliceSetting view but it binds its values to a machine  							// specific dictionary key that is not exposed in the UI. At runtime we lookup and store to '<machinename>_com_port'  							// ensuring that a single printer can be shared across different devices and we'll select the correct com port in each case  							var selectableOptions = new DropDownList("None".Localize()' maxHeight: 200)  							{  								ToolTipText = settingData.HelpText'  								Margin = new BorderDouble()'  								Name = "Serial Port Dropdown"'  								// Prevent droplist interaction when connected  								Enabled = canChangeComPort'  								TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150)'  								BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150)'  							};    							selectableOptions.Click += (s' e) =>  							{  								AddComMenuItems(settingData' persistenceLayer' settingsRow' selectableOptions);  							};    							AddComMenuItems(settingData' persistenceLayer' settingsRow' selectableOptions);    							dataArea.AddChild(selectableOptions);    							settingsRow.ValueChanged = (text) =>  							{  								// Lookup the machine specific comport value rather than the passed in text value  								selectableOptions.SelectedLabel = ActiveSliceSettings.Instance.Helpers.ComPort();  							};    							// Prevent droplist interaction when connected  							PrinterConnectionAndCommunication.Instance.CommunicationStateChanged.RegisterEvent((s' e) =>  							{  								canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect;  								selectableOptions.Enabled = canChangeComPort;  								selectableOptions.TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150);  								selectableOptions.BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150);  							}' ref localUnregisterEvents);    							// Release event listener on close  							selectableOptions.Closed += (s' e) =>  							{  								localUnregisterEvents?.Invoke(null' null);  							};  						}  						break;    					case SliceSettingData.DataEditTypes.LIST:  						{  							var selectableOptions = new DropDownList("None".Localize()' maxHeight: 200)  							{  								ToolTipText = settingData.HelpText'  								Margin = new BorderDouble()  							};    							foreach (string listItem in settingData.ExtraSettings.Split('''))  							{  								MenuItem newItem = selectableOptions.AddItem(listItem);  								if (newItem.Text == sliceSettingValue)  								{  									selectableOptions.SelectedLabel = sliceSettingValue;  								}    								newItem.Selected += (sender' e) =>  								{  									MenuItem menuItem = ((MenuItem)sender);  									ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' menuItem.Text' persistenceLayer);    									settingsRow.UpdateStyle();  								};  							}    							dataArea.AddChild(selectableOptions);    							settingsRow.ValueChanged = (text) =>  							{  								selectableOptions.SelectedLabel = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.HARDWARE_PRESENT:  						{  							var checkBoxWidget = new CheckBox("")  							{  								Name = settingData.PresentationName + " Checkbox"'  								ToolTipText = settingData.HelpText'  								VAnchor = Agg.UI.VAnchor.ParentBottom'  								TextColor = ActiveTheme.Instance.PrimaryTextColor'  								Checked = sliceSettingValue == "1"  							};    							checkBoxWidget.Click += (sender' e) =>  							{  								bool isChecked = ((CheckBox)sender).Checked;  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' isChecked ? "1" : "0"' persistenceLayer);    								settingsRow.UpdateStyle();  							};    							dataArea.AddChild(checkBoxWidget);    							settingsRow.ValueChanged = (text) =>  							{  								checkBoxWidget.Checked = text == "1";  							};  						}  						break;    					case SliceSettingData.DataEditTypes.VECTOR2:  						{  							string[] xyValueStrings = sliceSettingValue.Split(''');  							if (xyValueStrings.Length != 2)  							{  								xyValueStrings = new string[] { "0"' "0" };  							}    							double currentXValue;  							double.TryParse(xyValueStrings[0]' out currentXValue);    							var xEditWidget = new MHNumberEdit(currentXValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};    							double currentYValue;  							double.TryParse(xyValueStrings[1]' out currentYValue);    							var yEditWidget = new MHNumberEdit(currentYValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Margin = new BorderDouble(20' 0' 0' 0)'  							};    							xEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(xEditWidget);  							dataArea.AddChild(new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  							{  								VAnchor = VAnchor.ParentCenter'  								Margin = new BorderDouble(5' 0)'  							});    							yEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(yEditWidget);  							var yLabel = new GuiWidget()  							{  								VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  								Padding = new BorderDouble(5' 0)'  								HAnchor = HAnchor.ParentLeftRight'  							};  							yLabel.AddChild(new WrappedTextWidget("Y"' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));  							unitsArea.AddChild(yLabel);    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2;  								string[] xyValueStrings2 = text.Split(''');  								if (xyValueStrings2.Length != 2)  								{  									xyValueStrings2 = new string[] { "0"' "0" };  								}    								double.TryParse(xyValueStrings2[0]' out currentValue2);  								xEditWidget.ActuallNumberEdit.Value = currentValue2;    								double.TryParse(xyValueStrings2[1]' out currentValue2);  								yEditWidget.ActuallNumberEdit.Value = currentValue2;  							};    						}  						break;    					case SliceSettingData.DataEditTypes.OFFSET2:  						{  							Vector2 offset = ActiveSliceSettings.Instance.Helpers.ExtruderOffset(extruderIndex);    							var xEditWidget = new MHNumberEdit(offset.x' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  							};    							var yEditWidget = new MHNumberEdit(offset.y' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Margin = new BorderDouble(20' 0' 0' 0)'  							};    							xEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								int extruderIndexLocal = extruderIndex;  								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(xEditWidget);  							dataArea.AddChild(new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  							{  								VAnchor = VAnchor.ParentCenter'  								Margin = new BorderDouble(5' 0)'  							});    							yEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								int extruderIndexLocal = extruderIndex;  								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(yEditWidget);  							var yLabel = new GuiWidget()  							{  								Padding = new BorderDouble(5' 0)'  								HAnchor = HAnchor.ParentLeftRight'  								VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  							};  							yLabel.AddChild(new WrappedTextWidget("Y"' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));  							unitsArea.AddChild(yLabel);    							settingsRow.ValueChanged = (text) =>  							{  								Vector2 offset2 = ActiveSliceSettings.Instance.Helpers.ExtruderOffset(extruderIndex);  								xEditWidget.ActuallNumberEdit.Value = offset2.x;  								yEditWidget.ActuallNumberEdit.Value = offset2.y;  							};  						}  						break;    					default:  						var missingSetting = new TextWidget(String.Format("Missing the setting for '{0}'."' settingData.DataEditType.ToString()))  						{  							TextColor = ActiveTheme.Instance.PrimaryTextColor'  							BackgroundColor = RGBA_Bytes.Red  						};  						dataArea.AddChild(missingSetting);  						break;  				}  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The following statement contains a magic number: if (!PrinterSettings.KnownSettings.Contains(settingData.SlicerConfigName))  			{  				// the setting we think we are adding is not in the known settings it may have been deprecated  				TextWidget settingName = new TextWidget(String.Format("Setting '{0}' not found in known settings"' settingData.SlicerConfigName));  				settingName.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				//settingName.MinimumSize = new Vector2(minSettingNameWidth' settingName.MinimumSize.y);  				nameArea.AddChild(settingName);  				nameArea.BackgroundColor = RGBA_Bytes.Red;  			}  			else  			{  				int intEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int doubleEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int vectorXYEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int multiLineEditHeight = (int)(120 * GuiWidget.DeviceScale + .5);    				if (settingData.DataEditType != SliceSettingData.DataEditTypes.MULTI_LINE_TEXT)  				{  					var nameHolder = new GuiWidget()  					{  						Padding = new BorderDouble(0' 0' 5' 0)'  						VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  						HAnchor = HAnchor.ParentLeftRight'  					};    					nameHolder.AddChild(new WrappedTextWidget(settingData.PresentationName.Localize()' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor));    					nameArea.AddChild(nameHolder);  				}    				switch (settingData.DataEditType)  				{  					case SliceSettingData.DataEditTypes.INT:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();  							int currentValue;  							int.TryParse(sliceSettingValue' out currentValue);    							var intEditWidget = new MHNumberEdit(currentValue' pixelWidth: intEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Name = settingData.PresentationName + " Edit"'  							};  							intEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							content.AddChild(intEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' intEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								intEditWidget.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.DOUBLE:  						{  							double currentValue;  							double.TryParse(sliceSettingValue' out currentValue);    							var doubleEditWidget = new MHNumberEdit(currentValue' allowNegatives: true' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2 = 0;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.POSITIVE_DOUBLE:  						{  							const string multiValuesAreDiffernt = "-";  							FlowLayoutWidget content = new FlowLayoutWidget();    							var doubleEditWidget = new MHNumberEdit(0' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								Name = settingData.PresentationName + " Textbox"'  								SelectAllOnFocus = true  							};    							double currentValue;  							bool ChangesMultipleOtherSettings = settingData.SetSettingsOnChange.Count > 0;  							if (ChangesMultipleOtherSettings)  							{  								bool allTheSame = true;  								string setting = GetActiveValue(settingData.SetSettingsOnChange[0]["TargetSetting"]' layerCascade);  								for (int i = 1; i < settingData.SetSettingsOnChange.Count; i++)  								{  									string nextSetting = GetActiveValue(settingData.SetSettingsOnChange[i]["TargetSetting"]' layerCascade);  									if (setting != nextSetting)  									{  										allTheSame = false;  										break;  									}  								}    								if (allTheSame && setting.EndsWith("mm"))  								{  									double.TryParse(setting.Substring(0' setting.Length - 2)' out currentValue);  									doubleEditWidget.ActuallNumberEdit.Value = currentValue;  								}  								else  								{  									doubleEditWidget.ActuallNumberEdit.InternalNumberEdit.Text = multiValuesAreDiffernt;  								}  							}  							else // just set the setting normally  							{  								double.TryParse(sliceSettingValue' out currentValue);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue;  							}  							doubleEditWidget.ActuallNumberEdit.InternalTextEditWidget.MarkAsStartingState();  							  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								NumberEdit numberEdit = (NumberEdit)sender;  								// If this setting sets other settings' then do that.  								if (ChangesMultipleOtherSettings  									&& numberEdit.Text != multiValuesAreDiffernt)  								{  									{  										ActiveSliceSettings.Instance.SetValue(settingData.SetSettingsOnChange[0]["TargetSetting"]' numberEdit.Value.ToString() + "mm"' persistenceLayer);  									}  								}    								// also always save to the local setting  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' numberEdit.Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							content.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' doubleEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2 = 0;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.OFFSET:  						{  							double currentValue;  							double.TryParse(sliceSettingValue' out currentValue);  							var doubleEditWidget = new MHNumberEdit(currentValue' allowDecimals: true' allowNegatives: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true    							};  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.DOUBLE_OR_PERCENT:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();    							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: doubleEditWidth - 2' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								var textEditWidget = (TextEditWidget)sender;  								string text = textEditWidget.Text.Trim();    								bool isPercent = text.Contains("%");  								if (isPercent)  								{  									text = text.Substring(0' text.IndexOf("%"));  								}  								double result;  								double.TryParse(text' out result);  								text = result.ToString();  								if (isPercent)  								{  									text += "%";  								}  								textEditWidget.Text = text;  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' textEditWidget.Text' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							stringEdit.ActualTextEditWidget.InternalTextEditWidget.AllSelected += (sender' e) =>  							{  								// select everything up to the % (if present)  								InternalTextEditWidget textEditWidget = (InternalTextEditWidget)sender;  								int percentIndex = textEditWidget.Text.IndexOf("%");  								if (percentIndex != -1)  								{  									textEditWidget.SetSelection(0' percentIndex - 1);  								}  							};    							content.AddChild(stringEdit);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.INT_OR_MM:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();    							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: doubleEditWidth - 2' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};    							string startingText = stringEdit.Text;  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								TextEditWidget textEditWidget = (TextEditWidget)sender;  								// only validate when we lose focus  								if (!textEditWidget.ContainsFocus)  								{  									string text = textEditWidget.Text;  									text = text.Trim();  									bool isMm = text.Contains("mm");  									if (isMm)  									{  										text = text.Substring(0' text.IndexOf("mm"));  									}  									double result;  									double.TryParse(text' out result);  									text = result.ToString();  									if (isMm)  									{  										text += "mm";  									}  									else  									{  										result = (int)result;  										text = result.ToString();  									}  									textEditWidget.Text = text;  									startingText = stringEdit.Text;  								}  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' textEditWidget.Text' persistenceLayer);  								settingsRow.UpdateStyle();    								// make sure we are still looking for the final validation before saving.  								if (textEditWidget.ContainsFocus)  								{  									UiThread.RunOnIdle(() =>  									{  										string currentText = textEditWidget.Text;  										int cursorIndex = textEditWidget.InternalTextEditWidget.CharIndexToInsertBefore;  										textEditWidget.Text = startingText;  										textEditWidget.InternalTextEditWidget.MarkAsStartingState();  										textEditWidget.Text = currentText;  										textEditWidget.InternalTextEditWidget.CharIndexToInsertBefore = cursorIndex;  									});  								}  							};    							stringEdit.ActualTextEditWidget.InternalTextEditWidget.AllSelected += (sender' e) =>  							{  								// select everything up to the mm (if present)  								InternalTextEditWidget textEditWidget = (InternalTextEditWidget)sender;  								int mMIndex = textEditWidget.Text.IndexOf("mm");  								if (mMIndex != -1)  								{  									textEditWidget.SetSelection(0' mMIndex - 1);  								}  							};    							content.AddChild(stringEdit);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.CHECK_BOX:  						{  							var checkBoxWidget = new CheckBox("")  							{  								Name = settingData.PresentationName + " Checkbox"'  								ToolTipText = settingData.HelpText'  								VAnchor = Agg.UI.VAnchor.ParentBottom'  								TextColor = ActiveTheme.Instance.PrimaryTextColor'  								Checked = sliceSettingValue == "1"  							};  							checkBoxWidget.Click += (sender' e) =>  							{  								// SetValue should only be called when the checkbox is clicked. If this code makes its way into checkstatechanged  								// we end up adding a key back into the dictionary after we call .ClearValue' resulting in the blue override bar reappearing after  								// clearing a useroverride with the red x  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' checkBoxWidget.Checked ? "1" : "0"' persistenceLayer);  							};  							checkBoxWidget.CheckedStateChanged += (s' e) =>  							{  								// Linked settings should be updated in all cases (user clicked checkbox' user clicked clear)  								foreach (var setSettingsData in settingData.SetSettingsOnChange)  								{  									string targetValue;  									if (setSettingsData.TryGetValue(checkBoxWidget.Checked ? "OnValue" : "OffValue"' out targetValue))  									{  										ActiveSliceSettings.Instance.SetValue(setSettingsData["TargetSetting"]' targetValue' persistenceLayer);  									}  								}    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(checkBoxWidget);    							settingsRow.ValueChanged = (text) =>  							{  								checkBoxWidget.Checked = text == "1";  							};  						}  						break;    					case SliceSettingData.DataEditTypes.STRING:  						{  							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: settingData.ShowAsOverride ? 120 : 200' tabIndex: tabIndexForItem++)  							{  								Name = settingData.PresentationName + " Edit"'  							};  							stringEdit.ToolTipText = settingData.HelpText;  							  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((TextEditWidget)sender).Text' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							dataArea.AddChild(stringEdit);    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.MULTI_LINE_TEXT:  						{  							string convertedNewLines = sliceSettingValue.Replace("\\n"' "\n");  							var stringEdit = new MHTextEditWidget(convertedNewLines' pixelWidth: 320' pixelHeight: multiLineEditHeight' multiLine: true' tabIndex: tabIndexForItem++' typeFace: ApplicationController.MonoSpacedTypeFace)  							{  								HAnchor = HAnchor.ParentLeftRight'  							};    							stringEdit.DrawFromHintedCache();    							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((TextEditWidget)sender).Text.Replace("\n"' "\\n")' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							nameArea.HAnchor = HAnchor.AbsolutePosition;  							nameArea.Width = 0;  							dataArea.AddChild(stringEdit);  							dataArea.HAnchor = HAnchor.ParentLeftRight;    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text.Replace("\\n"' "\n");  							};  						}  						break;    					case SliceSettingData.DataEditTypes.COM_PORT:  						{  #if __ANDROID__  							addControl = false;  #endif    							EventHandler localUnregisterEvents = null;    							bool canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect;  							// The COM_PORT control is unique in its approach to the SlicerConfigName. It uses "com_port" settings name to  							// bind to a context that will place it in the SliceSetting view but it binds its values to a machine  							// specific dictionary key that is not exposed in the UI. At runtime we lookup and store to '<machinename>_com_port'  							// ensuring that a single printer can be shared across different devices and we'll select the correct com port in each case  							var selectableOptions = new DropDownList("None".Localize()' maxHeight: 200)  							{  								ToolTipText = settingData.HelpText'  								Margin = new BorderDouble()'  								Name = "Serial Port Dropdown"'  								// Prevent droplist interaction when connected  								Enabled = canChangeComPort'  								TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150)'  								BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150)'  							};    							selectableOptions.Click += (s' e) =>  							{  								AddComMenuItems(settingData' persistenceLayer' settingsRow' selectableOptions);  							};    							AddComMenuItems(settingData' persistenceLayer' settingsRow' selectableOptions);    							dataArea.AddChild(selectableOptions);    							settingsRow.ValueChanged = (text) =>  							{  								// Lookup the machine specific comport value rather than the passed in text value  								selectableOptions.SelectedLabel = ActiveSliceSettings.Instance.Helpers.ComPort();  							};    							// Prevent droplist interaction when connected  							PrinterConnectionAndCommunication.Instance.CommunicationStateChanged.RegisterEvent((s' e) =>  							{  								canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect;  								selectableOptions.Enabled = canChangeComPort;  								selectableOptions.TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150);  								selectableOptions.BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150);  							}' ref localUnregisterEvents);    							// Release event listener on close  							selectableOptions.Closed += (s' e) =>  							{  								localUnregisterEvents?.Invoke(null' null);  							};  						}  						break;    					case SliceSettingData.DataEditTypes.LIST:  						{  							var selectableOptions = new DropDownList("None".Localize()' maxHeight: 200)  							{  								ToolTipText = settingData.HelpText'  								Margin = new BorderDouble()  							};    							foreach (string listItem in settingData.ExtraSettings.Split('''))  							{  								MenuItem newItem = selectableOptions.AddItem(listItem);  								if (newItem.Text == sliceSettingValue)  								{  									selectableOptions.SelectedLabel = sliceSettingValue;  								}    								newItem.Selected += (sender' e) =>  								{  									MenuItem menuItem = ((MenuItem)sender);  									ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' menuItem.Text' persistenceLayer);    									settingsRow.UpdateStyle();  								};  							}    							dataArea.AddChild(selectableOptions);    							settingsRow.ValueChanged = (text) =>  							{  								selectableOptions.SelectedLabel = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.HARDWARE_PRESENT:  						{  							var checkBoxWidget = new CheckBox("")  							{  								Name = settingData.PresentationName + " Checkbox"'  								ToolTipText = settingData.HelpText'  								VAnchor = Agg.UI.VAnchor.ParentBottom'  								TextColor = ActiveTheme.Instance.PrimaryTextColor'  								Checked = sliceSettingValue == "1"  							};    							checkBoxWidget.Click += (sender' e) =>  							{  								bool isChecked = ((CheckBox)sender).Checked;  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' isChecked ? "1" : "0"' persistenceLayer);    								settingsRow.UpdateStyle();  							};    							dataArea.AddChild(checkBoxWidget);    							settingsRow.ValueChanged = (text) =>  							{  								checkBoxWidget.Checked = text == "1";  							};  						}  						break;    					case SliceSettingData.DataEditTypes.VECTOR2:  						{  							string[] xyValueStrings = sliceSettingValue.Split(''');  							if (xyValueStrings.Length != 2)  							{  								xyValueStrings = new string[] { "0"' "0" };  							}    							double currentXValue;  							double.TryParse(xyValueStrings[0]' out currentXValue);    							var xEditWidget = new MHNumberEdit(currentXValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};    							double currentYValue;  							double.TryParse(xyValueStrings[1]' out currentYValue);    							var yEditWidget = new MHNumberEdit(currentYValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Margin = new BorderDouble(20' 0' 0' 0)'  							};    							xEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(xEditWidget);  							dataArea.AddChild(new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  							{  								VAnchor = VAnchor.ParentCenter'  								Margin = new BorderDouble(5' 0)'  							});    							yEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(yEditWidget);  							var yLabel = new GuiWidget()  							{  								VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  								Padding = new BorderDouble(5' 0)'  								HAnchor = HAnchor.ParentLeftRight'  							};  							yLabel.AddChild(new WrappedTextWidget("Y"' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));  							unitsArea.AddChild(yLabel);    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2;  								string[] xyValueStrings2 = text.Split(''');  								if (xyValueStrings2.Length != 2)  								{  									xyValueStrings2 = new string[] { "0"' "0" };  								}    								double.TryParse(xyValueStrings2[0]' out currentValue2);  								xEditWidget.ActuallNumberEdit.Value = currentValue2;    								double.TryParse(xyValueStrings2[1]' out currentValue2);  								yEditWidget.ActuallNumberEdit.Value = currentValue2;  							};    						}  						break;    					case SliceSettingData.DataEditTypes.OFFSET2:  						{  							Vector2 offset = ActiveSliceSettings.Instance.Helpers.ExtruderOffset(extruderIndex);    							var xEditWidget = new MHNumberEdit(offset.x' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  							};    							var yEditWidget = new MHNumberEdit(offset.y' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Margin = new BorderDouble(20' 0' 0' 0)'  							};    							xEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								int extruderIndexLocal = extruderIndex;  								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(xEditWidget);  							dataArea.AddChild(new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  							{  								VAnchor = VAnchor.ParentCenter'  								Margin = new BorderDouble(5' 0)'  							});    							yEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								int extruderIndexLocal = extruderIndex;  								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(yEditWidget);  							var yLabel = new GuiWidget()  							{  								Padding = new BorderDouble(5' 0)'  								HAnchor = HAnchor.ParentLeftRight'  								VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  							};  							yLabel.AddChild(new WrappedTextWidget("Y"' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));  							unitsArea.AddChild(yLabel);    							settingsRow.ValueChanged = (text) =>  							{  								Vector2 offset2 = ActiveSliceSettings.Instance.Helpers.ExtruderOffset(extruderIndex);  								xEditWidget.ActuallNumberEdit.Value = offset2.x;  								yEditWidget.ActuallNumberEdit.Value = offset2.y;  							};  						}  						break;    					default:  						var missingSetting = new TextWidget(String.Format("Missing the setting for '{0}'."' settingData.DataEditType.ToString()))  						{  							TextColor = ActiveTheme.Instance.PrimaryTextColor'  							BackgroundColor = RGBA_Bytes.Red  						};  						dataArea.AddChild(missingSetting);  						break;  				}  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The following statement contains a magic number: if (!PrinterSettings.KnownSettings.Contains(settingData.SlicerConfigName))  			{  				// the setting we think we are adding is not in the known settings it may have been deprecated  				TextWidget settingName = new TextWidget(String.Format("Setting '{0}' not found in known settings"' settingData.SlicerConfigName));  				settingName.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				//settingName.MinimumSize = new Vector2(minSettingNameWidth' settingName.MinimumSize.y);  				nameArea.AddChild(settingName);  				nameArea.BackgroundColor = RGBA_Bytes.Red;  			}  			else  			{  				int intEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int doubleEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int vectorXYEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int multiLineEditHeight = (int)(120 * GuiWidget.DeviceScale + .5);    				if (settingData.DataEditType != SliceSettingData.DataEditTypes.MULTI_LINE_TEXT)  				{  					var nameHolder = new GuiWidget()  					{  						Padding = new BorderDouble(0' 0' 5' 0)'  						VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  						HAnchor = HAnchor.ParentLeftRight'  					};    					nameHolder.AddChild(new WrappedTextWidget(settingData.PresentationName.Localize()' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor));    					nameArea.AddChild(nameHolder);  				}    				switch (settingData.DataEditType)  				{  					case SliceSettingData.DataEditTypes.INT:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();  							int currentValue;  							int.TryParse(sliceSettingValue' out currentValue);    							var intEditWidget = new MHNumberEdit(currentValue' pixelWidth: intEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Name = settingData.PresentationName + " Edit"'  							};  							intEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							content.AddChild(intEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' intEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								intEditWidget.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.DOUBLE:  						{  							double currentValue;  							double.TryParse(sliceSettingValue' out currentValue);    							var doubleEditWidget = new MHNumberEdit(currentValue' allowNegatives: true' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2 = 0;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.POSITIVE_DOUBLE:  						{  							const string multiValuesAreDiffernt = "-";  							FlowLayoutWidget content = new FlowLayoutWidget();    							var doubleEditWidget = new MHNumberEdit(0' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								Name = settingData.PresentationName + " Textbox"'  								SelectAllOnFocus = true  							};    							double currentValue;  							bool ChangesMultipleOtherSettings = settingData.SetSettingsOnChange.Count > 0;  							if (ChangesMultipleOtherSettings)  							{  								bool allTheSame = true;  								string setting = GetActiveValue(settingData.SetSettingsOnChange[0]["TargetSetting"]' layerCascade);  								for (int i = 1; i < settingData.SetSettingsOnChange.Count; i++)  								{  									string nextSetting = GetActiveValue(settingData.SetSettingsOnChange[i]["TargetSetting"]' layerCascade);  									if (setting != nextSetting)  									{  										allTheSame = false;  										break;  									}  								}    								if (allTheSame && setting.EndsWith("mm"))  								{  									double.TryParse(setting.Substring(0' setting.Length - 2)' out currentValue);  									doubleEditWidget.ActuallNumberEdit.Value = currentValue;  								}  								else  								{  									doubleEditWidget.ActuallNumberEdit.InternalNumberEdit.Text = multiValuesAreDiffernt;  								}  							}  							else // just set the setting normally  							{  								double.TryParse(sliceSettingValue' out currentValue);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue;  							}  							doubleEditWidget.ActuallNumberEdit.InternalTextEditWidget.MarkAsStartingState();  							  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								NumberEdit numberEdit = (NumberEdit)sender;  								// If this setting sets other settings' then do that.  								if (ChangesMultipleOtherSettings  									&& numberEdit.Text != multiValuesAreDiffernt)  								{  									{  										ActiveSliceSettings.Instance.SetValue(settingData.SetSettingsOnChange[0]["TargetSetting"]' numberEdit.Value.ToString() + "mm"' persistenceLayer);  									}  								}    								// also always save to the local setting  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' numberEdit.Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							content.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' doubleEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2 = 0;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.OFFSET:  						{  							double currentValue;  							double.TryParse(sliceSettingValue' out currentValue);  							var doubleEditWidget = new MHNumberEdit(currentValue' allowDecimals: true' allowNegatives: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true    							};  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.DOUBLE_OR_PERCENT:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();    							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: doubleEditWidth - 2' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								var textEditWidget = (TextEditWidget)sender;  								string text = textEditWidget.Text.Trim();    								bool isPercent = text.Contains("%");  								if (isPercent)  								{  									text = text.Substring(0' text.IndexOf("%"));  								}  								double result;  								double.TryParse(text' out result);  								text = result.ToString();  								if (isPercent)  								{  									text += "%";  								}  								textEditWidget.Text = text;  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' textEditWidget.Text' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							stringEdit.ActualTextEditWidget.InternalTextEditWidget.AllSelected += (sender' e) =>  							{  								// select everything up to the % (if present)  								InternalTextEditWidget textEditWidget = (InternalTextEditWidget)sender;  								int percentIndex = textEditWidget.Text.IndexOf("%");  								if (percentIndex != -1)  								{  									textEditWidget.SetSelection(0' percentIndex - 1);  								}  							};    							content.AddChild(stringEdit);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.INT_OR_MM:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();    							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: doubleEditWidth - 2' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};    							string startingText = stringEdit.Text;  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								TextEditWidget textEditWidget = (TextEditWidget)sender;  								// only validate when we lose focus  								if (!textEditWidget.ContainsFocus)  								{  									string text = textEditWidget.Text;  									text = text.Trim();  									bool isMm = text.Contains("mm");  									if (isMm)  									{  										text = text.Substring(0' text.IndexOf("mm"));  									}  									double result;  									double.TryParse(text' out result);  									text = result.ToString();  									if (isMm)  									{  										text += "mm";  									}  									else  									{  										result = (int)result;  										text = result.ToString();  									}  									textEditWidget.Text = text;  									startingText = stringEdit.Text;  								}  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' textEditWidget.Text' persistenceLayer);  								settingsRow.UpdateStyle();    								// make sure we are still looking for the final validation before saving.  								if (textEditWidget.ContainsFocus)  								{  									UiThread.RunOnIdle(() =>  									{  										string currentText = textEditWidget.Text;  										int cursorIndex = textEditWidget.InternalTextEditWidget.CharIndexToInsertBefore;  										textEditWidget.Text = startingText;  										textEditWidget.InternalTextEditWidget.MarkAsStartingState();  										textEditWidget.Text = currentText;  										textEditWidget.InternalTextEditWidget.CharIndexToInsertBefore = cursorIndex;  									});  								}  							};    							stringEdit.ActualTextEditWidget.InternalTextEditWidget.AllSelected += (sender' e) =>  							{  								// select everything up to the mm (if present)  								InternalTextEditWidget textEditWidget = (InternalTextEditWidget)sender;  								int mMIndex = textEditWidget.Text.IndexOf("mm");  								if (mMIndex != -1)  								{  									textEditWidget.SetSelection(0' mMIndex - 1);  								}  							};    							content.AddChild(stringEdit);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.CHECK_BOX:  						{  							var checkBoxWidget = new CheckBox("")  							{  								Name = settingData.PresentationName + " Checkbox"'  								ToolTipText = settingData.HelpText'  								VAnchor = Agg.UI.VAnchor.ParentBottom'  								TextColor = ActiveTheme.Instance.PrimaryTextColor'  								Checked = sliceSettingValue == "1"  							};  							checkBoxWidget.Click += (sender' e) =>  							{  								// SetValue should only be called when the checkbox is clicked. If this code makes its way into checkstatechanged  								// we end up adding a key back into the dictionary after we call .ClearValue' resulting in the blue override bar reappearing after  								// clearing a useroverride with the red x  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' checkBoxWidget.Checked ? "1" : "0"' persistenceLayer);  							};  							checkBoxWidget.CheckedStateChanged += (s' e) =>  							{  								// Linked settings should be updated in all cases (user clicked checkbox' user clicked clear)  								foreach (var setSettingsData in settingData.SetSettingsOnChange)  								{  									string targetValue;  									if (setSettingsData.TryGetValue(checkBoxWidget.Checked ? "OnValue" : "OffValue"' out targetValue))  									{  										ActiveSliceSettings.Instance.SetValue(setSettingsData["TargetSetting"]' targetValue' persistenceLayer);  									}  								}    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(checkBoxWidget);    							settingsRow.ValueChanged = (text) =>  							{  								checkBoxWidget.Checked = text == "1";  							};  						}  						break;    					case SliceSettingData.DataEditTypes.STRING:  						{  							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: settingData.ShowAsOverride ? 120 : 200' tabIndex: tabIndexForItem++)  							{  								Name = settingData.PresentationName + " Edit"'  							};  							stringEdit.ToolTipText = settingData.HelpText;  							  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((TextEditWidget)sender).Text' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							dataArea.AddChild(stringEdit);    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.MULTI_LINE_TEXT:  						{  							string convertedNewLines = sliceSettingValue.Replace("\\n"' "\n");  							var stringEdit = new MHTextEditWidget(convertedNewLines' pixelWidth: 320' pixelHeight: multiLineEditHeight' multiLine: true' tabIndex: tabIndexForItem++' typeFace: ApplicationController.MonoSpacedTypeFace)  							{  								HAnchor = HAnchor.ParentLeftRight'  							};    							stringEdit.DrawFromHintedCache();    							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((TextEditWidget)sender).Text.Replace("\n"' "\\n")' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							nameArea.HAnchor = HAnchor.AbsolutePosition;  							nameArea.Width = 0;  							dataArea.AddChild(stringEdit);  							dataArea.HAnchor = HAnchor.ParentLeftRight;    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text.Replace("\\n"' "\n");  							};  						}  						break;    					case SliceSettingData.DataEditTypes.COM_PORT:  						{  #if __ANDROID__  							addControl = false;  #endif    							EventHandler localUnregisterEvents = null;    							bool canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect;  							// The COM_PORT control is unique in its approach to the SlicerConfigName. It uses "com_port" settings name to  							// bind to a context that will place it in the SliceSetting view but it binds its values to a machine  							// specific dictionary key that is not exposed in the UI. At runtime we lookup and store to '<machinename>_com_port'  							// ensuring that a single printer can be shared across different devices and we'll select the correct com port in each case  							var selectableOptions = new DropDownList("None".Localize()' maxHeight: 200)  							{  								ToolTipText = settingData.HelpText'  								Margin = new BorderDouble()'  								Name = "Serial Port Dropdown"'  								// Prevent droplist interaction when connected  								Enabled = canChangeComPort'  								TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150)'  								BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150)'  							};    							selectableOptions.Click += (s' e) =>  							{  								AddComMenuItems(settingData' persistenceLayer' settingsRow' selectableOptions);  							};    							AddComMenuItems(settingData' persistenceLayer' settingsRow' selectableOptions);    							dataArea.AddChild(selectableOptions);    							settingsRow.ValueChanged = (text) =>  							{  								// Lookup the machine specific comport value rather than the passed in text value  								selectableOptions.SelectedLabel = ActiveSliceSettings.Instance.Helpers.ComPort();  							};    							// Prevent droplist interaction when connected  							PrinterConnectionAndCommunication.Instance.CommunicationStateChanged.RegisterEvent((s' e) =>  							{  								canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect;  								selectableOptions.Enabled = canChangeComPort;  								selectableOptions.TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150);  								selectableOptions.BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150);  							}' ref localUnregisterEvents);    							// Release event listener on close  							selectableOptions.Closed += (s' e) =>  							{  								localUnregisterEvents?.Invoke(null' null);  							};  						}  						break;    					case SliceSettingData.DataEditTypes.LIST:  						{  							var selectableOptions = new DropDownList("None".Localize()' maxHeight: 200)  							{  								ToolTipText = settingData.HelpText'  								Margin = new BorderDouble()  							};    							foreach (string listItem in settingData.ExtraSettings.Split('''))  							{  								MenuItem newItem = selectableOptions.AddItem(listItem);  								if (newItem.Text == sliceSettingValue)  								{  									selectableOptions.SelectedLabel = sliceSettingValue;  								}    								newItem.Selected += (sender' e) =>  								{  									MenuItem menuItem = ((MenuItem)sender);  									ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' menuItem.Text' persistenceLayer);    									settingsRow.UpdateStyle();  								};  							}    							dataArea.AddChild(selectableOptions);    							settingsRow.ValueChanged = (text) =>  							{  								selectableOptions.SelectedLabel = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.HARDWARE_PRESENT:  						{  							var checkBoxWidget = new CheckBox("")  							{  								Name = settingData.PresentationName + " Checkbox"'  								ToolTipText = settingData.HelpText'  								VAnchor = Agg.UI.VAnchor.ParentBottom'  								TextColor = ActiveTheme.Instance.PrimaryTextColor'  								Checked = sliceSettingValue == "1"  							};    							checkBoxWidget.Click += (sender' e) =>  							{  								bool isChecked = ((CheckBox)sender).Checked;  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' isChecked ? "1" : "0"' persistenceLayer);    								settingsRow.UpdateStyle();  							};    							dataArea.AddChild(checkBoxWidget);    							settingsRow.ValueChanged = (text) =>  							{  								checkBoxWidget.Checked = text == "1";  							};  						}  						break;    					case SliceSettingData.DataEditTypes.VECTOR2:  						{  							string[] xyValueStrings = sliceSettingValue.Split(''');  							if (xyValueStrings.Length != 2)  							{  								xyValueStrings = new string[] { "0"' "0" };  							}    							double currentXValue;  							double.TryParse(xyValueStrings[0]' out currentXValue);    							var xEditWidget = new MHNumberEdit(currentXValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};    							double currentYValue;  							double.TryParse(xyValueStrings[1]' out currentYValue);    							var yEditWidget = new MHNumberEdit(currentYValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Margin = new BorderDouble(20' 0' 0' 0)'  							};    							xEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(xEditWidget);  							dataArea.AddChild(new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  							{  								VAnchor = VAnchor.ParentCenter'  								Margin = new BorderDouble(5' 0)'  							});    							yEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(yEditWidget);  							var yLabel = new GuiWidget()  							{  								VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  								Padding = new BorderDouble(5' 0)'  								HAnchor = HAnchor.ParentLeftRight'  							};  							yLabel.AddChild(new WrappedTextWidget("Y"' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));  							unitsArea.AddChild(yLabel);    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2;  								string[] xyValueStrings2 = text.Split(''');  								if (xyValueStrings2.Length != 2)  								{  									xyValueStrings2 = new string[] { "0"' "0" };  								}    								double.TryParse(xyValueStrings2[0]' out currentValue2);  								xEditWidget.ActuallNumberEdit.Value = currentValue2;    								double.TryParse(xyValueStrings2[1]' out currentValue2);  								yEditWidget.ActuallNumberEdit.Value = currentValue2;  							};    						}  						break;    					case SliceSettingData.DataEditTypes.OFFSET2:  						{  							Vector2 offset = ActiveSliceSettings.Instance.Helpers.ExtruderOffset(extruderIndex);    							var xEditWidget = new MHNumberEdit(offset.x' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  							};    							var yEditWidget = new MHNumberEdit(offset.y' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Margin = new BorderDouble(20' 0' 0' 0)'  							};    							xEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								int extruderIndexLocal = extruderIndex;  								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(xEditWidget);  							dataArea.AddChild(new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  							{  								VAnchor = VAnchor.ParentCenter'  								Margin = new BorderDouble(5' 0)'  							});    							yEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								int extruderIndexLocal = extruderIndex;  								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(yEditWidget);  							var yLabel = new GuiWidget()  							{  								Padding = new BorderDouble(5' 0)'  								HAnchor = HAnchor.ParentLeftRight'  								VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  							};  							yLabel.AddChild(new WrappedTextWidget("Y"' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));  							unitsArea.AddChild(yLabel);    							settingsRow.ValueChanged = (text) =>  							{  								Vector2 offset2 = ActiveSliceSettings.Instance.Helpers.ExtruderOffset(extruderIndex);  								xEditWidget.ActuallNumberEdit.Value = offset2.x;  								yEditWidget.ActuallNumberEdit.Value = offset2.y;  							};  						}  						break;    					default:  						var missingSetting = new TextWidget(String.Format("Missing the setting for '{0}'."' settingData.DataEditType.ToString()))  						{  							TextColor = ActiveTheme.Instance.PrimaryTextColor'  							BackgroundColor = RGBA_Bytes.Red  						};  						dataArea.AddChild(missingSetting);  						break;  				}  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The following statement contains a magic number: if (!PrinterSettings.KnownSettings.Contains(settingData.SlicerConfigName))  			{  				// the setting we think we are adding is not in the known settings it may have been deprecated  				TextWidget settingName = new TextWidget(String.Format("Setting '{0}' not found in known settings"' settingData.SlicerConfigName));  				settingName.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				//settingName.MinimumSize = new Vector2(minSettingNameWidth' settingName.MinimumSize.y);  				nameArea.AddChild(settingName);  				nameArea.BackgroundColor = RGBA_Bytes.Red;  			}  			else  			{  				int intEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int doubleEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int vectorXYEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int multiLineEditHeight = (int)(120 * GuiWidget.DeviceScale + .5);    				if (settingData.DataEditType != SliceSettingData.DataEditTypes.MULTI_LINE_TEXT)  				{  					var nameHolder = new GuiWidget()  					{  						Padding = new BorderDouble(0' 0' 5' 0)'  						VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  						HAnchor = HAnchor.ParentLeftRight'  					};    					nameHolder.AddChild(new WrappedTextWidget(settingData.PresentationName.Localize()' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor));    					nameArea.AddChild(nameHolder);  				}    				switch (settingData.DataEditType)  				{  					case SliceSettingData.DataEditTypes.INT:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();  							int currentValue;  							int.TryParse(sliceSettingValue' out currentValue);    							var intEditWidget = new MHNumberEdit(currentValue' pixelWidth: intEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Name = settingData.PresentationName + " Edit"'  							};  							intEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							content.AddChild(intEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' intEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								intEditWidget.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.DOUBLE:  						{  							double currentValue;  							double.TryParse(sliceSettingValue' out currentValue);    							var doubleEditWidget = new MHNumberEdit(currentValue' allowNegatives: true' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2 = 0;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.POSITIVE_DOUBLE:  						{  							const string multiValuesAreDiffernt = "-";  							FlowLayoutWidget content = new FlowLayoutWidget();    							var doubleEditWidget = new MHNumberEdit(0' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								Name = settingData.PresentationName + " Textbox"'  								SelectAllOnFocus = true  							};    							double currentValue;  							bool ChangesMultipleOtherSettings = settingData.SetSettingsOnChange.Count > 0;  							if (ChangesMultipleOtherSettings)  							{  								bool allTheSame = true;  								string setting = GetActiveValue(settingData.SetSettingsOnChange[0]["TargetSetting"]' layerCascade);  								for (int i = 1; i < settingData.SetSettingsOnChange.Count; i++)  								{  									string nextSetting = GetActiveValue(settingData.SetSettingsOnChange[i]["TargetSetting"]' layerCascade);  									if (setting != nextSetting)  									{  										allTheSame = false;  										break;  									}  								}    								if (allTheSame && setting.EndsWith("mm"))  								{  									double.TryParse(setting.Substring(0' setting.Length - 2)' out currentValue);  									doubleEditWidget.ActuallNumberEdit.Value = currentValue;  								}  								else  								{  									doubleEditWidget.ActuallNumberEdit.InternalNumberEdit.Text = multiValuesAreDiffernt;  								}  							}  							else // just set the setting normally  							{  								double.TryParse(sliceSettingValue' out currentValue);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue;  							}  							doubleEditWidget.ActuallNumberEdit.InternalTextEditWidget.MarkAsStartingState();  							  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								NumberEdit numberEdit = (NumberEdit)sender;  								// If this setting sets other settings' then do that.  								if (ChangesMultipleOtherSettings  									&& numberEdit.Text != multiValuesAreDiffernt)  								{  									{  										ActiveSliceSettings.Instance.SetValue(settingData.SetSettingsOnChange[0]["TargetSetting"]' numberEdit.Value.ToString() + "mm"' persistenceLayer);  									}  								}    								// also always save to the local setting  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' numberEdit.Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							content.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' doubleEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2 = 0;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.OFFSET:  						{  							double currentValue;  							double.TryParse(sliceSettingValue' out currentValue);  							var doubleEditWidget = new MHNumberEdit(currentValue' allowDecimals: true' allowNegatives: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true    							};  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.DOUBLE_OR_PERCENT:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();    							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: doubleEditWidth - 2' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								var textEditWidget = (TextEditWidget)sender;  								string text = textEditWidget.Text.Trim();    								bool isPercent = text.Contains("%");  								if (isPercent)  								{  									text = text.Substring(0' text.IndexOf("%"));  								}  								double result;  								double.TryParse(text' out result);  								text = result.ToString();  								if (isPercent)  								{  									text += "%";  								}  								textEditWidget.Text = text;  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' textEditWidget.Text' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							stringEdit.ActualTextEditWidget.InternalTextEditWidget.AllSelected += (sender' e) =>  							{  								// select everything up to the % (if present)  								InternalTextEditWidget textEditWidget = (InternalTextEditWidget)sender;  								int percentIndex = textEditWidget.Text.IndexOf("%");  								if (percentIndex != -1)  								{  									textEditWidget.SetSelection(0' percentIndex - 1);  								}  							};    							content.AddChild(stringEdit);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.INT_OR_MM:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();    							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: doubleEditWidth - 2' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};    							string startingText = stringEdit.Text;  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								TextEditWidget textEditWidget = (TextEditWidget)sender;  								// only validate when we lose focus  								if (!textEditWidget.ContainsFocus)  								{  									string text = textEditWidget.Text;  									text = text.Trim();  									bool isMm = text.Contains("mm");  									if (isMm)  									{  										text = text.Substring(0' text.IndexOf("mm"));  									}  									double result;  									double.TryParse(text' out result);  									text = result.ToString();  									if (isMm)  									{  										text += "mm";  									}  									else  									{  										result = (int)result;  										text = result.ToString();  									}  									textEditWidget.Text = text;  									startingText = stringEdit.Text;  								}  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' textEditWidget.Text' persistenceLayer);  								settingsRow.UpdateStyle();    								// make sure we are still looking for the final validation before saving.  								if (textEditWidget.ContainsFocus)  								{  									UiThread.RunOnIdle(() =>  									{  										string currentText = textEditWidget.Text;  										int cursorIndex = textEditWidget.InternalTextEditWidget.CharIndexToInsertBefore;  										textEditWidget.Text = startingText;  										textEditWidget.InternalTextEditWidget.MarkAsStartingState();  										textEditWidget.Text = currentText;  										textEditWidget.InternalTextEditWidget.CharIndexToInsertBefore = cursorIndex;  									});  								}  							};    							stringEdit.ActualTextEditWidget.InternalTextEditWidget.AllSelected += (sender' e) =>  							{  								// select everything up to the mm (if present)  								InternalTextEditWidget textEditWidget = (InternalTextEditWidget)sender;  								int mMIndex = textEditWidget.Text.IndexOf("mm");  								if (mMIndex != -1)  								{  									textEditWidget.SetSelection(0' mMIndex - 1);  								}  							};    							content.AddChild(stringEdit);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.CHECK_BOX:  						{  							var checkBoxWidget = new CheckBox("")  							{  								Name = settingData.PresentationName + " Checkbox"'  								ToolTipText = settingData.HelpText'  								VAnchor = Agg.UI.VAnchor.ParentBottom'  								TextColor = ActiveTheme.Instance.PrimaryTextColor'  								Checked = sliceSettingValue == "1"  							};  							checkBoxWidget.Click += (sender' e) =>  							{  								// SetValue should only be called when the checkbox is clicked. If this code makes its way into checkstatechanged  								// we end up adding a key back into the dictionary after we call .ClearValue' resulting in the blue override bar reappearing after  								// clearing a useroverride with the red x  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' checkBoxWidget.Checked ? "1" : "0"' persistenceLayer);  							};  							checkBoxWidget.CheckedStateChanged += (s' e) =>  							{  								// Linked settings should be updated in all cases (user clicked checkbox' user clicked clear)  								foreach (var setSettingsData in settingData.SetSettingsOnChange)  								{  									string targetValue;  									if (setSettingsData.TryGetValue(checkBoxWidget.Checked ? "OnValue" : "OffValue"' out targetValue))  									{  										ActiveSliceSettings.Instance.SetValue(setSettingsData["TargetSetting"]' targetValue' persistenceLayer);  									}  								}    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(checkBoxWidget);    							settingsRow.ValueChanged = (text) =>  							{  								checkBoxWidget.Checked = text == "1";  							};  						}  						break;    					case SliceSettingData.DataEditTypes.STRING:  						{  							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: settingData.ShowAsOverride ? 120 : 200' tabIndex: tabIndexForItem++)  							{  								Name = settingData.PresentationName + " Edit"'  							};  							stringEdit.ToolTipText = settingData.HelpText;  							  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((TextEditWidget)sender).Text' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							dataArea.AddChild(stringEdit);    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.MULTI_LINE_TEXT:  						{  							string convertedNewLines = sliceSettingValue.Replace("\\n"' "\n");  							var stringEdit = new MHTextEditWidget(convertedNewLines' pixelWidth: 320' pixelHeight: multiLineEditHeight' multiLine: true' tabIndex: tabIndexForItem++' typeFace: ApplicationController.MonoSpacedTypeFace)  							{  								HAnchor = HAnchor.ParentLeftRight'  							};    							stringEdit.DrawFromHintedCache();    							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((TextEditWidget)sender).Text.Replace("\n"' "\\n")' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							nameArea.HAnchor = HAnchor.AbsolutePosition;  							nameArea.Width = 0;  							dataArea.AddChild(stringEdit);  							dataArea.HAnchor = HAnchor.ParentLeftRight;    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text.Replace("\\n"' "\n");  							};  						}  						break;    					case SliceSettingData.DataEditTypes.COM_PORT:  						{  #if __ANDROID__  							addControl = false;  #endif    							EventHandler localUnregisterEvents = null;    							bool canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect;  							// The COM_PORT control is unique in its approach to the SlicerConfigName. It uses "com_port" settings name to  							// bind to a context that will place it in the SliceSetting view but it binds its values to a machine  							// specific dictionary key that is not exposed in the UI. At runtime we lookup and store to '<machinename>_com_port'  							// ensuring that a single printer can be shared across different devices and we'll select the correct com port in each case  							var selectableOptions = new DropDownList("None".Localize()' maxHeight: 200)  							{  								ToolTipText = settingData.HelpText'  								Margin = new BorderDouble()'  								Name = "Serial Port Dropdown"'  								// Prevent droplist interaction when connected  								Enabled = canChangeComPort'  								TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150)'  								BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150)'  							};    							selectableOptions.Click += (s' e) =>  							{  								AddComMenuItems(settingData' persistenceLayer' settingsRow' selectableOptions);  							};    							AddComMenuItems(settingData' persistenceLayer' settingsRow' selectableOptions);    							dataArea.AddChild(selectableOptions);    							settingsRow.ValueChanged = (text) =>  							{  								// Lookup the machine specific comport value rather than the passed in text value  								selectableOptions.SelectedLabel = ActiveSliceSettings.Instance.Helpers.ComPort();  							};    							// Prevent droplist interaction when connected  							PrinterConnectionAndCommunication.Instance.CommunicationStateChanged.RegisterEvent((s' e) =>  							{  								canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect;  								selectableOptions.Enabled = canChangeComPort;  								selectableOptions.TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150);  								selectableOptions.BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150);  							}' ref localUnregisterEvents);    							// Release event listener on close  							selectableOptions.Closed += (s' e) =>  							{  								localUnregisterEvents?.Invoke(null' null);  							};  						}  						break;    					case SliceSettingData.DataEditTypes.LIST:  						{  							var selectableOptions = new DropDownList("None".Localize()' maxHeight: 200)  							{  								ToolTipText = settingData.HelpText'  								Margin = new BorderDouble()  							};    							foreach (string listItem in settingData.ExtraSettings.Split('''))  							{  								MenuItem newItem = selectableOptions.AddItem(listItem);  								if (newItem.Text == sliceSettingValue)  								{  									selectableOptions.SelectedLabel = sliceSettingValue;  								}    								newItem.Selected += (sender' e) =>  								{  									MenuItem menuItem = ((MenuItem)sender);  									ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' menuItem.Text' persistenceLayer);    									settingsRow.UpdateStyle();  								};  							}    							dataArea.AddChild(selectableOptions);    							settingsRow.ValueChanged = (text) =>  							{  								selectableOptions.SelectedLabel = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.HARDWARE_PRESENT:  						{  							var checkBoxWidget = new CheckBox("")  							{  								Name = settingData.PresentationName + " Checkbox"'  								ToolTipText = settingData.HelpText'  								VAnchor = Agg.UI.VAnchor.ParentBottom'  								TextColor = ActiveTheme.Instance.PrimaryTextColor'  								Checked = sliceSettingValue == "1"  							};    							checkBoxWidget.Click += (sender' e) =>  							{  								bool isChecked = ((CheckBox)sender).Checked;  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' isChecked ? "1" : "0"' persistenceLayer);    								settingsRow.UpdateStyle();  							};    							dataArea.AddChild(checkBoxWidget);    							settingsRow.ValueChanged = (text) =>  							{  								checkBoxWidget.Checked = text == "1";  							};  						}  						break;    					case SliceSettingData.DataEditTypes.VECTOR2:  						{  							string[] xyValueStrings = sliceSettingValue.Split(''');  							if (xyValueStrings.Length != 2)  							{  								xyValueStrings = new string[] { "0"' "0" };  							}    							double currentXValue;  							double.TryParse(xyValueStrings[0]' out currentXValue);    							var xEditWidget = new MHNumberEdit(currentXValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};    							double currentYValue;  							double.TryParse(xyValueStrings[1]' out currentYValue);    							var yEditWidget = new MHNumberEdit(currentYValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Margin = new BorderDouble(20' 0' 0' 0)'  							};    							xEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(xEditWidget);  							dataArea.AddChild(new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  							{  								VAnchor = VAnchor.ParentCenter'  								Margin = new BorderDouble(5' 0)'  							});    							yEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(yEditWidget);  							var yLabel = new GuiWidget()  							{  								VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  								Padding = new BorderDouble(5' 0)'  								HAnchor = HAnchor.ParentLeftRight'  							};  							yLabel.AddChild(new WrappedTextWidget("Y"' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));  							unitsArea.AddChild(yLabel);    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2;  								string[] xyValueStrings2 = text.Split(''');  								if (xyValueStrings2.Length != 2)  								{  									xyValueStrings2 = new string[] { "0"' "0" };  								}    								double.TryParse(xyValueStrings2[0]' out currentValue2);  								xEditWidget.ActuallNumberEdit.Value = currentValue2;    								double.TryParse(xyValueStrings2[1]' out currentValue2);  								yEditWidget.ActuallNumberEdit.Value = currentValue2;  							};    						}  						break;    					case SliceSettingData.DataEditTypes.OFFSET2:  						{  							Vector2 offset = ActiveSliceSettings.Instance.Helpers.ExtruderOffset(extruderIndex);    							var xEditWidget = new MHNumberEdit(offset.x' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  							};    							var yEditWidget = new MHNumberEdit(offset.y' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Margin = new BorderDouble(20' 0' 0' 0)'  							};    							xEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								int extruderIndexLocal = extruderIndex;  								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(xEditWidget);  							dataArea.AddChild(new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  							{  								VAnchor = VAnchor.ParentCenter'  								Margin = new BorderDouble(5' 0)'  							});    							yEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								int extruderIndexLocal = extruderIndex;  								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(yEditWidget);  							var yLabel = new GuiWidget()  							{  								Padding = new BorderDouble(5' 0)'  								HAnchor = HAnchor.ParentLeftRight'  								VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  							};  							yLabel.AddChild(new WrappedTextWidget("Y"' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));  							unitsArea.AddChild(yLabel);    							settingsRow.ValueChanged = (text) =>  							{  								Vector2 offset2 = ActiveSliceSettings.Instance.Helpers.ExtruderOffset(extruderIndex);  								xEditWidget.ActuallNumberEdit.Value = offset2.x;  								yEditWidget.ActuallNumberEdit.Value = offset2.y;  							};  						}  						break;    					default:  						var missingSetting = new TextWidget(String.Format("Missing the setting for '{0}'."' settingData.DataEditType.ToString()))  						{  							TextColor = ActiveTheme.Instance.PrimaryTextColor'  							BackgroundColor = RGBA_Bytes.Red  						};  						dataArea.AddChild(missingSetting);  						break;  				}  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The following statement contains a magic number: if (!PrinterSettings.KnownSettings.Contains(settingData.SlicerConfigName))  			{  				// the setting we think we are adding is not in the known settings it may have been deprecated  				TextWidget settingName = new TextWidget(String.Format("Setting '{0}' not found in known settings"' settingData.SlicerConfigName));  				settingName.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				//settingName.MinimumSize = new Vector2(minSettingNameWidth' settingName.MinimumSize.y);  				nameArea.AddChild(settingName);  				nameArea.BackgroundColor = RGBA_Bytes.Red;  			}  			else  			{  				int intEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int doubleEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int vectorXYEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int multiLineEditHeight = (int)(120 * GuiWidget.DeviceScale + .5);    				if (settingData.DataEditType != SliceSettingData.DataEditTypes.MULTI_LINE_TEXT)  				{  					var nameHolder = new GuiWidget()  					{  						Padding = new BorderDouble(0' 0' 5' 0)'  						VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  						HAnchor = HAnchor.ParentLeftRight'  					};    					nameHolder.AddChild(new WrappedTextWidget(settingData.PresentationName.Localize()' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor));    					nameArea.AddChild(nameHolder);  				}    				switch (settingData.DataEditType)  				{  					case SliceSettingData.DataEditTypes.INT:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();  							int currentValue;  							int.TryParse(sliceSettingValue' out currentValue);    							var intEditWidget = new MHNumberEdit(currentValue' pixelWidth: intEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Name = settingData.PresentationName + " Edit"'  							};  							intEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							content.AddChild(intEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' intEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								intEditWidget.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.DOUBLE:  						{  							double currentValue;  							double.TryParse(sliceSettingValue' out currentValue);    							var doubleEditWidget = new MHNumberEdit(currentValue' allowNegatives: true' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2 = 0;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.POSITIVE_DOUBLE:  						{  							const string multiValuesAreDiffernt = "-";  							FlowLayoutWidget content = new FlowLayoutWidget();    							var doubleEditWidget = new MHNumberEdit(0' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								Name = settingData.PresentationName + " Textbox"'  								SelectAllOnFocus = true  							};    							double currentValue;  							bool ChangesMultipleOtherSettings = settingData.SetSettingsOnChange.Count > 0;  							if (ChangesMultipleOtherSettings)  							{  								bool allTheSame = true;  								string setting = GetActiveValue(settingData.SetSettingsOnChange[0]["TargetSetting"]' layerCascade);  								for (int i = 1; i < settingData.SetSettingsOnChange.Count; i++)  								{  									string nextSetting = GetActiveValue(settingData.SetSettingsOnChange[i]["TargetSetting"]' layerCascade);  									if (setting != nextSetting)  									{  										allTheSame = false;  										break;  									}  								}    								if (allTheSame && setting.EndsWith("mm"))  								{  									double.TryParse(setting.Substring(0' setting.Length - 2)' out currentValue);  									doubleEditWidget.ActuallNumberEdit.Value = currentValue;  								}  								else  								{  									doubleEditWidget.ActuallNumberEdit.InternalNumberEdit.Text = multiValuesAreDiffernt;  								}  							}  							else // just set the setting normally  							{  								double.TryParse(sliceSettingValue' out currentValue);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue;  							}  							doubleEditWidget.ActuallNumberEdit.InternalTextEditWidget.MarkAsStartingState();  							  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								NumberEdit numberEdit = (NumberEdit)sender;  								// If this setting sets other settings' then do that.  								if (ChangesMultipleOtherSettings  									&& numberEdit.Text != multiValuesAreDiffernt)  								{  									{  										ActiveSliceSettings.Instance.SetValue(settingData.SetSettingsOnChange[0]["TargetSetting"]' numberEdit.Value.ToString() + "mm"' persistenceLayer);  									}  								}    								// also always save to the local setting  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' numberEdit.Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							content.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' doubleEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2 = 0;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.OFFSET:  						{  							double currentValue;  							double.TryParse(sliceSettingValue' out currentValue);  							var doubleEditWidget = new MHNumberEdit(currentValue' allowDecimals: true' allowNegatives: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true    							};  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.DOUBLE_OR_PERCENT:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();    							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: doubleEditWidth - 2' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								var textEditWidget = (TextEditWidget)sender;  								string text = textEditWidget.Text.Trim();    								bool isPercent = text.Contains("%");  								if (isPercent)  								{  									text = text.Substring(0' text.IndexOf("%"));  								}  								double result;  								double.TryParse(text' out result);  								text = result.ToString();  								if (isPercent)  								{  									text += "%";  								}  								textEditWidget.Text = text;  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' textEditWidget.Text' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							stringEdit.ActualTextEditWidget.InternalTextEditWidget.AllSelected += (sender' e) =>  							{  								// select everything up to the % (if present)  								InternalTextEditWidget textEditWidget = (InternalTextEditWidget)sender;  								int percentIndex = textEditWidget.Text.IndexOf("%");  								if (percentIndex != -1)  								{  									textEditWidget.SetSelection(0' percentIndex - 1);  								}  							};    							content.AddChild(stringEdit);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.INT_OR_MM:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();    							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: doubleEditWidth - 2' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};    							string startingText = stringEdit.Text;  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								TextEditWidget textEditWidget = (TextEditWidget)sender;  								// only validate when we lose focus  								if (!textEditWidget.ContainsFocus)  								{  									string text = textEditWidget.Text;  									text = text.Trim();  									bool isMm = text.Contains("mm");  									if (isMm)  									{  										text = text.Substring(0' text.IndexOf("mm"));  									}  									double result;  									double.TryParse(text' out result);  									text = result.ToString();  									if (isMm)  									{  										text += "mm";  									}  									else  									{  										result = (int)result;  										text = result.ToString();  									}  									textEditWidget.Text = text;  									startingText = stringEdit.Text;  								}  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' textEditWidget.Text' persistenceLayer);  								settingsRow.UpdateStyle();    								// make sure we are still looking for the final validation before saving.  								if (textEditWidget.ContainsFocus)  								{  									UiThread.RunOnIdle(() =>  									{  										string currentText = textEditWidget.Text;  										int cursorIndex = textEditWidget.InternalTextEditWidget.CharIndexToInsertBefore;  										textEditWidget.Text = startingText;  										textEditWidget.InternalTextEditWidget.MarkAsStartingState();  										textEditWidget.Text = currentText;  										textEditWidget.InternalTextEditWidget.CharIndexToInsertBefore = cursorIndex;  									});  								}  							};    							stringEdit.ActualTextEditWidget.InternalTextEditWidget.AllSelected += (sender' e) =>  							{  								// select everything up to the mm (if present)  								InternalTextEditWidget textEditWidget = (InternalTextEditWidget)sender;  								int mMIndex = textEditWidget.Text.IndexOf("mm");  								if (mMIndex != -1)  								{  									textEditWidget.SetSelection(0' mMIndex - 1);  								}  							};    							content.AddChild(stringEdit);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.CHECK_BOX:  						{  							var checkBoxWidget = new CheckBox("")  							{  								Name = settingData.PresentationName + " Checkbox"'  								ToolTipText = settingData.HelpText'  								VAnchor = Agg.UI.VAnchor.ParentBottom'  								TextColor = ActiveTheme.Instance.PrimaryTextColor'  								Checked = sliceSettingValue == "1"  							};  							checkBoxWidget.Click += (sender' e) =>  							{  								// SetValue should only be called when the checkbox is clicked. If this code makes its way into checkstatechanged  								// we end up adding a key back into the dictionary after we call .ClearValue' resulting in the blue override bar reappearing after  								// clearing a useroverride with the red x  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' checkBoxWidget.Checked ? "1" : "0"' persistenceLayer);  							};  							checkBoxWidget.CheckedStateChanged += (s' e) =>  							{  								// Linked settings should be updated in all cases (user clicked checkbox' user clicked clear)  								foreach (var setSettingsData in settingData.SetSettingsOnChange)  								{  									string targetValue;  									if (setSettingsData.TryGetValue(checkBoxWidget.Checked ? "OnValue" : "OffValue"' out targetValue))  									{  										ActiveSliceSettings.Instance.SetValue(setSettingsData["TargetSetting"]' targetValue' persistenceLayer);  									}  								}    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(checkBoxWidget);    							settingsRow.ValueChanged = (text) =>  							{  								checkBoxWidget.Checked = text == "1";  							};  						}  						break;    					case SliceSettingData.DataEditTypes.STRING:  						{  							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: settingData.ShowAsOverride ? 120 : 200' tabIndex: tabIndexForItem++)  							{  								Name = settingData.PresentationName + " Edit"'  							};  							stringEdit.ToolTipText = settingData.HelpText;  							  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((TextEditWidget)sender).Text' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							dataArea.AddChild(stringEdit);    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.MULTI_LINE_TEXT:  						{  							string convertedNewLines = sliceSettingValue.Replace("\\n"' "\n");  							var stringEdit = new MHTextEditWidget(convertedNewLines' pixelWidth: 320' pixelHeight: multiLineEditHeight' multiLine: true' tabIndex: tabIndexForItem++' typeFace: ApplicationController.MonoSpacedTypeFace)  							{  								HAnchor = HAnchor.ParentLeftRight'  							};    							stringEdit.DrawFromHintedCache();    							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((TextEditWidget)sender).Text.Replace("\n"' "\\n")' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							nameArea.HAnchor = HAnchor.AbsolutePosition;  							nameArea.Width = 0;  							dataArea.AddChild(stringEdit);  							dataArea.HAnchor = HAnchor.ParentLeftRight;    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text.Replace("\\n"' "\n");  							};  						}  						break;    					case SliceSettingData.DataEditTypes.COM_PORT:  						{  #if __ANDROID__  							addControl = false;  #endif    							EventHandler localUnregisterEvents = null;    							bool canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect;  							// The COM_PORT control is unique in its approach to the SlicerConfigName. It uses "com_port" settings name to  							// bind to a context that will place it in the SliceSetting view but it binds its values to a machine  							// specific dictionary key that is not exposed in the UI. At runtime we lookup and store to '<machinename>_com_port'  							// ensuring that a single printer can be shared across different devices and we'll select the correct com port in each case  							var selectableOptions = new DropDownList("None".Localize()' maxHeight: 200)  							{  								ToolTipText = settingData.HelpText'  								Margin = new BorderDouble()'  								Name = "Serial Port Dropdown"'  								// Prevent droplist interaction when connected  								Enabled = canChangeComPort'  								TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150)'  								BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150)'  							};    							selectableOptions.Click += (s' e) =>  							{  								AddComMenuItems(settingData' persistenceLayer' settingsRow' selectableOptions);  							};    							AddComMenuItems(settingData' persistenceLayer' settingsRow' selectableOptions);    							dataArea.AddChild(selectableOptions);    							settingsRow.ValueChanged = (text) =>  							{  								// Lookup the machine specific comport value rather than the passed in text value  								selectableOptions.SelectedLabel = ActiveSliceSettings.Instance.Helpers.ComPort();  							};    							// Prevent droplist interaction when connected  							PrinterConnectionAndCommunication.Instance.CommunicationStateChanged.RegisterEvent((s' e) =>  							{  								canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect;  								selectableOptions.Enabled = canChangeComPort;  								selectableOptions.TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150);  								selectableOptions.BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150);  							}' ref localUnregisterEvents);    							// Release event listener on close  							selectableOptions.Closed += (s' e) =>  							{  								localUnregisterEvents?.Invoke(null' null);  							};  						}  						break;    					case SliceSettingData.DataEditTypes.LIST:  						{  							var selectableOptions = new DropDownList("None".Localize()' maxHeight: 200)  							{  								ToolTipText = settingData.HelpText'  								Margin = new BorderDouble()  							};    							foreach (string listItem in settingData.ExtraSettings.Split('''))  							{  								MenuItem newItem = selectableOptions.AddItem(listItem);  								if (newItem.Text == sliceSettingValue)  								{  									selectableOptions.SelectedLabel = sliceSettingValue;  								}    								newItem.Selected += (sender' e) =>  								{  									MenuItem menuItem = ((MenuItem)sender);  									ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' menuItem.Text' persistenceLayer);    									settingsRow.UpdateStyle();  								};  							}    							dataArea.AddChild(selectableOptions);    							settingsRow.ValueChanged = (text) =>  							{  								selectableOptions.SelectedLabel = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.HARDWARE_PRESENT:  						{  							var checkBoxWidget = new CheckBox("")  							{  								Name = settingData.PresentationName + " Checkbox"'  								ToolTipText = settingData.HelpText'  								VAnchor = Agg.UI.VAnchor.ParentBottom'  								TextColor = ActiveTheme.Instance.PrimaryTextColor'  								Checked = sliceSettingValue == "1"  							};    							checkBoxWidget.Click += (sender' e) =>  							{  								bool isChecked = ((CheckBox)sender).Checked;  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' isChecked ? "1" : "0"' persistenceLayer);    								settingsRow.UpdateStyle();  							};    							dataArea.AddChild(checkBoxWidget);    							settingsRow.ValueChanged = (text) =>  							{  								checkBoxWidget.Checked = text == "1";  							};  						}  						break;    					case SliceSettingData.DataEditTypes.VECTOR2:  						{  							string[] xyValueStrings = sliceSettingValue.Split(''');  							if (xyValueStrings.Length != 2)  							{  								xyValueStrings = new string[] { "0"' "0" };  							}    							double currentXValue;  							double.TryParse(xyValueStrings[0]' out currentXValue);    							var xEditWidget = new MHNumberEdit(currentXValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};    							double currentYValue;  							double.TryParse(xyValueStrings[1]' out currentYValue);    							var yEditWidget = new MHNumberEdit(currentYValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Margin = new BorderDouble(20' 0' 0' 0)'  							};    							xEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(xEditWidget);  							dataArea.AddChild(new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  							{  								VAnchor = VAnchor.ParentCenter'  								Margin = new BorderDouble(5' 0)'  							});    							yEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(yEditWidget);  							var yLabel = new GuiWidget()  							{  								VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  								Padding = new BorderDouble(5' 0)'  								HAnchor = HAnchor.ParentLeftRight'  							};  							yLabel.AddChild(new WrappedTextWidget("Y"' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));  							unitsArea.AddChild(yLabel);    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2;  								string[] xyValueStrings2 = text.Split(''');  								if (xyValueStrings2.Length != 2)  								{  									xyValueStrings2 = new string[] { "0"' "0" };  								}    								double.TryParse(xyValueStrings2[0]' out currentValue2);  								xEditWidget.ActuallNumberEdit.Value = currentValue2;    								double.TryParse(xyValueStrings2[1]' out currentValue2);  								yEditWidget.ActuallNumberEdit.Value = currentValue2;  							};    						}  						break;    					case SliceSettingData.DataEditTypes.OFFSET2:  						{  							Vector2 offset = ActiveSliceSettings.Instance.Helpers.ExtruderOffset(extruderIndex);    							var xEditWidget = new MHNumberEdit(offset.x' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  							};    							var yEditWidget = new MHNumberEdit(offset.y' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Margin = new BorderDouble(20' 0' 0' 0)'  							};    							xEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								int extruderIndexLocal = extruderIndex;  								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(xEditWidget);  							dataArea.AddChild(new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  							{  								VAnchor = VAnchor.ParentCenter'  								Margin = new BorderDouble(5' 0)'  							});    							yEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								int extruderIndexLocal = extruderIndex;  								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(yEditWidget);  							var yLabel = new GuiWidget()  							{  								Padding = new BorderDouble(5' 0)'  								HAnchor = HAnchor.ParentLeftRight'  								VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  							};  							yLabel.AddChild(new WrappedTextWidget("Y"' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));  							unitsArea.AddChild(yLabel);    							settingsRow.ValueChanged = (text) =>  							{  								Vector2 offset2 = ActiveSliceSettings.Instance.Helpers.ExtruderOffset(extruderIndex);  								xEditWidget.ActuallNumberEdit.Value = offset2.x;  								yEditWidget.ActuallNumberEdit.Value = offset2.y;  							};  						}  						break;    					default:  						var missingSetting = new TextWidget(String.Format("Missing the setting for '{0}'."' settingData.DataEditType.ToString()))  						{  							TextColor = ActiveTheme.Instance.PrimaryTextColor'  							BackgroundColor = RGBA_Bytes.Red  						};  						dataArea.AddChild(missingSetting);  						break;  				}  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The following statement contains a magic number: if (!PrinterSettings.KnownSettings.Contains(settingData.SlicerConfigName))  			{  				// the setting we think we are adding is not in the known settings it may have been deprecated  				TextWidget settingName = new TextWidget(String.Format("Setting '{0}' not found in known settings"' settingData.SlicerConfigName));  				settingName.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				//settingName.MinimumSize = new Vector2(minSettingNameWidth' settingName.MinimumSize.y);  				nameArea.AddChild(settingName);  				nameArea.BackgroundColor = RGBA_Bytes.Red;  			}  			else  			{  				int intEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int doubleEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int vectorXYEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int multiLineEditHeight = (int)(120 * GuiWidget.DeviceScale + .5);    				if (settingData.DataEditType != SliceSettingData.DataEditTypes.MULTI_LINE_TEXT)  				{  					var nameHolder = new GuiWidget()  					{  						Padding = new BorderDouble(0' 0' 5' 0)'  						VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  						HAnchor = HAnchor.ParentLeftRight'  					};    					nameHolder.AddChild(new WrappedTextWidget(settingData.PresentationName.Localize()' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor));    					nameArea.AddChild(nameHolder);  				}    				switch (settingData.DataEditType)  				{  					case SliceSettingData.DataEditTypes.INT:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();  							int currentValue;  							int.TryParse(sliceSettingValue' out currentValue);    							var intEditWidget = new MHNumberEdit(currentValue' pixelWidth: intEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Name = settingData.PresentationName + " Edit"'  							};  							intEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							content.AddChild(intEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' intEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								intEditWidget.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.DOUBLE:  						{  							double currentValue;  							double.TryParse(sliceSettingValue' out currentValue);    							var doubleEditWidget = new MHNumberEdit(currentValue' allowNegatives: true' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2 = 0;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.POSITIVE_DOUBLE:  						{  							const string multiValuesAreDiffernt = "-";  							FlowLayoutWidget content = new FlowLayoutWidget();    							var doubleEditWidget = new MHNumberEdit(0' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								Name = settingData.PresentationName + " Textbox"'  								SelectAllOnFocus = true  							};    							double currentValue;  							bool ChangesMultipleOtherSettings = settingData.SetSettingsOnChange.Count > 0;  							if (ChangesMultipleOtherSettings)  							{  								bool allTheSame = true;  								string setting = GetActiveValue(settingData.SetSettingsOnChange[0]["TargetSetting"]' layerCascade);  								for (int i = 1; i < settingData.SetSettingsOnChange.Count; i++)  								{  									string nextSetting = GetActiveValue(settingData.SetSettingsOnChange[i]["TargetSetting"]' layerCascade);  									if (setting != nextSetting)  									{  										allTheSame = false;  										break;  									}  								}    								if (allTheSame && setting.EndsWith("mm"))  								{  									double.TryParse(setting.Substring(0' setting.Length - 2)' out currentValue);  									doubleEditWidget.ActuallNumberEdit.Value = currentValue;  								}  								else  								{  									doubleEditWidget.ActuallNumberEdit.InternalNumberEdit.Text = multiValuesAreDiffernt;  								}  							}  							else // just set the setting normally  							{  								double.TryParse(sliceSettingValue' out currentValue);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue;  							}  							doubleEditWidget.ActuallNumberEdit.InternalTextEditWidget.MarkAsStartingState();  							  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								NumberEdit numberEdit = (NumberEdit)sender;  								// If this setting sets other settings' then do that.  								if (ChangesMultipleOtherSettings  									&& numberEdit.Text != multiValuesAreDiffernt)  								{  									{  										ActiveSliceSettings.Instance.SetValue(settingData.SetSettingsOnChange[0]["TargetSetting"]' numberEdit.Value.ToString() + "mm"' persistenceLayer);  									}  								}    								// also always save to the local setting  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' numberEdit.Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							content.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' doubleEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2 = 0;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.OFFSET:  						{  							double currentValue;  							double.TryParse(sliceSettingValue' out currentValue);  							var doubleEditWidget = new MHNumberEdit(currentValue' allowDecimals: true' allowNegatives: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true    							};  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.DOUBLE_OR_PERCENT:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();    							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: doubleEditWidth - 2' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								var textEditWidget = (TextEditWidget)sender;  								string text = textEditWidget.Text.Trim();    								bool isPercent = text.Contains("%");  								if (isPercent)  								{  									text = text.Substring(0' text.IndexOf("%"));  								}  								double result;  								double.TryParse(text' out result);  								text = result.ToString();  								if (isPercent)  								{  									text += "%";  								}  								textEditWidget.Text = text;  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' textEditWidget.Text' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							stringEdit.ActualTextEditWidget.InternalTextEditWidget.AllSelected += (sender' e) =>  							{  								// select everything up to the % (if present)  								InternalTextEditWidget textEditWidget = (InternalTextEditWidget)sender;  								int percentIndex = textEditWidget.Text.IndexOf("%");  								if (percentIndex != -1)  								{  									textEditWidget.SetSelection(0' percentIndex - 1);  								}  							};    							content.AddChild(stringEdit);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.INT_OR_MM:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();    							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: doubleEditWidth - 2' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};    							string startingText = stringEdit.Text;  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								TextEditWidget textEditWidget = (TextEditWidget)sender;  								// only validate when we lose focus  								if (!textEditWidget.ContainsFocus)  								{  									string text = textEditWidget.Text;  									text = text.Trim();  									bool isMm = text.Contains("mm");  									if (isMm)  									{  										text = text.Substring(0' text.IndexOf("mm"));  									}  									double result;  									double.TryParse(text' out result);  									text = result.ToString();  									if (isMm)  									{  										text += "mm";  									}  									else  									{  										result = (int)result;  										text = result.ToString();  									}  									textEditWidget.Text = text;  									startingText = stringEdit.Text;  								}  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' textEditWidget.Text' persistenceLayer);  								settingsRow.UpdateStyle();    								// make sure we are still looking for the final validation before saving.  								if (textEditWidget.ContainsFocus)  								{  									UiThread.RunOnIdle(() =>  									{  										string currentText = textEditWidget.Text;  										int cursorIndex = textEditWidget.InternalTextEditWidget.CharIndexToInsertBefore;  										textEditWidget.Text = startingText;  										textEditWidget.InternalTextEditWidget.MarkAsStartingState();  										textEditWidget.Text = currentText;  										textEditWidget.InternalTextEditWidget.CharIndexToInsertBefore = cursorIndex;  									});  								}  							};    							stringEdit.ActualTextEditWidget.InternalTextEditWidget.AllSelected += (sender' e) =>  							{  								// select everything up to the mm (if present)  								InternalTextEditWidget textEditWidget = (InternalTextEditWidget)sender;  								int mMIndex = textEditWidget.Text.IndexOf("mm");  								if (mMIndex != -1)  								{  									textEditWidget.SetSelection(0' mMIndex - 1);  								}  							};    							content.AddChild(stringEdit);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.CHECK_BOX:  						{  							var checkBoxWidget = new CheckBox("")  							{  								Name = settingData.PresentationName + " Checkbox"'  								ToolTipText = settingData.HelpText'  								VAnchor = Agg.UI.VAnchor.ParentBottom'  								TextColor = ActiveTheme.Instance.PrimaryTextColor'  								Checked = sliceSettingValue == "1"  							};  							checkBoxWidget.Click += (sender' e) =>  							{  								// SetValue should only be called when the checkbox is clicked. If this code makes its way into checkstatechanged  								// we end up adding a key back into the dictionary after we call .ClearValue' resulting in the blue override bar reappearing after  								// clearing a useroverride with the red x  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' checkBoxWidget.Checked ? "1" : "0"' persistenceLayer);  							};  							checkBoxWidget.CheckedStateChanged += (s' e) =>  							{  								// Linked settings should be updated in all cases (user clicked checkbox' user clicked clear)  								foreach (var setSettingsData in settingData.SetSettingsOnChange)  								{  									string targetValue;  									if (setSettingsData.TryGetValue(checkBoxWidget.Checked ? "OnValue" : "OffValue"' out targetValue))  									{  										ActiveSliceSettings.Instance.SetValue(setSettingsData["TargetSetting"]' targetValue' persistenceLayer);  									}  								}    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(checkBoxWidget);    							settingsRow.ValueChanged = (text) =>  							{  								checkBoxWidget.Checked = text == "1";  							};  						}  						break;    					case SliceSettingData.DataEditTypes.STRING:  						{  							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: settingData.ShowAsOverride ? 120 : 200' tabIndex: tabIndexForItem++)  							{  								Name = settingData.PresentationName + " Edit"'  							};  							stringEdit.ToolTipText = settingData.HelpText;  							  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((TextEditWidget)sender).Text' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							dataArea.AddChild(stringEdit);    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.MULTI_LINE_TEXT:  						{  							string convertedNewLines = sliceSettingValue.Replace("\\n"' "\n");  							var stringEdit = new MHTextEditWidget(convertedNewLines' pixelWidth: 320' pixelHeight: multiLineEditHeight' multiLine: true' tabIndex: tabIndexForItem++' typeFace: ApplicationController.MonoSpacedTypeFace)  							{  								HAnchor = HAnchor.ParentLeftRight'  							};    							stringEdit.DrawFromHintedCache();    							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((TextEditWidget)sender).Text.Replace("\n"' "\\n")' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							nameArea.HAnchor = HAnchor.AbsolutePosition;  							nameArea.Width = 0;  							dataArea.AddChild(stringEdit);  							dataArea.HAnchor = HAnchor.ParentLeftRight;    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text.Replace("\\n"' "\n");  							};  						}  						break;    					case SliceSettingData.DataEditTypes.COM_PORT:  						{  #if __ANDROID__  							addControl = false;  #endif    							EventHandler localUnregisterEvents = null;    							bool canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect;  							// The COM_PORT control is unique in its approach to the SlicerConfigName. It uses "com_port" settings name to  							// bind to a context that will place it in the SliceSetting view but it binds its values to a machine  							// specific dictionary key that is not exposed in the UI. At runtime we lookup and store to '<machinename>_com_port'  							// ensuring that a single printer can be shared across different devices and we'll select the correct com port in each case  							var selectableOptions = new DropDownList("None".Localize()' maxHeight: 200)  							{  								ToolTipText = settingData.HelpText'  								Margin = new BorderDouble()'  								Name = "Serial Port Dropdown"'  								// Prevent droplist interaction when connected  								Enabled = canChangeComPort'  								TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150)'  								BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150)'  							};    							selectableOptions.Click += (s' e) =>  							{  								AddComMenuItems(settingData' persistenceLayer' settingsRow' selectableOptions);  							};    							AddComMenuItems(settingData' persistenceLayer' settingsRow' selectableOptions);    							dataArea.AddChild(selectableOptions);    							settingsRow.ValueChanged = (text) =>  							{  								// Lookup the machine specific comport value rather than the passed in text value  								selectableOptions.SelectedLabel = ActiveSliceSettings.Instance.Helpers.ComPort();  							};    							// Prevent droplist interaction when connected  							PrinterConnectionAndCommunication.Instance.CommunicationStateChanged.RegisterEvent((s' e) =>  							{  								canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect;  								selectableOptions.Enabled = canChangeComPort;  								selectableOptions.TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150);  								selectableOptions.BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150);  							}' ref localUnregisterEvents);    							// Release event listener on close  							selectableOptions.Closed += (s' e) =>  							{  								localUnregisterEvents?.Invoke(null' null);  							};  						}  						break;    					case SliceSettingData.DataEditTypes.LIST:  						{  							var selectableOptions = new DropDownList("None".Localize()' maxHeight: 200)  							{  								ToolTipText = settingData.HelpText'  								Margin = new BorderDouble()  							};    							foreach (string listItem in settingData.ExtraSettings.Split('''))  							{  								MenuItem newItem = selectableOptions.AddItem(listItem);  								if (newItem.Text == sliceSettingValue)  								{  									selectableOptions.SelectedLabel = sliceSettingValue;  								}    								newItem.Selected += (sender' e) =>  								{  									MenuItem menuItem = ((MenuItem)sender);  									ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' menuItem.Text' persistenceLayer);    									settingsRow.UpdateStyle();  								};  							}    							dataArea.AddChild(selectableOptions);    							settingsRow.ValueChanged = (text) =>  							{  								selectableOptions.SelectedLabel = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.HARDWARE_PRESENT:  						{  							var checkBoxWidget = new CheckBox("")  							{  								Name = settingData.PresentationName + " Checkbox"'  								ToolTipText = settingData.HelpText'  								VAnchor = Agg.UI.VAnchor.ParentBottom'  								TextColor = ActiveTheme.Instance.PrimaryTextColor'  								Checked = sliceSettingValue == "1"  							};    							checkBoxWidget.Click += (sender' e) =>  							{  								bool isChecked = ((CheckBox)sender).Checked;  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' isChecked ? "1" : "0"' persistenceLayer);    								settingsRow.UpdateStyle();  							};    							dataArea.AddChild(checkBoxWidget);    							settingsRow.ValueChanged = (text) =>  							{  								checkBoxWidget.Checked = text == "1";  							};  						}  						break;    					case SliceSettingData.DataEditTypes.VECTOR2:  						{  							string[] xyValueStrings = sliceSettingValue.Split(''');  							if (xyValueStrings.Length != 2)  							{  								xyValueStrings = new string[] { "0"' "0" };  							}    							double currentXValue;  							double.TryParse(xyValueStrings[0]' out currentXValue);    							var xEditWidget = new MHNumberEdit(currentXValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};    							double currentYValue;  							double.TryParse(xyValueStrings[1]' out currentYValue);    							var yEditWidget = new MHNumberEdit(currentYValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Margin = new BorderDouble(20' 0' 0' 0)'  							};    							xEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(xEditWidget);  							dataArea.AddChild(new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  							{  								VAnchor = VAnchor.ParentCenter'  								Margin = new BorderDouble(5' 0)'  							});    							yEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(yEditWidget);  							var yLabel = new GuiWidget()  							{  								VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  								Padding = new BorderDouble(5' 0)'  								HAnchor = HAnchor.ParentLeftRight'  							};  							yLabel.AddChild(new WrappedTextWidget("Y"' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));  							unitsArea.AddChild(yLabel);    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2;  								string[] xyValueStrings2 = text.Split(''');  								if (xyValueStrings2.Length != 2)  								{  									xyValueStrings2 = new string[] { "0"' "0" };  								}    								double.TryParse(xyValueStrings2[0]' out currentValue2);  								xEditWidget.ActuallNumberEdit.Value = currentValue2;    								double.TryParse(xyValueStrings2[1]' out currentValue2);  								yEditWidget.ActuallNumberEdit.Value = currentValue2;  							};    						}  						break;    					case SliceSettingData.DataEditTypes.OFFSET2:  						{  							Vector2 offset = ActiveSliceSettings.Instance.Helpers.ExtruderOffset(extruderIndex);    							var xEditWidget = new MHNumberEdit(offset.x' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  							};    							var yEditWidget = new MHNumberEdit(offset.y' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Margin = new BorderDouble(20' 0' 0' 0)'  							};    							xEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								int extruderIndexLocal = extruderIndex;  								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(xEditWidget);  							dataArea.AddChild(new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  							{  								VAnchor = VAnchor.ParentCenter'  								Margin = new BorderDouble(5' 0)'  							});    							yEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								int extruderIndexLocal = extruderIndex;  								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(yEditWidget);  							var yLabel = new GuiWidget()  							{  								Padding = new BorderDouble(5' 0)'  								HAnchor = HAnchor.ParentLeftRight'  								VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  							};  							yLabel.AddChild(new WrappedTextWidget("Y"' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));  							unitsArea.AddChild(yLabel);    							settingsRow.ValueChanged = (text) =>  							{  								Vector2 offset2 = ActiveSliceSettings.Instance.Helpers.ExtruderOffset(extruderIndex);  								xEditWidget.ActuallNumberEdit.Value = offset2.x;  								yEditWidget.ActuallNumberEdit.Value = offset2.y;  							};  						}  						break;    					default:  						var missingSetting = new TextWidget(String.Format("Missing the setting for '{0}'."' settingData.DataEditType.ToString()))  						{  							TextColor = ActiveTheme.Instance.PrimaryTextColor'  							BackgroundColor = RGBA_Bytes.Red  						};  						dataArea.AddChild(missingSetting);  						break;  				}  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The following statement contains a magic number: if (!PrinterSettings.KnownSettings.Contains(settingData.SlicerConfigName))  			{  				// the setting we think we are adding is not in the known settings it may have been deprecated  				TextWidget settingName = new TextWidget(String.Format("Setting '{0}' not found in known settings"' settingData.SlicerConfigName));  				settingName.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				//settingName.MinimumSize = new Vector2(minSettingNameWidth' settingName.MinimumSize.y);  				nameArea.AddChild(settingName);  				nameArea.BackgroundColor = RGBA_Bytes.Red;  			}  			else  			{  				int intEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int doubleEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int vectorXYEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int multiLineEditHeight = (int)(120 * GuiWidget.DeviceScale + .5);    				if (settingData.DataEditType != SliceSettingData.DataEditTypes.MULTI_LINE_TEXT)  				{  					var nameHolder = new GuiWidget()  					{  						Padding = new BorderDouble(0' 0' 5' 0)'  						VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  						HAnchor = HAnchor.ParentLeftRight'  					};    					nameHolder.AddChild(new WrappedTextWidget(settingData.PresentationName.Localize()' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor));    					nameArea.AddChild(nameHolder);  				}    				switch (settingData.DataEditType)  				{  					case SliceSettingData.DataEditTypes.INT:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();  							int currentValue;  							int.TryParse(sliceSettingValue' out currentValue);    							var intEditWidget = new MHNumberEdit(currentValue' pixelWidth: intEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Name = settingData.PresentationName + " Edit"'  							};  							intEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							content.AddChild(intEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' intEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								intEditWidget.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.DOUBLE:  						{  							double currentValue;  							double.TryParse(sliceSettingValue' out currentValue);    							var doubleEditWidget = new MHNumberEdit(currentValue' allowNegatives: true' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2 = 0;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.POSITIVE_DOUBLE:  						{  							const string multiValuesAreDiffernt = "-";  							FlowLayoutWidget content = new FlowLayoutWidget();    							var doubleEditWidget = new MHNumberEdit(0' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								Name = settingData.PresentationName + " Textbox"'  								SelectAllOnFocus = true  							};    							double currentValue;  							bool ChangesMultipleOtherSettings = settingData.SetSettingsOnChange.Count > 0;  							if (ChangesMultipleOtherSettings)  							{  								bool allTheSame = true;  								string setting = GetActiveValue(settingData.SetSettingsOnChange[0]["TargetSetting"]' layerCascade);  								for (int i = 1; i < settingData.SetSettingsOnChange.Count; i++)  								{  									string nextSetting = GetActiveValue(settingData.SetSettingsOnChange[i]["TargetSetting"]' layerCascade);  									if (setting != nextSetting)  									{  										allTheSame = false;  										break;  									}  								}    								if (allTheSame && setting.EndsWith("mm"))  								{  									double.TryParse(setting.Substring(0' setting.Length - 2)' out currentValue);  									doubleEditWidget.ActuallNumberEdit.Value = currentValue;  								}  								else  								{  									doubleEditWidget.ActuallNumberEdit.InternalNumberEdit.Text = multiValuesAreDiffernt;  								}  							}  							else // just set the setting normally  							{  								double.TryParse(sliceSettingValue' out currentValue);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue;  							}  							doubleEditWidget.ActuallNumberEdit.InternalTextEditWidget.MarkAsStartingState();  							  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								NumberEdit numberEdit = (NumberEdit)sender;  								// If this setting sets other settings' then do that.  								if (ChangesMultipleOtherSettings  									&& numberEdit.Text != multiValuesAreDiffernt)  								{  									{  										ActiveSliceSettings.Instance.SetValue(settingData.SetSettingsOnChange[0]["TargetSetting"]' numberEdit.Value.ToString() + "mm"' persistenceLayer);  									}  								}    								// also always save to the local setting  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' numberEdit.Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							content.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' doubleEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2 = 0;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.OFFSET:  						{  							double currentValue;  							double.TryParse(sliceSettingValue' out currentValue);  							var doubleEditWidget = new MHNumberEdit(currentValue' allowDecimals: true' allowNegatives: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true    							};  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.DOUBLE_OR_PERCENT:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();    							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: doubleEditWidth - 2' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								var textEditWidget = (TextEditWidget)sender;  								string text = textEditWidget.Text.Trim();    								bool isPercent = text.Contains("%");  								if (isPercent)  								{  									text = text.Substring(0' text.IndexOf("%"));  								}  								double result;  								double.TryParse(text' out result);  								text = result.ToString();  								if (isPercent)  								{  									text += "%";  								}  								textEditWidget.Text = text;  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' textEditWidget.Text' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							stringEdit.ActualTextEditWidget.InternalTextEditWidget.AllSelected += (sender' e) =>  							{  								// select everything up to the % (if present)  								InternalTextEditWidget textEditWidget = (InternalTextEditWidget)sender;  								int percentIndex = textEditWidget.Text.IndexOf("%");  								if (percentIndex != -1)  								{  									textEditWidget.SetSelection(0' percentIndex - 1);  								}  							};    							content.AddChild(stringEdit);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.INT_OR_MM:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();    							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: doubleEditWidth - 2' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};    							string startingText = stringEdit.Text;  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								TextEditWidget textEditWidget = (TextEditWidget)sender;  								// only validate when we lose focus  								if (!textEditWidget.ContainsFocus)  								{  									string text = textEditWidget.Text;  									text = text.Trim();  									bool isMm = text.Contains("mm");  									if (isMm)  									{  										text = text.Substring(0' text.IndexOf("mm"));  									}  									double result;  									double.TryParse(text' out result);  									text = result.ToString();  									if (isMm)  									{  										text += "mm";  									}  									else  									{  										result = (int)result;  										text = result.ToString();  									}  									textEditWidget.Text = text;  									startingText = stringEdit.Text;  								}  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' textEditWidget.Text' persistenceLayer);  								settingsRow.UpdateStyle();    								// make sure we are still looking for the final validation before saving.  								if (textEditWidget.ContainsFocus)  								{  									UiThread.RunOnIdle(() =>  									{  										string currentText = textEditWidget.Text;  										int cursorIndex = textEditWidget.InternalTextEditWidget.CharIndexToInsertBefore;  										textEditWidget.Text = startingText;  										textEditWidget.InternalTextEditWidget.MarkAsStartingState();  										textEditWidget.Text = currentText;  										textEditWidget.InternalTextEditWidget.CharIndexToInsertBefore = cursorIndex;  									});  								}  							};    							stringEdit.ActualTextEditWidget.InternalTextEditWidget.AllSelected += (sender' e) =>  							{  								// select everything up to the mm (if present)  								InternalTextEditWidget textEditWidget = (InternalTextEditWidget)sender;  								int mMIndex = textEditWidget.Text.IndexOf("mm");  								if (mMIndex != -1)  								{  									textEditWidget.SetSelection(0' mMIndex - 1);  								}  							};    							content.AddChild(stringEdit);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.CHECK_BOX:  						{  							var checkBoxWidget = new CheckBox("")  							{  								Name = settingData.PresentationName + " Checkbox"'  								ToolTipText = settingData.HelpText'  								VAnchor = Agg.UI.VAnchor.ParentBottom'  								TextColor = ActiveTheme.Instance.PrimaryTextColor'  								Checked = sliceSettingValue == "1"  							};  							checkBoxWidget.Click += (sender' e) =>  							{  								// SetValue should only be called when the checkbox is clicked. If this code makes its way into checkstatechanged  								// we end up adding a key back into the dictionary after we call .ClearValue' resulting in the blue override bar reappearing after  								// clearing a useroverride with the red x  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' checkBoxWidget.Checked ? "1" : "0"' persistenceLayer);  							};  							checkBoxWidget.CheckedStateChanged += (s' e) =>  							{  								// Linked settings should be updated in all cases (user clicked checkbox' user clicked clear)  								foreach (var setSettingsData in settingData.SetSettingsOnChange)  								{  									string targetValue;  									if (setSettingsData.TryGetValue(checkBoxWidget.Checked ? "OnValue" : "OffValue"' out targetValue))  									{  										ActiveSliceSettings.Instance.SetValue(setSettingsData["TargetSetting"]' targetValue' persistenceLayer);  									}  								}    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(checkBoxWidget);    							settingsRow.ValueChanged = (text) =>  							{  								checkBoxWidget.Checked = text == "1";  							};  						}  						break;    					case SliceSettingData.DataEditTypes.STRING:  						{  							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: settingData.ShowAsOverride ? 120 : 200' tabIndex: tabIndexForItem++)  							{  								Name = settingData.PresentationName + " Edit"'  							};  							stringEdit.ToolTipText = settingData.HelpText;  							  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((TextEditWidget)sender).Text' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							dataArea.AddChild(stringEdit);    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.MULTI_LINE_TEXT:  						{  							string convertedNewLines = sliceSettingValue.Replace("\\n"' "\n");  							var stringEdit = new MHTextEditWidget(convertedNewLines' pixelWidth: 320' pixelHeight: multiLineEditHeight' multiLine: true' tabIndex: tabIndexForItem++' typeFace: ApplicationController.MonoSpacedTypeFace)  							{  								HAnchor = HAnchor.ParentLeftRight'  							};    							stringEdit.DrawFromHintedCache();    							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((TextEditWidget)sender).Text.Replace("\n"' "\\n")' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							nameArea.HAnchor = HAnchor.AbsolutePosition;  							nameArea.Width = 0;  							dataArea.AddChild(stringEdit);  							dataArea.HAnchor = HAnchor.ParentLeftRight;    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text.Replace("\\n"' "\n");  							};  						}  						break;    					case SliceSettingData.DataEditTypes.COM_PORT:  						{  #if __ANDROID__  							addControl = false;  #endif    							EventHandler localUnregisterEvents = null;    							bool canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect;  							// The COM_PORT control is unique in its approach to the SlicerConfigName. It uses "com_port" settings name to  							// bind to a context that will place it in the SliceSetting view but it binds its values to a machine  							// specific dictionary key that is not exposed in the UI. At runtime we lookup and store to '<machinename>_com_port'  							// ensuring that a single printer can be shared across different devices and we'll select the correct com port in each case  							var selectableOptions = new DropDownList("None".Localize()' maxHeight: 200)  							{  								ToolTipText = settingData.HelpText'  								Margin = new BorderDouble()'  								Name = "Serial Port Dropdown"'  								// Prevent droplist interaction when connected  								Enabled = canChangeComPort'  								TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150)'  								BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150)'  							};    							selectableOptions.Click += (s' e) =>  							{  								AddComMenuItems(settingData' persistenceLayer' settingsRow' selectableOptions);  							};    							AddComMenuItems(settingData' persistenceLayer' settingsRow' selectableOptions);    							dataArea.AddChild(selectableOptions);    							settingsRow.ValueChanged = (text) =>  							{  								// Lookup the machine specific comport value rather than the passed in text value  								selectableOptions.SelectedLabel = ActiveSliceSettings.Instance.Helpers.ComPort();  							};    							// Prevent droplist interaction when connected  							PrinterConnectionAndCommunication.Instance.CommunicationStateChanged.RegisterEvent((s' e) =>  							{  								canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect;  								selectableOptions.Enabled = canChangeComPort;  								selectableOptions.TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150);  								selectableOptions.BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150);  							}' ref localUnregisterEvents);    							// Release event listener on close  							selectableOptions.Closed += (s' e) =>  							{  								localUnregisterEvents?.Invoke(null' null);  							};  						}  						break;    					case SliceSettingData.DataEditTypes.LIST:  						{  							var selectableOptions = new DropDownList("None".Localize()' maxHeight: 200)  							{  								ToolTipText = settingData.HelpText'  								Margin = new BorderDouble()  							};    							foreach (string listItem in settingData.ExtraSettings.Split('''))  							{  								MenuItem newItem = selectableOptions.AddItem(listItem);  								if (newItem.Text == sliceSettingValue)  								{  									selectableOptions.SelectedLabel = sliceSettingValue;  								}    								newItem.Selected += (sender' e) =>  								{  									MenuItem menuItem = ((MenuItem)sender);  									ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' menuItem.Text' persistenceLayer);    									settingsRow.UpdateStyle();  								};  							}    							dataArea.AddChild(selectableOptions);    							settingsRow.ValueChanged = (text) =>  							{  								selectableOptions.SelectedLabel = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.HARDWARE_PRESENT:  						{  							var checkBoxWidget = new CheckBox("")  							{  								Name = settingData.PresentationName + " Checkbox"'  								ToolTipText = settingData.HelpText'  								VAnchor = Agg.UI.VAnchor.ParentBottom'  								TextColor = ActiveTheme.Instance.PrimaryTextColor'  								Checked = sliceSettingValue == "1"  							};    							checkBoxWidget.Click += (sender' e) =>  							{  								bool isChecked = ((CheckBox)sender).Checked;  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' isChecked ? "1" : "0"' persistenceLayer);    								settingsRow.UpdateStyle();  							};    							dataArea.AddChild(checkBoxWidget);    							settingsRow.ValueChanged = (text) =>  							{  								checkBoxWidget.Checked = text == "1";  							};  						}  						break;    					case SliceSettingData.DataEditTypes.VECTOR2:  						{  							string[] xyValueStrings = sliceSettingValue.Split(''');  							if (xyValueStrings.Length != 2)  							{  								xyValueStrings = new string[] { "0"' "0" };  							}    							double currentXValue;  							double.TryParse(xyValueStrings[0]' out currentXValue);    							var xEditWidget = new MHNumberEdit(currentXValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};    							double currentYValue;  							double.TryParse(xyValueStrings[1]' out currentYValue);    							var yEditWidget = new MHNumberEdit(currentYValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Margin = new BorderDouble(20' 0' 0' 0)'  							};    							xEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(xEditWidget);  							dataArea.AddChild(new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  							{  								VAnchor = VAnchor.ParentCenter'  								Margin = new BorderDouble(5' 0)'  							});    							yEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(yEditWidget);  							var yLabel = new GuiWidget()  							{  								VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  								Padding = new BorderDouble(5' 0)'  								HAnchor = HAnchor.ParentLeftRight'  							};  							yLabel.AddChild(new WrappedTextWidget("Y"' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));  							unitsArea.AddChild(yLabel);    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2;  								string[] xyValueStrings2 = text.Split(''');  								if (xyValueStrings2.Length != 2)  								{  									xyValueStrings2 = new string[] { "0"' "0" };  								}    								double.TryParse(xyValueStrings2[0]' out currentValue2);  								xEditWidget.ActuallNumberEdit.Value = currentValue2;    								double.TryParse(xyValueStrings2[1]' out currentValue2);  								yEditWidget.ActuallNumberEdit.Value = currentValue2;  							};    						}  						break;    					case SliceSettingData.DataEditTypes.OFFSET2:  						{  							Vector2 offset = ActiveSliceSettings.Instance.Helpers.ExtruderOffset(extruderIndex);    							var xEditWidget = new MHNumberEdit(offset.x' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  							};    							var yEditWidget = new MHNumberEdit(offset.y' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Margin = new BorderDouble(20' 0' 0' 0)'  							};    							xEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								int extruderIndexLocal = extruderIndex;  								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(xEditWidget);  							dataArea.AddChild(new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  							{  								VAnchor = VAnchor.ParentCenter'  								Margin = new BorderDouble(5' 0)'  							});    							yEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								int extruderIndexLocal = extruderIndex;  								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(yEditWidget);  							var yLabel = new GuiWidget()  							{  								Padding = new BorderDouble(5' 0)'  								HAnchor = HAnchor.ParentLeftRight'  								VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  							};  							yLabel.AddChild(new WrappedTextWidget("Y"' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));  							unitsArea.AddChild(yLabel);    							settingsRow.ValueChanged = (text) =>  							{  								Vector2 offset2 = ActiveSliceSettings.Instance.Helpers.ExtruderOffset(extruderIndex);  								xEditWidget.ActuallNumberEdit.Value = offset2.x;  								yEditWidget.ActuallNumberEdit.Value = offset2.y;  							};  						}  						break;    					default:  						var missingSetting = new TextWidget(String.Format("Missing the setting for '{0}'."' settingData.DataEditType.ToString()))  						{  							TextColor = ActiveTheme.Instance.PrimaryTextColor'  							BackgroundColor = RGBA_Bytes.Red  						};  						dataArea.AddChild(missingSetting);  						break;  				}  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The following statement contains a magic number: if (!PrinterSettings.KnownSettings.Contains(settingData.SlicerConfigName))  			{  				// the setting we think we are adding is not in the known settings it may have been deprecated  				TextWidget settingName = new TextWidget(String.Format("Setting '{0}' not found in known settings"' settingData.SlicerConfigName));  				settingName.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				//settingName.MinimumSize = new Vector2(minSettingNameWidth' settingName.MinimumSize.y);  				nameArea.AddChild(settingName);  				nameArea.BackgroundColor = RGBA_Bytes.Red;  			}  			else  			{  				int intEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int doubleEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int vectorXYEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int multiLineEditHeight = (int)(120 * GuiWidget.DeviceScale + .5);    				if (settingData.DataEditType != SliceSettingData.DataEditTypes.MULTI_LINE_TEXT)  				{  					var nameHolder = new GuiWidget()  					{  						Padding = new BorderDouble(0' 0' 5' 0)'  						VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  						HAnchor = HAnchor.ParentLeftRight'  					};    					nameHolder.AddChild(new WrappedTextWidget(settingData.PresentationName.Localize()' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor));    					nameArea.AddChild(nameHolder);  				}    				switch (settingData.DataEditType)  				{  					case SliceSettingData.DataEditTypes.INT:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();  							int currentValue;  							int.TryParse(sliceSettingValue' out currentValue);    							var intEditWidget = new MHNumberEdit(currentValue' pixelWidth: intEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Name = settingData.PresentationName + " Edit"'  							};  							intEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							content.AddChild(intEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' intEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								intEditWidget.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.DOUBLE:  						{  							double currentValue;  							double.TryParse(sliceSettingValue' out currentValue);    							var doubleEditWidget = new MHNumberEdit(currentValue' allowNegatives: true' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2 = 0;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.POSITIVE_DOUBLE:  						{  							const string multiValuesAreDiffernt = "-";  							FlowLayoutWidget content = new FlowLayoutWidget();    							var doubleEditWidget = new MHNumberEdit(0' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								Name = settingData.PresentationName + " Textbox"'  								SelectAllOnFocus = true  							};    							double currentValue;  							bool ChangesMultipleOtherSettings = settingData.SetSettingsOnChange.Count > 0;  							if (ChangesMultipleOtherSettings)  							{  								bool allTheSame = true;  								string setting = GetActiveValue(settingData.SetSettingsOnChange[0]["TargetSetting"]' layerCascade);  								for (int i = 1; i < settingData.SetSettingsOnChange.Count; i++)  								{  									string nextSetting = GetActiveValue(settingData.SetSettingsOnChange[i]["TargetSetting"]' layerCascade);  									if (setting != nextSetting)  									{  										allTheSame = false;  										break;  									}  								}    								if (allTheSame && setting.EndsWith("mm"))  								{  									double.TryParse(setting.Substring(0' setting.Length - 2)' out currentValue);  									doubleEditWidget.ActuallNumberEdit.Value = currentValue;  								}  								else  								{  									doubleEditWidget.ActuallNumberEdit.InternalNumberEdit.Text = multiValuesAreDiffernt;  								}  							}  							else // just set the setting normally  							{  								double.TryParse(sliceSettingValue' out currentValue);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue;  							}  							doubleEditWidget.ActuallNumberEdit.InternalTextEditWidget.MarkAsStartingState();  							  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								NumberEdit numberEdit = (NumberEdit)sender;  								// If this setting sets other settings' then do that.  								if (ChangesMultipleOtherSettings  									&& numberEdit.Text != multiValuesAreDiffernt)  								{  									{  										ActiveSliceSettings.Instance.SetValue(settingData.SetSettingsOnChange[0]["TargetSetting"]' numberEdit.Value.ToString() + "mm"' persistenceLayer);  									}  								}    								// also always save to the local setting  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' numberEdit.Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							content.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' doubleEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2 = 0;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.OFFSET:  						{  							double currentValue;  							double.TryParse(sliceSettingValue' out currentValue);  							var doubleEditWidget = new MHNumberEdit(currentValue' allowDecimals: true' allowNegatives: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true    							};  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.DOUBLE_OR_PERCENT:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();    							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: doubleEditWidth - 2' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								var textEditWidget = (TextEditWidget)sender;  								string text = textEditWidget.Text.Trim();    								bool isPercent = text.Contains("%");  								if (isPercent)  								{  									text = text.Substring(0' text.IndexOf("%"));  								}  								double result;  								double.TryParse(text' out result);  								text = result.ToString();  								if (isPercent)  								{  									text += "%";  								}  								textEditWidget.Text = text;  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' textEditWidget.Text' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							stringEdit.ActualTextEditWidget.InternalTextEditWidget.AllSelected += (sender' e) =>  							{  								// select everything up to the % (if present)  								InternalTextEditWidget textEditWidget = (InternalTextEditWidget)sender;  								int percentIndex = textEditWidget.Text.IndexOf("%");  								if (percentIndex != -1)  								{  									textEditWidget.SetSelection(0' percentIndex - 1);  								}  							};    							content.AddChild(stringEdit);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.INT_OR_MM:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();    							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: doubleEditWidth - 2' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};    							string startingText = stringEdit.Text;  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								TextEditWidget textEditWidget = (TextEditWidget)sender;  								// only validate when we lose focus  								if (!textEditWidget.ContainsFocus)  								{  									string text = textEditWidget.Text;  									text = text.Trim();  									bool isMm = text.Contains("mm");  									if (isMm)  									{  										text = text.Substring(0' text.IndexOf("mm"));  									}  									double result;  									double.TryParse(text' out result);  									text = result.ToString();  									if (isMm)  									{  										text += "mm";  									}  									else  									{  										result = (int)result;  										text = result.ToString();  									}  									textEditWidget.Text = text;  									startingText = stringEdit.Text;  								}  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' textEditWidget.Text' persistenceLayer);  								settingsRow.UpdateStyle();    								// make sure we are still looking for the final validation before saving.  								if (textEditWidget.ContainsFocus)  								{  									UiThread.RunOnIdle(() =>  									{  										string currentText = textEditWidget.Text;  										int cursorIndex = textEditWidget.InternalTextEditWidget.CharIndexToInsertBefore;  										textEditWidget.Text = startingText;  										textEditWidget.InternalTextEditWidget.MarkAsStartingState();  										textEditWidget.Text = currentText;  										textEditWidget.InternalTextEditWidget.CharIndexToInsertBefore = cursorIndex;  									});  								}  							};    							stringEdit.ActualTextEditWidget.InternalTextEditWidget.AllSelected += (sender' e) =>  							{  								// select everything up to the mm (if present)  								InternalTextEditWidget textEditWidget = (InternalTextEditWidget)sender;  								int mMIndex = textEditWidget.Text.IndexOf("mm");  								if (mMIndex != -1)  								{  									textEditWidget.SetSelection(0' mMIndex - 1);  								}  							};    							content.AddChild(stringEdit);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.CHECK_BOX:  						{  							var checkBoxWidget = new CheckBox("")  							{  								Name = settingData.PresentationName + " Checkbox"'  								ToolTipText = settingData.HelpText'  								VAnchor = Agg.UI.VAnchor.ParentBottom'  								TextColor = ActiveTheme.Instance.PrimaryTextColor'  								Checked = sliceSettingValue == "1"  							};  							checkBoxWidget.Click += (sender' e) =>  							{  								// SetValue should only be called when the checkbox is clicked. If this code makes its way into checkstatechanged  								// we end up adding a key back into the dictionary after we call .ClearValue' resulting in the blue override bar reappearing after  								// clearing a useroverride with the red x  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' checkBoxWidget.Checked ? "1" : "0"' persistenceLayer);  							};  							checkBoxWidget.CheckedStateChanged += (s' e) =>  							{  								// Linked settings should be updated in all cases (user clicked checkbox' user clicked clear)  								foreach (var setSettingsData in settingData.SetSettingsOnChange)  								{  									string targetValue;  									if (setSettingsData.TryGetValue(checkBoxWidget.Checked ? "OnValue" : "OffValue"' out targetValue))  									{  										ActiveSliceSettings.Instance.SetValue(setSettingsData["TargetSetting"]' targetValue' persistenceLayer);  									}  								}    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(checkBoxWidget);    							settingsRow.ValueChanged = (text) =>  							{  								checkBoxWidget.Checked = text == "1";  							};  						}  						break;    					case SliceSettingData.DataEditTypes.STRING:  						{  							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: settingData.ShowAsOverride ? 120 : 200' tabIndex: tabIndexForItem++)  							{  								Name = settingData.PresentationName + " Edit"'  							};  							stringEdit.ToolTipText = settingData.HelpText;  							  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((TextEditWidget)sender).Text' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							dataArea.AddChild(stringEdit);    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.MULTI_LINE_TEXT:  						{  							string convertedNewLines = sliceSettingValue.Replace("\\n"' "\n");  							var stringEdit = new MHTextEditWidget(convertedNewLines' pixelWidth: 320' pixelHeight: multiLineEditHeight' multiLine: true' tabIndex: tabIndexForItem++' typeFace: ApplicationController.MonoSpacedTypeFace)  							{  								HAnchor = HAnchor.ParentLeftRight'  							};    							stringEdit.DrawFromHintedCache();    							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((TextEditWidget)sender).Text.Replace("\n"' "\\n")' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							nameArea.HAnchor = HAnchor.AbsolutePosition;  							nameArea.Width = 0;  							dataArea.AddChild(stringEdit);  							dataArea.HAnchor = HAnchor.ParentLeftRight;    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text.Replace("\\n"' "\n");  							};  						}  						break;    					case SliceSettingData.DataEditTypes.COM_PORT:  						{  #if __ANDROID__  							addControl = false;  #endif    							EventHandler localUnregisterEvents = null;    							bool canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect;  							// The COM_PORT control is unique in its approach to the SlicerConfigName. It uses "com_port" settings name to  							// bind to a context that will place it in the SliceSetting view but it binds its values to a machine  							// specific dictionary key that is not exposed in the UI. At runtime we lookup and store to '<machinename>_com_port'  							// ensuring that a single printer can be shared across different devices and we'll select the correct com port in each case  							var selectableOptions = new DropDownList("None".Localize()' maxHeight: 200)  							{  								ToolTipText = settingData.HelpText'  								Margin = new BorderDouble()'  								Name = "Serial Port Dropdown"'  								// Prevent droplist interaction when connected  								Enabled = canChangeComPort'  								TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150)'  								BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150)'  							};    							selectableOptions.Click += (s' e) =>  							{  								AddComMenuItems(settingData' persistenceLayer' settingsRow' selectableOptions);  							};    							AddComMenuItems(settingData' persistenceLayer' settingsRow' selectableOptions);    							dataArea.AddChild(selectableOptions);    							settingsRow.ValueChanged = (text) =>  							{  								// Lookup the machine specific comport value rather than the passed in text value  								selectableOptions.SelectedLabel = ActiveSliceSettings.Instance.Helpers.ComPort();  							};    							// Prevent droplist interaction when connected  							PrinterConnectionAndCommunication.Instance.CommunicationStateChanged.RegisterEvent((s' e) =>  							{  								canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect;  								selectableOptions.Enabled = canChangeComPort;  								selectableOptions.TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150);  								selectableOptions.BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150);  							}' ref localUnregisterEvents);    							// Release event listener on close  							selectableOptions.Closed += (s' e) =>  							{  								localUnregisterEvents?.Invoke(null' null);  							};  						}  						break;    					case SliceSettingData.DataEditTypes.LIST:  						{  							var selectableOptions = new DropDownList("None".Localize()' maxHeight: 200)  							{  								ToolTipText = settingData.HelpText'  								Margin = new BorderDouble()  							};    							foreach (string listItem in settingData.ExtraSettings.Split('''))  							{  								MenuItem newItem = selectableOptions.AddItem(listItem);  								if (newItem.Text == sliceSettingValue)  								{  									selectableOptions.SelectedLabel = sliceSettingValue;  								}    								newItem.Selected += (sender' e) =>  								{  									MenuItem menuItem = ((MenuItem)sender);  									ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' menuItem.Text' persistenceLayer);    									settingsRow.UpdateStyle();  								};  							}    							dataArea.AddChild(selectableOptions);    							settingsRow.ValueChanged = (text) =>  							{  								selectableOptions.SelectedLabel = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.HARDWARE_PRESENT:  						{  							var checkBoxWidget = new CheckBox("")  							{  								Name = settingData.PresentationName + " Checkbox"'  								ToolTipText = settingData.HelpText'  								VAnchor = Agg.UI.VAnchor.ParentBottom'  								TextColor = ActiveTheme.Instance.PrimaryTextColor'  								Checked = sliceSettingValue == "1"  							};    							checkBoxWidget.Click += (sender' e) =>  							{  								bool isChecked = ((CheckBox)sender).Checked;  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' isChecked ? "1" : "0"' persistenceLayer);    								settingsRow.UpdateStyle();  							};    							dataArea.AddChild(checkBoxWidget);    							settingsRow.ValueChanged = (text) =>  							{  								checkBoxWidget.Checked = text == "1";  							};  						}  						break;    					case SliceSettingData.DataEditTypes.VECTOR2:  						{  							string[] xyValueStrings = sliceSettingValue.Split(''');  							if (xyValueStrings.Length != 2)  							{  								xyValueStrings = new string[] { "0"' "0" };  							}    							double currentXValue;  							double.TryParse(xyValueStrings[0]' out currentXValue);    							var xEditWidget = new MHNumberEdit(currentXValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};    							double currentYValue;  							double.TryParse(xyValueStrings[1]' out currentYValue);    							var yEditWidget = new MHNumberEdit(currentYValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Margin = new BorderDouble(20' 0' 0' 0)'  							};    							xEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(xEditWidget);  							dataArea.AddChild(new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  							{  								VAnchor = VAnchor.ParentCenter'  								Margin = new BorderDouble(5' 0)'  							});    							yEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(yEditWidget);  							var yLabel = new GuiWidget()  							{  								VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  								Padding = new BorderDouble(5' 0)'  								HAnchor = HAnchor.ParentLeftRight'  							};  							yLabel.AddChild(new WrappedTextWidget("Y"' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));  							unitsArea.AddChild(yLabel);    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2;  								string[] xyValueStrings2 = text.Split(''');  								if (xyValueStrings2.Length != 2)  								{  									xyValueStrings2 = new string[] { "0"' "0" };  								}    								double.TryParse(xyValueStrings2[0]' out currentValue2);  								xEditWidget.ActuallNumberEdit.Value = currentValue2;    								double.TryParse(xyValueStrings2[1]' out currentValue2);  								yEditWidget.ActuallNumberEdit.Value = currentValue2;  							};    						}  						break;    					case SliceSettingData.DataEditTypes.OFFSET2:  						{  							Vector2 offset = ActiveSliceSettings.Instance.Helpers.ExtruderOffset(extruderIndex);    							var xEditWidget = new MHNumberEdit(offset.x' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  							};    							var yEditWidget = new MHNumberEdit(offset.y' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Margin = new BorderDouble(20' 0' 0' 0)'  							};    							xEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								int extruderIndexLocal = extruderIndex;  								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(xEditWidget);  							dataArea.AddChild(new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  							{  								VAnchor = VAnchor.ParentCenter'  								Margin = new BorderDouble(5' 0)'  							});    							yEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								int extruderIndexLocal = extruderIndex;  								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(yEditWidget);  							var yLabel = new GuiWidget()  							{  								Padding = new BorderDouble(5' 0)'  								HAnchor = HAnchor.ParentLeftRight'  								VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  							};  							yLabel.AddChild(new WrappedTextWidget("Y"' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));  							unitsArea.AddChild(yLabel);    							settingsRow.ValueChanged = (text) =>  							{  								Vector2 offset2 = ActiveSliceSettings.Instance.Helpers.ExtruderOffset(extruderIndex);  								xEditWidget.ActuallNumberEdit.Value = offset2.x;  								yEditWidget.ActuallNumberEdit.Value = offset2.y;  							};  						}  						break;    					default:  						var missingSetting = new TextWidget(String.Format("Missing the setting for '{0}'."' settingData.DataEditType.ToString()))  						{  							TextColor = ActiveTheme.Instance.PrimaryTextColor'  							BackgroundColor = RGBA_Bytes.Red  						};  						dataArea.AddChild(missingSetting);  						break;  				}  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The following statement contains a magic number: if (!PrinterSettings.KnownSettings.Contains(settingData.SlicerConfigName))  			{  				// the setting we think we are adding is not in the known settings it may have been deprecated  				TextWidget settingName = new TextWidget(String.Format("Setting '{0}' not found in known settings"' settingData.SlicerConfigName));  				settingName.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				//settingName.MinimumSize = new Vector2(minSettingNameWidth' settingName.MinimumSize.y);  				nameArea.AddChild(settingName);  				nameArea.BackgroundColor = RGBA_Bytes.Red;  			}  			else  			{  				int intEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int doubleEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int vectorXYEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int multiLineEditHeight = (int)(120 * GuiWidget.DeviceScale + .5);    				if (settingData.DataEditType != SliceSettingData.DataEditTypes.MULTI_LINE_TEXT)  				{  					var nameHolder = new GuiWidget()  					{  						Padding = new BorderDouble(0' 0' 5' 0)'  						VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  						HAnchor = HAnchor.ParentLeftRight'  					};    					nameHolder.AddChild(new WrappedTextWidget(settingData.PresentationName.Localize()' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor));    					nameArea.AddChild(nameHolder);  				}    				switch (settingData.DataEditType)  				{  					case SliceSettingData.DataEditTypes.INT:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();  							int currentValue;  							int.TryParse(sliceSettingValue' out currentValue);    							var intEditWidget = new MHNumberEdit(currentValue' pixelWidth: intEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Name = settingData.PresentationName + " Edit"'  							};  							intEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							content.AddChild(intEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' intEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								intEditWidget.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.DOUBLE:  						{  							double currentValue;  							double.TryParse(sliceSettingValue' out currentValue);    							var doubleEditWidget = new MHNumberEdit(currentValue' allowNegatives: true' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2 = 0;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.POSITIVE_DOUBLE:  						{  							const string multiValuesAreDiffernt = "-";  							FlowLayoutWidget content = new FlowLayoutWidget();    							var doubleEditWidget = new MHNumberEdit(0' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								Name = settingData.PresentationName + " Textbox"'  								SelectAllOnFocus = true  							};    							double currentValue;  							bool ChangesMultipleOtherSettings = settingData.SetSettingsOnChange.Count > 0;  							if (ChangesMultipleOtherSettings)  							{  								bool allTheSame = true;  								string setting = GetActiveValue(settingData.SetSettingsOnChange[0]["TargetSetting"]' layerCascade);  								for (int i = 1; i < settingData.SetSettingsOnChange.Count; i++)  								{  									string nextSetting = GetActiveValue(settingData.SetSettingsOnChange[i]["TargetSetting"]' layerCascade);  									if (setting != nextSetting)  									{  										allTheSame = false;  										break;  									}  								}    								if (allTheSame && setting.EndsWith("mm"))  								{  									double.TryParse(setting.Substring(0' setting.Length - 2)' out currentValue);  									doubleEditWidget.ActuallNumberEdit.Value = currentValue;  								}  								else  								{  									doubleEditWidget.ActuallNumberEdit.InternalNumberEdit.Text = multiValuesAreDiffernt;  								}  							}  							else // just set the setting normally  							{  								double.TryParse(sliceSettingValue' out currentValue);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue;  							}  							doubleEditWidget.ActuallNumberEdit.InternalTextEditWidget.MarkAsStartingState();  							  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								NumberEdit numberEdit = (NumberEdit)sender;  								// If this setting sets other settings' then do that.  								if (ChangesMultipleOtherSettings  									&& numberEdit.Text != multiValuesAreDiffernt)  								{  									{  										ActiveSliceSettings.Instance.SetValue(settingData.SetSettingsOnChange[0]["TargetSetting"]' numberEdit.Value.ToString() + "mm"' persistenceLayer);  									}  								}    								// also always save to the local setting  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' numberEdit.Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							content.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' doubleEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2 = 0;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.OFFSET:  						{  							double currentValue;  							double.TryParse(sliceSettingValue' out currentValue);  							var doubleEditWidget = new MHNumberEdit(currentValue' allowDecimals: true' allowNegatives: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true    							};  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.DOUBLE_OR_PERCENT:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();    							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: doubleEditWidth - 2' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								var textEditWidget = (TextEditWidget)sender;  								string text = textEditWidget.Text.Trim();    								bool isPercent = text.Contains("%");  								if (isPercent)  								{  									text = text.Substring(0' text.IndexOf("%"));  								}  								double result;  								double.TryParse(text' out result);  								text = result.ToString();  								if (isPercent)  								{  									text += "%";  								}  								textEditWidget.Text = text;  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' textEditWidget.Text' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							stringEdit.ActualTextEditWidget.InternalTextEditWidget.AllSelected += (sender' e) =>  							{  								// select everything up to the % (if present)  								InternalTextEditWidget textEditWidget = (InternalTextEditWidget)sender;  								int percentIndex = textEditWidget.Text.IndexOf("%");  								if (percentIndex != -1)  								{  									textEditWidget.SetSelection(0' percentIndex - 1);  								}  							};    							content.AddChild(stringEdit);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.INT_OR_MM:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();    							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: doubleEditWidth - 2' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};    							string startingText = stringEdit.Text;  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								TextEditWidget textEditWidget = (TextEditWidget)sender;  								// only validate when we lose focus  								if (!textEditWidget.ContainsFocus)  								{  									string text = textEditWidget.Text;  									text = text.Trim();  									bool isMm = text.Contains("mm");  									if (isMm)  									{  										text = text.Substring(0' text.IndexOf("mm"));  									}  									double result;  									double.TryParse(text' out result);  									text = result.ToString();  									if (isMm)  									{  										text += "mm";  									}  									else  									{  										result = (int)result;  										text = result.ToString();  									}  									textEditWidget.Text = text;  									startingText = stringEdit.Text;  								}  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' textEditWidget.Text' persistenceLayer);  								settingsRow.UpdateStyle();    								// make sure we are still looking for the final validation before saving.  								if (textEditWidget.ContainsFocus)  								{  									UiThread.RunOnIdle(() =>  									{  										string currentText = textEditWidget.Text;  										int cursorIndex = textEditWidget.InternalTextEditWidget.CharIndexToInsertBefore;  										textEditWidget.Text = startingText;  										textEditWidget.InternalTextEditWidget.MarkAsStartingState();  										textEditWidget.Text = currentText;  										textEditWidget.InternalTextEditWidget.CharIndexToInsertBefore = cursorIndex;  									});  								}  							};    							stringEdit.ActualTextEditWidget.InternalTextEditWidget.AllSelected += (sender' e) =>  							{  								// select everything up to the mm (if present)  								InternalTextEditWidget textEditWidget = (InternalTextEditWidget)sender;  								int mMIndex = textEditWidget.Text.IndexOf("mm");  								if (mMIndex != -1)  								{  									textEditWidget.SetSelection(0' mMIndex - 1);  								}  							};    							content.AddChild(stringEdit);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.CHECK_BOX:  						{  							var checkBoxWidget = new CheckBox("")  							{  								Name = settingData.PresentationName + " Checkbox"'  								ToolTipText = settingData.HelpText'  								VAnchor = Agg.UI.VAnchor.ParentBottom'  								TextColor = ActiveTheme.Instance.PrimaryTextColor'  								Checked = sliceSettingValue == "1"  							};  							checkBoxWidget.Click += (sender' e) =>  							{  								// SetValue should only be called when the checkbox is clicked. If this code makes its way into checkstatechanged  								// we end up adding a key back into the dictionary after we call .ClearValue' resulting in the blue override bar reappearing after  								// clearing a useroverride with the red x  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' checkBoxWidget.Checked ? "1" : "0"' persistenceLayer);  							};  							checkBoxWidget.CheckedStateChanged += (s' e) =>  							{  								// Linked settings should be updated in all cases (user clicked checkbox' user clicked clear)  								foreach (var setSettingsData in settingData.SetSettingsOnChange)  								{  									string targetValue;  									if (setSettingsData.TryGetValue(checkBoxWidget.Checked ? "OnValue" : "OffValue"' out targetValue))  									{  										ActiveSliceSettings.Instance.SetValue(setSettingsData["TargetSetting"]' targetValue' persistenceLayer);  									}  								}    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(checkBoxWidget);    							settingsRow.ValueChanged = (text) =>  							{  								checkBoxWidget.Checked = text == "1";  							};  						}  						break;    					case SliceSettingData.DataEditTypes.STRING:  						{  							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: settingData.ShowAsOverride ? 120 : 200' tabIndex: tabIndexForItem++)  							{  								Name = settingData.PresentationName + " Edit"'  							};  							stringEdit.ToolTipText = settingData.HelpText;  							  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((TextEditWidget)sender).Text' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							dataArea.AddChild(stringEdit);    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.MULTI_LINE_TEXT:  						{  							string convertedNewLines = sliceSettingValue.Replace("\\n"' "\n");  							var stringEdit = new MHTextEditWidget(convertedNewLines' pixelWidth: 320' pixelHeight: multiLineEditHeight' multiLine: true' tabIndex: tabIndexForItem++' typeFace: ApplicationController.MonoSpacedTypeFace)  							{  								HAnchor = HAnchor.ParentLeftRight'  							};    							stringEdit.DrawFromHintedCache();    							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((TextEditWidget)sender).Text.Replace("\n"' "\\n")' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							nameArea.HAnchor = HAnchor.AbsolutePosition;  							nameArea.Width = 0;  							dataArea.AddChild(stringEdit);  							dataArea.HAnchor = HAnchor.ParentLeftRight;    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text.Replace("\\n"' "\n");  							};  						}  						break;    					case SliceSettingData.DataEditTypes.COM_PORT:  						{  #if __ANDROID__  							addControl = false;  #endif    							EventHandler localUnregisterEvents = null;    							bool canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect;  							// The COM_PORT control is unique in its approach to the SlicerConfigName. It uses "com_port" settings name to  							// bind to a context that will place it in the SliceSetting view but it binds its values to a machine  							// specific dictionary key that is not exposed in the UI. At runtime we lookup and store to '<machinename>_com_port'  							// ensuring that a single printer can be shared across different devices and we'll select the correct com port in each case  							var selectableOptions = new DropDownList("None".Localize()' maxHeight: 200)  							{  								ToolTipText = settingData.HelpText'  								Margin = new BorderDouble()'  								Name = "Serial Port Dropdown"'  								// Prevent droplist interaction when connected  								Enabled = canChangeComPort'  								TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150)'  								BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150)'  							};    							selectableOptions.Click += (s' e) =>  							{  								AddComMenuItems(settingData' persistenceLayer' settingsRow' selectableOptions);  							};    							AddComMenuItems(settingData' persistenceLayer' settingsRow' selectableOptions);    							dataArea.AddChild(selectableOptions);    							settingsRow.ValueChanged = (text) =>  							{  								// Lookup the machine specific comport value rather than the passed in text value  								selectableOptions.SelectedLabel = ActiveSliceSettings.Instance.Helpers.ComPort();  							};    							// Prevent droplist interaction when connected  							PrinterConnectionAndCommunication.Instance.CommunicationStateChanged.RegisterEvent((s' e) =>  							{  								canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect;  								selectableOptions.Enabled = canChangeComPort;  								selectableOptions.TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150);  								selectableOptions.BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150);  							}' ref localUnregisterEvents);    							// Release event listener on close  							selectableOptions.Closed += (s' e) =>  							{  								localUnregisterEvents?.Invoke(null' null);  							};  						}  						break;    					case SliceSettingData.DataEditTypes.LIST:  						{  							var selectableOptions = new DropDownList("None".Localize()' maxHeight: 200)  							{  								ToolTipText = settingData.HelpText'  								Margin = new BorderDouble()  							};    							foreach (string listItem in settingData.ExtraSettings.Split('''))  							{  								MenuItem newItem = selectableOptions.AddItem(listItem);  								if (newItem.Text == sliceSettingValue)  								{  									selectableOptions.SelectedLabel = sliceSettingValue;  								}    								newItem.Selected += (sender' e) =>  								{  									MenuItem menuItem = ((MenuItem)sender);  									ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' menuItem.Text' persistenceLayer);    									settingsRow.UpdateStyle();  								};  							}    							dataArea.AddChild(selectableOptions);    							settingsRow.ValueChanged = (text) =>  							{  								selectableOptions.SelectedLabel = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.HARDWARE_PRESENT:  						{  							var checkBoxWidget = new CheckBox("")  							{  								Name = settingData.PresentationName + " Checkbox"'  								ToolTipText = settingData.HelpText'  								VAnchor = Agg.UI.VAnchor.ParentBottom'  								TextColor = ActiveTheme.Instance.PrimaryTextColor'  								Checked = sliceSettingValue == "1"  							};    							checkBoxWidget.Click += (sender' e) =>  							{  								bool isChecked = ((CheckBox)sender).Checked;  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' isChecked ? "1" : "0"' persistenceLayer);    								settingsRow.UpdateStyle();  							};    							dataArea.AddChild(checkBoxWidget);    							settingsRow.ValueChanged = (text) =>  							{  								checkBoxWidget.Checked = text == "1";  							};  						}  						break;    					case SliceSettingData.DataEditTypes.VECTOR2:  						{  							string[] xyValueStrings = sliceSettingValue.Split(''');  							if (xyValueStrings.Length != 2)  							{  								xyValueStrings = new string[] { "0"' "0" };  							}    							double currentXValue;  							double.TryParse(xyValueStrings[0]' out currentXValue);    							var xEditWidget = new MHNumberEdit(currentXValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};    							double currentYValue;  							double.TryParse(xyValueStrings[1]' out currentYValue);    							var yEditWidget = new MHNumberEdit(currentYValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Margin = new BorderDouble(20' 0' 0' 0)'  							};    							xEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(xEditWidget);  							dataArea.AddChild(new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  							{  								VAnchor = VAnchor.ParentCenter'  								Margin = new BorderDouble(5' 0)'  							});    							yEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(yEditWidget);  							var yLabel = new GuiWidget()  							{  								VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  								Padding = new BorderDouble(5' 0)'  								HAnchor = HAnchor.ParentLeftRight'  							};  							yLabel.AddChild(new WrappedTextWidget("Y"' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));  							unitsArea.AddChild(yLabel);    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2;  								string[] xyValueStrings2 = text.Split(''');  								if (xyValueStrings2.Length != 2)  								{  									xyValueStrings2 = new string[] { "0"' "0" };  								}    								double.TryParse(xyValueStrings2[0]' out currentValue2);  								xEditWidget.ActuallNumberEdit.Value = currentValue2;    								double.TryParse(xyValueStrings2[1]' out currentValue2);  								yEditWidget.ActuallNumberEdit.Value = currentValue2;  							};    						}  						break;    					case SliceSettingData.DataEditTypes.OFFSET2:  						{  							Vector2 offset = ActiveSliceSettings.Instance.Helpers.ExtruderOffset(extruderIndex);    							var xEditWidget = new MHNumberEdit(offset.x' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  							};    							var yEditWidget = new MHNumberEdit(offset.y' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Margin = new BorderDouble(20' 0' 0' 0)'  							};    							xEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								int extruderIndexLocal = extruderIndex;  								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(xEditWidget);  							dataArea.AddChild(new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  							{  								VAnchor = VAnchor.ParentCenter'  								Margin = new BorderDouble(5' 0)'  							});    							yEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								int extruderIndexLocal = extruderIndex;  								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(yEditWidget);  							var yLabel = new GuiWidget()  							{  								Padding = new BorderDouble(5' 0)'  								HAnchor = HAnchor.ParentLeftRight'  								VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  							};  							yLabel.AddChild(new WrappedTextWidget("Y"' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));  							unitsArea.AddChild(yLabel);    							settingsRow.ValueChanged = (text) =>  							{  								Vector2 offset2 = ActiveSliceSettings.Instance.Helpers.ExtruderOffset(extruderIndex);  								xEditWidget.ActuallNumberEdit.Value = offset2.x;  								yEditWidget.ActuallNumberEdit.Value = offset2.y;  							};  						}  						break;    					default:  						var missingSetting = new TextWidget(String.Format("Missing the setting for '{0}'."' settingData.DataEditType.ToString()))  						{  							TextColor = ActiveTheme.Instance.PrimaryTextColor'  							BackgroundColor = RGBA_Bytes.Red  						};  						dataArea.AddChild(missingSetting);  						break;  				}  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The following statement contains a magic number: if (!PrinterSettings.KnownSettings.Contains(settingData.SlicerConfigName))  			{  				// the setting we think we are adding is not in the known settings it may have been deprecated  				TextWidget settingName = new TextWidget(String.Format("Setting '{0}' not found in known settings"' settingData.SlicerConfigName));  				settingName.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				//settingName.MinimumSize = new Vector2(minSettingNameWidth' settingName.MinimumSize.y);  				nameArea.AddChild(settingName);  				nameArea.BackgroundColor = RGBA_Bytes.Red;  			}  			else  			{  				int intEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int doubleEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int vectorXYEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int multiLineEditHeight = (int)(120 * GuiWidget.DeviceScale + .5);    				if (settingData.DataEditType != SliceSettingData.DataEditTypes.MULTI_LINE_TEXT)  				{  					var nameHolder = new GuiWidget()  					{  						Padding = new BorderDouble(0' 0' 5' 0)'  						VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  						HAnchor = HAnchor.ParentLeftRight'  					};    					nameHolder.AddChild(new WrappedTextWidget(settingData.PresentationName.Localize()' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor));    					nameArea.AddChild(nameHolder);  				}    				switch (settingData.DataEditType)  				{  					case SliceSettingData.DataEditTypes.INT:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();  							int currentValue;  							int.TryParse(sliceSettingValue' out currentValue);    							var intEditWidget = new MHNumberEdit(currentValue' pixelWidth: intEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Name = settingData.PresentationName + " Edit"'  							};  							intEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							content.AddChild(intEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' intEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								intEditWidget.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.DOUBLE:  						{  							double currentValue;  							double.TryParse(sliceSettingValue' out currentValue);    							var doubleEditWidget = new MHNumberEdit(currentValue' allowNegatives: true' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2 = 0;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.POSITIVE_DOUBLE:  						{  							const string multiValuesAreDiffernt = "-";  							FlowLayoutWidget content = new FlowLayoutWidget();    							var doubleEditWidget = new MHNumberEdit(0' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								Name = settingData.PresentationName + " Textbox"'  								SelectAllOnFocus = true  							};    							double currentValue;  							bool ChangesMultipleOtherSettings = settingData.SetSettingsOnChange.Count > 0;  							if (ChangesMultipleOtherSettings)  							{  								bool allTheSame = true;  								string setting = GetActiveValue(settingData.SetSettingsOnChange[0]["TargetSetting"]' layerCascade);  								for (int i = 1; i < settingData.SetSettingsOnChange.Count; i++)  								{  									string nextSetting = GetActiveValue(settingData.SetSettingsOnChange[i]["TargetSetting"]' layerCascade);  									if (setting != nextSetting)  									{  										allTheSame = false;  										break;  									}  								}    								if (allTheSame && setting.EndsWith("mm"))  								{  									double.TryParse(setting.Substring(0' setting.Length - 2)' out currentValue);  									doubleEditWidget.ActuallNumberEdit.Value = currentValue;  								}  								else  								{  									doubleEditWidget.ActuallNumberEdit.InternalNumberEdit.Text = multiValuesAreDiffernt;  								}  							}  							else // just set the setting normally  							{  								double.TryParse(sliceSettingValue' out currentValue);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue;  							}  							doubleEditWidget.ActuallNumberEdit.InternalTextEditWidget.MarkAsStartingState();  							  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								NumberEdit numberEdit = (NumberEdit)sender;  								// If this setting sets other settings' then do that.  								if (ChangesMultipleOtherSettings  									&& numberEdit.Text != multiValuesAreDiffernt)  								{  									{  										ActiveSliceSettings.Instance.SetValue(settingData.SetSettingsOnChange[0]["TargetSetting"]' numberEdit.Value.ToString() + "mm"' persistenceLayer);  									}  								}    								// also always save to the local setting  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' numberEdit.Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							content.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' doubleEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2 = 0;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.OFFSET:  						{  							double currentValue;  							double.TryParse(sliceSettingValue' out currentValue);  							var doubleEditWidget = new MHNumberEdit(currentValue' allowDecimals: true' allowNegatives: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true    							};  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.DOUBLE_OR_PERCENT:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();    							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: doubleEditWidth - 2' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								var textEditWidget = (TextEditWidget)sender;  								string text = textEditWidget.Text.Trim();    								bool isPercent = text.Contains("%");  								if (isPercent)  								{  									text = text.Substring(0' text.IndexOf("%"));  								}  								double result;  								double.TryParse(text' out result);  								text = result.ToString();  								if (isPercent)  								{  									text += "%";  								}  								textEditWidget.Text = text;  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' textEditWidget.Text' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							stringEdit.ActualTextEditWidget.InternalTextEditWidget.AllSelected += (sender' e) =>  							{  								// select everything up to the % (if present)  								InternalTextEditWidget textEditWidget = (InternalTextEditWidget)sender;  								int percentIndex = textEditWidget.Text.IndexOf("%");  								if (percentIndex != -1)  								{  									textEditWidget.SetSelection(0' percentIndex - 1);  								}  							};    							content.AddChild(stringEdit);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.INT_OR_MM:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();    							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: doubleEditWidth - 2' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};    							string startingText = stringEdit.Text;  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								TextEditWidget textEditWidget = (TextEditWidget)sender;  								// only validate when we lose focus  								if (!textEditWidget.ContainsFocus)  								{  									string text = textEditWidget.Text;  									text = text.Trim();  									bool isMm = text.Contains("mm");  									if (isMm)  									{  										text = text.Substring(0' text.IndexOf("mm"));  									}  									double result;  									double.TryParse(text' out result);  									text = result.ToString();  									if (isMm)  									{  										text += "mm";  									}  									else  									{  										result = (int)result;  										text = result.ToString();  									}  									textEditWidget.Text = text;  									startingText = stringEdit.Text;  								}  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' textEditWidget.Text' persistenceLayer);  								settingsRow.UpdateStyle();    								// make sure we are still looking for the final validation before saving.  								if (textEditWidget.ContainsFocus)  								{  									UiThread.RunOnIdle(() =>  									{  										string currentText = textEditWidget.Text;  										int cursorIndex = textEditWidget.InternalTextEditWidget.CharIndexToInsertBefore;  										textEditWidget.Text = startingText;  										textEditWidget.InternalTextEditWidget.MarkAsStartingState();  										textEditWidget.Text = currentText;  										textEditWidget.InternalTextEditWidget.CharIndexToInsertBefore = cursorIndex;  									});  								}  							};    							stringEdit.ActualTextEditWidget.InternalTextEditWidget.AllSelected += (sender' e) =>  							{  								// select everything up to the mm (if present)  								InternalTextEditWidget textEditWidget = (InternalTextEditWidget)sender;  								int mMIndex = textEditWidget.Text.IndexOf("mm");  								if (mMIndex != -1)  								{  									textEditWidget.SetSelection(0' mMIndex - 1);  								}  							};    							content.AddChild(stringEdit);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.CHECK_BOX:  						{  							var checkBoxWidget = new CheckBox("")  							{  								Name = settingData.PresentationName + " Checkbox"'  								ToolTipText = settingData.HelpText'  								VAnchor = Agg.UI.VAnchor.ParentBottom'  								TextColor = ActiveTheme.Instance.PrimaryTextColor'  								Checked = sliceSettingValue == "1"  							};  							checkBoxWidget.Click += (sender' e) =>  							{  								// SetValue should only be called when the checkbox is clicked. If this code makes its way into checkstatechanged  								// we end up adding a key back into the dictionary after we call .ClearValue' resulting in the blue override bar reappearing after  								// clearing a useroverride with the red x  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' checkBoxWidget.Checked ? "1" : "0"' persistenceLayer);  							};  							checkBoxWidget.CheckedStateChanged += (s' e) =>  							{  								// Linked settings should be updated in all cases (user clicked checkbox' user clicked clear)  								foreach (var setSettingsData in settingData.SetSettingsOnChange)  								{  									string targetValue;  									if (setSettingsData.TryGetValue(checkBoxWidget.Checked ? "OnValue" : "OffValue"' out targetValue))  									{  										ActiveSliceSettings.Instance.SetValue(setSettingsData["TargetSetting"]' targetValue' persistenceLayer);  									}  								}    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(checkBoxWidget);    							settingsRow.ValueChanged = (text) =>  							{  								checkBoxWidget.Checked = text == "1";  							};  						}  						break;    					case SliceSettingData.DataEditTypes.STRING:  						{  							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: settingData.ShowAsOverride ? 120 : 200' tabIndex: tabIndexForItem++)  							{  								Name = settingData.PresentationName + " Edit"'  							};  							stringEdit.ToolTipText = settingData.HelpText;  							  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((TextEditWidget)sender).Text' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							dataArea.AddChild(stringEdit);    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.MULTI_LINE_TEXT:  						{  							string convertedNewLines = sliceSettingValue.Replace("\\n"' "\n");  							var stringEdit = new MHTextEditWidget(convertedNewLines' pixelWidth: 320' pixelHeight: multiLineEditHeight' multiLine: true' tabIndex: tabIndexForItem++' typeFace: ApplicationController.MonoSpacedTypeFace)  							{  								HAnchor = HAnchor.ParentLeftRight'  							};    							stringEdit.DrawFromHintedCache();    							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((TextEditWidget)sender).Text.Replace("\n"' "\\n")' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							nameArea.HAnchor = HAnchor.AbsolutePosition;  							nameArea.Width = 0;  							dataArea.AddChild(stringEdit);  							dataArea.HAnchor = HAnchor.ParentLeftRight;    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text.Replace("\\n"' "\n");  							};  						}  						break;    					case SliceSettingData.DataEditTypes.COM_PORT:  						{  #if __ANDROID__  							addControl = false;  #endif    							EventHandler localUnregisterEvents = null;    							bool canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect;  							// The COM_PORT control is unique in its approach to the SlicerConfigName. It uses "com_port" settings name to  							// bind to a context that will place it in the SliceSetting view but it binds its values to a machine  							// specific dictionary key that is not exposed in the UI. At runtime we lookup and store to '<machinename>_com_port'  							// ensuring that a single printer can be shared across different devices and we'll select the correct com port in each case  							var selectableOptions = new DropDownList("None".Localize()' maxHeight: 200)  							{  								ToolTipText = settingData.HelpText'  								Margin = new BorderDouble()'  								Name = "Serial Port Dropdown"'  								// Prevent droplist interaction when connected  								Enabled = canChangeComPort'  								TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150)'  								BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150)'  							};    							selectableOptions.Click += (s' e) =>  							{  								AddComMenuItems(settingData' persistenceLayer' settingsRow' selectableOptions);  							};    							AddComMenuItems(settingData' persistenceLayer' settingsRow' selectableOptions);    							dataArea.AddChild(selectableOptions);    							settingsRow.ValueChanged = (text) =>  							{  								// Lookup the machine specific comport value rather than the passed in text value  								selectableOptions.SelectedLabel = ActiveSliceSettings.Instance.Helpers.ComPort();  							};    							// Prevent droplist interaction when connected  							PrinterConnectionAndCommunication.Instance.CommunicationStateChanged.RegisterEvent((s' e) =>  							{  								canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect;  								selectableOptions.Enabled = canChangeComPort;  								selectableOptions.TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150);  								selectableOptions.BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150);  							}' ref localUnregisterEvents);    							// Release event listener on close  							selectableOptions.Closed += (s' e) =>  							{  								localUnregisterEvents?.Invoke(null' null);  							};  						}  						break;    					case SliceSettingData.DataEditTypes.LIST:  						{  							var selectableOptions = new DropDownList("None".Localize()' maxHeight: 200)  							{  								ToolTipText = settingData.HelpText'  								Margin = new BorderDouble()  							};    							foreach (string listItem in settingData.ExtraSettings.Split('''))  							{  								MenuItem newItem = selectableOptions.AddItem(listItem);  								if (newItem.Text == sliceSettingValue)  								{  									selectableOptions.SelectedLabel = sliceSettingValue;  								}    								newItem.Selected += (sender' e) =>  								{  									MenuItem menuItem = ((MenuItem)sender);  									ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' menuItem.Text' persistenceLayer);    									settingsRow.UpdateStyle();  								};  							}    							dataArea.AddChild(selectableOptions);    							settingsRow.ValueChanged = (text) =>  							{  								selectableOptions.SelectedLabel = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.HARDWARE_PRESENT:  						{  							var checkBoxWidget = new CheckBox("")  							{  								Name = settingData.PresentationName + " Checkbox"'  								ToolTipText = settingData.HelpText'  								VAnchor = Agg.UI.VAnchor.ParentBottom'  								TextColor = ActiveTheme.Instance.PrimaryTextColor'  								Checked = sliceSettingValue == "1"  							};    							checkBoxWidget.Click += (sender' e) =>  							{  								bool isChecked = ((CheckBox)sender).Checked;  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' isChecked ? "1" : "0"' persistenceLayer);    								settingsRow.UpdateStyle();  							};    							dataArea.AddChild(checkBoxWidget);    							settingsRow.ValueChanged = (text) =>  							{  								checkBoxWidget.Checked = text == "1";  							};  						}  						break;    					case SliceSettingData.DataEditTypes.VECTOR2:  						{  							string[] xyValueStrings = sliceSettingValue.Split(''');  							if (xyValueStrings.Length != 2)  							{  								xyValueStrings = new string[] { "0"' "0" };  							}    							double currentXValue;  							double.TryParse(xyValueStrings[0]' out currentXValue);    							var xEditWidget = new MHNumberEdit(currentXValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};    							double currentYValue;  							double.TryParse(xyValueStrings[1]' out currentYValue);    							var yEditWidget = new MHNumberEdit(currentYValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Margin = new BorderDouble(20' 0' 0' 0)'  							};    							xEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(xEditWidget);  							dataArea.AddChild(new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  							{  								VAnchor = VAnchor.ParentCenter'  								Margin = new BorderDouble(5' 0)'  							});    							yEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(yEditWidget);  							var yLabel = new GuiWidget()  							{  								VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  								Padding = new BorderDouble(5' 0)'  								HAnchor = HAnchor.ParentLeftRight'  							};  							yLabel.AddChild(new WrappedTextWidget("Y"' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));  							unitsArea.AddChild(yLabel);    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2;  								string[] xyValueStrings2 = text.Split(''');  								if (xyValueStrings2.Length != 2)  								{  									xyValueStrings2 = new string[] { "0"' "0" };  								}    								double.TryParse(xyValueStrings2[0]' out currentValue2);  								xEditWidget.ActuallNumberEdit.Value = currentValue2;    								double.TryParse(xyValueStrings2[1]' out currentValue2);  								yEditWidget.ActuallNumberEdit.Value = currentValue2;  							};    						}  						break;    					case SliceSettingData.DataEditTypes.OFFSET2:  						{  							Vector2 offset = ActiveSliceSettings.Instance.Helpers.ExtruderOffset(extruderIndex);    							var xEditWidget = new MHNumberEdit(offset.x' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  							};    							var yEditWidget = new MHNumberEdit(offset.y' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Margin = new BorderDouble(20' 0' 0' 0)'  							};    							xEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								int extruderIndexLocal = extruderIndex;  								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(xEditWidget);  							dataArea.AddChild(new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  							{  								VAnchor = VAnchor.ParentCenter'  								Margin = new BorderDouble(5' 0)'  							});    							yEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								int extruderIndexLocal = extruderIndex;  								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(yEditWidget);  							var yLabel = new GuiWidget()  							{  								Padding = new BorderDouble(5' 0)'  								HAnchor = HAnchor.ParentLeftRight'  								VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  							};  							yLabel.AddChild(new WrappedTextWidget("Y"' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));  							unitsArea.AddChild(yLabel);    							settingsRow.ValueChanged = (text) =>  							{  								Vector2 offset2 = ActiveSliceSettings.Instance.Helpers.ExtruderOffset(extruderIndex);  								xEditWidget.ActuallNumberEdit.Value = offset2.x;  								yEditWidget.ActuallNumberEdit.Value = offset2.y;  							};  						}  						break;    					default:  						var missingSetting = new TextWidget(String.Format("Missing the setting for '{0}'."' settingData.DataEditType.ToString()))  						{  							TextColor = ActiveTheme.Instance.PrimaryTextColor'  							BackgroundColor = RGBA_Bytes.Red  						};  						dataArea.AddChild(missingSetting);  						break;  				}  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The following statement contains a magic number: if (!PrinterSettings.KnownSettings.Contains(settingData.SlicerConfigName))  			{  				// the setting we think we are adding is not in the known settings it may have been deprecated  				TextWidget settingName = new TextWidget(String.Format("Setting '{0}' not found in known settings"' settingData.SlicerConfigName));  				settingName.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				//settingName.MinimumSize = new Vector2(minSettingNameWidth' settingName.MinimumSize.y);  				nameArea.AddChild(settingName);  				nameArea.BackgroundColor = RGBA_Bytes.Red;  			}  			else  			{  				int intEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int doubleEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int vectorXYEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int multiLineEditHeight = (int)(120 * GuiWidget.DeviceScale + .5);    				if (settingData.DataEditType != SliceSettingData.DataEditTypes.MULTI_LINE_TEXT)  				{  					var nameHolder = new GuiWidget()  					{  						Padding = new BorderDouble(0' 0' 5' 0)'  						VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  						HAnchor = HAnchor.ParentLeftRight'  					};    					nameHolder.AddChild(new WrappedTextWidget(settingData.PresentationName.Localize()' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor));    					nameArea.AddChild(nameHolder);  				}    				switch (settingData.DataEditType)  				{  					case SliceSettingData.DataEditTypes.INT:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();  							int currentValue;  							int.TryParse(sliceSettingValue' out currentValue);    							var intEditWidget = new MHNumberEdit(currentValue' pixelWidth: intEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Name = settingData.PresentationName + " Edit"'  							};  							intEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							content.AddChild(intEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' intEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								intEditWidget.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.DOUBLE:  						{  							double currentValue;  							double.TryParse(sliceSettingValue' out currentValue);    							var doubleEditWidget = new MHNumberEdit(currentValue' allowNegatives: true' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2 = 0;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.POSITIVE_DOUBLE:  						{  							const string multiValuesAreDiffernt = "-";  							FlowLayoutWidget content = new FlowLayoutWidget();    							var doubleEditWidget = new MHNumberEdit(0' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								Name = settingData.PresentationName + " Textbox"'  								SelectAllOnFocus = true  							};    							double currentValue;  							bool ChangesMultipleOtherSettings = settingData.SetSettingsOnChange.Count > 0;  							if (ChangesMultipleOtherSettings)  							{  								bool allTheSame = true;  								string setting = GetActiveValue(settingData.SetSettingsOnChange[0]["TargetSetting"]' layerCascade);  								for (int i = 1; i < settingData.SetSettingsOnChange.Count; i++)  								{  									string nextSetting = GetActiveValue(settingData.SetSettingsOnChange[i]["TargetSetting"]' layerCascade);  									if (setting != nextSetting)  									{  										allTheSame = false;  										break;  									}  								}    								if (allTheSame && setting.EndsWith("mm"))  								{  									double.TryParse(setting.Substring(0' setting.Length - 2)' out currentValue);  									doubleEditWidget.ActuallNumberEdit.Value = currentValue;  								}  								else  								{  									doubleEditWidget.ActuallNumberEdit.InternalNumberEdit.Text = multiValuesAreDiffernt;  								}  							}  							else // just set the setting normally  							{  								double.TryParse(sliceSettingValue' out currentValue);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue;  							}  							doubleEditWidget.ActuallNumberEdit.InternalTextEditWidget.MarkAsStartingState();  							  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								NumberEdit numberEdit = (NumberEdit)sender;  								// If this setting sets other settings' then do that.  								if (ChangesMultipleOtherSettings  									&& numberEdit.Text != multiValuesAreDiffernt)  								{  									{  										ActiveSliceSettings.Instance.SetValue(settingData.SetSettingsOnChange[0]["TargetSetting"]' numberEdit.Value.ToString() + "mm"' persistenceLayer);  									}  								}    								// also always save to the local setting  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' numberEdit.Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							content.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' doubleEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2 = 0;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.OFFSET:  						{  							double currentValue;  							double.TryParse(sliceSettingValue' out currentValue);  							var doubleEditWidget = new MHNumberEdit(currentValue' allowDecimals: true' allowNegatives: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true    							};  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.DOUBLE_OR_PERCENT:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();    							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: doubleEditWidth - 2' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								var textEditWidget = (TextEditWidget)sender;  								string text = textEditWidget.Text.Trim();    								bool isPercent = text.Contains("%");  								if (isPercent)  								{  									text = text.Substring(0' text.IndexOf("%"));  								}  								double result;  								double.TryParse(text' out result);  								text = result.ToString();  								if (isPercent)  								{  									text += "%";  								}  								textEditWidget.Text = text;  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' textEditWidget.Text' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							stringEdit.ActualTextEditWidget.InternalTextEditWidget.AllSelected += (sender' e) =>  							{  								// select everything up to the % (if present)  								InternalTextEditWidget textEditWidget = (InternalTextEditWidget)sender;  								int percentIndex = textEditWidget.Text.IndexOf("%");  								if (percentIndex != -1)  								{  									textEditWidget.SetSelection(0' percentIndex - 1);  								}  							};    							content.AddChild(stringEdit);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.INT_OR_MM:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();    							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: doubleEditWidth - 2' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};    							string startingText = stringEdit.Text;  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								TextEditWidget textEditWidget = (TextEditWidget)sender;  								// only validate when we lose focus  								if (!textEditWidget.ContainsFocus)  								{  									string text = textEditWidget.Text;  									text = text.Trim();  									bool isMm = text.Contains("mm");  									if (isMm)  									{  										text = text.Substring(0' text.IndexOf("mm"));  									}  									double result;  									double.TryParse(text' out result);  									text = result.ToString();  									if (isMm)  									{  										text += "mm";  									}  									else  									{  										result = (int)result;  										text = result.ToString();  									}  									textEditWidget.Text = text;  									startingText = stringEdit.Text;  								}  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' textEditWidget.Text' persistenceLayer);  								settingsRow.UpdateStyle();    								// make sure we are still looking for the final validation before saving.  								if (textEditWidget.ContainsFocus)  								{  									UiThread.RunOnIdle(() =>  									{  										string currentText = textEditWidget.Text;  										int cursorIndex = textEditWidget.InternalTextEditWidget.CharIndexToInsertBefore;  										textEditWidget.Text = startingText;  										textEditWidget.InternalTextEditWidget.MarkAsStartingState();  										textEditWidget.Text = currentText;  										textEditWidget.InternalTextEditWidget.CharIndexToInsertBefore = cursorIndex;  									});  								}  							};    							stringEdit.ActualTextEditWidget.InternalTextEditWidget.AllSelected += (sender' e) =>  							{  								// select everything up to the mm (if present)  								InternalTextEditWidget textEditWidget = (InternalTextEditWidget)sender;  								int mMIndex = textEditWidget.Text.IndexOf("mm");  								if (mMIndex != -1)  								{  									textEditWidget.SetSelection(0' mMIndex - 1);  								}  							};    							content.AddChild(stringEdit);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.CHECK_BOX:  						{  							var checkBoxWidget = new CheckBox("")  							{  								Name = settingData.PresentationName + " Checkbox"'  								ToolTipText = settingData.HelpText'  								VAnchor = Agg.UI.VAnchor.ParentBottom'  								TextColor = ActiveTheme.Instance.PrimaryTextColor'  								Checked = sliceSettingValue == "1"  							};  							checkBoxWidget.Click += (sender' e) =>  							{  								// SetValue should only be called when the checkbox is clicked. If this code makes its way into checkstatechanged  								// we end up adding a key back into the dictionary after we call .ClearValue' resulting in the blue override bar reappearing after  								// clearing a useroverride with the red x  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' checkBoxWidget.Checked ? "1" : "0"' persistenceLayer);  							};  							checkBoxWidget.CheckedStateChanged += (s' e) =>  							{  								// Linked settings should be updated in all cases (user clicked checkbox' user clicked clear)  								foreach (var setSettingsData in settingData.SetSettingsOnChange)  								{  									string targetValue;  									if (setSettingsData.TryGetValue(checkBoxWidget.Checked ? "OnValue" : "OffValue"' out targetValue))  									{  										ActiveSliceSettings.Instance.SetValue(setSettingsData["TargetSetting"]' targetValue' persistenceLayer);  									}  								}    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(checkBoxWidget);    							settingsRow.ValueChanged = (text) =>  							{  								checkBoxWidget.Checked = text == "1";  							};  						}  						break;    					case SliceSettingData.DataEditTypes.STRING:  						{  							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: settingData.ShowAsOverride ? 120 : 200' tabIndex: tabIndexForItem++)  							{  								Name = settingData.PresentationName + " Edit"'  							};  							stringEdit.ToolTipText = settingData.HelpText;  							  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((TextEditWidget)sender).Text' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							dataArea.AddChild(stringEdit);    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.MULTI_LINE_TEXT:  						{  							string convertedNewLines = sliceSettingValue.Replace("\\n"' "\n");  							var stringEdit = new MHTextEditWidget(convertedNewLines' pixelWidth: 320' pixelHeight: multiLineEditHeight' multiLine: true' tabIndex: tabIndexForItem++' typeFace: ApplicationController.MonoSpacedTypeFace)  							{  								HAnchor = HAnchor.ParentLeftRight'  							};    							stringEdit.DrawFromHintedCache();    							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((TextEditWidget)sender).Text.Replace("\n"' "\\n")' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							nameArea.HAnchor = HAnchor.AbsolutePosition;  							nameArea.Width = 0;  							dataArea.AddChild(stringEdit);  							dataArea.HAnchor = HAnchor.ParentLeftRight;    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text.Replace("\\n"' "\n");  							};  						}  						break;    					case SliceSettingData.DataEditTypes.COM_PORT:  						{  #if __ANDROID__  							addControl = false;  #endif    							EventHandler localUnregisterEvents = null;    							bool canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect;  							// The COM_PORT control is unique in its approach to the SlicerConfigName. It uses "com_port" settings name to  							// bind to a context that will place it in the SliceSetting view but it binds its values to a machine  							// specific dictionary key that is not exposed in the UI. At runtime we lookup and store to '<machinename>_com_port'  							// ensuring that a single printer can be shared across different devices and we'll select the correct com port in each case  							var selectableOptions = new DropDownList("None".Localize()' maxHeight: 200)  							{  								ToolTipText = settingData.HelpText'  								Margin = new BorderDouble()'  								Name = "Serial Port Dropdown"'  								// Prevent droplist interaction when connected  								Enabled = canChangeComPort'  								TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150)'  								BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150)'  							};    							selectableOptions.Click += (s' e) =>  							{  								AddComMenuItems(settingData' persistenceLayer' settingsRow' selectableOptions);  							};    							AddComMenuItems(settingData' persistenceLayer' settingsRow' selectableOptions);    							dataArea.AddChild(selectableOptions);    							settingsRow.ValueChanged = (text) =>  							{  								// Lookup the machine specific comport value rather than the passed in text value  								selectableOptions.SelectedLabel = ActiveSliceSettings.Instance.Helpers.ComPort();  							};    							// Prevent droplist interaction when connected  							PrinterConnectionAndCommunication.Instance.CommunicationStateChanged.RegisterEvent((s' e) =>  							{  								canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect;  								selectableOptions.Enabled = canChangeComPort;  								selectableOptions.TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150);  								selectableOptions.BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150);  							}' ref localUnregisterEvents);    							// Release event listener on close  							selectableOptions.Closed += (s' e) =>  							{  								localUnregisterEvents?.Invoke(null' null);  							};  						}  						break;    					case SliceSettingData.DataEditTypes.LIST:  						{  							var selectableOptions = new DropDownList("None".Localize()' maxHeight: 200)  							{  								ToolTipText = settingData.HelpText'  								Margin = new BorderDouble()  							};    							foreach (string listItem in settingData.ExtraSettings.Split('''))  							{  								MenuItem newItem = selectableOptions.AddItem(listItem);  								if (newItem.Text == sliceSettingValue)  								{  									selectableOptions.SelectedLabel = sliceSettingValue;  								}    								newItem.Selected += (sender' e) =>  								{  									MenuItem menuItem = ((MenuItem)sender);  									ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' menuItem.Text' persistenceLayer);    									settingsRow.UpdateStyle();  								};  							}    							dataArea.AddChild(selectableOptions);    							settingsRow.ValueChanged = (text) =>  							{  								selectableOptions.SelectedLabel = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.HARDWARE_PRESENT:  						{  							var checkBoxWidget = new CheckBox("")  							{  								Name = settingData.PresentationName + " Checkbox"'  								ToolTipText = settingData.HelpText'  								VAnchor = Agg.UI.VAnchor.ParentBottom'  								TextColor = ActiveTheme.Instance.PrimaryTextColor'  								Checked = sliceSettingValue == "1"  							};    							checkBoxWidget.Click += (sender' e) =>  							{  								bool isChecked = ((CheckBox)sender).Checked;  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' isChecked ? "1" : "0"' persistenceLayer);    								settingsRow.UpdateStyle();  							};    							dataArea.AddChild(checkBoxWidget);    							settingsRow.ValueChanged = (text) =>  							{  								checkBoxWidget.Checked = text == "1";  							};  						}  						break;    					case SliceSettingData.DataEditTypes.VECTOR2:  						{  							string[] xyValueStrings = sliceSettingValue.Split(''');  							if (xyValueStrings.Length != 2)  							{  								xyValueStrings = new string[] { "0"' "0" };  							}    							double currentXValue;  							double.TryParse(xyValueStrings[0]' out currentXValue);    							var xEditWidget = new MHNumberEdit(currentXValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};    							double currentYValue;  							double.TryParse(xyValueStrings[1]' out currentYValue);    							var yEditWidget = new MHNumberEdit(currentYValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Margin = new BorderDouble(20' 0' 0' 0)'  							};    							xEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(xEditWidget);  							dataArea.AddChild(new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  							{  								VAnchor = VAnchor.ParentCenter'  								Margin = new BorderDouble(5' 0)'  							});    							yEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(yEditWidget);  							var yLabel = new GuiWidget()  							{  								VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  								Padding = new BorderDouble(5' 0)'  								HAnchor = HAnchor.ParentLeftRight'  							};  							yLabel.AddChild(new WrappedTextWidget("Y"' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));  							unitsArea.AddChild(yLabel);    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2;  								string[] xyValueStrings2 = text.Split(''');  								if (xyValueStrings2.Length != 2)  								{  									xyValueStrings2 = new string[] { "0"' "0" };  								}    								double.TryParse(xyValueStrings2[0]' out currentValue2);  								xEditWidget.ActuallNumberEdit.Value = currentValue2;    								double.TryParse(xyValueStrings2[1]' out currentValue2);  								yEditWidget.ActuallNumberEdit.Value = currentValue2;  							};    						}  						break;    					case SliceSettingData.DataEditTypes.OFFSET2:  						{  							Vector2 offset = ActiveSliceSettings.Instance.Helpers.ExtruderOffset(extruderIndex);    							var xEditWidget = new MHNumberEdit(offset.x' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  							};    							var yEditWidget = new MHNumberEdit(offset.y' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Margin = new BorderDouble(20' 0' 0' 0)'  							};    							xEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								int extruderIndexLocal = extruderIndex;  								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(xEditWidget);  							dataArea.AddChild(new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  							{  								VAnchor = VAnchor.ParentCenter'  								Margin = new BorderDouble(5' 0)'  							});    							yEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								int extruderIndexLocal = extruderIndex;  								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(yEditWidget);  							var yLabel = new GuiWidget()  							{  								Padding = new BorderDouble(5' 0)'  								HAnchor = HAnchor.ParentLeftRight'  								VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  							};  							yLabel.AddChild(new WrappedTextWidget("Y"' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));  							unitsArea.AddChild(yLabel);    							settingsRow.ValueChanged = (text) =>  							{  								Vector2 offset2 = ActiveSliceSettings.Instance.Helpers.ExtruderOffset(extruderIndex);  								xEditWidget.ActuallNumberEdit.Value = offset2.x;  								yEditWidget.ActuallNumberEdit.Value = offset2.y;  							};  						}  						break;    					default:  						var missingSetting = new TextWidget(String.Format("Missing the setting for '{0}'."' settingData.DataEditType.ToString()))  						{  							TextColor = ActiveTheme.Instance.PrimaryTextColor'  							BackgroundColor = RGBA_Bytes.Red  						};  						dataArea.AddChild(missingSetting);  						break;  				}  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The following statement contains a magic number: if (!PrinterSettings.KnownSettings.Contains(settingData.SlicerConfigName))  			{  				// the setting we think we are adding is not in the known settings it may have been deprecated  				TextWidget settingName = new TextWidget(String.Format("Setting '{0}' not found in known settings"' settingData.SlicerConfigName));  				settingName.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				//settingName.MinimumSize = new Vector2(minSettingNameWidth' settingName.MinimumSize.y);  				nameArea.AddChild(settingName);  				nameArea.BackgroundColor = RGBA_Bytes.Red;  			}  			else  			{  				int intEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int doubleEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int vectorXYEditWidth = (int)(60 * GuiWidget.DeviceScale + .5);  				int multiLineEditHeight = (int)(120 * GuiWidget.DeviceScale + .5);    				if (settingData.DataEditType != SliceSettingData.DataEditTypes.MULTI_LINE_TEXT)  				{  					var nameHolder = new GuiWidget()  					{  						Padding = new BorderDouble(0' 0' 5' 0)'  						VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  						HAnchor = HAnchor.ParentLeftRight'  					};    					nameHolder.AddChild(new WrappedTextWidget(settingData.PresentationName.Localize()' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor));    					nameArea.AddChild(nameHolder);  				}    				switch (settingData.DataEditType)  				{  					case SliceSettingData.DataEditTypes.INT:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();  							int currentValue;  							int.TryParse(sliceSettingValue' out currentValue);    							var intEditWidget = new MHNumberEdit(currentValue' pixelWidth: intEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Name = settingData.PresentationName + " Edit"'  							};  							intEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							content.AddChild(intEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' intEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								intEditWidget.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.DOUBLE:  						{  							double currentValue;  							double.TryParse(sliceSettingValue' out currentValue);    							var doubleEditWidget = new MHNumberEdit(currentValue' allowNegatives: true' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2 = 0;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.POSITIVE_DOUBLE:  						{  							const string multiValuesAreDiffernt = "-";  							FlowLayoutWidget content = new FlowLayoutWidget();    							var doubleEditWidget = new MHNumberEdit(0' allowDecimals: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								Name = settingData.PresentationName + " Textbox"'  								SelectAllOnFocus = true  							};    							double currentValue;  							bool ChangesMultipleOtherSettings = settingData.SetSettingsOnChange.Count > 0;  							if (ChangesMultipleOtherSettings)  							{  								bool allTheSame = true;  								string setting = GetActiveValue(settingData.SetSettingsOnChange[0]["TargetSetting"]' layerCascade);  								for (int i = 1; i < settingData.SetSettingsOnChange.Count; i++)  								{  									string nextSetting = GetActiveValue(settingData.SetSettingsOnChange[i]["TargetSetting"]' layerCascade);  									if (setting != nextSetting)  									{  										allTheSame = false;  										break;  									}  								}    								if (allTheSame && setting.EndsWith("mm"))  								{  									double.TryParse(setting.Substring(0' setting.Length - 2)' out currentValue);  									doubleEditWidget.ActuallNumberEdit.Value = currentValue;  								}  								else  								{  									doubleEditWidget.ActuallNumberEdit.InternalNumberEdit.Text = multiValuesAreDiffernt;  								}  							}  							else // just set the setting normally  							{  								double.TryParse(sliceSettingValue' out currentValue);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue;  							}  							doubleEditWidget.ActuallNumberEdit.InternalTextEditWidget.MarkAsStartingState();  							  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								NumberEdit numberEdit = (NumberEdit)sender;  								// If this setting sets other settings' then do that.  								if (ChangesMultipleOtherSettings  									&& numberEdit.Text != multiValuesAreDiffernt)  								{  									{  										ActiveSliceSettings.Instance.SetValue(settingData.SetSettingsOnChange[0]["TargetSetting"]' numberEdit.Value.ToString() + "mm"' persistenceLayer);  									}  								}    								// also always save to the local setting  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' numberEdit.Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							content.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' doubleEditWidget.ActuallNumberEdit.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2 = 0;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.OFFSET:  						{  							double currentValue;  							double.TryParse(sliceSettingValue' out currentValue);  							var doubleEditWidget = new MHNumberEdit(currentValue' allowDecimals: true' allowNegatives: true' pixelWidth: doubleEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true    							};  							doubleEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((NumberEdit)sender).Value.ToString()' persistenceLayer);  								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(doubleEditWidget);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2;  								double.TryParse(text' out currentValue2);  								doubleEditWidget.ActuallNumberEdit.Value = currentValue2;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.DOUBLE_OR_PERCENT:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();    							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: doubleEditWidth - 2' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								var textEditWidget = (TextEditWidget)sender;  								string text = textEditWidget.Text.Trim();    								bool isPercent = text.Contains("%");  								if (isPercent)  								{  									text = text.Substring(0' text.IndexOf("%"));  								}  								double result;  								double.TryParse(text' out result);  								text = result.ToString();  								if (isPercent)  								{  									text += "%";  								}  								textEditWidget.Text = text;  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' textEditWidget.Text' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							stringEdit.ActualTextEditWidget.InternalTextEditWidget.AllSelected += (sender' e) =>  							{  								// select everything up to the % (if present)  								InternalTextEditWidget textEditWidget = (InternalTextEditWidget)sender;  								int percentIndex = textEditWidget.Text.IndexOf("%");  								if (percentIndex != -1)  								{  									textEditWidget.SetSelection(0' percentIndex - 1);  								}  							};    							content.AddChild(stringEdit);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.INT_OR_MM:  						{  							FlowLayoutWidget content = new FlowLayoutWidget();    							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: doubleEditWidth - 2' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};    							string startingText = stringEdit.Text;  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								TextEditWidget textEditWidget = (TextEditWidget)sender;  								// only validate when we lose focus  								if (!textEditWidget.ContainsFocus)  								{  									string text = textEditWidget.Text;  									text = text.Trim();  									bool isMm = text.Contains("mm");  									if (isMm)  									{  										text = text.Substring(0' text.IndexOf("mm"));  									}  									double result;  									double.TryParse(text' out result);  									text = result.ToString();  									if (isMm)  									{  										text += "mm";  									}  									else  									{  										result = (int)result;  										text = result.ToString();  									}  									textEditWidget.Text = text;  									startingText = stringEdit.Text;  								}  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' textEditWidget.Text' persistenceLayer);  								settingsRow.UpdateStyle();    								// make sure we are still looking for the final validation before saving.  								if (textEditWidget.ContainsFocus)  								{  									UiThread.RunOnIdle(() =>  									{  										string currentText = textEditWidget.Text;  										int cursorIndex = textEditWidget.InternalTextEditWidget.CharIndexToInsertBefore;  										textEditWidget.Text = startingText;  										textEditWidget.InternalTextEditWidget.MarkAsStartingState();  										textEditWidget.Text = currentText;  										textEditWidget.InternalTextEditWidget.CharIndexToInsertBefore = cursorIndex;  									});  								}  							};    							stringEdit.ActualTextEditWidget.InternalTextEditWidget.AllSelected += (sender' e) =>  							{  								// select everything up to the mm (if present)  								InternalTextEditWidget textEditWidget = (InternalTextEditWidget)sender;  								int mMIndex = textEditWidget.Text.IndexOf("mm");  								if (mMIndex != -1)  								{  									textEditWidget.SetSelection(0' mMIndex - 1);  								}  							};    							content.AddChild(stringEdit);  							unitsArea.AddChild(GetExtraSettingsWidget(settingData));    							if (settingData.QuickMenuSettings.Count > 0)  							{  								dataArea.AddChild(CreateQuickMenu(settingData' persistenceLayer' content' stringEdit.ActualTextEditWidget.InternalTextEditWidget' layerCascade));  							}  							else  							{  								dataArea.AddChild(content);  							}    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.CHECK_BOX:  						{  							var checkBoxWidget = new CheckBox("")  							{  								Name = settingData.PresentationName + " Checkbox"'  								ToolTipText = settingData.HelpText'  								VAnchor = Agg.UI.VAnchor.ParentBottom'  								TextColor = ActiveTheme.Instance.PrimaryTextColor'  								Checked = sliceSettingValue == "1"  							};  							checkBoxWidget.Click += (sender' e) =>  							{  								// SetValue should only be called when the checkbox is clicked. If this code makes its way into checkstatechanged  								// we end up adding a key back into the dictionary after we call .ClearValue' resulting in the blue override bar reappearing after  								// clearing a useroverride with the red x  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' checkBoxWidget.Checked ? "1" : "0"' persistenceLayer);  							};  							checkBoxWidget.CheckedStateChanged += (s' e) =>  							{  								// Linked settings should be updated in all cases (user clicked checkbox' user clicked clear)  								foreach (var setSettingsData in settingData.SetSettingsOnChange)  								{  									string targetValue;  									if (setSettingsData.TryGetValue(checkBoxWidget.Checked ? "OnValue" : "OffValue"' out targetValue))  									{  										ActiveSliceSettings.Instance.SetValue(setSettingsData["TargetSetting"]' targetValue' persistenceLayer);  									}  								}    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(checkBoxWidget);    							settingsRow.ValueChanged = (text) =>  							{  								checkBoxWidget.Checked = text == "1";  							};  						}  						break;    					case SliceSettingData.DataEditTypes.STRING:  						{  							var stringEdit = new MHTextEditWidget(sliceSettingValue' pixelWidth: settingData.ShowAsOverride ? 120 : 200' tabIndex: tabIndexForItem++)  							{  								Name = settingData.PresentationName + " Edit"'  							};  							stringEdit.ToolTipText = settingData.HelpText;  							  							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((TextEditWidget)sender).Text' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							dataArea.AddChild(stringEdit);    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.MULTI_LINE_TEXT:  						{  							string convertedNewLines = sliceSettingValue.Replace("\\n"' "\n");  							var stringEdit = new MHTextEditWidget(convertedNewLines' pixelWidth: 320' pixelHeight: multiLineEditHeight' multiLine: true' tabIndex: tabIndexForItem++' typeFace: ApplicationController.MonoSpacedTypeFace)  							{  								HAnchor = HAnchor.ParentLeftRight'  							};    							stringEdit.DrawFromHintedCache();    							stringEdit.ActualTextEditWidget.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' ((TextEditWidget)sender).Text.Replace("\n"' "\\n")' persistenceLayer);  								settingsRow.UpdateStyle();  							};    							nameArea.HAnchor = HAnchor.AbsolutePosition;  							nameArea.Width = 0;  							dataArea.AddChild(stringEdit);  							dataArea.HAnchor = HAnchor.ParentLeftRight;    							settingsRow.ValueChanged = (text) =>  							{  								stringEdit.Text = text.Replace("\\n"' "\n");  							};  						}  						break;    					case SliceSettingData.DataEditTypes.COM_PORT:  						{  #if __ANDROID__  							addControl = false;  #endif    							EventHandler localUnregisterEvents = null;    							bool canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect;  							// The COM_PORT control is unique in its approach to the SlicerConfigName. It uses "com_port" settings name to  							// bind to a context that will place it in the SliceSetting view but it binds its values to a machine  							// specific dictionary key that is not exposed in the UI. At runtime we lookup and store to '<machinename>_com_port'  							// ensuring that a single printer can be shared across different devices and we'll select the correct com port in each case  							var selectableOptions = new DropDownList("None".Localize()' maxHeight: 200)  							{  								ToolTipText = settingData.HelpText'  								Margin = new BorderDouble()'  								Name = "Serial Port Dropdown"'  								// Prevent droplist interaction when connected  								Enabled = canChangeComPort'  								TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150)'  								BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150)'  							};    							selectableOptions.Click += (s' e) =>  							{  								AddComMenuItems(settingData' persistenceLayer' settingsRow' selectableOptions);  							};    							AddComMenuItems(settingData' persistenceLayer' settingsRow' selectableOptions);    							dataArea.AddChild(selectableOptions);    							settingsRow.ValueChanged = (text) =>  							{  								// Lookup the machine specific comport value rather than the passed in text value  								selectableOptions.SelectedLabel = ActiveSliceSettings.Instance.Helpers.ComPort();  							};    							// Prevent droplist interaction when connected  							PrinterConnectionAndCommunication.Instance.CommunicationStateChanged.RegisterEvent((s' e) =>  							{  								canChangeComPort = !PrinterConnectionAndCommunication.Instance.PrinterIsConnected && PrinterConnectionAndCommunication.Instance.CommunicationState != PrinterConnectionAndCommunication.CommunicationStates.AttemptingToConnect;  								selectableOptions.Enabled = canChangeComPort;  								selectableOptions.TextColor = canChangeComPort ? ActiveTheme.Instance.PrimaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.PrimaryTextColor' 150);  								selectableOptions.BorderColor = canChangeComPort ? ActiveTheme.Instance.SecondaryTextColor : new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor' 150);  							}' ref localUnregisterEvents);    							// Release event listener on close  							selectableOptions.Closed += (s' e) =>  							{  								localUnregisterEvents?.Invoke(null' null);  							};  						}  						break;    					case SliceSettingData.DataEditTypes.LIST:  						{  							var selectableOptions = new DropDownList("None".Localize()' maxHeight: 200)  							{  								ToolTipText = settingData.HelpText'  								Margin = new BorderDouble()  							};    							foreach (string listItem in settingData.ExtraSettings.Split('''))  							{  								MenuItem newItem = selectableOptions.AddItem(listItem);  								if (newItem.Text == sliceSettingValue)  								{  									selectableOptions.SelectedLabel = sliceSettingValue;  								}    								newItem.Selected += (sender' e) =>  								{  									MenuItem menuItem = ((MenuItem)sender);  									ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' menuItem.Text' persistenceLayer);    									settingsRow.UpdateStyle();  								};  							}    							dataArea.AddChild(selectableOptions);    							settingsRow.ValueChanged = (text) =>  							{  								selectableOptions.SelectedLabel = text;  							};  						}  						break;    					case SliceSettingData.DataEditTypes.HARDWARE_PRESENT:  						{  							var checkBoxWidget = new CheckBox("")  							{  								Name = settingData.PresentationName + " Checkbox"'  								ToolTipText = settingData.HelpText'  								VAnchor = Agg.UI.VAnchor.ParentBottom'  								TextColor = ActiveTheme.Instance.PrimaryTextColor'  								Checked = sliceSettingValue == "1"  							};    							checkBoxWidget.Click += (sender' e) =>  							{  								bool isChecked = ((CheckBox)sender).Checked;  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' isChecked ? "1" : "0"' persistenceLayer);    								settingsRow.UpdateStyle();  							};    							dataArea.AddChild(checkBoxWidget);    							settingsRow.ValueChanged = (text) =>  							{  								checkBoxWidget.Checked = text == "1";  							};  						}  						break;    					case SliceSettingData.DataEditTypes.VECTOR2:  						{  							string[] xyValueStrings = sliceSettingValue.Split(''');  							if (xyValueStrings.Length != 2)  							{  								xyValueStrings = new string[] { "0"' "0" };  							}    							double currentXValue;  							double.TryParse(xyValueStrings[0]' out currentXValue);    							var xEditWidget = new MHNumberEdit(currentXValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true  							};    							double currentYValue;  							double.TryParse(xyValueStrings[1]' out currentYValue);    							var yEditWidget = new MHNumberEdit(currentYValue' allowDecimals: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Margin = new BorderDouble(20' 0' 0' 0)'  							};    							xEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(xEditWidget);  							dataArea.AddChild(new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  							{  								VAnchor = VAnchor.ParentCenter'  								Margin = new BorderDouble(5' 0)'  							});    							yEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								ActiveSliceSettings.Instance.SetValue(settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "'" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(yEditWidget);  							var yLabel = new GuiWidget()  							{  								VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  								Padding = new BorderDouble(5' 0)'  								HAnchor = HAnchor.ParentLeftRight'  							};  							yLabel.AddChild(new WrappedTextWidget("Y"' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));  							unitsArea.AddChild(yLabel);    							settingsRow.ValueChanged = (text) =>  							{  								double currentValue2;  								string[] xyValueStrings2 = text.Split(''');  								if (xyValueStrings2.Length != 2)  								{  									xyValueStrings2 = new string[] { "0"' "0" };  								}    								double.TryParse(xyValueStrings2[0]' out currentValue2);  								xEditWidget.ActuallNumberEdit.Value = currentValue2;    								double.TryParse(xyValueStrings2[1]' out currentValue2);  								yEditWidget.ActuallNumberEdit.Value = currentValue2;  							};    						}  						break;    					case SliceSettingData.DataEditTypes.OFFSET2:  						{  							Vector2 offset = ActiveSliceSettings.Instance.Helpers.ExtruderOffset(extruderIndex);    							var xEditWidget = new MHNumberEdit(offset.x' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  							};    							var yEditWidget = new MHNumberEdit(offset.y' allowDecimals: true' allowNegatives: true' pixelWidth: vectorXYEditWidth' tabIndex: tabIndexForItem++)  							{  								ToolTipText = settingData.HelpText'  								SelectAllOnFocus = true'  								Margin = new BorderDouble(20' 0' 0' 0)'  							};    							xEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								int extruderIndexLocal = extruderIndex;  								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(xEditWidget);  							dataArea.AddChild(new TextWidget("X"' pointSize: 10' textColor: ActiveTheme.Instance.PrimaryTextColor)  							{  								VAnchor = VAnchor.ParentCenter'  								Margin = new BorderDouble(5' 0)'  							});    							yEditWidget.ActuallNumberEdit.EditComplete += (sender' e) =>  							{  								int extruderIndexLocal = extruderIndex;  								SaveCommaSeparatedIndexSetting(extruderIndexLocal' layerCascade' settingData.SlicerConfigName' xEditWidget.ActuallNumberEdit.Value.ToString() + "x" + yEditWidget.ActuallNumberEdit.Value.ToString()' persistenceLayer);    								settingsRow.UpdateStyle();  							};  							dataArea.AddChild(yEditWidget);  							var yLabel = new GuiWidget()  							{  								Padding = new BorderDouble(5' 0)'  								HAnchor = HAnchor.ParentLeftRight'  								VAnchor = VAnchor.FitToChildren | VAnchor.ParentCenter'  							};  							yLabel.AddChild(new WrappedTextWidget("Y"' pointSize: 9' textColor: ActiveTheme.Instance.PrimaryTextColor));  							unitsArea.AddChild(yLabel);    							settingsRow.ValueChanged = (text) =>  							{  								Vector2 offset2 = ActiveSliceSettings.Instance.Helpers.ExtruderOffset(extruderIndex);  								xEditWidget.ActuallNumberEdit.Value = offset2.x;  								yEditWidget.ActuallNumberEdit.Value = offset2.y;  							};  						}  						break;    					default:  						var missingSetting = new TextWidget(String.Format("Missing the setting for '{0}'."' settingData.DataEditType.ToString()))  						{  							TextColor = ActiveTheme.Instance.PrimaryTextColor'  							BackgroundColor = RGBA_Bytes.Red  						};  						dataArea.AddChild(missingSetting);  						break;  				}  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The following statement contains a magic number: if (settingData.ShowAsOverride)  			{  				restoreButton = new Button(new ButtonViewStates(new ImageWidget(restoreNormal)' new ImageWidget(restoreHover)' new ImageWidget(restorePressed)' new ImageWidget(restoreNormal)))  				{  					Name = "Restore " + settingData.SlicerConfigName'  					VAnchor = VAnchor.ParentCenter'  					Margin = new BorderDouble(0' 0' 5' 0)'  					ToolTipText = "Restore Default".Localize()  				};    				restoreButton.Click += (sender' e) =>  				{  					// Revert the user override   					if (persistenceLayer == null)  					{  						ActiveSliceSettings.Instance.ClearValue(settingData.SlicerConfigName);  					}  					else  					{  						ActiveSliceSettings.Instance.ClearValue(settingData.SlicerConfigName' persistenceLayer);  					}    					settingsRow.RefreshValue(layerCascade);  				};    				restoreArea.AddChild(restoreButton);  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,ColorCircle,The following statement contains a magic number: Vector2 center = new Vector2(size / 2.0' size / 2.0);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,ColorCircle,The following statement contains a magic number: Vector2 center = new Vector2(size / 2.0' size / 2.0);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,ColorCircle,The following statement contains a magic number: normalGraphics.Circle(center' size / 2.0' color);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,ColorCircle,The following statement contains a magic number: normalGraphics.Line(center + new Vector2(-size / 4.0' -size / 4.0)' center + new Vector2(size / 4.0' size / 4.0)' RGBA_Bytes.White' 2 * GuiWidget.DeviceScale);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,ColorCircle,The following statement contains a magic number: normalGraphics.Line(center + new Vector2(-size / 4.0' -size / 4.0)' center + new Vector2(size / 4.0' size / 4.0)' RGBA_Bytes.White' 2 * GuiWidget.DeviceScale);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,ColorCircle,The following statement contains a magic number: normalGraphics.Line(center + new Vector2(-size / 4.0' -size / 4.0)' center + new Vector2(size / 4.0' size / 4.0)' RGBA_Bytes.White' 2 * GuiWidget.DeviceScale);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,ColorCircle,The following statement contains a magic number: normalGraphics.Line(center + new Vector2(-size / 4.0' -size / 4.0)' center + new Vector2(size / 4.0' size / 4.0)' RGBA_Bytes.White' 2 * GuiWidget.DeviceScale);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,ColorCircle,The following statement contains a magic number: normalGraphics.Line(center + new Vector2(-size / 4.0' -size / 4.0)' center + new Vector2(size / 4.0' size / 4.0)' RGBA_Bytes.White' 2 * GuiWidget.DeviceScale);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,ColorCircle,The following statement contains a magic number: normalGraphics.Line(center + new Vector2(-size / 4.0' size / 4.0)' center + new Vector2(size / 4.0' -size / 4.0)' RGBA_Bytes.White' 2 * GuiWidget.DeviceScale);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,ColorCircle,The following statement contains a magic number: normalGraphics.Line(center + new Vector2(-size / 4.0' size / 4.0)' center + new Vector2(size / 4.0' -size / 4.0)' RGBA_Bytes.White' 2 * GuiWidget.DeviceScale);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,ColorCircle,The following statement contains a magic number: normalGraphics.Line(center + new Vector2(-size / 4.0' size / 4.0)' center + new Vector2(size / 4.0' -size / 4.0)' RGBA_Bytes.White' 2 * GuiWidget.DeviceScale);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,ColorCircle,The following statement contains a magic number: normalGraphics.Line(center + new Vector2(-size / 4.0' size / 4.0)' center + new Vector2(size / 4.0' -size / 4.0)' RGBA_Bytes.White' 2 * GuiWidget.DeviceScale);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,ColorCircle,The following statement contains a magic number: normalGraphics.Line(center + new Vector2(-size / 4.0' size / 4.0)' center + new Vector2(size / 4.0' -size / 4.0)' RGBA_Bytes.White' 2 * GuiWidget.DeviceScale);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateQuickMenu,The following statement contains a magic number: DropDownList selectableOptions = new DropDownList("Custom"' maxHeight: 200);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateQuickMenu,The following statement contains a magic number: selectableOptions.Margin = new BorderDouble(0' 0' 10' 0);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SettingsRow,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,SettingsRow,The following statement contains a magic number: Margin = new BorderDouble(0' 2);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SettingsRow,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,SettingsRow,The following statement contains a magic number: Padding = new BorderDouble(3);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingListControl,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,SliceSettingListControl,The following statement contains a magic number: topToBottomItemList.Margin = new BorderDouble(top: 3);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsOrganizer,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsOrganizer.cs,LoadAndParseSettingsFiles,The following statement contains a magic number: foreach (string line in StaticData.Instance.ReadAllLines(Path.Combine("SliceSettings"' "Layouts.txt")))  			{  				if (line.Length > 0)  				{  					string sanitizedLine = line.Replace('"'' ' ').Trim();  					switch (CountLeadingSpaces(line))  					{  						case 0:  							userLevelToAddTo = new OrganizerUserLevel(sanitizedLine);  							UserLevels.Add(sanitizedLine' userLevelToAddTo);  							break;    						case 2:  							categoryToAddTo = new OrganizerCategory(sanitizedLine);  							userLevelToAddTo.CategoriesList.Add(categoryToAddTo);  							break;    						case 4:  							groupToAddTo = new OrganizerGroup(sanitizedLine);  							categoryToAddTo.GroupsList.Add(groupToAddTo);  							break;    						case 6:  							subGroupToAddTo = new OrganizerSubGroup(sanitizedLine);  							groupToAddTo.SubGroupsList.Add(subGroupToAddTo);  							break;    						case 8:  							SliceSettingData data = GetSettingsData(sanitizedLine);  							if (data != null)  							{  								subGroupToAddTo.SettingDataList.Add(data);  							}    							break;    						default:  							throw new Exception("Bad file' too many spaces (must be 0' 2' 4 or 6).");  					}  				}  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsOrganizer,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsOrganizer.cs,LoadAndParseSettingsFiles,The following statement contains a magic number: foreach (string line in StaticData.Instance.ReadAllLines(Path.Combine("SliceSettings"' "Layouts.txt")))  			{  				if (line.Length > 0)  				{  					string sanitizedLine = line.Replace('"'' ' ').Trim();  					switch (CountLeadingSpaces(line))  					{  						case 0:  							userLevelToAddTo = new OrganizerUserLevel(sanitizedLine);  							UserLevels.Add(sanitizedLine' userLevelToAddTo);  							break;    						case 2:  							categoryToAddTo = new OrganizerCategory(sanitizedLine);  							userLevelToAddTo.CategoriesList.Add(categoryToAddTo);  							break;    						case 4:  							groupToAddTo = new OrganizerGroup(sanitizedLine);  							categoryToAddTo.GroupsList.Add(groupToAddTo);  							break;    						case 6:  							subGroupToAddTo = new OrganizerSubGroup(sanitizedLine);  							groupToAddTo.SubGroupsList.Add(subGroupToAddTo);  							break;    						case 8:  							SliceSettingData data = GetSettingsData(sanitizedLine);  							if (data != null)  							{  								subGroupToAddTo.SettingDataList.Add(data);  							}    							break;    						default:  							throw new Exception("Bad file' too many spaces (must be 0' 2' 4 or 6).");  					}  				}  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsOrganizer,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsOrganizer.cs,LoadAndParseSettingsFiles,The following statement contains a magic number: foreach (string line in StaticData.Instance.ReadAllLines(Path.Combine("SliceSettings"' "Layouts.txt")))  			{  				if (line.Length > 0)  				{  					string sanitizedLine = line.Replace('"'' ' ').Trim();  					switch (CountLeadingSpaces(line))  					{  						case 0:  							userLevelToAddTo = new OrganizerUserLevel(sanitizedLine);  							UserLevels.Add(sanitizedLine' userLevelToAddTo);  							break;    						case 2:  							categoryToAddTo = new OrganizerCategory(sanitizedLine);  							userLevelToAddTo.CategoriesList.Add(categoryToAddTo);  							break;    						case 4:  							groupToAddTo = new OrganizerGroup(sanitizedLine);  							categoryToAddTo.GroupsList.Add(groupToAddTo);  							break;    						case 6:  							subGroupToAddTo = new OrganizerSubGroup(sanitizedLine);  							groupToAddTo.SubGroupsList.Add(subGroupToAddTo);  							break;    						case 8:  							SliceSettingData data = GetSettingsData(sanitizedLine);  							if (data != null)  							{  								subGroupToAddTo.SettingDataList.Add(data);  							}    							break;    						default:  							throw new Exception("Bad file' too many spaces (must be 0' 2' 4 or 6).");  					}  				}  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsOrganizer,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsOrganizer.cs,LoadAndParseSettingsFiles,The following statement contains a magic number: foreach (string line in StaticData.Instance.ReadAllLines(Path.Combine("SliceSettings"' "Layouts.txt")))  			{  				if (line.Length > 0)  				{  					string sanitizedLine = line.Replace('"'' ' ').Trim();  					switch (CountLeadingSpaces(line))  					{  						case 0:  							userLevelToAddTo = new OrganizerUserLevel(sanitizedLine);  							UserLevels.Add(sanitizedLine' userLevelToAddTo);  							break;    						case 2:  							categoryToAddTo = new OrganizerCategory(sanitizedLine);  							userLevelToAddTo.CategoriesList.Add(categoryToAddTo);  							break;    						case 4:  							groupToAddTo = new OrganizerGroup(sanitizedLine);  							categoryToAddTo.GroupsList.Add(groupToAddTo);  							break;    						case 6:  							subGroupToAddTo = new OrganizerSubGroup(sanitizedLine);  							groupToAddTo.SubGroupsList.Add(subGroupToAddTo);  							break;    						case 8:  							SliceSettingData data = GetSettingsData(sanitizedLine);  							if (data != null)  							{  								subGroupToAddTo.SettingDataList.Add(data);  							}    							break;    						default:  							throw new Exception("Bad file' too many spaces (must be 0' 2' 4 or 6).");  					}  				}  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SlicingQueue,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SlicingQueue.cs,GetStlFileLocations,The following statement contains a magic number: switch (Path.GetExtension(fileToSlice).ToUpper())  			{  				case ".STL":  				case ".GCODE":  					extrudersUsed[0] = true;  					return new string[] { fileToSlice };    				case ".AMF":  					List<MeshGroup> meshGroups = MeshFileIo.Load(fileToSlice);  					if (meshGroups != null)  					{  						List<MeshGroup> extruderMeshGroups = new List<MeshGroup>();  						for (int extruderIndex = 0; extruderIndex < extruderCount; extruderIndex++)  						{  							extruderMeshGroups.Add(new MeshGroup());  						}  						int maxExtruderIndex = 0;  						foreach (MeshGroup meshGroup in meshGroups)  						{  							foreach (Mesh mesh in meshGroup.Meshes)  							{  								MeshMaterialData material = MeshMaterialData.Get(mesh);  								int extruderIndex = Math.Max(0' material.MaterialIndex - 1);  								maxExtruderIndex = Math.Max(maxExtruderIndex' extruderIndex);  								if (extruderIndex >= extruderCount)  								{  									extrudersUsed[0] = true;  									extruderMeshGroups[0].Meshes.Add(mesh);  								}  								else  								{  									extrudersUsed[extruderIndex] = true;  									extruderMeshGroups[extruderIndex].Meshes.Add(mesh);  								}  							}  						}    						int savedStlCount = 0;  						List<string> extruderFilesToSlice = new List<string>();  						for (int extruderIndex = 0; extruderIndex < extruderMeshGroups.Count; extruderIndex++)  						{  							MeshGroup meshGroup = extruderMeshGroups[extruderIndex];  							List<int> materialsToInclude = new List<int>();  							materialsToInclude.Add(extruderIndex + 1);  							if (extruderIndex == 0)  							{  								for (int j = extruderCount + 1; j < maxExtruderIndex + 2; j++)  								{  									materialsToInclude.Add(j);  								}  							}    							if (doMergeInSlicer)  							{  								int meshCount = meshGroup.Meshes.Count;                                  for (int meshIndex =0; meshIndex< meshCount; meshIndex++)  								{  									Mesh mesh = meshGroup.Meshes[meshIndex];  									if ((meshIndex % 2) == 0)  									{  										mergeRules += "({0}".FormatWith(savedStlCount);  									}  									else  									{  										if(meshIndex < meshCount -1)  										{  											mergeRules += "'({0}".FormatWith(savedStlCount);  										}  										else  										{  											mergeRules += "'{0}".FormatWith(savedStlCount);  										}  									}  									int currentMeshMaterialIntdex = MeshMaterialData.Get(mesh).MaterialIndex;  									if (materialsToInclude.Contains(currentMeshMaterialIntdex))  									{  										extruderFilesToSlice.Add(SaveAndGetFilenameForMesh(mesh));  									}  									savedStlCount++;  								}  								for (int i = 0; i < meshCount-1; i++)  								{  									mergeRules += ")";  								}  							}  							else  							{  								extruderFilesToSlice.Add(SaveAndGetFilenameForMaterial(meshGroup' materialsToInclude));  							}  						}  						return extruderFilesToSlice.ToArray();  					}  					return new string[] { "" };    				default:  					return new string[] { "" };  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SlicingQueue,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SlicingQueue.cs,GetStlFileLocations,The following statement contains a magic number: switch (Path.GetExtension(fileToSlice).ToUpper())  			{  				case ".STL":  				case ".GCODE":  					extrudersUsed[0] = true;  					return new string[] { fileToSlice };    				case ".AMF":  					List<MeshGroup> meshGroups = MeshFileIo.Load(fileToSlice);  					if (meshGroups != null)  					{  						List<MeshGroup> extruderMeshGroups = new List<MeshGroup>();  						for (int extruderIndex = 0; extruderIndex < extruderCount; extruderIndex++)  						{  							extruderMeshGroups.Add(new MeshGroup());  						}  						int maxExtruderIndex = 0;  						foreach (MeshGroup meshGroup in meshGroups)  						{  							foreach (Mesh mesh in meshGroup.Meshes)  							{  								MeshMaterialData material = MeshMaterialData.Get(mesh);  								int extruderIndex = Math.Max(0' material.MaterialIndex - 1);  								maxExtruderIndex = Math.Max(maxExtruderIndex' extruderIndex);  								if (extruderIndex >= extruderCount)  								{  									extrudersUsed[0] = true;  									extruderMeshGroups[0].Meshes.Add(mesh);  								}  								else  								{  									extrudersUsed[extruderIndex] = true;  									extruderMeshGroups[extruderIndex].Meshes.Add(mesh);  								}  							}  						}    						int savedStlCount = 0;  						List<string> extruderFilesToSlice = new List<string>();  						for (int extruderIndex = 0; extruderIndex < extruderMeshGroups.Count; extruderIndex++)  						{  							MeshGroup meshGroup = extruderMeshGroups[extruderIndex];  							List<int> materialsToInclude = new List<int>();  							materialsToInclude.Add(extruderIndex + 1);  							if (extruderIndex == 0)  							{  								for (int j = extruderCount + 1; j < maxExtruderIndex + 2; j++)  								{  									materialsToInclude.Add(j);  								}  							}    							if (doMergeInSlicer)  							{  								int meshCount = meshGroup.Meshes.Count;                                  for (int meshIndex =0; meshIndex< meshCount; meshIndex++)  								{  									Mesh mesh = meshGroup.Meshes[meshIndex];  									if ((meshIndex % 2) == 0)  									{  										mergeRules += "({0}".FormatWith(savedStlCount);  									}  									else  									{  										if(meshIndex < meshCount -1)  										{  											mergeRules += "'({0}".FormatWith(savedStlCount);  										}  										else  										{  											mergeRules += "'{0}".FormatWith(savedStlCount);  										}  									}  									int currentMeshMaterialIntdex = MeshMaterialData.Get(mesh).MaterialIndex;  									if (materialsToInclude.Contains(currentMeshMaterialIntdex))  									{  										extruderFilesToSlice.Add(SaveAndGetFilenameForMesh(mesh));  									}  									savedStlCount++;  								}  								for (int i = 0; i < meshCount-1; i++)  								{  									mergeRules += ")";  								}  							}  							else  							{  								extruderFilesToSlice.Add(SaveAndGetFilenameForMaterial(meshGroup' materialsToInclude));  							}  						}  						return extruderFilesToSlice.ToArray();  					}  					return new string[] { "" };    				default:  					return new string[] { "" };  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SlicingQueue,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SlicingQueue.cs,CreateSlicedPartsThread,The following statement contains a magic number: while (!haltSlicingThread)  			{  				if (listOfSlicingItems.Count > 0)  				{  					PrintItemWrapper itemToSlice = listOfSlicingItems[0];  					bool doMergeInSlicer = false;  					string mergeRules = "";  					doMergeInSlicer = ActiveSliceSettings.Instance.Helpers.ActiveSliceEngineType() == SlicingEngineTypes.MatterSlice;                      string[] stlFileLocations = GetStlFileLocations(itemToSlice.FileLocation' doMergeInSlicer' ref mergeRules);  					string fileToSlice = stlFileLocations[0];  					// check that the STL file is currently on disk  					if (File.Exists(fileToSlice))  					{  						itemToSlice.CurrentlySlicing = true;    						string currentConfigurationFileAndPath = Path.Combine(ApplicationDataStorage.Instance.GCodeOutputPath' "config_" + ActiveSliceSettings.Instance.GetLongHashCode().ToString() + ".ini");    						string gcodePathAndFileName = itemToSlice.GetGCodePathAndFileName();  						bool gcodeFileIsComplete = itemToSlice.IsGCodeFileComplete(gcodePathAndFileName);    						if (!File.Exists(gcodePathAndFileName) || !gcodeFileIsComplete)  						{  							string commandArgs = "";    							switch (ActiveSliceSettings.Instance.Helpers.ActiveSliceEngineType())  							{  								case SlicingEngineTypes.Slic3r:  									Slic3rEngineMappings.WriteSliceSettingsFile(currentConfigurationFileAndPath);  									// if we have centering turend on and are printing a model loaded up from meshes (not gcode)  									if(ActiveSliceSettings.Instance.GetValue<bool>(SettingsKey.center_part_on_bed))  									{  										// figure out the center position of this file  										Vector2 bedCenter = ActiveSliceSettings.Instance.GetValue<Vector2>(SettingsKey.print_center);  										commandArgs = $"--print-center {bedCenter.x:0.##}'{bedCenter.y:0.##} " + "--load \"" + currentConfigurationFileAndPath + "\" --output \"" + gcodePathAndFileName + "\" \"" + fileToSlice + "\"";  									}  									else  									{  										commandArgs = "--load \"" + currentConfigurationFileAndPath + "\" --output \"" + gcodePathAndFileName + "\" \"" + fileToSlice + "\"";  									}  									break;    								case SlicingEngineTypes.CuraEngine:  									commandArgs = "-v -o \"" + gcodePathAndFileName + "\" " + EngineMappingCura.GetCuraCommandLineSettings() + " \"" + fileToSlice + "\"";  									break;    								case SlicingEngineTypes.MatterSlice:  									{  										EngineMappingsMatterSlice.WriteSliceSettingsFile(currentConfigurationFileAndPath);  										if (mergeRules == "")  										{  											commandArgs = "-v -o \"" + gcodePathAndFileName + "\" -c \"" + currentConfigurationFileAndPath + "\"";  										}  										else  										{  											commandArgs = "-b {0} -v -o \"".FormatWith(mergeRules) + gcodePathAndFileName + "\" -c \"" + currentConfigurationFileAndPath + "\"";  										}  										foreach (string filename in stlFileLocations)  										{  											commandArgs = commandArgs + " \"" + filename + "\"";  										}  									}  									break;  							}    #if false  							Mesh loadedMesh = StlProcessing.Load(fileToSlice);  							SliceLayers layers = new SliceLayers();  							layers.GetPerimetersForAllLayers(loadedMesh' .2' .2);  							layers.DumpSegmentsToGcode("test.gcode");  #endif    							if (OsInformation.OperatingSystem == OSType.Android ||  								((OsInformation.OperatingSystem == OSType.Mac || runInProcess)  									&& ActiveSliceSettings.Instance.Helpers.ActiveSliceEngineType() == SlicingEngineTypes.MatterSlice))  							{  								itemCurrentlySlicing = itemToSlice;  								MatterHackers.MatterSlice.LogOutput.GetLogWrites += SendProgressToItem;  								MatterSlice.MatterSlice.ProcessArgs(commandArgs);  								MatterHackers.MatterSlice.LogOutput.GetLogWrites -= SendProgressToItem;  								itemCurrentlySlicing = null;  							}  							else  							{  								slicerProcess = new Process();  								slicerProcess.StartInfo.Arguments = commandArgs;  								string slicerFullPath = getSlicerFullPath();    								slicerProcess.StartInfo.CreateNoWindow = true;  								slicerProcess.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;  								slicerProcess.StartInfo.RedirectStandardError = true;  								slicerProcess.StartInfo.RedirectStandardOutput = true;    								slicerProcess.StartInfo.FileName = slicerFullPath;  								slicerProcess.StartInfo.UseShellExecute = false;    								slicerProcess.OutputDataReceived += (sender' args) =>  								{  									if (args.Data != null)  									{  										string message = args.Data;  										message = message.Replace("=>"' "").Trim();  										if (message.Contains(".gcode"))  										{  											message = "Saving intermediate file";  										}  										message += "...";  										UiThread.RunOnIdle(() =>  										{  											itemToSlice.OnSlicingOutputMessage(new StringEventArgs(message));  										});  									}  								};    								slicerProcess.Start();  								slicerProcess.BeginOutputReadLine();  								string stdError = slicerProcess.StandardError.ReadToEnd();    								slicerProcess.WaitForExit();  								lock(slicerProcess)  								{  									slicerProcess = null;  								}  							}  						}    						try  						{  							if (File.Exists(gcodePathAndFileName)  								&& File.Exists(currentConfigurationFileAndPath))  							{  								// make sure we have not already written the settings onto this file  								bool fileHasSettings = false;  								int bufferSize = 32000;  								using (Stream fileStream = File.OpenRead(gcodePathAndFileName))  								{  									byte[] buffer = new byte[bufferSize];  									fileStream.Seek(Math.Max(0' fileStream.Length - bufferSize)' SeekOrigin.Begin);  									int numBytesRead = fileStream.Read(buffer' 0' bufferSize);  									string fileEnd = System.Text.Encoding.UTF8.GetString(buffer);  									if (fileEnd.Contains("GCode settings used"))  									{  										fileHasSettings = true;  									}  								}    								if (!fileHasSettings)  								{  									using (StreamWriter gcodeWriter = File.AppendText(gcodePathAndFileName))  									{  										string oemName = "MatterControl";  										if (OemSettings.Instance.WindowTitleExtra != null && OemSettings.Instance.WindowTitleExtra.Trim().Length > 0)  										{  											oemName = oemName + " - {0}".FormatWith(OemSettings.Instance.WindowTitleExtra);  										}    										gcodeWriter.WriteLine("; {0} Version {1} Build {2} : GCode settings used".FormatWith(oemName' VersionInfo.Instance.ReleaseVersion' VersionInfo.Instance.BuildVersion));  										gcodeWriter.WriteLine("; Date {0} Time {1}:{2:00}".FormatWith(DateTime.Now.Date' DateTime.Now.Hour' DateTime.Now.Minute));    										foreach (string line in File.ReadLines(currentConfigurationFileAndPath))  										{  											gcodeWriter.WriteLine("; {0}".FormatWith(line));  										}  									}  								}  							}  						}  						catch (Exception)  						{  						}  					}    					UiThread.RunOnIdle(() =>  					{  						itemToSlice.CurrentlySlicing = false;  						itemToSlice.DoneSlicing = true;  					});    					lock(listOfSlicingItems)  					{  						listOfSlicingItems.RemoveAt(0);  					}  				}    				Thread.Sleep(100);  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SlicingQueue,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SlicingQueue.cs,CreateSlicedPartsThread,The following statement contains a magic number: while (!haltSlicingThread)  			{  				if (listOfSlicingItems.Count > 0)  				{  					PrintItemWrapper itemToSlice = listOfSlicingItems[0];  					bool doMergeInSlicer = false;  					string mergeRules = "";  					doMergeInSlicer = ActiveSliceSettings.Instance.Helpers.ActiveSliceEngineType() == SlicingEngineTypes.MatterSlice;                      string[] stlFileLocations = GetStlFileLocations(itemToSlice.FileLocation' doMergeInSlicer' ref mergeRules);  					string fileToSlice = stlFileLocations[0];  					// check that the STL file is currently on disk  					if (File.Exists(fileToSlice))  					{  						itemToSlice.CurrentlySlicing = true;    						string currentConfigurationFileAndPath = Path.Combine(ApplicationDataStorage.Instance.GCodeOutputPath' "config_" + ActiveSliceSettings.Instance.GetLongHashCode().ToString() + ".ini");    						string gcodePathAndFileName = itemToSlice.GetGCodePathAndFileName();  						bool gcodeFileIsComplete = itemToSlice.IsGCodeFileComplete(gcodePathAndFileName);    						if (!File.Exists(gcodePathAndFileName) || !gcodeFileIsComplete)  						{  							string commandArgs = "";    							switch (ActiveSliceSettings.Instance.Helpers.ActiveSliceEngineType())  							{  								case SlicingEngineTypes.Slic3r:  									Slic3rEngineMappings.WriteSliceSettingsFile(currentConfigurationFileAndPath);  									// if we have centering turend on and are printing a model loaded up from meshes (not gcode)  									if(ActiveSliceSettings.Instance.GetValue<bool>(SettingsKey.center_part_on_bed))  									{  										// figure out the center position of this file  										Vector2 bedCenter = ActiveSliceSettings.Instance.GetValue<Vector2>(SettingsKey.print_center);  										commandArgs = $"--print-center {bedCenter.x:0.##}'{bedCenter.y:0.##} " + "--load \"" + currentConfigurationFileAndPath + "\" --output \"" + gcodePathAndFileName + "\" \"" + fileToSlice + "\"";  									}  									else  									{  										commandArgs = "--load \"" + currentConfigurationFileAndPath + "\" --output \"" + gcodePathAndFileName + "\" \"" + fileToSlice + "\"";  									}  									break;    								case SlicingEngineTypes.CuraEngine:  									commandArgs = "-v -o \"" + gcodePathAndFileName + "\" " + EngineMappingCura.GetCuraCommandLineSettings() + " \"" + fileToSlice + "\"";  									break;    								case SlicingEngineTypes.MatterSlice:  									{  										EngineMappingsMatterSlice.WriteSliceSettingsFile(currentConfigurationFileAndPath);  										if (mergeRules == "")  										{  											commandArgs = "-v -o \"" + gcodePathAndFileName + "\" -c \"" + currentConfigurationFileAndPath + "\"";  										}  										else  										{  											commandArgs = "-b {0} -v -o \"".FormatWith(mergeRules) + gcodePathAndFileName + "\" -c \"" + currentConfigurationFileAndPath + "\"";  										}  										foreach (string filename in stlFileLocations)  										{  											commandArgs = commandArgs + " \"" + filename + "\"";  										}  									}  									break;  							}    #if false  							Mesh loadedMesh = StlProcessing.Load(fileToSlice);  							SliceLayers layers = new SliceLayers();  							layers.GetPerimetersForAllLayers(loadedMesh' .2' .2);  							layers.DumpSegmentsToGcode("test.gcode");  #endif    							if (OsInformation.OperatingSystem == OSType.Android ||  								((OsInformation.OperatingSystem == OSType.Mac || runInProcess)  									&& ActiveSliceSettings.Instance.Helpers.ActiveSliceEngineType() == SlicingEngineTypes.MatterSlice))  							{  								itemCurrentlySlicing = itemToSlice;  								MatterHackers.MatterSlice.LogOutput.GetLogWrites += SendProgressToItem;  								MatterSlice.MatterSlice.ProcessArgs(commandArgs);  								MatterHackers.MatterSlice.LogOutput.GetLogWrites -= SendProgressToItem;  								itemCurrentlySlicing = null;  							}  							else  							{  								slicerProcess = new Process();  								slicerProcess.StartInfo.Arguments = commandArgs;  								string slicerFullPath = getSlicerFullPath();    								slicerProcess.StartInfo.CreateNoWindow = true;  								slicerProcess.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;  								slicerProcess.StartInfo.RedirectStandardError = true;  								slicerProcess.StartInfo.RedirectStandardOutput = true;    								slicerProcess.StartInfo.FileName = slicerFullPath;  								slicerProcess.StartInfo.UseShellExecute = false;    								slicerProcess.OutputDataReceived += (sender' args) =>  								{  									if (args.Data != null)  									{  										string message = args.Data;  										message = message.Replace("=>"' "").Trim();  										if (message.Contains(".gcode"))  										{  											message = "Saving intermediate file";  										}  										message += "...";  										UiThread.RunOnIdle(() =>  										{  											itemToSlice.OnSlicingOutputMessage(new StringEventArgs(message));  										});  									}  								};    								slicerProcess.Start();  								slicerProcess.BeginOutputReadLine();  								string stdError = slicerProcess.StandardError.ReadToEnd();    								slicerProcess.WaitForExit();  								lock(slicerProcess)  								{  									slicerProcess = null;  								}  							}  						}    						try  						{  							if (File.Exists(gcodePathAndFileName)  								&& File.Exists(currentConfigurationFileAndPath))  							{  								// make sure we have not already written the settings onto this file  								bool fileHasSettings = false;  								int bufferSize = 32000;  								using (Stream fileStream = File.OpenRead(gcodePathAndFileName))  								{  									byte[] buffer = new byte[bufferSize];  									fileStream.Seek(Math.Max(0' fileStream.Length - bufferSize)' SeekOrigin.Begin);  									int numBytesRead = fileStream.Read(buffer' 0' bufferSize);  									string fileEnd = System.Text.Encoding.UTF8.GetString(buffer);  									if (fileEnd.Contains("GCode settings used"))  									{  										fileHasSettings = true;  									}  								}    								if (!fileHasSettings)  								{  									using (StreamWriter gcodeWriter = File.AppendText(gcodePathAndFileName))  									{  										string oemName = "MatterControl";  										if (OemSettings.Instance.WindowTitleExtra != null && OemSettings.Instance.WindowTitleExtra.Trim().Length > 0)  										{  											oemName = oemName + " - {0}".FormatWith(OemSettings.Instance.WindowTitleExtra);  										}    										gcodeWriter.WriteLine("; {0} Version {1} Build {2} : GCode settings used".FormatWith(oemName' VersionInfo.Instance.ReleaseVersion' VersionInfo.Instance.BuildVersion));  										gcodeWriter.WriteLine("; Date {0} Time {1}:{2:00}".FormatWith(DateTime.Now.Date' DateTime.Now.Hour' DateTime.Now.Minute));    										foreach (string line in File.ReadLines(currentConfigurationFileAndPath))  										{  											gcodeWriter.WriteLine("; {0}".FormatWith(line));  										}  									}  								}  							}  						}  						catch (Exception)  						{  						}  					}    					UiThread.RunOnIdle(() =>  					{  						itemToSlice.CurrentlySlicing = false;  						itemToSlice.DoneSlicing = true;  					});    					lock(listOfSlicingItems)  					{  						listOfSlicingItems.RemoveAt(0);  					}  				}    				Thread.Sleep(100);  			}
Magic Number,MatterHackers.MatterControl.EeProm,EePromMarlinSettings,C:\repos\MatterHackers_MatterControl\EeProm\EePromMarlinSettings.cs,Import,The following statement contains a magic number: foreach (string line in allLines)  			{  				if (line.Contains("|"))  				{  					string[] descriptionValue = line.Split('|');  					if (descriptionValue.Length == 2)  					{  						SetSetting(descriptionValue[0]' descriptionValue[1]);  					}  				}  			}
Magic Number,MatterHackers.MatterControl.EeProm,EePromMarlinWindow,C:\repos\MatterHackers_MatterControl\EeProm\EePromMarlinWindow.cs,EePromMarlinWindow,The following statement contains a magic number: mainContainer.Padding = new BorderDouble(3' 0);
Magic Number,MatterHackers.MatterControl.EeProm,EePromMarlinWindow,C:\repos\MatterHackers_MatterControl\EeProm\EePromMarlinWindow.cs,EePromMarlinWindow,The following statement contains a magic number: GuiWidget spaceFiller = new GuiWidget(0' 500);
Magic Number,MatterHackers.MatterControl.EeProm,EePromMarlinWindow,C:\repos\MatterHackers_MatterControl\EeProm\EePromMarlinWindow.cs,EePromMarlinWindow,The following statement contains a magic number: spaceFiller.Padding = new BorderDouble(top: 3);
Magic Number,MatterHackers.MatterControl.EeProm,EePromMarlinWindow,C:\repos\MatterHackers_MatterControl\EeProm\EePromMarlinWindow.cs,EePromMarlinWindow,The following statement contains a magic number: {  				FlowLayoutWidget topButtonBar = new FlowLayoutWidget();  				topButtonBar.HAnchor = HAnchor.ParentLeftRight;  				topButtonBar.VAnchor = VAnchor.FitToChildren | VAnchor.ParentTop;  				topButtonBar.BackgroundColor = ActiveTheme.Instance.PrimaryBackgroundColor;    				topButtonBar.Margin = new BorderDouble(0' 3);    				Button buttonSetToFactorySettings = textImageButtonFactory.Generate("Reset to Factory Defaults".Localize());  				topButtonBar.AddChild(buttonSetToFactorySettings);    				buttonSetToFactorySettings.Click += (sender' e) =>  				{  					currentEePromSettings.SetPrinterToFactorySettings();  					currentEePromSettings.Update();  				};    				mainContainer.AddChild(topButtonBar);    				topBarHeight = topButtonBar.Height;  			}
Magic Number,MatterHackers.MatterControl.EeProm,EePromMarlinWindow,C:\repos\MatterHackers_MatterControl\EeProm\EePromMarlinWindow.cs,EePromMarlinWindow,The following statement contains a magic number: conterContent.Padding = new BorderDouble(top: 3);
Magic Number,MatterHackers.MatterControl.EeProm,EePromMarlinWindow,C:\repos\MatterHackers_MatterControl\EeProm\EePromMarlinWindow.cs,EePromMarlinWindow,The following statement contains a magic number: {  				FlowLayoutWidget bottomButtonBar = new FlowLayoutWidget();  				bottomButtonBar.HAnchor = Agg.UI.HAnchor.Max_FitToChildren_ParentWidth;  				bottomButtonBar.BackgroundColor = ActiveTheme.Instance.PrimaryBackgroundColor;  				bottomButtonBar.Margin = new BorderDouble(0' 3);    				Button buttonSave = textImageButtonFactory.Generate("Save to EEProm".Localize());  				bottomButtonBar.AddChild(buttonSave);  				buttonSave.Click += (sender' e) =>  				{  					UiThread.RunOnIdle(() =>  					{  						SaveSettingsToActive();  						currentEePromSettings.SaveToEeProm();  						Close();  					});  				};    				CreateSpacer(bottomButtonBar);    				// put in the import button  #if true  				{  					Button buttonImport = textImageButtonFactory.Generate("Import".Localize() + "...");  					buttonImport.Margin = new BorderDouble(0' 3);  					buttonImport.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							FileDialog.OpenFileDialog(  								new OpenFileDialogParams("EEPROM Settings|*.ini")  								{  									ActionButtonLabel = "Import EEPROM Settings".Localize()'  									Title = "Import EEPROM".Localize()'  								}'  									(openParams) =>  									{  										if (!string.IsNullOrEmpty(openParams.FileName))  										{  											currentEePromSettings.Import(openParams.FileName);  											SetUiToPrinterSettings(null' null);                                          }  									});  						});  					};  					bottomButtonBar.AddChild(buttonImport);  				}    				// put in the export button  				{  					Button buttonExport = textImageButtonFactory.Generate("Export".Localize() + "...");  					buttonExport.Margin = new BorderDouble(0' 3);  					buttonExport.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							string defaultFileNameNoPath = "eeprom_settings.ini";                              FileDialog.SaveFileDialog(  								new SaveFileDialogParams("EEPROM Settings|*.ini")  								{  									ActionButtonLabel = "Export EEPROM Settings".Localize()'  									Title = "Export EEPROM".Localize()'  									FileName = defaultFileNameNoPath  								}'  									(saveParams) =>  									{  										if (!string.IsNullOrEmpty(saveParams.FileName)  										&& saveParams.FileName != defaultFileNameNoPath)  										{  											currentEePromSettings.Export(saveParams.FileName);  										}  									});  						});  					};  					bottomButtonBar.AddChild(buttonExport);  				}  #endif    				Button buttonAbort = textImageButtonFactory.Generate("Close".Localize());  				bottomButtonBar.AddChild(buttonAbort);  				buttonAbort.Click += buttonAbort_Click;    				mainContainer.AddChild(bottomButtonBar);  			}
Magic Number,MatterHackers.MatterControl.EeProm,EePromMarlinWindow,C:\repos\MatterHackers_MatterControl\EeProm\EePromMarlinWindow.cs,EePromMarlinWindow,The following statement contains a magic number: {  				FlowLayoutWidget bottomButtonBar = new FlowLayoutWidget();  				bottomButtonBar.HAnchor = Agg.UI.HAnchor.Max_FitToChildren_ParentWidth;  				bottomButtonBar.BackgroundColor = ActiveTheme.Instance.PrimaryBackgroundColor;  				bottomButtonBar.Margin = new BorderDouble(0' 3);    				Button buttonSave = textImageButtonFactory.Generate("Save to EEProm".Localize());  				bottomButtonBar.AddChild(buttonSave);  				buttonSave.Click += (sender' e) =>  				{  					UiThread.RunOnIdle(() =>  					{  						SaveSettingsToActive();  						currentEePromSettings.SaveToEeProm();  						Close();  					});  				};    				CreateSpacer(bottomButtonBar);    				// put in the import button  #if true  				{  					Button buttonImport = textImageButtonFactory.Generate("Import".Localize() + "...");  					buttonImport.Margin = new BorderDouble(0' 3);  					buttonImport.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							FileDialog.OpenFileDialog(  								new OpenFileDialogParams("EEPROM Settings|*.ini")  								{  									ActionButtonLabel = "Import EEPROM Settings".Localize()'  									Title = "Import EEPROM".Localize()'  								}'  									(openParams) =>  									{  										if (!string.IsNullOrEmpty(openParams.FileName))  										{  											currentEePromSettings.Import(openParams.FileName);  											SetUiToPrinterSettings(null' null);                                          }  									});  						});  					};  					bottomButtonBar.AddChild(buttonImport);  				}    				// put in the export button  				{  					Button buttonExport = textImageButtonFactory.Generate("Export".Localize() + "...");  					buttonExport.Margin = new BorderDouble(0' 3);  					buttonExport.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							string defaultFileNameNoPath = "eeprom_settings.ini";                              FileDialog.SaveFileDialog(  								new SaveFileDialogParams("EEPROM Settings|*.ini")  								{  									ActionButtonLabel = "Export EEPROM Settings".Localize()'  									Title = "Export EEPROM".Localize()'  									FileName = defaultFileNameNoPath  								}'  									(saveParams) =>  									{  										if (!string.IsNullOrEmpty(saveParams.FileName)  										&& saveParams.FileName != defaultFileNameNoPath)  										{  											currentEePromSettings.Export(saveParams.FileName);  										}  									});  						});  					};  					bottomButtonBar.AddChild(buttonExport);  				}  #endif    				Button buttonAbort = textImageButtonFactory.Generate("Close".Localize());  				bottomButtonBar.AddChild(buttonAbort);  				buttonAbort.Click += buttonAbort_Click;    				mainContainer.AddChild(bottomButtonBar);  			}
Magic Number,MatterHackers.MatterControl.EeProm,EePromMarlinWindow,C:\repos\MatterHackers_MatterControl\EeProm\EePromMarlinWindow.cs,EePromMarlinWindow,The following statement contains a magic number: {  				FlowLayoutWidget bottomButtonBar = new FlowLayoutWidget();  				bottomButtonBar.HAnchor = Agg.UI.HAnchor.Max_FitToChildren_ParentWidth;  				bottomButtonBar.BackgroundColor = ActiveTheme.Instance.PrimaryBackgroundColor;  				bottomButtonBar.Margin = new BorderDouble(0' 3);    				Button buttonSave = textImageButtonFactory.Generate("Save to EEProm".Localize());  				bottomButtonBar.AddChild(buttonSave);  				buttonSave.Click += (sender' e) =>  				{  					UiThread.RunOnIdle(() =>  					{  						SaveSettingsToActive();  						currentEePromSettings.SaveToEeProm();  						Close();  					});  				};    				CreateSpacer(bottomButtonBar);    				// put in the import button  #if true  				{  					Button buttonImport = textImageButtonFactory.Generate("Import".Localize() + "...");  					buttonImport.Margin = new BorderDouble(0' 3);  					buttonImport.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							FileDialog.OpenFileDialog(  								new OpenFileDialogParams("EEPROM Settings|*.ini")  								{  									ActionButtonLabel = "Import EEPROM Settings".Localize()'  									Title = "Import EEPROM".Localize()'  								}'  									(openParams) =>  									{  										if (!string.IsNullOrEmpty(openParams.FileName))  										{  											currentEePromSettings.Import(openParams.FileName);  											SetUiToPrinterSettings(null' null);                                          }  									});  						});  					};  					bottomButtonBar.AddChild(buttonImport);  				}    				// put in the export button  				{  					Button buttonExport = textImageButtonFactory.Generate("Export".Localize() + "...");  					buttonExport.Margin = new BorderDouble(0' 3);  					buttonExport.Click += (sender' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							string defaultFileNameNoPath = "eeprom_settings.ini";                              FileDialog.SaveFileDialog(  								new SaveFileDialogParams("EEPROM Settings|*.ini")  								{  									ActionButtonLabel = "Export EEPROM Settings".Localize()'  									Title = "Export EEPROM".Localize()'  									FileName = defaultFileNameNoPath  								}'  									(saveParams) =>  									{  										if (!string.IsNullOrEmpty(saveParams.FileName)  										&& saveParams.FileName != defaultFileNameNoPath)  										{  											currentEePromSettings.Export(saveParams.FileName);  										}  									});  						});  					};  					bottomButtonBar.AddChild(buttonExport);  				}  #endif    				Button buttonAbort = textImageButtonFactory.Generate("Close".Localize());  				bottomButtonBar.AddChild(buttonAbort);  				buttonAbort.Click += buttonAbort_Click;    				mainContainer.AddChild(bottomButtonBar);  			}
Magic Number,MatterHackers.MatterControl.EeProm,EePromMarlinWindow,C:\repos\MatterHackers_MatterControl\EeProm\EePromMarlinWindow.cs,CreateMHNumEdit,The following statement contains a magic number: numberEditToCreate = new MHNumberEdit(0' pixelWidth: 80' allowNegatives: true' allowDecimals: true);
Magic Number,MatterHackers.MatterControl.EeProm,EePromMarlinWindow,C:\repos\MatterHackers_MatterControl\EeProm\EePromMarlinWindow.cs,CreateMHNumEdit,The following statement contains a magic number: numberEditToCreate.Margin = new BorderDouble(3' 0);
Magic Number,MatterHackers.MatterControl.EeProm,EePromMarlinWindow,C:\repos\MatterHackers_MatterControl\EeProm\EePromMarlinWindow.cs,CreateTextField,The following statement contains a magic number: GuiWidget container = new GuiWidget(textWidget.Height' 24);
Magic Number,MatterHackers.MatterControl.EeProm,EePromMarlinWindow,C:\repos\MatterHackers_MatterControl\EeProm\EePromMarlinWindow.cs,Create4FieldSet,The following statement contains a magic number: row.Margin = new BorderDouble(3);
Magic Number,MatterHackers.MatterControl.EeProm,EePromMarlinWindow,C:\repos\MatterHackers_MatterControl\EeProm\EePromMarlinWindow.cs,Create4FieldSet,The following statement contains a magic number: holder.Margin = new BorderDouble(3' 0);
Magic Number,MatterHackers.MatterControl.EeProm,EePromRepetierParameter,C:\repos\MatterHackers_MatterControl\EeProm\EePromRepetierParameter.cs,update,The following statement contains a magic number: if (line.Length > 4)  			{  				string[] lines = line.Substring(4).Split(' ');  				if (lines.Length > 2)  				{  					int.TryParse(lines[0]' out type);  					int.TryParse(lines[1]' out position);  					value = lines[2];  					int startPos = 7 + lines[0].Length + lines[1].Length + lines[2].Length;  					if (line.Length > startPos)  					{  						description = line.Substring(startPos);  					}  					changed = false;  				}  			}
Magic Number,MatterHackers.MatterControl.EeProm,EePromRepetierParameter,C:\repos\MatterHackers_MatterControl\EeProm\EePromRepetierParameter.cs,update,The following statement contains a magic number: if (line.Length > 4)  			{  				string[] lines = line.Substring(4).Split(' ');  				if (lines.Length > 2)  				{  					int.TryParse(lines[0]' out type);  					int.TryParse(lines[1]' out position);  					value = lines[2];  					int startPos = 7 + lines[0].Length + lines[1].Length + lines[2].Length;  					if (line.Length > startPos)  					{  						description = line.Substring(startPos);  					}  					changed = false;  				}  			}
Magic Number,MatterHackers.MatterControl.EeProm,EePromRepetierParameter,C:\repos\MatterHackers_MatterControl\EeProm\EePromRepetierParameter.cs,update,The following statement contains a magic number: if (line.Length > 4)  			{  				string[] lines = line.Substring(4).Split(' ');  				if (lines.Length > 2)  				{  					int.TryParse(lines[0]' out type);  					int.TryParse(lines[1]' out position);  					value = lines[2];  					int startPos = 7 + lines[0].Length + lines[1].Length + lines[2].Length;  					if (line.Length > startPos)  					{  						description = line.Substring(startPos);  					}  					changed = false;  				}  			}
Magic Number,MatterHackers.MatterControl.EeProm,EePromRepetierParameter,C:\repos\MatterHackers_MatterControl\EeProm\EePromRepetierParameter.cs,update,The following statement contains a magic number: if (line.Length > 4)  			{  				string[] lines = line.Substring(4).Split(' ');  				if (lines.Length > 2)  				{  					int.TryParse(lines[0]' out type);  					int.TryParse(lines[1]' out position);  					value = lines[2];  					int startPos = 7 + lines[0].Length + lines[1].Length + lines[2].Length;  					if (line.Length > startPos)  					{  						description = line.Substring(startPos);  					}  					changed = false;  				}  			}
Magic Number,MatterHackers.MatterControl.EeProm,EePromRepetierParameter,C:\repos\MatterHackers_MatterControl\EeProm\EePromRepetierParameter.cs,update,The following statement contains a magic number: if (line.Length > 4)  			{  				string[] lines = line.Substring(4).Split(' ');  				if (lines.Length > 2)  				{  					int.TryParse(lines[0]' out type);  					int.TryParse(lines[1]' out position);  					value = lines[2];  					int startPos = 7 + lines[0].Length + lines[1].Length + lines[2].Length;  					if (line.Length > startPos)  					{  						description = line.Substring(startPos);  					}  					changed = false;  				}  			}
Magic Number,MatterHackers.MatterControl.EeProm,EePromRepetierParameter,C:\repos\MatterHackers_MatterControl\EeProm\EePromRepetierParameter.cs,update,The following statement contains a magic number: if (line.Length > 4)  			{  				string[] lines = line.Substring(4).Split(' ');  				if (lines.Length > 2)  				{  					int.TryParse(lines[0]' out type);  					int.TryParse(lines[1]' out position);  					value = lines[2];  					int startPos = 7 + lines[0].Length + lines[1].Length + lines[2].Length;  					if (line.Length > startPos)  					{  						description = line.Substring(startPos);  					}  					changed = false;  				}  			}
Magic Number,MatterHackers.MatterControl.EeProm,EePromRepetierParameter,C:\repos\MatterHackers_MatterControl\EeProm\EePromRepetierParameter.cs,Save,The following statement contains a magic number: if (type == 3) cmd += "X" + value;  			else cmd += "S" + value;
Magic Number,MatterHackers.MatterControl.EeProm,EePromRepetierWindow,C:\repos\MatterHackers_MatterControl\EeProm\EePromRepetierWindow.cs,EePromRepetierWindow,The following statement contains a magic number: topToBottom.Padding = new BorderDouble(3' 0);
Magic Number,MatterHackers.MatterControl.EeProm,EePromRepetierWindow,C:\repos\MatterHackers_MatterControl\EeProm\EePromRepetierWindow.cs,EePromRepetierWindow,The following statement contains a magic number: descriptionWidget.Margin = new BorderDouble(left: 3);
Magic Number,MatterHackers.MatterControl.EeProm,EePromRepetierWindow,C:\repos\MatterHackers_MatterControl\EeProm\EePromRepetierWindow.cs,EePromRepetierWindow,The following statement contains a magic number: valueText.Margin = new BorderDouble(left: 5' right: 60);
Magic Number,MatterHackers.MatterControl.EeProm,EePromRepetierWindow,C:\repos\MatterHackers_MatterControl\EeProm\EePromRepetierWindow.cs,EePromRepetierWindow,The following statement contains a magic number: valueText.Margin = new BorderDouble(left: 5' right: 60);
Magic Number,MatterHackers.MatterControl.EeProm,EePromRepetierWindow,C:\repos\MatterHackers_MatterControl\EeProm\EePromRepetierWindow.cs,EePromRepetierWindow,The following statement contains a magic number: {  				Button buttonSave = textImageButtonFactory.Generate("Save To EEPROM".Localize());  				buttonSave.Margin = new BorderDouble(0' 3);  				buttonSave.Click += (sender' e) =>  				{  					UiThread.RunOnIdle(() =>  					{  						currentEePromSettings.Save();  						currentEePromSettings.Clear();  						currentEePromSettings.eventAdded -= NewSettingReadFromPrinter;  						Close();  					});  				};    				buttonBar.AddChild(buttonSave);  			}
Magic Number,MatterHackers.MatterControl.EeProm,EePromRepetierWindow,C:\repos\MatterHackers_MatterControl\EeProm\EePromRepetierWindow.cs,EePromRepetierWindow,The following statement contains a magic number: {  				Button buttonImport = textImageButtonFactory.Generate("Import".Localize() + "...");  				buttonImport.Margin = new BorderDouble(0' 3);  				buttonImport.Click += (sender' e) =>  				{  					UiThread.RunOnIdle(() =>  					{  						FileDialog.OpenFileDialog(  							new OpenFileDialogParams("EEPROM Settings|*.ini")  							{  								ActionButtonLabel = "Import EEPROM Settings".Localize()'  								Title = "Import EEPROM".Localize()'  							}'  								(openParams) =>  								{  									if (!string.IsNullOrEmpty(openParams.FileName))  									{  										currentEePromSettings.Import(openParams.FileName);  										RebuildUi();                                      }  								});  					});  				};  				buttonBar.AddChild(buttonImport);  			}
Magic Number,MatterHackers.MatterControl.EeProm,EePromRepetierWindow,C:\repos\MatterHackers_MatterControl\EeProm\EePromRepetierWindow.cs,EePromRepetierWindow,The following statement contains a magic number: {  				Button buttonExport = textImageButtonFactory.Generate("Export".Localize() + "...");  				buttonExport.Margin = new BorderDouble(0' 3);  				buttonExport.Click += (sender' e) =>  				{  					UiThread.RunOnIdle(() =>  					{  						FileDialog.SaveFileDialog(  							new SaveFileDialogParams("EEPROM Settings|*.ini")  							{  								ActionButtonLabel = "Export EEPROM Settings".Localize()'  								Title = "Export EEPROM".Localize()'                                  FileName = "eeprom_settings.ini"  							}'  								(saveParams) =>  								{  									if (!string.IsNullOrEmpty(saveParams.FileName))  									{  										currentEePromSettings.Export(saveParams.FileName);  									}  								});  					});  				};  				buttonBar.AddChild(buttonExport);  			}
Magic Number,MatterHackers.MatterControl.EeProm,EePromRepetierWindow,C:\repos\MatterHackers_MatterControl\EeProm\EePromRepetierWindow.cs,EePromRepetierWindow,The following statement contains a magic number: {  				Button buttonCancel = textImageButtonFactory.Generate("Close".Localize());  				buttonCancel.Margin = new BorderDouble(10' 3' 0' 3);  				buttonCancel.Click += (sender' e) =>  				{  					UiThread.RunOnIdle(() =>  					{  						currentEePromSettings.Clear();  						currentEePromSettings.eventAdded -= NewSettingReadFromPrinter;  						Close();  					});  				};  				buttonBar.AddChild(buttonCancel);  			}
Magic Number,MatterHackers.MatterControl.EeProm,EePromRepetierWindow,C:\repos\MatterHackers_MatterControl\EeProm\EePromRepetierWindow.cs,EePromRepetierWindow,The following statement contains a magic number: {  				Button buttonCancel = textImageButtonFactory.Generate("Close".Localize());  				buttonCancel.Margin = new BorderDouble(10' 3' 0' 3);  				buttonCancel.Click += (sender' e) =>  				{  					UiThread.RunOnIdle(() =>  					{  						currentEePromSettings.Clear();  						currentEePromSettings.eventAdded -= NewSettingReadFromPrinter;  						Close();  					});  				};  				buttonBar.AddChild(buttonCancel);  			}
Magic Number,MatterHackers.MatterControl.EeProm,EePromRepetierWindow,C:\repos\MatterHackers_MatterControl\EeProm\EePromRepetierWindow.cs,EePromRepetierWindow,The following statement contains a magic number: {  				Button buttonCancel = textImageButtonFactory.Generate("Close".Localize());  				buttonCancel.Margin = new BorderDouble(10' 3' 0' 3);  				buttonCancel.Click += (sender' e) =>  				{  					UiThread.RunOnIdle(() =>  					{  						currentEePromSettings.Clear();  						currentEePromSettings.eventAdded -= NewSettingReadFromPrinter;  						Close();  					});  				};  				buttonBar.AddChild(buttonCancel);  			}
Magic Number,MatterHackers.MatterControl.EeProm,EePromRepetierWindow,C:\repos\MatterHackers_MatterControl\EeProm\EePromRepetierWindow.cs,RebuildUi,The following statement contains a magic number: foreach (EePromRepetierParameter newSetting in tempList)  			{  				if (newSetting != null)  				{  					FlowLayoutWidget row = new FlowLayoutWidget();  					row.HAnchor = Agg.UI.HAnchor.Max_FitToChildren_ParentWidth;  					row.AddChild(AddDescription(newSetting.Description));  					row.Padding = new BorderDouble(5' 0);  					if ((settingsColmun.Children.Count % 2) == 1)  					{  						row.BackgroundColor = new RGBA_Bytes(0' 0' 0' 30);  					}    					CreateSpacer(row);    					double currentValue;  					double.TryParse(newSetting.Value' out currentValue);  					MHNumberEdit valueEdit = new MHNumberEdit(currentValue' pixelWidth: 80 * GuiWidget.DeviceScale' allowNegatives: true' allowDecimals: true);  					valueEdit.SelectAllOnFocus = true;  					valueEdit.TabIndex = currentTabIndex++;  					valueEdit.VAnchor = Agg.UI.VAnchor.ParentCenter;  					valueEdit.ActuallNumberEdit.EditComplete += (sender' e) =>  					{  						newSetting.Value = valueEdit.ActuallNumberEdit.Value.ToString();  					};  					row.AddChild(valueEdit);    					settingsColmun.AddChild(row);  				}  			}
Magic Number,MatterHackers.MatterControl.EeProm,EePromRepetierWindow,C:\repos\MatterHackers_MatterControl\EeProm\EePromRepetierWindow.cs,RebuildUi,The following statement contains a magic number: foreach (EePromRepetierParameter newSetting in tempList)  			{  				if (newSetting != null)  				{  					FlowLayoutWidget row = new FlowLayoutWidget();  					row.HAnchor = Agg.UI.HAnchor.Max_FitToChildren_ParentWidth;  					row.AddChild(AddDescription(newSetting.Description));  					row.Padding = new BorderDouble(5' 0);  					if ((settingsColmun.Children.Count % 2) == 1)  					{  						row.BackgroundColor = new RGBA_Bytes(0' 0' 0' 30);  					}    					CreateSpacer(row);    					double currentValue;  					double.TryParse(newSetting.Value' out currentValue);  					MHNumberEdit valueEdit = new MHNumberEdit(currentValue' pixelWidth: 80 * GuiWidget.DeviceScale' allowNegatives: true' allowDecimals: true);  					valueEdit.SelectAllOnFocus = true;  					valueEdit.TabIndex = currentTabIndex++;  					valueEdit.VAnchor = Agg.UI.VAnchor.ParentCenter;  					valueEdit.ActuallNumberEdit.EditComplete += (sender' e) =>  					{  						newSetting.Value = valueEdit.ActuallNumberEdit.Value.ToString();  					};  					row.AddChild(valueEdit);    					settingsColmun.AddChild(row);  				}  			}
Magic Number,MatterHackers.MatterControl.EeProm,EePromRepetierWindow,C:\repos\MatterHackers_MatterControl\EeProm\EePromRepetierWindow.cs,RebuildUi,The following statement contains a magic number: foreach (EePromRepetierParameter newSetting in tempList)  			{  				if (newSetting != null)  				{  					FlowLayoutWidget row = new FlowLayoutWidget();  					row.HAnchor = Agg.UI.HAnchor.Max_FitToChildren_ParentWidth;  					row.AddChild(AddDescription(newSetting.Description));  					row.Padding = new BorderDouble(5' 0);  					if ((settingsColmun.Children.Count % 2) == 1)  					{  						row.BackgroundColor = new RGBA_Bytes(0' 0' 0' 30);  					}    					CreateSpacer(row);    					double currentValue;  					double.TryParse(newSetting.Value' out currentValue);  					MHNumberEdit valueEdit = new MHNumberEdit(currentValue' pixelWidth: 80 * GuiWidget.DeviceScale' allowNegatives: true' allowDecimals: true);  					valueEdit.SelectAllOnFocus = true;  					valueEdit.TabIndex = currentTabIndex++;  					valueEdit.VAnchor = Agg.UI.VAnchor.ParentCenter;  					valueEdit.ActuallNumberEdit.EditComplete += (sender' e) =>  					{  						newSetting.Value = valueEdit.ActuallNumberEdit.Value.ToString();  					};  					row.AddChild(valueEdit);    					settingsColmun.AddChild(row);  				}  			}
Magic Number,MatterHackers.MatterControl.EeProm,EePromRepetierWindow,C:\repos\MatterHackers_MatterControl\EeProm\EePromRepetierWindow.cs,RebuildUi,The following statement contains a magic number: foreach (EePromRepetierParameter newSetting in tempList)  			{  				if (newSetting != null)  				{  					FlowLayoutWidget row = new FlowLayoutWidget();  					row.HAnchor = Agg.UI.HAnchor.Max_FitToChildren_ParentWidth;  					row.AddChild(AddDescription(newSetting.Description));  					row.Padding = new BorderDouble(5' 0);  					if ((settingsColmun.Children.Count % 2) == 1)  					{  						row.BackgroundColor = new RGBA_Bytes(0' 0' 0' 30);  					}    					CreateSpacer(row);    					double currentValue;  					double.TryParse(newSetting.Value' out currentValue);  					MHNumberEdit valueEdit = new MHNumberEdit(currentValue' pixelWidth: 80 * GuiWidget.DeviceScale' allowNegatives: true' allowDecimals: true);  					valueEdit.SelectAllOnFocus = true;  					valueEdit.TabIndex = currentTabIndex++;  					valueEdit.VAnchor = Agg.UI.VAnchor.ParentCenter;  					valueEdit.ActuallNumberEdit.EditComplete += (sender' e) =>  					{  						newSetting.Value = valueEdit.ActuallNumberEdit.Value.ToString();  					};  					row.AddChild(valueEdit);    					settingsColmun.AddChild(row);  				}  			}
Magic Number,MatterHackers.MatterControl.EeProm,EePromRepetierWindow,C:\repos\MatterHackers_MatterControl\EeProm\EePromRepetierWindow.cs,AddDescription,The following statement contains a magic number: GuiWidget holder = new GuiWidget(340' 40);
Magic Number,MatterHackers.MatterControl.EeProm,EePromRepetierWindow,C:\repos\MatterHackers_MatterControl\EeProm\EePromRepetierWindow.cs,AddDescription,The following statement contains a magic number: GuiWidget holder = new GuiWidget(340' 40);
Magic Number,MatterHackers.MatterControl.EeProm,EePromRepetierStorage,C:\repos\MatterHackers_MatterControl\EeProm\EePromRepetierStorage.cs,Import,The following statement contains a magic number: foreach (string line in allLines)  			{  				if (line.Contains("|"))  				{  					string[] descriptionValue = line.Split('|');  					if (descriptionValue.Length == 2)  					{  						foreach (KeyValuePair<int' EePromRepetierParameter> keyValue in eePromSettingsList)  						{  							if (keyValue.Value.Description == descriptionValue[0])  							{  								if(keyValue.Value.Value != descriptionValue[1])  								{  									// push in the value  									keyValue.Value.Value = descriptionValue[1];  									keyValue.Value.MarkChanged();  									break;                                  }  							}  						}  					}  				}  			}
Magic Number,MatterHackers.MatterControl.PrintQueue,QueueData,C:\repos\MatterHackers_MatterControl\Queue\QueueData.cs,Is32Bit,The following statement contains a magic number: if (IntPtr.Size == 4)  			{  				return true;  			}
Magic Number,MatterHackers.MatterControl.PrintQueue,QueueData,C:\repos\MatterHackers_MatterControl\Queue\QueueData.cs,AddItem,The following statement contains a magic number: if (Is32Bit())  			{  				// Check if the part we are adding is BIG. If it is warn the user and  				// possibly don't add it  				bool warnAboutFileSize = false;  				long estimatedMemoryUse = 0;  				if (File.Exists(item.FileLocation)  					&& checkSize == ValidateSizeOn32BitSystems.Required)  				{  					estimatedMemoryUse = MeshFileIo.GetEstimatedMemoryUse(item.FileLocation);    					if (OsInformation.OperatingSystem == OSType.Android)  					{  						if (estimatedMemoryUse > 100000000)  						{  							warnAboutFileSize = true;  						}  					}  					else  					{  						if (estimatedMemoryUse > 500000000)  						{  							warnAboutFileSize = true;  						}  					}  				}    				if (warnAboutFileSize)  				{  					partUnderConsideration = item;  					// Show a dialog and only load the part to the queue if the user clicks yes.  					UiThread.RunOnIdle(() =>  					{  						string memoryWarningMessage = "Are you sure you want to add this part ({0}) to the Queue?\nThe 3D part you are trying to load may be too complicated and cause performance or stability problems.\n\nConsider reducing the geometry before proceeding.".Localize().FormatWith(item.Name);  						StyledMessageBox.ShowMessageBox(UserSaidToAllowAddToQueue' memoryWarningMessage' "File May Cause Problems".Localize()' StyledMessageBox.MessageType.YES_NO' "Add To Queue"' "Do Not Add");  						// show a dialog to tell the user there is an update  					});  					return;  				}  				else  				{  					DoAddItem(item' indexToInsert);  				}  			}  			else  			{  				DoAddItem(item' indexToInsert);  			}
Magic Number,MatterHackers.MatterControl.PrintQueue,QueueData,C:\repos\MatterHackers_MatterControl\Queue\QueueData.cs,AddItem,The following statement contains a magic number: if (Is32Bit())  			{  				// Check if the part we are adding is BIG. If it is warn the user and  				// possibly don't add it  				bool warnAboutFileSize = false;  				long estimatedMemoryUse = 0;  				if (File.Exists(item.FileLocation)  					&& checkSize == ValidateSizeOn32BitSystems.Required)  				{  					estimatedMemoryUse = MeshFileIo.GetEstimatedMemoryUse(item.FileLocation);    					if (OsInformation.OperatingSystem == OSType.Android)  					{  						if (estimatedMemoryUse > 100000000)  						{  							warnAboutFileSize = true;  						}  					}  					else  					{  						if (estimatedMemoryUse > 500000000)  						{  							warnAboutFileSize = true;  						}  					}  				}    				if (warnAboutFileSize)  				{  					partUnderConsideration = item;  					// Show a dialog and only load the part to the queue if the user clicks yes.  					UiThread.RunOnIdle(() =>  					{  						string memoryWarningMessage = "Are you sure you want to add this part ({0}) to the Queue?\nThe 3D part you are trying to load may be too complicated and cause performance or stability problems.\n\nConsider reducing the geometry before proceeding.".Localize().FormatWith(item.Name);  						StyledMessageBox.ShowMessageBox(UserSaidToAllowAddToQueue' memoryWarningMessage' "File May Cause Problems".Localize()' StyledMessageBox.MessageType.YES_NO' "Add To Queue"' "Do Not Add");  						// show a dialog to tell the user there is an update  					});  					return;  				}  				else  				{  					DoAddItem(item' indexToInsert);  				}  			}  			else  			{  				DoAddItem(item' indexToInsert);  			}
Magic Number,MatterHackers.MatterControl.PrintQueue,QueueRowItem,C:\repos\MatterHackers_MatterControl\Queue\QueueRowItem.cs,ShowCantFindFileMessage,The following statement contains a magic number: UiThread.RunOnIdle(() =>  			{  				string maxLengthName = printItemWrapper.FileLocation;  				int maxLength = 43;  				if (maxLengthName.Length > maxLength)  				{  					string start = maxLengthName.Substring(0' 15) + "...";  					int amountRemaining = (maxLength - start.Length);  					string end = maxLengthName.Substring(maxLengthName.Length - amountRemaining' amountRemaining);  					maxLengthName = start + end;  				}  				string notFoundMessage = "Oops! Could not find this file".Localize();  				string notFoundMessageEnd = "Would you like to remove it from the queue".Localize();  				string message = "{0}:\n'{1}'\n\n{2}?".FormatWith(notFoundMessage' maxLengthName' notFoundMessageEnd);  				string titleLabel = "Item not Found".Localize();  				StyledMessageBox.ShowMessageBox(onConfirmRemove' message' titleLabel' StyledMessageBox.MessageType.YES_NO' "Remove".Localize()' "Cancel".Localize());  			});
Magic Number,MatterHackers.MatterControl.PrintQueue,QueueRowItem,C:\repos\MatterHackers_MatterControl\Queue\QueueRowItem.cs,ShowCantFindFileMessage,The following statement contains a magic number: UiThread.RunOnIdle(() =>  			{  				string maxLengthName = printItemWrapper.FileLocation;  				int maxLength = 43;  				if (maxLengthName.Length > maxLength)  				{  					string start = maxLengthName.Substring(0' 15) + "...";  					int amountRemaining = (maxLength - start.Length);  					string end = maxLengthName.Substring(maxLengthName.Length - amountRemaining' amountRemaining);  					maxLengthName = start + end;  				}  				string notFoundMessage = "Oops! Could not find this file".Localize();  				string notFoundMessageEnd = "Would you like to remove it from the queue".Localize();  				string message = "{0}:\n'{1}'\n\n{2}?".FormatWith(notFoundMessage' maxLengthName' notFoundMessageEnd);  				string titleLabel = "Item not Found".Localize();  				StyledMessageBox.ShowMessageBox(onConfirmRemove' message' titleLabel' StyledMessageBox.MessageType.YES_NO' "Remove".Localize()' "Cancel".Localize());  			});
Magic Number,MatterHackers.MatterControl.PrintQueue,QueueRowItem,C:\repos\MatterHackers_MatterControl\Queue\QueueRowItem.cs,ConstructPrintQueueItem,The following statement contains a magic number: linkButtonFactory.fontSize = 10;
Magic Number,MatterHackers.MatterControl.PrintQueue,QueueRowItem,C:\repos\MatterHackers_MatterControl\Queue\QueueRowItem.cs,ConstructPrintQueueItem,The following statement contains a magic number: {  				FlowLayoutWidget leftColumn = new FlowLayoutWidget(FlowDirection.LeftToRight);  				leftColumn.VAnchor = VAnchor.ParentTop | Agg.UI.VAnchor.FitToChildren;  				{  					selectionCheckBoxContainer = new GuiWidget();  					selectionCheckBoxContainer.VAnchor = VAnchor.ParentBottomTop;  					selectionCheckBoxContainer.Width = 40;  					selectionCheckBoxContainer.Visible = false;  					selectionCheckBoxContainer.Margin = new BorderDouble(left: 6);  					selectionCheckBox = new CheckBox("");    					selectionCheckBox.Name = "Queue Item Checkbox";  					selectionCheckBox.VAnchor = VAnchor.ParentCenter;  					selectionCheckBox.HAnchor = HAnchor.ParentCenter;  					selectionCheckBoxContainer.AddChild(selectionCheckBox);    					PartThumbnailWidget thumbnailWidget = new PartThumbnailWidget(PrintItemWrapper' "part_icon_transparent_40x40.png"' "building_thumbnail_40x40.png"' PartThumbnailWidget.ImageSizes.Size50x50);  					thumbnailWidget.Name = "Queue Item Thumbnail";  					leftColumn.AddChild(selectionCheckBoxContainer);    					leftColumn.AddChild(thumbnailWidget);  				}    				FlowLayoutWidget middleColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  				middleColumn.VAnchor = VAnchor.ParentTop | Agg.UI.VAnchor.FitToChildren;  				middleColumn.HAnchor = HAnchor.ParentLeftRight;// | Agg.UI.HAnchor.FitToChildren;  				middleColumn.Padding = new BorderDouble(8);  				middleColumn.Margin = new BorderDouble(10' 0);  				{  					partLabel = new TextWidget(PrintItemWrapper.GetFriendlyName()' pointSize: 14);  					partLabel.TextColor = WidgetTextColor;  					partLabel.MinimumSize = new Vector2(1' 16);    					partStatus = new TextWidget($"{"Status".Localize().ToUpper()}: {"Queued to Print".Localize()}"' pointSize: 10);  					partStatus.AutoExpandBoundsToText = true;  					partStatus.TextColor = WidgetTextColor;  					partStatus.MinimumSize = new Vector2(50' 12);    					middleColumn.AddChild(partLabel);  					middleColumn.AddChild(partStatus);  				}    				topContentsFlowLayout.AddChild(leftColumn);  				topContentsFlowLayout.AddChild(middleColumn);  			}
Magic Number,MatterHackers.MatterControl.PrintQueue,QueueRowItem,C:\repos\MatterHackers_MatterControl\Queue\QueueRowItem.cs,ConstructPrintQueueItem,The following statement contains a magic number: {  				FlowLayoutWidget leftColumn = new FlowLayoutWidget(FlowDirection.LeftToRight);  				leftColumn.VAnchor = VAnchor.ParentTop | Agg.UI.VAnchor.FitToChildren;  				{  					selectionCheckBoxContainer = new GuiWidget();  					selectionCheckBoxContainer.VAnchor = VAnchor.ParentBottomTop;  					selectionCheckBoxContainer.Width = 40;  					selectionCheckBoxContainer.Visible = false;  					selectionCheckBoxContainer.Margin = new BorderDouble(left: 6);  					selectionCheckBox = new CheckBox("");    					selectionCheckBox.Name = "Queue Item Checkbox";  					selectionCheckBox.VAnchor = VAnchor.ParentCenter;  					selectionCheckBox.HAnchor = HAnchor.ParentCenter;  					selectionCheckBoxContainer.AddChild(selectionCheckBox);    					PartThumbnailWidget thumbnailWidget = new PartThumbnailWidget(PrintItemWrapper' "part_icon_transparent_40x40.png"' "building_thumbnail_40x40.png"' PartThumbnailWidget.ImageSizes.Size50x50);  					thumbnailWidget.Name = "Queue Item Thumbnail";  					leftColumn.AddChild(selectionCheckBoxContainer);    					leftColumn.AddChild(thumbnailWidget);  				}    				FlowLayoutWidget middleColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  				middleColumn.VAnchor = VAnchor.ParentTop | Agg.UI.VAnchor.FitToChildren;  				middleColumn.HAnchor = HAnchor.ParentLeftRight;// | Agg.UI.HAnchor.FitToChildren;  				middleColumn.Padding = new BorderDouble(8);  				middleColumn.Margin = new BorderDouble(10' 0);  				{  					partLabel = new TextWidget(PrintItemWrapper.GetFriendlyName()' pointSize: 14);  					partLabel.TextColor = WidgetTextColor;  					partLabel.MinimumSize = new Vector2(1' 16);    					partStatus = new TextWidget($"{"Status".Localize().ToUpper()}: {"Queued to Print".Localize()}"' pointSize: 10);  					partStatus.AutoExpandBoundsToText = true;  					partStatus.TextColor = WidgetTextColor;  					partStatus.MinimumSize = new Vector2(50' 12);    					middleColumn.AddChild(partLabel);  					middleColumn.AddChild(partStatus);  				}    				topContentsFlowLayout.AddChild(leftColumn);  				topContentsFlowLayout.AddChild(middleColumn);  			}
Magic Number,MatterHackers.MatterControl.PrintQueue,QueueRowItem,C:\repos\MatterHackers_MatterControl\Queue\QueueRowItem.cs,ConstructPrintQueueItem,The following statement contains a magic number: {  				FlowLayoutWidget leftColumn = new FlowLayoutWidget(FlowDirection.LeftToRight);  				leftColumn.VAnchor = VAnchor.ParentTop | Agg.UI.VAnchor.FitToChildren;  				{  					selectionCheckBoxContainer = new GuiWidget();  					selectionCheckBoxContainer.VAnchor = VAnchor.ParentBottomTop;  					selectionCheckBoxContainer.Width = 40;  					selectionCheckBoxContainer.Visible = false;  					selectionCheckBoxContainer.Margin = new BorderDouble(left: 6);  					selectionCheckBox = new CheckBox("");    					selectionCheckBox.Name = "Queue Item Checkbox";  					selectionCheckBox.VAnchor = VAnchor.ParentCenter;  					selectionCheckBox.HAnchor = HAnchor.ParentCenter;  					selectionCheckBoxContainer.AddChild(selectionCheckBox);    					PartThumbnailWidget thumbnailWidget = new PartThumbnailWidget(PrintItemWrapper' "part_icon_transparent_40x40.png"' "building_thumbnail_40x40.png"' PartThumbnailWidget.ImageSizes.Size50x50);  					thumbnailWidget.Name = "Queue Item Thumbnail";  					leftColumn.AddChild(selectionCheckBoxContainer);    					leftColumn.AddChild(thumbnailWidget);  				}    				FlowLayoutWidget middleColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  				middleColumn.VAnchor = VAnchor.ParentTop | Agg.UI.VAnchor.FitToChildren;  				middleColumn.HAnchor = HAnchor.ParentLeftRight;// | Agg.UI.HAnchor.FitToChildren;  				middleColumn.Padding = new BorderDouble(8);  				middleColumn.Margin = new BorderDouble(10' 0);  				{  					partLabel = new TextWidget(PrintItemWrapper.GetFriendlyName()' pointSize: 14);  					partLabel.TextColor = WidgetTextColor;  					partLabel.MinimumSize = new Vector2(1' 16);    					partStatus = new TextWidget($"{"Status".Localize().ToUpper()}: {"Queued to Print".Localize()}"' pointSize: 10);  					partStatus.AutoExpandBoundsToText = true;  					partStatus.TextColor = WidgetTextColor;  					partStatus.MinimumSize = new Vector2(50' 12);    					middleColumn.AddChild(partLabel);  					middleColumn.AddChild(partStatus);  				}    				topContentsFlowLayout.AddChild(leftColumn);  				topContentsFlowLayout.AddChild(middleColumn);  			}
Magic Number,MatterHackers.MatterControl.PrintQueue,QueueRowItem,C:\repos\MatterHackers_MatterControl\Queue\QueueRowItem.cs,ConstructPrintQueueItem,The following statement contains a magic number: {  				FlowLayoutWidget leftColumn = new FlowLayoutWidget(FlowDirection.LeftToRight);  				leftColumn.VAnchor = VAnchor.ParentTop | Agg.UI.VAnchor.FitToChildren;  				{  					selectionCheckBoxContainer = new GuiWidget();  					selectionCheckBoxContainer.VAnchor = VAnchor.ParentBottomTop;  					selectionCheckBoxContainer.Width = 40;  					selectionCheckBoxContainer.Visible = false;  					selectionCheckBoxContainer.Margin = new BorderDouble(left: 6);  					selectionCheckBox = new CheckBox("");    					selectionCheckBox.Name = "Queue Item Checkbox";  					selectionCheckBox.VAnchor = VAnchor.ParentCenter;  					selectionCheckBox.HAnchor = HAnchor.ParentCenter;  					selectionCheckBoxContainer.AddChild(selectionCheckBox);    					PartThumbnailWidget thumbnailWidget = new PartThumbnailWidget(PrintItemWrapper' "part_icon_transparent_40x40.png"' "building_thumbnail_40x40.png"' PartThumbnailWidget.ImageSizes.Size50x50);  					thumbnailWidget.Name = "Queue Item Thumbnail";  					leftColumn.AddChild(selectionCheckBoxContainer);    					leftColumn.AddChild(thumbnailWidget);  				}    				FlowLayoutWidget middleColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  				middleColumn.VAnchor = VAnchor.ParentTop | Agg.UI.VAnchor.FitToChildren;  				middleColumn.HAnchor = HAnchor.ParentLeftRight;// | Agg.UI.HAnchor.FitToChildren;  				middleColumn.Padding = new BorderDouble(8);  				middleColumn.Margin = new BorderDouble(10' 0);  				{  					partLabel = new TextWidget(PrintItemWrapper.GetFriendlyName()' pointSize: 14);  					partLabel.TextColor = WidgetTextColor;  					partLabel.MinimumSize = new Vector2(1' 16);    					partStatus = new TextWidget($"{"Status".Localize().ToUpper()}: {"Queued to Print".Localize()}"' pointSize: 10);  					partStatus.AutoExpandBoundsToText = true;  					partStatus.TextColor = WidgetTextColor;  					partStatus.MinimumSize = new Vector2(50' 12);    					middleColumn.AddChild(partLabel);  					middleColumn.AddChild(partStatus);  				}    				topContentsFlowLayout.AddChild(leftColumn);  				topContentsFlowLayout.AddChild(middleColumn);  			}
Magic Number,MatterHackers.MatterControl.PrintQueue,QueueRowItem,C:\repos\MatterHackers_MatterControl\Queue\QueueRowItem.cs,ConstructPrintQueueItem,The following statement contains a magic number: {  				FlowLayoutWidget leftColumn = new FlowLayoutWidget(FlowDirection.LeftToRight);  				leftColumn.VAnchor = VAnchor.ParentTop | Agg.UI.VAnchor.FitToChildren;  				{  					selectionCheckBoxContainer = new GuiWidget();  					selectionCheckBoxContainer.VAnchor = VAnchor.ParentBottomTop;  					selectionCheckBoxContainer.Width = 40;  					selectionCheckBoxContainer.Visible = false;  					selectionCheckBoxContainer.Margin = new BorderDouble(left: 6);  					selectionCheckBox = new CheckBox("");    					selectionCheckBox.Name = "Queue Item Checkbox";  					selectionCheckBox.VAnchor = VAnchor.ParentCenter;  					selectionCheckBox.HAnchor = HAnchor.ParentCenter;  					selectionCheckBoxContainer.AddChild(selectionCheckBox);    					PartThumbnailWidget thumbnailWidget = new PartThumbnailWidget(PrintItemWrapper' "part_icon_transparent_40x40.png"' "building_thumbnail_40x40.png"' PartThumbnailWidget.ImageSizes.Size50x50);  					thumbnailWidget.Name = "Queue Item Thumbnail";  					leftColumn.AddChild(selectionCheckBoxContainer);    					leftColumn.AddChild(thumbnailWidget);  				}    				FlowLayoutWidget middleColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  				middleColumn.VAnchor = VAnchor.ParentTop | Agg.UI.VAnchor.FitToChildren;  				middleColumn.HAnchor = HAnchor.ParentLeftRight;// | Agg.UI.HAnchor.FitToChildren;  				middleColumn.Padding = new BorderDouble(8);  				middleColumn.Margin = new BorderDouble(10' 0);  				{  					partLabel = new TextWidget(PrintItemWrapper.GetFriendlyName()' pointSize: 14);  					partLabel.TextColor = WidgetTextColor;  					partLabel.MinimumSize = new Vector2(1' 16);    					partStatus = new TextWidget($"{"Status".Localize().ToUpper()}: {"Queued to Print".Localize()}"' pointSize: 10);  					partStatus.AutoExpandBoundsToText = true;  					partStatus.TextColor = WidgetTextColor;  					partStatus.MinimumSize = new Vector2(50' 12);    					middleColumn.AddChild(partLabel);  					middleColumn.AddChild(partStatus);  				}    				topContentsFlowLayout.AddChild(leftColumn);  				topContentsFlowLayout.AddChild(middleColumn);  			}
Magic Number,MatterHackers.MatterControl.PrintQueue,QueueRowItem,C:\repos\MatterHackers_MatterControl\Queue\QueueRowItem.cs,ConstructPrintQueueItem,The following statement contains a magic number: {  				FlowLayoutWidget leftColumn = new FlowLayoutWidget(FlowDirection.LeftToRight);  				leftColumn.VAnchor = VAnchor.ParentTop | Agg.UI.VAnchor.FitToChildren;  				{  					selectionCheckBoxContainer = new GuiWidget();  					selectionCheckBoxContainer.VAnchor = VAnchor.ParentBottomTop;  					selectionCheckBoxContainer.Width = 40;  					selectionCheckBoxContainer.Visible = false;  					selectionCheckBoxContainer.Margin = new BorderDouble(left: 6);  					selectionCheckBox = new CheckBox("");    					selectionCheckBox.Name = "Queue Item Checkbox";  					selectionCheckBox.VAnchor = VAnchor.ParentCenter;  					selectionCheckBox.HAnchor = HAnchor.ParentCenter;  					selectionCheckBoxContainer.AddChild(selectionCheckBox);    					PartThumbnailWidget thumbnailWidget = new PartThumbnailWidget(PrintItemWrapper' "part_icon_transparent_40x40.png"' "building_thumbnail_40x40.png"' PartThumbnailWidget.ImageSizes.Size50x50);  					thumbnailWidget.Name = "Queue Item Thumbnail";  					leftColumn.AddChild(selectionCheckBoxContainer);    					leftColumn.AddChild(thumbnailWidget);  				}    				FlowLayoutWidget middleColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  				middleColumn.VAnchor = VAnchor.ParentTop | Agg.UI.VAnchor.FitToChildren;  				middleColumn.HAnchor = HAnchor.ParentLeftRight;// | Agg.UI.HAnchor.FitToChildren;  				middleColumn.Padding = new BorderDouble(8);  				middleColumn.Margin = new BorderDouble(10' 0);  				{  					partLabel = new TextWidget(PrintItemWrapper.GetFriendlyName()' pointSize: 14);  					partLabel.TextColor = WidgetTextColor;  					partLabel.MinimumSize = new Vector2(1' 16);    					partStatus = new TextWidget($"{"Status".Localize().ToUpper()}: {"Queued to Print".Localize()}"' pointSize: 10);  					partStatus.AutoExpandBoundsToText = true;  					partStatus.TextColor = WidgetTextColor;  					partStatus.MinimumSize = new Vector2(50' 12);    					middleColumn.AddChild(partLabel);  					middleColumn.AddChild(partStatus);  				}    				topContentsFlowLayout.AddChild(leftColumn);  				topContentsFlowLayout.AddChild(middleColumn);  			}
Magic Number,MatterHackers.MatterControl.PrintQueue,QueueRowItem,C:\repos\MatterHackers_MatterControl\Queue\QueueRowItem.cs,ConstructPrintQueueItem,The following statement contains a magic number: {  				FlowLayoutWidget leftColumn = new FlowLayoutWidget(FlowDirection.LeftToRight);  				leftColumn.VAnchor = VAnchor.ParentTop | Agg.UI.VAnchor.FitToChildren;  				{  					selectionCheckBoxContainer = new GuiWidget();  					selectionCheckBoxContainer.VAnchor = VAnchor.ParentBottomTop;  					selectionCheckBoxContainer.Width = 40;  					selectionCheckBoxContainer.Visible = false;  					selectionCheckBoxContainer.Margin = new BorderDouble(left: 6);  					selectionCheckBox = new CheckBox("");    					selectionCheckBox.Name = "Queue Item Checkbox";  					selectionCheckBox.VAnchor = VAnchor.ParentCenter;  					selectionCheckBox.HAnchor = HAnchor.ParentCenter;  					selectionCheckBoxContainer.AddChild(selectionCheckBox);    					PartThumbnailWidget thumbnailWidget = new PartThumbnailWidget(PrintItemWrapper' "part_icon_transparent_40x40.png"' "building_thumbnail_40x40.png"' PartThumbnailWidget.ImageSizes.Size50x50);  					thumbnailWidget.Name = "Queue Item Thumbnail";  					leftColumn.AddChild(selectionCheckBoxContainer);    					leftColumn.AddChild(thumbnailWidget);  				}    				FlowLayoutWidget middleColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  				middleColumn.VAnchor = VAnchor.ParentTop | Agg.UI.VAnchor.FitToChildren;  				middleColumn.HAnchor = HAnchor.ParentLeftRight;// | Agg.UI.HAnchor.FitToChildren;  				middleColumn.Padding = new BorderDouble(8);  				middleColumn.Margin = new BorderDouble(10' 0);  				{  					partLabel = new TextWidget(PrintItemWrapper.GetFriendlyName()' pointSize: 14);  					partLabel.TextColor = WidgetTextColor;  					partLabel.MinimumSize = new Vector2(1' 16);    					partStatus = new TextWidget($"{"Status".Localize().ToUpper()}: {"Queued to Print".Localize()}"' pointSize: 10);  					partStatus.AutoExpandBoundsToText = true;  					partStatus.TextColor = WidgetTextColor;  					partStatus.MinimumSize = new Vector2(50' 12);    					middleColumn.AddChild(partLabel);  					middleColumn.AddChild(partStatus);  				}    				topContentsFlowLayout.AddChild(leftColumn);  				topContentsFlowLayout.AddChild(middleColumn);  			}
Magic Number,MatterHackers.MatterControl.PrintQueue,QueueRowItem,C:\repos\MatterHackers_MatterControl\Queue\QueueRowItem.cs,ConstructPrintQueueItem,The following statement contains a magic number: {  				FlowLayoutWidget leftColumn = new FlowLayoutWidget(FlowDirection.LeftToRight);  				leftColumn.VAnchor = VAnchor.ParentTop | Agg.UI.VAnchor.FitToChildren;  				{  					selectionCheckBoxContainer = new GuiWidget();  					selectionCheckBoxContainer.VAnchor = VAnchor.ParentBottomTop;  					selectionCheckBoxContainer.Width = 40;  					selectionCheckBoxContainer.Visible = false;  					selectionCheckBoxContainer.Margin = new BorderDouble(left: 6);  					selectionCheckBox = new CheckBox("");    					selectionCheckBox.Name = "Queue Item Checkbox";  					selectionCheckBox.VAnchor = VAnchor.ParentCenter;  					selectionCheckBox.HAnchor = HAnchor.ParentCenter;  					selectionCheckBoxContainer.AddChild(selectionCheckBox);    					PartThumbnailWidget thumbnailWidget = new PartThumbnailWidget(PrintItemWrapper' "part_icon_transparent_40x40.png"' "building_thumbnail_40x40.png"' PartThumbnailWidget.ImageSizes.Size50x50);  					thumbnailWidget.Name = "Queue Item Thumbnail";  					leftColumn.AddChild(selectionCheckBoxContainer);    					leftColumn.AddChild(thumbnailWidget);  				}    				FlowLayoutWidget middleColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  				middleColumn.VAnchor = VAnchor.ParentTop | Agg.UI.VAnchor.FitToChildren;  				middleColumn.HAnchor = HAnchor.ParentLeftRight;// | Agg.UI.HAnchor.FitToChildren;  				middleColumn.Padding = new BorderDouble(8);  				middleColumn.Margin = new BorderDouble(10' 0);  				{  					partLabel = new TextWidget(PrintItemWrapper.GetFriendlyName()' pointSize: 14);  					partLabel.TextColor = WidgetTextColor;  					partLabel.MinimumSize = new Vector2(1' 16);    					partStatus = new TextWidget($"{"Status".Localize().ToUpper()}: {"Queued to Print".Localize()}"' pointSize: 10);  					partStatus.AutoExpandBoundsToText = true;  					partStatus.TextColor = WidgetTextColor;  					partStatus.MinimumSize = new Vector2(50' 12);    					middleColumn.AddChild(partLabel);  					middleColumn.AddChild(partStatus);  				}    				topContentsFlowLayout.AddChild(leftColumn);  				topContentsFlowLayout.AddChild(middleColumn);  			}
Magic Number,MatterHackers.MatterControl.PrintQueue,QueueRowItem,C:\repos\MatterHackers_MatterControl\Queue\QueueRowItem.cs,ConstructPrintQueueItem,The following statement contains a magic number: {  				FlowLayoutWidget leftColumn = new FlowLayoutWidget(FlowDirection.LeftToRight);  				leftColumn.VAnchor = VAnchor.ParentTop | Agg.UI.VAnchor.FitToChildren;  				{  					selectionCheckBoxContainer = new GuiWidget();  					selectionCheckBoxContainer.VAnchor = VAnchor.ParentBottomTop;  					selectionCheckBoxContainer.Width = 40;  					selectionCheckBoxContainer.Visible = false;  					selectionCheckBoxContainer.Margin = new BorderDouble(left: 6);  					selectionCheckBox = new CheckBox("");    					selectionCheckBox.Name = "Queue Item Checkbox";  					selectionCheckBox.VAnchor = VAnchor.ParentCenter;  					selectionCheckBox.HAnchor = HAnchor.ParentCenter;  					selectionCheckBoxContainer.AddChild(selectionCheckBox);    					PartThumbnailWidget thumbnailWidget = new PartThumbnailWidget(PrintItemWrapper' "part_icon_transparent_40x40.png"' "building_thumbnail_40x40.png"' PartThumbnailWidget.ImageSizes.Size50x50);  					thumbnailWidget.Name = "Queue Item Thumbnail";  					leftColumn.AddChild(selectionCheckBoxContainer);    					leftColumn.AddChild(thumbnailWidget);  				}    				FlowLayoutWidget middleColumn = new FlowLayoutWidget(FlowDirection.TopToBottom);  				middleColumn.VAnchor = VAnchor.ParentTop | Agg.UI.VAnchor.FitToChildren;  				middleColumn.HAnchor = HAnchor.ParentLeftRight;// | Agg.UI.HAnchor.FitToChildren;  				middleColumn.Padding = new BorderDouble(8);  				middleColumn.Margin = new BorderDouble(10' 0);  				{  					partLabel = new TextWidget(PrintItemWrapper.GetFriendlyName()' pointSize: 14);  					partLabel.TextColor = WidgetTextColor;  					partLabel.MinimumSize = new Vector2(1' 16);    					partStatus = new TextWidget($"{"Status".Localize().ToUpper()}: {"Queued to Print".Localize()}"' pointSize: 10);  					partStatus.AutoExpandBoundsToText = true;  					partStatus.TextColor = WidgetTextColor;  					partStatus.MinimumSize = new Vector2(50' 12);    					middleColumn.AddChild(partLabel);  					middleColumn.AddChild(partStatus);  				}    				topContentsFlowLayout.AddChild(leftColumn);  				topContentsFlowLayout.AddChild(middleColumn);  			}
Magic Number,MatterHackers.MatterControl.PrintQueue,QueueRowItem,C:\repos\MatterHackers_MatterControl\Queue\QueueRowItem.cs,OnDraw,The following statement contains a magic number: if (this.isActivePrint && !this.queueDataView.EditMode)  			{  				this.BackgroundColor = ActiveTheme.Instance.SecondaryAccentColor;  				SetTextColors(RGBA_Bytes.White);  				this.viewButton.BackgroundColor = RGBA_Bytes.White;  				this.viewButtonLabel.TextColor = ActiveTheme.Instance.SecondaryAccentColor;    				//Draw interior border  				graphics2D.Render(new Stroke(rectBorder' 3)' ActiveTheme.Instance.SecondaryAccentColor);  			}  			else if (this.isSelectedItem)  			{  				this.BackgroundColor = ActiveTheme.Instance.PrimaryAccentColor;  				this.partLabel.TextColor = RGBA_Bytes.White;  				this.partStatus.TextColor = RGBA_Bytes.White;  				this.selectionCheckBox.TextColor = RGBA_Bytes.White;  				this.viewButton.BackgroundColor = RGBA_Bytes.White;  				this.viewButtonLabel.TextColor = ActiveTheme.Instance.SecondaryAccentColor;  			}  			else if (this.IsHoverItem)  			{  				this.BackgroundColor = RGBA_Bytes.White;  				this.partLabel.TextColor = RGBA_Bytes.Black;  				this.selectionCheckBox.TextColor = RGBA_Bytes.Black;  				this.partStatus.TextColor = RGBA_Bytes.Black;  				this.viewButton.BackgroundColor = ActiveTheme.Instance.SecondaryAccentColor;  				this.viewButtonLabel.TextColor = RGBA_Bytes.White;    				//Draw interior border  				graphics2D.Render(new Stroke(rectBorder' 3)' ActiveTheme.Instance.SecondaryAccentColor);  			}  			else  			{  				this.BackgroundColor = new RGBA_Bytes(255' 255' 255' 255);  				SetTextColors(RGBA_Bytes.Black);  				this.selectionCheckBox.TextColor = RGBA_Bytes.Black;  				this.partStatus.TextColor = RGBA_Bytes.Black;  				this.viewButton.BackgroundColor = ActiveTheme.Instance.SecondaryAccentColor;  				this.viewButtonLabel.TextColor = RGBA_Bytes.White;  			}
Magic Number,MatterHackers.MatterControl.PrintQueue,QueueRowItem,C:\repos\MatterHackers_MatterControl\Queue\QueueRowItem.cs,OnDraw,The following statement contains a magic number: if (this.isActivePrint && !this.queueDataView.EditMode)  			{  				this.BackgroundColor = ActiveTheme.Instance.SecondaryAccentColor;  				SetTextColors(RGBA_Bytes.White);  				this.viewButton.BackgroundColor = RGBA_Bytes.White;  				this.viewButtonLabel.TextColor = ActiveTheme.Instance.SecondaryAccentColor;    				//Draw interior border  				graphics2D.Render(new Stroke(rectBorder' 3)' ActiveTheme.Instance.SecondaryAccentColor);  			}  			else if (this.isSelectedItem)  			{  				this.BackgroundColor = ActiveTheme.Instance.PrimaryAccentColor;  				this.partLabel.TextColor = RGBA_Bytes.White;  				this.partStatus.TextColor = RGBA_Bytes.White;  				this.selectionCheckBox.TextColor = RGBA_Bytes.White;  				this.viewButton.BackgroundColor = RGBA_Bytes.White;  				this.viewButtonLabel.TextColor = ActiveTheme.Instance.SecondaryAccentColor;  			}  			else if (this.IsHoverItem)  			{  				this.BackgroundColor = RGBA_Bytes.White;  				this.partLabel.TextColor = RGBA_Bytes.Black;  				this.selectionCheckBox.TextColor = RGBA_Bytes.Black;  				this.partStatus.TextColor = RGBA_Bytes.Black;  				this.viewButton.BackgroundColor = ActiveTheme.Instance.SecondaryAccentColor;  				this.viewButtonLabel.TextColor = RGBA_Bytes.White;    				//Draw interior border  				graphics2D.Render(new Stroke(rectBorder' 3)' ActiveTheme.Instance.SecondaryAccentColor);  			}  			else  			{  				this.BackgroundColor = new RGBA_Bytes(255' 255' 255' 255);  				SetTextColors(RGBA_Bytes.Black);  				this.selectionCheckBox.TextColor = RGBA_Bytes.Black;  				this.partStatus.TextColor = RGBA_Bytes.Black;  				this.viewButton.BackgroundColor = ActiveTheme.Instance.SecondaryAccentColor;  				this.viewButtonLabel.TextColor = RGBA_Bytes.White;  			}
Magic Number,MatterHackers.MatterControl.PrintQueue,QueueRowItem,C:\repos\MatterHackers_MatterControl\Queue\QueueRowItem.cs,OnDraw,The following statement contains a magic number: if (this.isActivePrint && !this.queueDataView.EditMode)  			{  				this.BackgroundColor = ActiveTheme.Instance.SecondaryAccentColor;  				SetTextColors(RGBA_Bytes.White);  				this.viewButton.BackgroundColor = RGBA_Bytes.White;  				this.viewButtonLabel.TextColor = ActiveTheme.Instance.SecondaryAccentColor;    				//Draw interior border  				graphics2D.Render(new Stroke(rectBorder' 3)' ActiveTheme.Instance.SecondaryAccentColor);  			}  			else if (this.isSelectedItem)  			{  				this.BackgroundColor = ActiveTheme.Instance.PrimaryAccentColor;  				this.partLabel.TextColor = RGBA_Bytes.White;  				this.partStatus.TextColor = RGBA_Bytes.White;  				this.selectionCheckBox.TextColor = RGBA_Bytes.White;  				this.viewButton.BackgroundColor = RGBA_Bytes.White;  				this.viewButtonLabel.TextColor = ActiveTheme.Instance.SecondaryAccentColor;  			}  			else if (this.IsHoverItem)  			{  				this.BackgroundColor = RGBA_Bytes.White;  				this.partLabel.TextColor = RGBA_Bytes.Black;  				this.selectionCheckBox.TextColor = RGBA_Bytes.Black;  				this.partStatus.TextColor = RGBA_Bytes.Black;  				this.viewButton.BackgroundColor = ActiveTheme.Instance.SecondaryAccentColor;  				this.viewButtonLabel.TextColor = RGBA_Bytes.White;    				//Draw interior border  				graphics2D.Render(new Stroke(rectBorder' 3)' ActiveTheme.Instance.SecondaryAccentColor);  			}  			else  			{  				this.BackgroundColor = new RGBA_Bytes(255' 255' 255' 255);  				SetTextColors(RGBA_Bytes.Black);  				this.selectionCheckBox.TextColor = RGBA_Bytes.Black;  				this.partStatus.TextColor = RGBA_Bytes.Black;  				this.viewButton.BackgroundColor = ActiveTheme.Instance.SecondaryAccentColor;  				this.viewButtonLabel.TextColor = RGBA_Bytes.White;  			}
Magic Number,MatterHackers.MatterControl.PrintQueue,QueueRowItem,C:\repos\MatterHackers_MatterControl\Queue\QueueRowItem.cs,OnDraw,The following statement contains a magic number: if (this.isActivePrint && !this.queueDataView.EditMode)  			{  				this.BackgroundColor = ActiveTheme.Instance.SecondaryAccentColor;  				SetTextColors(RGBA_Bytes.White);  				this.viewButton.BackgroundColor = RGBA_Bytes.White;  				this.viewButtonLabel.TextColor = ActiveTheme.Instance.SecondaryAccentColor;    				//Draw interior border  				graphics2D.Render(new Stroke(rectBorder' 3)' ActiveTheme.Instance.SecondaryAccentColor);  			}  			else if (this.isSelectedItem)  			{  				this.BackgroundColor = ActiveTheme.Instance.PrimaryAccentColor;  				this.partLabel.TextColor = RGBA_Bytes.White;  				this.partStatus.TextColor = RGBA_Bytes.White;  				this.selectionCheckBox.TextColor = RGBA_Bytes.White;  				this.viewButton.BackgroundColor = RGBA_Bytes.White;  				this.viewButtonLabel.TextColor = ActiveTheme.Instance.SecondaryAccentColor;  			}  			else if (this.IsHoverItem)  			{  				this.BackgroundColor = RGBA_Bytes.White;  				this.partLabel.TextColor = RGBA_Bytes.Black;  				this.selectionCheckBox.TextColor = RGBA_Bytes.Black;  				this.partStatus.TextColor = RGBA_Bytes.Black;  				this.viewButton.BackgroundColor = ActiveTheme.Instance.SecondaryAccentColor;  				this.viewButtonLabel.TextColor = RGBA_Bytes.White;    				//Draw interior border  				graphics2D.Render(new Stroke(rectBorder' 3)' ActiveTheme.Instance.SecondaryAccentColor);  			}  			else  			{  				this.BackgroundColor = new RGBA_Bytes(255' 255' 255' 255);  				SetTextColors(RGBA_Bytes.Black);  				this.selectionCheckBox.TextColor = RGBA_Bytes.Black;  				this.partStatus.TextColor = RGBA_Bytes.Black;  				this.viewButton.BackgroundColor = ActiveTheme.Instance.SecondaryAccentColor;  				this.viewButtonLabel.TextColor = RGBA_Bytes.White;  			}
Magic Number,MatterHackers.MatterControl.PrintQueue,QueueRowItem,C:\repos\MatterHackers_MatterControl\Queue\QueueRowItem.cs,OnDraw,The following statement contains a magic number: if (this.isActivePrint && !this.queueDataView.EditMode)  			{  				this.BackgroundColor = ActiveTheme.Instance.SecondaryAccentColor;  				SetTextColors(RGBA_Bytes.White);  				this.viewButton.BackgroundColor = RGBA_Bytes.White;  				this.viewButtonLabel.TextColor = ActiveTheme.Instance.SecondaryAccentColor;    				//Draw interior border  				graphics2D.Render(new Stroke(rectBorder' 3)' ActiveTheme.Instance.SecondaryAccentColor);  			}  			else if (this.isSelectedItem)  			{  				this.BackgroundColor = ActiveTheme.Instance.PrimaryAccentColor;  				this.partLabel.TextColor = RGBA_Bytes.White;  				this.partStatus.TextColor = RGBA_Bytes.White;  				this.selectionCheckBox.TextColor = RGBA_Bytes.White;  				this.viewButton.BackgroundColor = RGBA_Bytes.White;  				this.viewButtonLabel.TextColor = ActiveTheme.Instance.SecondaryAccentColor;  			}  			else if (this.IsHoverItem)  			{  				this.BackgroundColor = RGBA_Bytes.White;  				this.partLabel.TextColor = RGBA_Bytes.Black;  				this.selectionCheckBox.TextColor = RGBA_Bytes.Black;  				this.partStatus.TextColor = RGBA_Bytes.Black;  				this.viewButton.BackgroundColor = ActiveTheme.Instance.SecondaryAccentColor;  				this.viewButtonLabel.TextColor = RGBA_Bytes.White;    				//Draw interior border  				graphics2D.Render(new Stroke(rectBorder' 3)' ActiveTheme.Instance.SecondaryAccentColor);  			}  			else  			{  				this.BackgroundColor = new RGBA_Bytes(255' 255' 255' 255);  				SetTextColors(RGBA_Bytes.Black);  				this.selectionCheckBox.TextColor = RGBA_Bytes.Black;  				this.partStatus.TextColor = RGBA_Bytes.Black;  				this.viewButton.BackgroundColor = ActiveTheme.Instance.SecondaryAccentColor;  				this.viewButtonLabel.TextColor = RGBA_Bytes.White;  			}
Magic Number,MatterHackers.MatterControl.PrintQueue,QueueRowItem,C:\repos\MatterHackers_MatterControl\Queue\QueueRowItem.cs,OnDraw,The following statement contains a magic number: if (this.isActivePrint && !this.queueDataView.EditMode)  			{  				this.BackgroundColor = ActiveTheme.Instance.SecondaryAccentColor;  				SetTextColors(RGBA_Bytes.White);  				this.viewButton.BackgroundColor = RGBA_Bytes.White;  				this.viewButtonLabel.TextColor = ActiveTheme.Instance.SecondaryAccentColor;    				//Draw interior border  				graphics2D.Render(new Stroke(rectBorder' 3)' ActiveTheme.Instance.SecondaryAccentColor);  			}  			else if (this.isSelectedItem)  			{  				this.BackgroundColor = ActiveTheme.Instance.PrimaryAccentColor;  				this.partLabel.TextColor = RGBA_Bytes.White;  				this.partStatus.TextColor = RGBA_Bytes.White;  				this.selectionCheckBox.TextColor = RGBA_Bytes.White;  				this.viewButton.BackgroundColor = RGBA_Bytes.White;  				this.viewButtonLabel.TextColor = ActiveTheme.Instance.SecondaryAccentColor;  			}  			else if (this.IsHoverItem)  			{  				this.BackgroundColor = RGBA_Bytes.White;  				this.partLabel.TextColor = RGBA_Bytes.Black;  				this.selectionCheckBox.TextColor = RGBA_Bytes.Black;  				this.partStatus.TextColor = RGBA_Bytes.Black;  				this.viewButton.BackgroundColor = ActiveTheme.Instance.SecondaryAccentColor;  				this.viewButtonLabel.TextColor = RGBA_Bytes.White;    				//Draw interior border  				graphics2D.Render(new Stroke(rectBorder' 3)' ActiveTheme.Instance.SecondaryAccentColor);  			}  			else  			{  				this.BackgroundColor = new RGBA_Bytes(255' 255' 255' 255);  				SetTextColors(RGBA_Bytes.Black);  				this.selectionCheckBox.TextColor = RGBA_Bytes.Black;  				this.partStatus.TextColor = RGBA_Bytes.Black;  				this.viewButton.BackgroundColor = ActiveTheme.Instance.SecondaryAccentColor;  				this.viewButtonLabel.TextColor = RGBA_Bytes.White;  			}
Magic Number,MatterHackers.MatterControl.PrintQueue,QueueRowItem,C:\repos\MatterHackers_MatterControl\Queue\QueueRowItem.cs,getItemActionButtons,The following statement contains a magic number: removeButton.Width = 100;
Magic Number,MatterHackers.MatterControl.PrintQueue,QueueRowItem,C:\repos\MatterHackers_MatterControl\Queue\QueueRowItem.cs,getItemActionButtons,The following statement contains a magic number: viewButton.Width = 100;
Magic Number,MatterHackers.MatterControl.PrintQueue,QueueRowItem,C:\repos\MatterHackers_MatterControl\Queue\QueueRowItem.cs,getItemActionButtons,The following statement contains a magic number: buttonContainer.Width = 200;
Magic Number,MatterHackers.MatterControl.PrintQueue,QueueRowItem,C:\repos\MatterHackers_MatterControl\Queue\QueueRowItem.cs,SetDisplayAttributes,The following statement contains a magic number: this.Height = 50;
Magic Number,MatterHackers.MatterControl.PrintQueue,QueueRowItem,C:\repos\MatterHackers_MatterControl\Queue\QueueRowItem.cs,SetDisplayAttributes,The following statement contains a magic number: this.Margin = new BorderDouble(6' 0' 6' 6);
Magic Number,MatterHackers.MatterControl.PrintQueue,QueueRowItem,C:\repos\MatterHackers_MatterControl\Queue\QueueRowItem.cs,SetDisplayAttributes,The following statement contains a magic number: this.Margin = new BorderDouble(6' 0' 6' 6);
Magic Number,MatterHackers.MatterControl.PrintQueue,QueueRowItem,C:\repos\MatterHackers_MatterControl\Queue\QueueRowItem.cs,SetDisplayAttributes,The following statement contains a magic number: this.Margin = new BorderDouble(6' 0' 6' 6);
Magic Number,MatterHackers.MatterControl.PrintQueue,QueueDataView,C:\repos\MatterHackers_MatterControl\Queue\QueueDataView.cs,SetDisplayAttributes,The following statement contains a magic number: this.MinimumSize = new Vector2(0' 200);
Magic Number,MatterHackers.MatterControl.PrintQueue,QueueDataView,C:\repos\MatterHackers_MatterControl\Queue\QueueDataView.cs,SetDisplayAttributes,The following statement contains a magic number: this.ScrollArea.Padding = new BorderDouble(3);
Magic Number,MatterHackers.MatterControl.PrintQueue,QueueDataView,C:\repos\MatterHackers_MatterControl\Queue\QueueDataView.cs,itemHolder_MouseDownInBounds,The following statement contains a magic number: if (!EditMode && mouseEvent.X < 56) return;
Magic Number,MatterHackers.MatterControl.PrintQueue,QueueOptionsMenu,C:\repos\MatterHackers_MatterControl\Queue\OptionsMenu\QueueOptionsMenu.cs,QueueOptionsMenu,The following statement contains a magic number: MenuDropList.Margin = new BorderDouble(4' 0' 1' 0);
Magic Number,MatterHackers.MatterControl.PrintQueue,QueueOptionsMenu,C:\repos\MatterHackers_MatterControl\Queue\OptionsMenu\QueueOptionsMenu.cs,SetMenuItems,The following statement contains a magic number: foreach (Tuple<string' Func<bool>> item in menuItems)  			{  				if (item.Item2 == null)  				{  					MenuDropList.MenuItemsPadding = new BorderDouble(5' 0' padding.Right' 3);  				}  				else  				{  					MenuDropList.MenuItemsPadding = new BorderDouble(10' 5' padding.Right' 5);  				}    				MenuItem menuItem = MenuDropList.AddItem(item.Item1);  				if(item.Item2 == null)  				{  					menuItem.Enabled = false;  				}  			}
Magic Number,MatterHackers.MatterControl.PrintQueue,QueueOptionsMenu,C:\repos\MatterHackers_MatterControl\Queue\OptionsMenu\QueueOptionsMenu.cs,SetMenuItems,The following statement contains a magic number: foreach (Tuple<string' Func<bool>> item in menuItems)  			{  				if (item.Item2 == null)  				{  					MenuDropList.MenuItemsPadding = new BorderDouble(5' 0' padding.Right' 3);  				}  				else  				{  					MenuDropList.MenuItemsPadding = new BorderDouble(10' 5' padding.Right' 5);  				}    				MenuItem menuItem = MenuDropList.AddItem(item.Item1);  				if(item.Item2 == null)  				{  					menuItem.Enabled = false;  				}  			}
Magic Number,MatterHackers.MatterControl.PrintQueue,QueueOptionsMenu,C:\repos\MatterHackers_MatterControl\Queue\OptionsMenu\QueueOptionsMenu.cs,SetMenuItems,The following statement contains a magic number: foreach (Tuple<string' Func<bool>> item in menuItems)  			{  				if (item.Item2 == null)  				{  					MenuDropList.MenuItemsPadding = new BorderDouble(5' 0' padding.Right' 3);  				}  				else  				{  					MenuDropList.MenuItemsPadding = new BorderDouble(10' 5' padding.Right' 5);  				}    				MenuItem menuItem = MenuDropList.AddItem(item.Item1);  				if(item.Item2 == null)  				{  					menuItem.Enabled = false;  				}  			}
Magic Number,MatterHackers.MatterControl.PrintQueue,QueueOptionsMenu,C:\repos\MatterHackers_MatterControl\Queue\OptionsMenu\QueueOptionsMenu.cs,SetMenuItems,The following statement contains a magic number: foreach (Tuple<string' Func<bool>> item in menuItems)  			{  				if (item.Item2 == null)  				{  					MenuDropList.MenuItemsPadding = new BorderDouble(5' 0' padding.Right' 3);  				}  				else  				{  					MenuDropList.MenuItemsPadding = new BorderDouble(10' 5' padding.Right' 5);  				}    				MenuItem menuItem = MenuDropList.AddItem(item.Item1);  				if(item.Item2 == null)  				{  					menuItem.Enabled = false;  				}  			}
Magic Number,MatterHackers.MatterControl.PrintQueue,QueueOptionsMenu,C:\repos\MatterHackers_MatterControl\Queue\OptionsMenu\QueueOptionsMenu.cs,SetMenuItems,The following statement contains a magic number: foreach (Tuple<string' Func<bool>> item in menuItems)  			{  				if (item.Item2 == null)  				{  					MenuDropList.MenuItemsPadding = new BorderDouble(5' 0' padding.Right' 3);  				}  				else  				{  					MenuDropList.MenuItemsPadding = new BorderDouble(10' 5' padding.Right' 5);  				}    				MenuItem menuItem = MenuDropList.AddItem(item.Item1);  				if(item.Item2 == null)  				{  					menuItem.Enabled = false;  				}  			}
Magic Number,MatterHackers.MatterControl.PrintQueue,QueueDataWidget,C:\repos\MatterHackers_MatterControl\Queue\QueueDataWidget.cs,QueueDataWidget,The following statement contains a magic number: editButtonFactory.Margin = new BorderDouble(10' 0);
Magic Number,MatterHackers.MatterControl.PrintQueue,QueueDataWidget,C:\repos\MatterHackers_MatterControl\Queue\QueueDataWidget.cs,QueueDataWidget,The following statement contains a magic number: {  				enterEditModeButton = editButtonFactory.Generate("Edit".Localize()' centerText: true);  				enterEditModeButton.ToolTipText = "Enter Multi Select mode".Localize();  				enterEditModeButton.Click += enterEditModeButtonClick;    				leaveEditModeButton = editButtonFactory.Generate("Done".Localize()' centerText: true);  				leaveEditModeButton.Name = "Queue Done Button";  				leaveEditModeButton.Click += leaveEditModeButtonClick;    				// make sure the buttons are the same size even when localized  				if (leaveEditModeButton.Width < enterEditModeButton.Width)  				{  					editButtonFactory.FixedWidth = enterEditModeButton.Width;  					leaveEditModeButton = editButtonFactory.Generate("Done".Localize()' centerText: true);  					leaveEditModeButton.Click += leaveEditModeButtonClick;  				}  				else  				{  					editButtonFactory.FixedWidth = leaveEditModeButton.Width;  					enterEditModeButton = editButtonFactory.Generate("Edit".Localize()' centerText: true);  					enterEditModeButton.Name = "Queue Edit Button";  					enterEditModeButton.Click += enterEditModeButtonClick;  				}    				multiSelectionMenuItems.Add("Merge".Localize() + "...");    				CreateEditBarButtons();  				leaveEditModeButton.Visible = false;    				FlowLayoutWidget topBarContainer = new FlowLayoutWidget();  				topBarContainer.BackgroundColor = ActiveTheme.Instance.TransparentDarkOverlay;  				topBarContainer.HAnchor = HAnchor.ParentLeftRight;  				topBarContainer.Padding = new BorderDouble(0);    				topBarContainer.AddChild(enterEditModeButton);    				topBarContainer.AddChild(leaveEditModeButton);  				topBarContainer.AddChild(new HorizontalSpacer());  				topBarContainer.AddChild(itemOperationButtons);    				// put in the item edit menu  				{  					moreMenu = new DropDownMenu("More".Localize() + "... ");  					moreMenu.NormalColor = new RGBA_Bytes();  					moreMenu.BorderWidth = (int)(1 * GuiWidget.DeviceScale + .5);  					moreMenu.BorderColor = new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor'100);  					moreMenu.MenuAsWideAsItems = false;  					moreMenu.VAnchor = VAnchor.ParentBottomTop;  					moreMenu.Margin = new BorderDouble(3' 3);  					moreMenu.AlignToRightEdge = true;    					topBarContainer.AddChild(moreMenu);  					SetMenuItems(moreMenu);  					moreMenu.SelectionChanged += new EventHandler(ItemMenu_SelectionChanged);  				}    				allControls.AddChild(topBarContainer);    				{  					// Ensure the form opens with no rows selected.  					//ActiveQueueList.Instance.ClearSelected();    					allControls.AddChild(queueDataView);  				}    				FlowLayoutWidget buttonPanel1 = new FlowLayoutWidget();  				buttonPanel1.HAnchor = HAnchor.ParentLeftRight;  				buttonPanel1.Padding = new BorderDouble(0' 3);  				buttonPanel1.MinimumSize = new Vector2(0' 46);  				{  					addToQueueButton = textImageButtonFactory.Generate("Add".Localize()' StaticData.Instance.LoadIcon("icon_plus.png"' 32' 32));  					addToQueueButton.ToolTipText = "Add an .stl' .amf' .gcode or .zip file to the Queue".Localize();  					buttonPanel1.AddChild(addToQueueButton);  					addToQueueButton.Margin = new BorderDouble(0' 0' 3' 0);  					addToQueueButton.Click += addToQueueButton_Click;  					addToQueueButton.Name = "Queue Add Button";    					// put in the creator button  					{  						createButton = textImageButtonFactory.Generate("Create".Localize()' StaticData.Instance.LoadIcon("icon_creator.png"' 32' 32));  						createButton.ToolTipText = "Choose a Create Tool to generate custom designs".Localize();  						createButton.Name = "Design Tool Button";  						buttonPanel1.AddChild(createButton);  						createButton.Margin = new BorderDouble(0' 0' 3' 0);  						createButton.Click += (sender' e) =>  						{  							OpenPluginChooserWindow();  						};  					}    					bool touchScreenMode = UserSettings.Instance.IsTouchScreen;    					if (OemSettings.Instance.ShowShopButton)  					{  						shopButton = textImageButtonFactory.Generate("Buy Materials".Localize()' StaticData.Instance.LoadIcon("icon_shopping_cart_32x32.png"' 32'32));  						shopButton.ToolTipText = "Shop online for printing materials".Localize();  						shopButton.Name = "Buy Materials Button";  						buttonPanel1.AddChild(shopButton);  						shopButton.Margin = new BorderDouble(0' 0' 3' 0);  						shopButton.Click += (sender' e) =>  						{  							double activeFilamentDiameter = 0;  							if (ActiveSliceSettings.Instance.PrinterSelected)  							{  								activeFilamentDiameter = 3;  								if (ActiveSliceSettings.Instance.GetValue<double>(SettingsKey.filament_diameter) < 2)  								{  									activeFilamentDiameter = 1.75;  								}  							}    							MatterControlApplication.Instance.LaunchBrowser("http://www.matterhackers.com/mc/store/redirect?d={0}&clk=mcs&a={1}".FormatWith(activeFilamentDiameter' OemSettings.Instance.AffiliateCode));  							};  						}      					buttonPanel1.AddChild(new HorizontalSpacer());    					queueMenuContainer = new FlowLayoutWidget();  					queueMenuContainer.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  					queueMenu = new QueueOptionsMenu();  					queueMenuContainer.AddChild(queueMenu.MenuDropList);  					buttonPanel1.AddChild(queueMenuContainer);  				}  				allControls.AddChild(buttonPanel1);  			}
Magic Number,MatterHackers.MatterControl.PrintQueue,QueueDataWidget,C:\repos\MatterHackers_MatterControl\Queue\QueueDataWidget.cs,QueueDataWidget,The following statement contains a magic number: {  				enterEditModeButton = editButtonFactory.Generate("Edit".Localize()' centerText: true);  				enterEditModeButton.ToolTipText = "Enter Multi Select mode".Localize();  				enterEditModeButton.Click += enterEditModeButtonClick;    				leaveEditModeButton = editButtonFactory.Generate("Done".Localize()' centerText: true);  				leaveEditModeButton.Name = "Queue Done Button";  				leaveEditModeButton.Click += leaveEditModeButtonClick;    				// make sure the buttons are the same size even when localized  				if (leaveEditModeButton.Width < enterEditModeButton.Width)  				{  					editButtonFactory.FixedWidth = enterEditModeButton.Width;  					leaveEditModeButton = editButtonFactory.Generate("Done".Localize()' centerText: true);  					leaveEditModeButton.Click += leaveEditModeButtonClick;  				}  				else  				{  					editButtonFactory.FixedWidth = leaveEditModeButton.Width;  					enterEditModeButton = editButtonFactory.Generate("Edit".Localize()' centerText: true);  					enterEditModeButton.Name = "Queue Edit Button";  					enterEditModeButton.Click += enterEditModeButtonClick;  				}    				multiSelectionMenuItems.Add("Merge".Localize() + "...");    				CreateEditBarButtons();  				leaveEditModeButton.Visible = false;    				FlowLayoutWidget topBarContainer = new FlowLayoutWidget();  				topBarContainer.BackgroundColor = ActiveTheme.Instance.TransparentDarkOverlay;  				topBarContainer.HAnchor = HAnchor.ParentLeftRight;  				topBarContainer.Padding = new BorderDouble(0);    				topBarContainer.AddChild(enterEditModeButton);    				topBarContainer.AddChild(leaveEditModeButton);  				topBarContainer.AddChild(new HorizontalSpacer());  				topBarContainer.AddChild(itemOperationButtons);    				// put in the item edit menu  				{  					moreMenu = new DropDownMenu("More".Localize() + "... ");  					moreMenu.NormalColor = new RGBA_Bytes();  					moreMenu.BorderWidth = (int)(1 * GuiWidget.DeviceScale + .5);  					moreMenu.BorderColor = new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor'100);  					moreMenu.MenuAsWideAsItems = false;  					moreMenu.VAnchor = VAnchor.ParentBottomTop;  					moreMenu.Margin = new BorderDouble(3' 3);  					moreMenu.AlignToRightEdge = true;    					topBarContainer.AddChild(moreMenu);  					SetMenuItems(moreMenu);  					moreMenu.SelectionChanged += new EventHandler(ItemMenu_SelectionChanged);  				}    				allControls.AddChild(topBarContainer);    				{  					// Ensure the form opens with no rows selected.  					//ActiveQueueList.Instance.ClearSelected();    					allControls.AddChild(queueDataView);  				}    				FlowLayoutWidget buttonPanel1 = new FlowLayoutWidget();  				buttonPanel1.HAnchor = HAnchor.ParentLeftRight;  				buttonPanel1.Padding = new BorderDouble(0' 3);  				buttonPanel1.MinimumSize = new Vector2(0' 46);  				{  					addToQueueButton = textImageButtonFactory.Generate("Add".Localize()' StaticData.Instance.LoadIcon("icon_plus.png"' 32' 32));  					addToQueueButton.ToolTipText = "Add an .stl' .amf' .gcode or .zip file to the Queue".Localize();  					buttonPanel1.AddChild(addToQueueButton);  					addToQueueButton.Margin = new BorderDouble(0' 0' 3' 0);  					addToQueueButton.Click += addToQueueButton_Click;  					addToQueueButton.Name = "Queue Add Button";    					// put in the creator button  					{  						createButton = textImageButtonFactory.Generate("Create".Localize()' StaticData.Instance.LoadIcon("icon_creator.png"' 32' 32));  						createButton.ToolTipText = "Choose a Create Tool to generate custom designs".Localize();  						createButton.Name = "Design Tool Button";  						buttonPanel1.AddChild(createButton);  						createButton.Margin = new BorderDouble(0' 0' 3' 0);  						createButton.Click += (sender' e) =>  						{  							OpenPluginChooserWindow();  						};  					}    					bool touchScreenMode = UserSettings.Instance.IsTouchScreen;    					if (OemSettings.Instance.ShowShopButton)  					{  						shopButton = textImageButtonFactory.Generate("Buy Materials".Localize()' StaticData.Instance.LoadIcon("icon_shopping_cart_32x32.png"' 32'32));  						shopButton.ToolTipText = "Shop online for printing materials".Localize();  						shopButton.Name = "Buy Materials Button";  						buttonPanel1.AddChild(shopButton);  						shopButton.Margin = new BorderDouble(0' 0' 3' 0);  						shopButton.Click += (sender' e) =>  						{  							double activeFilamentDiameter = 0;  							if (ActiveSliceSettings.Instance.PrinterSelected)  							{  								activeFilamentDiameter = 3;  								if (ActiveSliceSettings.Instance.GetValue<double>(SettingsKey.filament_diameter) < 2)  								{  									activeFilamentDiameter = 1.75;  								}  							}    							MatterControlApplication.Instance.LaunchBrowser("http://www.matterhackers.com/mc/store/redirect?d={0}&clk=mcs&a={1}".FormatWith(activeFilamentDiameter' OemSettings.Instance.AffiliateCode));  							};  						}      					buttonPanel1.AddChild(new HorizontalSpacer());    					queueMenuContainer = new FlowLayoutWidget();  					queueMenuContainer.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  					queueMenu = new QueueOptionsMenu();  					queueMenuContainer.AddChild(queueMenu.MenuDropList);  					buttonPanel1.AddChild(queueMenuContainer);  				}  				allControls.AddChild(buttonPanel1);  			}
Magic Number,MatterHackers.MatterControl.PrintQueue,QueueDataWidget,C:\repos\MatterHackers_MatterControl\Queue\QueueDataWidget.cs,QueueDataWidget,The following statement contains a magic number: {  				enterEditModeButton = editButtonFactory.Generate("Edit".Localize()' centerText: true);  				enterEditModeButton.ToolTipText = "Enter Multi Select mode".Localize();  				enterEditModeButton.Click += enterEditModeButtonClick;    				leaveEditModeButton = editButtonFactory.Generate("Done".Localize()' centerText: true);  				leaveEditModeButton.Name = "Queue Done Button";  				leaveEditModeButton.Click += leaveEditModeButtonClick;    				// make sure the buttons are the same size even when localized  				if (leaveEditModeButton.Width < enterEditModeButton.Width)  				{  					editButtonFactory.FixedWidth = enterEditModeButton.Width;  					leaveEditModeButton = editButtonFactory.Generate("Done".Localize()' centerText: true);  					leaveEditModeButton.Click += leaveEditModeButtonClick;  				}  				else  				{  					editButtonFactory.FixedWidth = leaveEditModeButton.Width;  					enterEditModeButton = editButtonFactory.Generate("Edit".Localize()' centerText: true);  					enterEditModeButton.Name = "Queue Edit Button";  					enterEditModeButton.Click += enterEditModeButtonClick;  				}    				multiSelectionMenuItems.Add("Merge".Localize() + "...");    				CreateEditBarButtons();  				leaveEditModeButton.Visible = false;    				FlowLayoutWidget topBarContainer = new FlowLayoutWidget();  				topBarContainer.BackgroundColor = ActiveTheme.Instance.TransparentDarkOverlay;  				topBarContainer.HAnchor = HAnchor.ParentLeftRight;  				topBarContainer.Padding = new BorderDouble(0);    				topBarContainer.AddChild(enterEditModeButton);    				topBarContainer.AddChild(leaveEditModeButton);  				topBarContainer.AddChild(new HorizontalSpacer());  				topBarContainer.AddChild(itemOperationButtons);    				// put in the item edit menu  				{  					moreMenu = new DropDownMenu("More".Localize() + "... ");  					moreMenu.NormalColor = new RGBA_Bytes();  					moreMenu.BorderWidth = (int)(1 * GuiWidget.DeviceScale + .5);  					moreMenu.BorderColor = new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor'100);  					moreMenu.MenuAsWideAsItems = false;  					moreMenu.VAnchor = VAnchor.ParentBottomTop;  					moreMenu.Margin = new BorderDouble(3' 3);  					moreMenu.AlignToRightEdge = true;    					topBarContainer.AddChild(moreMenu);  					SetMenuItems(moreMenu);  					moreMenu.SelectionChanged += new EventHandler(ItemMenu_SelectionChanged);  				}    				allControls.AddChild(topBarContainer);    				{  					// Ensure the form opens with no rows selected.  					//ActiveQueueList.Instance.ClearSelected();    					allControls.AddChild(queueDataView);  				}    				FlowLayoutWidget buttonPanel1 = new FlowLayoutWidget();  				buttonPanel1.HAnchor = HAnchor.ParentLeftRight;  				buttonPanel1.Padding = new BorderDouble(0' 3);  				buttonPanel1.MinimumSize = new Vector2(0' 46);  				{  					addToQueueButton = textImageButtonFactory.Generate("Add".Localize()' StaticData.Instance.LoadIcon("icon_plus.png"' 32' 32));  					addToQueueButton.ToolTipText = "Add an .stl' .amf' .gcode or .zip file to the Queue".Localize();  					buttonPanel1.AddChild(addToQueueButton);  					addToQueueButton.Margin = new BorderDouble(0' 0' 3' 0);  					addToQueueButton.Click += addToQueueButton_Click;  					addToQueueButton.Name = "Queue Add Button";    					// put in the creator button  					{  						createButton = textImageButtonFactory.Generate("Create".Localize()' StaticData.Instance.LoadIcon("icon_creator.png"' 32' 32));  						createButton.ToolTipText = "Choose a Create Tool to generate custom designs".Localize();  						createButton.Name = "Design Tool Button";  						buttonPanel1.AddChild(createButton);  						createButton.Margin = new BorderDouble(0' 0' 3' 0);  						createButton.Click += (sender' e) =>  						{  							OpenPluginChooserWindow();  						};  					}    					bool touchScreenMode = UserSettings.Instance.IsTouchScreen;    					if (OemSettings.Instance.ShowShopButton)  					{  						shopButton = textImageButtonFactory.Generate("Buy Materials".Localize()' StaticData.Instance.LoadIcon("icon_shopping_cart_32x32.png"' 32'32));  						shopButton.ToolTipText = "Shop online for printing materials".Localize();  						shopButton.Name = "Buy Materials Button";  						buttonPanel1.AddChild(shopButton);  						shopButton.Margin = new BorderDouble(0' 0' 3' 0);  						shopButton.Click += (sender' e) =>  						{  							double activeFilamentDiameter = 0;  							if (ActiveSliceSettings.Instance.PrinterSelected)  							{  								activeFilamentDiameter = 3;  								if (ActiveSliceSettings.Instance.GetValue<double>(SettingsKey.filament_diameter) < 2)  								{  									activeFilamentDiameter = 1.75;  								}  							}    							MatterControlApplication.Instance.LaunchBrowser("http://www.matterhackers.com/mc/store/redirect?d={0}&clk=mcs&a={1}".FormatWith(activeFilamentDiameter' OemSettings.Instance.AffiliateCode));  							};  						}      					buttonPanel1.AddChild(new HorizontalSpacer());    					queueMenuContainer = new FlowLayoutWidget();  					queueMenuContainer.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  					queueMenu = new QueueOptionsMenu();  					queueMenuContainer.AddChild(queueMenu.MenuDropList);  					buttonPanel1.AddChild(queueMenuContainer);  				}  				allControls.AddChild(buttonPanel1);  			}
Magic Number,MatterHackers.MatterControl.PrintQueue,QueueDataWidget,C:\repos\MatterHackers_MatterControl\Queue\QueueDataWidget.cs,QueueDataWidget,The following statement contains a magic number: {  				enterEditModeButton = editButtonFactory.Generate("Edit".Localize()' centerText: true);  				enterEditModeButton.ToolTipText = "Enter Multi Select mode".Localize();  				enterEditModeButton.Click += enterEditModeButtonClick;    				leaveEditModeButton = editButtonFactory.Generate("Done".Localize()' centerText: true);  				leaveEditModeButton.Name = "Queue Done Button";  				leaveEditModeButton.Click += leaveEditModeButtonClick;    				// make sure the buttons are the same size even when localized  				if (leaveEditModeButton.Width < enterEditModeButton.Width)  				{  					editButtonFactory.FixedWidth = enterEditModeButton.Width;  					leaveEditModeButton = editButtonFactory.Generate("Done".Localize()' centerText: true);  					leaveEditModeButton.Click += leaveEditModeButtonClick;  				}  				else  				{  					editButtonFactory.FixedWidth = leaveEditModeButton.Width;  					enterEditModeButton = editButtonFactory.Generate("Edit".Localize()' centerText: true);  					enterEditModeButton.Name = "Queue Edit Button";  					enterEditModeButton.Click += enterEditModeButtonClick;  				}    				multiSelectionMenuItems.Add("Merge".Localize() + "...");    				CreateEditBarButtons();  				leaveEditModeButton.Visible = false;    				FlowLayoutWidget topBarContainer = new FlowLayoutWidget();  				topBarContainer.BackgroundColor = ActiveTheme.Instance.TransparentDarkOverlay;  				topBarContainer.HAnchor = HAnchor.ParentLeftRight;  				topBarContainer.Padding = new BorderDouble(0);    				topBarContainer.AddChild(enterEditModeButton);    				topBarContainer.AddChild(leaveEditModeButton);  				topBarContainer.AddChild(new HorizontalSpacer());  				topBarContainer.AddChild(itemOperationButtons);    				// put in the item edit menu  				{  					moreMenu = new DropDownMenu("More".Localize() + "... ");  					moreMenu.NormalColor = new RGBA_Bytes();  					moreMenu.BorderWidth = (int)(1 * GuiWidget.DeviceScale + .5);  					moreMenu.BorderColor = new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor'100);  					moreMenu.MenuAsWideAsItems = false;  					moreMenu.VAnchor = VAnchor.ParentBottomTop;  					moreMenu.Margin = new BorderDouble(3' 3);  					moreMenu.AlignToRightEdge = true;    					topBarContainer.AddChild(moreMenu);  					SetMenuItems(moreMenu);  					moreMenu.SelectionChanged += new EventHandler(ItemMenu_SelectionChanged);  				}    				allControls.AddChild(topBarContainer);    				{  					// Ensure the form opens with no rows selected.  					//ActiveQueueList.Instance.ClearSelected();    					allControls.AddChild(queueDataView);  				}    				FlowLayoutWidget buttonPanel1 = new FlowLayoutWidget();  				buttonPanel1.HAnchor = HAnchor.ParentLeftRight;  				buttonPanel1.Padding = new BorderDouble(0' 3);  				buttonPanel1.MinimumSize = new Vector2(0' 46);  				{  					addToQueueButton = textImageButtonFactory.Generate("Add".Localize()' StaticData.Instance.LoadIcon("icon_plus.png"' 32' 32));  					addToQueueButton.ToolTipText = "Add an .stl' .amf' .gcode or .zip file to the Queue".Localize();  					buttonPanel1.AddChild(addToQueueButton);  					addToQueueButton.Margin = new BorderDouble(0' 0' 3' 0);  					addToQueueButton.Click += addToQueueButton_Click;  					addToQueueButton.Name = "Queue Add Button";    					// put in the creator button  					{  						createButton = textImageButtonFactory.Generate("Create".Localize()' StaticData.Instance.LoadIcon("icon_creator.png"' 32' 32));  						createButton.ToolTipText = "Choose a Create Tool to generate custom designs".Localize();  						createButton.Name = "Design Tool Button";  						buttonPanel1.AddChild(createButton);  						createButton.Margin = new BorderDouble(0' 0' 3' 0);  						createButton.Click += (sender' e) =>  						{  							OpenPluginChooserWindow();  						};  					}    					bool touchScreenMode = UserSettings.Instance.IsTouchScreen;    					if (OemSettings.Instance.ShowShopButton)  					{  						shopButton = textImageButtonFactory.Generate("Buy Materials".Localize()' StaticData.Instance.LoadIcon("icon_shopping_cart_32x32.png"' 32'32));  						shopButton.ToolTipText = "Shop online for printing materials".Localize();  						shopButton.Name = "Buy Materials Button";  						buttonPanel1.AddChild(shopButton);  						shopButton.Margin = new BorderDouble(0' 0' 3' 0);  						shopButton.Click += (sender' e) =>  						{  							double activeFilamentDiameter = 0;  							if (ActiveSliceSettings.Instance.PrinterSelected)  							{  								activeFilamentDiameter = 3;  								if (ActiveSliceSettings.Instance.GetValue<double>(SettingsKey.filament_diameter) < 2)  								{  									activeFilamentDiameter = 1.75;  								}  							}    							MatterControlApplication.Instance.LaunchBrowser("http://www.matterhackers.com/mc/store/redirect?d={0}&clk=mcs&a={1}".FormatWith(activeFilamentDiameter' OemSettings.Instance.AffiliateCode));  							};  						}      					buttonPanel1.AddChild(new HorizontalSpacer());    					queueMenuContainer = new FlowLayoutWidget();  					queueMenuContainer.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  					queueMenu = new QueueOptionsMenu();  					queueMenuContainer.AddChild(queueMenu.MenuDropList);  					buttonPanel1.AddChild(queueMenuContainer);  				}  				allControls.AddChild(buttonPanel1);  			}
Magic Number,MatterHackers.MatterControl.PrintQueue,QueueDataWidget,C:\repos\MatterHackers_MatterControl\Queue\QueueDataWidget.cs,QueueDataWidget,The following statement contains a magic number: {  				enterEditModeButton = editButtonFactory.Generate("Edit".Localize()' centerText: true);  				enterEditModeButton.ToolTipText = "Enter Multi Select mode".Localize();  				enterEditModeButton.Click += enterEditModeButtonClick;    				leaveEditModeButton = editButtonFactory.Generate("Done".Localize()' centerText: true);  				leaveEditModeButton.Name = "Queue Done Button";  				leaveEditModeButton.Click += leaveEditModeButtonClick;    				// make sure the buttons are the same size even when localized  				if (leaveEditModeButton.Width < enterEditModeButton.Width)  				{  					editButtonFactory.FixedWidth = enterEditModeButton.Width;  					leaveEditModeButton = editButtonFactory.Generate("Done".Localize()' centerText: true);  					leaveEditModeButton.Click += leaveEditModeButtonClick;  				}  				else  				{  					editButtonFactory.FixedWidth = leaveEditModeButton.Width;  					enterEditModeButton = editButtonFactory.Generate("Edit".Localize()' centerText: true);  					enterEditModeButton.Name = "Queue Edit Button";  					enterEditModeButton.Click += enterEditModeButtonClick;  				}    				multiSelectionMenuItems.Add("Merge".Localize() + "...");    				CreateEditBarButtons();  				leaveEditModeButton.Visible = false;    				FlowLayoutWidget topBarContainer = new FlowLayoutWidget();  				topBarContainer.BackgroundColor = ActiveTheme.Instance.TransparentDarkOverlay;  				topBarContainer.HAnchor = HAnchor.ParentLeftRight;  				topBarContainer.Padding = new BorderDouble(0);    				topBarContainer.AddChild(enterEditModeButton);    				topBarContainer.AddChild(leaveEditModeButton);  				topBarContainer.AddChild(new HorizontalSpacer());  				topBarContainer.AddChild(itemOperationButtons);    				// put in the item edit menu  				{  					moreMenu = new DropDownMenu("More".Localize() + "... ");  					moreMenu.NormalColor = new RGBA_Bytes();  					moreMenu.BorderWidth = (int)(1 * GuiWidget.DeviceScale + .5);  					moreMenu.BorderColor = new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor'100);  					moreMenu.MenuAsWideAsItems = false;  					moreMenu.VAnchor = VAnchor.ParentBottomTop;  					moreMenu.Margin = new BorderDouble(3' 3);  					moreMenu.AlignToRightEdge = true;    					topBarContainer.AddChild(moreMenu);  					SetMenuItems(moreMenu);  					moreMenu.SelectionChanged += new EventHandler(ItemMenu_SelectionChanged);  				}    				allControls.AddChild(topBarContainer);    				{  					// Ensure the form opens with no rows selected.  					//ActiveQueueList.Instance.ClearSelected();    					allControls.AddChild(queueDataView);  				}    				FlowLayoutWidget buttonPanel1 = new FlowLayoutWidget();  				buttonPanel1.HAnchor = HAnchor.ParentLeftRight;  				buttonPanel1.Padding = new BorderDouble(0' 3);  				buttonPanel1.MinimumSize = new Vector2(0' 46);  				{  					addToQueueButton = textImageButtonFactory.Generate("Add".Localize()' StaticData.Instance.LoadIcon("icon_plus.png"' 32' 32));  					addToQueueButton.ToolTipText = "Add an .stl' .amf' .gcode or .zip file to the Queue".Localize();  					buttonPanel1.AddChild(addToQueueButton);  					addToQueueButton.Margin = new BorderDouble(0' 0' 3' 0);  					addToQueueButton.Click += addToQueueButton_Click;  					addToQueueButton.Name = "Queue Add Button";    					// put in the creator button  					{  						createButton = textImageButtonFactory.Generate("Create".Localize()' StaticData.Instance.LoadIcon("icon_creator.png"' 32' 32));  						createButton.ToolTipText = "Choose a Create Tool to generate custom designs".Localize();  						createButton.Name = "Design Tool Button";  						buttonPanel1.AddChild(createButton);  						createButton.Margin = new BorderDouble(0' 0' 3' 0);  						createButton.Click += (sender' e) =>  						{  							OpenPluginChooserWindow();  						};  					}    					bool touchScreenMode = UserSettings.Instance.IsTouchScreen;    					if (OemSettings.Instance.ShowShopButton)  					{  						shopButton = textImageButtonFactory.Generate("Buy Materials".Localize()' StaticData.Instance.LoadIcon("icon_shopping_cart_32x32.png"' 32'32));  						shopButton.ToolTipText = "Shop online for printing materials".Localize();  						shopButton.Name = "Buy Materials Button";  						buttonPanel1.AddChild(shopButton);  						shopButton.Margin = new BorderDouble(0' 0' 3' 0);  						shopButton.Click += (sender' e) =>  						{  							double activeFilamentDiameter = 0;  							if (ActiveSliceSettings.Instance.PrinterSelected)  							{  								activeFilamentDiameter = 3;  								if (ActiveSliceSettings.Instance.GetValue<double>(SettingsKey.filament_diameter) < 2)  								{  									activeFilamentDiameter = 1.75;  								}  							}    							MatterControlApplication.Instance.LaunchBrowser("http://www.matterhackers.com/mc/store/redirect?d={0}&clk=mcs&a={1}".FormatWith(activeFilamentDiameter' OemSettings.Instance.AffiliateCode));  							};  						}      					buttonPanel1.AddChild(new HorizontalSpacer());    					queueMenuContainer = new FlowLayoutWidget();  					queueMenuContainer.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  					queueMenu = new QueueOptionsMenu();  					queueMenuContainer.AddChild(queueMenu.MenuDropList);  					buttonPanel1.AddChild(queueMenuContainer);  				}  				allControls.AddChild(buttonPanel1);  			}
Magic Number,MatterHackers.MatterControl.PrintQueue,QueueDataWidget,C:\repos\MatterHackers_MatterControl\Queue\QueueDataWidget.cs,QueueDataWidget,The following statement contains a magic number: {  				enterEditModeButton = editButtonFactory.Generate("Edit".Localize()' centerText: true);  				enterEditModeButton.ToolTipText = "Enter Multi Select mode".Localize();  				enterEditModeButton.Click += enterEditModeButtonClick;    				leaveEditModeButton = editButtonFactory.Generate("Done".Localize()' centerText: true);  				leaveEditModeButton.Name = "Queue Done Button";  				leaveEditModeButton.Click += leaveEditModeButtonClick;    				// make sure the buttons are the same size even when localized  				if (leaveEditModeButton.Width < enterEditModeButton.Width)  				{  					editButtonFactory.FixedWidth = enterEditModeButton.Width;  					leaveEditModeButton = editButtonFactory.Generate("Done".Localize()' centerText: true);  					leaveEditModeButton.Click += leaveEditModeButtonClick;  				}  				else  				{  					editButtonFactory.FixedWidth = leaveEditModeButton.Width;  					enterEditModeButton = editButtonFactory.Generate("Edit".Localize()' centerText: true);  					enterEditModeButton.Name = "Queue Edit Button";  					enterEditModeButton.Click += enterEditModeButtonClick;  				}    				multiSelectionMenuItems.Add("Merge".Localize() + "...");    				CreateEditBarButtons();  				leaveEditModeButton.Visible = false;    				FlowLayoutWidget topBarContainer = new FlowLayoutWidget();  				topBarContainer.BackgroundColor = ActiveTheme.Instance.TransparentDarkOverlay;  				topBarContainer.HAnchor = HAnchor.ParentLeftRight;  				topBarContainer.Padding = new BorderDouble(0);    				topBarContainer.AddChild(enterEditModeButton);    				topBarContainer.AddChild(leaveEditModeButton);  				topBarContainer.AddChild(new HorizontalSpacer());  				topBarContainer.AddChild(itemOperationButtons);    				// put in the item edit menu  				{  					moreMenu = new DropDownMenu("More".Localize() + "... ");  					moreMenu.NormalColor = new RGBA_Bytes();  					moreMenu.BorderWidth = (int)(1 * GuiWidget.DeviceScale + .5);  					moreMenu.BorderColor = new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor'100);  					moreMenu.MenuAsWideAsItems = false;  					moreMenu.VAnchor = VAnchor.ParentBottomTop;  					moreMenu.Margin = new BorderDouble(3' 3);  					moreMenu.AlignToRightEdge = true;    					topBarContainer.AddChild(moreMenu);  					SetMenuItems(moreMenu);  					moreMenu.SelectionChanged += new EventHandler(ItemMenu_SelectionChanged);  				}    				allControls.AddChild(topBarContainer);    				{  					// Ensure the form opens with no rows selected.  					//ActiveQueueList.Instance.ClearSelected();    					allControls.AddChild(queueDataView);  				}    				FlowLayoutWidget buttonPanel1 = new FlowLayoutWidget();  				buttonPanel1.HAnchor = HAnchor.ParentLeftRight;  				buttonPanel1.Padding = new BorderDouble(0' 3);  				buttonPanel1.MinimumSize = new Vector2(0' 46);  				{  					addToQueueButton = textImageButtonFactory.Generate("Add".Localize()' StaticData.Instance.LoadIcon("icon_plus.png"' 32' 32));  					addToQueueButton.ToolTipText = "Add an .stl' .amf' .gcode or .zip file to the Queue".Localize();  					buttonPanel1.AddChild(addToQueueButton);  					addToQueueButton.Margin = new BorderDouble(0' 0' 3' 0);  					addToQueueButton.Click += addToQueueButton_Click;  					addToQueueButton.Name = "Queue Add Button";    					// put in the creator button  					{  						createButton = textImageButtonFactory.Generate("Create".Localize()' StaticData.Instance.LoadIcon("icon_creator.png"' 32' 32));  						createButton.ToolTipText = "Choose a Create Tool to generate custom designs".Localize();  						createButton.Name = "Design Tool Button";  						buttonPanel1.AddChild(createButton);  						createButton.Margin = new BorderDouble(0' 0' 3' 0);  						createButton.Click += (sender' e) =>  						{  							OpenPluginChooserWindow();  						};  					}    					bool touchScreenMode = UserSettings.Instance.IsTouchScreen;    					if (OemSettings.Instance.ShowShopButton)  					{  						shopButton = textImageButtonFactory.Generate("Buy Materials".Localize()' StaticData.Instance.LoadIcon("icon_shopping_cart_32x32.png"' 32'32));  						shopButton.ToolTipText = "Shop online for printing materials".Localize();  						shopButton.Name = "Buy Materials Button";  						buttonPanel1.AddChild(shopButton);  						shopButton.Margin = new BorderDouble(0' 0' 3' 0);  						shopButton.Click += (sender' e) =>  						{  							double activeFilamentDiameter = 0;  							if (ActiveSliceSettings.Instance.PrinterSelected)  							{  								activeFilamentDiameter = 3;  								if (ActiveSliceSettings.Instance.GetValue<double>(SettingsKey.filament_diameter) < 2)  								{  									activeFilamentDiameter = 1.75;  								}  							}    							MatterControlApplication.Instance.LaunchBrowser("http://www.matterhackers.com/mc/store/redirect?d={0}&clk=mcs&a={1}".FormatWith(activeFilamentDiameter' OemSettings.Instance.AffiliateCode));  							};  						}      					buttonPanel1.AddChild(new HorizontalSpacer());    					queueMenuContainer = new FlowLayoutWidget();  					queueMenuContainer.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  					queueMenu = new QueueOptionsMenu();  					queueMenuContainer.AddChild(queueMenu.MenuDropList);  					buttonPanel1.AddChild(queueMenuContainer);  				}  				allControls.AddChild(buttonPanel1);  			}
Magic Number,MatterHackers.MatterControl.PrintQueue,QueueDataWidget,C:\repos\MatterHackers_MatterControl\Queue\QueueDataWidget.cs,QueueDataWidget,The following statement contains a magic number: {  				enterEditModeButton = editButtonFactory.Generate("Edit".Localize()' centerText: true);  				enterEditModeButton.ToolTipText = "Enter Multi Select mode".Localize();  				enterEditModeButton.Click += enterEditModeButtonClick;    				leaveEditModeButton = editButtonFactory.Generate("Done".Localize()' centerText: true);  				leaveEditModeButton.Name = "Queue Done Button";  				leaveEditModeButton.Click += leaveEditModeButtonClick;    				// make sure the buttons are the same size even when localized  				if (leaveEditModeButton.Width < enterEditModeButton.Width)  				{  					editButtonFactory.FixedWidth = enterEditModeButton.Width;  					leaveEditModeButton = editButtonFactory.Generate("Done".Localize()' centerText: true);  					leaveEditModeButton.Click += leaveEditModeButtonClick;  				}  				else  				{  					editButtonFactory.FixedWidth = leaveEditModeButton.Width;  					enterEditModeButton = editButtonFactory.Generate("Edit".Localize()' centerText: true);  					enterEditModeButton.Name = "Queue Edit Button";  					enterEditModeButton.Click += enterEditModeButtonClick;  				}    				multiSelectionMenuItems.Add("Merge".Localize() + "...");    				CreateEditBarButtons();  				leaveEditModeButton.Visible = false;    				FlowLayoutWidget topBarContainer = new FlowLayoutWidget();  				topBarContainer.BackgroundColor = ActiveTheme.Instance.TransparentDarkOverlay;  				topBarContainer.HAnchor = HAnchor.ParentLeftRight;  				topBarContainer.Padding = new BorderDouble(0);    				topBarContainer.AddChild(enterEditModeButton);    				topBarContainer.AddChild(leaveEditModeButton);  				topBarContainer.AddChild(new HorizontalSpacer());  				topBarContainer.AddChild(itemOperationButtons);    				// put in the item edit menu  				{  					moreMenu = new DropDownMenu("More".Localize() + "... ");  					moreMenu.NormalColor = new RGBA_Bytes();  					moreMenu.BorderWidth = (int)(1 * GuiWidget.DeviceScale + .5);  					moreMenu.BorderColor = new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor'100);  					moreMenu.MenuAsWideAsItems = false;  					moreMenu.VAnchor = VAnchor.ParentBottomTop;  					moreMenu.Margin = new BorderDouble(3' 3);  					moreMenu.AlignToRightEdge = true;    					topBarContainer.AddChild(moreMenu);  					SetMenuItems(moreMenu);  					moreMenu.SelectionChanged += new EventHandler(ItemMenu_SelectionChanged);  				}    				allControls.AddChild(topBarContainer);    				{  					// Ensure the form opens with no rows selected.  					//ActiveQueueList.Instance.ClearSelected();    					allControls.AddChild(queueDataView);  				}    				FlowLayoutWidget buttonPanel1 = new FlowLayoutWidget();  				buttonPanel1.HAnchor = HAnchor.ParentLeftRight;  				buttonPanel1.Padding = new BorderDouble(0' 3);  				buttonPanel1.MinimumSize = new Vector2(0' 46);  				{  					addToQueueButton = textImageButtonFactory.Generate("Add".Localize()' StaticData.Instance.LoadIcon("icon_plus.png"' 32' 32));  					addToQueueButton.ToolTipText = "Add an .stl' .amf' .gcode or .zip file to the Queue".Localize();  					buttonPanel1.AddChild(addToQueueButton);  					addToQueueButton.Margin = new BorderDouble(0' 0' 3' 0);  					addToQueueButton.Click += addToQueueButton_Click;  					addToQueueButton.Name = "Queue Add Button";    					// put in the creator button  					{  						createButton = textImageButtonFactory.Generate("Create".Localize()' StaticData.Instance.LoadIcon("icon_creator.png"' 32' 32));  						createButton.ToolTipText = "Choose a Create Tool to generate custom designs".Localize();  						createButton.Name = "Design Tool Button";  						buttonPanel1.AddChild(createButton);  						createButton.Margin = new BorderDouble(0' 0' 3' 0);  						createButton.Click += (sender' e) =>  						{  							OpenPluginChooserWindow();  						};  					}    					bool touchScreenMode = UserSettings.Instance.IsTouchScreen;    					if (OemSettings.Instance.ShowShopButton)  					{  						shopButton = textImageButtonFactory.Generate("Buy Materials".Localize()' StaticData.Instance.LoadIcon("icon_shopping_cart_32x32.png"' 32'32));  						shopButton.ToolTipText = "Shop online for printing materials".Localize();  						shopButton.Name = "Buy Materials Button";  						buttonPanel1.AddChild(shopButton);  						shopButton.Margin = new BorderDouble(0' 0' 3' 0);  						shopButton.Click += (sender' e) =>  						{  							double activeFilamentDiameter = 0;  							if (ActiveSliceSettings.Instance.PrinterSelected)  							{  								activeFilamentDiameter = 3;  								if (ActiveSliceSettings.Instance.GetValue<double>(SettingsKey.filament_diameter) < 2)  								{  									activeFilamentDiameter = 1.75;  								}  							}    							MatterControlApplication.Instance.LaunchBrowser("http://www.matterhackers.com/mc/store/redirect?d={0}&clk=mcs&a={1}".FormatWith(activeFilamentDiameter' OemSettings.Instance.AffiliateCode));  							};  						}      					buttonPanel1.AddChild(new HorizontalSpacer());    					queueMenuContainer = new FlowLayoutWidget();  					queueMenuContainer.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  					queueMenu = new QueueOptionsMenu();  					queueMenuContainer.AddChild(queueMenu.MenuDropList);  					buttonPanel1.AddChild(queueMenuContainer);  				}  				allControls.AddChild(buttonPanel1);  			}
Magic Number,MatterHackers.MatterControl.PrintQueue,QueueDataWidget,C:\repos\MatterHackers_MatterControl\Queue\QueueDataWidget.cs,QueueDataWidget,The following statement contains a magic number: {  				enterEditModeButton = editButtonFactory.Generate("Edit".Localize()' centerText: true);  				enterEditModeButton.ToolTipText = "Enter Multi Select mode".Localize();  				enterEditModeButton.Click += enterEditModeButtonClick;    				leaveEditModeButton = editButtonFactory.Generate("Done".Localize()' centerText: true);  				leaveEditModeButton.Name = "Queue Done Button";  				leaveEditModeButton.Click += leaveEditModeButtonClick;    				// make sure the buttons are the same size even when localized  				if (leaveEditModeButton.Width < enterEditModeButton.Width)  				{  					editButtonFactory.FixedWidth = enterEditModeButton.Width;  					leaveEditModeButton = editButtonFactory.Generate("Done".Localize()' centerText: true);  					leaveEditModeButton.Click += leaveEditModeButtonClick;  				}  				else  				{  					editButtonFactory.FixedWidth = leaveEditModeButton.Width;  					enterEditModeButton = editButtonFactory.Generate("Edit".Localize()' centerText: true);  					enterEditModeButton.Name = "Queue Edit Button";  					enterEditModeButton.Click += enterEditModeButtonClick;  				}    				multiSelectionMenuItems.Add("Merge".Localize() + "...");    				CreateEditBarButtons();  				leaveEditModeButton.Visible = false;    				FlowLayoutWidget topBarContainer = new FlowLayoutWidget();  				topBarContainer.BackgroundColor = ActiveTheme.Instance.TransparentDarkOverlay;  				topBarContainer.HAnchor = HAnchor.ParentLeftRight;  				topBarContainer.Padding = new BorderDouble(0);    				topBarContainer.AddChild(enterEditModeButton);    				topBarContainer.AddChild(leaveEditModeButton);  				topBarContainer.AddChild(new HorizontalSpacer());  				topBarContainer.AddChild(itemOperationButtons);    				// put in the item edit menu  				{  					moreMenu = new DropDownMenu("More".Localize() + "... ");  					moreMenu.NormalColor = new RGBA_Bytes();  					moreMenu.BorderWidth = (int)(1 * GuiWidget.DeviceScale + .5);  					moreMenu.BorderColor = new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor'100);  					moreMenu.MenuAsWideAsItems = false;  					moreMenu.VAnchor = VAnchor.ParentBottomTop;  					moreMenu.Margin = new BorderDouble(3' 3);  					moreMenu.AlignToRightEdge = true;    					topBarContainer.AddChild(moreMenu);  					SetMenuItems(moreMenu);  					moreMenu.SelectionChanged += new EventHandler(ItemMenu_SelectionChanged);  				}    				allControls.AddChild(topBarContainer);    				{  					// Ensure the form opens with no rows selected.  					//ActiveQueueList.Instance.ClearSelected();    					allControls.AddChild(queueDataView);  				}    				FlowLayoutWidget buttonPanel1 = new FlowLayoutWidget();  				buttonPanel1.HAnchor = HAnchor.ParentLeftRight;  				buttonPanel1.Padding = new BorderDouble(0' 3);  				buttonPanel1.MinimumSize = new Vector2(0' 46);  				{  					addToQueueButton = textImageButtonFactory.Generate("Add".Localize()' StaticData.Instance.LoadIcon("icon_plus.png"' 32' 32));  					addToQueueButton.ToolTipText = "Add an .stl' .amf' .gcode or .zip file to the Queue".Localize();  					buttonPanel1.AddChild(addToQueueButton);  					addToQueueButton.Margin = new BorderDouble(0' 0' 3' 0);  					addToQueueButton.Click += addToQueueButton_Click;  					addToQueueButton.Name = "Queue Add Button";    					// put in the creator button  					{  						createButton = textImageButtonFactory.Generate("Create".Localize()' StaticData.Instance.LoadIcon("icon_creator.png"' 32' 32));  						createButton.ToolTipText = "Choose a Create Tool to generate custom designs".Localize();  						createButton.Name = "Design Tool Button";  						buttonPanel1.AddChild(createButton);  						createButton.Margin = new BorderDouble(0' 0' 3' 0);  						createButton.Click += (sender' e) =>  						{  							OpenPluginChooserWindow();  						};  					}    					bool touchScreenMode = UserSettings.Instance.IsTouchScreen;    					if (OemSettings.Instance.ShowShopButton)  					{  						shopButton = textImageButtonFactory.Generate("Buy Materials".Localize()' StaticData.Instance.LoadIcon("icon_shopping_cart_32x32.png"' 32'32));  						shopButton.ToolTipText = "Shop online for printing materials".Localize();  						shopButton.Name = "Buy Materials Button";  						buttonPanel1.AddChild(shopButton);  						shopButton.Margin = new BorderDouble(0' 0' 3' 0);  						shopButton.Click += (sender' e) =>  						{  							double activeFilamentDiameter = 0;  							if (ActiveSliceSettings.Instance.PrinterSelected)  							{  								activeFilamentDiameter = 3;  								if (ActiveSliceSettings.Instance.GetValue<double>(SettingsKey.filament_diameter) < 2)  								{  									activeFilamentDiameter = 1.75;  								}  							}    							MatterControlApplication.Instance.LaunchBrowser("http://www.matterhackers.com/mc/store/redirect?d={0}&clk=mcs&a={1}".FormatWith(activeFilamentDiameter' OemSettings.Instance.AffiliateCode));  							};  						}      					buttonPanel1.AddChild(new HorizontalSpacer());    					queueMenuContainer = new FlowLayoutWidget();  					queueMenuContainer.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  					queueMenu = new QueueOptionsMenu();  					queueMenuContainer.AddChild(queueMenu.MenuDropList);  					buttonPanel1.AddChild(queueMenuContainer);  				}  				allControls.AddChild(buttonPanel1);  			}
Magic Number,MatterHackers.MatterControl.PrintQueue,QueueDataWidget,C:\repos\MatterHackers_MatterControl\Queue\QueueDataWidget.cs,QueueDataWidget,The following statement contains a magic number: {  				enterEditModeButton = editButtonFactory.Generate("Edit".Localize()' centerText: true);  				enterEditModeButton.ToolTipText = "Enter Multi Select mode".Localize();  				enterEditModeButton.Click += enterEditModeButtonClick;    				leaveEditModeButton = editButtonFactory.Generate("Done".Localize()' centerText: true);  				leaveEditModeButton.Name = "Queue Done Button";  				leaveEditModeButton.Click += leaveEditModeButtonClick;    				// make sure the buttons are the same size even when localized  				if (leaveEditModeButton.Width < enterEditModeButton.Width)  				{  					editButtonFactory.FixedWidth = enterEditModeButton.Width;  					leaveEditModeButton = editButtonFactory.Generate("Done".Localize()' centerText: true);  					leaveEditModeButton.Click += leaveEditModeButtonClick;  				}  				else  				{  					editButtonFactory.FixedWidth = leaveEditModeButton.Width;  					enterEditModeButton = editButtonFactory.Generate("Edit".Localize()' centerText: true);  					enterEditModeButton.Name = "Queue Edit Button";  					enterEditModeButton.Click += enterEditModeButtonClick;  				}    				multiSelectionMenuItems.Add("Merge".Localize() + "...");    				CreateEditBarButtons();  				leaveEditModeButton.Visible = false;    				FlowLayoutWidget topBarContainer = new FlowLayoutWidget();  				topBarContainer.BackgroundColor = ActiveTheme.Instance.TransparentDarkOverlay;  				topBarContainer.HAnchor = HAnchor.ParentLeftRight;  				topBarContainer.Padding = new BorderDouble(0);    				topBarContainer.AddChild(enterEditModeButton);    				topBarContainer.AddChild(leaveEditModeButton);  				topBarContainer.AddChild(new HorizontalSpacer());  				topBarContainer.AddChild(itemOperationButtons);    				// put in the item edit menu  				{  					moreMenu = new DropDownMenu("More".Localize() + "... ");  					moreMenu.NormalColor = new RGBA_Bytes();  					moreMenu.BorderWidth = (int)(1 * GuiWidget.DeviceScale + .5);  					moreMenu.BorderColor = new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor'100);  					moreMenu.MenuAsWideAsItems = false;  					moreMenu.VAnchor = VAnchor.ParentBottomTop;  					moreMenu.Margin = new BorderDouble(3' 3);  					moreMenu.AlignToRightEdge = true;    					topBarContainer.AddChild(moreMenu);  					SetMenuItems(moreMenu);  					moreMenu.SelectionChanged += new EventHandler(ItemMenu_SelectionChanged);  				}    				allControls.AddChild(topBarContainer);    				{  					// Ensure the form opens with no rows selected.  					//ActiveQueueList.Instance.ClearSelected();    					allControls.AddChild(queueDataView);  				}    				FlowLayoutWidget buttonPanel1 = new FlowLayoutWidget();  				buttonPanel1.HAnchor = HAnchor.ParentLeftRight;  				buttonPanel1.Padding = new BorderDouble(0' 3);  				buttonPanel1.MinimumSize = new Vector2(0' 46);  				{  					addToQueueButton = textImageButtonFactory.Generate("Add".Localize()' StaticData.Instance.LoadIcon("icon_plus.png"' 32' 32));  					addToQueueButton.ToolTipText = "Add an .stl' .amf' .gcode or .zip file to the Queue".Localize();  					buttonPanel1.AddChild(addToQueueButton);  					addToQueueButton.Margin = new BorderDouble(0' 0' 3' 0);  					addToQueueButton.Click += addToQueueButton_Click;  					addToQueueButton.Name = "Queue Add Button";    					// put in the creator button  					{  						createButton = textImageButtonFactory.Generate("Create".Localize()' StaticData.Instance.LoadIcon("icon_creator.png"' 32' 32));  						createButton.ToolTipText = "Choose a Create Tool to generate custom designs".Localize();  						createButton.Name = "Design Tool Button";  						buttonPanel1.AddChild(createButton);  						createButton.Margin = new BorderDouble(0' 0' 3' 0);  						createButton.Click += (sender' e) =>  						{  							OpenPluginChooserWindow();  						};  					}    					bool touchScreenMode = UserSettings.Instance.IsTouchScreen;    					if (OemSettings.Instance.ShowShopButton)  					{  						shopButton = textImageButtonFactory.Generate("Buy Materials".Localize()' StaticData.Instance.LoadIcon("icon_shopping_cart_32x32.png"' 32'32));  						shopButton.ToolTipText = "Shop online for printing materials".Localize();  						shopButton.Name = "Buy Materials Button";  						buttonPanel1.AddChild(shopButton);  						shopButton.Margin = new BorderDouble(0' 0' 3' 0);  						shopButton.Click += (sender' e) =>  						{  							double activeFilamentDiameter = 0;  							if (ActiveSliceSettings.Instance.PrinterSelected)  							{  								activeFilamentDiameter = 3;  								if (ActiveSliceSettings.Instance.GetValue<double>(SettingsKey.filament_diameter) < 2)  								{  									activeFilamentDiameter = 1.75;  								}  							}    							MatterControlApplication.Instance.LaunchBrowser("http://www.matterhackers.com/mc/store/redirect?d={0}&clk=mcs&a={1}".FormatWith(activeFilamentDiameter' OemSettings.Instance.AffiliateCode));  							};  						}      					buttonPanel1.AddChild(new HorizontalSpacer());    					queueMenuContainer = new FlowLayoutWidget();  					queueMenuContainer.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  					queueMenu = new QueueOptionsMenu();  					queueMenuContainer.AddChild(queueMenu.MenuDropList);  					buttonPanel1.AddChild(queueMenuContainer);  				}  				allControls.AddChild(buttonPanel1);  			}
Magic Number,MatterHackers.MatterControl.PrintQueue,QueueDataWidget,C:\repos\MatterHackers_MatterControl\Queue\QueueDataWidget.cs,QueueDataWidget,The following statement contains a magic number: {  				enterEditModeButton = editButtonFactory.Generate("Edit".Localize()' centerText: true);  				enterEditModeButton.ToolTipText = "Enter Multi Select mode".Localize();  				enterEditModeButton.Click += enterEditModeButtonClick;    				leaveEditModeButton = editButtonFactory.Generate("Done".Localize()' centerText: true);  				leaveEditModeButton.Name = "Queue Done Button";  				leaveEditModeButton.Click += leaveEditModeButtonClick;    				// make sure the buttons are the same size even when localized  				if (leaveEditModeButton.Width < enterEditModeButton.Width)  				{  					editButtonFactory.FixedWidth = enterEditModeButton.Width;  					leaveEditModeButton = editButtonFactory.Generate("Done".Localize()' centerText: true);  					leaveEditModeButton.Click += leaveEditModeButtonClick;  				}  				else  				{  					editButtonFactory.FixedWidth = leaveEditModeButton.Width;  					enterEditModeButton = editButtonFactory.Generate("Edit".Localize()' centerText: true);  					enterEditModeButton.Name = "Queue Edit Button";  					enterEditModeButton.Click += enterEditModeButtonClick;  				}    				multiSelectionMenuItems.Add("Merge".Localize() + "...");    				CreateEditBarButtons();  				leaveEditModeButton.Visible = false;    				FlowLayoutWidget topBarContainer = new FlowLayoutWidget();  				topBarContainer.BackgroundColor = ActiveTheme.Instance.TransparentDarkOverlay;  				topBarContainer.HAnchor = HAnchor.ParentLeftRight;  				topBarContainer.Padding = new BorderDouble(0);    				topBarContainer.AddChild(enterEditModeButton);    				topBarContainer.AddChild(leaveEditModeButton);  				topBarContainer.AddChild(new HorizontalSpacer());  				topBarContainer.AddChild(itemOperationButtons);    				// put in the item edit menu  				{  					moreMenu = new DropDownMenu("More".Localize() + "... ");  					moreMenu.NormalColor = new RGBA_Bytes();  					moreMenu.BorderWidth = (int)(1 * GuiWidget.DeviceScale + .5);  					moreMenu.BorderColor = new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor'100);  					moreMenu.MenuAsWideAsItems = false;  					moreMenu.VAnchor = VAnchor.ParentBottomTop;  					moreMenu.Margin = new BorderDouble(3' 3);  					moreMenu.AlignToRightEdge = true;    					topBarContainer.AddChild(moreMenu);  					SetMenuItems(moreMenu);  					moreMenu.SelectionChanged += new EventHandler(ItemMenu_SelectionChanged);  				}    				allControls.AddChild(topBarContainer);    				{  					// Ensure the form opens with no rows selected.  					//ActiveQueueList.Instance.ClearSelected();    					allControls.AddChild(queueDataView);  				}    				FlowLayoutWidget buttonPanel1 = new FlowLayoutWidget();  				buttonPanel1.HAnchor = HAnchor.ParentLeftRight;  				buttonPanel1.Padding = new BorderDouble(0' 3);  				buttonPanel1.MinimumSize = new Vector2(0' 46);  				{  					addToQueueButton = textImageButtonFactory.Generate("Add".Localize()' StaticData.Instance.LoadIcon("icon_plus.png"' 32' 32));  					addToQueueButton.ToolTipText = "Add an .stl' .amf' .gcode or .zip file to the Queue".Localize();  					buttonPanel1.AddChild(addToQueueButton);  					addToQueueButton.Margin = new BorderDouble(0' 0' 3' 0);  					addToQueueButton.Click += addToQueueButton_Click;  					addToQueueButton.Name = "Queue Add Button";    					// put in the creator button  					{  						createButton = textImageButtonFactory.Generate("Create".Localize()' StaticData.Instance.LoadIcon("icon_creator.png"' 32' 32));  						createButton.ToolTipText = "Choose a Create Tool to generate custom designs".Localize();  						createButton.Name = "Design Tool Button";  						buttonPanel1.AddChild(createButton);  						createButton.Margin = new BorderDouble(0' 0' 3' 0);  						createButton.Click += (sender' e) =>  						{  							OpenPluginChooserWindow();  						};  					}    					bool touchScreenMode = UserSettings.Instance.IsTouchScreen;    					if (OemSettings.Instance.ShowShopButton)  					{  						shopButton = textImageButtonFactory.Generate("Buy Materials".Localize()' StaticData.Instance.LoadIcon("icon_shopping_cart_32x32.png"' 32'32));  						shopButton.ToolTipText = "Shop online for printing materials".Localize();  						shopButton.Name = "Buy Materials Button";  						buttonPanel1.AddChild(shopButton);  						shopButton.Margin = new BorderDouble(0' 0' 3' 0);  						shopButton.Click += (sender' e) =>  						{  							double activeFilamentDiameter = 0;  							if (ActiveSliceSettings.Instance.PrinterSelected)  							{  								activeFilamentDiameter = 3;  								if (ActiveSliceSettings.Instance.GetValue<double>(SettingsKey.filament_diameter) < 2)  								{  									activeFilamentDiameter = 1.75;  								}  							}    							MatterControlApplication.Instance.LaunchBrowser("http://www.matterhackers.com/mc/store/redirect?d={0}&clk=mcs&a={1}".FormatWith(activeFilamentDiameter' OemSettings.Instance.AffiliateCode));  							};  						}      					buttonPanel1.AddChild(new HorizontalSpacer());    					queueMenuContainer = new FlowLayoutWidget();  					queueMenuContainer.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  					queueMenu = new QueueOptionsMenu();  					queueMenuContainer.AddChild(queueMenu.MenuDropList);  					buttonPanel1.AddChild(queueMenuContainer);  				}  				allControls.AddChild(buttonPanel1);  			}
Magic Number,MatterHackers.MatterControl.PrintQueue,QueueDataWidget,C:\repos\MatterHackers_MatterControl\Queue\QueueDataWidget.cs,QueueDataWidget,The following statement contains a magic number: {  				enterEditModeButton = editButtonFactory.Generate("Edit".Localize()' centerText: true);  				enterEditModeButton.ToolTipText = "Enter Multi Select mode".Localize();  				enterEditModeButton.Click += enterEditModeButtonClick;    				leaveEditModeButton = editButtonFactory.Generate("Done".Localize()' centerText: true);  				leaveEditModeButton.Name = "Queue Done Button";  				leaveEditModeButton.Click += leaveEditModeButtonClick;    				// make sure the buttons are the same size even when localized  				if (leaveEditModeButton.Width < enterEditModeButton.Width)  				{  					editButtonFactory.FixedWidth = enterEditModeButton.Width;  					leaveEditModeButton = editButtonFactory.Generate("Done".Localize()' centerText: true);  					leaveEditModeButton.Click += leaveEditModeButtonClick;  				}  				else  				{  					editButtonFactory.FixedWidth = leaveEditModeButton.Width;  					enterEditModeButton = editButtonFactory.Generate("Edit".Localize()' centerText: true);  					enterEditModeButton.Name = "Queue Edit Button";  					enterEditModeButton.Click += enterEditModeButtonClick;  				}    				multiSelectionMenuItems.Add("Merge".Localize() + "...");    				CreateEditBarButtons();  				leaveEditModeButton.Visible = false;    				FlowLayoutWidget topBarContainer = new FlowLayoutWidget();  				topBarContainer.BackgroundColor = ActiveTheme.Instance.TransparentDarkOverlay;  				topBarContainer.HAnchor = HAnchor.ParentLeftRight;  				topBarContainer.Padding = new BorderDouble(0);    				topBarContainer.AddChild(enterEditModeButton);    				topBarContainer.AddChild(leaveEditModeButton);  				topBarContainer.AddChild(new HorizontalSpacer());  				topBarContainer.AddChild(itemOperationButtons);    				// put in the item edit menu  				{  					moreMenu = new DropDownMenu("More".Localize() + "... ");  					moreMenu.NormalColor = new RGBA_Bytes();  					moreMenu.BorderWidth = (int)(1 * GuiWidget.DeviceScale + .5);  					moreMenu.BorderColor = new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor'100);  					moreMenu.MenuAsWideAsItems = false;  					moreMenu.VAnchor = VAnchor.ParentBottomTop;  					moreMenu.Margin = new BorderDouble(3' 3);  					moreMenu.AlignToRightEdge = true;    					topBarContainer.AddChild(moreMenu);  					SetMenuItems(moreMenu);  					moreMenu.SelectionChanged += new EventHandler(ItemMenu_SelectionChanged);  				}    				allControls.AddChild(topBarContainer);    				{  					// Ensure the form opens with no rows selected.  					//ActiveQueueList.Instance.ClearSelected();    					allControls.AddChild(queueDataView);  				}    				FlowLayoutWidget buttonPanel1 = new FlowLayoutWidget();  				buttonPanel1.HAnchor = HAnchor.ParentLeftRight;  				buttonPanel1.Padding = new BorderDouble(0' 3);  				buttonPanel1.MinimumSize = new Vector2(0' 46);  				{  					addToQueueButton = textImageButtonFactory.Generate("Add".Localize()' StaticData.Instance.LoadIcon("icon_plus.png"' 32' 32));  					addToQueueButton.ToolTipText = "Add an .stl' .amf' .gcode or .zip file to the Queue".Localize();  					buttonPanel1.AddChild(addToQueueButton);  					addToQueueButton.Margin = new BorderDouble(0' 0' 3' 0);  					addToQueueButton.Click += addToQueueButton_Click;  					addToQueueButton.Name = "Queue Add Button";    					// put in the creator button  					{  						createButton = textImageButtonFactory.Generate("Create".Localize()' StaticData.Instance.LoadIcon("icon_creator.png"' 32' 32));  						createButton.ToolTipText = "Choose a Create Tool to generate custom designs".Localize();  						createButton.Name = "Design Tool Button";  						buttonPanel1.AddChild(createButton);  						createButton.Margin = new BorderDouble(0' 0' 3' 0);  						createButton.Click += (sender' e) =>  						{  							OpenPluginChooserWindow();  						};  					}    					bool touchScreenMode = UserSettings.Instance.IsTouchScreen;    					if (OemSettings.Instance.ShowShopButton)  					{  						shopButton = textImageButtonFactory.Generate("Buy Materials".Localize()' StaticData.Instance.LoadIcon("icon_shopping_cart_32x32.png"' 32'32));  						shopButton.ToolTipText = "Shop online for printing materials".Localize();  						shopButton.Name = "Buy Materials Button";  						buttonPanel1.AddChild(shopButton);  						shopButton.Margin = new BorderDouble(0' 0' 3' 0);  						shopButton.Click += (sender' e) =>  						{  							double activeFilamentDiameter = 0;  							if (ActiveSliceSettings.Instance.PrinterSelected)  							{  								activeFilamentDiameter = 3;  								if (ActiveSliceSettings.Instance.GetValue<double>(SettingsKey.filament_diameter) < 2)  								{  									activeFilamentDiameter = 1.75;  								}  							}    							MatterControlApplication.Instance.LaunchBrowser("http://www.matterhackers.com/mc/store/redirect?d={0}&clk=mcs&a={1}".FormatWith(activeFilamentDiameter' OemSettings.Instance.AffiliateCode));  							};  						}      					buttonPanel1.AddChild(new HorizontalSpacer());    					queueMenuContainer = new FlowLayoutWidget();  					queueMenuContainer.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  					queueMenu = new QueueOptionsMenu();  					queueMenuContainer.AddChild(queueMenu.MenuDropList);  					buttonPanel1.AddChild(queueMenuContainer);  				}  				allControls.AddChild(buttonPanel1);  			}
Magic Number,MatterHackers.MatterControl.PrintQueue,QueueDataWidget,C:\repos\MatterHackers_MatterControl\Queue\QueueDataWidget.cs,QueueDataWidget,The following statement contains a magic number: {  				enterEditModeButton = editButtonFactory.Generate("Edit".Localize()' centerText: true);  				enterEditModeButton.ToolTipText = "Enter Multi Select mode".Localize();  				enterEditModeButton.Click += enterEditModeButtonClick;    				leaveEditModeButton = editButtonFactory.Generate("Done".Localize()' centerText: true);  				leaveEditModeButton.Name = "Queue Done Button";  				leaveEditModeButton.Click += leaveEditModeButtonClick;    				// make sure the buttons are the same size even when localized  				if (leaveEditModeButton.Width < enterEditModeButton.Width)  				{  					editButtonFactory.FixedWidth = enterEditModeButton.Width;  					leaveEditModeButton = editButtonFactory.Generate("Done".Localize()' centerText: true);  					leaveEditModeButton.Click += leaveEditModeButtonClick;  				}  				else  				{  					editButtonFactory.FixedWidth = leaveEditModeButton.Width;  					enterEditModeButton = editButtonFactory.Generate("Edit".Localize()' centerText: true);  					enterEditModeButton.Name = "Queue Edit Button";  					enterEditModeButton.Click += enterEditModeButtonClick;  				}    				multiSelectionMenuItems.Add("Merge".Localize() + "...");    				CreateEditBarButtons();  				leaveEditModeButton.Visible = false;    				FlowLayoutWidget topBarContainer = new FlowLayoutWidget();  				topBarContainer.BackgroundColor = ActiveTheme.Instance.TransparentDarkOverlay;  				topBarContainer.HAnchor = HAnchor.ParentLeftRight;  				topBarContainer.Padding = new BorderDouble(0);    				topBarContainer.AddChild(enterEditModeButton);    				topBarContainer.AddChild(leaveEditModeButton);  				topBarContainer.AddChild(new HorizontalSpacer());  				topBarContainer.AddChild(itemOperationButtons);    				// put in the item edit menu  				{  					moreMenu = new DropDownMenu("More".Localize() + "... ");  					moreMenu.NormalColor = new RGBA_Bytes();  					moreMenu.BorderWidth = (int)(1 * GuiWidget.DeviceScale + .5);  					moreMenu.BorderColor = new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor'100);  					moreMenu.MenuAsWideAsItems = false;  					moreMenu.VAnchor = VAnchor.ParentBottomTop;  					moreMenu.Margin = new BorderDouble(3' 3);  					moreMenu.AlignToRightEdge = true;    					topBarContainer.AddChild(moreMenu);  					SetMenuItems(moreMenu);  					moreMenu.SelectionChanged += new EventHandler(ItemMenu_SelectionChanged);  				}    				allControls.AddChild(topBarContainer);    				{  					// Ensure the form opens with no rows selected.  					//ActiveQueueList.Instance.ClearSelected();    					allControls.AddChild(queueDataView);  				}    				FlowLayoutWidget buttonPanel1 = new FlowLayoutWidget();  				buttonPanel1.HAnchor = HAnchor.ParentLeftRight;  				buttonPanel1.Padding = new BorderDouble(0' 3);  				buttonPanel1.MinimumSize = new Vector2(0' 46);  				{  					addToQueueButton = textImageButtonFactory.Generate("Add".Localize()' StaticData.Instance.LoadIcon("icon_plus.png"' 32' 32));  					addToQueueButton.ToolTipText = "Add an .stl' .amf' .gcode or .zip file to the Queue".Localize();  					buttonPanel1.AddChild(addToQueueButton);  					addToQueueButton.Margin = new BorderDouble(0' 0' 3' 0);  					addToQueueButton.Click += addToQueueButton_Click;  					addToQueueButton.Name = "Queue Add Button";    					// put in the creator button  					{  						createButton = textImageButtonFactory.Generate("Create".Localize()' StaticData.Instance.LoadIcon("icon_creator.png"' 32' 32));  						createButton.ToolTipText = "Choose a Create Tool to generate custom designs".Localize();  						createButton.Name = "Design Tool Button";  						buttonPanel1.AddChild(createButton);  						createButton.Margin = new BorderDouble(0' 0' 3' 0);  						createButton.Click += (sender' e) =>  						{  							OpenPluginChooserWindow();  						};  					}    					bool touchScreenMode = UserSettings.Instance.IsTouchScreen;    					if (OemSettings.Instance.ShowShopButton)  					{  						shopButton = textImageButtonFactory.Generate("Buy Materials".Localize()' StaticData.Instance.LoadIcon("icon_shopping_cart_32x32.png"' 32'32));  						shopButton.ToolTipText = "Shop online for printing materials".Localize();  						shopButton.Name = "Buy Materials Button";  						buttonPanel1.AddChild(shopButton);  						shopButton.Margin = new BorderDouble(0' 0' 3' 0);  						shopButton.Click += (sender' e) =>  						{  							double activeFilamentDiameter = 0;  							if (ActiveSliceSettings.Instance.PrinterSelected)  							{  								activeFilamentDiameter = 3;  								if (ActiveSliceSettings.Instance.GetValue<double>(SettingsKey.filament_diameter) < 2)  								{  									activeFilamentDiameter = 1.75;  								}  							}    							MatterControlApplication.Instance.LaunchBrowser("http://www.matterhackers.com/mc/store/redirect?d={0}&clk=mcs&a={1}".FormatWith(activeFilamentDiameter' OemSettings.Instance.AffiliateCode));  							};  						}      					buttonPanel1.AddChild(new HorizontalSpacer());    					queueMenuContainer = new FlowLayoutWidget();  					queueMenuContainer.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  					queueMenu = new QueueOptionsMenu();  					queueMenuContainer.AddChild(queueMenu.MenuDropList);  					buttonPanel1.AddChild(queueMenuContainer);  				}  				allControls.AddChild(buttonPanel1);  			}
Magic Number,MatterHackers.MatterControl.PrintQueue,QueueDataWidget,C:\repos\MatterHackers_MatterControl\Queue\QueueDataWidget.cs,QueueDataWidget,The following statement contains a magic number: {  				enterEditModeButton = editButtonFactory.Generate("Edit".Localize()' centerText: true);  				enterEditModeButton.ToolTipText = "Enter Multi Select mode".Localize();  				enterEditModeButton.Click += enterEditModeButtonClick;    				leaveEditModeButton = editButtonFactory.Generate("Done".Localize()' centerText: true);  				leaveEditModeButton.Name = "Queue Done Button";  				leaveEditModeButton.Click += leaveEditModeButtonClick;    				// make sure the buttons are the same size even when localized  				if (leaveEditModeButton.Width < enterEditModeButton.Width)  				{  					editButtonFactory.FixedWidth = enterEditModeButton.Width;  					leaveEditModeButton = editButtonFactory.Generate("Done".Localize()' centerText: true);  					leaveEditModeButton.Click += leaveEditModeButtonClick;  				}  				else  				{  					editButtonFactory.FixedWidth = leaveEditModeButton.Width;  					enterEditModeButton = editButtonFactory.Generate("Edit".Localize()' centerText: true);  					enterEditModeButton.Name = "Queue Edit Button";  					enterEditModeButton.Click += enterEditModeButtonClick;  				}    				multiSelectionMenuItems.Add("Merge".Localize() + "...");    				CreateEditBarButtons();  				leaveEditModeButton.Visible = false;    				FlowLayoutWidget topBarContainer = new FlowLayoutWidget();  				topBarContainer.BackgroundColor = ActiveTheme.Instance.TransparentDarkOverlay;  				topBarContainer.HAnchor = HAnchor.ParentLeftRight;  				topBarContainer.Padding = new BorderDouble(0);    				topBarContainer.AddChild(enterEditModeButton);    				topBarContainer.AddChild(leaveEditModeButton);  				topBarContainer.AddChild(new HorizontalSpacer());  				topBarContainer.AddChild(itemOperationButtons);    				// put in the item edit menu  				{  					moreMenu = new DropDownMenu("More".Localize() + "... ");  					moreMenu.NormalColor = new RGBA_Bytes();  					moreMenu.BorderWidth = (int)(1 * GuiWidget.DeviceScale + .5);  					moreMenu.BorderColor = new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor'100);  					moreMenu.MenuAsWideAsItems = false;  					moreMenu.VAnchor = VAnchor.ParentBottomTop;  					moreMenu.Margin = new BorderDouble(3' 3);  					moreMenu.AlignToRightEdge = true;    					topBarContainer.AddChild(moreMenu);  					SetMenuItems(moreMenu);  					moreMenu.SelectionChanged += new EventHandler(ItemMenu_SelectionChanged);  				}    				allControls.AddChild(topBarContainer);    				{  					// Ensure the form opens with no rows selected.  					//ActiveQueueList.Instance.ClearSelected();    					allControls.AddChild(queueDataView);  				}    				FlowLayoutWidget buttonPanel1 = new FlowLayoutWidget();  				buttonPanel1.HAnchor = HAnchor.ParentLeftRight;  				buttonPanel1.Padding = new BorderDouble(0' 3);  				buttonPanel1.MinimumSize = new Vector2(0' 46);  				{  					addToQueueButton = textImageButtonFactory.Generate("Add".Localize()' StaticData.Instance.LoadIcon("icon_plus.png"' 32' 32));  					addToQueueButton.ToolTipText = "Add an .stl' .amf' .gcode or .zip file to the Queue".Localize();  					buttonPanel1.AddChild(addToQueueButton);  					addToQueueButton.Margin = new BorderDouble(0' 0' 3' 0);  					addToQueueButton.Click += addToQueueButton_Click;  					addToQueueButton.Name = "Queue Add Button";    					// put in the creator button  					{  						createButton = textImageButtonFactory.Generate("Create".Localize()' StaticData.Instance.LoadIcon("icon_creator.png"' 32' 32));  						createButton.ToolTipText = "Choose a Create Tool to generate custom designs".Localize();  						createButton.Name = "Design Tool Button";  						buttonPanel1.AddChild(createButton);  						createButton.Margin = new BorderDouble(0' 0' 3' 0);  						createButton.Click += (sender' e) =>  						{  							OpenPluginChooserWindow();  						};  					}    					bool touchScreenMode = UserSettings.Instance.IsTouchScreen;    					if (OemSettings.Instance.ShowShopButton)  					{  						shopButton = textImageButtonFactory.Generate("Buy Materials".Localize()' StaticData.Instance.LoadIcon("icon_shopping_cart_32x32.png"' 32'32));  						shopButton.ToolTipText = "Shop online for printing materials".Localize();  						shopButton.Name = "Buy Materials Button";  						buttonPanel1.AddChild(shopButton);  						shopButton.Margin = new BorderDouble(0' 0' 3' 0);  						shopButton.Click += (sender' e) =>  						{  							double activeFilamentDiameter = 0;  							if (ActiveSliceSettings.Instance.PrinterSelected)  							{  								activeFilamentDiameter = 3;  								if (ActiveSliceSettings.Instance.GetValue<double>(SettingsKey.filament_diameter) < 2)  								{  									activeFilamentDiameter = 1.75;  								}  							}    							MatterControlApplication.Instance.LaunchBrowser("http://www.matterhackers.com/mc/store/redirect?d={0}&clk=mcs&a={1}".FormatWith(activeFilamentDiameter' OemSettings.Instance.AffiliateCode));  							};  						}      					buttonPanel1.AddChild(new HorizontalSpacer());    					queueMenuContainer = new FlowLayoutWidget();  					queueMenuContainer.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  					queueMenu = new QueueOptionsMenu();  					queueMenuContainer.AddChild(queueMenu.MenuDropList);  					buttonPanel1.AddChild(queueMenuContainer);  				}  				allControls.AddChild(buttonPanel1);  			}
Magic Number,MatterHackers.MatterControl.PrintQueue,QueueDataWidget,C:\repos\MatterHackers_MatterControl\Queue\QueueDataWidget.cs,QueueDataWidget,The following statement contains a magic number: {  				enterEditModeButton = editButtonFactory.Generate("Edit".Localize()' centerText: true);  				enterEditModeButton.ToolTipText = "Enter Multi Select mode".Localize();  				enterEditModeButton.Click += enterEditModeButtonClick;    				leaveEditModeButton = editButtonFactory.Generate("Done".Localize()' centerText: true);  				leaveEditModeButton.Name = "Queue Done Button";  				leaveEditModeButton.Click += leaveEditModeButtonClick;    				// make sure the buttons are the same size even when localized  				if (leaveEditModeButton.Width < enterEditModeButton.Width)  				{  					editButtonFactory.FixedWidth = enterEditModeButton.Width;  					leaveEditModeButton = editButtonFactory.Generate("Done".Localize()' centerText: true);  					leaveEditModeButton.Click += leaveEditModeButtonClick;  				}  				else  				{  					editButtonFactory.FixedWidth = leaveEditModeButton.Width;  					enterEditModeButton = editButtonFactory.Generate("Edit".Localize()' centerText: true);  					enterEditModeButton.Name = "Queue Edit Button";  					enterEditModeButton.Click += enterEditModeButtonClick;  				}    				multiSelectionMenuItems.Add("Merge".Localize() + "...");    				CreateEditBarButtons();  				leaveEditModeButton.Visible = false;    				FlowLayoutWidget topBarContainer = new FlowLayoutWidget();  				topBarContainer.BackgroundColor = ActiveTheme.Instance.TransparentDarkOverlay;  				topBarContainer.HAnchor = HAnchor.ParentLeftRight;  				topBarContainer.Padding = new BorderDouble(0);    				topBarContainer.AddChild(enterEditModeButton);    				topBarContainer.AddChild(leaveEditModeButton);  				topBarContainer.AddChild(new HorizontalSpacer());  				topBarContainer.AddChild(itemOperationButtons);    				// put in the item edit menu  				{  					moreMenu = new DropDownMenu("More".Localize() + "... ");  					moreMenu.NormalColor = new RGBA_Bytes();  					moreMenu.BorderWidth = (int)(1 * GuiWidget.DeviceScale + .5);  					moreMenu.BorderColor = new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor'100);  					moreMenu.MenuAsWideAsItems = false;  					moreMenu.VAnchor = VAnchor.ParentBottomTop;  					moreMenu.Margin = new BorderDouble(3' 3);  					moreMenu.AlignToRightEdge = true;    					topBarContainer.AddChild(moreMenu);  					SetMenuItems(moreMenu);  					moreMenu.SelectionChanged += new EventHandler(ItemMenu_SelectionChanged);  				}    				allControls.AddChild(topBarContainer);    				{  					// Ensure the form opens with no rows selected.  					//ActiveQueueList.Instance.ClearSelected();    					allControls.AddChild(queueDataView);  				}    				FlowLayoutWidget buttonPanel1 = new FlowLayoutWidget();  				buttonPanel1.HAnchor = HAnchor.ParentLeftRight;  				buttonPanel1.Padding = new BorderDouble(0' 3);  				buttonPanel1.MinimumSize = new Vector2(0' 46);  				{  					addToQueueButton = textImageButtonFactory.Generate("Add".Localize()' StaticData.Instance.LoadIcon("icon_plus.png"' 32' 32));  					addToQueueButton.ToolTipText = "Add an .stl' .amf' .gcode or .zip file to the Queue".Localize();  					buttonPanel1.AddChild(addToQueueButton);  					addToQueueButton.Margin = new BorderDouble(0' 0' 3' 0);  					addToQueueButton.Click += addToQueueButton_Click;  					addToQueueButton.Name = "Queue Add Button";    					// put in the creator button  					{  						createButton = textImageButtonFactory.Generate("Create".Localize()' StaticData.Instance.LoadIcon("icon_creator.png"' 32' 32));  						createButton.ToolTipText = "Choose a Create Tool to generate custom designs".Localize();  						createButton.Name = "Design Tool Button";  						buttonPanel1.AddChild(createButton);  						createButton.Margin = new BorderDouble(0' 0' 3' 0);  						createButton.Click += (sender' e) =>  						{  							OpenPluginChooserWindow();  						};  					}    					bool touchScreenMode = UserSettings.Instance.IsTouchScreen;    					if (OemSettings.Instance.ShowShopButton)  					{  						shopButton = textImageButtonFactory.Generate("Buy Materials".Localize()' StaticData.Instance.LoadIcon("icon_shopping_cart_32x32.png"' 32'32));  						shopButton.ToolTipText = "Shop online for printing materials".Localize();  						shopButton.Name = "Buy Materials Button";  						buttonPanel1.AddChild(shopButton);  						shopButton.Margin = new BorderDouble(0' 0' 3' 0);  						shopButton.Click += (sender' e) =>  						{  							double activeFilamentDiameter = 0;  							if (ActiveSliceSettings.Instance.PrinterSelected)  							{  								activeFilamentDiameter = 3;  								if (ActiveSliceSettings.Instance.GetValue<double>(SettingsKey.filament_diameter) < 2)  								{  									activeFilamentDiameter = 1.75;  								}  							}    							MatterControlApplication.Instance.LaunchBrowser("http://www.matterhackers.com/mc/store/redirect?d={0}&clk=mcs&a={1}".FormatWith(activeFilamentDiameter' OemSettings.Instance.AffiliateCode));  							};  						}      					buttonPanel1.AddChild(new HorizontalSpacer());    					queueMenuContainer = new FlowLayoutWidget();  					queueMenuContainer.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  					queueMenu = new QueueOptionsMenu();  					queueMenuContainer.AddChild(queueMenu.MenuDropList);  					buttonPanel1.AddChild(queueMenuContainer);  				}  				allControls.AddChild(buttonPanel1);  			}
Magic Number,MatterHackers.MatterControl.PrintQueue,QueueDataWidget,C:\repos\MatterHackers_MatterControl\Queue\QueueDataWidget.cs,QueueDataWidget,The following statement contains a magic number: {  				enterEditModeButton = editButtonFactory.Generate("Edit".Localize()' centerText: true);  				enterEditModeButton.ToolTipText = "Enter Multi Select mode".Localize();  				enterEditModeButton.Click += enterEditModeButtonClick;    				leaveEditModeButton = editButtonFactory.Generate("Done".Localize()' centerText: true);  				leaveEditModeButton.Name = "Queue Done Button";  				leaveEditModeButton.Click += leaveEditModeButtonClick;    				// make sure the buttons are the same size even when localized  				if (leaveEditModeButton.Width < enterEditModeButton.Width)  				{  					editButtonFactory.FixedWidth = enterEditModeButton.Width;  					leaveEditModeButton = editButtonFactory.Generate("Done".Localize()' centerText: true);  					leaveEditModeButton.Click += leaveEditModeButtonClick;  				}  				else  				{  					editButtonFactory.FixedWidth = leaveEditModeButton.Width;  					enterEditModeButton = editButtonFactory.Generate("Edit".Localize()' centerText: true);  					enterEditModeButton.Name = "Queue Edit Button";  					enterEditModeButton.Click += enterEditModeButtonClick;  				}    				multiSelectionMenuItems.Add("Merge".Localize() + "...");    				CreateEditBarButtons();  				leaveEditModeButton.Visible = false;    				FlowLayoutWidget topBarContainer = new FlowLayoutWidget();  				topBarContainer.BackgroundColor = ActiveTheme.Instance.TransparentDarkOverlay;  				topBarContainer.HAnchor = HAnchor.ParentLeftRight;  				topBarContainer.Padding = new BorderDouble(0);    				topBarContainer.AddChild(enterEditModeButton);    				topBarContainer.AddChild(leaveEditModeButton);  				topBarContainer.AddChild(new HorizontalSpacer());  				topBarContainer.AddChild(itemOperationButtons);    				// put in the item edit menu  				{  					moreMenu = new DropDownMenu("More".Localize() + "... ");  					moreMenu.NormalColor = new RGBA_Bytes();  					moreMenu.BorderWidth = (int)(1 * GuiWidget.DeviceScale + .5);  					moreMenu.BorderColor = new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor'100);  					moreMenu.MenuAsWideAsItems = false;  					moreMenu.VAnchor = VAnchor.ParentBottomTop;  					moreMenu.Margin = new BorderDouble(3' 3);  					moreMenu.AlignToRightEdge = true;    					topBarContainer.AddChild(moreMenu);  					SetMenuItems(moreMenu);  					moreMenu.SelectionChanged += new EventHandler(ItemMenu_SelectionChanged);  				}    				allControls.AddChild(topBarContainer);    				{  					// Ensure the form opens with no rows selected.  					//ActiveQueueList.Instance.ClearSelected();    					allControls.AddChild(queueDataView);  				}    				FlowLayoutWidget buttonPanel1 = new FlowLayoutWidget();  				buttonPanel1.HAnchor = HAnchor.ParentLeftRight;  				buttonPanel1.Padding = new BorderDouble(0' 3);  				buttonPanel1.MinimumSize = new Vector2(0' 46);  				{  					addToQueueButton = textImageButtonFactory.Generate("Add".Localize()' StaticData.Instance.LoadIcon("icon_plus.png"' 32' 32));  					addToQueueButton.ToolTipText = "Add an .stl' .amf' .gcode or .zip file to the Queue".Localize();  					buttonPanel1.AddChild(addToQueueButton);  					addToQueueButton.Margin = new BorderDouble(0' 0' 3' 0);  					addToQueueButton.Click += addToQueueButton_Click;  					addToQueueButton.Name = "Queue Add Button";    					// put in the creator button  					{  						createButton = textImageButtonFactory.Generate("Create".Localize()' StaticData.Instance.LoadIcon("icon_creator.png"' 32' 32));  						createButton.ToolTipText = "Choose a Create Tool to generate custom designs".Localize();  						createButton.Name = "Design Tool Button";  						buttonPanel1.AddChild(createButton);  						createButton.Margin = new BorderDouble(0' 0' 3' 0);  						createButton.Click += (sender' e) =>  						{  							OpenPluginChooserWindow();  						};  					}    					bool touchScreenMode = UserSettings.Instance.IsTouchScreen;    					if (OemSettings.Instance.ShowShopButton)  					{  						shopButton = textImageButtonFactory.Generate("Buy Materials".Localize()' StaticData.Instance.LoadIcon("icon_shopping_cart_32x32.png"' 32'32));  						shopButton.ToolTipText = "Shop online for printing materials".Localize();  						shopButton.Name = "Buy Materials Button";  						buttonPanel1.AddChild(shopButton);  						shopButton.Margin = new BorderDouble(0' 0' 3' 0);  						shopButton.Click += (sender' e) =>  						{  							double activeFilamentDiameter = 0;  							if (ActiveSliceSettings.Instance.PrinterSelected)  							{  								activeFilamentDiameter = 3;  								if (ActiveSliceSettings.Instance.GetValue<double>(SettingsKey.filament_diameter) < 2)  								{  									activeFilamentDiameter = 1.75;  								}  							}    							MatterControlApplication.Instance.LaunchBrowser("http://www.matterhackers.com/mc/store/redirect?d={0}&clk=mcs&a={1}".FormatWith(activeFilamentDiameter' OemSettings.Instance.AffiliateCode));  							};  						}      					buttonPanel1.AddChild(new HorizontalSpacer());    					queueMenuContainer = new FlowLayoutWidget();  					queueMenuContainer.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  					queueMenu = new QueueOptionsMenu();  					queueMenuContainer.AddChild(queueMenu.MenuDropList);  					buttonPanel1.AddChild(queueMenuContainer);  				}  				allControls.AddChild(buttonPanel1);  			}
Magic Number,MatterHackers.MatterControl.PrintQueue,QueueDataWidget,C:\repos\MatterHackers_MatterControl\Queue\QueueDataWidget.cs,QueueDataWidget,The following statement contains a magic number: {  				enterEditModeButton = editButtonFactory.Generate("Edit".Localize()' centerText: true);  				enterEditModeButton.ToolTipText = "Enter Multi Select mode".Localize();  				enterEditModeButton.Click += enterEditModeButtonClick;    				leaveEditModeButton = editButtonFactory.Generate("Done".Localize()' centerText: true);  				leaveEditModeButton.Name = "Queue Done Button";  				leaveEditModeButton.Click += leaveEditModeButtonClick;    				// make sure the buttons are the same size even when localized  				if (leaveEditModeButton.Width < enterEditModeButton.Width)  				{  					editButtonFactory.FixedWidth = enterEditModeButton.Width;  					leaveEditModeButton = editButtonFactory.Generate("Done".Localize()' centerText: true);  					leaveEditModeButton.Click += leaveEditModeButtonClick;  				}  				else  				{  					editButtonFactory.FixedWidth = leaveEditModeButton.Width;  					enterEditModeButton = editButtonFactory.Generate("Edit".Localize()' centerText: true);  					enterEditModeButton.Name = "Queue Edit Button";  					enterEditModeButton.Click += enterEditModeButtonClick;  				}    				multiSelectionMenuItems.Add("Merge".Localize() + "...");    				CreateEditBarButtons();  				leaveEditModeButton.Visible = false;    				FlowLayoutWidget topBarContainer = new FlowLayoutWidget();  				topBarContainer.BackgroundColor = ActiveTheme.Instance.TransparentDarkOverlay;  				topBarContainer.HAnchor = HAnchor.ParentLeftRight;  				topBarContainer.Padding = new BorderDouble(0);    				topBarContainer.AddChild(enterEditModeButton);    				topBarContainer.AddChild(leaveEditModeButton);  				topBarContainer.AddChild(new HorizontalSpacer());  				topBarContainer.AddChild(itemOperationButtons);    				// put in the item edit menu  				{  					moreMenu = new DropDownMenu("More".Localize() + "... ");  					moreMenu.NormalColor = new RGBA_Bytes();  					moreMenu.BorderWidth = (int)(1 * GuiWidget.DeviceScale + .5);  					moreMenu.BorderColor = new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor'100);  					moreMenu.MenuAsWideAsItems = false;  					moreMenu.VAnchor = VAnchor.ParentBottomTop;  					moreMenu.Margin = new BorderDouble(3' 3);  					moreMenu.AlignToRightEdge = true;    					topBarContainer.AddChild(moreMenu);  					SetMenuItems(moreMenu);  					moreMenu.SelectionChanged += new EventHandler(ItemMenu_SelectionChanged);  				}    				allControls.AddChild(topBarContainer);    				{  					// Ensure the form opens with no rows selected.  					//ActiveQueueList.Instance.ClearSelected();    					allControls.AddChild(queueDataView);  				}    				FlowLayoutWidget buttonPanel1 = new FlowLayoutWidget();  				buttonPanel1.HAnchor = HAnchor.ParentLeftRight;  				buttonPanel1.Padding = new BorderDouble(0' 3);  				buttonPanel1.MinimumSize = new Vector2(0' 46);  				{  					addToQueueButton = textImageButtonFactory.Generate("Add".Localize()' StaticData.Instance.LoadIcon("icon_plus.png"' 32' 32));  					addToQueueButton.ToolTipText = "Add an .stl' .amf' .gcode or .zip file to the Queue".Localize();  					buttonPanel1.AddChild(addToQueueButton);  					addToQueueButton.Margin = new BorderDouble(0' 0' 3' 0);  					addToQueueButton.Click += addToQueueButton_Click;  					addToQueueButton.Name = "Queue Add Button";    					// put in the creator button  					{  						createButton = textImageButtonFactory.Generate("Create".Localize()' StaticData.Instance.LoadIcon("icon_creator.png"' 32' 32));  						createButton.ToolTipText = "Choose a Create Tool to generate custom designs".Localize();  						createButton.Name = "Design Tool Button";  						buttonPanel1.AddChild(createButton);  						createButton.Margin = new BorderDouble(0' 0' 3' 0);  						createButton.Click += (sender' e) =>  						{  							OpenPluginChooserWindow();  						};  					}    					bool touchScreenMode = UserSettings.Instance.IsTouchScreen;    					if (OemSettings.Instance.ShowShopButton)  					{  						shopButton = textImageButtonFactory.Generate("Buy Materials".Localize()' StaticData.Instance.LoadIcon("icon_shopping_cart_32x32.png"' 32'32));  						shopButton.ToolTipText = "Shop online for printing materials".Localize();  						shopButton.Name = "Buy Materials Button";  						buttonPanel1.AddChild(shopButton);  						shopButton.Margin = new BorderDouble(0' 0' 3' 0);  						shopButton.Click += (sender' e) =>  						{  							double activeFilamentDiameter = 0;  							if (ActiveSliceSettings.Instance.PrinterSelected)  							{  								activeFilamentDiameter = 3;  								if (ActiveSliceSettings.Instance.GetValue<double>(SettingsKey.filament_diameter) < 2)  								{  									activeFilamentDiameter = 1.75;  								}  							}    							MatterControlApplication.Instance.LaunchBrowser("http://www.matterhackers.com/mc/store/redirect?d={0}&clk=mcs&a={1}".FormatWith(activeFilamentDiameter' OemSettings.Instance.AffiliateCode));  							};  						}      					buttonPanel1.AddChild(new HorizontalSpacer());    					queueMenuContainer = new FlowLayoutWidget();  					queueMenuContainer.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  					queueMenu = new QueueOptionsMenu();  					queueMenuContainer.AddChild(queueMenu.MenuDropList);  					buttonPanel1.AddChild(queueMenuContainer);  				}  				allControls.AddChild(buttonPanel1);  			}
Magic Number,MatterHackers.MatterControl.PrintQueue,QueueDataWidget,C:\repos\MatterHackers_MatterControl\Queue\QueueDataWidget.cs,QueueDataWidget,The following statement contains a magic number: {  				enterEditModeButton = editButtonFactory.Generate("Edit".Localize()' centerText: true);  				enterEditModeButton.ToolTipText = "Enter Multi Select mode".Localize();  				enterEditModeButton.Click += enterEditModeButtonClick;    				leaveEditModeButton = editButtonFactory.Generate("Done".Localize()' centerText: true);  				leaveEditModeButton.Name = "Queue Done Button";  				leaveEditModeButton.Click += leaveEditModeButtonClick;    				// make sure the buttons are the same size even when localized  				if (leaveEditModeButton.Width < enterEditModeButton.Width)  				{  					editButtonFactory.FixedWidth = enterEditModeButton.Width;  					leaveEditModeButton = editButtonFactory.Generate("Done".Localize()' centerText: true);  					leaveEditModeButton.Click += leaveEditModeButtonClick;  				}  				else  				{  					editButtonFactory.FixedWidth = leaveEditModeButton.Width;  					enterEditModeButton = editButtonFactory.Generate("Edit".Localize()' centerText: true);  					enterEditModeButton.Name = "Queue Edit Button";  					enterEditModeButton.Click += enterEditModeButtonClick;  				}    				multiSelectionMenuItems.Add("Merge".Localize() + "...");    				CreateEditBarButtons();  				leaveEditModeButton.Visible = false;    				FlowLayoutWidget topBarContainer = new FlowLayoutWidget();  				topBarContainer.BackgroundColor = ActiveTheme.Instance.TransparentDarkOverlay;  				topBarContainer.HAnchor = HAnchor.ParentLeftRight;  				topBarContainer.Padding = new BorderDouble(0);    				topBarContainer.AddChild(enterEditModeButton);    				topBarContainer.AddChild(leaveEditModeButton);  				topBarContainer.AddChild(new HorizontalSpacer());  				topBarContainer.AddChild(itemOperationButtons);    				// put in the item edit menu  				{  					moreMenu = new DropDownMenu("More".Localize() + "... ");  					moreMenu.NormalColor = new RGBA_Bytes();  					moreMenu.BorderWidth = (int)(1 * GuiWidget.DeviceScale + .5);  					moreMenu.BorderColor = new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor'100);  					moreMenu.MenuAsWideAsItems = false;  					moreMenu.VAnchor = VAnchor.ParentBottomTop;  					moreMenu.Margin = new BorderDouble(3' 3);  					moreMenu.AlignToRightEdge = true;    					topBarContainer.AddChild(moreMenu);  					SetMenuItems(moreMenu);  					moreMenu.SelectionChanged += new EventHandler(ItemMenu_SelectionChanged);  				}    				allControls.AddChild(topBarContainer);    				{  					// Ensure the form opens with no rows selected.  					//ActiveQueueList.Instance.ClearSelected();    					allControls.AddChild(queueDataView);  				}    				FlowLayoutWidget buttonPanel1 = new FlowLayoutWidget();  				buttonPanel1.HAnchor = HAnchor.ParentLeftRight;  				buttonPanel1.Padding = new BorderDouble(0' 3);  				buttonPanel1.MinimumSize = new Vector2(0' 46);  				{  					addToQueueButton = textImageButtonFactory.Generate("Add".Localize()' StaticData.Instance.LoadIcon("icon_plus.png"' 32' 32));  					addToQueueButton.ToolTipText = "Add an .stl' .amf' .gcode or .zip file to the Queue".Localize();  					buttonPanel1.AddChild(addToQueueButton);  					addToQueueButton.Margin = new BorderDouble(0' 0' 3' 0);  					addToQueueButton.Click += addToQueueButton_Click;  					addToQueueButton.Name = "Queue Add Button";    					// put in the creator button  					{  						createButton = textImageButtonFactory.Generate("Create".Localize()' StaticData.Instance.LoadIcon("icon_creator.png"' 32' 32));  						createButton.ToolTipText = "Choose a Create Tool to generate custom designs".Localize();  						createButton.Name = "Design Tool Button";  						buttonPanel1.AddChild(createButton);  						createButton.Margin = new BorderDouble(0' 0' 3' 0);  						createButton.Click += (sender' e) =>  						{  							OpenPluginChooserWindow();  						};  					}    					bool touchScreenMode = UserSettings.Instance.IsTouchScreen;    					if (OemSettings.Instance.ShowShopButton)  					{  						shopButton = textImageButtonFactory.Generate("Buy Materials".Localize()' StaticData.Instance.LoadIcon("icon_shopping_cart_32x32.png"' 32'32));  						shopButton.ToolTipText = "Shop online for printing materials".Localize();  						shopButton.Name = "Buy Materials Button";  						buttonPanel1.AddChild(shopButton);  						shopButton.Margin = new BorderDouble(0' 0' 3' 0);  						shopButton.Click += (sender' e) =>  						{  							double activeFilamentDiameter = 0;  							if (ActiveSliceSettings.Instance.PrinterSelected)  							{  								activeFilamentDiameter = 3;  								if (ActiveSliceSettings.Instance.GetValue<double>(SettingsKey.filament_diameter) < 2)  								{  									activeFilamentDiameter = 1.75;  								}  							}    							MatterControlApplication.Instance.LaunchBrowser("http://www.matterhackers.com/mc/store/redirect?d={0}&clk=mcs&a={1}".FormatWith(activeFilamentDiameter' OemSettings.Instance.AffiliateCode));  							};  						}      					buttonPanel1.AddChild(new HorizontalSpacer());    					queueMenuContainer = new FlowLayoutWidget();  					queueMenuContainer.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  					queueMenu = new QueueOptionsMenu();  					queueMenuContainer.AddChild(queueMenu.MenuDropList);  					buttonPanel1.AddChild(queueMenuContainer);  				}  				allControls.AddChild(buttonPanel1);  			}
Magic Number,MatterHackers.MatterControl.PrintQueue,QueueDataWidget,C:\repos\MatterHackers_MatterControl\Queue\QueueDataWidget.cs,QueueDataWidget,The following statement contains a magic number: {  				enterEditModeButton = editButtonFactory.Generate("Edit".Localize()' centerText: true);  				enterEditModeButton.ToolTipText = "Enter Multi Select mode".Localize();  				enterEditModeButton.Click += enterEditModeButtonClick;    				leaveEditModeButton = editButtonFactory.Generate("Done".Localize()' centerText: true);  				leaveEditModeButton.Name = "Queue Done Button";  				leaveEditModeButton.Click += leaveEditModeButtonClick;    				// make sure the buttons are the same size even when localized  				if (leaveEditModeButton.Width < enterEditModeButton.Width)  				{  					editButtonFactory.FixedWidth = enterEditModeButton.Width;  					leaveEditModeButton = editButtonFactory.Generate("Done".Localize()' centerText: true);  					leaveEditModeButton.Click += leaveEditModeButtonClick;  				}  				else  				{  					editButtonFactory.FixedWidth = leaveEditModeButton.Width;  					enterEditModeButton = editButtonFactory.Generate("Edit".Localize()' centerText: true);  					enterEditModeButton.Name = "Queue Edit Button";  					enterEditModeButton.Click += enterEditModeButtonClick;  				}    				multiSelectionMenuItems.Add("Merge".Localize() + "...");    				CreateEditBarButtons();  				leaveEditModeButton.Visible = false;    				FlowLayoutWidget topBarContainer = new FlowLayoutWidget();  				topBarContainer.BackgroundColor = ActiveTheme.Instance.TransparentDarkOverlay;  				topBarContainer.HAnchor = HAnchor.ParentLeftRight;  				topBarContainer.Padding = new BorderDouble(0);    				topBarContainer.AddChild(enterEditModeButton);    				topBarContainer.AddChild(leaveEditModeButton);  				topBarContainer.AddChild(new HorizontalSpacer());  				topBarContainer.AddChild(itemOperationButtons);    				// put in the item edit menu  				{  					moreMenu = new DropDownMenu("More".Localize() + "... ");  					moreMenu.NormalColor = new RGBA_Bytes();  					moreMenu.BorderWidth = (int)(1 * GuiWidget.DeviceScale + .5);  					moreMenu.BorderColor = new RGBA_Bytes(ActiveTheme.Instance.SecondaryTextColor'100);  					moreMenu.MenuAsWideAsItems = false;  					moreMenu.VAnchor = VAnchor.ParentBottomTop;  					moreMenu.Margin = new BorderDouble(3' 3);  					moreMenu.AlignToRightEdge = true;    					topBarContainer.AddChild(moreMenu);  					SetMenuItems(moreMenu);  					moreMenu.SelectionChanged += new EventHandler(ItemMenu_SelectionChanged);  				}    				allControls.AddChild(topBarContainer);    				{  					// Ensure the form opens with no rows selected.  					//ActiveQueueList.Instance.ClearSelected();    					allControls.AddChild(queueDataView);  				}    				FlowLayoutWidget buttonPanel1 = new FlowLayoutWidget();  				buttonPanel1.HAnchor = HAnchor.ParentLeftRight;  				buttonPanel1.Padding = new BorderDouble(0' 3);  				buttonPanel1.MinimumSize = new Vector2(0' 46);  				{  					addToQueueButton = textImageButtonFactory.Generate("Add".Localize()' StaticData.Instance.LoadIcon("icon_plus.png"' 32' 32));  					addToQueueButton.ToolTipText = "Add an .stl' .amf' .gcode or .zip file to the Queue".Localize();  					buttonPanel1.AddChild(addToQueueButton);  					addToQueueButton.Margin = new BorderDouble(0' 0' 3' 0);  					addToQueueButton.Click += addToQueueButton_Click;  					addToQueueButton.Name = "Queue Add Button";    					// put in the creator button  					{  						createButton = textImageButtonFactory.Generate("Create".Localize()' StaticData.Instance.LoadIcon("icon_creator.png"' 32' 32));  						createButton.ToolTipText = "Choose a Create Tool to generate custom designs".Localize();  						createButton.Name = "Design Tool Button";  						buttonPanel1.AddChild(createButton);  						createButton.Margin = new BorderDouble(0' 0' 3' 0);  						createButton.Click += (sender' e) =>  						{  							OpenPluginChooserWindow();  						};  					}    					bool touchScreenMode = UserSettings.Instance.IsTouchScreen;    					if (OemSettings.Instance.ShowShopButton)  					{  						shopButton = textImageButtonFactory.Generate("Buy Materials".Localize()' StaticData.Instance.LoadIcon("icon_shopping_cart_32x32.png"' 32'32));  						shopButton.ToolTipText = "Shop online for printing materials".Localize();  						shopButton.Name = "Buy Materials Button";  						buttonPanel1.AddChild(shopButton);  						shopButton.Margin = new BorderDouble(0' 0' 3' 0);  						shopButton.Click += (sender' e) =>  						{  							double activeFilamentDiameter = 0;  							if (ActiveSliceSettings.Instance.PrinterSelected)  							{  								activeFilamentDiameter = 3;  								if (ActiveSliceSettings.Instance.GetValue<double>(SettingsKey.filament_diameter) < 2)  								{  									activeFilamentDiameter = 1.75;  								}  							}    							MatterControlApplication.Instance.LaunchBrowser("http://www.matterhackers.com/mc/store/redirect?d={0}&clk=mcs&a={1}".FormatWith(activeFilamentDiameter' OemSettings.Instance.AffiliateCode));  							};  						}      					buttonPanel1.AddChild(new HorizontalSpacer());    					queueMenuContainer = new FlowLayoutWidget();  					queueMenuContainer.VAnchor = Agg.UI.VAnchor.ParentBottomTop;  					queueMenu = new QueueOptionsMenu();  					queueMenuContainer.AddChild(queueMenu.MenuDropList);  					buttonPanel1.AddChild(queueMenuContainer);  				}  				allControls.AddChild(buttonPanel1);  			}
Magic Number,MatterHackers.MatterControl.PrintQueue,QueueDataWidget,C:\repos\MatterHackers_MatterControl\Queue\QueueDataWidget.cs,CreateEditBarButtons,The following statement contains a magic number: exportItemButton.Margin = new BorderDouble(3' 0);
Magic Number,MatterHackers.MatterControl.PrintQueue,QueueDataWidget,C:\repos\MatterHackers_MatterControl\Queue\QueueDataWidget.cs,CreateEditBarButtons,The following statement contains a magic number: copyItemButton.Margin = new BorderDouble(3' 0);
Magic Number,MatterHackers.MatterControl.PrintQueue,QueueDataWidget,C:\repos\MatterHackers_MatterControl\Queue\QueueDataWidget.cs,CreateEditBarButtons,The following statement contains a magic number: removeItemButton.Margin = new BorderDouble(3' 0);
Magic Number,MatterHackers.MatterControl.PrintQueue,QueueDataWidget,C:\repos\MatterHackers_MatterControl\Queue\QueueDataWidget.cs,CreateCopyInQueue,The following statement contains a magic number: if (thisIndexInQueue != -1 && File.Exists(printItemWrapper.FileLocation))  			{  				string libraryDataPath = ApplicationDataStorage.Instance.ApplicationLibraryDataPath;  				if (!Directory.Exists(libraryDataPath))  				{  					Directory.CreateDirectory(libraryDataPath);  				}    				string newCopyFilename;  				int infiniteBlocker = 0;  				do  				{  					newCopyFilename = Path.Combine(libraryDataPath' Path.ChangeExtension(Path.GetRandomFileName()' Path.GetExtension(printItemWrapper.FileLocation)));  					newCopyFilename = Path.GetFullPath(newCopyFilename);  					infiniteBlocker++;  				} while (File.Exists(newCopyFilename) && infiniteBlocker < 100);    				File.Copy(printItemWrapper.FileLocation' newCopyFilename);    				string newName = printItemWrapper.Name;    				if (!newName.Contains(" - copy"))  				{  					newName += " - copy";  				}  				else  				{  					int index = newName.LastIndexOf(" - copy");  					newName = newName.Substring(0' index) + " - copy";  				}    				int copyNumber = 2;  				string testName = newName;  				string[] itemNames = QueueData.Instance.GetItemNames();  				// figure out if we have a copy already and increment the number if we do  				while (true)  				{  					if (itemNames.Contains(testName))  					{  						testName = "{0} {1}".FormatWith(newName' copyNumber);  						copyNumber++;  					}  					else  					{  						break;  					}  				}  				newName = testName;    				PrintItem newPrintItem = new PrintItem();  				newPrintItem.Name = newName;  				newPrintItem.FileLocation = newCopyFilename;  				newPrintItem.ReadOnly = printItemWrapper.PrintItem.ReadOnly;  				newPrintItem.Protected = printItemWrapper.PrintItem.Protected;  				UiThread.RunOnIdle(AddPartCopyToQueue' new PartToAddToQueue()  				{  					PrintItem = newPrintItem'  					InsertAfterIndex = thisIndexInQueue + 1  				});  			}
Magic Number,MatterHackers.MatterControl.PrintQueue,QueueDataWidget,C:\repos\MatterHackers_MatterControl\Queue\QueueDataWidget.cs,CreateCopyInQueue,The following statement contains a magic number: if (thisIndexInQueue != -1 && File.Exists(printItemWrapper.FileLocation))  			{  				string libraryDataPath = ApplicationDataStorage.Instance.ApplicationLibraryDataPath;  				if (!Directory.Exists(libraryDataPath))  				{  					Directory.CreateDirectory(libraryDataPath);  				}    				string newCopyFilename;  				int infiniteBlocker = 0;  				do  				{  					newCopyFilename = Path.Combine(libraryDataPath' Path.ChangeExtension(Path.GetRandomFileName()' Path.GetExtension(printItemWrapper.FileLocation)));  					newCopyFilename = Path.GetFullPath(newCopyFilename);  					infiniteBlocker++;  				} while (File.Exists(newCopyFilename) && infiniteBlocker < 100);    				File.Copy(printItemWrapper.FileLocation' newCopyFilename);    				string newName = printItemWrapper.Name;    				if (!newName.Contains(" - copy"))  				{  					newName += " - copy";  				}  				else  				{  					int index = newName.LastIndexOf(" - copy");  					newName = newName.Substring(0' index) + " - copy";  				}    				int copyNumber = 2;  				string testName = newName;  				string[] itemNames = QueueData.Instance.GetItemNames();  				// figure out if we have a copy already and increment the number if we do  				while (true)  				{  					if (itemNames.Contains(testName))  					{  						testName = "{0} {1}".FormatWith(newName' copyNumber);  						copyNumber++;  					}  					else  					{  						break;  					}  				}  				newName = testName;    				PrintItem newPrintItem = new PrintItem();  				newPrintItem.Name = newName;  				newPrintItem.FileLocation = newCopyFilename;  				newPrintItem.ReadOnly = printItemWrapper.PrintItem.ReadOnly;  				newPrintItem.Protected = printItemWrapper.PrintItem.Protected;  				UiThread.RunOnIdle(AddPartCopyToQueue' new PartToAddToQueue()  				{  					PrintItem = newPrintItem'  					InsertAfterIndex = thisIndexInQueue + 1  				});  			}
Magic Number,MatterHackers.MatterControl.PrintQueue,QueueDataWidget,C:\repos\MatterHackers_MatterControl\Queue\QueueDataWidget.cs,SetDisplayAttributes,The following statement contains a magic number: this.Padding = new BorderDouble(3);
Magic Number,MatterHackers.MatterControl.PrintQueue,QueueDataWidget,C:\repos\MatterHackers_MatterControl\Queue\QueueDataWidget.cs,SetMenuItems,The following statement contains a magic number: foreach (PrintItemAction item in menuItems)  			{  				if (item.Action == null)  				{  					dropDownMenu.MenuItemsPadding = new BorderDouble(5' 0' padding.Right' 3);  				}  				else  				{  					if(item.SingleItemOnly)  					{  						singleSelectionMenuItems.Add(item.Title);  					}  					dropDownMenu.MenuItemsPadding = new BorderDouble(10' 5' padding.Right' 5);  				}    				dropDownMenu.AddItem(item.Title);  			}
Magic Number,MatterHackers.MatterControl.PrintQueue,QueueDataWidget,C:\repos\MatterHackers_MatterControl\Queue\QueueDataWidget.cs,SetMenuItems,The following statement contains a magic number: foreach (PrintItemAction item in menuItems)  			{  				if (item.Action == null)  				{  					dropDownMenu.MenuItemsPadding = new BorderDouble(5' 0' padding.Right' 3);  				}  				else  				{  					if(item.SingleItemOnly)  					{  						singleSelectionMenuItems.Add(item.Title);  					}  					dropDownMenu.MenuItemsPadding = new BorderDouble(10' 5' padding.Right' 5);  				}    				dropDownMenu.AddItem(item.Title);  			}
Magic Number,MatterHackers.MatterControl.PrintQueue,QueueDataWidget,C:\repos\MatterHackers_MatterControl\Queue\QueueDataWidget.cs,SetMenuItems,The following statement contains a magic number: foreach (PrintItemAction item in menuItems)  			{  				if (item.Action == null)  				{  					dropDownMenu.MenuItemsPadding = new BorderDouble(5' 0' padding.Right' 3);  				}  				else  				{  					if(item.SingleItemOnly)  					{  						singleSelectionMenuItems.Add(item.Title);  					}  					dropDownMenu.MenuItemsPadding = new BorderDouble(10' 5' padding.Right' 5);  				}    				dropDownMenu.AddItem(item.Title);  			}
Magic Number,MatterHackers.MatterControl.PrintQueue,QueueDataWidget,C:\repos\MatterHackers_MatterControl\Queue\QueueDataWidget.cs,SetMenuItems,The following statement contains a magic number: foreach (PrintItemAction item in menuItems)  			{  				if (item.Action == null)  				{  					dropDownMenu.MenuItemsPadding = new BorderDouble(5' 0' padding.Right' 3);  				}  				else  				{  					if(item.SingleItemOnly)  					{  						singleSelectionMenuItems.Add(item.Title);  					}  					dropDownMenu.MenuItemsPadding = new BorderDouble(10' 5' padding.Right' 5);  				}    				dropDownMenu.AddItem(item.Title);  			}
Magic Number,MatterHackers.MatterControl.PrintQueue,QueueDataWidget,C:\repos\MatterHackers_MatterControl\Queue\QueueDataWidget.cs,SetMenuItems,The following statement contains a magic number: foreach (PrintItemAction item in menuItems)  			{  				if (item.Action == null)  				{  					dropDownMenu.MenuItemsPadding = new BorderDouble(5' 0' padding.Right' 3);  				}  				else  				{  					if(item.SingleItemOnly)  					{  						singleSelectionMenuItems.Add(item.Title);  					}  					dropDownMenu.MenuItemsPadding = new BorderDouble(10' 5' padding.Right' 5);  				}    				dropDownMenu.AddItem(item.Title);  			}
Magic Number,MatterHackers.MatterControl.Slicing,SliceLayers,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Slicing\SliceLayers.cs,GetPerimetersForAllLayers,The following statement contains a magic number: int layerCount = (int)((heightWithoutFirstLayer / otherLayerHeights) + .5);
Magic Number,MatterHackers.MatterControl.FieldValidation,ValidationMethods,C:\repos\MatterHackers_MatterControl\Utilities\FieldValidation.cs,StringLooksLikePhoneNumber,The following statement contains a magic number: if (value.Length == 10)  			{  				status.IsValid = true;  			}  			else if (value.Length == 11 && value[0] == '1')  			{  				status.IsValid = true;  			}  			else  			{  				status.IsValid = false;  				status.ErrorMessage = "Sorry!  Must be a valid U.S. or Canadian phone number.".Localize();  			}
Magic Number,MatterHackers.MatterControl.FieldValidation,ValidationMethods,C:\repos\MatterHackers_MatterControl\Utilities\FieldValidation.cs,StringLooksLikePhoneNumber,The following statement contains a magic number: if (value.Length == 10)  			{  				status.IsValid = true;  			}  			else if (value.Length == 11 && value[0] == '1')  			{  				status.IsValid = true;  			}  			else  			{  				status.IsValid = false;  				status.ErrorMessage = "Sorry!  Must be a valid U.S. or Canadian phone number.".Localize();  			}
Magic Number,MatterHackers.MatterControl.FieldValidation,ValidationMethods,C:\repos\MatterHackers_MatterControl\Utilities\FieldValidation.cs,StringLooksLikeEmail,The following statement contains a magic number: if (lastAtPos < lastDotPos && lastAtPos > 0 && value.IndexOf("@@") == -1 && lastDotPos > 2 && (value.Length - lastDotPos) > 2)  			{  				status.IsValid = true;  			}  			else  			{  				status.IsValid = false;  				status.ErrorMessage = "Sorry!  Must be a valid email address.".Localize();  			}
Magic Number,MatterHackers.MatterControl.FieldValidation,ValidationMethods,C:\repos\MatterHackers_MatterControl\Utilities\FieldValidation.cs,StringLooksLikeEmail,The following statement contains a magic number: if (lastAtPos < lastDotPos && lastAtPos > 0 && value.IndexOf("@@") == -1 && lastDotPos > 2 && (value.Length - lastDotPos) > 2)  			{  				status.IsValid = true;  			}  			else  			{  				status.IsValid = false;  				status.ErrorMessage = "Sorry!  Must be a valid email address.".Localize();  			}
Magic Number,MatterHackers.MatterControl.CreatorPlugins,PluginChooserWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\PluginChooserWindow.cs,LoadImage,The following statement contains a magic number: ImageBuffer buffer = new ImageBuffer(10' 10);
Magic Number,MatterHackers.MatterControl.CreatorPlugins,PluginChooserWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\PluginChooserWindow.cs,LoadImage,The following statement contains a magic number: ImageBuffer buffer = new ImageBuffer(10' 10);
Magic Number,MatterHackers.MatterControl.CreatorPlugins,PluginChooserWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\PluginChooserWindow.cs,PluginChooserWindow,The following statement contains a magic number: MinimumSize = new Vector2(360' 300);
Magic Number,MatterHackers.MatterControl.CreatorPlugins,PluginChooserWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\PluginChooserWindow.cs,PluginChooserWindow,The following statement contains a magic number: MinimumSize = new Vector2(360' 300);
Magic Number,MatterHackers.MatterControl.CreatorPlugins,PluginChooserWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\PluginChooserWindow.cs,AddElements,The following statement contains a magic number: topToBottom.Padding = new BorderDouble(3' 0' 3' 5);
Magic Number,MatterHackers.MatterControl.CreatorPlugins,PluginChooserWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\PluginChooserWindow.cs,AddElements,The following statement contains a magic number: topToBottom.Padding = new BorderDouble(3' 0' 3' 5);
Magic Number,MatterHackers.MatterControl.CreatorPlugins,PluginChooserWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\PluginChooserWindow.cs,AddElements,The following statement contains a magic number: topToBottom.Padding = new BorderDouble(3' 0' 3' 5);
Magic Number,MatterHackers.MatterControl.CreatorPlugins,PluginChooserWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\PluginChooserWindow.cs,AddElements,The following statement contains a magic number: headerRow.Margin = new BorderDouble(0' 3' 0' 0);
Magic Number,MatterHackers.MatterControl.CreatorPlugins,PluginChooserWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\PluginChooserWindow.cs,AddElements,The following statement contains a magic number: headerRow.Padding = new BorderDouble(0' 3' 0' 3);
Magic Number,MatterHackers.MatterControl.CreatorPlugins,PluginChooserWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\PluginChooserWindow.cs,AddElements,The following statement contains a magic number: headerRow.Padding = new BorderDouble(0' 3' 0' 3);
Magic Number,MatterHackers.MatterControl.CreatorPlugins,PluginChooserWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\PluginChooserWindow.cs,AddElements,The following statement contains a magic number: {  				string elementHeaderLabelBeg = "Select a Design Tool".Localize();  				string elementHeaderLabelFull = string.Format("{0}:"' elementHeaderLabelBeg);  				string elementHeaderLabel = elementHeaderLabelFull;  				TextWidget elementHeader = new TextWidget(string.Format(elementHeaderLabel)' pointSize: 14);  				elementHeader.TextColor = ActiveTheme.Instance.PrimaryTextColor;  				elementHeader.HAnchor = HAnchor.ParentLeftRight;  				elementHeader.VAnchor = Agg.UI.VAnchor.ParentBottom;    				headerRow.AddChild(elementHeader);  			}
Magic Number,MatterHackers.MatterControl.CreatorPlugins,PluginChooserWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\PluginChooserWindow.cs,AddElements,The following statement contains a magic number: unlockButtonFactory.Margin = new BorderDouble(10' 0);
Magic Number,MatterHackers.MatterControl.CreatorPlugins,PluginChooserWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\PluginChooserWindow.cs,AddElements,The following statement contains a magic number: if (ActiveTheme.Instance.IsDarkTheme)  			{  				unlockButtonFactory.normalFillColor = new RGBA_Bytes(0' 0' 0' 100);  				unlockButtonFactory.normalBorderColor = new RGBA_Bytes(0' 0' 0' 100);  				unlockButtonFactory.hoverFillColor = new RGBA_Bytes(0' 0' 0' 50);  				unlockButtonFactory.hoverBorderColor = new RGBA_Bytes(0' 0' 0' 50);  			}  			else  			{  				unlockButtonFactory.normalFillColor = new RGBA_Bytes(0' 0' 0' 50);  				unlockButtonFactory.normalBorderColor = new RGBA_Bytes(0' 0' 0' 50);  				unlockButtonFactory.hoverFillColor = new RGBA_Bytes(0' 0' 0' 100);  				unlockButtonFactory.hoverBorderColor = new RGBA_Bytes(0' 0' 0' 100);  			}
Magic Number,MatterHackers.MatterControl.CreatorPlugins,PluginChooserWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\PluginChooserWindow.cs,AddElements,The following statement contains a magic number: if (ActiveTheme.Instance.IsDarkTheme)  			{  				unlockButtonFactory.normalFillColor = new RGBA_Bytes(0' 0' 0' 100);  				unlockButtonFactory.normalBorderColor = new RGBA_Bytes(0' 0' 0' 100);  				unlockButtonFactory.hoverFillColor = new RGBA_Bytes(0' 0' 0' 50);  				unlockButtonFactory.hoverBorderColor = new RGBA_Bytes(0' 0' 0' 50);  			}  			else  			{  				unlockButtonFactory.normalFillColor = new RGBA_Bytes(0' 0' 0' 50);  				unlockButtonFactory.normalBorderColor = new RGBA_Bytes(0' 0' 0' 50);  				unlockButtonFactory.hoverFillColor = new RGBA_Bytes(0' 0' 0' 100);  				unlockButtonFactory.hoverBorderColor = new RGBA_Bytes(0' 0' 0' 100);  			}
Magic Number,MatterHackers.MatterControl.CreatorPlugins,PluginChooserWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\PluginChooserWindow.cs,AddElements,The following statement contains a magic number: if (ActiveTheme.Instance.IsDarkTheme)  			{  				unlockButtonFactory.normalFillColor = new RGBA_Bytes(0' 0' 0' 100);  				unlockButtonFactory.normalBorderColor = new RGBA_Bytes(0' 0' 0' 100);  				unlockButtonFactory.hoverFillColor = new RGBA_Bytes(0' 0' 0' 50);  				unlockButtonFactory.hoverBorderColor = new RGBA_Bytes(0' 0' 0' 50);  			}  			else  			{  				unlockButtonFactory.normalFillColor = new RGBA_Bytes(0' 0' 0' 50);  				unlockButtonFactory.normalBorderColor = new RGBA_Bytes(0' 0' 0' 50);  				unlockButtonFactory.hoverFillColor = new RGBA_Bytes(0' 0' 0' 100);  				unlockButtonFactory.hoverBorderColor = new RGBA_Bytes(0' 0' 0' 100);  			}
Magic Number,MatterHackers.MatterControl.CreatorPlugins,PluginChooserWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\PluginChooserWindow.cs,AddElements,The following statement contains a magic number: if (ActiveTheme.Instance.IsDarkTheme)  			{  				unlockButtonFactory.normalFillColor = new RGBA_Bytes(0' 0' 0' 100);  				unlockButtonFactory.normalBorderColor = new RGBA_Bytes(0' 0' 0' 100);  				unlockButtonFactory.hoverFillColor = new RGBA_Bytes(0' 0' 0' 50);  				unlockButtonFactory.hoverBorderColor = new RGBA_Bytes(0' 0' 0' 50);  			}  			else  			{  				unlockButtonFactory.normalFillColor = new RGBA_Bytes(0' 0' 0' 50);  				unlockButtonFactory.normalBorderColor = new RGBA_Bytes(0' 0' 0' 50);  				unlockButtonFactory.hoverFillColor = new RGBA_Bytes(0' 0' 0' 100);  				unlockButtonFactory.hoverBorderColor = new RGBA_Bytes(0' 0' 0' 100);  			}
Magic Number,MatterHackers.MatterControl.CreatorPlugins,PluginChooserWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\PluginChooserWindow.cs,AddElements,The following statement contains a magic number: if (ActiveTheme.Instance.IsDarkTheme)  			{  				unlockButtonFactory.normalFillColor = new RGBA_Bytes(0' 0' 0' 100);  				unlockButtonFactory.normalBorderColor = new RGBA_Bytes(0' 0' 0' 100);  				unlockButtonFactory.hoverFillColor = new RGBA_Bytes(0' 0' 0' 50);  				unlockButtonFactory.hoverBorderColor = new RGBA_Bytes(0' 0' 0' 50);  			}  			else  			{  				unlockButtonFactory.normalFillColor = new RGBA_Bytes(0' 0' 0' 50);  				unlockButtonFactory.normalBorderColor = new RGBA_Bytes(0' 0' 0' 50);  				unlockButtonFactory.hoverFillColor = new RGBA_Bytes(0' 0' 0' 100);  				unlockButtonFactory.hoverBorderColor = new RGBA_Bytes(0' 0' 0' 100);  			}
Magic Number,MatterHackers.MatterControl.CreatorPlugins,PluginChooserWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\PluginChooserWindow.cs,AddElements,The following statement contains a magic number: if (ActiveTheme.Instance.IsDarkTheme)  			{  				unlockButtonFactory.normalFillColor = new RGBA_Bytes(0' 0' 0' 100);  				unlockButtonFactory.normalBorderColor = new RGBA_Bytes(0' 0' 0' 100);  				unlockButtonFactory.hoverFillColor = new RGBA_Bytes(0' 0' 0' 50);  				unlockButtonFactory.hoverBorderColor = new RGBA_Bytes(0' 0' 0' 50);  			}  			else  			{  				unlockButtonFactory.normalFillColor = new RGBA_Bytes(0' 0' 0' 50);  				unlockButtonFactory.normalBorderColor = new RGBA_Bytes(0' 0' 0' 50);  				unlockButtonFactory.hoverFillColor = new RGBA_Bytes(0' 0' 0' 100);  				unlockButtonFactory.hoverBorderColor = new RGBA_Bytes(0' 0' 0' 100);  			}
Magic Number,MatterHackers.MatterControl.CreatorPlugins,PluginChooserWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\PluginChooserWindow.cs,AddElements,The following statement contains a magic number: if (ActiveTheme.Instance.IsDarkTheme)  			{  				unlockButtonFactory.normalFillColor = new RGBA_Bytes(0' 0' 0' 100);  				unlockButtonFactory.normalBorderColor = new RGBA_Bytes(0' 0' 0' 100);  				unlockButtonFactory.hoverFillColor = new RGBA_Bytes(0' 0' 0' 50);  				unlockButtonFactory.hoverBorderColor = new RGBA_Bytes(0' 0' 0' 50);  			}  			else  			{  				unlockButtonFactory.normalFillColor = new RGBA_Bytes(0' 0' 0' 50);  				unlockButtonFactory.normalBorderColor = new RGBA_Bytes(0' 0' 0' 50);  				unlockButtonFactory.hoverFillColor = new RGBA_Bytes(0' 0' 0' 100);  				unlockButtonFactory.hoverBorderColor = new RGBA_Bytes(0' 0' 0' 100);  			}
Magic Number,MatterHackers.MatterControl.CreatorPlugins,PluginChooserWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\PluginChooserWindow.cs,AddElements,The following statement contains a magic number: if (ActiveTheme.Instance.IsDarkTheme)  			{  				unlockButtonFactory.normalFillColor = new RGBA_Bytes(0' 0' 0' 100);  				unlockButtonFactory.normalBorderColor = new RGBA_Bytes(0' 0' 0' 100);  				unlockButtonFactory.hoverFillColor = new RGBA_Bytes(0' 0' 0' 50);  				unlockButtonFactory.hoverBorderColor = new RGBA_Bytes(0' 0' 0' 50);  			}  			else  			{  				unlockButtonFactory.normalFillColor = new RGBA_Bytes(0' 0' 0' 50);  				unlockButtonFactory.normalBorderColor = new RGBA_Bytes(0' 0' 0' 50);  				unlockButtonFactory.hoverFillColor = new RGBA_Bytes(0' 0' 0' 100);  				unlockButtonFactory.hoverBorderColor = new RGBA_Bytes(0' 0' 0' 100);  			}
Magic Number,MatterHackers.MatterControl.CreatorPlugins,PluginChooserWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\PluginChooserWindow.cs,AddElements,The following statement contains a magic number: foreach (CreatorInformation creatorInfo in RegisteredCreators.Instance.Creators)  			{  				FlowLayoutWidget pluginListingContainer = new FlowLayoutWidget();  				pluginListingContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				pluginListingContainer.BackgroundColor = RGBA_Bytes.White;  				pluginListingContainer.Padding = new BorderDouble(0);  				pluginListingContainer.Margin = new BorderDouble(6' 0' 6' 6);    				ClickWidget pluginRow = new ClickWidget();  				pluginRow.Margin = new BorderDouble(6' 0' 6' 0);  				pluginRow.Height = 38;  				pluginRow.HAnchor = Agg.UI.HAnchor.ParentLeftRight;    				FlowLayoutWidget macroRow = new FlowLayoutWidget();  				macroRow.AnchorAll();  				macroRow.BackgroundColor = RGBA_Bytes.White;    				if (creatorInfo.iconPath != "")  				{  					ImageBuffer imageBuffer = LoadImage(creatorInfo.iconPath);  					ImageWidget imageWidget = new ImageWidget(imageBuffer);  					imageWidget.VAnchor = Agg.UI.VAnchor.ParentCenter;  					macroRow.AddChild(imageWidget);  				}    				bool userHasPermission;  				if (!creatorInfo.paidAddOnFlag)  				{  					userHasPermission = true;  				}  				else  				{  					userHasPermission = creatorInfo.permissionFunction();  				}    				string addOnDescription;  				addOnDescription = creatorInfo.description;  				TextWidget buttonLabel = new TextWidget(addOnDescription' pointSize: 14);  				buttonLabel.Margin = new BorderDouble(left: 10);  				buttonLabel.VAnchor = Agg.UI.VAnchor.ParentCenter;  				macroRow.AddChild(buttonLabel);    				if (!userHasPermission)  				{  					TextWidget demoLabel = new TextWidget("(" + "demo".Localize() + ")"' pointSize: 10);    					demoLabel.Margin = new BorderDouble(left: 4);  					demoLabel.VAnchor = Agg.UI.VAnchor.ParentCenter;  					macroRow.AddChild(demoLabel);  				}    				macroRow.AddChild(new HorizontalSpacer());    				CreatorInformation callCorrectFunctionHold = creatorInfo;  				pluginRow.Click += (sender' e) =>  				{  					if (RegisteredCreators.Instance.Creators.Count > 0)  					{  						UiThread.RunOnIdle(CloseOnIdle' callCorrectFunctionHold);  					}  					else  					{  						UiThread.RunOnIdle(CloseOnIdle);  					}  				};    				pluginRow.Cursor = Cursors.Hand;  				macroRow.Selectable = false;  				pluginRow.AddChild(macroRow);    				pluginListingContainer.AddChild(pluginRow);    				if (!userHasPermission)  				{  					Button unlockButton = unlockButtonFactory.Generate("Unlock".Localize());  					unlockButton.Margin = new BorderDouble(0);  					unlockButton.Cursor = Cursors.Hand;  					unlockButton.Click += (sender' e) =>  					{  						callCorrectFunctionHold.unlockFunction();  					};  					pluginListingContainer.AddChild(unlockButton);  				}    				pluginRowContainer.AddChild(pluginListingContainer);  				if (callCorrectFunctionHold.unlockRegisterFunction != null)  				{  					callCorrectFunctionHold.unlockRegisterFunction(TriggerReload' ref unregisterEvents);  				}  			}
Magic Number,MatterHackers.MatterControl.CreatorPlugins,PluginChooserWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\PluginChooserWindow.cs,AddElements,The following statement contains a magic number: foreach (CreatorInformation creatorInfo in RegisteredCreators.Instance.Creators)  			{  				FlowLayoutWidget pluginListingContainer = new FlowLayoutWidget();  				pluginListingContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				pluginListingContainer.BackgroundColor = RGBA_Bytes.White;  				pluginListingContainer.Padding = new BorderDouble(0);  				pluginListingContainer.Margin = new BorderDouble(6' 0' 6' 6);    				ClickWidget pluginRow = new ClickWidget();  				pluginRow.Margin = new BorderDouble(6' 0' 6' 0);  				pluginRow.Height = 38;  				pluginRow.HAnchor = Agg.UI.HAnchor.ParentLeftRight;    				FlowLayoutWidget macroRow = new FlowLayoutWidget();  				macroRow.AnchorAll();  				macroRow.BackgroundColor = RGBA_Bytes.White;    				if (creatorInfo.iconPath != "")  				{  					ImageBuffer imageBuffer = LoadImage(creatorInfo.iconPath);  					ImageWidget imageWidget = new ImageWidget(imageBuffer);  					imageWidget.VAnchor = Agg.UI.VAnchor.ParentCenter;  					macroRow.AddChild(imageWidget);  				}    				bool userHasPermission;  				if (!creatorInfo.paidAddOnFlag)  				{  					userHasPermission = true;  				}  				else  				{  					userHasPermission = creatorInfo.permissionFunction();  				}    				string addOnDescription;  				addOnDescription = creatorInfo.description;  				TextWidget buttonLabel = new TextWidget(addOnDescription' pointSize: 14);  				buttonLabel.Margin = new BorderDouble(left: 10);  				buttonLabel.VAnchor = Agg.UI.VAnchor.ParentCenter;  				macroRow.AddChild(buttonLabel);    				if (!userHasPermission)  				{  					TextWidget demoLabel = new TextWidget("(" + "demo".Localize() + ")"' pointSize: 10);    					demoLabel.Margin = new BorderDouble(left: 4);  					demoLabel.VAnchor = Agg.UI.VAnchor.ParentCenter;  					macroRow.AddChild(demoLabel);  				}    				macroRow.AddChild(new HorizontalSpacer());    				CreatorInformation callCorrectFunctionHold = creatorInfo;  				pluginRow.Click += (sender' e) =>  				{  					if (RegisteredCreators.Instance.Creators.Count > 0)  					{  						UiThread.RunOnIdle(CloseOnIdle' callCorrectFunctionHold);  					}  					else  					{  						UiThread.RunOnIdle(CloseOnIdle);  					}  				};    				pluginRow.Cursor = Cursors.Hand;  				macroRow.Selectable = false;  				pluginRow.AddChild(macroRow);    				pluginListingContainer.AddChild(pluginRow);    				if (!userHasPermission)  				{  					Button unlockButton = unlockButtonFactory.Generate("Unlock".Localize());  					unlockButton.Margin = new BorderDouble(0);  					unlockButton.Cursor = Cursors.Hand;  					unlockButton.Click += (sender' e) =>  					{  						callCorrectFunctionHold.unlockFunction();  					};  					pluginListingContainer.AddChild(unlockButton);  				}    				pluginRowContainer.AddChild(pluginListingContainer);  				if (callCorrectFunctionHold.unlockRegisterFunction != null)  				{  					callCorrectFunctionHold.unlockRegisterFunction(TriggerReload' ref unregisterEvents);  				}  			}
Magic Number,MatterHackers.MatterControl.CreatorPlugins,PluginChooserWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\PluginChooserWindow.cs,AddElements,The following statement contains a magic number: foreach (CreatorInformation creatorInfo in RegisteredCreators.Instance.Creators)  			{  				FlowLayoutWidget pluginListingContainer = new FlowLayoutWidget();  				pluginListingContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				pluginListingContainer.BackgroundColor = RGBA_Bytes.White;  				pluginListingContainer.Padding = new BorderDouble(0);  				pluginListingContainer.Margin = new BorderDouble(6' 0' 6' 6);    				ClickWidget pluginRow = new ClickWidget();  				pluginRow.Margin = new BorderDouble(6' 0' 6' 0);  				pluginRow.Height = 38;  				pluginRow.HAnchor = Agg.UI.HAnchor.ParentLeftRight;    				FlowLayoutWidget macroRow = new FlowLayoutWidget();  				macroRow.AnchorAll();  				macroRow.BackgroundColor = RGBA_Bytes.White;    				if (creatorInfo.iconPath != "")  				{  					ImageBuffer imageBuffer = LoadImage(creatorInfo.iconPath);  					ImageWidget imageWidget = new ImageWidget(imageBuffer);  					imageWidget.VAnchor = Agg.UI.VAnchor.ParentCenter;  					macroRow.AddChild(imageWidget);  				}    				bool userHasPermission;  				if (!creatorInfo.paidAddOnFlag)  				{  					userHasPermission = true;  				}  				else  				{  					userHasPermission = creatorInfo.permissionFunction();  				}    				string addOnDescription;  				addOnDescription = creatorInfo.description;  				TextWidget buttonLabel = new TextWidget(addOnDescription' pointSize: 14);  				buttonLabel.Margin = new BorderDouble(left: 10);  				buttonLabel.VAnchor = Agg.UI.VAnchor.ParentCenter;  				macroRow.AddChild(buttonLabel);    				if (!userHasPermission)  				{  					TextWidget demoLabel = new TextWidget("(" + "demo".Localize() + ")"' pointSize: 10);    					demoLabel.Margin = new BorderDouble(left: 4);  					demoLabel.VAnchor = Agg.UI.VAnchor.ParentCenter;  					macroRow.AddChild(demoLabel);  				}    				macroRow.AddChild(new HorizontalSpacer());    				CreatorInformation callCorrectFunctionHold = creatorInfo;  				pluginRow.Click += (sender' e) =>  				{  					if (RegisteredCreators.Instance.Creators.Count > 0)  					{  						UiThread.RunOnIdle(CloseOnIdle' callCorrectFunctionHold);  					}  					else  					{  						UiThread.RunOnIdle(CloseOnIdle);  					}  				};    				pluginRow.Cursor = Cursors.Hand;  				macroRow.Selectable = false;  				pluginRow.AddChild(macroRow);    				pluginListingContainer.AddChild(pluginRow);    				if (!userHasPermission)  				{  					Button unlockButton = unlockButtonFactory.Generate("Unlock".Localize());  					unlockButton.Margin = new BorderDouble(0);  					unlockButton.Cursor = Cursors.Hand;  					unlockButton.Click += (sender' e) =>  					{  						callCorrectFunctionHold.unlockFunction();  					};  					pluginListingContainer.AddChild(unlockButton);  				}    				pluginRowContainer.AddChild(pluginListingContainer);  				if (callCorrectFunctionHold.unlockRegisterFunction != null)  				{  					callCorrectFunctionHold.unlockRegisterFunction(TriggerReload' ref unregisterEvents);  				}  			}
Magic Number,MatterHackers.MatterControl.CreatorPlugins,PluginChooserWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\PluginChooserWindow.cs,AddElements,The following statement contains a magic number: foreach (CreatorInformation creatorInfo in RegisteredCreators.Instance.Creators)  			{  				FlowLayoutWidget pluginListingContainer = new FlowLayoutWidget();  				pluginListingContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				pluginListingContainer.BackgroundColor = RGBA_Bytes.White;  				pluginListingContainer.Padding = new BorderDouble(0);  				pluginListingContainer.Margin = new BorderDouble(6' 0' 6' 6);    				ClickWidget pluginRow = new ClickWidget();  				pluginRow.Margin = new BorderDouble(6' 0' 6' 0);  				pluginRow.Height = 38;  				pluginRow.HAnchor = Agg.UI.HAnchor.ParentLeftRight;    				FlowLayoutWidget macroRow = new FlowLayoutWidget();  				macroRow.AnchorAll();  				macroRow.BackgroundColor = RGBA_Bytes.White;    				if (creatorInfo.iconPath != "")  				{  					ImageBuffer imageBuffer = LoadImage(creatorInfo.iconPath);  					ImageWidget imageWidget = new ImageWidget(imageBuffer);  					imageWidget.VAnchor = Agg.UI.VAnchor.ParentCenter;  					macroRow.AddChild(imageWidget);  				}    				bool userHasPermission;  				if (!creatorInfo.paidAddOnFlag)  				{  					userHasPermission = true;  				}  				else  				{  					userHasPermission = creatorInfo.permissionFunction();  				}    				string addOnDescription;  				addOnDescription = creatorInfo.description;  				TextWidget buttonLabel = new TextWidget(addOnDescription' pointSize: 14);  				buttonLabel.Margin = new BorderDouble(left: 10);  				buttonLabel.VAnchor = Agg.UI.VAnchor.ParentCenter;  				macroRow.AddChild(buttonLabel);    				if (!userHasPermission)  				{  					TextWidget demoLabel = new TextWidget("(" + "demo".Localize() + ")"' pointSize: 10);    					demoLabel.Margin = new BorderDouble(left: 4);  					demoLabel.VAnchor = Agg.UI.VAnchor.ParentCenter;  					macroRow.AddChild(demoLabel);  				}    				macroRow.AddChild(new HorizontalSpacer());    				CreatorInformation callCorrectFunctionHold = creatorInfo;  				pluginRow.Click += (sender' e) =>  				{  					if (RegisteredCreators.Instance.Creators.Count > 0)  					{  						UiThread.RunOnIdle(CloseOnIdle' callCorrectFunctionHold);  					}  					else  					{  						UiThread.RunOnIdle(CloseOnIdle);  					}  				};    				pluginRow.Cursor = Cursors.Hand;  				macroRow.Selectable = false;  				pluginRow.AddChild(macroRow);    				pluginListingContainer.AddChild(pluginRow);    				if (!userHasPermission)  				{  					Button unlockButton = unlockButtonFactory.Generate("Unlock".Localize());  					unlockButton.Margin = new BorderDouble(0);  					unlockButton.Cursor = Cursors.Hand;  					unlockButton.Click += (sender' e) =>  					{  						callCorrectFunctionHold.unlockFunction();  					};  					pluginListingContainer.AddChild(unlockButton);  				}    				pluginRowContainer.AddChild(pluginListingContainer);  				if (callCorrectFunctionHold.unlockRegisterFunction != null)  				{  					callCorrectFunctionHold.unlockRegisterFunction(TriggerReload' ref unregisterEvents);  				}  			}
Magic Number,MatterHackers.MatterControl.CreatorPlugins,PluginChooserWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\PluginChooserWindow.cs,AddElements,The following statement contains a magic number: foreach (CreatorInformation creatorInfo in RegisteredCreators.Instance.Creators)  			{  				FlowLayoutWidget pluginListingContainer = new FlowLayoutWidget();  				pluginListingContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				pluginListingContainer.BackgroundColor = RGBA_Bytes.White;  				pluginListingContainer.Padding = new BorderDouble(0);  				pluginListingContainer.Margin = new BorderDouble(6' 0' 6' 6);    				ClickWidget pluginRow = new ClickWidget();  				pluginRow.Margin = new BorderDouble(6' 0' 6' 0);  				pluginRow.Height = 38;  				pluginRow.HAnchor = Agg.UI.HAnchor.ParentLeftRight;    				FlowLayoutWidget macroRow = new FlowLayoutWidget();  				macroRow.AnchorAll();  				macroRow.BackgroundColor = RGBA_Bytes.White;    				if (creatorInfo.iconPath != "")  				{  					ImageBuffer imageBuffer = LoadImage(creatorInfo.iconPath);  					ImageWidget imageWidget = new ImageWidget(imageBuffer);  					imageWidget.VAnchor = Agg.UI.VAnchor.ParentCenter;  					macroRow.AddChild(imageWidget);  				}    				bool userHasPermission;  				if (!creatorInfo.paidAddOnFlag)  				{  					userHasPermission = true;  				}  				else  				{  					userHasPermission = creatorInfo.permissionFunction();  				}    				string addOnDescription;  				addOnDescription = creatorInfo.description;  				TextWidget buttonLabel = new TextWidget(addOnDescription' pointSize: 14);  				buttonLabel.Margin = new BorderDouble(left: 10);  				buttonLabel.VAnchor = Agg.UI.VAnchor.ParentCenter;  				macroRow.AddChild(buttonLabel);    				if (!userHasPermission)  				{  					TextWidget demoLabel = new TextWidget("(" + "demo".Localize() + ")"' pointSize: 10);    					demoLabel.Margin = new BorderDouble(left: 4);  					demoLabel.VAnchor = Agg.UI.VAnchor.ParentCenter;  					macroRow.AddChild(demoLabel);  				}    				macroRow.AddChild(new HorizontalSpacer());    				CreatorInformation callCorrectFunctionHold = creatorInfo;  				pluginRow.Click += (sender' e) =>  				{  					if (RegisteredCreators.Instance.Creators.Count > 0)  					{  						UiThread.RunOnIdle(CloseOnIdle' callCorrectFunctionHold);  					}  					else  					{  						UiThread.RunOnIdle(CloseOnIdle);  					}  				};    				pluginRow.Cursor = Cursors.Hand;  				macroRow.Selectable = false;  				pluginRow.AddChild(macroRow);    				pluginListingContainer.AddChild(pluginRow);    				if (!userHasPermission)  				{  					Button unlockButton = unlockButtonFactory.Generate("Unlock".Localize());  					unlockButton.Margin = new BorderDouble(0);  					unlockButton.Cursor = Cursors.Hand;  					unlockButton.Click += (sender' e) =>  					{  						callCorrectFunctionHold.unlockFunction();  					};  					pluginListingContainer.AddChild(unlockButton);  				}    				pluginRowContainer.AddChild(pluginListingContainer);  				if (callCorrectFunctionHold.unlockRegisterFunction != null)  				{  					callCorrectFunctionHold.unlockRegisterFunction(TriggerReload' ref unregisterEvents);  				}  			}
Magic Number,MatterHackers.MatterControl.CreatorPlugins,PluginChooserWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\PluginChooserWindow.cs,AddElements,The following statement contains a magic number: foreach (CreatorInformation creatorInfo in RegisteredCreators.Instance.Creators)  			{  				FlowLayoutWidget pluginListingContainer = new FlowLayoutWidget();  				pluginListingContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				pluginListingContainer.BackgroundColor = RGBA_Bytes.White;  				pluginListingContainer.Padding = new BorderDouble(0);  				pluginListingContainer.Margin = new BorderDouble(6' 0' 6' 6);    				ClickWidget pluginRow = new ClickWidget();  				pluginRow.Margin = new BorderDouble(6' 0' 6' 0);  				pluginRow.Height = 38;  				pluginRow.HAnchor = Agg.UI.HAnchor.ParentLeftRight;    				FlowLayoutWidget macroRow = new FlowLayoutWidget();  				macroRow.AnchorAll();  				macroRow.BackgroundColor = RGBA_Bytes.White;    				if (creatorInfo.iconPath != "")  				{  					ImageBuffer imageBuffer = LoadImage(creatorInfo.iconPath);  					ImageWidget imageWidget = new ImageWidget(imageBuffer);  					imageWidget.VAnchor = Agg.UI.VAnchor.ParentCenter;  					macroRow.AddChild(imageWidget);  				}    				bool userHasPermission;  				if (!creatorInfo.paidAddOnFlag)  				{  					userHasPermission = true;  				}  				else  				{  					userHasPermission = creatorInfo.permissionFunction();  				}    				string addOnDescription;  				addOnDescription = creatorInfo.description;  				TextWidget buttonLabel = new TextWidget(addOnDescription' pointSize: 14);  				buttonLabel.Margin = new BorderDouble(left: 10);  				buttonLabel.VAnchor = Agg.UI.VAnchor.ParentCenter;  				macroRow.AddChild(buttonLabel);    				if (!userHasPermission)  				{  					TextWidget demoLabel = new TextWidget("(" + "demo".Localize() + ")"' pointSize: 10);    					demoLabel.Margin = new BorderDouble(left: 4);  					demoLabel.VAnchor = Agg.UI.VAnchor.ParentCenter;  					macroRow.AddChild(demoLabel);  				}    				macroRow.AddChild(new HorizontalSpacer());    				CreatorInformation callCorrectFunctionHold = creatorInfo;  				pluginRow.Click += (sender' e) =>  				{  					if (RegisteredCreators.Instance.Creators.Count > 0)  					{  						UiThread.RunOnIdle(CloseOnIdle' callCorrectFunctionHold);  					}  					else  					{  						UiThread.RunOnIdle(CloseOnIdle);  					}  				};    				pluginRow.Cursor = Cursors.Hand;  				macroRow.Selectable = false;  				pluginRow.AddChild(macroRow);    				pluginListingContainer.AddChild(pluginRow);    				if (!userHasPermission)  				{  					Button unlockButton = unlockButtonFactory.Generate("Unlock".Localize());  					unlockButton.Margin = new BorderDouble(0);  					unlockButton.Cursor = Cursors.Hand;  					unlockButton.Click += (sender' e) =>  					{  						callCorrectFunctionHold.unlockFunction();  					};  					pluginListingContainer.AddChild(unlockButton);  				}    				pluginRowContainer.AddChild(pluginListingContainer);  				if (callCorrectFunctionHold.unlockRegisterFunction != null)  				{  					callCorrectFunctionHold.unlockRegisterFunction(TriggerReload' ref unregisterEvents);  				}  			}
Magic Number,MatterHackers.MatterControl.CreatorPlugins,PluginChooserWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\PluginChooserWindow.cs,AddElements,The following statement contains a magic number: foreach (CreatorInformation creatorInfo in RegisteredCreators.Instance.Creators)  			{  				FlowLayoutWidget pluginListingContainer = new FlowLayoutWidget();  				pluginListingContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				pluginListingContainer.BackgroundColor = RGBA_Bytes.White;  				pluginListingContainer.Padding = new BorderDouble(0);  				pluginListingContainer.Margin = new BorderDouble(6' 0' 6' 6);    				ClickWidget pluginRow = new ClickWidget();  				pluginRow.Margin = new BorderDouble(6' 0' 6' 0);  				pluginRow.Height = 38;  				pluginRow.HAnchor = Agg.UI.HAnchor.ParentLeftRight;    				FlowLayoutWidget macroRow = new FlowLayoutWidget();  				macroRow.AnchorAll();  				macroRow.BackgroundColor = RGBA_Bytes.White;    				if (creatorInfo.iconPath != "")  				{  					ImageBuffer imageBuffer = LoadImage(creatorInfo.iconPath);  					ImageWidget imageWidget = new ImageWidget(imageBuffer);  					imageWidget.VAnchor = Agg.UI.VAnchor.ParentCenter;  					macroRow.AddChild(imageWidget);  				}    				bool userHasPermission;  				if (!creatorInfo.paidAddOnFlag)  				{  					userHasPermission = true;  				}  				else  				{  					userHasPermission = creatorInfo.permissionFunction();  				}    				string addOnDescription;  				addOnDescription = creatorInfo.description;  				TextWidget buttonLabel = new TextWidget(addOnDescription' pointSize: 14);  				buttonLabel.Margin = new BorderDouble(left: 10);  				buttonLabel.VAnchor = Agg.UI.VAnchor.ParentCenter;  				macroRow.AddChild(buttonLabel);    				if (!userHasPermission)  				{  					TextWidget demoLabel = new TextWidget("(" + "demo".Localize() + ")"' pointSize: 10);    					demoLabel.Margin = new BorderDouble(left: 4);  					demoLabel.VAnchor = Agg.UI.VAnchor.ParentCenter;  					macroRow.AddChild(demoLabel);  				}    				macroRow.AddChild(new HorizontalSpacer());    				CreatorInformation callCorrectFunctionHold = creatorInfo;  				pluginRow.Click += (sender' e) =>  				{  					if (RegisteredCreators.Instance.Creators.Count > 0)  					{  						UiThread.RunOnIdle(CloseOnIdle' callCorrectFunctionHold);  					}  					else  					{  						UiThread.RunOnIdle(CloseOnIdle);  					}  				};    				pluginRow.Cursor = Cursors.Hand;  				macroRow.Selectable = false;  				pluginRow.AddChild(macroRow);    				pluginListingContainer.AddChild(pluginRow);    				if (!userHasPermission)  				{  					Button unlockButton = unlockButtonFactory.Generate("Unlock".Localize());  					unlockButton.Margin = new BorderDouble(0);  					unlockButton.Cursor = Cursors.Hand;  					unlockButton.Click += (sender' e) =>  					{  						callCorrectFunctionHold.unlockFunction();  					};  					pluginListingContainer.AddChild(unlockButton);  				}    				pluginRowContainer.AddChild(pluginListingContainer);  				if (callCorrectFunctionHold.unlockRegisterFunction != null)  				{  					callCorrectFunctionHold.unlockRegisterFunction(TriggerReload' ref unregisterEvents);  				}  			}
Magic Number,MatterHackers.MatterControl.CreatorPlugins,PluginChooserWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\PluginChooserWindow.cs,AddElements,The following statement contains a magic number: foreach (CreatorInformation creatorInfo in RegisteredCreators.Instance.Creators)  			{  				FlowLayoutWidget pluginListingContainer = new FlowLayoutWidget();  				pluginListingContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				pluginListingContainer.BackgroundColor = RGBA_Bytes.White;  				pluginListingContainer.Padding = new BorderDouble(0);  				pluginListingContainer.Margin = new BorderDouble(6' 0' 6' 6);    				ClickWidget pluginRow = new ClickWidget();  				pluginRow.Margin = new BorderDouble(6' 0' 6' 0);  				pluginRow.Height = 38;  				pluginRow.HAnchor = Agg.UI.HAnchor.ParentLeftRight;    				FlowLayoutWidget macroRow = new FlowLayoutWidget();  				macroRow.AnchorAll();  				macroRow.BackgroundColor = RGBA_Bytes.White;    				if (creatorInfo.iconPath != "")  				{  					ImageBuffer imageBuffer = LoadImage(creatorInfo.iconPath);  					ImageWidget imageWidget = new ImageWidget(imageBuffer);  					imageWidget.VAnchor = Agg.UI.VAnchor.ParentCenter;  					macroRow.AddChild(imageWidget);  				}    				bool userHasPermission;  				if (!creatorInfo.paidAddOnFlag)  				{  					userHasPermission = true;  				}  				else  				{  					userHasPermission = creatorInfo.permissionFunction();  				}    				string addOnDescription;  				addOnDescription = creatorInfo.description;  				TextWidget buttonLabel = new TextWidget(addOnDescription' pointSize: 14);  				buttonLabel.Margin = new BorderDouble(left: 10);  				buttonLabel.VAnchor = Agg.UI.VAnchor.ParentCenter;  				macroRow.AddChild(buttonLabel);    				if (!userHasPermission)  				{  					TextWidget demoLabel = new TextWidget("(" + "demo".Localize() + ")"' pointSize: 10);    					demoLabel.Margin = new BorderDouble(left: 4);  					demoLabel.VAnchor = Agg.UI.VAnchor.ParentCenter;  					macroRow.AddChild(demoLabel);  				}    				macroRow.AddChild(new HorizontalSpacer());    				CreatorInformation callCorrectFunctionHold = creatorInfo;  				pluginRow.Click += (sender' e) =>  				{  					if (RegisteredCreators.Instance.Creators.Count > 0)  					{  						UiThread.RunOnIdle(CloseOnIdle' callCorrectFunctionHold);  					}  					else  					{  						UiThread.RunOnIdle(CloseOnIdle);  					}  				};    				pluginRow.Cursor = Cursors.Hand;  				macroRow.Selectable = false;  				pluginRow.AddChild(macroRow);    				pluginListingContainer.AddChild(pluginRow);    				if (!userHasPermission)  				{  					Button unlockButton = unlockButtonFactory.Generate("Unlock".Localize());  					unlockButton.Margin = new BorderDouble(0);  					unlockButton.Cursor = Cursors.Hand;  					unlockButton.Click += (sender' e) =>  					{  						callCorrectFunctionHold.unlockFunction();  					};  					pluginListingContainer.AddChild(unlockButton);  				}    				pluginRowContainer.AddChild(pluginListingContainer);  				if (callCorrectFunctionHold.unlockRegisterFunction != null)  				{  					callCorrectFunctionHold.unlockRegisterFunction(TriggerReload' ref unregisterEvents);  				}  			}
Magic Number,MatterHackers.MatterControl.CreatorPlugins,PluginChooserWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\PluginChooserWindow.cs,AddElements,The following statement contains a magic number: foreach (CreatorInformation creatorInfo in RegisteredCreators.Instance.Creators)  			{  				FlowLayoutWidget pluginListingContainer = new FlowLayoutWidget();  				pluginListingContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				pluginListingContainer.BackgroundColor = RGBA_Bytes.White;  				pluginListingContainer.Padding = new BorderDouble(0);  				pluginListingContainer.Margin = new BorderDouble(6' 0' 6' 6);    				ClickWidget pluginRow = new ClickWidget();  				pluginRow.Margin = new BorderDouble(6' 0' 6' 0);  				pluginRow.Height = 38;  				pluginRow.HAnchor = Agg.UI.HAnchor.ParentLeftRight;    				FlowLayoutWidget macroRow = new FlowLayoutWidget();  				macroRow.AnchorAll();  				macroRow.BackgroundColor = RGBA_Bytes.White;    				if (creatorInfo.iconPath != "")  				{  					ImageBuffer imageBuffer = LoadImage(creatorInfo.iconPath);  					ImageWidget imageWidget = new ImageWidget(imageBuffer);  					imageWidget.VAnchor = Agg.UI.VAnchor.ParentCenter;  					macroRow.AddChild(imageWidget);  				}    				bool userHasPermission;  				if (!creatorInfo.paidAddOnFlag)  				{  					userHasPermission = true;  				}  				else  				{  					userHasPermission = creatorInfo.permissionFunction();  				}    				string addOnDescription;  				addOnDescription = creatorInfo.description;  				TextWidget buttonLabel = new TextWidget(addOnDescription' pointSize: 14);  				buttonLabel.Margin = new BorderDouble(left: 10);  				buttonLabel.VAnchor = Agg.UI.VAnchor.ParentCenter;  				macroRow.AddChild(buttonLabel);    				if (!userHasPermission)  				{  					TextWidget demoLabel = new TextWidget("(" + "demo".Localize() + ")"' pointSize: 10);    					demoLabel.Margin = new BorderDouble(left: 4);  					demoLabel.VAnchor = Agg.UI.VAnchor.ParentCenter;  					macroRow.AddChild(demoLabel);  				}    				macroRow.AddChild(new HorizontalSpacer());    				CreatorInformation callCorrectFunctionHold = creatorInfo;  				pluginRow.Click += (sender' e) =>  				{  					if (RegisteredCreators.Instance.Creators.Count > 0)  					{  						UiThread.RunOnIdle(CloseOnIdle' callCorrectFunctionHold);  					}  					else  					{  						UiThread.RunOnIdle(CloseOnIdle);  					}  				};    				pluginRow.Cursor = Cursors.Hand;  				macroRow.Selectable = false;  				pluginRow.AddChild(macroRow);    				pluginListingContainer.AddChild(pluginRow);    				if (!userHasPermission)  				{  					Button unlockButton = unlockButtonFactory.Generate("Unlock".Localize());  					unlockButton.Margin = new BorderDouble(0);  					unlockButton.Cursor = Cursors.Hand;  					unlockButton.Click += (sender' e) =>  					{  						callCorrectFunctionHold.unlockFunction();  					};  					pluginListingContainer.AddChild(unlockButton);  				}    				pluginRowContainer.AddChild(pluginListingContainer);  				if (callCorrectFunctionHold.unlockRegisterFunction != null)  				{  					callCorrectFunctionHold.unlockRegisterFunction(TriggerReload' ref unregisterEvents);  				}  			}
Magic Number,MatterHackers.MatterControl.CreatorPlugins,PluginChooserWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\PluginChooserWindow.cs,AddElements,The following statement contains a magic number: foreach (CreatorInformation creatorInfo in RegisteredCreators.Instance.Creators)  			{  				FlowLayoutWidget pluginListingContainer = new FlowLayoutWidget();  				pluginListingContainer.HAnchor = Agg.UI.HAnchor.ParentLeftRight;  				pluginListingContainer.BackgroundColor = RGBA_Bytes.White;  				pluginListingContainer.Padding = new BorderDouble(0);  				pluginListingContainer.Margin = new BorderDouble(6' 0' 6' 6);    				ClickWidget pluginRow = new ClickWidget();  				pluginRow.Margin = new BorderDouble(6' 0' 6' 0);  				pluginRow.Height = 38;  				pluginRow.HAnchor = Agg.UI.HAnchor.ParentLeftRight;    				FlowLayoutWidget macroRow = new FlowLayoutWidget();  				macroRow.AnchorAll();  				macroRow.BackgroundColor = RGBA_Bytes.White;    				if (creatorInfo.iconPath != "")  				{  					ImageBuffer imageBuffer = LoadImage(creatorInfo.iconPath);  					ImageWidget imageWidget = new ImageWidget(imageBuffer);  					imageWidget.VAnchor = Agg.UI.VAnchor.ParentCenter;  					macroRow.AddChild(imageWidget);  				}    				bool userHasPermission;  				if (!creatorInfo.paidAddOnFlag)  				{  					userHasPermission = true;  				}  				else  				{  					userHasPermission = creatorInfo.permissionFunction();  				}    				string addOnDescription;  				addOnDescription = creatorInfo.description;  				TextWidget buttonLabel = new TextWidget(addOnDescription' pointSize: 14);  				buttonLabel.Margin = new BorderDouble(left: 10);  				buttonLabel.VAnchor = Agg.UI.VAnchor.ParentCenter;  				macroRow.AddChild(buttonLabel);    				if (!userHasPermission)  				{  					TextWidget demoLabel = new TextWidget("(" + "demo".Localize() + ")"' pointSize: 10);    					demoLabel.Margin = new BorderDouble(left: 4);  					demoLabel.VAnchor = Agg.UI.VAnchor.ParentCenter;  					macroRow.AddChild(demoLabel);  				}    				macroRow.AddChild(new HorizontalSpacer());    				CreatorInformation callCorrectFunctionHold = creatorInfo;  				pluginRow.Click += (sender' e) =>  				{  					if (RegisteredCreators.Instance.Creators.Count > 0)  					{  						UiThread.RunOnIdle(CloseOnIdle' callCorrectFunctionHold);  					}  					else  					{  						UiThread.RunOnIdle(CloseOnIdle);  					}  				};    				pluginRow.Cursor = Cursors.Hand;  				macroRow.Selectable = false;  				pluginRow.AddChild(macroRow);    				pluginListingContainer.AddChild(pluginRow);    				if (!userHasPermission)  				{  					Button unlockButton = unlockButtonFactory.Generate("Unlock".Localize());  					unlockButton.Margin = new BorderDouble(0);  					unlockButton.Cursor = Cursors.Hand;  					unlockButton.Click += (sender' e) =>  					{  						callCorrectFunctionHold.unlockFunction();  					};  					pluginListingContainer.AddChild(unlockButton);  				}    				pluginRowContainer.AddChild(pluginListingContainer);  				if (callCorrectFunctionHold.unlockRegisterFunction != null)  				{  					callCorrectFunctionHold.unlockRegisterFunction(TriggerReload' ref unregisterEvents);  				}  			}
Magic Number,MatterHackers.MatterControl.CreatorPlugins,PluginChooserWindow,C:\repos\MatterHackers_MatterControl\CustomWidgets\PluginChooserWindow.cs,AddElements,The following statement contains a magic number: buttonRow.Padding = new BorderDouble(0' 3);
Magic Number,MatterHackers.MatterControl.ContactForm,ContactFormWidget,C:\repos\MatterHackers_MatterControl\AboutPage\ContactForm.cs,LabelGenerator,The following statement contains a magic number: formLabel.Margin = new BorderDouble(bottom: 2);
Magic Number,MatterHackers.MatterControl.ContactForm,ContactFormWidget,C:\repos\MatterHackers_MatterControl\AboutPage\ContactForm.cs,ErrorMessageGenerator,The following statement contains a magic number: TextWidget formLabel = new TextWidget(""' pointSize: 11);
Magic Number,MatterHackers.MatterControl.ContactForm,ContactFormWidget,C:\repos\MatterHackers_MatterControl\AboutPage\ContactForm.cs,ErrorMessageGenerator,The following statement contains a magic number: formLabel.Margin = new BorderDouble(0' 5);
Magic Number,MatterHackers.MatterControl.ContactForm,ContactFormWidget,C:\repos\MatterHackers_MatterControl\AboutPage\ContactForm.cs,DoLayout,The following statement contains a magic number: labelContainer.Height = 30;
Magic Number,MatterHackers.MatterControl.ContactForm,ContactFormWidget,C:\repos\MatterHackers_MatterControl\AboutPage\ContactForm.cs,DoLayout,The following statement contains a magic number: TextWidget formLabel = new TextWidget("How can we improve?".Localize()' pointSize: 16);
Magic Number,MatterHackers.MatterControl.ContactForm,ContactFormWidget,C:\repos\MatterHackers_MatterControl\AboutPage\ContactForm.cs,DoLayout,The following statement contains a magic number: formLabel.Margin = new BorderDouble(6' 3' 6' 6);
Magic Number,MatterHackers.MatterControl.ContactForm,ContactFormWidget,C:\repos\MatterHackers_MatterControl\AboutPage\ContactForm.cs,DoLayout,The following statement contains a magic number: formLabel.Margin = new BorderDouble(6' 3' 6' 6);
Magic Number,MatterHackers.MatterControl.ContactForm,ContactFormWidget,C:\repos\MatterHackers_MatterControl\AboutPage\ContactForm.cs,DoLayout,The following statement contains a magic number: formLabel.Margin = new BorderDouble(6' 3' 6' 6);
Magic Number,MatterHackers.MatterControl.ContactForm,ContactFormWidget,C:\repos\MatterHackers_MatterControl\AboutPage\ContactForm.cs,DoLayout,The following statement contains a magic number: formLabel.Margin = new BorderDouble(6' 3' 6' 6);
Magic Number,MatterHackers.MatterControl.ContactForm,ContactFormWidget,C:\repos\MatterHackers_MatterControl\AboutPage\ContactForm.cs,DoLayout,The following statement contains a magic number: centerContainer.Padding = new BorderDouble(3' 0' 3' 3);
Magic Number,MatterHackers.MatterControl.ContactForm,ContactFormWidget,C:\repos\MatterHackers_MatterControl\AboutPage\ContactForm.cs,DoLayout,The following statement contains a magic number: centerContainer.Padding = new BorderDouble(3' 0' 3' 3);
Magic Number,MatterHackers.MatterControl.ContactForm,ContactFormWidget,C:\repos\MatterHackers_MatterControl\AboutPage\ContactForm.cs,DoLayout,The following statement contains a magic number: centerContainer.Padding = new BorderDouble(3' 0' 3' 3);
Magic Number,MatterHackers.MatterControl.ContactForm,ContactFormWidget,C:\repos\MatterHackers_MatterControl\AboutPage\ContactForm.cs,DoLayout,The following statement contains a magic number: messageContainer.Padding = new BorderDouble(10);
Magic Number,MatterHackers.MatterControl.ContactForm,ContactFormWidget,C:\repos\MatterHackers_MatterControl\AboutPage\ContactForm.cs,DoLayout,The following statement contains a magic number: submissionStatus = new TextWidget("Submitting your information...".Localize()' pointSize: 13);
Magic Number,MatterHackers.MatterControl.ContactForm,ContactFormWidget,C:\repos\MatterHackers_MatterControl\AboutPage\ContactForm.cs,DoLayout,The following statement contains a magic number: submissionStatus.Margin = new BorderDouble(0' 5);
Magic Number,MatterHackers.MatterControl.ContactForm,ContactFormWidget,C:\repos\MatterHackers_MatterControl\AboutPage\ContactForm.cs,DoLayout,The following statement contains a magic number: formContainer.Padding = new BorderDouble(10);
Magic Number,MatterHackers.MatterControl.ContactForm,ContactFormWidget,C:\repos\MatterHackers_MatterControl\AboutPage\ContactForm.cs,DoLayout,The following statement contains a magic number: detailInput = new MHTextEditWidget(bodyText' pixelHeight: 120' multiLine: true);
Magic Number,MatterHackers.MatterControl.ContactForm,ContactFormWidget,C:\repos\MatterHackers_MatterControl\AboutPage\ContactForm.cs,GetButtonButtonPanel,The following statement contains a magic number: buttonBottomPanel.Padding = new BorderDouble(3' 3);
Magic Number,MatterHackers.MatterControl.ContactForm,ContactFormWidget,C:\repos\MatterHackers_MatterControl\AboutPage\ContactForm.cs,GetButtonButtonPanel,The following statement contains a magic number: buttonBottomPanel.Padding = new BorderDouble(3' 3);
Magic Number,MatterHackers.MatterControl.ContactForm,ContactFormWidget,C:\repos\MatterHackers_MatterControl\AboutPage\ContactForm.cs,SetButtonAttributes,The following statement contains a magic number: whiteButtonFactory.FixedWidth = 138 * GuiWidget.DeviceScale;
Magic Number,MatterHackers.MatterControl.ContactForm,ContactFormWidget,C:\repos\MatterHackers_MatterControl\AboutPage\ContactForm.cs,SetButtonAttributes,The following statement contains a magic number: whiteButtonFactory.hoverFillColor = new RGBA_Bytes(255' 255' 255' 200);
Magic Number,MatterHackers.MatterControl.ContactForm,ContactFormWidget,C:\repos\MatterHackers_MatterControl\AboutPage\ContactForm.cs,SetButtonAttributes,The following statement contains a magic number: whiteButtonFactory.hoverFillColor = new RGBA_Bytes(255' 255' 255' 200);
Magic Number,MatterHackers.MatterControl.ContactForm,ContactFormWidget,C:\repos\MatterHackers_MatterControl\AboutPage\ContactForm.cs,SetButtonAttributes,The following statement contains a magic number: whiteButtonFactory.hoverFillColor = new RGBA_Bytes(255' 255' 255' 200);
Magic Number,MatterHackers.MatterControl.ContactForm,ContactFormWidget,C:\repos\MatterHackers_MatterControl\AboutPage\ContactForm.cs,SetButtonAttributes,The following statement contains a magic number: whiteButtonFactory.hoverFillColor = new RGBA_Bytes(255' 255' 255' 200);
Magic Number,MatterHackers.MatterControl.ContactForm,ContactFormWindow,C:\repos\MatterHackers_MatterControl\AboutPage\ContactForm.cs,ContactFormWindow,The following statement contains a magic number: MinimumSize = new Vector2(500' 550);
Magic Number,MatterHackers.MatterControl.ContactForm,ContactFormWindow,C:\repos\MatterHackers_MatterControl\AboutPage\ContactForm.cs,ContactFormWindow,The following statement contains a magic number: MinimumSize = new Vector2(500' 550);
Magic Number,SQLiteWin32,SQLiteConnection,C:\repos\MatterHackers_MatterControl\DataStorage\SQLiteWin32.cs,SQLiteConnection,The following statement contains a magic number: BusyTimeout = TimeSpan.FromSeconds(0.1);
Magic Number,SQLiteWin32,SQLiteConnection,C:\repos\MatterHackers_MatterControl\DataStorage\SQLiteWin32.cs,Execute,The following statement contains a magic number: if (TimeExecution)  			{  				_sw.Stop();  				_elapsedMilliseconds += _sw.ElapsedMilliseconds;  				Debug.WriteLine(string.Format("Finished in {0} ms ({1:0.0} s total)"' _sw.ElapsedMilliseconds' _elapsedMilliseconds / 1000.0));  			}
Magic Number,SQLiteWin32,SQLiteConnection,C:\repos\MatterHackers_MatterControl\DataStorage\SQLiteWin32.cs,ExecuteScalar,The following statement contains a magic number: lock (locker)  			{  				var cmd = CreateCommand(query' args);    				if (TimeExecution)  				{  					if (_sw == null)  					{  						_sw = new System.Diagnostics.Stopwatch();  					}  					_sw.Reset();  					_sw.Start();  				}    				var r = cmd.ExecuteScalar<T>();    				if (TimeExecution)  				{  					_sw.Stop();  					_elapsedMilliseconds += _sw.ElapsedMilliseconds;  					Debug.WriteLine(string.Format("Finished in {0} ms ({1:0.0} s total)"' _sw.ElapsedMilliseconds' _elapsedMilliseconds / 1000.0));  				}    				return r;  			}
Magic Number,SQLiteWin32,SQLiteConnection,C:\repos\MatterHackers_MatterControl\DataStorage\SQLiteWin32.cs,DoSavePointExecute,The following statement contains a magic number: if (firstLen >= 2 && savepoint.Length > firstLen + 1)  			{  				int depth;  				if (Int32.TryParse(savepoint.Substring(firstLen + 1)' out depth))  				{  					// TODO: Mild race here' but inescapable without locking almost everywhere.  					if (0 <= depth && depth < _trasactionDepth)  					{  #if NETFX_CORE                          Volatile.Write (ref _trasactionDepth' depth);  #elif SILVERLIGHT  						_trasactionDepth = depth;  #else  						Thread.VolatileWrite(ref _trasactionDepth' depth);  #endif  						Execute(cmd + savepoint);  						return;  					}  				}  			}
Magic Number,SQLiteWin32,TableQuery<T>,C:\repos\MatterHackers_MatterControl\DataStorage\SQLiteWin32.cs,CompileExpr,The following statement contains a magic number: if (expr == null)  			{  				throw new NotSupportedException("Expression is NULL");  			}  			else if (expr is BinaryExpression)  			{  				var bin = (BinaryExpression)expr;    				var leftr = CompileExpr(bin.Left' queryArgs);  				var rightr = CompileExpr(bin.Right' queryArgs);    				//If either side is a parameter and is null' then handle the other side specially (for "is null"/"is not null")  				string text;  				if (leftr.CommandText == "?" && leftr.Value == null)  					text = CompileNullBinaryExpression(bin' rightr);  				else if (rightr.CommandText == "?" && rightr.Value == null)  					text = CompileNullBinaryExpression(bin' leftr);  				else  					text = "(" + leftr.CommandText + " " + GetSqlName(bin) + " " + rightr.CommandText + ")";  				return new CompileResult { CommandText = text };  			}  			else if (expr.NodeType == ExpressionType.Call)  			{  				var call = (MethodCallExpression)expr;  				var args = new CompileResult[call.Arguments.Count];  				var obj = call.Object != null ? CompileExpr(call.Object' queryArgs) : null;    				for (var i = 0; i < args.Length; i++)  				{  					args[i] = CompileExpr(call.Arguments[i]' queryArgs);  				}    				var sqlCall = "";    				if (call.Method.Name == "Like" && args.Length == 2)  				{  					sqlCall = "(" + args[0].CommandText + " like " + args[1].CommandText + ")";  				}  				else if (call.Method.Name == "Contains" && args.Length == 2)  				{  					sqlCall = "(" + args[1].CommandText + " in " + args[0].CommandText + ")";  				}  				else if (call.Method.Name == "Contains" && args.Length == 1)  				{  					if (call.Object != null && call.Object.Type == typeof(string))  					{  						sqlCall = "(" + obj.CommandText + " like ('%' || " + args[0].CommandText + " || '%'))";  					}  					else  					{  						sqlCall = "(" + args[0].CommandText + " in " + obj.CommandText + ")";  					}  				}  				else if (call.Method.Name == "StartsWith" && args.Length == 1)  				{  					sqlCall = "(" + obj.CommandText + " like (" + args[0].CommandText + " || '%'))";  				}  				else if (call.Method.Name == "EndsWith" && args.Length == 1)  				{  					sqlCall = "(" + obj.CommandText + " like ('%' || " + args[0].CommandText + "))";  				}  				else  				{  					sqlCall = call.Method.Name.ToLower() + "(" + string.Join("'"' args.Select(a => a.CommandText).ToArray()) + ")";  				}  				return new CompileResult { CommandText = sqlCall };  			}  			else if (expr.NodeType == ExpressionType.Constant)  			{  				var c = (ConstantExpression)expr;  				queryArgs.Add(c.Value);  				return new CompileResult  				{  					CommandText = "?"'  					Value = c.Value  				};  			}  			else if (expr.NodeType == ExpressionType.Convert)  			{  				var u = (UnaryExpression)expr;  				var ty = u.Type;  				var valr = CompileExpr(u.Operand' queryArgs);  				return new CompileResult  				{  					CommandText = valr.CommandText'  					Value = valr.Value != null ? ConvertTo(valr.Value' ty) : null  				};  			}  			else if (expr.NodeType == ExpressionType.MemberAccess)  			{  				var mem = (MemberExpression)expr;    				if (mem.Expression.NodeType == ExpressionType.Parameter)  				{  					//  					// This is a column of our table' output just the column name  					// Need to translate it if that column name is mapped  					//  					var columnName = Table.FindColumnWithPropertyName(mem.Member.Name).Name;  					return new CompileResult { CommandText = "\"" + columnName + "\"" };  				}  				else  				{  					object obj = null;  					if (mem.Expression != null)  					{  						var r = CompileExpr(mem.Expression' queryArgs);  						if (r.Value == null)  						{  							throw new NotSupportedException("Member access failed to compile expression");  						}  						if (r.CommandText == "?")  						{  							queryArgs.RemoveAt(queryArgs.Count - 1);  						}  						obj = r.Value;  					}    					//  					// Get the member value  					//  					object val = null;    #if !NETFX_CORE  					if (mem.Member.MemberType == MemberTypes.Property)  					{  #else  					if (mem.Member is PropertyInfo) {  #endif  						var m = (PropertyInfo)mem.Member;  						val = m.GetValue(obj' null);  #if !NETFX_CORE  					}  					else if (mem.Member.MemberType == MemberTypes.Field)  					{  #else  					} else if (mem.Member is FieldInfo) {  #endif  #if SILVERLIGHT  						val = Expression.Lambda (expr).Compile ().DynamicInvoke ();  #else  						var m = (FieldInfo)mem.Member;  						val = m.GetValue(obj);  #endif  					}  					else  					{  #if !NETFX_CORE  						throw new NotSupportedException("MemberExpr: " + mem.Member.MemberType.ToString());  #else  						throw new NotSupportedException ("MemberExpr: " + mem.Member.DeclaringType.ToString ());  #endif  					}    					//  					// Work special magic for enumerables  					//  					if (val != null && val is System.Collections.IEnumerable && !(val is string))  					{  						var sb = new System.Text.StringBuilder();  						sb.Append("(");  						var head = "";  						foreach (var a in (System.Collections.IEnumerable)val)  						{  							queryArgs.Add(a);  							sb.Append(head);  							sb.Append("?");  							head = "'";  						}  						sb.Append(")");  						return new CompileResult  						{  							CommandText = sb.ToString()'  							Value = val  						};  					}  					else  					{  						queryArgs.Add(val);  						return new CompileResult  						{  							CommandText = "?"'  							Value = val  						};  					}  				}  			}
Magic Number,SQLiteWin32,TableQuery<T>,C:\repos\MatterHackers_MatterControl\DataStorage\SQLiteWin32.cs,CompileExpr,The following statement contains a magic number: if (expr == null)  			{  				throw new NotSupportedException("Expression is NULL");  			}  			else if (expr is BinaryExpression)  			{  				var bin = (BinaryExpression)expr;    				var leftr = CompileExpr(bin.Left' queryArgs);  				var rightr = CompileExpr(bin.Right' queryArgs);    				//If either side is a parameter and is null' then handle the other side specially (for "is null"/"is not null")  				string text;  				if (leftr.CommandText == "?" && leftr.Value == null)  					text = CompileNullBinaryExpression(bin' rightr);  				else if (rightr.CommandText == "?" && rightr.Value == null)  					text = CompileNullBinaryExpression(bin' leftr);  				else  					text = "(" + leftr.CommandText + " " + GetSqlName(bin) + " " + rightr.CommandText + ")";  				return new CompileResult { CommandText = text };  			}  			else if (expr.NodeType == ExpressionType.Call)  			{  				var call = (MethodCallExpression)expr;  				var args = new CompileResult[call.Arguments.Count];  				var obj = call.Object != null ? CompileExpr(call.Object' queryArgs) : null;    				for (var i = 0; i < args.Length; i++)  				{  					args[i] = CompileExpr(call.Arguments[i]' queryArgs);  				}    				var sqlCall = "";    				if (call.Method.Name == "Like" && args.Length == 2)  				{  					sqlCall = "(" + args[0].CommandText + " like " + args[1].CommandText + ")";  				}  				else if (call.Method.Name == "Contains" && args.Length == 2)  				{  					sqlCall = "(" + args[1].CommandText + " in " + args[0].CommandText + ")";  				}  				else if (call.Method.Name == "Contains" && args.Length == 1)  				{  					if (call.Object != null && call.Object.Type == typeof(string))  					{  						sqlCall = "(" + obj.CommandText + " like ('%' || " + args[0].CommandText + " || '%'))";  					}  					else  					{  						sqlCall = "(" + args[0].CommandText + " in " + obj.CommandText + ")";  					}  				}  				else if (call.Method.Name == "StartsWith" && args.Length == 1)  				{  					sqlCall = "(" + obj.CommandText + " like (" + args[0].CommandText + " || '%'))";  				}  				else if (call.Method.Name == "EndsWith" && args.Length == 1)  				{  					sqlCall = "(" + obj.CommandText + " like ('%' || " + args[0].CommandText + "))";  				}  				else  				{  					sqlCall = call.Method.Name.ToLower() + "(" + string.Join("'"' args.Select(a => a.CommandText).ToArray()) + ")";  				}  				return new CompileResult { CommandText = sqlCall };  			}  			else if (expr.NodeType == ExpressionType.Constant)  			{  				var c = (ConstantExpression)expr;  				queryArgs.Add(c.Value);  				return new CompileResult  				{  					CommandText = "?"'  					Value = c.Value  				};  			}  			else if (expr.NodeType == ExpressionType.Convert)  			{  				var u = (UnaryExpression)expr;  				var ty = u.Type;  				var valr = CompileExpr(u.Operand' queryArgs);  				return new CompileResult  				{  					CommandText = valr.CommandText'  					Value = valr.Value != null ? ConvertTo(valr.Value' ty) : null  				};  			}  			else if (expr.NodeType == ExpressionType.MemberAccess)  			{  				var mem = (MemberExpression)expr;    				if (mem.Expression.NodeType == ExpressionType.Parameter)  				{  					//  					// This is a column of our table' output just the column name  					// Need to translate it if that column name is mapped  					//  					var columnName = Table.FindColumnWithPropertyName(mem.Member.Name).Name;  					return new CompileResult { CommandText = "\"" + columnName + "\"" };  				}  				else  				{  					object obj = null;  					if (mem.Expression != null)  					{  						var r = CompileExpr(mem.Expression' queryArgs);  						if (r.Value == null)  						{  							throw new NotSupportedException("Member access failed to compile expression");  						}  						if (r.CommandText == "?")  						{  							queryArgs.RemoveAt(queryArgs.Count - 1);  						}  						obj = r.Value;  					}    					//  					// Get the member value  					//  					object val = null;    #if !NETFX_CORE  					if (mem.Member.MemberType == MemberTypes.Property)  					{  #else  					if (mem.Member is PropertyInfo) {  #endif  						var m = (PropertyInfo)mem.Member;  						val = m.GetValue(obj' null);  #if !NETFX_CORE  					}  					else if (mem.Member.MemberType == MemberTypes.Field)  					{  #else  					} else if (mem.Member is FieldInfo) {  #endif  #if SILVERLIGHT  						val = Expression.Lambda (expr).Compile ().DynamicInvoke ();  #else  						var m = (FieldInfo)mem.Member;  						val = m.GetValue(obj);  #endif  					}  					else  					{  #if !NETFX_CORE  						throw new NotSupportedException("MemberExpr: " + mem.Member.MemberType.ToString());  #else  						throw new NotSupportedException ("MemberExpr: " + mem.Member.DeclaringType.ToString ());  #endif  					}    					//  					// Work special magic for enumerables  					//  					if (val != null && val is System.Collections.IEnumerable && !(val is string))  					{  						var sb = new System.Text.StringBuilder();  						sb.Append("(");  						var head = "";  						foreach (var a in (System.Collections.IEnumerable)val)  						{  							queryArgs.Add(a);  							sb.Append(head);  							sb.Append("?");  							head = "'";  						}  						sb.Append(")");  						return new CompileResult  						{  							CommandText = sb.ToString()'  							Value = val  						};  					}  					else  					{  						queryArgs.Add(val);  						return new CompileResult  						{  							CommandText = "?"'  							Value = val  						};  					}  				}  			}
Magic Number,SQLiteUnix,SQLiteConnection,C:\repos\MatterHackers_MatterControl\DataStorage\SQLiteUnix.cs,SQLiteConnection,The following statement contains a magic number: BusyTimeout = TimeSpan.FromSeconds(0.1);
Magic Number,SQLiteUnix,SQLiteConnection,C:\repos\MatterHackers_MatterControl\DataStorage\SQLiteUnix.cs,Execute,The following statement contains a magic number: if (TimeExecution)  			{  				_sw.Stop();  				_elapsedMilliseconds += _sw.ElapsedMilliseconds;  				Debug.WriteLine(string.Format("Finished in {0} ms ({1:0.0} s total)"' _sw.ElapsedMilliseconds' _elapsedMilliseconds / 1000.0));  			}
Magic Number,SQLiteUnix,SQLiteConnection,C:\repos\MatterHackers_MatterControl\DataStorage\SQLiteUnix.cs,ExecuteScalar,The following statement contains a magic number: lock (locker)  			{  				var cmd = CreateCommand(query' args);    				if (TimeExecution)  				{  					if (_sw == null)  					{  						_sw = new System.Diagnostics.Stopwatch();  					}  					_sw.Reset();  					_sw.Start();  				}    				var r = cmd.ExecuteScalar<T>();    				if (TimeExecution)  				{  					_sw.Stop();  					_elapsedMilliseconds += _sw.ElapsedMilliseconds;  					Debug.WriteLine(string.Format("Finished in {0} ms ({1:0.0} s total)"' _sw.ElapsedMilliseconds' _elapsedMilliseconds / 1000.0));  				}    				return r;  			}
Magic Number,SQLiteUnix,SQLiteConnection,C:\repos\MatterHackers_MatterControl\DataStorage\SQLiteUnix.cs,DoSavePointExecute,The following statement contains a magic number: if (firstLen >= 2 && savepoint.Length > firstLen + 1)  			{  				int depth;  				if (Int32.TryParse(savepoint.Substring(firstLen + 1)' out depth))  				{  					// TODO: Mild race here' but inescapable without locking almost everywhere.  					if (0 <= depth && depth < _trasactionDepth)  					{  #if NETFX_CORE                          Volatile.Write (ref _trasactionDepth' depth);  #elif SILVERLIGHT  						_trasactionDepth = depth;  #else  						Thread.VolatileWrite(ref _trasactionDepth' depth);  #endif  						Execute(cmd + savepoint);  						return;  					}  				}  			}
Magic Number,SQLiteUnix,TableQuery<T>,C:\repos\MatterHackers_MatterControl\DataStorage\SQLiteUnix.cs,CompileExpr,The following statement contains a magic number: if (expr == null)  			{  				throw new NotSupportedException("Expression is NULL");  			}  			else if (expr is BinaryExpression)  			{  				var bin = (BinaryExpression)expr;    				var leftr = CompileExpr(bin.Left' queryArgs);  				var rightr = CompileExpr(bin.Right' queryArgs);    				//If either side is a parameter and is null' then handle the other side specially (for "is null"/"is not null")  				string text;  				if (leftr.CommandText == "?" && leftr.Value == null)  					text = CompileNullBinaryExpression(bin' rightr);  				else if (rightr.CommandText == "?" && rightr.Value == null)  					text = CompileNullBinaryExpression(bin' leftr);  				else  					text = "(" + leftr.CommandText + " " + GetSqlName(bin) + " " + rightr.CommandText + ")";  				return new CompileResult { CommandText = text };  			}  			else if (expr.NodeType == ExpressionType.Call)  			{  				var call = (MethodCallExpression)expr;  				var args = new CompileResult[call.Arguments.Count];  				var obj = call.Object != null ? CompileExpr(call.Object' queryArgs) : null;    				for (var i = 0; i < args.Length; i++)  				{  					args[i] = CompileExpr(call.Arguments[i]' queryArgs);  				}    				var sqlCall = "";    				if (call.Method.Name == "Like" && args.Length == 2)  				{  					sqlCall = "(" + args[0].CommandText + " like " + args[1].CommandText + ")";  				}  				else if (call.Method.Name == "Contains" && args.Length == 2)  				{  					sqlCall = "(" + args[1].CommandText + " in " + args[0].CommandText + ")";  				}  				else if (call.Method.Name == "Contains" && args.Length == 1)  				{  					if (call.Object != null && call.Object.Type == typeof(string))  					{  						sqlCall = "(" + obj.CommandText + " like ('%' || " + args[0].CommandText + " || '%'))";  					}  					else  					{  						sqlCall = "(" + args[0].CommandText + " in " + obj.CommandText + ")";  					}  				}  				else if (call.Method.Name == "StartsWith" && args.Length == 1)  				{  					sqlCall = "(" + obj.CommandText + " like (" + args[0].CommandText + " || '%'))";  				}  				else if (call.Method.Name == "EndsWith" && args.Length == 1)  				{  					sqlCall = "(" + obj.CommandText + " like ('%' || " + args[0].CommandText + "))";  				}  				else  				{  					sqlCall = call.Method.Name.ToLower() + "(" + string.Join("'"' args.Select(a => a.CommandText).ToArray()) + ")";  				}  				return new CompileResult { CommandText = sqlCall };  			}  			else if (expr.NodeType == ExpressionType.Constant)  			{  				var c = (ConstantExpression)expr;  				queryArgs.Add(c.Value);  				return new CompileResult  				{  					CommandText = "?"'  					Value = c.Value  				};  			}  			else if (expr.NodeType == ExpressionType.Convert)  			{  				var u = (UnaryExpression)expr;  				var ty = u.Type;  				var valr = CompileExpr(u.Operand' queryArgs);  				return new CompileResult  				{  					CommandText = valr.CommandText'  					Value = valr.Value != null ? ConvertTo(valr.Value' ty) : null  				};  			}  			else if (expr.NodeType == ExpressionType.MemberAccess)  			{  				var mem = (MemberExpression)expr;    				if (mem.Expression.NodeType == ExpressionType.Parameter)  				{  					//  					// This is a column of our table' output just the column name  					// Need to translate it if that column name is mapped  					//  					var columnName = Table.FindColumnWithPropertyName(mem.Member.Name).Name;  					return new CompileResult { CommandText = "\"" + columnName + "\"" };  				}  				else  				{  					object obj = null;  					if (mem.Expression != null)  					{  						var r = CompileExpr(mem.Expression' queryArgs);  						if (r.Value == null)  						{  							throw new NotSupportedException("Member access failed to compile expression");  						}  						if (r.CommandText == "?")  						{  							queryArgs.RemoveAt(queryArgs.Count - 1);  						}  						obj = r.Value;  					}    					//  					// Get the member value  					//  					object val = null;    #if !NETFX_CORE  					if (mem.Member.MemberType == MemberTypes.Property)  					{  #else  					if (mem.Member is PropertyInfo) {  #endif  						var m = (PropertyInfo)mem.Member;  						val = m.GetValue(obj' null);  #if !NETFX_CORE  					}  					else if (mem.Member.MemberType == MemberTypes.Field)  					{  #else  					} else if (mem.Member is FieldInfo) {  #endif  #if SILVERLIGHT  						val = Expression.Lambda (expr).Compile ().DynamicInvoke ();  #else  						var m = (FieldInfo)mem.Member;  						val = m.GetValue(obj);  #endif  					}  					else  					{  #if !NETFX_CORE  						throw new NotSupportedException("MemberExpr: " + mem.Member.MemberType.ToString());  #else  						throw new NotSupportedException ("MemberExpr: " + mem.Member.DeclaringType.ToString ());  #endif  					}    					//  					// Work special magic for enumerables  					//  					if (val != null && val is System.Collections.IEnumerable && !(val is string))  					{  						var sb = new System.Text.StringBuilder();  						sb.Append("(");  						var head = "";  						foreach (var a in (System.Collections.IEnumerable)val)  						{  							queryArgs.Add(a);  							sb.Append(head);  							sb.Append("?");  							head = "'";  						}  						sb.Append(")");  						return new CompileResult  						{  							CommandText = sb.ToString()'  							Value = val  						};  					}  					else  					{  						queryArgs.Add(val);  						return new CompileResult  						{  							CommandText = "?"'  							Value = val  						};  					}  				}  			}
Magic Number,SQLiteUnix,TableQuery<T>,C:\repos\MatterHackers_MatterControl\DataStorage\SQLiteUnix.cs,CompileExpr,The following statement contains a magic number: if (expr == null)  			{  				throw new NotSupportedException("Expression is NULL");  			}  			else if (expr is BinaryExpression)  			{  				var bin = (BinaryExpression)expr;    				var leftr = CompileExpr(bin.Left' queryArgs);  				var rightr = CompileExpr(bin.Right' queryArgs);    				//If either side is a parameter and is null' then handle the other side specially (for "is null"/"is not null")  				string text;  				if (leftr.CommandText == "?" && leftr.Value == null)  					text = CompileNullBinaryExpression(bin' rightr);  				else if (rightr.CommandText == "?" && rightr.Value == null)  					text = CompileNullBinaryExpression(bin' leftr);  				else  					text = "(" + leftr.CommandText + " " + GetSqlName(bin) + " " + rightr.CommandText + ")";  				return new CompileResult { CommandText = text };  			}  			else if (expr.NodeType == ExpressionType.Call)  			{  				var call = (MethodCallExpression)expr;  				var args = new CompileResult[call.Arguments.Count];  				var obj = call.Object != null ? CompileExpr(call.Object' queryArgs) : null;    				for (var i = 0; i < args.Length; i++)  				{  					args[i] = CompileExpr(call.Arguments[i]' queryArgs);  				}    				var sqlCall = "";    				if (call.Method.Name == "Like" && args.Length == 2)  				{  					sqlCall = "(" + args[0].CommandText + " like " + args[1].CommandText + ")";  				}  				else if (call.Method.Name == "Contains" && args.Length == 2)  				{  					sqlCall = "(" + args[1].CommandText + " in " + args[0].CommandText + ")";  				}  				else if (call.Method.Name == "Contains" && args.Length == 1)  				{  					if (call.Object != null && call.Object.Type == typeof(string))  					{  						sqlCall = "(" + obj.CommandText + " like ('%' || " + args[0].CommandText + " || '%'))";  					}  					else  					{  						sqlCall = "(" + args[0].CommandText + " in " + obj.CommandText + ")";  					}  				}  				else if (call.Method.Name == "StartsWith" && args.Length == 1)  				{  					sqlCall = "(" + obj.CommandText + " like (" + args[0].CommandText + " || '%'))";  				}  				else if (call.Method.Name == "EndsWith" && args.Length == 1)  				{  					sqlCall = "(" + obj.CommandText + " like ('%' || " + args[0].CommandText + "))";  				}  				else  				{  					sqlCall = call.Method.Name.ToLower() + "(" + string.Join("'"' args.Select(a => a.CommandText).ToArray()) + ")";  				}  				return new CompileResult { CommandText = sqlCall };  			}  			else if (expr.NodeType == ExpressionType.Constant)  			{  				var c = (ConstantExpression)expr;  				queryArgs.Add(c.Value);  				return new CompileResult  				{  					CommandText = "?"'  					Value = c.Value  				};  			}  			else if (expr.NodeType == ExpressionType.Convert)  			{  				var u = (UnaryExpression)expr;  				var ty = u.Type;  				var valr = CompileExpr(u.Operand' queryArgs);  				return new CompileResult  				{  					CommandText = valr.CommandText'  					Value = valr.Value != null ? ConvertTo(valr.Value' ty) : null  				};  			}  			else if (expr.NodeType == ExpressionType.MemberAccess)  			{  				var mem = (MemberExpression)expr;    				if (mem.Expression.NodeType == ExpressionType.Parameter)  				{  					//  					// This is a column of our table' output just the column name  					// Need to translate it if that column name is mapped  					//  					var columnName = Table.FindColumnWithPropertyName(mem.Member.Name).Name;  					return new CompileResult { CommandText = "\"" + columnName + "\"" };  				}  				else  				{  					object obj = null;  					if (mem.Expression != null)  					{  						var r = CompileExpr(mem.Expression' queryArgs);  						if (r.Value == null)  						{  							throw new NotSupportedException("Member access failed to compile expression");  						}  						if (r.CommandText == "?")  						{  							queryArgs.RemoveAt(queryArgs.Count - 1);  						}  						obj = r.Value;  					}    					//  					// Get the member value  					//  					object val = null;    #if !NETFX_CORE  					if (mem.Member.MemberType == MemberTypes.Property)  					{  #else  					if (mem.Member is PropertyInfo) {  #endif  						var m = (PropertyInfo)mem.Member;  						val = m.GetValue(obj' null);  #if !NETFX_CORE  					}  					else if (mem.Member.MemberType == MemberTypes.Field)  					{  #else  					} else if (mem.Member is FieldInfo) {  #endif  #if SILVERLIGHT  						val = Expression.Lambda (expr).Compile ().DynamicInvoke ();  #else  						var m = (FieldInfo)mem.Member;  						val = m.GetValue(obj);  #endif  					}  					else  					{  #if !NETFX_CORE  						throw new NotSupportedException("MemberExpr: " + mem.Member.MemberType.ToString());  #else  						throw new NotSupportedException ("MemberExpr: " + mem.Member.DeclaringType.ToString ());  #endif  					}    					//  					// Work special magic for enumerables  					//  					if (val != null && val is System.Collections.IEnumerable && !(val is string))  					{  						var sb = new System.Text.StringBuilder();  						sb.Append("(");  						var head = "";  						foreach (var a in (System.Collections.IEnumerable)val)  						{  							queryArgs.Add(a);  							sb.Append(head);  							sb.Append("?");  							head = "'";  						}  						sb.Append(")");  						return new CompileResult  						{  							CommandText = sb.ToString()'  							Value = val  						};  					}  					else  					{  						queryArgs.Add(val);  						return new CompileResult  						{  							CommandText = "?"'  							Value = val  						};  					}  				}  			}
Magic Number,MatterHackers.MatterControl.PrinterCommunication,PrinterConnectionAndCommunication,C:\repos\MatterHackers_MatterControl\PrinterCommunication\PrinterConnectionAndCommunication.cs,BedTemperatureWasWritenToPrinter,The following statement contains a magic number: if (splitOnS.Length == 2)  			{  				string temp = splitOnS[1];  				try  				{  					double tempBeingSet = double.Parse(temp);  					if (TargetBedTemperature != tempBeingSet)  					{  						// we set the private variable so that we don't get the callbacks called and get in a loop of setting the temp  						targetBedTemperature = tempBeingSet;  						OnBedTemperatureSet(new TemperatureEventArgs(0' TargetBedTemperature));  					}  				}  				catch (Exception)  				{  				}  			}
Magic Number,MatterHackers.MatterControl.PrinterCommunication,PrinterConnectionAndCommunication,C:\repos\MatterHackers_MatterControl\PrinterCommunication\PrinterConnectionAndCommunication.cs,ConnectToActivePrinter,The following statement contains a magic number: if (ActivePrinter != null)  			{  				// Start the process of requesting permission and exit if permission is not currently granted  				if (!ActiveSliceSettings.Instance.GetValue<bool>(SettingsKey.enable_network_printing)   				    && !FrostedSerialPort.EnsureDeviceAccess())  				{  					CommunicationState = CommunicationStates.FailedToConnect;  					return;  				}    				PrinterOutputCache.Instance.Clear();  				//Attempt connecting to a specific printer  				this.stopTryingToConnect = false;  				this.FirmwareType = FirmwareTypes.Unknown;  				firmwareUriGcodeSend = false;    				// On Android' there will never be more than one serial port available for us to connect to. Override the current .ComPort value to account for  				// this aspect to ensure the validation logic that verifies port availability/in use status can proceed without additional workarounds for Android  #if __ANDROID__  				string currentPortName = FrostedSerialPort.GetPortNames().FirstOrDefault();  				if (!string.IsNullOrEmpty(currentPortName))  				{  					// TODO: Ensure that this does *not* cause a write to the settings file and should be an in memory update only  					ActiveSliceSettings.Instance?.Helpers.SetComPort(currentPortName);  				}  #endif    				if (SerialPortIsAvailable(this.ComPort))  				{  					//Create a timed callback to determine whether connection succeeded  					Timer connectionTimer = new Timer(new TimerCallback(ConnectionCallbackTimer));  					connectionTimer.Change(100' 0);    					//Create and start connection thread  					connectThread = new Thread(Connect_Thread);  					connectThread.Name = "Connect To Printer";  					connectThread.IsBackground = true;  					connectThread.Start();  				}  				else  				{  					Debug.WriteLine("Connection failed: {0}".FormatWith(this.ComPort));    					connectionFailureMessage = string.Format(  										"{0} is not available".Localize()'  										this.ComPort);    					OnConnectionFailed(null);    #if !__ANDROID__  					// Only pop up the com port helper if the USER actually CLICKED the connect button.  					if (showHelpIfNoPort)  					{  						WizardWindow.ShowComPortSetup();  					}  #endif  				}  			}
Magic Number,MatterHackers.MatterControl.PrinterCommunication,PrinterConnectionAndCommunication,C:\repos\MatterHackers_MatterControl\PrinterCommunication\PrinterConnectionAndCommunication.cs,FanSpeedWasWritenToPrinter,The following statement contains a magic number: if (splitOnS.Length != 2)  			{  				// when there is no explicit S value the assumption is 255  				splitOnS = "M106 S255".Split('S');  			}
Magic Number,MatterHackers.MatterControl.PrinterCommunication,PrinterConnectionAndCommunication,C:\repos\MatterHackers_MatterControl\PrinterCommunication\PrinterConnectionAndCommunication.cs,FanSpeedWasWritenToPrinter,The following statement contains a magic number: if (splitOnS.Length == 2)  			{  				string fanSpeedString = splitOnS[1];  				try  				{  					int fanSpeedBeingSet = int.Parse(fanSpeedString);  					if (FanSpeed0To255 != fanSpeedBeingSet)  					{  						fanSpeed = fanSpeedBeingSet;  						OnFanSpeedSet(null);  					}  				}  				catch (Exception)  				{  				}  			}
Magic Number,MatterHackers.MatterControl.PrinterCommunication,PrinterConnectionAndCommunication,C:\repos\MatterHackers_MatterControl\PrinterCommunication\PrinterConnectionAndCommunication.cs,PrintActivePart,The following statement contains a magic number: try  			{  				// If leveling is required or is currently on  				if (ActiveSliceSettings.Instance.GetValue<bool>(SettingsKey.print_leveling_required_to_print)  					|| ActiveSliceSettings.Instance.GetValue<bool>(SettingsKey.print_leveling_enabled))  				{  					PrintLevelingData levelingData = ActiveSliceSettings.Instance.Helpers.GetPrintLevelingData();  					if (levelingData?.HasBeenRunAndEnabled() != true)  					{  						LevelWizardBase.ShowPrintLevelWizard();  						return;  					}  				}    				if (ActivePrintItem != null)  				{  					string pathAndFile = ActivePrintItem.FileLocation;  					if (ActiveSliceSettings.Instance.GetValue<bool>(SettingsKey.has_sd_card_reader)  						&& pathAndFile == QueueData.SdCardFileName)  					{  						StartSdCardPrint();  					}  					else if (ActiveSliceSettings.Instance.IsValid())  					{  						if (File.Exists(pathAndFile))  						{  							// clear the output cache prior to starting a print  							PrinterOutputCache.Instance.Clear();    							string hideGCodeWarning = ApplicationSettings.Instance.get(ApplicationSettingsKey.HideGCodeWarning);    							if (Path.GetExtension(pathAndFile).ToUpper() == ".GCODE"  								&& hideGCodeWarning == null  								&& !overrideAllowGCode)  							{  								CheckBox hideGCodeWarningCheckBox = new CheckBox(doNotAskAgainMessage);  								hideGCodeWarningCheckBox.TextColor = ActiveTheme.Instance.PrimaryTextColor;  								hideGCodeWarningCheckBox.Margin = new BorderDouble(top: 6' left: 6);  								hideGCodeWarningCheckBox.HAnchor = Agg.UI.HAnchor.ParentLeft;  								hideGCodeWarningCheckBox.Click += (sender' e) =>  								{  									if (hideGCodeWarningCheckBox.Checked)  									{  										ApplicationSettings.Instance.set(ApplicationSettingsKey.HideGCodeWarning' "true");  									}  									else  									{  										ApplicationSettings.Instance.set(ApplicationSettingsKey.HideGCodeWarning' null);  									}  								};    								UiThread.RunOnIdle(() => StyledMessageBox.ShowMessageBox(onConfirmPrint' gcodeWarningMessage' "Warning - GCode file".Localize()' new GuiWidget[] { new VerticalSpacer()' hideGCodeWarningCheckBox }' StyledMessageBox.MessageType.YES_NO));  							}  							else  							{  								CommunicationState = PrinterConnectionAndCommunication.CommunicationStates.PreparingToPrint;  								PrintItemWrapper partToPrint = ActivePrintItem;  								SlicingQueue.Instance.QueuePartForSlicing(partToPrint);  								partToPrint.SlicingDone += partToPrint_SliceDone;  							}  						}  						else  						{  							string message = String.Format(removeFromQueueMessage' pathAndFile);  							StyledMessageBox.ShowMessageBox(onRemoveMessageConfirm' message' itemNotFoundMessage' StyledMessageBox.MessageType.YES_NO' "Remove".Localize()' "Cancel".Localize());  						}  					}  				}  			}  			catch (Exception)  			{  			}
Magic Number,MatterHackers.MatterControl.PrinterCommunication,PrinterConnectionAndCommunication,C:\repos\MatterHackers_MatterControl\PrinterCommunication\PrinterConnectionAndCommunication.cs,PrintActivePart,The following statement contains a magic number: try  			{  				// If leveling is required or is currently on  				if (ActiveSliceSettings.Instance.GetValue<bool>(SettingsKey.print_leveling_required_to_print)  					|| ActiveSliceSettings.Instance.GetValue<bool>(SettingsKey.print_leveling_enabled))  				{  					PrintLevelingData levelingData = ActiveSliceSettings.Instance.Helpers.GetPrintLevelingData();  					if (levelingData?.HasBeenRunAndEnabled() != true)  					{  						LevelWizardBase.ShowPrintLevelWizard();  						return;  					}  				}    				if (ActivePrintItem != null)  				{  					string pathAndFile = ActivePrintItem.FileLocation;  					if (ActiveSliceSettings.Instance.GetValue<bool>(SettingsKey.has_sd_card_reader)  						&& pathAndFile == QueueData.SdCardFileName)  					{  						StartSdCardPrint();  					}  					else if (ActiveSliceSettings.Instance.IsValid())  					{  						if (File.Exists(pathAndFile))  						{  							// clear the output cache prior to starting a print  							PrinterOutputCache.Instance.Clear();    							string hideGCodeWarning = ApplicationSettings.Instance.get(ApplicationSettingsKey.HideGCodeWarning);    							if (Path.GetExtension(pathAndFile).ToUpper() == ".GCODE"  								&& hideGCodeWarning == null  								&& !overrideAllowGCode)  							{  								CheckBox hideGCodeWarningCheckBox = new CheckBox(doNotAskAgainMessage);  								hideGCodeWarningCheckBox.TextColor = ActiveTheme.Instance.PrimaryTextColor;  								hideGCodeWarningCheckBox.Margin = new BorderDouble(top: 6' left: 6);  								hideGCodeWarningCheckBox.HAnchor = Agg.UI.HAnchor.ParentLeft;  								hideGCodeWarningCheckBox.Click += (sender' e) =>  								{  									if (hideGCodeWarningCheckBox.Checked)  									{  										ApplicationSettings.Instance.set(ApplicationSettingsKey.HideGCodeWarning' "true");  									}  									else  									{  										ApplicationSettings.Instance.set(ApplicationSettingsKey.HideGCodeWarning' null);  									}  								};    								UiThread.RunOnIdle(() => StyledMessageBox.ShowMessageBox(onConfirmPrint' gcodeWarningMessage' "Warning - GCode file".Localize()' new GuiWidget[] { new VerticalSpacer()' hideGCodeWarningCheckBox }' StyledMessageBox.MessageType.YES_NO));  							}  							else  							{  								CommunicationState = PrinterConnectionAndCommunication.CommunicationStates.PreparingToPrint;  								PrintItemWrapper partToPrint = ActivePrintItem;  								SlicingQueue.Instance.QueuePartForSlicing(partToPrint);  								partToPrint.SlicingDone += partToPrint_SliceDone;  							}  						}  						else  						{  							string message = String.Format(removeFromQueueMessage' pathAndFile);  							StyledMessageBox.ShowMessageBox(onRemoveMessageConfirm' message' itemNotFoundMessage' StyledMessageBox.MessageType.YES_NO' "Remove".Localize()' "Cancel".Localize());  						}  					}  				}  			}  			catch (Exception)  			{  			}
Magic Number,MatterHackers.MatterControl.PrinterCommunication,PrinterConnectionAndCommunication,C:\repos\MatterHackers_MatterControl\PrinterCommunication\PrinterConnectionAndCommunication.cs,PrinterStatesFirmware,The following statement contains a magic number: if (GCodeFile.GetFirstStringAfter("MACHINE_TYPE:"' foundStringEventArgs.LineToCheck' " EXTRUDER_COUNT"' ref firmwareVersionReported))  			{  				char splitChar = '^';  				if (firmwareVersionReported.Contains(splitChar))  				{  					string[] split = firmwareVersionReported.Split(splitChar);  					if (split.Count() == 2)  					{  						DeviceCode = split[0];  						firmwareVersionReported = split[1];  					}  				}    				//Firmware version was detected and is different  				if (firmwareVersionReported != "" && FirmwareVersion != firmwareVersionReported)  				{  					FirmwareVersion = firmwareVersionReported;  					OnFirmwareVersionRead(null);  				}  			}
Magic Number,MatterHackers.MatterControl.PrinterCommunication,PrinterConnectionAndCommunication,C:\repos\MatterHackers_MatterControl\PrinterCommunication\PrinterConnectionAndCommunication.cs,ArduinoDtrReset,The following statement contains a magic number: if (serialPort == null && this.ActivePrinter != null)  			{  				IFrostedSerialPort resetSerialPort = FrostedSerialPortFactory.GetAppropriateFactory(this.DriverType).Create(this.ComPort);  				resetSerialPort.Open();    				Thread.Sleep(500);    				ToggleHighLowHigh(resetSerialPort);    				resetSerialPort.Close();  			}
Magic Number,MatterHackers.MatterControl.PrinterCommunication,PrinterConnectionAndCommunication,C:\repos\MatterHackers_MatterControl\PrinterCommunication\PrinterConnectionAndCommunication.cs,RebootBoard,The following statement contains a magic number: try  			{  				if (ActiveSliceSettings.Instance.PrinterSelected)  				{  					// first make sure we are not printing if possible (cancel slicing)  					if (serialPort != null) // we still have a serial port  					{  						Stop(false);  						ClearQueuedGCode();    						CommunicationState = CommunicationStates.Disconnecting;  						ReadThread.Join();  						ToggleHighLowHigh(serialPort);  						if (serialPort != null)  						{  							serialPort.Close();  							serialPort.Dispose();  						}  						serialPort = null;  						// make sure we clear out the stream processors  						CreateStreamProcessors(null' false);  						CommunicationState = CommunicationStates.Disconnected;    						// We were connected to a printer so try to reconnect  						UiThread.RunOnIdle(() =>  						{  							//HaltConnectionThread();  							ConnectToActivePrinter();  						}' 2);  					}  					else  					{  						// We reset the board while attempting to connect' so now we don't have a serial port.  						// Create one and do the DTR to reset  						var resetSerialPort = FrostedSerialPortFactory.GetAppropriateFactory(this.DriverType).Create(this.ComPort);  						resetSerialPort.Open();    						Thread.Sleep(500);    						ToggleHighLowHigh(resetSerialPort);    						resetSerialPort.Close();    						// let the process know we canceled not ended normally.  						CommunicationState = CommunicationStates.Disconnected;  					}  				}  			}  			catch (Exception)  			{  			}
Magic Number,MatterHackers.MatterControl.PrinterCommunication,PrinterConnectionAndCommunication,C:\repos\MatterHackers_MatterControl\PrinterCommunication\PrinterConnectionAndCommunication.cs,RebootBoard,The following statement contains a magic number: try  			{  				if (ActiveSliceSettings.Instance.PrinterSelected)  				{  					// first make sure we are not printing if possible (cancel slicing)  					if (serialPort != null) // we still have a serial port  					{  						Stop(false);  						ClearQueuedGCode();    						CommunicationState = CommunicationStates.Disconnecting;  						ReadThread.Join();  						ToggleHighLowHigh(serialPort);  						if (serialPort != null)  						{  							serialPort.Close();  							serialPort.Dispose();  						}  						serialPort = null;  						// make sure we clear out the stream processors  						CreateStreamProcessors(null' false);  						CommunicationState = CommunicationStates.Disconnected;    						// We were connected to a printer so try to reconnect  						UiThread.RunOnIdle(() =>  						{  							//HaltConnectionThread();  							ConnectToActivePrinter();  						}' 2);  					}  					else  					{  						// We reset the board while attempting to connect' so now we don't have a serial port.  						// Create one and do the DTR to reset  						var resetSerialPort = FrostedSerialPortFactory.GetAppropriateFactory(this.DriverType).Create(this.ComPort);  						resetSerialPort.Open();    						Thread.Sleep(500);    						ToggleHighLowHigh(resetSerialPort);    						resetSerialPort.Close();    						// let the process know we canceled not ended normally.  						CommunicationState = CommunicationStates.Disconnected;  					}  				}  			}  			catch (Exception)  			{  			}
Magic Number,MatterHackers.MatterControl.PrinterCommunication,PrinterConnectionAndCommunication,C:\repos\MatterHackers_MatterControl\PrinterCommunication\PrinterConnectionAndCommunication.cs,ToggleHighLowHigh,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,MatterHackers.MatterControl.PrinterCommunication,PrinterConnectionAndCommunication,C:\repos\MatterHackers_MatterControl\PrinterCommunication\PrinterConnectionAndCommunication.cs,ToggleHighLowHigh,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,MatterHackers.MatterControl.PrinterCommunication,PrinterConnectionAndCommunication,C:\repos\MatterHackers_MatterControl\PrinterCommunication\PrinterConnectionAndCommunication.cs,AttemptToConnect,The following statement contains a magic number: if (serialPortIsAvailable && !serialPortIsAlreadyOpen)  			{  				if (!PrinterIsConnected)  				{  					try  					{  						serialPort = portFactory.CreateAndOpen(serialPortName' baudRate' true);  #if __ANDROID__  						ToggleHighLowHigh(serialPort);  #endif  						// wait a bit of time to let the firmware start up  						Thread.Sleep(500);  						CommunicationState = CommunicationStates.AttemptingToConnect;    						ReadThread.Join();    						Console.WriteLine("ReadFromPrinter thread created.");  						ReadThread.Start();    						CreateStreamProcessors(null' false);    						// We have to send a line because some printers (like old print-r-bots) do not send anything when connecting and there is no other way to know they are there.  						SendLineToPrinterNow("M110 N1");  						ClearQueuedGCode();  						// We do not need to wait for the M105  						PrintingCanContinue(null' null);  					}  					catch (System.ArgumentOutOfRangeException e)  					{  						PrinterOutputCache.Instance.WriteLine("Exception:" + e.Message);  						connectionFailureMessage = "Unsupported Baud Rate".Localize();  						OnConnectionFailed(null);  					}  					catch (Exception ex)  					{  						PrinterOutputCache.Instance.WriteLine("Exception:" + ex.Message);  						OnConnectionFailed(null);  					}  				}  			}  			else  			{  				// If the serial port isn't available (i.e. the specified port name wasn't found in GetPortNames()) or the serial  				// port is already opened in another instance or process' then report the connection problem back to the user  				connectionFailureMessage = (serialPortIsAlreadyOpen ?  					string.Format("{0} in use"' this.ComPort) :  					"Port not found".Localize());    				OnConnectionFailed(null);  			}
Magic Number,MatterHackers.MatterControl.PrinterCommunication,PrinterConnectionAndCommunication,C:\repos\MatterHackers_MatterControl\PrinterCommunication\PrinterConnectionAndCommunication.cs,ConnectionCallbackTimer,The following statement contains a magic number: if (!ContinueConnectionThread())  			{  				t.Dispose();  			}  			else  			{  				t.Change(100' 0);  			}
Magic Number,MatterHackers.MatterControl.PrinterCommunication,PrinterConnectionAndCommunication,C:\repos\MatterHackers_MatterControl\PrinterCommunication\PrinterConnectionAndCommunication.cs,partToPrint_SliceDone,The following statement contains a magic number: if (partToPrint != null)  			{  				partToPrint.SlicingDone -= partToPrint_SliceDone;  				string gcodePathAndFileName = partToPrint.GetGCodePathAndFileName();  				if (gcodePathAndFileName != "")  				{  					bool originalIsGCode = Path.GetExtension(partToPrint.FileLocation).ToUpper() == ".GCODE";  					if (File.Exists(gcodePathAndFileName))  					{  						// read the last few k of the file and see if it says "filament used". We use this marker to tell if the file finished writing  						if (originalIsGCode)  						{  							StartPrint(gcodePathAndFileName);  							return;  						}  						else  						{  							int bufferSize = 32000;  							using (Stream fileStream = new FileStream(gcodePathAndFileName' FileMode.Open' FileAccess.Read' FileShare.ReadWrite))  							{  								byte[] buffer = new byte[bufferSize];  								fileStream.Seek(Math.Max(0' fileStream.Length - bufferSize)' SeekOrigin.Begin);  								int numBytesRead = fileStream.Read(buffer' 0' bufferSize);  								fileStream.Close();    								string fileEnd = System.Text.Encoding.UTF8.GetString(buffer);  								if (fileEnd.Contains("filament used"))  								{  									if (firmwareUriGcodeSend)  									{  										currentSdBytes = 0;    										ClearQueuedGCode();    										SendLineToPrinterNow("M23 {0}".FormatWith(gcodePathAndFileName)); // Send the SD File  										SendLineToPrinterNow("M24"); // Start/resume SD print    										CommunicationState = CommunicationStates.PrintingFromSd;    										ReadLineStartCallBacks.AddCallbackToKey("Done printing file"' DonePrintingSdFile);  									}  									else  									{  										StartPrint(gcodePathAndFileName);  									}  									return;  								}  							}  						}  					}    					CommunicationState = CommunicationStates.Connected;  				}  			}
Magic Number,MatterHackers.MatterControl.PrinterCommunication,PrinterConnectionAndCommunication,C:\repos\MatterHackers_MatterControl\PrinterCommunication\PrinterConnectionAndCommunication.cs,TryWriteNextLineFromGCodeFile,The following statement contains a magic number: if (timeHaveBeenWaitingForOK.IsRunning)  			{  				lock (locker)  				{  					// we are still sending commands  					if (currentSentLine != null)  					{  						// the last instruction was a move  						string lastInstruction = previousSentLine;  						double epectedSecondsToWait = 2;  						double maxSecondsToWait = 10;                          bool wasMoveAndNoOK = lastInstruction != null  							&& (lastInstruction.Contains("G0 ") || lastInstruction.Contains("G1 "))  							&& timeHaveBeenWaitingForOK.Elapsed.TotalSeconds > epectedSecondsToWait;  						bool waitedTooLongForOK = timeHaveBeenWaitingForOK.Elapsed.TotalSeconds > maxSecondsToWait;    						// This code is to try and make sure the printer does not stop on transmission errors.  						// If it has been more than 10 seconds since the printer responded anything  						// and it was not ok' and it's been more than 30 second since we sent the command.  						if ((timeSinceLastReadAnything.Elapsed.TotalSeconds > 10 && timeSinceLastWrite.Elapsed.TotalSeconds > 30)  							|| wasMoveAndNoOK  							|| waitedTooLongForOK)  						{  							// Basically we got some response but it did not contain an OK.  							// The theory is that we may have received a transmission error (like 'OP' rather than 'OK')  							// and in that event we don't want the print to just stop and wait forever.  							currentLineIndexToSend--; // we are going to resend the last command  						}  						else  						{  							// we are waiting for the ok so let's wait  							return;  						}  					}  				}  			}
Magic Number,MatterHackers.MatterControl.PrinterCommunication,PrinterConnectionAndCommunication,C:\repos\MatterHackers_MatterControl\PrinterCommunication\PrinterConnectionAndCommunication.cs,TryWriteNextLineFromGCodeFile,The following statement contains a magic number: if (timeHaveBeenWaitingForOK.IsRunning)  			{  				lock (locker)  				{  					// we are still sending commands  					if (currentSentLine != null)  					{  						// the last instruction was a move  						string lastInstruction = previousSentLine;  						double epectedSecondsToWait = 2;  						double maxSecondsToWait = 10;                          bool wasMoveAndNoOK = lastInstruction != null  							&& (lastInstruction.Contains("G0 ") || lastInstruction.Contains("G1 "))  							&& timeHaveBeenWaitingForOK.Elapsed.TotalSeconds > epectedSecondsToWait;  						bool waitedTooLongForOK = timeHaveBeenWaitingForOK.Elapsed.TotalSeconds > maxSecondsToWait;    						// This code is to try and make sure the printer does not stop on transmission errors.  						// If it has been more than 10 seconds since the printer responded anything  						// and it was not ok' and it's been more than 30 second since we sent the command.  						if ((timeSinceLastReadAnything.Elapsed.TotalSeconds > 10 && timeSinceLastWrite.Elapsed.TotalSeconds > 30)  							|| wasMoveAndNoOK  							|| waitedTooLongForOK)  						{  							// Basically we got some response but it did not contain an OK.  							// The theory is that we may have received a transmission error (like 'OP' rather than 'OK')  							// and in that event we don't want the print to just stop and wait forever.  							currentLineIndexToSend--; // we are going to resend the last command  						}  						else  						{  							// we are waiting for the ok so let's wait  							return;  						}  					}  				}  			}
Magic Number,MatterHackers.MatterControl.PrinterCommunication,PrinterConnectionAndCommunication,C:\repos\MatterHackers_MatterControl\PrinterCommunication\PrinterConnectionAndCommunication.cs,TryWriteNextLineFromGCodeFile,The following statement contains a magic number: if (timeHaveBeenWaitingForOK.IsRunning)  			{  				lock (locker)  				{  					// we are still sending commands  					if (currentSentLine != null)  					{  						// the last instruction was a move  						string lastInstruction = previousSentLine;  						double epectedSecondsToWait = 2;  						double maxSecondsToWait = 10;                          bool wasMoveAndNoOK = lastInstruction != null  							&& (lastInstruction.Contains("G0 ") || lastInstruction.Contains("G1 "))  							&& timeHaveBeenWaitingForOK.Elapsed.TotalSeconds > epectedSecondsToWait;  						bool waitedTooLongForOK = timeHaveBeenWaitingForOK.Elapsed.TotalSeconds > maxSecondsToWait;    						// This code is to try and make sure the printer does not stop on transmission errors.  						// If it has been more than 10 seconds since the printer responded anything  						// and it was not ok' and it's been more than 30 second since we sent the command.  						if ((timeSinceLastReadAnything.Elapsed.TotalSeconds > 10 && timeSinceLastWrite.Elapsed.TotalSeconds > 30)  							|| wasMoveAndNoOK  							|| waitedTooLongForOK)  						{  							// Basically we got some response but it did not contain an OK.  							// The theory is that we may have received a transmission error (like 'OP' rather than 'OK')  							// and in that event we don't want the print to just stop and wait forever.  							currentLineIndexToSend--; // we are going to resend the last command  						}  						else  						{  							// we are waiting for the ok so let's wait  							return;  						}  					}  				}  			}
Magic Number,MatterHackers.MatterControl.PrinterCommunication,PrinterConnectionAndCommunication,C:\repos\MatterHackers_MatterControl\PrinterCommunication\PrinterConnectionAndCommunication.cs,TryWriteNextLineFromGCodeFile,The following statement contains a magic number: if (timeHaveBeenWaitingForOK.IsRunning)  			{  				lock (locker)  				{  					// we are still sending commands  					if (currentSentLine != null)  					{  						// the last instruction was a move  						string lastInstruction = previousSentLine;  						double epectedSecondsToWait = 2;  						double maxSecondsToWait = 10;                          bool wasMoveAndNoOK = lastInstruction != null  							&& (lastInstruction.Contains("G0 ") || lastInstruction.Contains("G1 "))  							&& timeHaveBeenWaitingForOK.Elapsed.TotalSeconds > epectedSecondsToWait;  						bool waitedTooLongForOK = timeHaveBeenWaitingForOK.Elapsed.TotalSeconds > maxSecondsToWait;    						// This code is to try and make sure the printer does not stop on transmission errors.  						// If it has been more than 10 seconds since the printer responded anything  						// and it was not ok' and it's been more than 30 second since we sent the command.  						if ((timeSinceLastReadAnything.Elapsed.TotalSeconds > 10 && timeSinceLastWrite.Elapsed.TotalSeconds > 30)  							|| wasMoveAndNoOK  							|| waitedTooLongForOK)  						{  							// Basically we got some response but it did not contain an OK.  							// The theory is that we may have received a transmission error (like 'OP' rather than 'OK')  							// and in that event we don't want the print to just stop and wait forever.  							currentLineIndexToSend--; // we are going to resend the last command  						}  						else  						{  							// we are waiting for the ok so let's wait  							return;  						}  					}  				}  			}
Magic Number,MatterHackers.MatterControl.PrinterCommunication,PrinterConnectionAndCommunication,C:\repos\MatterHackers_MatterControl\PrinterCommunication\PrinterConnectionAndCommunication.cs,TryWriteNextLineFromGCodeFile,The following statement contains a magic number: lock (locker)  			{  				if (currentLineIndexToSend < allCheckSumLinesSent.Count)  				{  					WriteRawToPrinter(allCheckSumLinesSent[currentLineIndexToSend++] + "\n"' "resend");  				}  				else  				{  					int waitTimeInMs = 60000; // 60 seconds  					if (waitingForPosition.IsRunning   						&& waitingForPosition.ElapsedMilliseconds < waitTimeInMs  						&& PrinterIsConnected)  					{  						// we are waiting for a position response don't print more  						return;  					}    					previousSentLine = this.currentSentLine;  					currentSentLine = totalGCodeStream.ReadLine();    					if (currentSentLine != null)  					{  						string[] splitOnSemicolon = currentSentLine.Split(';');  						string trimedLine = splitOnSemicolon[0].Trim().ToUpper();    						if (currentSentLine.Contains("M114")   							&& PrinterIsConnected)  						{  							waitingForPosition.Restart();  						}    						double secondsSinceStartedPrint = timeSinceStartedPrint.Elapsed.TotalSeconds;  						if (secondsSinceUpdateHistory > secondsSinceStartedPrint  							|| secondsSinceUpdateHistory + 1 < secondsSinceStartedPrint)  						{  							double currentDone = loadedGCode.PercentComplete(gCodeFileStream0.LineIndex);  							// Only update the amount done if it is greater than what is recorded.  							// We don't want to mess up the resume before we actually resume it.  							if (activePrintTask != null  								&& babyStepsStream6 != null  								&& activePrintTask.PercentDone < currentDone)  							{  								activePrintTask.PercentDone = currentDone;  								activePrintTask.PrintingOffsetX = (float)babyStepsStream6.Offset.x;  								activePrintTask.PrintingOffsetY = (float)babyStepsStream6.Offset.y;  								activePrintTask.PrintingOffsetZ = (float)babyStepsStream6.Offset.z;  								try  								{  									Task.Run(() => activePrintTask.Commit());  								}  								catch  								{  									// Can't write for some reason' continue with the write.  								}  							}  							secondsSinceUpdateHistory = secondsSinceStartedPrint;  						}    						if (trimedLine.Length > 0)  						{  							WriteChecksumLineToPrinter(currentSentLine);    							currentLineIndexToSend++;  						}  					}  					else if (this.PrintWasCanceled)  					{  						CommunicationState = CommunicationStates.Connected;  						// never leave the extruder and the bed hot  						ReleaseMotors();  						TurnOffBedAndExtruders();  						this.PrintWasCanceled = false;  					}  					else if(communicationState == CommunicationStates.Printing)// we finished printing normally  					{  						CommunicationState = CommunicationStates.FinishedPrint;    						this.PrintJobName = null;    						// get us back to the no printing setting (this will clear the queued commands)  						CreateStreamProcessors(null' false);    						// never leave the extruder and the bed hot  						ReleaseMotors();  						TurnOffBedAndExtruders();  					}  				}  			}
Magic Number,MatterHackers.MatterControl.PrinterCommunication,PrinterConnectionAndCommunication,C:\repos\MatterHackers_MatterControl\PrinterCommunication\PrinterConnectionAndCommunication.cs,WriteRawToPrinter,The following statement contains a magic number: if (PrinterIsConnected || CommunicationState == CommunicationStates.AttemptingToConnect)  			{  				if (serialPort != null && serialPort.IsOpen)  				{  					FoundStringEventArgs foundStringEvent = new FoundStringEventArgs(lineWithoutChecksum);    					// If we get a home command' ask the printer where it is after sending it.  					if (lineWithoutChecksum.StartsWith("G28") // is a home  						|| lineWithoutChecksum.StartsWith("G29") // is a bed level  						|| lineWithoutChecksum.StartsWith("G30") // is a bed level  						|| lineWithoutChecksum.StartsWith("G92") // is a reset of printer position  						|| (lineWithoutChecksum.StartsWith("T") && !lineWithoutChecksum.StartsWith("T:"))) // is a switch extruder (verify this is the right time to ask this)  					{  						ReadPosition();  					}    					// write data to communication  					{  						StringEventArgs currentEvent = new StringEventArgs(lineToWrite);  						if (PrinterIsPrinting)  						{  							string lineWidthoutCR = lineToWrite.TrimEnd();  							CommunicationUnconditionalToPrinter.CallEvents(this' new StringEventArgs("{0} [{1:0.000}]\n".FormatWith(lineWidthoutCR' timeSinceStartedPrint.Elapsed.TotalSeconds)));  						}  						else  						{  							CommunicationUnconditionalToPrinter.CallEvents(this' currentEvent);  						}    						if (lineWithoutChecksum != null)  						{  							WriteLineStartCallBacks.CheckForKeys(foundStringEvent);  							WriteLineContainsCallBacks.CheckForKeys(foundStringEvent);    							if (foundStringEvent.SendToDelegateFunctions)  							{  								WroteLine.CallEvents(this' currentEvent);  							}  						}  					}    					try  					{  						lock (locker)  						{  							serialPort.Write(lineToWrite);  							if (false) // this is for debugging. Eventually it could be hooked up to a user config option so it can be turned on in the field.  							{  								timeSinceRecievedOk.Stop();  								if (!haveHookedDrawing)  								{  									sendTimeAfterOkGraph = new DataViewGraph(150' 150' 0' 30);  									MatterControlApplication.Instance.AddChild(sendTimeAfterOkGraph);  									haveHookedDrawing = true;  								}  								sendTimeAfterOkGraph.AddData("ok->send"' timeSinceRecievedOk.ElapsedMilliseconds);  							}  							timeSinceLastWrite.Restart();  							timeHaveBeenWaitingForOK.Restart();  						}  						//Debug.Write("w: " + lineToWrite);  					}  					catch (IOException ex)  					{  						PrinterOutputCache.Instance.WriteLine("Exception:" + ex.Message);    						if (CommunicationState == CommunicationStates.AttemptingToConnect)  						{  							// Handle hardware disconnects by relaying the failure reason and shutting down open resources  							AbortConnectionAttempt("Connection Lost - " + ex.Message);  						}  					}  					catch (TimeoutException) // known ok  					{  					}  					catch (UnauthorizedAccessException e3)  					{  						PrinterOutputCache.Instance.WriteLine("Exception:" + e3.Message);  						AbortConnectionAttempt(e3.Message);  					}  					catch (Exception)  					{  					}  				}  				else  				{  					OnConnectionFailed(null);  				}  			}
Magic Number,MatterHackers.MatterControl.PrinterCommunication,PrinterConnectionAndCommunication,C:\repos\MatterHackers_MatterControl\PrinterCommunication\PrinterConnectionAndCommunication.cs,WriteRawToPrinter,The following statement contains a magic number: if (PrinterIsConnected || CommunicationState == CommunicationStates.AttemptingToConnect)  			{  				if (serialPort != null && serialPort.IsOpen)  				{  					FoundStringEventArgs foundStringEvent = new FoundStringEventArgs(lineWithoutChecksum);    					// If we get a home command' ask the printer where it is after sending it.  					if (lineWithoutChecksum.StartsWith("G28") // is a home  						|| lineWithoutChecksum.StartsWith("G29") // is a bed level  						|| lineWithoutChecksum.StartsWith("G30") // is a bed level  						|| lineWithoutChecksum.StartsWith("G92") // is a reset of printer position  						|| (lineWithoutChecksum.StartsWith("T") && !lineWithoutChecksum.StartsWith("T:"))) // is a switch extruder (verify this is the right time to ask this)  					{  						ReadPosition();  					}    					// write data to communication  					{  						StringEventArgs currentEvent = new StringEventArgs(lineToWrite);  						if (PrinterIsPrinting)  						{  							string lineWidthoutCR = lineToWrite.TrimEnd();  							CommunicationUnconditionalToPrinter.CallEvents(this' new StringEventArgs("{0} [{1:0.000}]\n".FormatWith(lineWidthoutCR' timeSinceStartedPrint.Elapsed.TotalSeconds)));  						}  						else  						{  							CommunicationUnconditionalToPrinter.CallEvents(this' currentEvent);  						}    						if (lineWithoutChecksum != null)  						{  							WriteLineStartCallBacks.CheckForKeys(foundStringEvent);  							WriteLineContainsCallBacks.CheckForKeys(foundStringEvent);    							if (foundStringEvent.SendToDelegateFunctions)  							{  								WroteLine.CallEvents(this' currentEvent);  							}  						}  					}    					try  					{  						lock (locker)  						{  							serialPort.Write(lineToWrite);  							if (false) // this is for debugging. Eventually it could be hooked up to a user config option so it can be turned on in the field.  							{  								timeSinceRecievedOk.Stop();  								if (!haveHookedDrawing)  								{  									sendTimeAfterOkGraph = new DataViewGraph(150' 150' 0' 30);  									MatterControlApplication.Instance.AddChild(sendTimeAfterOkGraph);  									haveHookedDrawing = true;  								}  								sendTimeAfterOkGraph.AddData("ok->send"' timeSinceRecievedOk.ElapsedMilliseconds);  							}  							timeSinceLastWrite.Restart();  							timeHaveBeenWaitingForOK.Restart();  						}  						//Debug.Write("w: " + lineToWrite);  					}  					catch (IOException ex)  					{  						PrinterOutputCache.Instance.WriteLine("Exception:" + ex.Message);    						if (CommunicationState == CommunicationStates.AttemptingToConnect)  						{  							// Handle hardware disconnects by relaying the failure reason and shutting down open resources  							AbortConnectionAttempt("Connection Lost - " + ex.Message);  						}  					}  					catch (TimeoutException) // known ok  					{  					}  					catch (UnauthorizedAccessException e3)  					{  						PrinterOutputCache.Instance.WriteLine("Exception:" + e3.Message);  						AbortConnectionAttempt(e3.Message);  					}  					catch (Exception)  					{  					}  				}  				else  				{  					OnConnectionFailed(null);  				}  			}
Magic Number,MatterHackers.MatterControl.PrinterCommunication,PrinterConnectionAndCommunication,C:\repos\MatterHackers_MatterControl\PrinterCommunication\PrinterConnectionAndCommunication.cs,WriteRawToPrinter,The following statement contains a magic number: if (PrinterIsConnected || CommunicationState == CommunicationStates.AttemptingToConnect)  			{  				if (serialPort != null && serialPort.IsOpen)  				{  					FoundStringEventArgs foundStringEvent = new FoundStringEventArgs(lineWithoutChecksum);    					// If we get a home command' ask the printer where it is after sending it.  					if (lineWithoutChecksum.StartsWith("G28") // is a home  						|| lineWithoutChecksum.StartsWith("G29") // is a bed level  						|| lineWithoutChecksum.StartsWith("G30") // is a bed level  						|| lineWithoutChecksum.StartsWith("G92") // is a reset of printer position  						|| (lineWithoutChecksum.StartsWith("T") && !lineWithoutChecksum.StartsWith("T:"))) // is a switch extruder (verify this is the right time to ask this)  					{  						ReadPosition();  					}    					// write data to communication  					{  						StringEventArgs currentEvent = new StringEventArgs(lineToWrite);  						if (PrinterIsPrinting)  						{  							string lineWidthoutCR = lineToWrite.TrimEnd();  							CommunicationUnconditionalToPrinter.CallEvents(this' new StringEventArgs("{0} [{1:0.000}]\n".FormatWith(lineWidthoutCR' timeSinceStartedPrint.Elapsed.TotalSeconds)));  						}  						else  						{  							CommunicationUnconditionalToPrinter.CallEvents(this' currentEvent);  						}    						if (lineWithoutChecksum != null)  						{  							WriteLineStartCallBacks.CheckForKeys(foundStringEvent);  							WriteLineContainsCallBacks.CheckForKeys(foundStringEvent);    							if (foundStringEvent.SendToDelegateFunctions)  							{  								WroteLine.CallEvents(this' currentEvent);  							}  						}  					}    					try  					{  						lock (locker)  						{  							serialPort.Write(lineToWrite);  							if (false) // this is for debugging. Eventually it could be hooked up to a user config option so it can be turned on in the field.  							{  								timeSinceRecievedOk.Stop();  								if (!haveHookedDrawing)  								{  									sendTimeAfterOkGraph = new DataViewGraph(150' 150' 0' 30);  									MatterControlApplication.Instance.AddChild(sendTimeAfterOkGraph);  									haveHookedDrawing = true;  								}  								sendTimeAfterOkGraph.AddData("ok->send"' timeSinceRecievedOk.ElapsedMilliseconds);  							}  							timeSinceLastWrite.Restart();  							timeHaveBeenWaitingForOK.Restart();  						}  						//Debug.Write("w: " + lineToWrite);  					}  					catch (IOException ex)  					{  						PrinterOutputCache.Instance.WriteLine("Exception:" + ex.Message);    						if (CommunicationState == CommunicationStates.AttemptingToConnect)  						{  							// Handle hardware disconnects by relaying the failure reason and shutting down open resources  							AbortConnectionAttempt("Connection Lost - " + ex.Message);  						}  					}  					catch (TimeoutException) // known ok  					{  					}  					catch (UnauthorizedAccessException e3)  					{  						PrinterOutputCache.Instance.WriteLine("Exception:" + e3.Message);  						AbortConnectionAttempt(e3.Message);  					}  					catch (Exception)  					{  					}  				}  				else  				{  					OnConnectionFailed(null);  				}  			}
Magic Number,MatterHackers.MatterControl.VersionManagement,WebRequestBase<ResponseType>,C:\repos\MatterHackers_MatterControl\VersionManagement\WebRequestHandler.cs,SetRquestValues,The following statement contains a magic number: for (int i = 0; i < requestStringPairs.Length; i += 2)  			{  				this.requestValues[requestStringPairs[i]] = requestStringPairs[i + 1];  			}
Magic Number,MatterHackers.MatterControl.VersionManagement,WebRequestBase,C:\repos\MatterHackers_MatterControl\VersionManagement\WebRequestHandler.cs,Request,The following statement contains a magic number: for (int i = 0; i < requestStringPairs.Length; i += 2)  			{  				tempRequest.requestValues[requestStringPairs[i]] = requestStringPairs[i + 1];  			}
Magic Number,SQLiteAndroid,SQLiteConnection,C:\repos\MatterHackers_MatterControl\DataStorage\SQLiteAndroid.cs,SQLiteConnection,The following statement contains a magic number: BusyTimeout = TimeSpan.FromSeconds(0.1);
Magic Number,SQLiteAndroid,SQLiteConnection,C:\repos\MatterHackers_MatterControl\DataStorage\SQLiteAndroid.cs,Execute,The following statement contains a magic number: if (TimeExecution)  			{  				_sw.Stop();  				_elapsedMilliseconds += _sw.ElapsedMilliseconds;  				Debug.WriteLine(string.Format("Finished in {0} ms ({1:0.0} s total)"' _sw.ElapsedMilliseconds' _elapsedMilliseconds / 1000.0));  			}
Magic Number,SQLiteAndroid,SQLiteConnection,C:\repos\MatterHackers_MatterControl\DataStorage\SQLiteAndroid.cs,ExecuteScalar,The following statement contains a magic number: lock (locker)  			{  				var cmd = CreateCommand(query' args);    				if (TimeExecution)  				{  					if (_sw == null)  					{  						_sw = new System.Diagnostics.Stopwatch();  					}  					_sw.Reset();  					_sw.Start();  				}    				var r = cmd.ExecuteScalar<T>();    				if (TimeExecution)  				{  					_sw.Stop();  					_elapsedMilliseconds += _sw.ElapsedMilliseconds;  					Debug.WriteLine(string.Format("Finished in {0} ms ({1:0.0} s total)"' _sw.ElapsedMilliseconds' _elapsedMilliseconds / 1000.0));  				}    				return r;  			}
Magic Number,SQLiteAndroid,SQLiteConnection,C:\repos\MatterHackers_MatterControl\DataStorage\SQLiteAndroid.cs,DoSavePointExecute,The following statement contains a magic number: if (firstLen >= 2 && savepoint.Length > firstLen + 1)  			{  				int depth;  				if (Int32.TryParse(savepoint.Substring(firstLen + 1)' out depth))  				{  					// TODO: Mild race here' but inescapable without locking almost everywhere.  					if (0 <= depth && depth < _trasactionDepth)  					{  #if NETFX_CORE  						Volatile.Write (ref _trasactionDepth' depth);  #elif SILVERLIGHT  						_trasactionDepth = depth;  #else  						Thread.VolatileWrite(ref _trasactionDepth' depth);  #endif  						Execute(cmd + savepoint);  						return;  					}  				}  			}
Magic Number,SQLiteAndroid,TableQuery<T>,C:\repos\MatterHackers_MatterControl\DataStorage\SQLiteAndroid.cs,CompileExpr,The following statement contains a magic number: if (expr == null)  			{  				throw new NotSupportedException("Expression is NULL");  			}  			else if (expr is BinaryExpression)  			{  				var bin = (BinaryExpression)expr;    				var leftr = CompileExpr(bin.Left' queryArgs);  				var rightr = CompileExpr(bin.Right' queryArgs);    				//If either side is a parameter and is null' then handle the other side specially (for "is null"/"is not null")  				string text;  				if (leftr.CommandText == "?" && leftr.Value == null)  					text = CompileNullBinaryExpression(bin' rightr);  				else if (rightr.CommandText == "?" && rightr.Value == null)  					text = CompileNullBinaryExpression(bin' leftr);  				else  					text = "(" + leftr.CommandText + " " + GetSqlName(bin) + " " + rightr.CommandText + ")";  				return new CompileResult { CommandText = text };  			}  			else if (expr.NodeType == ExpressionType.Call)  			{  				var call = (MethodCallExpression)expr;  				var args = new CompileResult[call.Arguments.Count];  				var obj = call.Object != null ? CompileExpr(call.Object' queryArgs) : null;    				for (var i = 0; i < args.Length; i++)  				{  					args[i] = CompileExpr(call.Arguments[i]' queryArgs);  				}    				var sqlCall = "";    				if (call.Method.Name == "Like" && args.Length == 2)  				{  					sqlCall = "(" + args[0].CommandText + " like " + args[1].CommandText + ")";  				}  				else if (call.Method.Name == "Contains" && args.Length == 2)  				{  					sqlCall = "(" + args[1].CommandText + " in " + args[0].CommandText + ")";  				}  				else if (call.Method.Name == "Contains" && args.Length == 1)  				{  					if (call.Object != null && call.Object.Type == typeof(string))  					{  						sqlCall = "(" + obj.CommandText + " like ('%' || " + args[0].CommandText + " || '%'))";  					}  					else  					{  						sqlCall = "(" + args[0].CommandText + " in " + obj.CommandText + ")";  					}  				}  				else if (call.Method.Name == "StartsWith" && args.Length == 1)  				{  					sqlCall = "(" + obj.CommandText + " like (" + args[0].CommandText + " || '%'))";  				}  				else if (call.Method.Name == "EndsWith" && args.Length == 1)  				{  					sqlCall = "(" + obj.CommandText + " like ('%' || " + args[0].CommandText + "))";  				}  				else  				{  					sqlCall = call.Method.Name.ToLower() + "(" + string.Join("'"' args.Select(a => a.CommandText).ToArray()) + ")";  				}  				return new CompileResult { CommandText = sqlCall };  			}  			else if (expr.NodeType == ExpressionType.Constant)  			{  				var c = (ConstantExpression)expr;  				queryArgs.Add(c.Value);  				return new CompileResult  				{  					CommandText = "?"'  					Value = c.Value  				};  			}  			else if (expr.NodeType == ExpressionType.Convert)  			{  				var u = (UnaryExpression)expr;  				var ty = u.Type;  				var valr = CompileExpr(u.Operand' queryArgs);  				return new CompileResult  				{  					CommandText = valr.CommandText'  					Value = valr.Value != null ? ConvertTo(valr.Value' ty) : null  				};  			}  			else if (expr.NodeType == ExpressionType.MemberAccess)  			{  				var mem = (MemberExpression)expr;    				if (mem.Expression.NodeType == ExpressionType.Parameter)  				{  					//  					// This is a column of our table' output just the column name  					// Need to translate it if that column name is mapped  					//  					var columnName = Table.FindColumnWithPropertyName(mem.Member.Name).Name;  					return new CompileResult { CommandText = "\"" + columnName + "\"" };  				}  				else  				{  					object obj = null;  					if (mem.Expression != null)  					{  						var r = CompileExpr(mem.Expression' queryArgs);  						if (r.Value == null)  						{  							throw new NotSupportedException("Member access failed to compile expression");  						}  						if (r.CommandText == "?")  						{  							queryArgs.RemoveAt(queryArgs.Count - 1);  						}  						obj = r.Value;  					}    					//  					// Get the member value  					//  					object val = null;    #if !NETFX_CORE  					if (mem.Member.MemberType == MemberTypes.Property)  					{  #else  					if (mem.Member is PropertyInfo) {  #endif  						var m = (PropertyInfo)mem.Member;  						val = m.GetValue(obj' null);  #if !NETFX_CORE  					}  					else if (mem.Member.MemberType == MemberTypes.Field)  					{  #else  						} else if (mem.Member is FieldInfo) {  #endif  #if SILVERLIGHT  						val = Expression.Lambda (expr).Compile ().DynamicInvoke ();  #else  						var m = (FieldInfo)mem.Member;  						val = m.GetValue(obj);  #endif  					}  					else  					{  #if !NETFX_CORE  						throw new NotSupportedException("MemberExpr: " + mem.Member.MemberType.ToString());  #else  						throw new NotSupportedException ("MemberExpr: " + mem.Member.DeclaringType.ToString ());  #endif  					}    					//  					// Work special magic for enumerables  					//  					if (val != null && val is System.Collections.IEnumerable && !(val is string))  					{  						var sb = new System.Text.StringBuilder();  						sb.Append("(");  						var head = "";  						foreach (var a in (System.Collections.IEnumerable)val)  						{  							queryArgs.Add(a);  							sb.Append(head);  							sb.Append("?");  							head = "'";  						}  						sb.Append(")");  						return new CompileResult  						{  							CommandText = sb.ToString()'  							Value = val  						};  					}  					else  					{  						queryArgs.Add(val);  						return new CompileResult  						{  							CommandText = "?"'  							Value = val  						};  					}  				}  			}
Magic Number,SQLiteAndroid,TableQuery<T>,C:\repos\MatterHackers_MatterControl\DataStorage\SQLiteAndroid.cs,CompileExpr,The following statement contains a magic number: if (expr == null)  			{  				throw new NotSupportedException("Expression is NULL");  			}  			else if (expr is BinaryExpression)  			{  				var bin = (BinaryExpression)expr;    				var leftr = CompileExpr(bin.Left' queryArgs);  				var rightr = CompileExpr(bin.Right' queryArgs);    				//If either side is a parameter and is null' then handle the other side specially (for "is null"/"is not null")  				string text;  				if (leftr.CommandText == "?" && leftr.Value == null)  					text = CompileNullBinaryExpression(bin' rightr);  				else if (rightr.CommandText == "?" && rightr.Value == null)  					text = CompileNullBinaryExpression(bin' leftr);  				else  					text = "(" + leftr.CommandText + " " + GetSqlName(bin) + " " + rightr.CommandText + ")";  				return new CompileResult { CommandText = text };  			}  			else if (expr.NodeType == ExpressionType.Call)  			{  				var call = (MethodCallExpression)expr;  				var args = new CompileResult[call.Arguments.Count];  				var obj = call.Object != null ? CompileExpr(call.Object' queryArgs) : null;    				for (var i = 0; i < args.Length; i++)  				{  					args[i] = CompileExpr(call.Arguments[i]' queryArgs);  				}    				var sqlCall = "";    				if (call.Method.Name == "Like" && args.Length == 2)  				{  					sqlCall = "(" + args[0].CommandText + " like " + args[1].CommandText + ")";  				}  				else if (call.Method.Name == "Contains" && args.Length == 2)  				{  					sqlCall = "(" + args[1].CommandText + " in " + args[0].CommandText + ")";  				}  				else if (call.Method.Name == "Contains" && args.Length == 1)  				{  					if (call.Object != null && call.Object.Type == typeof(string))  					{  						sqlCall = "(" + obj.CommandText + " like ('%' || " + args[0].CommandText + " || '%'))";  					}  					else  					{  						sqlCall = "(" + args[0].CommandText + " in " + obj.CommandText + ")";  					}  				}  				else if (call.Method.Name == "StartsWith" && args.Length == 1)  				{  					sqlCall = "(" + obj.CommandText + " like (" + args[0].CommandText + " || '%'))";  				}  				else if (call.Method.Name == "EndsWith" && args.Length == 1)  				{  					sqlCall = "(" + obj.CommandText + " like ('%' || " + args[0].CommandText + "))";  				}  				else  				{  					sqlCall = call.Method.Name.ToLower() + "(" + string.Join("'"' args.Select(a => a.CommandText).ToArray()) + ")";  				}  				return new CompileResult { CommandText = sqlCall };  			}  			else if (expr.NodeType == ExpressionType.Constant)  			{  				var c = (ConstantExpression)expr;  				queryArgs.Add(c.Value);  				return new CompileResult  				{  					CommandText = "?"'  					Value = c.Value  				};  			}  			else if (expr.NodeType == ExpressionType.Convert)  			{  				var u = (UnaryExpression)expr;  				var ty = u.Type;  				var valr = CompileExpr(u.Operand' queryArgs);  				return new CompileResult  				{  					CommandText = valr.CommandText'  					Value = valr.Value != null ? ConvertTo(valr.Value' ty) : null  				};  			}  			else if (expr.NodeType == ExpressionType.MemberAccess)  			{  				var mem = (MemberExpression)expr;    				if (mem.Expression.NodeType == ExpressionType.Parameter)  				{  					//  					// This is a column of our table' output just the column name  					// Need to translate it if that column name is mapped  					//  					var columnName = Table.FindColumnWithPropertyName(mem.Member.Name).Name;  					return new CompileResult { CommandText = "\"" + columnName + "\"" };  				}  				else  				{  					object obj = null;  					if (mem.Expression != null)  					{  						var r = CompileExpr(mem.Expression' queryArgs);  						if (r.Value == null)  						{  							throw new NotSupportedException("Member access failed to compile expression");  						}  						if (r.CommandText == "?")  						{  							queryArgs.RemoveAt(queryArgs.Count - 1);  						}  						obj = r.Value;  					}    					//  					// Get the member value  					//  					object val = null;    #if !NETFX_CORE  					if (mem.Member.MemberType == MemberTypes.Property)  					{  #else  					if (mem.Member is PropertyInfo) {  #endif  						var m = (PropertyInfo)mem.Member;  						val = m.GetValue(obj' null);  #if !NETFX_CORE  					}  					else if (mem.Member.MemberType == MemberTypes.Field)  					{  #else  						} else if (mem.Member is FieldInfo) {  #endif  #if SILVERLIGHT  						val = Expression.Lambda (expr).Compile ().DynamicInvoke ();  #else  						var m = (FieldInfo)mem.Member;  						val = m.GetValue(obj);  #endif  					}  					else  					{  #if !NETFX_CORE  						throw new NotSupportedException("MemberExpr: " + mem.Member.MemberType.ToString());  #else  						throw new NotSupportedException ("MemberExpr: " + mem.Member.DeclaringType.ToString ());  #endif  					}    					//  					// Work special magic for enumerables  					//  					if (val != null && val is System.Collections.IEnumerable && !(val is string))  					{  						var sb = new System.Text.StringBuilder();  						sb.Append("(");  						var head = "";  						foreach (var a in (System.Collections.IEnumerable)val)  						{  							queryArgs.Add(a);  							sb.Append(head);  							sb.Append("?");  							head = "'";  						}  						sb.Append(")");  						return new CompileResult  						{  							CommandText = sb.ToString()'  							Value = val  						};  					}  					else  					{  						queryArgs.Add(val);  						return new CompileResult  						{  							CommandText = "?"'  							Value = val  						};  					}  				}  			}
Magic Number,Gaming.Game,DataViewGraph,C:\repos\MatterHackers_MatterControl\CustomWidgets\DataViewGraph.cs,DataViewGraph,The following statement contains a magic number: if (valueMin == 0 && valueMax == 0)  			{  				this.valueMax = -999999;  				this.valueMin = 999999;  			}
Magic Number,Gaming.Game,DataViewGraph,C:\repos\MatterHackers_MatterControl\CustomWidgets\DataViewGraph.cs,DataViewGraph,The following statement contains a magic number: if (valueMin == 0 && valueMax == 0)  			{  				this.valueMax = -999999;  				this.valueMin = 999999;  			}
Magic Number,Gaming.Game,DataViewGraph,C:\repos\MatterHackers_MatterControl\CustomWidgets\DataViewGraph.cs,OnDraw,The following statement contains a magic number: double currentTextHeight = -20;
Magic Number,Gaming.Game,DataViewGraph,C:\repos\MatterHackers_MatterControl\CustomWidgets\DataViewGraph.cs,OnDraw,The following statement contains a magic number: Vector2 renderOffset = new Vector2(1' Height - graphHeight - 22);
Magic Number,Gaming.Game,DataViewGraph,C:\repos\MatterHackers_MatterControl\CustomWidgets\DataViewGraph.cs,OnDraw,The following statement contains a magic number: RoundedRect backGround = new RoundedRect(renderOffset.x' renderOffset.y - 1' renderOffset.x + graphWidth' renderOffset.y - 1 + graphHeight + 2' 5);
Magic Number,Gaming.Game,DataViewGraph,C:\repos\MatterHackers_MatterControl\CustomWidgets\DataViewGraph.cs,OnDraw,The following statement contains a magic number: RoundedRect backGround = new RoundedRect(renderOffset.x' renderOffset.y - 1' renderOffset.x + graphWidth' renderOffset.y - 1 + graphHeight + 2' 5);
Magic Number,Gaming.Game,DataViewGraph,C:\repos\MatterHackers_MatterControl\CustomWidgets\DataViewGraph.cs,OnDraw,The following statement contains a magic number: graphics2D.Render(backGround' new RGBA_Bytes(0' 0' 0' .5));
Magic Number,Gaming.Game,DataViewGraph,C:\repos\MatterHackers_MatterControl\CustomWidgets\DataViewGraph.cs,OnDraw,The following statement contains a magic number: double MaxMax = -999999999;
Magic Number,Gaming.Game,DataViewGraph,C:\repos\MatterHackers_MatterControl\CustomWidgets\DataViewGraph.cs,OnDraw,The following statement contains a magic number: double MinMin = 999999999;
Magic Number,Gaming.Game,DataViewGraph,C:\repos\MatterHackers_MatterControl\CustomWidgets\DataViewGraph.cs,OnDraw,The following statement contains a magic number: foreach (KeyValuePair<String' HistoryData> historyKeyValue in dataHistoryArray)  			{  				HistoryData history = historyKeyValue.Value;  				linesToDrawStorage.remove_all();  				MaxMax = System.Math.Max(MaxMax' history.GetMaxValue());  				MinMin = System.Math.Min(MinMin' history.GetMinValue());  				MaxAverage = System.Math.Max(MaxAverage' history.GetAverageValue());  				for (int i = 0; i < graphWidth - 1; i++)  				{  					if (i == 0)  					{  						linesToDrawStorage.MoveTo(renderOffset.x + i'  							renderOffset.y + ((history.GetItem(i) - valueMin) * graphHeight / Range));  					}  					else  					{  						linesToDrawStorage.LineTo(renderOffset.x + i'  							renderOffset.y + ((history.GetItem(i) - valueMin) * graphHeight / Range));  					}  				}    				StrockedTransformedLinesToDraw = new Stroke(linesToDrawStorage);  				graphics2D.Render(StrockedTransformedLinesToDraw' history.lineColor);    				String Text = historyKeyValue.Key + ": Min:" + MinMin.ToString("0.0") + " Max:" + MaxMax.ToString("0.0") + " Avg:" + MaxAverage.ToString("0.0");  				graphics2D.DrawString(Text' renderOffset.x' renderOffset.y + currentTextHeight' backgroundColor: new RGBA_Bytes(RGBA_Bytes.White' 220)' drawFromHintedCach: true);  				currentTextHeight -= 20;  			}
Magic Number,Gaming.Game,DataViewGraph,C:\repos\MatterHackers_MatterControl\CustomWidgets\DataViewGraph.cs,OnDraw,The following statement contains a magic number: foreach (KeyValuePair<String' HistoryData> historyKeyValue in dataHistoryArray)  			{  				HistoryData history = historyKeyValue.Value;  				linesToDrawStorage.remove_all();  				MaxMax = System.Math.Max(MaxMax' history.GetMaxValue());  				MinMin = System.Math.Min(MinMin' history.GetMinValue());  				MaxAverage = System.Math.Max(MaxAverage' history.GetAverageValue());  				for (int i = 0; i < graphWidth - 1; i++)  				{  					if (i == 0)  					{  						linesToDrawStorage.MoveTo(renderOffset.x + i'  							renderOffset.y + ((history.GetItem(i) - valueMin) * graphHeight / Range));  					}  					else  					{  						linesToDrawStorage.LineTo(renderOffset.x + i'  							renderOffset.y + ((history.GetItem(i) - valueMin) * graphHeight / Range));  					}  				}    				StrockedTransformedLinesToDraw = new Stroke(linesToDrawStorage);  				graphics2D.Render(StrockedTransformedLinesToDraw' history.lineColor);    				String Text = historyKeyValue.Key + ": Min:" + MinMin.ToString("0.0") + " Max:" + MaxMax.ToString("0.0") + " Avg:" + MaxAverage.ToString("0.0");  				graphics2D.DrawString(Text' renderOffset.x' renderOffset.y + currentTextHeight' backgroundColor: new RGBA_Bytes(RGBA_Bytes.White' 220)' drawFromHintedCach: true);  				currentTextHeight -= 20;  			}
Magic Number,Gaming.Game,DataViewGraph,C:\repos\MatterHackers_MatterControl\CustomWidgets\DataViewGraph.cs,OnDraw,The following statement contains a magic number: RoundedRect BackGround2 = new RoundedRect(renderOffset.x' renderOffset.y - 1' renderOffset.x + graphWidth' renderOffset.y - 1 + graphHeight + 2' 5);
Magic Number,Gaming.Game,DataViewGraph,C:\repos\MatterHackers_MatterControl\CustomWidgets\DataViewGraph.cs,OnDraw,The following statement contains a magic number: RoundedRect BackGround2 = new RoundedRect(renderOffset.x' renderOffset.y - 1' renderOffset.x + graphWidth' renderOffset.y - 1 + graphHeight + 2' 5);
Magic Number,Gaming.Game,DataViewGraph,C:\repos\MatterHackers_MatterControl\CustomWidgets\DataViewGraph.cs,AddData,The following statement contains a magic number: if (!dataHistoryArray.ContainsKey(DataType))  			{  				RGBA_Bytes LineColor = new RGBA_Bytes(255' 255' 255);  				switch (nextLineColorIndex++ % 3)  				{  					case 0:  						LineColor = new RGBA_Bytes(255' 55' 55);  						break;    					case 1:  						LineColor = new RGBA_Bytes(55' 255' 55);  						break;    					case 2:  						LineColor = new RGBA_Bytes(55' 55' 255);  						break;  				}    				dataHistoryArray.Add(DataType' new HistoryData((int)graphWidth' LineColor));  			}
Magic Number,Gaming.Game,DataViewGraph,C:\repos\MatterHackers_MatterControl\CustomWidgets\DataViewGraph.cs,AddData,The following statement contains a magic number: if (!dataHistoryArray.ContainsKey(DataType))  			{  				RGBA_Bytes LineColor = new RGBA_Bytes(255' 255' 255);  				switch (nextLineColorIndex++ % 3)  				{  					case 0:  						LineColor = new RGBA_Bytes(255' 55' 55);  						break;    					case 1:  						LineColor = new RGBA_Bytes(55' 255' 55);  						break;    					case 2:  						LineColor = new RGBA_Bytes(55' 55' 255);  						break;  				}    				dataHistoryArray.Add(DataType' new HistoryData((int)graphWidth' LineColor));  			}
Magic Number,Gaming.Game,DataViewGraph,C:\repos\MatterHackers_MatterControl\CustomWidgets\DataViewGraph.cs,AddData,The following statement contains a magic number: if (!dataHistoryArray.ContainsKey(DataType))  			{  				RGBA_Bytes LineColor = new RGBA_Bytes(255' 255' 255);  				switch (nextLineColorIndex++ % 3)  				{  					case 0:  						LineColor = new RGBA_Bytes(255' 55' 55);  						break;    					case 1:  						LineColor = new RGBA_Bytes(55' 255' 55);  						break;    					case 2:  						LineColor = new RGBA_Bytes(55' 55' 255);  						break;  				}    				dataHistoryArray.Add(DataType' new HistoryData((int)graphWidth' LineColor));  			}
Magic Number,Gaming.Game,DataViewGraph,C:\repos\MatterHackers_MatterControl\CustomWidgets\DataViewGraph.cs,AddData,The following statement contains a magic number: if (!dataHistoryArray.ContainsKey(DataType))  			{  				RGBA_Bytes LineColor = new RGBA_Bytes(255' 255' 255);  				switch (nextLineColorIndex++ % 3)  				{  					case 0:  						LineColor = new RGBA_Bytes(255' 55' 55);  						break;    					case 1:  						LineColor = new RGBA_Bytes(55' 255' 55);  						break;    					case 2:  						LineColor = new RGBA_Bytes(55' 55' 255);  						break;  				}    				dataHistoryArray.Add(DataType' new HistoryData((int)graphWidth' LineColor));  			}
Magic Number,Gaming.Game,DataViewGraph,C:\repos\MatterHackers_MatterControl\CustomWidgets\DataViewGraph.cs,AddData,The following statement contains a magic number: if (!dataHistoryArray.ContainsKey(DataType))  			{  				RGBA_Bytes LineColor = new RGBA_Bytes(255' 255' 255);  				switch (nextLineColorIndex++ % 3)  				{  					case 0:  						LineColor = new RGBA_Bytes(255' 55' 55);  						break;    					case 1:  						LineColor = new RGBA_Bytes(55' 255' 55);  						break;    					case 2:  						LineColor = new RGBA_Bytes(55' 55' 255);  						break;  				}    				dataHistoryArray.Add(DataType' new HistoryData((int)graphWidth' LineColor));  			}
Magic Number,Gaming.Game,DataViewGraph,C:\repos\MatterHackers_MatterControl\CustomWidgets\DataViewGraph.cs,AddData,The following statement contains a magic number: if (!dataHistoryArray.ContainsKey(DataType))  			{  				RGBA_Bytes LineColor = new RGBA_Bytes(255' 255' 255);  				switch (nextLineColorIndex++ % 3)  				{  					case 0:  						LineColor = new RGBA_Bytes(255' 55' 55);  						break;    					case 1:  						LineColor = new RGBA_Bytes(55' 255' 55);  						break;    					case 2:  						LineColor = new RGBA_Bytes(55' 55' 255);  						break;  				}    				dataHistoryArray.Add(DataType' new HistoryData((int)graphWidth' LineColor));  			}
Magic Number,Gaming.Game,DataViewGraph,C:\repos\MatterHackers_MatterControl\CustomWidgets\DataViewGraph.cs,AddData,The following statement contains a magic number: if (!dataHistoryArray.ContainsKey(DataType))  			{  				RGBA_Bytes LineColor = new RGBA_Bytes(255' 255' 255);  				switch (nextLineColorIndex++ % 3)  				{  					case 0:  						LineColor = new RGBA_Bytes(255' 55' 55);  						break;    					case 1:  						LineColor = new RGBA_Bytes(55' 255' 55);  						break;    					case 2:  						LineColor = new RGBA_Bytes(55' 55' 255);  						break;  				}    				dataHistoryArray.Add(DataType' new HistoryData((int)graphWidth' LineColor));  			}
Magic Number,Gaming.Game,DataViewGraph,C:\repos\MatterHackers_MatterControl\CustomWidgets\DataViewGraph.cs,AddData,The following statement contains a magic number: if (!dataHistoryArray.ContainsKey(DataType))  			{  				RGBA_Bytes LineColor = new RGBA_Bytes(255' 255' 255);  				switch (nextLineColorIndex++ % 3)  				{  					case 0:  						LineColor = new RGBA_Bytes(255' 55' 55);  						break;    					case 1:  						LineColor = new RGBA_Bytes(55' 255' 55);  						break;    					case 2:  						LineColor = new RGBA_Bytes(55' 55' 255);  						break;  				}    				dataHistoryArray.Add(DataType' new HistoryData((int)graphWidth' LineColor));  			}
Magic Number,Gaming.Game,DataViewGraph,C:\repos\MatterHackers_MatterControl\CustomWidgets\DataViewGraph.cs,AddData,The following statement contains a magic number: if (!dataHistoryArray.ContainsKey(DataType))  			{  				RGBA_Bytes LineColor = new RGBA_Bytes(255' 255' 255);  				switch (nextLineColorIndex++ % 3)  				{  					case 0:  						LineColor = new RGBA_Bytes(255' 55' 55);  						break;    					case 1:  						LineColor = new RGBA_Bytes(55' 255' 55);  						break;    					case 2:  						LineColor = new RGBA_Bytes(55' 55' 255);  						break;  				}    				dataHistoryArray.Add(DataType' new HistoryData((int)graphWidth' LineColor));  			}
Magic Number,Gaming.Game,DataViewGraph,C:\repos\MatterHackers_MatterControl\CustomWidgets\DataViewGraph.cs,AddData,The following statement contains a magic number: if (!dataHistoryArray.ContainsKey(DataType))  			{  				RGBA_Bytes LineColor = new RGBA_Bytes(255' 255' 255);  				switch (nextLineColorIndex++ % 3)  				{  					case 0:  						LineColor = new RGBA_Bytes(255' 55' 55);  						break;    					case 1:  						LineColor = new RGBA_Bytes(55' 255' 55);  						break;    					case 2:  						LineColor = new RGBA_Bytes(55' 55' 255);  						break;  				}    				dataHistoryArray.Add(DataType' new HistoryData((int)graphWidth' LineColor));  			}
Magic Number,Gaming.Game,DataViewGraph,C:\repos\MatterHackers_MatterControl\CustomWidgets\DataViewGraph.cs,AddData,The following statement contains a magic number: if (!dataHistoryArray.ContainsKey(DataType))  			{  				RGBA_Bytes LineColor = new RGBA_Bytes(255' 255' 255);  				switch (nextLineColorIndex++ % 3)  				{  					case 0:  						LineColor = new RGBA_Bytes(255' 55' 55);  						break;    					case 1:  						LineColor = new RGBA_Bytes(55' 255' 55);  						break;    					case 2:  						LineColor = new RGBA_Bytes(55' 55' 255);  						break;  				}    				dataHistoryArray.Add(DataType' new HistoryData((int)graphWidth' LineColor));  			}
Magic Number,Gaming.Game,DataViewGraph,C:\repos\MatterHackers_MatterControl\CustomWidgets\DataViewGraph.cs,AddData,The following statement contains a magic number: if (!dataHistoryArray.ContainsKey(DataType))  			{  				RGBA_Bytes LineColor = new RGBA_Bytes(255' 255' 255);  				switch (nextLineColorIndex++ % 3)  				{  					case 0:  						LineColor = new RGBA_Bytes(255' 55' 55);  						break;    					case 1:  						LineColor = new RGBA_Bytes(55' 255' 55);  						break;    					case 2:  						LineColor = new RGBA_Bytes(55' 55' 255);  						break;  				}    				dataHistoryArray.Add(DataType' new HistoryData((int)graphWidth' LineColor));  			}
Magic Number,Gaming.Game,DataViewGraph,C:\repos\MatterHackers_MatterControl\CustomWidgets\DataViewGraph.cs,AddData,The following statement contains a magic number: if (!dataHistoryArray.ContainsKey(DataType))  			{  				RGBA_Bytes LineColor = new RGBA_Bytes(255' 255' 255);  				switch (nextLineColorIndex++ % 3)  				{  					case 0:  						LineColor = new RGBA_Bytes(255' 55' 55);  						break;    					case 1:  						LineColor = new RGBA_Bytes(55' 255' 55);  						break;    					case 2:  						LineColor = new RGBA_Bytes(55' 55' 255);  						break;  				}    				dataHistoryArray.Add(DataType' new HistoryData((int)graphWidth' LineColor));  			}
Magic Number,Gaming.Game,DataViewGraph,C:\repos\MatterHackers_MatterControl\CustomWidgets\DataViewGraph.cs,AddData,The following statement contains a magic number: if (!dataHistoryArray.ContainsKey(DataType))  			{  				RGBA_Bytes LineColor = new RGBA_Bytes(255' 255' 255);  				switch (nextLineColorIndex++ % 3)  				{  					case 0:  						LineColor = new RGBA_Bytes(255' 55' 55);  						break;    					case 1:  						LineColor = new RGBA_Bytes(55' 255' 55);  						break;    					case 2:  						LineColor = new RGBA_Bytes(55' 55' 255);  						break;  				}    				dataHistoryArray.Add(DataType' new HistoryData((int)graphWidth' LineColor));  			}
Magic Number,Gaming.Game,DataViewGraph,C:\repos\MatterHackers_MatterControl\CustomWidgets\DataViewGraph.cs,Reset,The following statement contains a magic number: valueMin = 99999;
Magic Number,Gaming.Game,HistoryData,C:\repos\MatterHackers_MatterControl\CustomWidgets\DataViewGraph.cs,GetMaxValue,The following statement contains a magic number: double Max = -9999999999;
Magic Number,Gaming.Game,HistoryData,C:\repos\MatterHackers_MatterControl\CustomWidgets\DataViewGraph.cs,GetMinValue,The following statement contains a magic number: double Min = 9999999999;
Duplicate Code,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The method contains a code clone-set at the following line numbers (starting from the method definition): ((280' 301)' (367' 388))
Missing Default,MatterHackers.MatterControl,WidescreenPanel,C:\repos\MatterHackers_MatterControl\ApplicationView\WidescreenPanel.cs,SetColumnVisibility,The following switch statement is missing a default case: switch (numberOfPanels)  			{  				case 1:  					{  						ColumnTwo.Visible = false;  						ColumnOne.Visible = true;    						Padding = new BorderDouble(0);    						leftBorderLine.Visible = false;  					}  					break;    				case 2:  					Padding = new BorderDouble(4);  					ColumnOne.Visible = true;  					ColumnTwo.Visible = true;  					ColumnOne.HAnchor = HAnchor.AbsolutePosition;  					ColumnOne.Width = ColumnOneFixedWidth; // it can hold the slice settings so it needs to be bigger.  					ColumnOne.MinimumSize = new Vector2(Math.Max(compactSlidePanel.TabBarWidth' ColumnOneFixedWidth)' 0); //Ordering here matters - must go after children are added  					break;  			}
Missing Default,MatterHackers.MatterControl,ApplicationController,C:\repos\MatterHackers_MatterControl\ApplicationView\MainApplicationWidget.cs,ApplicationController,The following switch statement is missing a default case: switch (PrinterConnectionAndCommunication.Instance.CommunicationState)  				{  					case PrinterConnectionAndCommunication.CommunicationStates.Printing:  						if (UserSettings.Instance.IsTouchScreen)  						{  							UiThread.RunOnIdle(PrintingWindow.Show);  						}    						break;  				}
Missing Default,MatterHackers.MatterControl,PartThumbnailWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\PartThumbnailWidget.cs,CreateThumbnail,The following switch statement is missing a default case: switch (renderType)  			{  				case RenderType.RAY_TRACE:  					{  						ThumbnailTracer tracer = new ThumbnailTracer(loadedMeshGroups' BigRenderSize.x' BigRenderSize.y);  						tracer.DoTrace();    						bigRender = tracer.destImage;  					}  					break;    				case RenderType.PERSPECTIVE:  					{  						ThumbnailTracer tracer = new ThumbnailTracer(loadedMeshGroups' BigRenderSize.x' BigRenderSize.y);  						this.thumbnailImage = new ImageBuffer(this.buildingThumbnailImage);  						this.thumbnailImage.NewGraphics2D().Clear(new RGBA_Bytes(255' 255' 255' 0));    						bigRender = new ImageBuffer(BigRenderSize.x' BigRenderSize.y);    						foreach (MeshGroup meshGroup in loadedMeshGroups)  						{  							double minZ = double.MaxValue;  							double maxZ = double.MinValue;  							foreach (Mesh loadedMesh in meshGroup.Meshes)  							{  								tracer.GetMinMaxZ(loadedMesh' ref minZ' ref maxZ);  							}    							foreach (Mesh loadedMesh in meshGroup.Meshes)  							{  								tracer.DrawTo(bigRender.NewGraphics2D()' loadedMesh' RGBA_Bytes.White' minZ' maxZ);  							}  						}    						if (bigRender == null)  						{  							bigRender = new ImageBuffer(this.noThumbnailImage);  						}  					}  					break;    				case RenderType.NONE:  				case RenderType.ORTHOGROPHIC:    					this.thumbnailImage = new ImageBuffer(this.buildingThumbnailImage);  					this.thumbnailImage.NewGraphics2D().Clear(new RGBA_Bytes(255' 255' 255' 0));  					bigRender = BuildImageFromMeshGroups(loadedMeshGroups' stlHashCode' BigRenderSize);  					if (bigRender == null)  					{  						bigRender = new ImageBuffer(this.noThumbnailImage);  					}  					break;  			}
Missing Default,MatterHackers.MatterControl,MatterControlApplication,C:\repos\MatterHackers_MatterControl\MatterControlApplication.cs,MatterControlApplication,The following switch statement is missing a default case: switch (commandUpper)  				{  					case "FORCE_SOFTWARE_RENDERING":  						GL.HardwareAvailable = false;  						break;    					case "CLEAR_CACHE":  						AboutWidget.DeleteCacheData(0);  						break;    					case "SHOW_MEMORY":  						ShowMemoryUsed = true;  						break;    					case "DO_GC_COLLECT_EVERY_DRAW":  						ShowMemoryUsed = true;  						DoCGCollectEveryDraw = true;  						break;    					//case "CREATE_AND_SELECT_PRINTER":  					//	if (currentCommandIndex + 1 <= commandLineArgs.Length)  					//	{  					//		currentCommandIndex++;  					//		string argument = commandLineArgs[currentCommandIndex];  					//		string[] printerData = argument.Split(''');  					//		if (printerData.Length >= 2)  					//		{  					//			Printer ActivePrinter = new Printer();    					//			ActivePrinter.Name = "Auto: {0} {1}".FormatWith(printerData[0]' printerData[1]);  					//			ActivePrinter.Make = printerData[0];  					//			ActivePrinter.Model = printerData[1];    					//			if (printerData.Length == 3)  					//			{  					//				ActivePrinter.ComPort = printerData[2];  					//			}    					//			PrinterSetupStatus test = new PrinterSetupStatus(ActivePrinter);  					//			test.LoadSettingsFromConfigFile(ActivePrinter.Make' ActivePrinter.Model);  					//			ActiveSliceSettings.Instance = ActivePrinter;  					//		}  					//	}    					//	break;    					case "CONNECT_TO_PRINTER":  						if (currentCommandIndex + 1 <= commandLineArgs.Length)  						{  							PrinterConnectionAndCommunication.Instance.ConnectToActivePrinter();  						}  						break;    					case "START_PRINT":  						if (currentCommandIndex + 1 <= commandLineArgs.Length)  						{  							bool hasBeenRun = false;  							currentCommandIndex++;  							string fullPath = commandLineArgs[currentCommandIndex];  							QueueData.Instance.RemoveAll();  							if (!string.IsNullOrEmpty(fullPath))  							{  								string fileName = Path.GetFileNameWithoutExtension(fullPath);  								QueueData.Instance.AddItem(new PrintItemWrapper(new PrintItem(fileName' fullPath)));  								PrinterConnectionAndCommunication.Instance.CommunicationStateChanged.RegisterEvent((sender' e) =>  								{  									if (!hasBeenRun && PrinterConnectionAndCommunication.Instance.CommunicationState == PrinterConnectionAndCommunication.CommunicationStates.Connected)  									{  										hasBeenRun = true;  										PrinterConnectionAndCommunication.Instance.PrintActivePartIfPossible();  									}  								}' ref unregisterEvent);  							}  						}  						break;    					case "SLICE_AND_EXPORT_GCODE":  						if (currentCommandIndex + 1 <= commandLineArgs.Length)  						{  							currentCommandIndex++;  							string fullPath = commandLineArgs[currentCommandIndex];  							QueueData.Instance.RemoveAll();  							if (!string.IsNullOrEmpty(fullPath))  							{  								string fileName = Path.GetFileNameWithoutExtension(fullPath);  								PrintItemWrapper printItemWrapper = new PrintItemWrapper(new PrintItem(fileName' fullPath));  								QueueData.Instance.AddItem(printItemWrapper);    								SlicingQueue.Instance.QueuePartForSlicing(printItemWrapper);  								ExportPrintItemWindow exportForTest = new ExportPrintItemWindow(printItemWrapper);  								exportForTest.ExportGcodeCommandLineUtility(fileName);  							}  						}  						break;  				}
Missing Default,MatterHackers.MatterControl.CustomWidgets,DisableableWidget,C:\repos\MatterHackers_MatterControl\CustomWidgets\DisableableWidget.cs,SetEnableLevel,The following switch statement is missing a default case: switch (enabledLevel)  			{  				case EnableLevel.Disabled:  					disableOverlay.Margin = new BorderDouble(0);  					disableOverlay.Visible = true;  					break;    				case EnableLevel.ConfigOnly:  					disableOverlay.Margin = new BorderDouble(0' 0' 0' 26);  					disableOverlay.Visible = true;  					break;    				case EnableLevel.Enabled:  					disableOverlay.Visible = false;  					break;  			}
Missing Default,MatterHackers.MatterControl.CustomWidgets.LibrarySelector,LibrarySelectorRowItem,C:\repos\MatterHackers_MatterControl\CustomWidgets\LibrarySelector\LibrarySelectorRowItem.cs,UpdateHoverState,The following switch statement is missing a default case: switch (UnderMouseState)  				{  					case UnderMouseState.NotUnderMouse:  						IsHoverItem = false;  						break;    					case UnderMouseState.FirstUnderMouse:  						IsHoverItem = true;  						break;    					case UnderMouseState.UnderMouseNotFirst:  						if (ContainsFirstUnderMouseRecursive())  						{  							IsHoverItem = true;  						}  						else  						{  							IsHoverItem = false;  						}  						break;  				}
Missing Default,MatterHackers.MatterControl.PrinterCommunication.Io,WaitForTempStream,C:\repos\MatterHackers_MatterControl\PrinterCommunication\Io\WaitForTempStream.cs,ReadLine,The following switch statement is missing a default case: switch (state)  			{  				case State.passthrough:  					{  						string lineToSend = base.ReadLine();    						if (lineToSend != null  							&& lineToSend.StartsWith("M"))  						{  							// initial test is just to see if it is an M109  							if (lineToSend.StartsWith("M109")) // extruder set and wait temp  							{  								if (lineToSend.Contains("F") // If it has a control character F (auto temp)  									|| !lineToSend.Contains("S")) // if it is a reset (has no S temperature)  								{  									// don't replace it  									return lineToSend;  								}    								// send an M104 instead  								waitWhenCooling = false;  								lineToSend = "M104" + lineToSend.Substring(4);  								GCodeFile.GetFirstNumberAfter("S"' lineToSend' ref targetTemp);  								extruderIndex = 0;  								GCodeFile.GetFirstNumberAfter("T"' lineToSend' ref extruderIndex);  								if (targetTemp > ignoreRequestIfBelowTemp)  								{  									state = State.waitingForExtruderTemp;  									timeHaveBeenAtTemp.Reset();  								}  								else  								{  									Thread.Sleep(100); // sleep .1 second while waiting for temp  									return ""; // return nothing until we reach temp  								}  							}  							else if (lineToSend.StartsWith("M190")) // bed set and wait temp  							{  								// send an M140 instead  								bool gotR = GCodeFile.GetFirstNumberAfter("R"' lineToSend' ref targetTemp);  								bool gotS = GCodeFile.GetFirstNumberAfter("S"' lineToSend' ref targetTemp);  								if (gotR || gotS)  								{  									if (targetTemp > ignoreRequestIfBelowTemp)  									{  										waitWhenCooling = gotR;  										lineToSend = "M140 S" + targetTemp.ToString();  										state = State.waitingForBedTemp;  										timeHaveBeenAtTemp.Reset();  									}  									else  									{  										Thread.Sleep(100); // sleep .1 second while waiting for temp  										return ""; // return nothing until we reach temp  									}  								}  								else  								{  									Thread.Sleep(100); // sleep .1 second while waiting for temp  									return ""; // return nothing until we reach temp  								}  							}  						}    						return lineToSend;  					}    				case State.waitingForExtruderTemp:  					{  						double extruderTemp = PrinterConnectionAndCommunication.Instance.GetActualExtruderTemperature((int)extruderIndex);  						bool tempWithinRange = extruderTemp >= targetTemp - sameTempRange && extruderTemp <= targetTemp + sameTempRange;  						if (tempWithinRange && !timeHaveBeenAtTemp.IsRunning)  						{  							timeHaveBeenAtTemp.Start();  						}    						if (timeHaveBeenAtTemp.Elapsed.TotalSeconds > waitAfterReachTempTime  							|| PrinterConnectionAndCommunication.Instance.PrintWasCanceled)  						{  							// switch to pass through and continue  							state = State.passthrough;  							return "";  						}  						else  						{  							// send a wait command  							Thread.Sleep(100); // sleep .1 second while waiting for temp  							return ""; // return nothing until we reach temp  						}  					}    				case State.waitingForBedTemp:  					{  						double bedTemp = PrinterConnectionAndCommunication.Instance.ActualBedTemperature;  						bool tempWithinRange;  						if (waitWhenCooling)  						{  							tempWithinRange = bedTemp >= targetTemp - sameTempRange && bedTemp <= targetTemp + sameTempRange;  						}  						else  						{  							tempWithinRange = bedTemp >= targetTemp - sameTempRange;  						}    						// Added R code for M190  						if (tempWithinRange && !timeHaveBeenAtTemp.IsRunning)  						{  							timeHaveBeenAtTemp.Start();  						}    						if (timeHaveBeenAtTemp.Elapsed.TotalSeconds > waitAfterReachTempTime  							|| PrinterConnectionAndCommunication.Instance.PrintWasCanceled)  						{  							// switch to pass through and continue  							state = State.passthrough;  							return "";  						}  						else  						{  							// send a wait command  							Thread.Sleep(100); // sleep .1 second while waiting for temp  							return ""; // return nothing until we reach temp  						}  					}  			}
Missing Default,MatterHackers.MatterControl.PrinterCommunication.Io,PrintRecoveryStream,C:\repos\MatterHackers_MatterControl\PrinterCommunication\Io\PrintRecoveryStream.cs,ReadLine,The following switch statement is missing a default case: switch (recoveryState)  			{  				// heat the extrude to remove it from the part  				case RecoveryState.RemoveHeating:  					// TODO: make sure we heat up all the extruders that we need to (all that are used)  					queuedCommands.Add("G21; set units to millimeters");  					queuedCommands.Add("M107; fan off");  					queuedCommands.Add("T0; set the active extruder to 0");  					queuedCommands.Add("G90; use absolute coordinates");  					queuedCommands.Add("G92 E0; reset the expected extruder position");  					queuedCommands.Add("M82; use absolute distance for extrusion");  					  					bool hasHeatedBed = ActiveSliceSettings.Instance.GetValue<bool>(SettingsKey.has_heated_bed);  					double bedTemp = ActiveSliceSettings.Instance.GetValue<double>(SettingsKey.bed_temperature);  					if (hasHeatedBed && bedTemp > 0)  					{  						// start heating the bed  						queuedCommands.Add($"M140 S{bedTemp}");  					}    					// heat up the extruder  					queuedCommands.Add("M109 S{0}".FormatWith(ActiveSliceSettings.Instance.Helpers.ExtruderTemperature(0)));    					if (hasHeatedBed && bedTemp > 0)  					{  						// finish heating the bed  						queuedCommands.Add($"M190 S{bedTemp}");  					}    					recoveryState = RecoveryState.Raising;  					return "";    				// remove it from the part  				case RecoveryState.Raising:  					// We don't know where the printer is for sure (it make have been turned off). Disable leveling until we know where it is.  					PrintLevelingStream.Enabled = false;  					queuedCommands.Add("M114 ; get current position");  					queuedCommands.Add("G91 ; move relative");  					queuedCommands.Add("G1 Z10 F{0}".FormatWith(MovementControls.ZSpeed));  					queuedCommands.Add("G90 ; move absolute");  					recoveryState = RecoveryState.Homing;  					return "";    				// if top homing' home the extruder  				case RecoveryState.Homing:  					if (ActiveSliceSettings.Instance.GetValue<bool>(SettingsKey.z_homes_to_max))  					{  						queuedCommands.Add("G28");  					}  					else  					{  						// home x  						queuedCommands.Add("G28 X0");  						// home y  						queuedCommands.Add("G28 Y0");  						// move to the place we can home z from  						Vector2 recoveryPositionXy = ActiveSliceSettings.Instance.GetValue<Vector2>(SettingsKey.recover_position_before_z_home);  						queuedCommands.Add("G1 X{0:0.###}Y{1:0.###}F{2}".FormatWith(recoveryPositionXy.x' recoveryPositionXy.y' MovementControls.XSpeed));  						// home z  						queuedCommands.Add("G28 Z0");  					}  					// We now know where the printer is re-enable print leveling  					PrintLevelingStream.Enabled = true;  					recoveryState = RecoveryState.FindingRecoveryLayer;  					return "";  					  				// This is to recover printing if an out a filament occurs.   				// Help the user move the extruder down to just touching the part  				case RecoveryState.FindingRecoveryLayer:  					if (false) // help the user get the head to the right position  					{  						// move to above the completed print  						// move over a know good part of the model at the current top layer (extrude vertex from gcode)  						// let the user move down until they like the height  						// calculate that position and continue  					}  					else // we are resuming because of disconnect or reset' skip this  					{  						recoveryState = RecoveryState.SkippingGCode;  						goto case RecoveryState.SkippingGCode;  					}    				case RecoveryState.SkippingGCode:  					// run through the gcode that the device expected looking for things like temp  					// and skip everything else until we get to the point we left off last time  					int commandCount = 0;  					boundsOfSkippedLayers = RectangleDouble.ZeroIntersection;  					while (internalStream.FileStreaming.PercentComplete(internalStream.LineIndex) < percentDone)  					{  						string line = internalStream.ReadLine();  						if(line == null)  						{  							break;  						}  						commandCount++;    						// make sure we don't parse comments  						if(line.Contains(";"))  						{  							line = line.Split(';')[0];  						}  						lastDestination = GetPosition(line' lastDestination);    						if (commandCount > 100)  						{  							boundsOfSkippedLayers.ExpandToInclude(lastDestination.position.Xy);  							if (boundsOfSkippedLayers.Bottom < 10)  							{  								int a = 0;  							}  						}    						// check if the line is something we want to send to the printer (like a temp)  						if (line.StartsWith("M109") // heat and wait extruder  							|| line.StartsWith("M104") // heat extruder  							|| line.StartsWith("M190") // heat and wait bed  							|| line.StartsWith("M140") // heat bed  							|| line.StartsWith("T") // switch extruder  							|| line.StartsWith("M106") // fan on  							|| line.StartsWith("M107") // fan off  							|| line.StartsWith("G92")) // set position  						{  							return line;  						}  					}  					  					recoveryState = RecoveryState.PrimingAndMovingToStart;    					// make sure we always- pick up the last movement  					boundsOfSkippedLayers.ExpandToInclude(lastDestination.position.Xy);  					return "";    				case RecoveryState.PrimingAndMovingToStart:  					{    						if (ActiveSliceSettings.Instance.GetValue("z_homes_to_max") == "0") // we are homed to the bed  						{  							// move to the height we can recover printing from  							Vector2 recoverPositionXy = ActiveSliceSettings.Instance.GetValue<Vector2>(SettingsKey.recover_position_before_z_home);  							queuedCommands.Add(CreateMovementLine(new PrinterMove(new VectorMath.Vector3(recoverPositionXy.x' recoverPositionXy.y' lastDestination.position.z)' 0' MovementControls.ZSpeed)));  						}    						double extruderWidth = ActiveSliceSettings.Instance.GetValue<double>(SettingsKey.nozzle_diameter);  						// move to a position outside the printed bounds  						queuedCommands.Add(CreateMovementLine(new PrinterMove(  							new Vector3(boundsOfSkippedLayers.Left - extruderWidth*2' boundsOfSkippedLayers.Bottom + boundsOfSkippedLayers.Height / 2' lastDestination.position.z)'  							0' MovementControls.XSpeed)));  						  						// let's prime the extruder  						queuedCommands.Add("G1 E10 F{0}".FormatWith(MovementControls.EFeedRate(0))); // extrude 10  						queuedCommands.Add("G1 E9"); // and retract a bit    						// move to the actual print position  						queuedCommands.Add(CreateMovementLine(new PrinterMove(lastDestination.position' 0' MovementControls.XSpeed)));    						/// reset the printer to know where the filament should be  						queuedCommands.Add("G92 E{0}".FormatWith(lastDestination.extrusion));  						recoveryState = RecoveryState.PrintingSlow;  					}  					return "";    				case RecoveryState.PrintingSlow:  					{  						string lineToSend = internalStream.ReadLine();  						if (lineToSend == null)  						{  							return null;  						}    						if (!GCodeFile.IsLayerChange(lineToSend))  						{  							// have not seen the end of this layer so keep printing slow  							if (LineIsMovement(lineToSend))  							{  								PrinterMove currentMove = GetPosition(lineToSend' lastDestination);  								PrinterMove moveToSend = currentMove;    								moveToSend.feedRate = recoverFeedRate;    								lineToSend = CreateMovementLine(moveToSend' lastDestination);  								lastDestination = currentMove;  								return lineToSend;  							}    							return lineToSend;  						}  					}    					// we only fall through to here after seeing the next "; Layer:"  					recoveryState = RecoveryState.PrintingToEnd;  					return "";    				case RecoveryState.PrintingToEnd:  					return internalStream.ReadLine();  			}
Missing Default,MatterHackers.MatterControl.PartPreviewWindow,ScaleControls,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\SideBar\ScaleControls.cs,CreateScaleDropDownMenu,The following switch statement is missing a default case: switch (presetScaleMenu.SelectedIndex)  				{  					case 0:  						scale = 1.0 / 25.4;  						break;    					case 1:  						scale = 25.4;  						break;    					case 2:  						scale = .1;  						break;    					case 3:  						scale = 10;  						break;    					case 4:  						scale = 1;  						break;  				}
Missing Default,MatterHackers.MatterControl.PartPreviewWindow,SnappingIndicators,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\Gui3D\SnapingIndicator.cs,SetPosition,The following switch statement is missing a default case: switch (meshSelectInfo.HitQuadrant)  				{  					case HitQuadrant.LB:  						{  							Vector3 cornerPoint = new Vector3(selectedBounds.minXYZ.x' selectedBounds.minXYZ.y' 0);  							double distBetweenPixelsWorldSpace = MeshViewerToDrawWith.TrackballTumbleWidget.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    							lines[0] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  							lines[1] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    							lines[2] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  							lines[3] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  						}  						break;    					case HitQuadrant.LT:  						{  							Vector3 cornerPoint = new Vector3(selectedBounds.minXYZ.x' selectedBounds.maxXYZ.y' 0);  							double distBetweenPixelsWorldSpace = MeshViewerToDrawWith.TrackballTumbleWidget.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    							lines[0] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  							lines[1] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    							lines[2] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  							lines[3] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  						}  						break;    					case HitQuadrant.RB:  						{  							Vector3 cornerPoint = new Vector3(selectedBounds.maxXYZ.x' selectedBounds.minXYZ.y' 0);  							double distBetweenPixelsWorldSpace = MeshViewerToDrawWith.TrackballTumbleWidget.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    							lines[0] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  							lines[1] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    							lines[2] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  							lines[3] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint - new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  						}  						break;    					case HitQuadrant.RT:  						{  							Vector3 cornerPoint = new Vector3(selectedBounds.maxXYZ.x' selectedBounds.maxXYZ.y' 0);  							double distBetweenPixelsWorldSpace = MeshViewerToDrawWith.TrackballTumbleWidget.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    							lines[0] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  							lines[1] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    							lines[2] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  							lines[3] = MeshViewerToDrawWith.TrackballTumbleWidget.GetScreenPosition(cornerPoint + new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  						}  						break;  				}
Missing Default,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,View3DWidget,The following switch statement is missing a default case: switch (PrinterConnectionAndCommunication.Instance.CommunicationState)  					{  						case PrinterConnectionAndCommunication.CommunicationStates.Printing:  						case PrinterConnectionAndCommunication.CommunicationStates.Paused:  							LockEditControls();  							break;  					}
Missing Default,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,C:\repos\MatterHackers_MatterControl\PartPreviewWindow\View3D\View3DCreateSelectionData.cs,OnKeyDown,The following switch statement is missing a default case: switch (keyEvent.KeyCode)  			{  				case Keys.Z:  					if (keyEvent.Control)  					{  						UndoBuffer.Undo();  						keyEvent.Handled = true;  						keyEvent.SuppressKeyPress = true;  					}  					break;    				case Keys.Y:  					if (keyEvent.Control)  					{  						UndoBuffer.Redo();  						keyEvent.Handled = true;  						keyEvent.SuppressKeyPress = true;  					}  					break;    				case Keys.Delete:  				case Keys.Back:  					DeleteSelectedMesh();  					break;    				case Keys.Escape:  					if (CurrentSelectInfo.DownOnPart)  					{  						CurrentSelectInfo.DownOnPart = false;    						SelectedMeshGroupTransform = transformOnMouseDown;    						Invalidate();  					}  					break;  			}
Missing Default,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepInstallDriver,C:\repos\MatterHackers_MatterControl\PrinterControls\PrinterConnections\SetupStepInstallDriver.cs,InstallDriver,The following switch statement is missing a default case: switch (OsInformation.OperatingSystem)  			{  				case OSType.Windows:  					if (File.Exists(fileName))  					{  						if (Path.GetExtension(fileName).ToUpper() == ".INF")  						{  							Process driverInstallerProcess = new Process();  							// Prepare the process to run  							  							// Enter in the command line arguments' everything you would enter after the executable name itself  							driverInstallerProcess.StartInfo.Arguments = Path.GetFullPath(fileName);  							  							// Enter the executable to run' including the complete path  							string printerDriverInstallerExePathAndFileName = Path.GetFullPath(Path.Combine("."' "InfInstaller.exe"));    							driverInstallerProcess.StartInfo.CreateNoWindow = true;  							driverInstallerProcess.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;    							driverInstallerProcess.StartInfo.FileName = Path.GetFullPath(printerDriverInstallerExePathAndFileName);  							driverInstallerProcess.StartInfo.Verb = "runas";  							driverInstallerProcess.StartInfo.UseShellExecute = true;    							driverInstallerProcess.Start();  							driverInstallerProcess.WaitForExit();  						}  						else  						{  							Process.Start(fileName);  						}  					}  					else  					{  						throw new Exception(string.Format("Can't find driver {0}."' fileName));  					}  					break;    				case OSType.Mac:  					break;    				case OSType.X11:  					if (File.Exists(fileName))  					{  						if (Path.GetExtension(fileName).ToUpper() == ".INF")  						{  							var driverInstallerProcess = new Process();  							// Prepare the process to run  							  							// Enter in the command line arguments' everything you would enter after the executable name itself  							driverInstallerProcess.StartInfo.Arguments = Path.GetFullPath(fileName);    							// Enter the executable to run' including the complete path  							string printerDriverInstallerExePathAndFileName = Path.Combine("."' "InfInstaller.exe");    							driverInstallerProcess.StartInfo.CreateNoWindow = true;  							driverInstallerProcess.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;    							driverInstallerProcess.StartInfo.FileName = Path.GetFullPath(printerDriverInstallerExePathAndFileName);  							driverInstallerProcess.StartInfo.Verb = "runas";  							driverInstallerProcess.StartInfo.UseShellExecute = true;    							driverInstallerProcess.Start();    							driverInstallerProcess.WaitForExit();    							// Retrieve the app's exit code  							var exitCode = driverInstallerProcess.ExitCode;  						}  						else  						{  							Process.Start(fileName);  						}  					}  					else  					{  						throw new Exception("Can't find driver: " + fileName);  					}  					break;  			}
Missing Default,MatterHackers.MatterControl.PrintLibrary,LibraryRowItem,C:\repos\MatterHackers_MatterControl\Library\LibraryRowItem.cs,UpdateHoverState,The following switch statement is missing a default case: switch (UnderMouseState)  				{  					case UnderMouseState.NotUnderMouse:  						IsHoverItem = false;  						break;    					case UnderMouseState.FirstUnderMouse:  						IsHoverItem = true;  						break;    					case UnderMouseState.UnderMouseNotFirst:  						if (ContainsFirstUnderMouseRecursive())  						{  							IsHoverItem = true;  						}  						else  						{  							IsHoverItem = false;  						}  						break;  				}
Missing Default,MatterHackers.MatterControl.SlicerConfiguration,ProfileManager,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\ProfileManager.cs,SettingsChanged,The following switch statement is missing a default case: switch (settingsKey)  			{  				case SettingsKey.printer_name:  					Instance.ActiveProfile.Name = ActiveSliceSettings.Instance.GetValue(SettingsKey.printer_name);  					Instance.Save();  					break;    				case SettingsKey.com_port:  					Instance.ActiveProfile.ComPort = ActiveSliceSettings.Instance.Helpers.ComPort();  					Instance.Save();  					break;  			}
Missing Default,MatterHackers.MatterControl.SlicerConfiguration,ProfileManager,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\Settings\ProfileManager.cs,ImportFromExisting,The following switch statement is missing a default case: switch (importType)  			{  				case ProfileManager.ProfileExtension:  					// Add the Settings as a profile before performing any actions on it to ensure file paths resolve  					{  						Instance.Profiles.Add(printerInfo);    						var printerSettings = PrinterSettings.LoadFile(settingsFilePath);  						printerSettings.ID = printerInfo.ID;  						printerSettings.ClearValue(SettingsKey.device_token);  						printerInfo.DeviceToken = "";    						// TODO: Resolve name conflicts  						printerSettings.Helpers.SetName(printerInfo.Name);    						if (printerSettings.OemLayer.ContainsKey(SettingsKey.make))  						{  							printerInfo.Make = printerSettings.OemLayer[SettingsKey.make];  						}    						if (printerSettings.OemLayer.ContainsKey(SettingsKey.model))  						{  							printerInfo.Model = printerSettings.OemLayer[SettingsKey.model] ?? "Other";  						}    						printerSettings.Save();  						importSuccessful = true;  					}  					break;    				case ".ini":  					//Scope variables  					{  						var settingsToImport = PrinterSettingsLayer.LoadFromIni(settingsFilePath);  						var printerSettings = new PrinterSettings()  						{  							ID = printerInfo.ID'  						};    						bool containsValidSetting = false;    						printerSettings.OemLayer = new PrinterSettingsLayer();    						printerSettings.OemLayer[SettingsKey.make] = "Other";  						printerSettings.OemLayer[SettingsKey.model] = "Other";    						foreach (var item in settingsToImport)  						{  							if (printerSettings.Contains(item.Key))  							{  								containsValidSetting = true;  								string currentValue = printerSettings.GetValue(item.Key).Trim();  								// Compare the value to import to the layer cascade value and only set if different  								if (currentValue != item.Value)  								{  									printerSettings.OemLayer[item.Key] = item.Value;  								}  							}  						}    						if(containsValidSetting)  						{  							printerSettings.UserLayer[SettingsKey.printer_name] = printerInfo.Name;    							printerSettings.ClearValue(SettingsKey.device_token);  							printerInfo.DeviceToken = "";    							printerInfo.Make = printerSettings.OemLayer[SettingsKey.make] ?? "Other";  							printerInfo.Model = printerSettings.OemLayer[SettingsKey.model] ?? "Other";    							Instance.Profiles.Add(printerInfo);    							printerSettings.Helpers.SetName(printerInfo.Name);    							printerSettings.Save();  							importSuccessful = true;  						}  					}  					break;  			}
Missing Default,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SliceSettingsWidget.cs,CreateSettingInfoUIControls,The following switch statement is missing a default case: switch (viewFilter)  					{  						case NamedSettingsLayers.All:  							if (settingData.ShowAsOverride)  							{  								var defaultCascade = ActiveSliceSettings.Instance.defaultLayerCascade;  								var firstParentValue = ActiveSliceSettings.Instance.GetValueAndLayerName(settingData.SlicerConfigName' defaultCascade.Skip(1));  								var currentValueAndLayerName = ActiveSliceSettings.Instance.GetValueAndLayerName(settingData.SlicerConfigName' defaultCascade);    								var currentValue = currentValueAndLayerName.Item1;  								var layerName = currentValueAndLayerName.Item2;    								if (firstParentValue.Item1 == currentValue)  								{  									if (layerName.StartsWith("Material"))  									{  										settingsRow.BackgroundColor = materialSettingBackgroundColor;  									}  									else if (layerName.StartsWith("Quality"))  									{  										settingsRow.BackgroundColor = qualitySettingBackgroundColor;  									}  									else  									{  										settingsRow.BackgroundColor = RGBA_Bytes.Transparent;  									}    									if (restoreButton != null)  									{  										restoreButton.Visible = false;  									}  								}  								else  								{  									settingsRow.BackgroundColor = userSettingBackgroundColor;  									if (restoreButton != null) restoreButton.Visible = true;  								}  							}  							break;  						case NamedSettingsLayers.Material:  							settingsRow.BackgroundColor = materialSettingBackgroundColor;  							if (restoreButton != null) restoreButton.Visible = true;  							break;  						case NamedSettingsLayers.Quality:  							settingsRow.BackgroundColor = qualitySettingBackgroundColor;  							if (restoreButton != null) restoreButton.Visible = true;  							break;  					}
Missing Default,MatterHackers.MatterControl.SlicerConfiguration,SlicingQueue,C:\repos\MatterHackers_MatterControl\SlicerConfiguration\SlicingQueue.cs,CreateSlicedPartsThread,The following switch statement is missing a default case: switch (ActiveSliceSettings.Instance.Helpers.ActiveSliceEngineType())  							{  								case SlicingEngineTypes.Slic3r:  									Slic3rEngineMappings.WriteSliceSettingsFile(currentConfigurationFileAndPath);  									// if we have centering turend on and are printing a model loaded up from meshes (not gcode)  									if(ActiveSliceSettings.Instance.GetValue<bool>(SettingsKey.center_part_on_bed))  									{  										// figure out the center position of this file  										Vector2 bedCenter = ActiveSliceSettings.Instance.GetValue<Vector2>(SettingsKey.print_center);  										commandArgs = $"--print-center {bedCenter.x:0.##}'{bedCenter.y:0.##} " + "--load \"" + currentConfigurationFileAndPath + "\" --output \"" + gcodePathAndFileName + "\" \"" + fileToSlice + "\"";  									}  									else  									{  										commandArgs = "--load \"" + currentConfigurationFileAndPath + "\" --output \"" + gcodePathAndFileName + "\" \"" + fileToSlice + "\"";  									}  									break;    								case SlicingEngineTypes.CuraEngine:  									commandArgs = "-v -o \"" + gcodePathAndFileName + "\" " + EngineMappingCura.GetCuraCommandLineSettings() + " \"" + fileToSlice + "\"";  									break;    								case SlicingEngineTypes.MatterSlice:  									{  										EngineMappingsMatterSlice.WriteSliceSettingsFile(currentConfigurationFileAndPath);  										if (mergeRules == "")  										{  											commandArgs = "-v -o \"" + gcodePathAndFileName + "\" -c \"" + currentConfigurationFileAndPath + "\"";  										}  										else  										{  											commandArgs = "-b {0} -v -o \"".FormatWith(mergeRules) + gcodePathAndFileName + "\" -c \"" + currentConfigurationFileAndPath + "\"";  										}  										foreach (string filename in stlFileLocations)  										{  											commandArgs = commandArgs + " \"" + filename + "\"";  										}  									}  									break;  							}
Missing Default,MatterHackers.MatterControl.EeProm,EePromMarlinSettings,C:\repos\MatterHackers_MatterControl\EeProm\EePromMarlinSettings.cs,Export,The following switch statement is missing a default case: switch (field.FieldType.Name)  					{  						case "Int32":  						case "Double":  						case "Boolean":  						case "FMatrix3x3":  						case "String":  							// all these setting just output correctly with ToString() so we don't have to do anything special.  							sw.WriteLine("{0}|{1}".FormatWith(name' value));  							break;  					}
Missing Default,MatterHackers.MatterControl.PrintQueue,QueueRowItem,C:\repos\MatterHackers_MatterControl\Queue\QueueRowItem.cs,UpdateHoverState,The following switch statement is missing a default case: switch (UnderMouseState)  				{  					case UnderMouseState.NotUnderMouse:  						IsHoverItem = false;  						break;    					case UnderMouseState.FirstUnderMouse:  						IsHoverItem = true;  						break;    					case UnderMouseState.UnderMouseNotFirst:  						if (ContainsFirstUnderMouseRecursive())  						{  							IsHoverItem = true;  						}  						else  						{  							IsHoverItem = false;  						}  						break;  				}
Missing Default,SQLiteWin32,SQLiteConnection,C:\repos\MatterHackers_MatterControl\DataStorage\SQLiteWin32.cs,BeginTransaction,The following switch statement is missing a default case: switch (sqlExp.Result)  						{  							case SQLite3.Result.IOError:  							case SQLite3.Result.Full:  							case SQLite3.Result.Busy:  							case SQLite3.Result.NoMem:  							case SQLite3.Result.Interrupt:  								RollbackTo(null' true);  								break;  						}
Missing Default,SQLiteWin32,SQLiteConnection,C:\repos\MatterHackers_MatterControl\DataStorage\SQLiteWin32.cs,SaveTransactionPoint,The following switch statement is missing a default case: switch (sqlExp.Result)  					{  						case SQLite3.Result.IOError:  						case SQLite3.Result.Full:  						case SQLite3.Result.Busy:  						case SQLite3.Result.NoMem:  						case SQLite3.Result.Interrupt:  							RollbackTo(null' true);  							break;  					}
Missing Default,SQLiteUnix,SQLiteConnection,C:\repos\MatterHackers_MatterControl\DataStorage\SQLiteUnix.cs,BeginTransaction,The following switch statement is missing a default case: switch (sqlExp.Result)  						{  							case SQLite3.Result.IOError:  							case SQLite3.Result.Full:  							case SQLite3.Result.Busy:  							case SQLite3.Result.NoMem:  							case SQLite3.Result.Interrupt:  								RollbackTo(null' true);  								break;  						}
Missing Default,SQLiteUnix,SQLiteConnection,C:\repos\MatterHackers_MatterControl\DataStorage\SQLiteUnix.cs,SaveTransactionPoint,The following switch statement is missing a default case: switch (sqlExp.Result)  					{  						case SQLite3.Result.IOError:  						case SQLite3.Result.Full:  						case SQLite3.Result.Busy:  						case SQLite3.Result.NoMem:  						case SQLite3.Result.Interrupt:  							RollbackTo(null' true);  							break;  					}
Missing Default,MatterHackers.MatterControl.PrinterCommunication,PrinterConnectionAndCommunication,C:\repos\MatterHackers_MatterControl\PrinterCommunication\PrinterConnectionAndCommunication.cs,Stop,The following switch statement is missing a default case: switch (CommunicationState)  			{  				case CommunicationStates.PrintingFromSd:  					CancelSDCardPrint();  					break;    				case CommunicationStates.Printing:  					CancelPrint(markPrintCanceled);  					break;    				case CommunicationStates.Paused:  					{  						if (PrePauseCommunicationState == CommunicationStates.PrintingFromSd)  						{  							CancelSDCardPrint();  							CommunicationState = CommunicationStates.Connected;  						}  						else  						{  							CancelPrint(markPrintCanceled);  							// We have to continue printing the end gcode' so we set this to Printing.  							CommunicationState = CommunicationStates.Printing;  						}  					}  					break;    				case CommunicationStates.AttemptingToConnect:  					CommunicationState = CommunicationStates.FailedToConnect;  					connectThread.Join(JoinThreadTimeoutMs);  					CommunicationState = CommunicationStates.Disconnecting;  					ReadThread.Join();  					if (serialPort != null)  					{  						serialPort.Close();  						serialPort.Dispose();  						serialPort = null;  					}  					CommunicationState = CommunicationStates.Disconnected;  					break;    				case CommunicationStates.PreparingToPrint:  					SlicingQueue.Instance.CancelCurrentSlicing();  					CommunicationState = CommunicationStates.Connected;  					break;  			}
Missing Default,SQLiteAndroid,SQLiteConnection,C:\repos\MatterHackers_MatterControl\DataStorage\SQLiteAndroid.cs,BeginTransaction,The following switch statement is missing a default case: switch (sqlExp.Result)  						{  							case SQLite3.Result.IOError:  							case SQLite3.Result.Full:  							case SQLite3.Result.Busy:  							case SQLite3.Result.NoMem:  							case SQLite3.Result.Interrupt:  								RollbackTo(null' true);  								break;  						}
Missing Default,SQLiteAndroid,SQLiteConnection,C:\repos\MatterHackers_MatterControl\DataStorage\SQLiteAndroid.cs,SaveTransactionPoint,The following switch statement is missing a default case: switch (sqlExp.Result)  					{  						case SQLite3.Result.IOError:  						case SQLite3.Result.Full:  						case SQLite3.Result.Busy:  						case SQLite3.Result.NoMem:  						case SQLite3.Result.Interrupt:  							RollbackTo(null' true);  							break;  					}
Missing Default,Gaming.Game,DataViewGraph,C:\repos\MatterHackers_MatterControl\CustomWidgets\DataViewGraph.cs,AddData,The following switch statement is missing a default case: switch (nextLineColorIndex++ % 3)  				{  					case 0:  						LineColor = new RGBA_Bytes(255' 55' 55);  						break;    					case 1:  						LineColor = new RGBA_Bytes(55' 255' 55);  						break;    					case 2:  						LineColor = new RGBA_Bytes(55' 55' 255);  						break;  				}
