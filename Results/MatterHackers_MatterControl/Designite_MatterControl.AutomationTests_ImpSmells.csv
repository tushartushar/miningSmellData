Implementation smell,Namespace,Class,File,Method,Description
Long Method,MatterHackers.MatterControl.Tests.Automation,SliceSetingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\SliceSettingsTests.cs,DualExtrusionShowsCorrectHotendData,The method has 136 lines of code.
Complex Method,MatterControl.Tests.MatterControl,LibraryContainerTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\LibraryContainerTests.cs,AddFiresContentChangedEvent,Cyclomatic complexity of the method is 9
Long Parameter List,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,RunTest,The method has 7 parameters. Parameters: testMethod' staticDataPathOverride' maxTimeToRun' queueItemFolderToAdd' overrideWidth' overrideHeight' defaultTestImages
Long Statement,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,Select3DPart,The length of the statement  "			testRunner.DragDropByName("InteractionLayer"' "InteractionLayer"' offsetDrop: new Agg.Point2D(10' 15)' mouseButtons: MouseButtons.Right); " is 137.
Long Statement,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,LaunchAndConnectToPrinterEmulator,The length of the statement  "			testRunner.WaitFor(() => serialPortDropDown.Enabled); // Wait until the serialPortDropDown is ready to click it. Ensures the printer is loaded. " is 143.
Long Statement,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,WaitForLayer,The length of the statement  "				// Wait for print to start' then slow down the emulator and continue. Failing to slow down frequently causes a timing issue where the print " is 139.
Long Statement,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,WaitForLayer,The length of the statement  "				// finishes before we make it down to 'CloseMatterControlViaUi' and thus no prompt to close appears and the test fails when clicking 'Yes Button' " is 145.
Long Statement,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,AddItemsToQueue,The length of the statement  "			string queueItemsDirectory = TestContext.CurrentContext.ResolveProjectPath(5' "MatterControl"' "Tests"' "TestData"' "QueueItems"' queueItemFolderToLoad); " is 153.
Long Statement,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,FirstPrinter,The length of the statement  "			Assert.AreEqual(1' ApplicationController.Instance.ActivePrinters.Count()' "FirstPrinter() is only valid in single printer scenarios"); " is 134.
Long Statement,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,RunTest,The length of the statement  "			//Debug.WriteLine("\r\n ***** Running automation test: {0} {1} "' st.GetFrames().Skip(1).First().GetMethod().Name' DateTime.Now); " is 129.
Long Statement,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,RunTest,The length of the statement  "				// Popping one directory above MatterControl' then back down into MatterControl ensures this works in MCCentral as well and MatterControl " is 137.
Long Statement,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,RunTest,The length of the statement  "			Environment.CurrentDirectory = TestContext.CurrentContext.ResolveProjectPath(5' "MatterControl"' "bin"' outputDirectory); " is 121.
Long Statement,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,RunTest,The length of the statement  "			//AggContext.Config.ProviderTypes.SystemWindowProvider = "MatterHackers.Agg.UI.OpenGLWinformsWindowProvider' agg_platform_win32"; " is 129.
Long Statement,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,RunTest,The length of the statement  "			AggContext.Config.ProviderTypes.SystemWindowProvider = "MatterHackers.MatterControl.WinformsSingleWindowProvider' MatterControl.Winforms"; " is 138.
Long Statement,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,RunTest,The length of the statement  "			// Popping one directory above MatterControl' then back down into MatterControl ensures this works in MCCentral as well and MatterControl " is 137.
Long Statement,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,AddTestAssetsToLibrary,The length of the statement  "				Assert.IsFalse(testRunner.WaitForName($"Row Item {friendlyName}"' .1)' $"{friendlyName} part should not exist at test start"); " is 126.
Long Statement,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,AddTestAssetsToLibrary,The length of the statement  "			string fullQuotedAssetPaths = string.Join(" "' assetNames.Select(name => $"\"{MatterControlUtilities.GetTestItemPath(name)}\"")); " is 129.
Long Statement,MatterHackers.MatterControl.Tests.Automation,MatterControlTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\MatterControlTests.cs,ThumbnailGenerationMode,The length of the statement  "				Assert.Less(stopWatch.ElapsedMilliseconds' 2000' "Elapsed thumbnail generation for Rook.amf should be less than 2 seconds for expected orthographic mode"); " is 155.
Long Statement,MatterHackers.MatterControl.Tests.Automation,HardwareLevelingUITests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\HardwareLevelingUITests.cs,HasHardwareLevelingHidesLevelingSettings,The length of the statement  "				Assert.IsFalse(testRunner.WaitForName("print_leveling_solution Row"' .5)' "Print leveling should not exist for an Airwolf HD"); " is 127.
Long Statement,MatterHackers.MatterControl.Tests.Automation,HardwareLevelingUITests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\HardwareLevelingUITests.cs,HasHardwareLevelingHidesLevelingSettings,The length of the statement  "				Assert.IsTrue(testRunner.WaitForName("print_leveling_solution Row")' "Print leveling should exist for a 3D Factory MendelMax"); " is 127.
Long Statement,MatterHackers.MatterControl.Tests.Automation,HardwareLevelingUITests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\HardwareLevelingUITests.cs,SoftwareLevelingTest,The length of the statement  "					Assert.IsFalse(testRunner.WaitForName("SetupPrinter"' .5)' "Finish Setup should not be visible after leveling the printer"); " is 124.
Long Statement,MatterHackers.MatterControl.Tests.Automation,LocalLibraryTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\LocalLibraryTests.cs,ParentFolderRefreshedOnPathPop,The length of the statement  "			// Expected: When descending into a child folder and moving items into the parent' popping the path to the parent should refresh and show the moved content " is 155.
Long Statement,MatterHackers.MatterControl.Tests.Automation,LocalLibraryTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\LocalLibraryTests.cs,LocalLibraryAddButtonAddZipToLibrary,The length of the statement  "				Assert.IsFalse(testRunner.WaitForName("Row Item 2013-01-25 Mouthpiece V2"' 1)' "Mouthpiece part should not exist at test start"); " is 129.
Long Statement,MatterHackers.MatterControl.Tests.Automation,LocalLibraryTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\LocalLibraryTests.cs,LocalLibraryAddButtonAddZipToLibrary,The length of the statement  "				Assert.IsTrue(testRunner.WaitForName("Row Item 2013-01-25_Mouthpiece_v2.stl")' "Mouthpiece part should exist after adding"); " is 124.
Long Statement,MatterHackers.MatterControl.Tests.Automation,ShowTerminalButtonClickedOpensTerminal,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\OptionsTabTests.cs,ClickingShowTerminalButtonOpensTerminal,The length of the statement  "				Assert.IsTrue(testRunner.WaitForName("TerminalWidget")' "Terminal Window should exists after Show Terminal button is clicked"); " is 127.
Long Statement,MatterHackers.MatterControl.Tests.Automation,PartPreviewTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PartPreviewTests.cs,GroupAndUngroup,The length of the statement  "				// Duplicate button moved to new container - move focus back to View3DWidget so CTRL-A below is seen by expected control " is 120.
Long Statement,MatterHackers.MatterControl.Tests.Automation,PartPreviewTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PartPreviewTests.cs,SaveAsToQueue,The length of the statement  "				Assert.AreEqual(expectedCount' QueueData.Instance.ItemCount' "Queue count should increase by one after Save operation"); " is 120.
Long Statement,MatterHackers.MatterControl.Tests.Automation,PrinterConnectionTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrinterConnectionTests.cs,PrinterDisconnectedOnTabClose,The length of the statement  "					Assert.AreEqual(CommunicationStates.Connected' printer.Connection.CommunicationState' "Printer should be Connected after LaunchAndConnectToPrinterEmulator"); " is 157.
Long Statement,MatterHackers.MatterControl.Tests.Automation,PrinterConnectionTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrinterConnectionTests.cs,PrinterDisconnectedOnTabClose,The length of the statement  "					Assert.AreEqual(CommunicationStates.Disconnected' printer.Connection.CommunicationState' "Printer should be Disconnected after closing printer tab"); " is 149.
Long Statement,MatterHackers.MatterControl.Tests.Automation,PrinterConnectionTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrinterConnectionTests.cs,PrinterDisconnectedOnTabClose,The length of the statement  "					Assert.AreEqual(0' PrinterConnection.ReadThread.NumRunning' "No ReadThread instances should be running when only printer Disconnected"); " is 136.
Long Statement,MatterHackers.MatterControl.Tests.Automation,PrintQueueTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintQueueTests.cs,RemoveButtonRemovesSingleItem,The length of the statement  "				Assert.AreEqual(expectedCount' QueueData.Instance.ItemCount' "Queue count should decrease by one after clicking Remove"); " is 121.
Long Statement,MatterHackers.MatterControl.Tests.Automation,PrintQueueTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintQueueTests.cs,RemoveButtonRemovesSingleItem,The length of the statement  "				Assert.IsFalse(testRunner.WaitForName("Row Item 2013-01-25_Mouthpiece_v2"' .5)' "Mouthpiece part should *not* exist after remove"); " is 131.
Long Statement,MatterHackers.MatterControl.Tests.Automation,PrintQueueTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintQueueTests.cs,RemoveButtonRemovesMultipleItems,The length of the statement  "				Assert.AreEqual(expectedCount' QueueData.Instance.ItemCount' "Queue count should decrease by two after clicking Remove"); " is 121.
Long Statement,MatterHackers.MatterControl.Tests.Automation,PrintQueueTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintQueueTests.cs,RemoveButtonRemovesMultipleItems,The length of the statement  "				Assert.IsFalse(testRunner.WaitForName("Row Item 2013-01-25_Mouthpiece_v2"' .5)' "Mouthpiece part should *not* exist after remove"); " is 131.
Long Statement,MatterHackers.MatterControl.Tests.Automation,PrintQueueTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintQueueTests.cs,AddGCodeFile,The length of the statement  "				Assert.IsTrue(testRunner.WaitForName("Row Item chichen-itza_pyramid.gcode")' "Named widget should exist after add(chichen-itza)"); " is 130.
Long Statement,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,ExpectedEmulatorResponses,The length of the statement  "			// TODO: Emulator behavior should emulate actual printer firmware and use configuration rather than M104/M109 sends to set extruder count " is 137.
Long Statement,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,ExpectedEmulatorResponses,The length of the statement  "			// Quirky emulator returns single extruder M105 responses until after the first M104' at which point it extends its extruder count to match " is 139.
Long Statement,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,ExpectedEmulatorResponses,The length of the statement  "				"FIRMWARE_NAME:Marlin V1; Sprinter/grbl mashup for gen6 FIRMWARE_URL:https://github.com/MarlinFirmware/Marlin PROTOCOL_VERSION:1.0 MACHINE_TYPE:Framelis v1 EXTRUDER_COUNT:1 UUID:155f84b5-d4d7-46f4-9432-667e6876f37a"' " is 216.
Long Statement,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,CancelingPrintTurnsHeatAndFanOff,The length of the statement  "					Assert.AreEqual(0' (int) emulator.CurrentExtruder.TargetTemperature' "Unexpected target temperature - MC close should call Connection.Disable->TurnOffBedAndExtruders to shutdown heaters"); " is 188.
Long Statement,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,CancelingPrintTurnsHeatAndFanOff,The length of the statement  "					Assert.AreEqual(0' (int) emulator.HeatedBed.TargetTemperature' "Unexpected target temperature - MC close should call Connection.Disable->TurnOffBedAndExtruders to shutdown heaters"); " is 182.
Long Statement,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,CancelingPrintTurnsHeatAndFanOff,The length of the statement  "					Assert.AreEqual(1' fanChangedCount' "Unexpected fan speed change count - MC close should call Connection.Disable which shuts down fans via M106"); " is 146.
Long Statement,MatterHackers.MatterControl.Tests.Automation,ReSliceTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\ReSliceTests.cs,ReSliceHasCorrectEPositions,The length of the statement  "						Assert.GreaterOrEqual(emulator.CurrentExtruder.AbsoluteEPosition' largestAbsoluteEPosition - printerRetraction' "Never go back more than the retraction amount"); " is 161.
Long Statement,MatterHackers.MatterControl.Tests.Automation,ReSliceTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\ReSliceTests.cs,ReSliceHasCorrectEPositions,The length of the statement  "						Assert.LessOrEqual(emulator.CurrentExtruder.AbsoluteEPosition' lastAbsoluteEPosition + 10' "We should never move up more than 10 mm"); " is 134.
Long Statement,MatterHackers.MatterControl.Tests.Automation,SliceSetingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\SliceSettingsTests.cs,RaftEnabledPassedToSliceEngine,The length of the statement  "				testRunner.WaitFor(() => MatterControlUtilities.CompareExpectedSliceSettingValueWithActualVaue("enableRaft"' "True")' 10); " is 122.
Long Statement,MatterHackers.MatterControl.Tests.Automation,SliceSetingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\SliceSettingsTests.cs,DualExtrusionShowsCorrectHotendData,The length of the statement  "					Assert.AreEqual(hipsGoalTemp' (int)emulator.CurrentExtruder.TargetTemperature' "The printer should report the expected goal temp"); " is 131.
Long Statement,MatterHackers.MatterControl.Tests.Automation,SliceSetingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\SliceSettingsTests.cs,DualExtrusionShowsCorrectHotendData,The length of the statement  "					Assert.AreEqual(hipsGoalTemp' (int)emulator.CurrentExtruder.TargetTemperature' "The printer should report the expected goal temp"); " is 131.
Long Statement,MatterHackers.MatterControl.Tests.Automation,SliceSetingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\SliceSettingsTests.cs,SliceSettingsOrganizerSupportsKeyLookup,The length of the statement  "			AggContext.StaticData = new FileSystemStaticData(TestContext.CurrentContext.ResolveProjectPath(5' "MatterControl"' "StaticData")); " is 130.
Long Statement,MatterHackers.MatterControl.Tests.Automation,SliceSetingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\SliceSettingsTests.cs,HasHeatedBedCheckedHidesBedTemperatureOptions,The length of the statement  "				Assert.IsFalse(testRunner.WaitForName("Bed Temperature Textbox"' .5)' "Filament -> Bed Temp should not be visible after Heated Bed unchecked"); " is 143.
Long Statement,MatterHackers.MatterControl.Tests.Automation,SliceSetingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\SliceSettingsTests.cs,HasHeatedBedCheckedHidesBedTemperatureOptions,The length of the statement  "				Assert.IsFalse(testRunner.WaitForName("Bed Temperature Controls Widget"' .5)' "Controls -> Bed Temp should not be visible after Heated Bed unchecked"); " is 151.
Long Statement,MatterHackers.MatterControl.Tests.Automation,SliceSetingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\SliceSettingsTests.cs,QualitySettingsStayAsOverrides,The length of the statement  "				Assert.AreEqual(printer.Settings.GetValue<double>(SettingsKey.layer_height).ToString()' "0.5"' "Layer height is what we set it to"); " is 132.
Long Statement,MatterHackers.MatterControl.Tests.Automation,SliceSetingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\SliceSettingsTests.cs,QualitySettingsStayAsOverrides,The length of the statement  "				Assert.AreEqual(printer.Settings.GetValue<double>(SettingsKey.layer_height).ToString()' "0.1"' "Layer height is the fine override"); " is 132.
Long Statement,MatterHackers.MatterControl.Tests.Automation,SliceSetingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\SliceSettingsTests.cs,QualitySettingsStayAsOverrides,The length of the statement  "				Assert.AreEqual(1' ProfileManager.Instance.ActiveProfiles.Count()' "ProfileManager should have 1 profile after Airwolf close"); " is 127.
Long Statement,MatterHackers.MatterControl.Tests.Automation,SliceSetingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\SliceSettingsTests.cs,QualitySettingsStayAsOverrides,The length of the statement  "				Assert.AreEqual(0' ApplicationController.Instance.ActivePrinters.Count()' "Zero printers should be active after Airwolf close"); " is 128.
Long Statement,MatterHackers.MatterControl.Tests.Automation,SliceSetingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\SliceSettingsTests.cs,QualitySettingsStayAsOverrides,The length of the statement  "				Assert.AreEqual(1' ApplicationController.Instance.ActivePrinters.Count()' "One printer should be active after BCN add"); " is 120.
Long Statement,MatterHackers.MatterControl.Tests.Automation,SliceSetingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\SliceSettingsTests.cs,QualitySettingsStayAsOverrides,The length of the statement  "				Assert.AreEqual(printer.Settings.GetValue<double>(SettingsKey.layer_height).ToString()' "0.1"' "Layer height is the fine override"); " is 132.
Long Statement,MatterHackers.MatterControl.Tests.Automation,SliceSetingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\SliceSettingsTests.cs,QualitySettingsStayAsOverrides,The length of the statement  "				Assert.AreEqual(printer.Settings.GetValue<double>(SettingsKey.layer_height).ToString()' "0.5"' "Layer height is what we set it to"); " is 132.
Long Statement,MatterControl.Tests.MatterControl,LibraryContainerTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\LibraryContainerTests.cs,NoContentChangedOnLoad,The length of the statement  "					Assert.AreEqual(0' changedCount' "Expected reload count not hit - container should fire reload event after acquiring content"); " is 127.
Long Statement,MatterControl.Tests.MatterControl,LibraryContainerTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\LibraryContainerTests.cs,AddFiresContentChangedEvent,The length of the statement  "					Assert.AreEqual(1' changedCount' $"Expected reload count for {containerType.Name} not hit - container should fire reload event after acquiring content"); " is 153.
Empty Catch Block,MatterHackers.MatterControl.Tests.Automation,PrintEmulatorProcess,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,Dispose,The method has an empty catch block.
Empty Catch Block,MatterHackers.MatterControl.Tests.Automation,LibraryActionTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\LibraryActionTests.cs,ExportToZipImportFromZip,The method has an empty catch block.
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,ClickSignOut,The following statement contains a magic number: testRunner.Delay(.5);
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,WaitForReloadAll,The following statement contains a magic number: resetEvent.WaitOne(10 * 1000);
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,WaitForReloadAll,The following statement contains a magic number: resetEvent.WaitOne(10 * 1000);
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,WaitForReloadAll,The following statement contains a magic number: testRunner.Delay(.2);
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,GetTestItemPath,The following statement contains a magic number: return TestContext.CurrentContext.ResolveProjectPath(4' "Tests"' "TestData"' "QueueItems"' queueItemToLoad);
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,Select3DPart,The following statement contains a magic number: testRunner.NameExists("3D View Edit"' .2)
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,Select3DPart,The following statement contains a magic number: testRunner.DragDropByName("InteractionLayer"' "InteractionLayer"' offsetDrop: new Agg.Point2D(10' 15)' mouseButtons: MouseButtons.Right);
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,Select3DPart,The following statement contains a magic number: testRunner.DragDropByName("InteractionLayer"' "InteractionLayer"' offsetDrop: new Agg.Point2D(10' 15)' mouseButtons: MouseButtons.Right);
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,WaitForFirstDraw,The following statement contains a magic number: testRunner.GetWidgetByName("PartPreviewContent"' out SystemWindow systemWindow' 10);
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,OpenEmptyPartTab,The following statement contains a magic number: testRunner.GetWidgetByName("Hardware Tab"' out systemWindow' 10);
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,OpenEmptyPartTab,The following statement contains a magic number: testRunner.NameExists("Cancel Wizard Button"' 10)
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,LaunchAndConnectToPrinterEmulator,The following statement contains a magic number: var hardwareTab = testRunner.GetWidgetByName("Hardware Tab"' out SystemWindow systemWindow' 10);
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,CancelPrint,The following statement contains a magic number: testRunner.WaitForName("Stop Task Button"' .2)
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,WaitForLayer,The following statement contains a magic number: resetEvent.WaitOne((int) (secondsToWait * 1000));
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,AddAndSelectPrinter,The following statement contains a magic number: testRunner.GetWidgetByName("PartPreviewContent"' out SystemWindow systemWindow' 10);
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,AddAndSelectPrinter,The following statement contains a magic number: !testRunner.NameExists("Create Printer"' 0.2)
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,AddAndSelectPrinter,The following statement contains a magic number: !testRunner.NameExists("AddPrinterWidget"' 0.2)
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,AddItemsToQueue,The following statement contains a magic number: string queueItemsDirectory = TestContext.CurrentContext.ResolveProjectPath(5' "MatterControl"' "Tests"' "TestData"' "QueueItems"' queueItemFolderToLoad);
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,EnsureFoldersVisible,The following statement contains a magic number: var checkBox = (ExpandCheckboxButton)testRunner.GetWidgetByName("Show Folders Toggle"' out _' secondsToWait: 0.2);
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,EnsureContentMenuOpen,The following statement contains a magic number: !testRunner.WaitForName("FolderBreadCrumbWidget"' secondsToWait: 0.2)
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,NavigateToLibraryHome,The following statement contains a magic number: testRunner.Delay(.5);
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,CompleteDialog,The following statement contains a magic number: var widget = testRunner.GetWidgetByName("Automation Dialog TextEdit"' out _' 5);
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,CompleteDialog,The following statement contains a magic number: testRunner.WaitForWidgetDisappear("Automation Dialog TextEdit"' 5);
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,AddItemToBedplate,The following statement contains a magic number: testRunner.WaitFor(() => scene.Children.LastOrDefault() as InsertionGroupObject3D != null' 10);
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,SaveBedplateToFolder,The following statement contains a magic number: testRunner.ClickByName("Save Menu SplitButton"' offset: new Point2D(8' 0));
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,SaveBedplateToFolder,The following statement contains a magic number: testRunner.Delay(2);
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,RunTest,The following statement contains a magic number: staticDataPathOverride = TestContext.CurrentContext.ResolveProjectPath(5' "MatterControl"' "StaticData");
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,RunTest,The following statement contains a magic number: Environment.CurrentDirectory = TestContext.CurrentContext.ResolveProjectPath(5' "MatterControl"' "bin"' outputDirectory);
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,RunTest,The following statement contains a magic number: MatterControlUtilities.OverrideAppDataLocation(TestContext.CurrentContext.ResolveProjectPath(5' "MatterControl"));
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,RunTest,The following statement contains a magic number: defaultTestImages = TestContext.CurrentContext.ResolveProjectPath(4' "Tests"' "TestData"' "TestImages");
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,OpenPrintPopupAdvanced,The following statement contains a magic number: !testRunner.NameExists("Layer(s) To Pause Field"' .2)
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,Complete9StepLeveling,The following statement contains a magic number: var section = (i * 3) + 1;
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,Complete9StepLeveling,The following statement contains a magic number: testRunner.WaitForPage($"Step {section + 2} of 9");
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,Complete9StepLeveling,The following statement contains a magic number: i < 3
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,Complete9StepLeveling,The following statement contains a magic number: testRunner.NameExists("Already Loaded Button"' 0.2)
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,SwitchToPrinterSettings,The following statement contains a magic number: !testRunner.NameExists("Printer Tab"' 0.1)
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,SwitchToControlsTab,The following statement contains a magic number: !testRunner.NameExists("Controls Tab"' 0.2)
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,SwitchToTerminalTab,The following statement contains a magic number: !testRunner.NameExists("Terminal Tab"' 0.2)
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,EnsurePrinterSidebarOpen,The following statement contains a magic number: testRunner.WaitForName("Slice Settings Sidebar"' 0.2)
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,AddTestAssetsToLibrary,The following statement contains a magic number: Assert.IsFalse(testRunner.WaitForName($"Row Item {friendlyName}"' .1)' $"{friendlyName} part should not exist at test start");
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,AddTestAssetsToLibrary,The following statement contains a magic number: Assert.IsTrue(  					testRunner.WaitForName($"Row Item {friendlyName}"' 2)  					|| testRunner.WaitForName($"Row Item {fileName}"' 2)'  					$"{friendlyName} part should exist after adding");
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,AddTestAssetsToLibrary,The following statement contains a magic number: Assert.IsTrue(  					testRunner.WaitForName($"Row Item {friendlyName}"' 2)  					|| testRunner.WaitForName($"Row Item {fileName}"' 2)'  					$"{friendlyName} part should exist after adding");
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\MatterControlTests.cs,ThumbnailGenerationMode,The following statement contains a magic number: await MatterControlUtilities.RunTest(async (testRunner) =>  			{  				// Automation tests should initialize with orthographic thumbnails  				var item = new FileSystemFileItem(MatterControlUtilities.GetTestItemPath("Rook.amf"));  				var provider = ApplicationController.Instance.Library.GetContentProvider(item);    				// Generate thumbnail  				var stopWatch = Stopwatch.StartNew();  				await provider.GetThumbnail(item' 400' 400);    				Assert.Less(stopWatch.ElapsedMilliseconds' 2000' "Elapsed thumbnail generation for Rook.amf should be less than 2 seconds for expected orthographic mode");  			});
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\MatterControlTests.cs,ThumbnailGenerationMode,The following statement contains a magic number: await MatterControlUtilities.RunTest(async (testRunner) =>  			{  				// Automation tests should initialize with orthographic thumbnails  				var item = new FileSystemFileItem(MatterControlUtilities.GetTestItemPath("Rook.amf"));  				var provider = ApplicationController.Instance.Library.GetContentProvider(item);    				// Generate thumbnail  				var stopWatch = Stopwatch.StartNew();  				await provider.GetThumbnail(item' 400' 400);    				Assert.Less(stopWatch.ElapsedMilliseconds' 2000' "Elapsed thumbnail generation for Rook.amf should be less than 2 seconds for expected orthographic mode");  			});
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\MatterControlTests.cs,ThumbnailGenerationMode,The following statement contains a magic number: await MatterControlUtilities.RunTest(async (testRunner) =>  			{  				// Automation tests should initialize with orthographic thumbnails  				var item = new FileSystemFileItem(MatterControlUtilities.GetTestItemPath("Rook.amf"));  				var provider = ApplicationController.Instance.Library.GetContentProvider(item);    				// Generate thumbnail  				var stopWatch = Stopwatch.StartNew();  				await provider.GetThumbnail(item' 400' 400);    				Assert.Less(stopWatch.ElapsedMilliseconds' 2000' "Elapsed thumbnail generation for Rook.amf should be less than 2 seconds for expected orthographic mode");  			});
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\MatterControlTests.cs,PrinterTabRemainsAfterReloadAll,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.WaitForFirstDraw();    				// Add Guest printers  				testRunner.AddAndSelectPrinter("Airwolf 3D"' "HD");  				Assert.AreEqual(  					1'  					ApplicationController.Instance.ActivePrinters.Count()'  					"One printer should exist after Airwolf add");    				testRunner.SwitchToSliceSettings();    				// Move to Adhesion tab  				testRunner.SelectSliceSettingsField(PrinterSettings.Layout.SliceSettings' "skirts");    				// Click Brim toggle field forcing ReloadAll  				testRunner.WaitForReloadAll(() => testRunner.ClickByName("Create Brim Field"));    				// Ensure tabs remain  				Assert.AreEqual(  					1'  					ApplicationController.Instance.ActivePrinters.Count()'  					"One printer should exist after Airwolf add");    				testRunner.Delay(2);    				Assert.AreEqual(  					1'  					ApplicationController.Instance.MainView.TabControl.AllTabs.Select(t => t.TabContent).OfType<PrinterTabPage>().Count()'  					"One printer tab should exist after ReloadAll");    				return Task.CompletedTask;  			}' maxTimeToRun: 120);
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\MatterControlTests.cs,PrinterTabRemainsAfterReloadAll,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.WaitForFirstDraw();    				// Add Guest printers  				testRunner.AddAndSelectPrinter("Airwolf 3D"' "HD");  				Assert.AreEqual(  					1'  					ApplicationController.Instance.ActivePrinters.Count()'  					"One printer should exist after Airwolf add");    				testRunner.SwitchToSliceSettings();    				// Move to Adhesion tab  				testRunner.SelectSliceSettingsField(PrinterSettings.Layout.SliceSettings' "skirts");    				// Click Brim toggle field forcing ReloadAll  				testRunner.WaitForReloadAll(() => testRunner.ClickByName("Create Brim Field"));    				// Ensure tabs remain  				Assert.AreEqual(  					1'  					ApplicationController.Instance.ActivePrinters.Count()'  					"One printer should exist after Airwolf add");    				testRunner.Delay(2);    				Assert.AreEqual(  					1'  					ApplicationController.Instance.MainView.TabControl.AllTabs.Select(t => t.TabContent).OfType<PrinterTabPage>().Count()'  					"One printer tab should exist after ReloadAll");    				return Task.CompletedTask;  			}' maxTimeToRun: 120);
Magic Number,MatterHackers.MatterControl.Tests.Automation,CreateLibraryFolder,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\CreateLibraryFolder.cs,CreateFolderStartsWithTextFieldFocusedAndEditable,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.OpenEmptyPartTab();    				testRunner.NavigateToFolder("Local Library Row Item Collection");  				testRunner.InvokeLibraryCreateFolderDialog();    				testRunner.Delay(.5);  				testRunner.Type("Test Text");  				testRunner.Delay(.5);    				var textWidgetMH = testRunner.GetWidgetByName("InputBoxPage TextEditWidget"' out _) as MHTextEditWidget;    				Assert.IsTrue(textWidgetMH != null' "Found Text Widget");  				Assert.IsTrue(textWidgetMH.Text == "Test Text"' "Had the right text");    				testRunner.ClickByName("Cancel Wizard Button");  				testRunner.Delay(.5);    				return Task.CompletedTask;  			});
Magic Number,MatterHackers.MatterControl.Tests.Automation,CreateLibraryFolder,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\CreateLibraryFolder.cs,CreateFolderStartsWithTextFieldFocusedAndEditable,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.OpenEmptyPartTab();    				testRunner.NavigateToFolder("Local Library Row Item Collection");  				testRunner.InvokeLibraryCreateFolderDialog();    				testRunner.Delay(.5);  				testRunner.Type("Test Text");  				testRunner.Delay(.5);    				var textWidgetMH = testRunner.GetWidgetByName("InputBoxPage TextEditWidget"' out _) as MHTextEditWidget;    				Assert.IsTrue(textWidgetMH != null' "Found Text Widget");  				Assert.IsTrue(textWidgetMH.Text == "Test Text"' "Had the right text");    				testRunner.ClickByName("Cancel Wizard Button");  				testRunner.Delay(.5);    				return Task.CompletedTask;  			});
Magic Number,MatterHackers.MatterControl.Tests.Automation,CreateLibraryFolder,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\CreateLibraryFolder.cs,CreateFolderStartsWithTextFieldFocusedAndEditable,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.OpenEmptyPartTab();    				testRunner.NavigateToFolder("Local Library Row Item Collection");  				testRunner.InvokeLibraryCreateFolderDialog();    				testRunner.Delay(.5);  				testRunner.Type("Test Text");  				testRunner.Delay(.5);    				var textWidgetMH = testRunner.GetWidgetByName("InputBoxPage TextEditWidget"' out _) as MHTextEditWidget;    				Assert.IsTrue(textWidgetMH != null' "Found Text Widget");  				Assert.IsTrue(textWidgetMH.Text == "Test Text"' "Had the right text");    				testRunner.ClickByName("Cancel Wizard Button");  				testRunner.Delay(.5);    				return Task.CompletedTask;  			});
Magic Number,MatterHackers.MatterControl.Tests.Automation,ExportGcodeFromExportWindow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\ExportItemWindowTests.cs,ExportAsGcode,The following statement contains a magic number: await MatterControlUtilities.RunTest(testRunner =>  			{  				testRunner.WaitForFirstDraw();    				testRunner.AddAndSelectPrinter("Airwolf 3D"' "HD");    				//Navigate to Downloads Library Provider  				testRunner.NavigateToFolder("Print Queue Row Item Collection");  				testRunner.InvokeLibraryAddDialog();    				//Get parts to add  				string rowItemPath = MatterControlUtilities.GetTestItemPath("Batman.stl");    				//Add STL part items to Downloads and then type paths into file dialog  				testRunner.Delay(1);  				testRunner.Type(MatterControlUtilities.GetTestItemPath("Batman.stl"));  				testRunner.Delay(1);  				testRunner.Type("{Enter}");    				//Get test results   				testRunner.ClickByName("Row Item Batman.stl");    				testRunner.ClickByName("Print Library Overflow Menu");  				testRunner.ClickByName("Export Menu Item");  				testRunner.Delay(2);    				testRunner.WaitForName("Export Item Window");  				testRunner.ClickByName("Machine File (G-Code) Button");  				testRunner.ClickByName("Export Button");  				testRunner.Delay(2);    				string gcodeOutputPath = MatterControlUtilities.PathToExportGcodeFolder;    				Directory.CreateDirectory(gcodeOutputPath);    				string fullPathToGcodeFile = Path.Combine(gcodeOutputPath' "Batman");  				testRunner.Type(fullPathToGcodeFile);  				testRunner.Type("{Enter}");    				testRunner.WaitFor(() => File.Exists(fullPathToGcodeFile + ".gcode")' 10);    				Assert.IsTrue(File.Exists(fullPathToGcodeFile + ".gcode")' "Exported file not found");    				return Task.FromResult(0);  			});
Magic Number,MatterHackers.MatterControl.Tests.Automation,ExportGcodeFromExportWindow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\ExportItemWindowTests.cs,ExportAsGcode,The following statement contains a magic number: await MatterControlUtilities.RunTest(testRunner =>  			{  				testRunner.WaitForFirstDraw();    				testRunner.AddAndSelectPrinter("Airwolf 3D"' "HD");    				//Navigate to Downloads Library Provider  				testRunner.NavigateToFolder("Print Queue Row Item Collection");  				testRunner.InvokeLibraryAddDialog();    				//Get parts to add  				string rowItemPath = MatterControlUtilities.GetTestItemPath("Batman.stl");    				//Add STL part items to Downloads and then type paths into file dialog  				testRunner.Delay(1);  				testRunner.Type(MatterControlUtilities.GetTestItemPath("Batman.stl"));  				testRunner.Delay(1);  				testRunner.Type("{Enter}");    				//Get test results   				testRunner.ClickByName("Row Item Batman.stl");    				testRunner.ClickByName("Print Library Overflow Menu");  				testRunner.ClickByName("Export Menu Item");  				testRunner.Delay(2);    				testRunner.WaitForName("Export Item Window");  				testRunner.ClickByName("Machine File (G-Code) Button");  				testRunner.ClickByName("Export Button");  				testRunner.Delay(2);    				string gcodeOutputPath = MatterControlUtilities.PathToExportGcodeFolder;    				Directory.CreateDirectory(gcodeOutputPath);    				string fullPathToGcodeFile = Path.Combine(gcodeOutputPath' "Batman");  				testRunner.Type(fullPathToGcodeFile);  				testRunner.Type("{Enter}");    				testRunner.WaitFor(() => File.Exists(fullPathToGcodeFile + ".gcode")' 10);    				Assert.IsTrue(File.Exists(fullPathToGcodeFile + ".gcode")' "Exported file not found");    				return Task.FromResult(0);  			});
Magic Number,MatterHackers.MatterControl.Tests.Automation,ExportGcodeFromExportWindow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\ExportItemWindowTests.cs,ExportAsGcode,The following statement contains a magic number: await MatterControlUtilities.RunTest(testRunner =>  			{  				testRunner.WaitForFirstDraw();    				testRunner.AddAndSelectPrinter("Airwolf 3D"' "HD");    				//Navigate to Downloads Library Provider  				testRunner.NavigateToFolder("Print Queue Row Item Collection");  				testRunner.InvokeLibraryAddDialog();    				//Get parts to add  				string rowItemPath = MatterControlUtilities.GetTestItemPath("Batman.stl");    				//Add STL part items to Downloads and then type paths into file dialog  				testRunner.Delay(1);  				testRunner.Type(MatterControlUtilities.GetTestItemPath("Batman.stl"));  				testRunner.Delay(1);  				testRunner.Type("{Enter}");    				//Get test results   				testRunner.ClickByName("Row Item Batman.stl");    				testRunner.ClickByName("Print Library Overflow Menu");  				testRunner.ClickByName("Export Menu Item");  				testRunner.Delay(2);    				testRunner.WaitForName("Export Item Window");  				testRunner.ClickByName("Machine File (G-Code) Button");  				testRunner.ClickByName("Export Button");  				testRunner.Delay(2);    				string gcodeOutputPath = MatterControlUtilities.PathToExportGcodeFolder;    				Directory.CreateDirectory(gcodeOutputPath);    				string fullPathToGcodeFile = Path.Combine(gcodeOutputPath' "Batman");  				testRunner.Type(fullPathToGcodeFile);  				testRunner.Type("{Enter}");    				testRunner.WaitFor(() => File.Exists(fullPathToGcodeFile + ".gcode")' 10);    				Assert.IsTrue(File.Exists(fullPathToGcodeFile + ".gcode")' "Exported file not found");    				return Task.FromResult(0);  			});
Magic Number,MatterHackers.MatterControl.Tests.Automation,HardwareLevelingUITests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\HardwareLevelingUITests.cs,HasHardwareLevelingHidesLevelingSettings,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.WaitForFirstDraw();    				// Add printer that has hardware leveling  				testRunner.AddAndSelectPrinter("Airwolf 3D"' "HD");    				testRunner.SwitchToPrinterSettings();  				testRunner.ClickByName("Features Tab");  				testRunner.ClickByName("Slice Settings Overflow Menu");  				testRunner.ClickByName("Expand All Menu Item");  				Assert.IsFalse(testRunner.WaitForName("print_leveling_solution Row"' .5)' "Print leveling should not exist for an Airwolf HD");    				// Add printer that does not have hardware leveling  				testRunner.AddAndSelectPrinter("3D Factory"' "MendelMax 1.5");    				testRunner.SwitchToPrinterSettings();  				testRunner.ClickByName("Features Tab");  				testRunner.ClickByName("Slice Settings Overflow Menu");  				testRunner.ClickByName("Expand All Menu Item");  				Assert.IsTrue(testRunner.WaitForName("print_leveling_solution Row")' "Print leveling should exist for a 3D Factory MendelMax");    				return Task.CompletedTask;  			}' overrideHeight: 800);
Magic Number,MatterHackers.MatterControl.Tests.Automation,HardwareLevelingUITests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\HardwareLevelingUITests.cs,HasHardwareLevelingHidesLevelingSettings,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.WaitForFirstDraw();    				// Add printer that has hardware leveling  				testRunner.AddAndSelectPrinter("Airwolf 3D"' "HD");    				testRunner.SwitchToPrinterSettings();  				testRunner.ClickByName("Features Tab");  				testRunner.ClickByName("Slice Settings Overflow Menu");  				testRunner.ClickByName("Expand All Menu Item");  				Assert.IsFalse(testRunner.WaitForName("print_leveling_solution Row"' .5)' "Print leveling should not exist for an Airwolf HD");    				// Add printer that does not have hardware leveling  				testRunner.AddAndSelectPrinter("3D Factory"' "MendelMax 1.5");    				testRunner.SwitchToPrinterSettings();  				testRunner.ClickByName("Features Tab");  				testRunner.ClickByName("Slice Settings Overflow Menu");  				testRunner.ClickByName("Expand All Menu Item");  				Assert.IsTrue(testRunner.WaitForName("print_leveling_solution Row")' "Print leveling should exist for a 3D Factory MendelMax");    				return Task.CompletedTask;  			}' overrideHeight: 800);
Magic Number,MatterHackers.MatterControl.Tests.Automation,HardwareLevelingUITests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\HardwareLevelingUITests.cs,SoftwareLevelingTest,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				// make a jump start printer  				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator("JumpStart"' "V1"' runSlow: false))  				{  					// make sure it is showing the correct button  					testRunner.OpenPrintPopupMenu();    					var startPrintButton = testRunner.GetWidgetByName("Start Print Button"' out _);    					Assert.IsFalse(startPrintButton.Enabled' "Start Print should not be enabled");    					testRunner.ClickByName("SetupPrinter");    					testRunner.Complete9StepLeveling();    					// Satisfy non-empty bed requirement  					testRunner.AddItemToBedplate();    					testRunner.OpenPrintPopupMenu();    					// make sure the button has changed to start print  					startPrintButton = testRunner.GetWidgetByName("Start Print Button"' out _);  					Assert.IsTrue(startPrintButton.Enabled' "Start Print should be enabled after running printer setup");  					Assert.IsFalse(testRunner.WaitForName("SetupPrinter"' .5)' "Finish Setup should not be visible after leveling the printer");    					// reset to defaults and make sure print leveling is cleared  					testRunner.SwitchToSliceSettings();    					testRunner.WaitForReloadAll(() =>  					{  						testRunner.ClickByName("Printer Overflow Menu");  						testRunner.ClickByName("Reset to Defaults Menu Item");  						testRunner.ClickByName("Yes Button");  					});    					testRunner.OpenPrintPopupMenu();    					// make sure it is showing the correct button  					Assert.IsTrue(testRunner.WaitForName("SetupPrinter")' "Setup... should be visible after reset to Defaults");  				}    				return Task.CompletedTask;  			}' maxTimeToRun: 90);
Magic Number,MatterHackers.MatterControl.Tests.Automation,HardwareLevelingUITests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\HardwareLevelingUITests.cs,SoftwareLevelingTest,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				// make a jump start printer  				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator("JumpStart"' "V1"' runSlow: false))  				{  					// make sure it is showing the correct button  					testRunner.OpenPrintPopupMenu();    					var startPrintButton = testRunner.GetWidgetByName("Start Print Button"' out _);    					Assert.IsFalse(startPrintButton.Enabled' "Start Print should not be enabled");    					testRunner.ClickByName("SetupPrinter");    					testRunner.Complete9StepLeveling();    					// Satisfy non-empty bed requirement  					testRunner.AddItemToBedplate();    					testRunner.OpenPrintPopupMenu();    					// make sure the button has changed to start print  					startPrintButton = testRunner.GetWidgetByName("Start Print Button"' out _);  					Assert.IsTrue(startPrintButton.Enabled' "Start Print should be enabled after running printer setup");  					Assert.IsFalse(testRunner.WaitForName("SetupPrinter"' .5)' "Finish Setup should not be visible after leveling the printer");    					// reset to defaults and make sure print leveling is cleared  					testRunner.SwitchToSliceSettings();    					testRunner.WaitForReloadAll(() =>  					{  						testRunner.ClickByName("Printer Overflow Menu");  						testRunner.ClickByName("Reset to Defaults Menu Item");  						testRunner.ClickByName("Yes Button");  					});    					testRunner.OpenPrintPopupMenu();    					// make sure it is showing the correct button  					Assert.IsTrue(testRunner.WaitForName("SetupPrinter")' "Setup... should be visible after reset to Defaults");  				}    				return Task.CompletedTask;  			}' maxTimeToRun: 90);
Magic Number,MatterHackers.MatterControl.Tests.Automation,LibraryActionTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\LibraryActionTests.cs,ClickOnExportButton,The following statement contains a magic number: await MatterControlUtilities.RunTest(testRunner =>  			{  				// Tests that clicking the queue export button with a single item selected opens export item window  				testRunner.AddAndSelectPrinter();    				//Make sure that the export window does not exist  				bool exportWindowExists1 = testRunner.WaitForName("Export Item Window"' 0);  				Assert.IsTrue(exportWindowExists1 == false' "Export window does not exist");    				testRunner.ClickByName("Queue Export Button");  				SystemWindow containingWindow;  				GuiWidget exportWindow = testRunner.GetWidgetByName("Export Item Window"' out containingWindow' 5);  				Assert.IsTrue(exportWindow != null' "Export window does exist");    				return Task.CompletedTask;  			}' queueItemFolderToAdd: QueueTemplate.Three_Queue_Items);
Magic Number,MatterHackers.MatterControl.Tests.Automation,LibraryActionTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\LibraryActionTests.cs,ExportToZipImportFromZip,The following statement contains a magic number: await MatterControlUtilities.RunTest(testRunner =>  			{  				// Ensure output file does not exist  				string exportZipPath = MatterControlUtilities.GetTestItemPath("TestExportZip.zip");  				if (File.Exists(exportZipPath))  				{  					File.Delete(exportZipPath);  				}    				testRunner.AddAndSelectPrinter();    				Assert.AreEqual(4' QueueData.Instance.ItemCount' "Queue should initially have 4 items");    				// Invoke Queue -> Export to Zip dialog  				testRunner.ClickByName("Queue... Menu");  				testRunner.Delay(.2);  				testRunner.ClickByName(" Export to Zip Menu Item");  				testRunner.Delay(2);  				testRunner.Type(exportZipPath);  				testRunner.Delay(2);  				testRunner.Type("{Enter}");    				testRunner.WaitFor(() => File.Exists(exportZipPath));  				Assert.IsTrue(File.Exists(exportZipPath)' "Queue was exported to zip file' file exists on disk at expected path");    				// Import the exported zip file and confirm the Queue Count increases by 3   				testRunner.InvokeLibraryAddDialog();  				testRunner.Delay(1);  				testRunner.Type(exportZipPath);  				testRunner.Delay(1);  				testRunner.Type("{Enter}");    				testRunner.WaitFor(() => QueueData.Instance.ItemCount == 8);  				Assert.AreEqual(8' QueueData.Instance.ItemCount' "All parts imported successfully from exported zip");    				testRunner.Delay(.3);    				try  				{  					if (File.Exists(exportZipPath))  					{  						File.Delete(exportZipPath);  					}  				}  				catch { }    				return Task.CompletedTask;  			}' queueItemFolderToAdd: QueueTemplate.Three_Queue_Items);
Magic Number,MatterHackers.MatterControl.Tests.Automation,LibraryActionTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\LibraryActionTests.cs,ExportToZipImportFromZip,The following statement contains a magic number: await MatterControlUtilities.RunTest(testRunner =>  			{  				// Ensure output file does not exist  				string exportZipPath = MatterControlUtilities.GetTestItemPath("TestExportZip.zip");  				if (File.Exists(exportZipPath))  				{  					File.Delete(exportZipPath);  				}    				testRunner.AddAndSelectPrinter();    				Assert.AreEqual(4' QueueData.Instance.ItemCount' "Queue should initially have 4 items");    				// Invoke Queue -> Export to Zip dialog  				testRunner.ClickByName("Queue... Menu");  				testRunner.Delay(.2);  				testRunner.ClickByName(" Export to Zip Menu Item");  				testRunner.Delay(2);  				testRunner.Type(exportZipPath);  				testRunner.Delay(2);  				testRunner.Type("{Enter}");    				testRunner.WaitFor(() => File.Exists(exportZipPath));  				Assert.IsTrue(File.Exists(exportZipPath)' "Queue was exported to zip file' file exists on disk at expected path");    				// Import the exported zip file and confirm the Queue Count increases by 3   				testRunner.InvokeLibraryAddDialog();  				testRunner.Delay(1);  				testRunner.Type(exportZipPath);  				testRunner.Delay(1);  				testRunner.Type("{Enter}");    				testRunner.WaitFor(() => QueueData.Instance.ItemCount == 8);  				Assert.AreEqual(8' QueueData.Instance.ItemCount' "All parts imported successfully from exported zip");    				testRunner.Delay(.3);    				try  				{  					if (File.Exists(exportZipPath))  					{  						File.Delete(exportZipPath);  					}  				}  				catch { }    				return Task.CompletedTask;  			}' queueItemFolderToAdd: QueueTemplate.Three_Queue_Items);
Magic Number,MatterHackers.MatterControl.Tests.Automation,LibraryActionTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\LibraryActionTests.cs,ExportToZipImportFromZip,The following statement contains a magic number: await MatterControlUtilities.RunTest(testRunner =>  			{  				// Ensure output file does not exist  				string exportZipPath = MatterControlUtilities.GetTestItemPath("TestExportZip.zip");  				if (File.Exists(exportZipPath))  				{  					File.Delete(exportZipPath);  				}    				testRunner.AddAndSelectPrinter();    				Assert.AreEqual(4' QueueData.Instance.ItemCount' "Queue should initially have 4 items");    				// Invoke Queue -> Export to Zip dialog  				testRunner.ClickByName("Queue... Menu");  				testRunner.Delay(.2);  				testRunner.ClickByName(" Export to Zip Menu Item");  				testRunner.Delay(2);  				testRunner.Type(exportZipPath);  				testRunner.Delay(2);  				testRunner.Type("{Enter}");    				testRunner.WaitFor(() => File.Exists(exportZipPath));  				Assert.IsTrue(File.Exists(exportZipPath)' "Queue was exported to zip file' file exists on disk at expected path");    				// Import the exported zip file and confirm the Queue Count increases by 3   				testRunner.InvokeLibraryAddDialog();  				testRunner.Delay(1);  				testRunner.Type(exportZipPath);  				testRunner.Delay(1);  				testRunner.Type("{Enter}");    				testRunner.WaitFor(() => QueueData.Instance.ItemCount == 8);  				Assert.AreEqual(8' QueueData.Instance.ItemCount' "All parts imported successfully from exported zip");    				testRunner.Delay(.3);    				try  				{  					if (File.Exists(exportZipPath))  					{  						File.Delete(exportZipPath);  					}  				}  				catch { }    				return Task.CompletedTask;  			}' queueItemFolderToAdd: QueueTemplate.Three_Queue_Items);
Magic Number,MatterHackers.MatterControl.Tests.Automation,LibraryActionTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\LibraryActionTests.cs,ExportToZipImportFromZip,The following statement contains a magic number: await MatterControlUtilities.RunTest(testRunner =>  			{  				// Ensure output file does not exist  				string exportZipPath = MatterControlUtilities.GetTestItemPath("TestExportZip.zip");  				if (File.Exists(exportZipPath))  				{  					File.Delete(exportZipPath);  				}    				testRunner.AddAndSelectPrinter();    				Assert.AreEqual(4' QueueData.Instance.ItemCount' "Queue should initially have 4 items");    				// Invoke Queue -> Export to Zip dialog  				testRunner.ClickByName("Queue... Menu");  				testRunner.Delay(.2);  				testRunner.ClickByName(" Export to Zip Menu Item");  				testRunner.Delay(2);  				testRunner.Type(exportZipPath);  				testRunner.Delay(2);  				testRunner.Type("{Enter}");    				testRunner.WaitFor(() => File.Exists(exportZipPath));  				Assert.IsTrue(File.Exists(exportZipPath)' "Queue was exported to zip file' file exists on disk at expected path");    				// Import the exported zip file and confirm the Queue Count increases by 3   				testRunner.InvokeLibraryAddDialog();  				testRunner.Delay(1);  				testRunner.Type(exportZipPath);  				testRunner.Delay(1);  				testRunner.Type("{Enter}");    				testRunner.WaitFor(() => QueueData.Instance.ItemCount == 8);  				Assert.AreEqual(8' QueueData.Instance.ItemCount' "All parts imported successfully from exported zip");    				testRunner.Delay(.3);    				try  				{  					if (File.Exists(exportZipPath))  					{  						File.Delete(exportZipPath);  					}  				}  				catch { }    				return Task.CompletedTask;  			}' queueItemFolderToAdd: QueueTemplate.Three_Queue_Items);
Magic Number,MatterHackers.MatterControl.Tests.Automation,LibraryActionTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\LibraryActionTests.cs,ExportToZipImportFromZip,The following statement contains a magic number: await MatterControlUtilities.RunTest(testRunner =>  			{  				// Ensure output file does not exist  				string exportZipPath = MatterControlUtilities.GetTestItemPath("TestExportZip.zip");  				if (File.Exists(exportZipPath))  				{  					File.Delete(exportZipPath);  				}    				testRunner.AddAndSelectPrinter();    				Assert.AreEqual(4' QueueData.Instance.ItemCount' "Queue should initially have 4 items");    				// Invoke Queue -> Export to Zip dialog  				testRunner.ClickByName("Queue... Menu");  				testRunner.Delay(.2);  				testRunner.ClickByName(" Export to Zip Menu Item");  				testRunner.Delay(2);  				testRunner.Type(exportZipPath);  				testRunner.Delay(2);  				testRunner.Type("{Enter}");    				testRunner.WaitFor(() => File.Exists(exportZipPath));  				Assert.IsTrue(File.Exists(exportZipPath)' "Queue was exported to zip file' file exists on disk at expected path");    				// Import the exported zip file and confirm the Queue Count increases by 3   				testRunner.InvokeLibraryAddDialog();  				testRunner.Delay(1);  				testRunner.Type(exportZipPath);  				testRunner.Delay(1);  				testRunner.Type("{Enter}");    				testRunner.WaitFor(() => QueueData.Instance.ItemCount == 8);  				Assert.AreEqual(8' QueueData.Instance.ItemCount' "All parts imported successfully from exported zip");    				testRunner.Delay(.3);    				try  				{  					if (File.Exists(exportZipPath))  					{  						File.Delete(exportZipPath);  					}  				}  				catch { }    				return Task.CompletedTask;  			}' queueItemFolderToAdd: QueueTemplate.Three_Queue_Items);
Magic Number,MatterHackers.MatterControl.Tests.Automation,LibraryActionTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\LibraryActionTests.cs,ExportToZipImportFromZip,The following statement contains a magic number: await MatterControlUtilities.RunTest(testRunner =>  			{  				// Ensure output file does not exist  				string exportZipPath = MatterControlUtilities.GetTestItemPath("TestExportZip.zip");  				if (File.Exists(exportZipPath))  				{  					File.Delete(exportZipPath);  				}    				testRunner.AddAndSelectPrinter();    				Assert.AreEqual(4' QueueData.Instance.ItemCount' "Queue should initially have 4 items");    				// Invoke Queue -> Export to Zip dialog  				testRunner.ClickByName("Queue... Menu");  				testRunner.Delay(.2);  				testRunner.ClickByName(" Export to Zip Menu Item");  				testRunner.Delay(2);  				testRunner.Type(exportZipPath);  				testRunner.Delay(2);  				testRunner.Type("{Enter}");    				testRunner.WaitFor(() => File.Exists(exportZipPath));  				Assert.IsTrue(File.Exists(exportZipPath)' "Queue was exported to zip file' file exists on disk at expected path");    				// Import the exported zip file and confirm the Queue Count increases by 3   				testRunner.InvokeLibraryAddDialog();  				testRunner.Delay(1);  				testRunner.Type(exportZipPath);  				testRunner.Delay(1);  				testRunner.Type("{Enter}");    				testRunner.WaitFor(() => QueueData.Instance.ItemCount == 8);  				Assert.AreEqual(8' QueueData.Instance.ItemCount' "All parts imported successfully from exported zip");    				testRunner.Delay(.3);    				try  				{  					if (File.Exists(exportZipPath))  					{  						File.Delete(exportZipPath);  					}  				}  				catch { }    				return Task.CompletedTask;  			}' queueItemFolderToAdd: QueueTemplate.Three_Queue_Items);
Magic Number,MatterHackers.MatterControl.Tests.Automation,LibraryActionTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\LibraryActionTests.cs,ExportToZipImportFromZip,The following statement contains a magic number: await MatterControlUtilities.RunTest(testRunner =>  			{  				// Ensure output file does not exist  				string exportZipPath = MatterControlUtilities.GetTestItemPath("TestExportZip.zip");  				if (File.Exists(exportZipPath))  				{  					File.Delete(exportZipPath);  				}    				testRunner.AddAndSelectPrinter();    				Assert.AreEqual(4' QueueData.Instance.ItemCount' "Queue should initially have 4 items");    				// Invoke Queue -> Export to Zip dialog  				testRunner.ClickByName("Queue... Menu");  				testRunner.Delay(.2);  				testRunner.ClickByName(" Export to Zip Menu Item");  				testRunner.Delay(2);  				testRunner.Type(exportZipPath);  				testRunner.Delay(2);  				testRunner.Type("{Enter}");    				testRunner.WaitFor(() => File.Exists(exportZipPath));  				Assert.IsTrue(File.Exists(exportZipPath)' "Queue was exported to zip file' file exists on disk at expected path");    				// Import the exported zip file and confirm the Queue Count increases by 3   				testRunner.InvokeLibraryAddDialog();  				testRunner.Delay(1);  				testRunner.Type(exportZipPath);  				testRunner.Delay(1);  				testRunner.Type("{Enter}");    				testRunner.WaitFor(() => QueueData.Instance.ItemCount == 8);  				Assert.AreEqual(8' QueueData.Instance.ItemCount' "All parts imported successfully from exported zip");    				testRunner.Delay(.3);    				try  				{  					if (File.Exists(exportZipPath))  					{  						File.Delete(exportZipPath);  					}  				}  				catch { }    				return Task.CompletedTask;  			}' queueItemFolderToAdd: QueueTemplate.Three_Queue_Items);
Magic Number,MatterHackers.MatterControl.Tests.Automation,LibraryActionTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\LibraryActionTests.cs,QueueExportIsDisabledIfEmpty,The following statement contains a magic number: await MatterControlUtilities.RunTest(testRunner =>  			{  				testRunner.AddAndSelectPrinter();    				testRunner.ClickByName("Queue... Menu");    				var exportButton = testRunner.GetWidgetByName(" Export to Zip Menu Item"' out _' 5);  				Assert.IsNotNull(exportButton' "Export button should exist");  				Assert.IsTrue(exportButton.Enabled' "Export button should be enabled");    				testRunner.ClickByName(" Remove All Menu Item");    				testRunner.Delay(1);    				testRunner.ClickByName("Queue... Menu");  				testRunner.WaitFor(() => !exportButton.Enabled' 4);  				Assert.IsFalse(exportButton.Enabled' "Export button should be disabled after Queue Menu -> Remove All");    				return Task.CompletedTask;  			});
Magic Number,MatterHackers.MatterControl.Tests.Automation,LibraryActionTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\LibraryActionTests.cs,QueueExportIsDisabledIfEmpty,The following statement contains a magic number: await MatterControlUtilities.RunTest(testRunner =>  			{  				testRunner.AddAndSelectPrinter();    				testRunner.ClickByName("Queue... Menu");    				var exportButton = testRunner.GetWidgetByName(" Export to Zip Menu Item"' out _' 5);  				Assert.IsNotNull(exportButton' "Export button should exist");  				Assert.IsTrue(exportButton.Enabled' "Export button should be enabled");    				testRunner.ClickByName(" Remove All Menu Item");    				testRunner.Delay(1);    				testRunner.ClickByName("Queue... Menu");  				testRunner.WaitFor(() => !exportButton.Enabled' 4);  				Assert.IsFalse(exportButton.Enabled' "Export button should be disabled after Queue Menu -> Remove All");    				return Task.CompletedTask;  			});
Magic Number,MatterHackers.MatterControl.Tests.Automation,LibraryActionTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\LibraryActionTests.cs,ClickCreatePartSheetButton,The following statement contains a magic number: await MatterControlUtilities.RunTest(testRunner =>  			{  				testRunner.AddAndSelectPrinter();    				testRunner.ChangeToQueueContainer();    				bool queueEmpty = true;  				int queueItemCount = QueueData.Instance.ItemCount;    				if (queueItemCount == 3)  				{  					queueEmpty = false;  				}    				Assert.IsTrue(queueEmpty == false);  				testRunner.ClickByName("Queue... Menu");  				testRunner.Delay(.2);  				testRunner.ClickByName(" Create Part Sheet Menu Item");  				testRunner.Delay(2);    				string pathToSavePartSheet = MatterControlUtilities.GetTestItemPath("CreatePartSheet");  				string validatePartSheetPath = Path.Combine(".."' ".."' ".."' "TestData"' "QueueItems"' "CreatePartSheet.pdf");    				testRunner.Type(pathToSavePartSheet);  				testRunner.Delay(1);  				testRunner.Type("{Enter}");  				testRunner.Delay(1);  				testRunner.Delay(5);    				bool partSheetCreated = File.Exists(validatePartSheetPath);    				testRunner.Delay(2);  				Assert.IsTrue(partSheetCreated == true);    				if (File.Exists(validatePartSheetPath))  				{  					File.Delete(validatePartSheetPath);  				}    				return Task.CompletedTask;  			}' queueItemFolderToAdd: QueueTemplate.Three_Queue_Items);
Magic Number,MatterHackers.MatterControl.Tests.Automation,LibraryActionTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\LibraryActionTests.cs,ClickCreatePartSheetButton,The following statement contains a magic number: await MatterControlUtilities.RunTest(testRunner =>  			{  				testRunner.AddAndSelectPrinter();    				testRunner.ChangeToQueueContainer();    				bool queueEmpty = true;  				int queueItemCount = QueueData.Instance.ItemCount;    				if (queueItemCount == 3)  				{  					queueEmpty = false;  				}    				Assert.IsTrue(queueEmpty == false);  				testRunner.ClickByName("Queue... Menu");  				testRunner.Delay(.2);  				testRunner.ClickByName(" Create Part Sheet Menu Item");  				testRunner.Delay(2);    				string pathToSavePartSheet = MatterControlUtilities.GetTestItemPath("CreatePartSheet");  				string validatePartSheetPath = Path.Combine(".."' ".."' ".."' "TestData"' "QueueItems"' "CreatePartSheet.pdf");    				testRunner.Type(pathToSavePartSheet);  				testRunner.Delay(1);  				testRunner.Type("{Enter}");  				testRunner.Delay(1);  				testRunner.Delay(5);    				bool partSheetCreated = File.Exists(validatePartSheetPath);    				testRunner.Delay(2);  				Assert.IsTrue(partSheetCreated == true);    				if (File.Exists(validatePartSheetPath))  				{  					File.Delete(validatePartSheetPath);  				}    				return Task.CompletedTask;  			}' queueItemFolderToAdd: QueueTemplate.Three_Queue_Items);
Magic Number,MatterHackers.MatterControl.Tests.Automation,LibraryActionTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\LibraryActionTests.cs,ClickCreatePartSheetButton,The following statement contains a magic number: await MatterControlUtilities.RunTest(testRunner =>  			{  				testRunner.AddAndSelectPrinter();    				testRunner.ChangeToQueueContainer();    				bool queueEmpty = true;  				int queueItemCount = QueueData.Instance.ItemCount;    				if (queueItemCount == 3)  				{  					queueEmpty = false;  				}    				Assert.IsTrue(queueEmpty == false);  				testRunner.ClickByName("Queue... Menu");  				testRunner.Delay(.2);  				testRunner.ClickByName(" Create Part Sheet Menu Item");  				testRunner.Delay(2);    				string pathToSavePartSheet = MatterControlUtilities.GetTestItemPath("CreatePartSheet");  				string validatePartSheetPath = Path.Combine(".."' ".."' ".."' "TestData"' "QueueItems"' "CreatePartSheet.pdf");    				testRunner.Type(pathToSavePartSheet);  				testRunner.Delay(1);  				testRunner.Type("{Enter}");  				testRunner.Delay(1);  				testRunner.Delay(5);    				bool partSheetCreated = File.Exists(validatePartSheetPath);    				testRunner.Delay(2);  				Assert.IsTrue(partSheetCreated == true);    				if (File.Exists(validatePartSheetPath))  				{  					File.Delete(validatePartSheetPath);  				}    				return Task.CompletedTask;  			}' queueItemFolderToAdd: QueueTemplate.Three_Queue_Items);
Magic Number,MatterHackers.MatterControl.Tests.Automation,LibraryActionTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\LibraryActionTests.cs,ClickCreatePartSheetButton,The following statement contains a magic number: await MatterControlUtilities.RunTest(testRunner =>  			{  				testRunner.AddAndSelectPrinter();    				testRunner.ChangeToQueueContainer();    				bool queueEmpty = true;  				int queueItemCount = QueueData.Instance.ItemCount;    				if (queueItemCount == 3)  				{  					queueEmpty = false;  				}    				Assert.IsTrue(queueEmpty == false);  				testRunner.ClickByName("Queue... Menu");  				testRunner.Delay(.2);  				testRunner.ClickByName(" Create Part Sheet Menu Item");  				testRunner.Delay(2);    				string pathToSavePartSheet = MatterControlUtilities.GetTestItemPath("CreatePartSheet");  				string validatePartSheetPath = Path.Combine(".."' ".."' ".."' "TestData"' "QueueItems"' "CreatePartSheet.pdf");    				testRunner.Type(pathToSavePartSheet);  				testRunner.Delay(1);  				testRunner.Type("{Enter}");  				testRunner.Delay(1);  				testRunner.Delay(5);    				bool partSheetCreated = File.Exists(validatePartSheetPath);    				testRunner.Delay(2);  				Assert.IsTrue(partSheetCreated == true);    				if (File.Exists(validatePartSheetPath))  				{  					File.Delete(validatePartSheetPath);  				}    				return Task.CompletedTask;  			}' queueItemFolderToAdd: QueueTemplate.Three_Queue_Items);
Magic Number,MatterHackers.MatterControl.Tests.Automation,LibraryActionTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\LibraryActionTests.cs,ClickCreatePartSheetButton,The following statement contains a magic number: await MatterControlUtilities.RunTest(testRunner =>  			{  				testRunner.AddAndSelectPrinter();    				testRunner.ChangeToQueueContainer();    				bool queueEmpty = true;  				int queueItemCount = QueueData.Instance.ItemCount;    				if (queueItemCount == 3)  				{  					queueEmpty = false;  				}    				Assert.IsTrue(queueEmpty == false);  				testRunner.ClickByName("Queue... Menu");  				testRunner.Delay(.2);  				testRunner.ClickByName(" Create Part Sheet Menu Item");  				testRunner.Delay(2);    				string pathToSavePartSheet = MatterControlUtilities.GetTestItemPath("CreatePartSheet");  				string validatePartSheetPath = Path.Combine(".."' ".."' ".."' "TestData"' "QueueItems"' "CreatePartSheet.pdf");    				testRunner.Type(pathToSavePartSheet);  				testRunner.Delay(1);  				testRunner.Type("{Enter}");  				testRunner.Delay(1);  				testRunner.Delay(5);    				bool partSheetCreated = File.Exists(validatePartSheetPath);    				testRunner.Delay(2);  				Assert.IsTrue(partSheetCreated == true);    				if (File.Exists(validatePartSheetPath))  				{  					File.Delete(validatePartSheetPath);  				}    				return Task.CompletedTask;  			}' queueItemFolderToAdd: QueueTemplate.Three_Queue_Items);
Magic Number,MatterHackers.MatterControl.Tests.Automation,LibraryDownloadsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\LibraryDownloadsTest.cs,DownloadsAddButtonAddsMultipleFiles,The following statement contains a magic number: await MatterControlUtilities.RunTest(testRunner =>  			{  				testRunner.AddAndSelectPrinter();    				// Navigate to Downloads Library Provider  				testRunner.NavigateToFolder("Downloads Row Item Collection");  				testRunner.NavigateToFolder("-Temporary Row Item Collection");    				// Add both files to the FileOpen dialog  				testRunner.InvokeLibraryAddDialog();  				testRunner.CompleteDialog(  					string.Format(  						"\"{0}\" \"{1}\""'  						MatterControlUtilities.GetTestItemPath("Fennec_Fox.stl")'  						MatterControlUtilities.GetTestItemPath("Batman.stl"))'  					5);    				Assert.IsTrue(testRunner.WaitForName("Row Item Fennec_Fox.stl"' 2)' "Fennec Fox item exists");  				Assert.IsTrue(testRunner.WaitForName("Row Item Batman.stl"' 2)' "Batman item exists");    				return Task.CompletedTask;  			});
Magic Number,MatterHackers.MatterControl.Tests.Automation,LibraryDownloadsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\LibraryDownloadsTest.cs,DownloadsAddButtonAddsMultipleFiles,The following statement contains a magic number: await MatterControlUtilities.RunTest(testRunner =>  			{  				testRunner.AddAndSelectPrinter();    				// Navigate to Downloads Library Provider  				testRunner.NavigateToFolder("Downloads Row Item Collection");  				testRunner.NavigateToFolder("-Temporary Row Item Collection");    				// Add both files to the FileOpen dialog  				testRunner.InvokeLibraryAddDialog();  				testRunner.CompleteDialog(  					string.Format(  						"\"{0}\" \"{1}\""'  						MatterControlUtilities.GetTestItemPath("Fennec_Fox.stl")'  						MatterControlUtilities.GetTestItemPath("Batman.stl"))'  					5);    				Assert.IsTrue(testRunner.WaitForName("Row Item Fennec_Fox.stl"' 2)' "Fennec Fox item exists");  				Assert.IsTrue(testRunner.WaitForName("Row Item Batman.stl"' 2)' "Batman item exists");    				return Task.CompletedTask;  			});
Magic Number,MatterHackers.MatterControl.Tests.Automation,LibraryDownloadsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\LibraryDownloadsTest.cs,DownloadsAddButtonAddsMultipleFiles,The following statement contains a magic number: await MatterControlUtilities.RunTest(testRunner =>  			{  				testRunner.AddAndSelectPrinter();    				// Navigate to Downloads Library Provider  				testRunner.NavigateToFolder("Downloads Row Item Collection");  				testRunner.NavigateToFolder("-Temporary Row Item Collection");    				// Add both files to the FileOpen dialog  				testRunner.InvokeLibraryAddDialog();  				testRunner.CompleteDialog(  					string.Format(  						"\"{0}\" \"{1}\""'  						MatterControlUtilities.GetTestItemPath("Fennec_Fox.stl")'  						MatterControlUtilities.GetTestItemPath("Batman.stl"))'  					5);    				Assert.IsTrue(testRunner.WaitForName("Row Item Fennec_Fox.stl"' 2)' "Fennec Fox item exists");  				Assert.IsTrue(testRunner.WaitForName("Row Item Batman.stl"' 2)' "Batman item exists");    				return Task.CompletedTask;  			});
Magic Number,MatterHackers.MatterControl.Tests.Automation,LibraryDownloadsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\LibraryDownloadsTest.cs,DownloadsAddButtonAddsAMFFiles,The following statement contains a magic number: await MatterControlUtilities.RunTest(testRunner =>  			{  				testRunner.AddAndSelectPrinter();    				// Navigate to Downloads Library Provider  				testRunner.NavigateToFolder("Downloads Row Item Collection");  				testRunner.NavigateToFolder("-Temporary Row Item Collection");    				// Add AMF part items to Downloads and then type paths into file dialog  				testRunner.InvokeLibraryAddDialog();  				testRunner.CompleteDialog(MatterControlUtilities.GetTestItemPath("Rook.amf")' 4);    				Assert.IsTrue(testRunner.WaitForName("Row Item Rook.amf")' "Rook item exists");    				return Task.CompletedTask;  			});
Magic Number,MatterHackers.MatterControl.Tests.Automation,LibraryDownloadsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\LibraryDownloadsTest.cs,DownloadsAddButtonAddsZipFiles,The following statement contains a magic number: await MatterControlUtilities.RunTest(testRunner =>  			{  				testRunner.AddAndSelectPrinter();    				// Navigate to Downloads Library Provider  				testRunner.NavigateToFolder("Downloads Row Item Collection");  				testRunner.NavigateToFolder("-Temporary Row Item Collection");    				testRunner.InvokeLibraryAddDialog();  				testRunner.CompleteDialog(MatterControlUtilities.GetTestItemPath("Test.zip")' 4);    				testRunner.DoubleClickByName("Test.zip Row Item Collection");    				testRunner.DoubleClickByName("TestCompress Row Item Collection");    				Assert.IsTrue(testRunner.WaitForName("Row Item Chinese Dragon.stl"' 2)' "Chinese Dragon item exists");  				Assert.IsTrue(testRunner.WaitForName("Row Item chichen-itza_pyramid.stl"' 2)' "chichen-itza item exists");  				Assert.IsTrue(testRunner.WaitForName("Row Item Circle Calibration.stl"' 2)' "Circle Calibration item exists");    				return Task.CompletedTask;  			});
Magic Number,MatterHackers.MatterControl.Tests.Automation,LibraryDownloadsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\LibraryDownloadsTest.cs,DownloadsAddButtonAddsZipFiles,The following statement contains a magic number: await MatterControlUtilities.RunTest(testRunner =>  			{  				testRunner.AddAndSelectPrinter();    				// Navigate to Downloads Library Provider  				testRunner.NavigateToFolder("Downloads Row Item Collection");  				testRunner.NavigateToFolder("-Temporary Row Item Collection");    				testRunner.InvokeLibraryAddDialog();  				testRunner.CompleteDialog(MatterControlUtilities.GetTestItemPath("Test.zip")' 4);    				testRunner.DoubleClickByName("Test.zip Row Item Collection");    				testRunner.DoubleClickByName("TestCompress Row Item Collection");    				Assert.IsTrue(testRunner.WaitForName("Row Item Chinese Dragon.stl"' 2)' "Chinese Dragon item exists");  				Assert.IsTrue(testRunner.WaitForName("Row Item chichen-itza_pyramid.stl"' 2)' "chichen-itza item exists");  				Assert.IsTrue(testRunner.WaitForName("Row Item Circle Calibration.stl"' 2)' "Circle Calibration item exists");    				return Task.CompletedTask;  			});
Magic Number,MatterHackers.MatterControl.Tests.Automation,LibraryDownloadsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\LibraryDownloadsTest.cs,DownloadsAddButtonAddsZipFiles,The following statement contains a magic number: await MatterControlUtilities.RunTest(testRunner =>  			{  				testRunner.AddAndSelectPrinter();    				// Navigate to Downloads Library Provider  				testRunner.NavigateToFolder("Downloads Row Item Collection");  				testRunner.NavigateToFolder("-Temporary Row Item Collection");    				testRunner.InvokeLibraryAddDialog();  				testRunner.CompleteDialog(MatterControlUtilities.GetTestItemPath("Test.zip")' 4);    				testRunner.DoubleClickByName("Test.zip Row Item Collection");    				testRunner.DoubleClickByName("TestCompress Row Item Collection");    				Assert.IsTrue(testRunner.WaitForName("Row Item Chinese Dragon.stl"' 2)' "Chinese Dragon item exists");  				Assert.IsTrue(testRunner.WaitForName("Row Item chichen-itza_pyramid.stl"' 2)' "chichen-itza item exists");  				Assert.IsTrue(testRunner.WaitForName("Row Item Circle Calibration.stl"' 2)' "Circle Calibration item exists");    				return Task.CompletedTask;  			});
Magic Number,MatterHackers.MatterControl.Tests.Automation,LibraryDownloadsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\LibraryDownloadsTest.cs,DownloadsAddButtonAddsZipFiles,The following statement contains a magic number: await MatterControlUtilities.RunTest(testRunner =>  			{  				testRunner.AddAndSelectPrinter();    				// Navigate to Downloads Library Provider  				testRunner.NavigateToFolder("Downloads Row Item Collection");  				testRunner.NavigateToFolder("-Temporary Row Item Collection");    				testRunner.InvokeLibraryAddDialog();  				testRunner.CompleteDialog(MatterControlUtilities.GetTestItemPath("Test.zip")' 4);    				testRunner.DoubleClickByName("Test.zip Row Item Collection");    				testRunner.DoubleClickByName("TestCompress Row Item Collection");    				Assert.IsTrue(testRunner.WaitForName("Row Item Chinese Dragon.stl"' 2)' "Chinese Dragon item exists");  				Assert.IsTrue(testRunner.WaitForName("Row Item chichen-itza_pyramid.stl"' 2)' "chichen-itza item exists");  				Assert.IsTrue(testRunner.WaitForName("Row Item Circle Calibration.stl"' 2)' "Circle Calibration item exists");    				return Task.CompletedTask;  			});
Magic Number,MatterHackers.MatterControl.Tests.Automation,LibraryDownloadsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\LibraryDownloadsTest.cs,RenameDownloadsPrintItem,The following statement contains a magic number: await MatterControlUtilities.RunTest(testRunner =>  			{  				testRunner.AddAndSelectPrinter();    				// Navigate to Downloads Library Provider  				testRunner.NavigateToFolder("Downloads Row Item Collection");  				testRunner.NavigateToFolder("-Temporary Row Item Collection");  				testRunner.InvokeLibraryAddDialog();    				testRunner.CompleteDialog(MatterControlUtilities.GetTestItemPath("Batman.stl")' 2);    				// Rename added item  				testRunner.ClickByName("Row Item Batman.stl");    				testRunner.LibraryRenameSelectedItem();    				testRunner.WaitForName("InputBoxPage Action Button");  				testRunner.Type("Batman Renamed");    				testRunner.ClickByName("InputBoxPage Action Button");    				Assert.IsTrue(testRunner.WaitForName("Row Item Batman Renamed.stl"' 2));    				return Task.CompletedTask;  			});
Magic Number,MatterHackers.MatterControl.Tests.Automation,LibraryDownloadsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\LibraryDownloadsTest.cs,RenameDownloadsPrintItem,The following statement contains a magic number: await MatterControlUtilities.RunTest(testRunner =>  			{  				testRunner.AddAndSelectPrinter();    				// Navigate to Downloads Library Provider  				testRunner.NavigateToFolder("Downloads Row Item Collection");  				testRunner.NavigateToFolder("-Temporary Row Item Collection");  				testRunner.InvokeLibraryAddDialog();    				testRunner.CompleteDialog(MatterControlUtilities.GetTestItemPath("Batman.stl")' 2);    				// Rename added item  				testRunner.ClickByName("Row Item Batman.stl");    				testRunner.LibraryRenameSelectedItem();    				testRunner.WaitForName("InputBoxPage Action Button");  				testRunner.Type("Batman Renamed");    				testRunner.ClickByName("InputBoxPage Action Button");    				Assert.IsTrue(testRunner.WaitForName("Row Item Batman Renamed.stl"' 2));    				return Task.CompletedTask;  			});
Magic Number,MatterHackers.MatterControl.Tests.Automation,LocalLibraryTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\LocalLibraryTests.cs,LocalLibraryAddButtonAddAMFToLibrary,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.AddAndSelectPrinter();  				testRunner.AddTestAssetsToLibrary(new[] { "Rook.amf" });    				return Task.CompletedTask;  			}' overrideWidth: 1024' overrideHeight: 800);
Magic Number,MatterHackers.MatterControl.Tests.Automation,LocalLibraryTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\LocalLibraryTests.cs,LocalLibraryAddButtonAddAMFToLibrary,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.AddAndSelectPrinter();  				testRunner.AddTestAssetsToLibrary(new[] { "Rook.amf" });    				return Task.CompletedTask;  			}' overrideWidth: 1024' overrideHeight: 800);
Magic Number,MatterHackers.MatterControl.Tests.Automation,LocalLibraryTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\LocalLibraryTests.cs,ParentFolderRefreshedOnPathPop,The following statement contains a magic number: await MatterControlUtilities.RunTest(testRunner =>  			{  				testRunner.AddAndSelectPrinter();    				// Navigate to Local Library  				testRunner.NavigateToFolder("Local Library Row Item Collection");    				string folderID = testRunner.CreateChildFolder("New Folder");    				testRunner.DoubleClickByName(folderID);    				// Add Library item  				testRunner.InvokeLibraryAddDialog();  				testRunner.Delay(2);  				testRunner.Type(MatterControlUtilities.GetTestItemPath("Batman.stl"));  				testRunner.Delay(1);  				testRunner.Type("{Enter}");    				string newFileID = "Row Item Batman";    				testRunner.ClickByName(newFileID);    				testRunner.LibraryMoveSelectedItem();    				testRunner.NavigateToFolder("Local Library Row Item Collection");    				// Click Move  				testRunner.ClickByName("Accept Button");    				// Wait for closed window/closed row  				testRunner.WaitForWidgetDisappear("Move Item Window"' 5);  				testRunner.WaitForWidgetDisappear("Row Item Batman"' 2);    				// Return to the Local Library folder  				testRunner.ClickByName("Library Up Button");    				// Assert that the expected item appears in the parent after popping the path  				testRunner.ClickByName(newFileID);    				return Task.CompletedTask;  			});
Magic Number,MatterHackers.MatterControl.Tests.Automation,LocalLibraryTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\LocalLibraryTests.cs,ParentFolderRefreshedOnPathPop,The following statement contains a magic number: await MatterControlUtilities.RunTest(testRunner =>  			{  				testRunner.AddAndSelectPrinter();    				// Navigate to Local Library  				testRunner.NavigateToFolder("Local Library Row Item Collection");    				string folderID = testRunner.CreateChildFolder("New Folder");    				testRunner.DoubleClickByName(folderID);    				// Add Library item  				testRunner.InvokeLibraryAddDialog();  				testRunner.Delay(2);  				testRunner.Type(MatterControlUtilities.GetTestItemPath("Batman.stl"));  				testRunner.Delay(1);  				testRunner.Type("{Enter}");    				string newFileID = "Row Item Batman";    				testRunner.ClickByName(newFileID);    				testRunner.LibraryMoveSelectedItem();    				testRunner.NavigateToFolder("Local Library Row Item Collection");    				// Click Move  				testRunner.ClickByName("Accept Button");    				// Wait for closed window/closed row  				testRunner.WaitForWidgetDisappear("Move Item Window"' 5);  				testRunner.WaitForWidgetDisappear("Row Item Batman"' 2);    				// Return to the Local Library folder  				testRunner.ClickByName("Library Up Button");    				// Assert that the expected item appears in the parent after popping the path  				testRunner.ClickByName(newFileID);    				return Task.CompletedTask;  			});
Magic Number,MatterHackers.MatterControl.Tests.Automation,LocalLibraryTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\LocalLibraryTests.cs,ParentFolderRefreshedOnPathPop,The following statement contains a magic number: await MatterControlUtilities.RunTest(testRunner =>  			{  				testRunner.AddAndSelectPrinter();    				// Navigate to Local Library  				testRunner.NavigateToFolder("Local Library Row Item Collection");    				string folderID = testRunner.CreateChildFolder("New Folder");    				testRunner.DoubleClickByName(folderID);    				// Add Library item  				testRunner.InvokeLibraryAddDialog();  				testRunner.Delay(2);  				testRunner.Type(MatterControlUtilities.GetTestItemPath("Batman.stl"));  				testRunner.Delay(1);  				testRunner.Type("{Enter}");    				string newFileID = "Row Item Batman";    				testRunner.ClickByName(newFileID);    				testRunner.LibraryMoveSelectedItem();    				testRunner.NavigateToFolder("Local Library Row Item Collection");    				// Click Move  				testRunner.ClickByName("Accept Button");    				// Wait for closed window/closed row  				testRunner.WaitForWidgetDisappear("Move Item Window"' 5);  				testRunner.WaitForWidgetDisappear("Row Item Batman"' 2);    				// Return to the Local Library folder  				testRunner.ClickByName("Library Up Button");    				// Assert that the expected item appears in the parent after popping the path  				testRunner.ClickByName(newFileID);    				return Task.CompletedTask;  			});
Magic Number,MatterHackers.MatterControl.Tests.Automation,LocalLibraryTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\LocalLibraryTests.cs,LocalLibraryAddButtonAddZipToLibrary,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.AddAndSelectPrinter();    				// Navigate to Local Library  				testRunner.NavigateToFolder("Local Library Row Item Collection");    				// Make sure that Item does not exist before the test begins  				Assert.IsFalse(testRunner.WaitForName("Row Item Batman"' 1)' "Batman part should not exist at test start");  				Assert.IsFalse(testRunner.WaitForName("Row Item 2013-01-25 Mouthpiece V2"' 1)' "Mouthpiece part should not exist at test start");    				// Add Library item  				testRunner.InvokeLibraryAddDialog();  				testRunner.Delay(2);  				testRunner.Type(MatterControlUtilities.GetTestItemPath("Batman.zip"));  				testRunner.Delay(1);  				testRunner.Type("{Enter}");    				testRunner.WaitForName("Batman Row Item Collection");    				testRunner.DoubleClickByName("Batman Row Item Collection");    				Assert.IsTrue(testRunner.WaitForName("Row Item Batman.stl")' "Batman part should exist after adding");  				Assert.IsTrue(testRunner.WaitForName("Row Item 2013-01-25_Mouthpiece_v2.stl")' "Mouthpiece part should exist after adding");    				return Task.CompletedTask;  			});
Magic Number,MatterHackers.MatterControl.Tests.Automation,LocalLibraryTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\LocalLibraryTests.cs,RenameButtonRenameLocalLibraryItem,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.AddAndSelectPrinter();    				testRunner.AddTestAssetsToLibrary(new[] { "Rook.amf" });    				testRunner.ClickByName("Row Item Rook");    				// Open and wait rename window  				testRunner.LibraryRenameSelectedItem();  				testRunner.WaitForName("InputBoxPage Action Button");    				testRunner.Delay(1);    				// Rename item  				testRunner.Type("Rook Renamed");  				testRunner.ClickByName("InputBoxPage Action Button");    				// Confirm  				Assert.IsTrue(testRunner.WaitForName("Row Item Rook Renamed"));  				Assert.IsFalse(testRunner.WaitForName("Row Item Rook"' 1));    				return Task.CompletedTask;  			}' overrideWidth: 600);
Magic Number,MatterHackers.MatterControl.Tests.Automation,LocalLibraryTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\LocalLibraryTests.cs,RenameButtonRenamesLocalLibraryFolder,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.AddAndSelectPrinter();    				// Navigate to Local Library  				testRunner.NavigateToFolder("Local Library Row Item Collection");    				// Create New Folder  				string folderID = testRunner.CreateChildFolder("New Folder");    				testRunner.ClickByName(folderID);  				testRunner.Delay(.2);    				testRunner.LibraryRenameSelectedItem();    				testRunner.Delay(.5);  				testRunner.Type("Renamed Library Folder");    				testRunner.ClickByName("InputBoxPage Action Button");  				testRunner.Delay(.2);    				// Make sure the renamed Library Folder exists  				Assert.IsTrue(testRunner.WaitForName("Renamed Library Folder Row Item Collection")' "Renamed folder should exist");    				return Task.CompletedTask;  			});
Magic Number,MatterHackers.MatterControl.Tests.Automation,LocalLibraryTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\LocalLibraryTests.cs,RenameButtonRenamesLocalLibraryFolder,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.AddAndSelectPrinter();    				// Navigate to Local Library  				testRunner.NavigateToFolder("Local Library Row Item Collection");    				// Create New Folder  				string folderID = testRunner.CreateChildFolder("New Folder");    				testRunner.ClickByName(folderID);  				testRunner.Delay(.2);    				testRunner.LibraryRenameSelectedItem();    				testRunner.Delay(.5);  				testRunner.Type("Renamed Library Folder");    				testRunner.ClickByName("InputBoxPage Action Button");  				testRunner.Delay(.2);    				// Make sure the renamed Library Folder exists  				Assert.IsTrue(testRunner.WaitForName("Renamed Library Folder Row Item Collection")' "Renamed folder should exist");    				return Task.CompletedTask;  			});
Magic Number,MatterHackers.MatterControl.Tests.Automation,LocalLibraryTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\LocalLibraryTests.cs,RenameButtonRenamesLocalLibraryFolder,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.AddAndSelectPrinter();    				// Navigate to Local Library  				testRunner.NavigateToFolder("Local Library Row Item Collection");    				// Create New Folder  				string folderID = testRunner.CreateChildFolder("New Folder");    				testRunner.ClickByName(folderID);  				testRunner.Delay(.2);    				testRunner.LibraryRenameSelectedItem();    				testRunner.Delay(.5);  				testRunner.Type("Renamed Library Folder");    				testRunner.ClickByName("InputBoxPage Action Button");  				testRunner.Delay(.2);    				// Make sure the renamed Library Folder exists  				Assert.IsTrue(testRunner.WaitForName("Renamed Library Folder Row Item Collection")' "Renamed folder should exist");    				return Task.CompletedTask;  			});
Magic Number,MatterHackers.MatterControl.Tests.Automation,LocalLibraryTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\LocalLibraryTests.cs,RemoveButtonClickedRemovesSingleItem,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.AddAndSelectPrinter();    				testRunner.AddTestAssetsToLibrary(new[] { "Rook.amf" });    				// Select and remove item  				testRunner.ClickByName("Row Item Rook");  				testRunner.LibraryRemoveSelectedItem();    				// Make sure that the item has been removed  				Assert.IsFalse(testRunner.WaitForName("Row Item Rook"' .5));    				return Task.CompletedTask;  			});
Magic Number,MatterHackers.MatterControl.Tests.Automation,ShowTerminalButtonClickedOpensTerminal,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\OptionsTabTests.cs,ClickingShowTerminalButtonOpensTerminal,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.AddAndSelectPrinter("Airwolf 3D"' "HD");    				Assert.IsFalse(testRunner.WaitForName("TerminalWidget"' 0.5)' "Terminal Window should not exist");    				// when we start up a new session the Terminal Sidebar should not be present  				Assert.IsFalse(testRunner.WaitForName("Terminal Sidebar"' 0.5)' "Terminal Sidebar should not exist");    				testRunner.SwitchToTerminalTab();    				Assert.IsTrue(testRunner.WaitForName("TerminalWidget")' "Terminal Window should exists after Show Terminal button is clicked");    				return Task.CompletedTask;  			});
Magic Number,MatterHackers.MatterControl.Tests.Automation,ShowTerminalButtonClickedOpensTerminal,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\OptionsTabTests.cs,ClickingShowTerminalButtonOpensTerminal,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.AddAndSelectPrinter("Airwolf 3D"' "HD");    				Assert.IsFalse(testRunner.WaitForName("TerminalWidget"' 0.5)' "Terminal Window should not exist");    				// when we start up a new session the Terminal Sidebar should not be present  				Assert.IsFalse(testRunner.WaitForName("Terminal Sidebar"' 0.5)' "Terminal Sidebar should not exist");    				testRunner.SwitchToTerminalTab();    				Assert.IsTrue(testRunner.WaitForName("TerminalWidget")' "Terminal Window should exists after Show Terminal button is clicked");    				return Task.CompletedTask;  			});
Magic Number,MatterHackers.MatterControl.Tests.Automation,PartPreviewTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PartPreviewTests.cs,CopyButtonMakesCopyOfPart,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.OpenEmptyPartTab();    				testRunner.AddItemToBedplate();    				// Get View3DWidget  				View3DWidget view3D = testRunner.GetWidgetByName("View3DWidget"' out _' 3) as View3DWidget;  				var scene = view3D.InteractionLayer.Scene;    				testRunner.WaitForName("Calibration - Box.stl");  				Assert.AreEqual(1' scene.Children.Count' "Should have 1 part before copy");    				// Select scene object  				testRunner.Select3DPart("Calibration - Box.stl");    				// Click Copy button and count Scene.Children  				testRunner.ClickByName("Duplicate Button");  				testRunner.WaitFor(() => scene.Children.Count == 2);  				Assert.AreEqual(2' scene.Children.Count' "Should have 2 parts after copy");    				// Click Copy button a second time and count Scene.Children  				testRunner.ClickByName("Duplicate Button");  				testRunner.WaitFor(() => scene.Children.Count > 2);  				Assert.AreEqual(3' scene.Children.Count' "Should have 3 parts after 2nd copy");    				return Task.CompletedTask;  			}' overrideWidth: 1300' maxTimeToRun: 60);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PartPreviewTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PartPreviewTests.cs,CopyButtonMakesCopyOfPart,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.OpenEmptyPartTab();    				testRunner.AddItemToBedplate();    				// Get View3DWidget  				View3DWidget view3D = testRunner.GetWidgetByName("View3DWidget"' out _' 3) as View3DWidget;  				var scene = view3D.InteractionLayer.Scene;    				testRunner.WaitForName("Calibration - Box.stl");  				Assert.AreEqual(1' scene.Children.Count' "Should have 1 part before copy");    				// Select scene object  				testRunner.Select3DPart("Calibration - Box.stl");    				// Click Copy button and count Scene.Children  				testRunner.ClickByName("Duplicate Button");  				testRunner.WaitFor(() => scene.Children.Count == 2);  				Assert.AreEqual(2' scene.Children.Count' "Should have 2 parts after copy");    				// Click Copy button a second time and count Scene.Children  				testRunner.ClickByName("Duplicate Button");  				testRunner.WaitFor(() => scene.Children.Count > 2);  				Assert.AreEqual(3' scene.Children.Count' "Should have 3 parts after 2nd copy");    				return Task.CompletedTask;  			}' overrideWidth: 1300' maxTimeToRun: 60);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PartPreviewTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PartPreviewTests.cs,CopyButtonMakesCopyOfPart,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.OpenEmptyPartTab();    				testRunner.AddItemToBedplate();    				// Get View3DWidget  				View3DWidget view3D = testRunner.GetWidgetByName("View3DWidget"' out _' 3) as View3DWidget;  				var scene = view3D.InteractionLayer.Scene;    				testRunner.WaitForName("Calibration - Box.stl");  				Assert.AreEqual(1' scene.Children.Count' "Should have 1 part before copy");    				// Select scene object  				testRunner.Select3DPart("Calibration - Box.stl");    				// Click Copy button and count Scene.Children  				testRunner.ClickByName("Duplicate Button");  				testRunner.WaitFor(() => scene.Children.Count == 2);  				Assert.AreEqual(2' scene.Children.Count' "Should have 2 parts after copy");    				// Click Copy button a second time and count Scene.Children  				testRunner.ClickByName("Duplicate Button");  				testRunner.WaitFor(() => scene.Children.Count > 2);  				Assert.AreEqual(3' scene.Children.Count' "Should have 3 parts after 2nd copy");    				return Task.CompletedTask;  			}' overrideWidth: 1300' maxTimeToRun: 60);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PartPreviewTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PartPreviewTests.cs,CopyButtonMakesCopyOfPart,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.OpenEmptyPartTab();    				testRunner.AddItemToBedplate();    				// Get View3DWidget  				View3DWidget view3D = testRunner.GetWidgetByName("View3DWidget"' out _' 3) as View3DWidget;  				var scene = view3D.InteractionLayer.Scene;    				testRunner.WaitForName("Calibration - Box.stl");  				Assert.AreEqual(1' scene.Children.Count' "Should have 1 part before copy");    				// Select scene object  				testRunner.Select3DPart("Calibration - Box.stl");    				// Click Copy button and count Scene.Children  				testRunner.ClickByName("Duplicate Button");  				testRunner.WaitFor(() => scene.Children.Count == 2);  				Assert.AreEqual(2' scene.Children.Count' "Should have 2 parts after copy");    				// Click Copy button a second time and count Scene.Children  				testRunner.ClickByName("Duplicate Button");  				testRunner.WaitFor(() => scene.Children.Count > 2);  				Assert.AreEqual(3' scene.Children.Count' "Should have 3 parts after 2nd copy");    				return Task.CompletedTask;  			}' overrideWidth: 1300' maxTimeToRun: 60);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PartPreviewTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PartPreviewTests.cs,CopyButtonMakesCopyOfPart,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.OpenEmptyPartTab();    				testRunner.AddItemToBedplate();    				// Get View3DWidget  				View3DWidget view3D = testRunner.GetWidgetByName("View3DWidget"' out _' 3) as View3DWidget;  				var scene = view3D.InteractionLayer.Scene;    				testRunner.WaitForName("Calibration - Box.stl");  				Assert.AreEqual(1' scene.Children.Count' "Should have 1 part before copy");    				// Select scene object  				testRunner.Select3DPart("Calibration - Box.stl");    				// Click Copy button and count Scene.Children  				testRunner.ClickByName("Duplicate Button");  				testRunner.WaitFor(() => scene.Children.Count == 2);  				Assert.AreEqual(2' scene.Children.Count' "Should have 2 parts after copy");    				// Click Copy button a second time and count Scene.Children  				testRunner.ClickByName("Duplicate Button");  				testRunner.WaitFor(() => scene.Children.Count > 2);  				Assert.AreEqual(3' scene.Children.Count' "Should have 3 parts after 2nd copy");    				return Task.CompletedTask;  			}' overrideWidth: 1300' maxTimeToRun: 60);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PartPreviewTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PartPreviewTests.cs,CopyButtonMakesCopyOfPart,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.OpenEmptyPartTab();    				testRunner.AddItemToBedplate();    				// Get View3DWidget  				View3DWidget view3D = testRunner.GetWidgetByName("View3DWidget"' out _' 3) as View3DWidget;  				var scene = view3D.InteractionLayer.Scene;    				testRunner.WaitForName("Calibration - Box.stl");  				Assert.AreEqual(1' scene.Children.Count' "Should have 1 part before copy");    				// Select scene object  				testRunner.Select3DPart("Calibration - Box.stl");    				// Click Copy button and count Scene.Children  				testRunner.ClickByName("Duplicate Button");  				testRunner.WaitFor(() => scene.Children.Count == 2);  				Assert.AreEqual(2' scene.Children.Count' "Should have 2 parts after copy");    				// Click Copy button a second time and count Scene.Children  				testRunner.ClickByName("Duplicate Button");  				testRunner.WaitFor(() => scene.Children.Count > 2);  				Assert.AreEqual(3' scene.Children.Count' "Should have 3 parts after 2nd copy");    				return Task.CompletedTask;  			}' overrideWidth: 1300' maxTimeToRun: 60);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PartPreviewTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PartPreviewTests.cs,CopyButtonMakesCopyOfPart,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.OpenEmptyPartTab();    				testRunner.AddItemToBedplate();    				// Get View3DWidget  				View3DWidget view3D = testRunner.GetWidgetByName("View3DWidget"' out _' 3) as View3DWidget;  				var scene = view3D.InteractionLayer.Scene;    				testRunner.WaitForName("Calibration - Box.stl");  				Assert.AreEqual(1' scene.Children.Count' "Should have 1 part before copy");    				// Select scene object  				testRunner.Select3DPart("Calibration - Box.stl");    				// Click Copy button and count Scene.Children  				testRunner.ClickByName("Duplicate Button");  				testRunner.WaitFor(() => scene.Children.Count == 2);  				Assert.AreEqual(2' scene.Children.Count' "Should have 2 parts after copy");    				// Click Copy button a second time and count Scene.Children  				testRunner.ClickByName("Duplicate Button");  				testRunner.WaitFor(() => scene.Children.Count > 2);  				Assert.AreEqual(3' scene.Children.Count' "Should have 3 parts after 2nd copy");    				return Task.CompletedTask;  			}' overrideWidth: 1300' maxTimeToRun: 60);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PartPreviewTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PartPreviewTests.cs,GroupAndUngroup,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.OpenEmptyPartTab();    				testRunner.AddItemToBedplate();    				// Get View3DWidget and count Scene.Children before Copy button is clicked  				View3DWidget view3D = testRunner.GetWidgetByName("View3DWidget"' out _' 3) as View3DWidget;  				var scene = view3D.InteractionLayer.Scene;    				// Assert expected start count  				Assert.AreEqual(1' scene.Children.Count' "Should have one part before copy");    				// Select scene object  				testRunner.Select3DPart("Calibration - Box.stl");    				for (int i = 2; i <= 6; i++)  				{  					testRunner.ClickByName("Duplicate Button");  					testRunner.WaitFor(() => scene.Children.Count == i);  					Assert.AreEqual(i' scene.Children.Count' $"Should have {i} parts after copy");  				}    				// Get MeshGroupCount before Group is clicked  				Assert.AreEqual(6' scene.Children.Count' "Scene should have 6 parts after copy loop");    				// Duplicate button moved to new container - move focus back to View3DWidget so CTRL-A below is seen by expected control  				testRunner.Select3DPart("Calibration - Box.stl");    				// select all  				testRunner.Type("^a");    				testRunner.ClickByName("Group Button");  				testRunner.WaitFor(() => scene.Children.Count == 1);  				Assert.AreEqual(1' scene.Children.Count' $"Should have 1 parts after group");    				testRunner.ClickByName("Ungroup Button");  				testRunner.WaitFor(() => scene.Children.Count == 6);  				Assert.AreEqual(6' scene.Children.Count' $"Should have 6 parts after ungroup");    				return Task.CompletedTask;  			}' overrideWidth: 1300);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PartPreviewTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PartPreviewTests.cs,GroupAndUngroup,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.OpenEmptyPartTab();    				testRunner.AddItemToBedplate();    				// Get View3DWidget and count Scene.Children before Copy button is clicked  				View3DWidget view3D = testRunner.GetWidgetByName("View3DWidget"' out _' 3) as View3DWidget;  				var scene = view3D.InteractionLayer.Scene;    				// Assert expected start count  				Assert.AreEqual(1' scene.Children.Count' "Should have one part before copy");    				// Select scene object  				testRunner.Select3DPart("Calibration - Box.stl");    				for (int i = 2; i <= 6; i++)  				{  					testRunner.ClickByName("Duplicate Button");  					testRunner.WaitFor(() => scene.Children.Count == i);  					Assert.AreEqual(i' scene.Children.Count' $"Should have {i} parts after copy");  				}    				// Get MeshGroupCount before Group is clicked  				Assert.AreEqual(6' scene.Children.Count' "Scene should have 6 parts after copy loop");    				// Duplicate button moved to new container - move focus back to View3DWidget so CTRL-A below is seen by expected control  				testRunner.Select3DPart("Calibration - Box.stl");    				// select all  				testRunner.Type("^a");    				testRunner.ClickByName("Group Button");  				testRunner.WaitFor(() => scene.Children.Count == 1);  				Assert.AreEqual(1' scene.Children.Count' $"Should have 1 parts after group");    				testRunner.ClickByName("Ungroup Button");  				testRunner.WaitFor(() => scene.Children.Count == 6);  				Assert.AreEqual(6' scene.Children.Count' $"Should have 6 parts after ungroup");    				return Task.CompletedTask;  			}' overrideWidth: 1300);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PartPreviewTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PartPreviewTests.cs,GroupAndUngroup,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.OpenEmptyPartTab();    				testRunner.AddItemToBedplate();    				// Get View3DWidget and count Scene.Children before Copy button is clicked  				View3DWidget view3D = testRunner.GetWidgetByName("View3DWidget"' out _' 3) as View3DWidget;  				var scene = view3D.InteractionLayer.Scene;    				// Assert expected start count  				Assert.AreEqual(1' scene.Children.Count' "Should have one part before copy");    				// Select scene object  				testRunner.Select3DPart("Calibration - Box.stl");    				for (int i = 2; i <= 6; i++)  				{  					testRunner.ClickByName("Duplicate Button");  					testRunner.WaitFor(() => scene.Children.Count == i);  					Assert.AreEqual(i' scene.Children.Count' $"Should have {i} parts after copy");  				}    				// Get MeshGroupCount before Group is clicked  				Assert.AreEqual(6' scene.Children.Count' "Scene should have 6 parts after copy loop");    				// Duplicate button moved to new container - move focus back to View3DWidget so CTRL-A below is seen by expected control  				testRunner.Select3DPart("Calibration - Box.stl");    				// select all  				testRunner.Type("^a");    				testRunner.ClickByName("Group Button");  				testRunner.WaitFor(() => scene.Children.Count == 1);  				Assert.AreEqual(1' scene.Children.Count' $"Should have 1 parts after group");    				testRunner.ClickByName("Ungroup Button");  				testRunner.WaitFor(() => scene.Children.Count == 6);  				Assert.AreEqual(6' scene.Children.Count' $"Should have 6 parts after ungroup");    				return Task.CompletedTask;  			}' overrideWidth: 1300);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PartPreviewTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PartPreviewTests.cs,GroupAndUngroup,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.OpenEmptyPartTab();    				testRunner.AddItemToBedplate();    				// Get View3DWidget and count Scene.Children before Copy button is clicked  				View3DWidget view3D = testRunner.GetWidgetByName("View3DWidget"' out _' 3) as View3DWidget;  				var scene = view3D.InteractionLayer.Scene;    				// Assert expected start count  				Assert.AreEqual(1' scene.Children.Count' "Should have one part before copy");    				// Select scene object  				testRunner.Select3DPart("Calibration - Box.stl");    				for (int i = 2; i <= 6; i++)  				{  					testRunner.ClickByName("Duplicate Button");  					testRunner.WaitFor(() => scene.Children.Count == i);  					Assert.AreEqual(i' scene.Children.Count' $"Should have {i} parts after copy");  				}    				// Get MeshGroupCount before Group is clicked  				Assert.AreEqual(6' scene.Children.Count' "Scene should have 6 parts after copy loop");    				// Duplicate button moved to new container - move focus back to View3DWidget so CTRL-A below is seen by expected control  				testRunner.Select3DPart("Calibration - Box.stl");    				// select all  				testRunner.Type("^a");    				testRunner.ClickByName("Group Button");  				testRunner.WaitFor(() => scene.Children.Count == 1);  				Assert.AreEqual(1' scene.Children.Count' $"Should have 1 parts after group");    				testRunner.ClickByName("Ungroup Button");  				testRunner.WaitFor(() => scene.Children.Count == 6);  				Assert.AreEqual(6' scene.Children.Count' $"Should have 6 parts after ungroup");    				return Task.CompletedTask;  			}' overrideWidth: 1300);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PartPreviewTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PartPreviewTests.cs,GroupAndUngroup,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.OpenEmptyPartTab();    				testRunner.AddItemToBedplate();    				// Get View3DWidget and count Scene.Children before Copy button is clicked  				View3DWidget view3D = testRunner.GetWidgetByName("View3DWidget"' out _' 3) as View3DWidget;  				var scene = view3D.InteractionLayer.Scene;    				// Assert expected start count  				Assert.AreEqual(1' scene.Children.Count' "Should have one part before copy");    				// Select scene object  				testRunner.Select3DPart("Calibration - Box.stl");    				for (int i = 2; i <= 6; i++)  				{  					testRunner.ClickByName("Duplicate Button");  					testRunner.WaitFor(() => scene.Children.Count == i);  					Assert.AreEqual(i' scene.Children.Count' $"Should have {i} parts after copy");  				}    				// Get MeshGroupCount before Group is clicked  				Assert.AreEqual(6' scene.Children.Count' "Scene should have 6 parts after copy loop");    				// Duplicate button moved to new container - move focus back to View3DWidget so CTRL-A below is seen by expected control  				testRunner.Select3DPart("Calibration - Box.stl");    				// select all  				testRunner.Type("^a");    				testRunner.ClickByName("Group Button");  				testRunner.WaitFor(() => scene.Children.Count == 1);  				Assert.AreEqual(1' scene.Children.Count' $"Should have 1 parts after group");    				testRunner.ClickByName("Ungroup Button");  				testRunner.WaitFor(() => scene.Children.Count == 6);  				Assert.AreEqual(6' scene.Children.Count' $"Should have 6 parts after ungroup");    				return Task.CompletedTask;  			}' overrideWidth: 1300);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PartPreviewTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PartPreviewTests.cs,GroupAndUngroup,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.OpenEmptyPartTab();    				testRunner.AddItemToBedplate();    				// Get View3DWidget and count Scene.Children before Copy button is clicked  				View3DWidget view3D = testRunner.GetWidgetByName("View3DWidget"' out _' 3) as View3DWidget;  				var scene = view3D.InteractionLayer.Scene;    				// Assert expected start count  				Assert.AreEqual(1' scene.Children.Count' "Should have one part before copy");    				// Select scene object  				testRunner.Select3DPart("Calibration - Box.stl");    				for (int i = 2; i <= 6; i++)  				{  					testRunner.ClickByName("Duplicate Button");  					testRunner.WaitFor(() => scene.Children.Count == i);  					Assert.AreEqual(i' scene.Children.Count' $"Should have {i} parts after copy");  				}    				// Get MeshGroupCount before Group is clicked  				Assert.AreEqual(6' scene.Children.Count' "Scene should have 6 parts after copy loop");    				// Duplicate button moved to new container - move focus back to View3DWidget so CTRL-A below is seen by expected control  				testRunner.Select3DPart("Calibration - Box.stl");    				// select all  				testRunner.Type("^a");    				testRunner.ClickByName("Group Button");  				testRunner.WaitFor(() => scene.Children.Count == 1);  				Assert.AreEqual(1' scene.Children.Count' $"Should have 1 parts after group");    				testRunner.ClickByName("Ungroup Button");  				testRunner.WaitFor(() => scene.Children.Count == 6);  				Assert.AreEqual(6' scene.Children.Count' $"Should have 6 parts after ungroup");    				return Task.CompletedTask;  			}' overrideWidth: 1300);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PartPreviewTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PartPreviewTests.cs,GroupAndUngroup,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.OpenEmptyPartTab();    				testRunner.AddItemToBedplate();    				// Get View3DWidget and count Scene.Children before Copy button is clicked  				View3DWidget view3D = testRunner.GetWidgetByName("View3DWidget"' out _' 3) as View3DWidget;  				var scene = view3D.InteractionLayer.Scene;    				// Assert expected start count  				Assert.AreEqual(1' scene.Children.Count' "Should have one part before copy");    				// Select scene object  				testRunner.Select3DPart("Calibration - Box.stl");    				for (int i = 2; i <= 6; i++)  				{  					testRunner.ClickByName("Duplicate Button");  					testRunner.WaitFor(() => scene.Children.Count == i);  					Assert.AreEqual(i' scene.Children.Count' $"Should have {i} parts after copy");  				}    				// Get MeshGroupCount before Group is clicked  				Assert.AreEqual(6' scene.Children.Count' "Scene should have 6 parts after copy loop");    				// Duplicate button moved to new container - move focus back to View3DWidget so CTRL-A below is seen by expected control  				testRunner.Select3DPart("Calibration - Box.stl");    				// select all  				testRunner.Type("^a");    				testRunner.ClickByName("Group Button");  				testRunner.WaitFor(() => scene.Children.Count == 1);  				Assert.AreEqual(1' scene.Children.Count' $"Should have 1 parts after group");    				testRunner.ClickByName("Ungroup Button");  				testRunner.WaitFor(() => scene.Children.Count == 6);  				Assert.AreEqual(6' scene.Children.Count' $"Should have 6 parts after ungroup");    				return Task.CompletedTask;  			}' overrideWidth: 1300);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PartPreviewTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PartPreviewTests.cs,RemoveButtonRemovesParts,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.OpenEmptyPartTab();    				testRunner.AddItemToBedplate();    				var view3D = testRunner.GetWidgetByName("View3DWidget"' out _) as View3DWidget;  				var scene = view3D.InteractionLayer.Scene;    				testRunner.Select3DPart("Calibration - Box.stl");    				Assert.AreEqual(1' scene.Children.Count' "There should be 1 part on the bed after AddDefaultFileToBedplate()");    				// Add 5 items  				for (int i = 0; i <= 4; i++)  				{  					testRunner.ClickByName("Duplicate Button");  					testRunner.Delay(.5);  				}    				Assert.AreEqual(6' scene.Children.Count' "There should be 6 parts on the bed after the copy loop");    				// Remove an item  				testRunner.ClickByName("Remove Button");    				// Confirm  				Assert.AreEqual(5' scene.Children.Count' "There should be 5 parts on the bed after remove");    				return Task.CompletedTask;  			}' overrideWidth:1300);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PartPreviewTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PartPreviewTests.cs,RemoveButtonRemovesParts,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.OpenEmptyPartTab();    				testRunner.AddItemToBedplate();    				var view3D = testRunner.GetWidgetByName("View3DWidget"' out _) as View3DWidget;  				var scene = view3D.InteractionLayer.Scene;    				testRunner.Select3DPart("Calibration - Box.stl");    				Assert.AreEqual(1' scene.Children.Count' "There should be 1 part on the bed after AddDefaultFileToBedplate()");    				// Add 5 items  				for (int i = 0; i <= 4; i++)  				{  					testRunner.ClickByName("Duplicate Button");  					testRunner.Delay(.5);  				}    				Assert.AreEqual(6' scene.Children.Count' "There should be 6 parts on the bed after the copy loop");    				// Remove an item  				testRunner.ClickByName("Remove Button");    				// Confirm  				Assert.AreEqual(5' scene.Children.Count' "There should be 5 parts on the bed after remove");    				return Task.CompletedTask;  			}' overrideWidth:1300);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PartPreviewTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PartPreviewTests.cs,RemoveButtonRemovesParts,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.OpenEmptyPartTab();    				testRunner.AddItemToBedplate();    				var view3D = testRunner.GetWidgetByName("View3DWidget"' out _) as View3DWidget;  				var scene = view3D.InteractionLayer.Scene;    				testRunner.Select3DPart("Calibration - Box.stl");    				Assert.AreEqual(1' scene.Children.Count' "There should be 1 part on the bed after AddDefaultFileToBedplate()");    				// Add 5 items  				for (int i = 0; i <= 4; i++)  				{  					testRunner.ClickByName("Duplicate Button");  					testRunner.Delay(.5);  				}    				Assert.AreEqual(6' scene.Children.Count' "There should be 6 parts on the bed after the copy loop");    				// Remove an item  				testRunner.ClickByName("Remove Button");    				// Confirm  				Assert.AreEqual(5' scene.Children.Count' "There should be 5 parts on the bed after remove");    				return Task.CompletedTask;  			}' overrideWidth:1300);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PartPreviewTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PartPreviewTests.cs,RemoveButtonRemovesParts,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.OpenEmptyPartTab();    				testRunner.AddItemToBedplate();    				var view3D = testRunner.GetWidgetByName("View3DWidget"' out _) as View3DWidget;  				var scene = view3D.InteractionLayer.Scene;    				testRunner.Select3DPart("Calibration - Box.stl");    				Assert.AreEqual(1' scene.Children.Count' "There should be 1 part on the bed after AddDefaultFileToBedplate()");    				// Add 5 items  				for (int i = 0; i <= 4; i++)  				{  					testRunner.ClickByName("Duplicate Button");  					testRunner.Delay(.5);  				}    				Assert.AreEqual(6' scene.Children.Count' "There should be 6 parts on the bed after the copy loop");    				// Remove an item  				testRunner.ClickByName("Remove Button");    				// Confirm  				Assert.AreEqual(5' scene.Children.Count' "There should be 5 parts on the bed after remove");    				return Task.CompletedTask;  			}' overrideWidth:1300);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PartPreviewTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PartPreviewTests.cs,RemoveButtonRemovesParts,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.OpenEmptyPartTab();    				testRunner.AddItemToBedplate();    				var view3D = testRunner.GetWidgetByName("View3DWidget"' out _) as View3DWidget;  				var scene = view3D.InteractionLayer.Scene;    				testRunner.Select3DPart("Calibration - Box.stl");    				Assert.AreEqual(1' scene.Children.Count' "There should be 1 part on the bed after AddDefaultFileToBedplate()");    				// Add 5 items  				for (int i = 0; i <= 4; i++)  				{  					testRunner.ClickByName("Duplicate Button");  					testRunner.Delay(.5);  				}    				Assert.AreEqual(6' scene.Children.Count' "There should be 6 parts on the bed after the copy loop");    				// Remove an item  				testRunner.ClickByName("Remove Button");    				// Confirm  				Assert.AreEqual(5' scene.Children.Count' "There should be 5 parts on the bed after remove");    				return Task.CompletedTask;  			}' overrideWidth:1300);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PartPreviewTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PartPreviewTests.cs,SaveAsToQueue,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.AddAndSelectPrinter();    				testRunner.AddItemToBedplate();    				var view3D = testRunner.GetWidgetByName("View3DWidget"' out _) as View3DWidget;    				testRunner.Select3DPart("Calibration - Box.stl");    				for (int i = 0; i <= 2; i++)  				{  					testRunner.ClickByName("Duplicate Button");  					testRunner.Delay(.5);  				}    				int expectedCount = QueueData.Instance.ItemCount + 1;    				testRunner.SaveBedplateToFolder("Test PartA"' "Print Queue Row Item Collection");    				// Click Home -> Local Library  				testRunner.NavigateToLibraryHome();  				testRunner.NavigateToFolder("Print Queue Row Item Collection");    				Assert.IsTrue(testRunner.WaitForName("Row Item Test PartA"' 5)' "The part we added should be in the library");  				Assert.AreEqual(expectedCount' QueueData.Instance.ItemCount' "Queue count should increase by one after Save operation");    				return Task.CompletedTask;  			}' overrideWidth: 1300);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PartPreviewTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PartPreviewTests.cs,SaveAsToQueue,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.AddAndSelectPrinter();    				testRunner.AddItemToBedplate();    				var view3D = testRunner.GetWidgetByName("View3DWidget"' out _) as View3DWidget;    				testRunner.Select3DPart("Calibration - Box.stl");    				for (int i = 0; i <= 2; i++)  				{  					testRunner.ClickByName("Duplicate Button");  					testRunner.Delay(.5);  				}    				int expectedCount = QueueData.Instance.ItemCount + 1;    				testRunner.SaveBedplateToFolder("Test PartA"' "Print Queue Row Item Collection");    				// Click Home -> Local Library  				testRunner.NavigateToLibraryHome();  				testRunner.NavigateToFolder("Print Queue Row Item Collection");    				Assert.IsTrue(testRunner.WaitForName("Row Item Test PartA"' 5)' "The part we added should be in the library");  				Assert.AreEqual(expectedCount' QueueData.Instance.ItemCount' "Queue count should increase by one after Save operation");    				return Task.CompletedTask;  			}' overrideWidth: 1300);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PartPreviewTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PartPreviewTests.cs,SaveAsToQueue,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.AddAndSelectPrinter();    				testRunner.AddItemToBedplate();    				var view3D = testRunner.GetWidgetByName("View3DWidget"' out _) as View3DWidget;    				testRunner.Select3DPart("Calibration - Box.stl");    				for (int i = 0; i <= 2; i++)  				{  					testRunner.ClickByName("Duplicate Button");  					testRunner.Delay(.5);  				}    				int expectedCount = QueueData.Instance.ItemCount + 1;    				testRunner.SaveBedplateToFolder("Test PartA"' "Print Queue Row Item Collection");    				// Click Home -> Local Library  				testRunner.NavigateToLibraryHome();  				testRunner.NavigateToFolder("Print Queue Row Item Collection");    				Assert.IsTrue(testRunner.WaitForName("Row Item Test PartA"' 5)' "The part we added should be in the library");  				Assert.AreEqual(expectedCount' QueueData.Instance.ItemCount' "Queue count should increase by one after Save operation");    				return Task.CompletedTask;  			}' overrideWidth: 1300);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PartPreviewTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PartPreviewTests.cs,SaveAsToQueue,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.AddAndSelectPrinter();    				testRunner.AddItemToBedplate();    				var view3D = testRunner.GetWidgetByName("View3DWidget"' out _) as View3DWidget;    				testRunner.Select3DPart("Calibration - Box.stl");    				for (int i = 0; i <= 2; i++)  				{  					testRunner.ClickByName("Duplicate Button");  					testRunner.Delay(.5);  				}    				int expectedCount = QueueData.Instance.ItemCount + 1;    				testRunner.SaveBedplateToFolder("Test PartA"' "Print Queue Row Item Collection");    				// Click Home -> Local Library  				testRunner.NavigateToLibraryHome();  				testRunner.NavigateToFolder("Print Queue Row Item Collection");    				Assert.IsTrue(testRunner.WaitForName("Row Item Test PartA"' 5)' "The part we added should be in the library");  				Assert.AreEqual(expectedCount' QueueData.Instance.ItemCount' "Queue count should increase by one after Save operation");    				return Task.CompletedTask;  			}' overrideWidth: 1300);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrinterConnectionTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrinterConnectionTests.cs,PrinterDisconnectedOnTabClose,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				// Create and connect to Airwolf via emulator port  				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					var printer = testRunner.FirstPrinter();    					// Ensure connected  					Assert.AreEqual(CommunicationStates.Connected' printer.Connection.CommunicationState' "Printer should be Connected after LaunchAndConnectToPrinterEmulator");    					// Close Printer  					testRunner.CloseFirstPrinterTab();    					// Ensure disconnected  					testRunner.WaitFor(() => printer.Connection.CommunicationState == CommunicationStates.Disconnected);  					Assert.AreEqual(CommunicationStates.Disconnected' printer.Connection.CommunicationState' "Printer should be Disconnected after closing printer tab");    					Assert.AreEqual(0' PrinterConnection.ReadThread.NumRunning' "No ReadThread instances should be running when only printer Disconnected");  				}    				return Task.CompletedTask;  			}' maxTimeToRun: 120);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintQueueTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintQueueTests.cs,AddTwoItemsToQueue,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				// Expected = initial + 2;  				int expectedCount = QueueData.Instance.ItemCount + 2;    				testRunner.AddAndSelectPrinter();    				testRunner.ChangeToQueueContainer();    				// Click Add button and select files  				testRunner.InvokeLibraryAddDialog();    				// Open Fennec_Fox' Batman files  				testRunner.CompleteDialog(  					string.Format(  						"\"{0}\" \"{1}\""'  						MatterControlUtilities.GetTestItemPath("Fennec_Fox.stl")'  						MatterControlUtilities.GetTestItemPath("Batman.stl"))'  					secondsToWait: 2);    				// Wait for expected outcome  				testRunner.WaitFor(() => QueueData.Instance.ItemCount == expectedCount);    				// Assert - two parts added and queue count increases by two  				Assert.AreEqual(expectedCount' QueueData.Instance.ItemCount' "Queue count should increase by 2 when adding 2 items");  				Assert.IsTrue(testRunner.WaitForName("Row Item Fennec_Fox.stl")' "Named widget should exist after add(Fennec_Fox)");  				Assert.IsTrue(testRunner.WaitForName("Row Item Batman.stl")' "Named widget should exist after add(Batman)");    				return Task.CompletedTask;  			});
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintQueueTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintQueueTests.cs,AddTwoItemsToQueue,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				// Expected = initial + 2;  				int expectedCount = QueueData.Instance.ItemCount + 2;    				testRunner.AddAndSelectPrinter();    				testRunner.ChangeToQueueContainer();    				// Click Add button and select files  				testRunner.InvokeLibraryAddDialog();    				// Open Fennec_Fox' Batman files  				testRunner.CompleteDialog(  					string.Format(  						"\"{0}\" \"{1}\""'  						MatterControlUtilities.GetTestItemPath("Fennec_Fox.stl")'  						MatterControlUtilities.GetTestItemPath("Batman.stl"))'  					secondsToWait: 2);    				// Wait for expected outcome  				testRunner.WaitFor(() => QueueData.Instance.ItemCount == expectedCount);    				// Assert - two parts added and queue count increases by two  				Assert.AreEqual(expectedCount' QueueData.Instance.ItemCount' "Queue count should increase by 2 when adding 2 items");  				Assert.IsTrue(testRunner.WaitForName("Row Item Fennec_Fox.stl")' "Named widget should exist after add(Fennec_Fox)");  				Assert.IsTrue(testRunner.WaitForName("Row Item Batman.stl")' "Named widget should exist after add(Batman)");    				return Task.CompletedTask;  			});
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintQueueTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintQueueTests.cs,RemoveButtonRemovesSingleItem,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				int expectedCount = QueueData.Instance.ItemCount - 1;    				testRunner.AddAndSelectPrinter();    				testRunner.NavigateToFolder("Print Queue Row Item Collection");    				// Select both items  				testRunner.SelectListItems("Row Item 2013-01-25_Mouthpiece_v2");    				// Remove item  				testRunner.LibraryRemoveSelectedItem();  				testRunner.WaitFor(() => QueueData.Instance.ItemCount == expectedCount' 500);    				Assert.AreEqual(expectedCount' QueueData.Instance.ItemCount' "Queue count should decrease by one after clicking Remove");    				// Make sure selected item was removed  				Assert.IsFalse(testRunner.WaitForName("Row Item 2013-01-25_Mouthpiece_v2"' .5)' "Mouthpiece part should *not* exist after remove");    				return Task.CompletedTask;  			}' queueItemFolderToAdd: QueueTemplate.Three_Queue_Items);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintQueueTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintQueueTests.cs,RemoveButtonRemovesSingleItem,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				int expectedCount = QueueData.Instance.ItemCount - 1;    				testRunner.AddAndSelectPrinter();    				testRunner.NavigateToFolder("Print Queue Row Item Collection");    				// Select both items  				testRunner.SelectListItems("Row Item 2013-01-25_Mouthpiece_v2");    				// Remove item  				testRunner.LibraryRemoveSelectedItem();  				testRunner.WaitFor(() => QueueData.Instance.ItemCount == expectedCount' 500);    				Assert.AreEqual(expectedCount' QueueData.Instance.ItemCount' "Queue count should decrease by one after clicking Remove");    				// Make sure selected item was removed  				Assert.IsFalse(testRunner.WaitForName("Row Item 2013-01-25_Mouthpiece_v2"' .5)' "Mouthpiece part should *not* exist after remove");    				return Task.CompletedTask;  			}' queueItemFolderToAdd: QueueTemplate.Three_Queue_Items);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintQueueTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintQueueTests.cs,RemoveButtonRemovesMultipleItems,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				int expectedCount = QueueData.Instance.ItemCount - 2;    				testRunner.AddAndSelectPrinter();    				testRunner.NavigateToFolder("Print Queue Row Item Collection");    				// Select both items  				testRunner.SelectListItems("Row Item Batman"' "Row Item 2013-01-25_Mouthpiece_v2");    				// Remove items  				testRunner.LibraryRemoveSelectedItem();  				testRunner.WaitFor(() => QueueData.Instance.ItemCount == expectedCount' 500);    				Assert.AreEqual(expectedCount' QueueData.Instance.ItemCount' "Queue count should decrease by two after clicking Remove");    				// Make sure both selected items are removed  				Assert.IsFalse(testRunner.WaitForName("Row Item Batman"' .5)' "Batman part should *not* exist after remove");  				Assert.IsFalse(testRunner.WaitForName("Row Item 2013-01-25_Mouthpiece_v2"' .5)' "Mouthpiece part should *not* exist after remove");    				return Task.CompletedTask;  			}' queueItemFolderToAdd: QueueTemplate.Three_Queue_Items);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintQueueTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintQueueTests.cs,RemoveButtonRemovesMultipleItems,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				int expectedCount = QueueData.Instance.ItemCount - 2;    				testRunner.AddAndSelectPrinter();    				testRunner.NavigateToFolder("Print Queue Row Item Collection");    				// Select both items  				testRunner.SelectListItems("Row Item Batman"' "Row Item 2013-01-25_Mouthpiece_v2");    				// Remove items  				testRunner.LibraryRemoveSelectedItem();  				testRunner.WaitFor(() => QueueData.Instance.ItemCount == expectedCount' 500);    				Assert.AreEqual(expectedCount' QueueData.Instance.ItemCount' "Queue count should decrease by two after clicking Remove");    				// Make sure both selected items are removed  				Assert.IsFalse(testRunner.WaitForName("Row Item Batman"' .5)' "Batman part should *not* exist after remove");  				Assert.IsFalse(testRunner.WaitForName("Row Item 2013-01-25_Mouthpiece_v2"' .5)' "Mouthpiece part should *not* exist after remove");    				return Task.CompletedTask;  			}' queueItemFolderToAdd: QueueTemplate.Three_Queue_Items);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintQueueTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintQueueTests.cs,RemoveButtonRemovesMultipleItems,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				int expectedCount = QueueData.Instance.ItemCount - 2;    				testRunner.AddAndSelectPrinter();    				testRunner.NavigateToFolder("Print Queue Row Item Collection");    				// Select both items  				testRunner.SelectListItems("Row Item Batman"' "Row Item 2013-01-25_Mouthpiece_v2");    				// Remove items  				testRunner.LibraryRemoveSelectedItem();  				testRunner.WaitFor(() => QueueData.Instance.ItemCount == expectedCount' 500);    				Assert.AreEqual(expectedCount' QueueData.Instance.ItemCount' "Queue count should decrease by two after clicking Remove");    				// Make sure both selected items are removed  				Assert.IsFalse(testRunner.WaitForName("Row Item Batman"' .5)' "Batman part should *not* exist after remove");  				Assert.IsFalse(testRunner.WaitForName("Row Item 2013-01-25_Mouthpiece_v2"' .5)' "Mouthpiece part should *not* exist after remove");    				return Task.CompletedTask;  			}' queueItemFolderToAdd: QueueTemplate.Three_Queue_Items);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintQueueTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintQueueTests.cs,RemoveButtonRemovesMultipleItems,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				int expectedCount = QueueData.Instance.ItemCount - 2;    				testRunner.AddAndSelectPrinter();    				testRunner.NavigateToFolder("Print Queue Row Item Collection");    				// Select both items  				testRunner.SelectListItems("Row Item Batman"' "Row Item 2013-01-25_Mouthpiece_v2");    				// Remove items  				testRunner.LibraryRemoveSelectedItem();  				testRunner.WaitFor(() => QueueData.Instance.ItemCount == expectedCount' 500);    				Assert.AreEqual(expectedCount' QueueData.Instance.ItemCount' "Queue count should decrease by two after clicking Remove");    				// Make sure both selected items are removed  				Assert.IsFalse(testRunner.WaitForName("Row Item Batman"' .5)' "Batman part should *not* exist after remove");  				Assert.IsFalse(testRunner.WaitForName("Row Item 2013-01-25_Mouthpiece_v2"' .5)' "Mouthpiece part should *not* exist after remove");    				return Task.CompletedTask;  			}' queueItemFolderToAdd: QueueTemplate.Three_Queue_Items);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintQueueTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintQueueTests.cs,DragTo3DViewAddsItem,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.OpenEmptyPartTab();    				testRunner.AddTestAssetsToLibrary(new[] { "Batman.stl" });    				var view3D = testRunner.GetWidgetByName("View3DWidget"' out _) as View3DWidget;  				var scene = view3D.InteractionLayer.Scene;    				Assert.AreEqual(0' scene.Children.Count' "The scene should have zero items before drag/drop");    				testRunner.DragDropByName("Row Item Batman"' "InteractionLayer");  				Assert.AreEqual(1' scene.Children.Count' "The scene should have one item after drag/drop");    				testRunner.Delay(.2);    				testRunner.DragDropByName("Row Item Batman"' "InteractionLayer");  				Assert.AreEqual(2' scene.Children.Count' "The scene should have two items after drag/drop");    				return Task.CompletedTask;  			}' queueItemFolderToAdd: QueueTemplate.Three_Queue_Items);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintQueueTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintQueueTests.cs,DragTo3DViewAddsItem,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.OpenEmptyPartTab();    				testRunner.AddTestAssetsToLibrary(new[] { "Batman.stl" });    				var view3D = testRunner.GetWidgetByName("View3DWidget"' out _) as View3DWidget;  				var scene = view3D.InteractionLayer.Scene;    				Assert.AreEqual(0' scene.Children.Count' "The scene should have zero items before drag/drop");    				testRunner.DragDropByName("Row Item Batman"' "InteractionLayer");  				Assert.AreEqual(1' scene.Children.Count' "The scene should have one item after drag/drop");    				testRunner.Delay(.2);    				testRunner.DragDropByName("Row Item Batman"' "InteractionLayer");  				Assert.AreEqual(2' scene.Children.Count' "The scene should have two items after drag/drop");    				return Task.CompletedTask;  			}' queueItemFolderToAdd: QueueTemplate.Three_Queue_Items);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,CompletingPrintTurnsoffHeat,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.WaitForName("Cancel Wizard Button"' 1);    				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					Assert.AreEqual(1' ApplicationController.Instance.ActivePrinters.Count()' "One printer should be defined after add");    					testRunner.SelectSliceSettingsField(PrinterSettings.Layout.Printer' "end_gcode");    					testRunner.Type("^a");  					testRunner.Type("{BACKSPACE}");  					testRunner.Type("G28");    					testRunner.SelectSliceSettingsField(PrinterSettings.Layout.Printer' "start_gcode");    					var printer = testRunner.FirstPrinter();    					// Validate GCode fields persist values  					Assert.AreEqual(  						"G28"'  						printer.Settings.GetValue(SettingsKey.end_gcode)'  						"Failure persisting GCode/MultilineTextField value");    					testRunner.AddItemToBedplate();    					// Shorten the delay so the test runs in a reasonable time  					printer.Connection.TimeToHoldTemperature = 5;    					testRunner.StartPrint();    					// Wait for print to finish  					testRunner.WaitForPrintFinished(printer);    					// Wait for expected temp  					testRunner.WaitFor(() => printer.Connection.GetActualHotendTemperature(0) <= 0' 10);  					Assert.Less(printer.Connection.GetActualHotendTemperature(0)' 30);    					// Wait for expected temp  					testRunner.WaitFor(() => printer.Connection.ActualBedTemperature <= 10);  					Assert.Less(printer.Connection.ActualBedTemperature' 10);    					// Make sure we can run this whole thing again  					testRunner.StartPrint();    					// Wait for print to finish  					testRunner.WaitForPrintFinished(printer);    					// Wait for expected temp  					testRunner.WaitFor(() => printer.Connection.GetActualHotendTemperature(0) <= 0' 10);  					Assert.Less(printer.Connection.GetActualHotendTemperature(0)' 30);    					// Wait for expected temp  					testRunner.WaitFor(() => printer.Connection.ActualBedTemperature <= 10);  					Assert.Less(printer.Connection.ActualBedTemperature' 10);  				}    				return Task.CompletedTask;  			}' maxTimeToRun: 95);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,CompletingPrintTurnsoffHeat,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.WaitForName("Cancel Wizard Button"' 1);    				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					Assert.AreEqual(1' ApplicationController.Instance.ActivePrinters.Count()' "One printer should be defined after add");    					testRunner.SelectSliceSettingsField(PrinterSettings.Layout.Printer' "end_gcode");    					testRunner.Type("^a");  					testRunner.Type("{BACKSPACE}");  					testRunner.Type("G28");    					testRunner.SelectSliceSettingsField(PrinterSettings.Layout.Printer' "start_gcode");    					var printer = testRunner.FirstPrinter();    					// Validate GCode fields persist values  					Assert.AreEqual(  						"G28"'  						printer.Settings.GetValue(SettingsKey.end_gcode)'  						"Failure persisting GCode/MultilineTextField value");    					testRunner.AddItemToBedplate();    					// Shorten the delay so the test runs in a reasonable time  					printer.Connection.TimeToHoldTemperature = 5;    					testRunner.StartPrint();    					// Wait for print to finish  					testRunner.WaitForPrintFinished(printer);    					// Wait for expected temp  					testRunner.WaitFor(() => printer.Connection.GetActualHotendTemperature(0) <= 0' 10);  					Assert.Less(printer.Connection.GetActualHotendTemperature(0)' 30);    					// Wait for expected temp  					testRunner.WaitFor(() => printer.Connection.ActualBedTemperature <= 10);  					Assert.Less(printer.Connection.ActualBedTemperature' 10);    					// Make sure we can run this whole thing again  					testRunner.StartPrint();    					// Wait for print to finish  					testRunner.WaitForPrintFinished(printer);    					// Wait for expected temp  					testRunner.WaitFor(() => printer.Connection.GetActualHotendTemperature(0) <= 0' 10);  					Assert.Less(printer.Connection.GetActualHotendTemperature(0)' 30);    					// Wait for expected temp  					testRunner.WaitFor(() => printer.Connection.ActualBedTemperature <= 10);  					Assert.Less(printer.Connection.ActualBedTemperature' 10);  				}    				return Task.CompletedTask;  			}' maxTimeToRun: 95);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,CompletingPrintTurnsoffHeat,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.WaitForName("Cancel Wizard Button"' 1);    				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					Assert.AreEqual(1' ApplicationController.Instance.ActivePrinters.Count()' "One printer should be defined after add");    					testRunner.SelectSliceSettingsField(PrinterSettings.Layout.Printer' "end_gcode");    					testRunner.Type("^a");  					testRunner.Type("{BACKSPACE}");  					testRunner.Type("G28");    					testRunner.SelectSliceSettingsField(PrinterSettings.Layout.Printer' "start_gcode");    					var printer = testRunner.FirstPrinter();    					// Validate GCode fields persist values  					Assert.AreEqual(  						"G28"'  						printer.Settings.GetValue(SettingsKey.end_gcode)'  						"Failure persisting GCode/MultilineTextField value");    					testRunner.AddItemToBedplate();    					// Shorten the delay so the test runs in a reasonable time  					printer.Connection.TimeToHoldTemperature = 5;    					testRunner.StartPrint();    					// Wait for print to finish  					testRunner.WaitForPrintFinished(printer);    					// Wait for expected temp  					testRunner.WaitFor(() => printer.Connection.GetActualHotendTemperature(0) <= 0' 10);  					Assert.Less(printer.Connection.GetActualHotendTemperature(0)' 30);    					// Wait for expected temp  					testRunner.WaitFor(() => printer.Connection.ActualBedTemperature <= 10);  					Assert.Less(printer.Connection.ActualBedTemperature' 10);    					// Make sure we can run this whole thing again  					testRunner.StartPrint();    					// Wait for print to finish  					testRunner.WaitForPrintFinished(printer);    					// Wait for expected temp  					testRunner.WaitFor(() => printer.Connection.GetActualHotendTemperature(0) <= 0' 10);  					Assert.Less(printer.Connection.GetActualHotendTemperature(0)' 30);    					// Wait for expected temp  					testRunner.WaitFor(() => printer.Connection.ActualBedTemperature <= 10);  					Assert.Less(printer.Connection.ActualBedTemperature' 10);  				}    				return Task.CompletedTask;  			}' maxTimeToRun: 95);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,CompletingPrintTurnsoffHeat,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.WaitForName("Cancel Wizard Button"' 1);    				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					Assert.AreEqual(1' ApplicationController.Instance.ActivePrinters.Count()' "One printer should be defined after add");    					testRunner.SelectSliceSettingsField(PrinterSettings.Layout.Printer' "end_gcode");    					testRunner.Type("^a");  					testRunner.Type("{BACKSPACE}");  					testRunner.Type("G28");    					testRunner.SelectSliceSettingsField(PrinterSettings.Layout.Printer' "start_gcode");    					var printer = testRunner.FirstPrinter();    					// Validate GCode fields persist values  					Assert.AreEqual(  						"G28"'  						printer.Settings.GetValue(SettingsKey.end_gcode)'  						"Failure persisting GCode/MultilineTextField value");    					testRunner.AddItemToBedplate();    					// Shorten the delay so the test runs in a reasonable time  					printer.Connection.TimeToHoldTemperature = 5;    					testRunner.StartPrint();    					// Wait for print to finish  					testRunner.WaitForPrintFinished(printer);    					// Wait for expected temp  					testRunner.WaitFor(() => printer.Connection.GetActualHotendTemperature(0) <= 0' 10);  					Assert.Less(printer.Connection.GetActualHotendTemperature(0)' 30);    					// Wait for expected temp  					testRunner.WaitFor(() => printer.Connection.ActualBedTemperature <= 10);  					Assert.Less(printer.Connection.ActualBedTemperature' 10);    					// Make sure we can run this whole thing again  					testRunner.StartPrint();    					// Wait for print to finish  					testRunner.WaitForPrintFinished(printer);    					// Wait for expected temp  					testRunner.WaitFor(() => printer.Connection.GetActualHotendTemperature(0) <= 0' 10);  					Assert.Less(printer.Connection.GetActualHotendTemperature(0)' 30);    					// Wait for expected temp  					testRunner.WaitFor(() => printer.Connection.ActualBedTemperature <= 10);  					Assert.Less(printer.Connection.ActualBedTemperature' 10);  				}    				return Task.CompletedTask;  			}' maxTimeToRun: 95);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,CompletingPrintTurnsoffHeat,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.WaitForName("Cancel Wizard Button"' 1);    				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					Assert.AreEqual(1' ApplicationController.Instance.ActivePrinters.Count()' "One printer should be defined after add");    					testRunner.SelectSliceSettingsField(PrinterSettings.Layout.Printer' "end_gcode");    					testRunner.Type("^a");  					testRunner.Type("{BACKSPACE}");  					testRunner.Type("G28");    					testRunner.SelectSliceSettingsField(PrinterSettings.Layout.Printer' "start_gcode");    					var printer = testRunner.FirstPrinter();    					// Validate GCode fields persist values  					Assert.AreEqual(  						"G28"'  						printer.Settings.GetValue(SettingsKey.end_gcode)'  						"Failure persisting GCode/MultilineTextField value");    					testRunner.AddItemToBedplate();    					// Shorten the delay so the test runs in a reasonable time  					printer.Connection.TimeToHoldTemperature = 5;    					testRunner.StartPrint();    					// Wait for print to finish  					testRunner.WaitForPrintFinished(printer);    					// Wait for expected temp  					testRunner.WaitFor(() => printer.Connection.GetActualHotendTemperature(0) <= 0' 10);  					Assert.Less(printer.Connection.GetActualHotendTemperature(0)' 30);    					// Wait for expected temp  					testRunner.WaitFor(() => printer.Connection.ActualBedTemperature <= 10);  					Assert.Less(printer.Connection.ActualBedTemperature' 10);    					// Make sure we can run this whole thing again  					testRunner.StartPrint();    					// Wait for print to finish  					testRunner.WaitForPrintFinished(printer);    					// Wait for expected temp  					testRunner.WaitFor(() => printer.Connection.GetActualHotendTemperature(0) <= 0' 10);  					Assert.Less(printer.Connection.GetActualHotendTemperature(0)' 30);    					// Wait for expected temp  					testRunner.WaitFor(() => printer.Connection.ActualBedTemperature <= 10);  					Assert.Less(printer.Connection.ActualBedTemperature' 10);  				}    				return Task.CompletedTask;  			}' maxTimeToRun: 95);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,CompletingPrintTurnsoffHeat,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.WaitForName("Cancel Wizard Button"' 1);    				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					Assert.AreEqual(1' ApplicationController.Instance.ActivePrinters.Count()' "One printer should be defined after add");    					testRunner.SelectSliceSettingsField(PrinterSettings.Layout.Printer' "end_gcode");    					testRunner.Type("^a");  					testRunner.Type("{BACKSPACE}");  					testRunner.Type("G28");    					testRunner.SelectSliceSettingsField(PrinterSettings.Layout.Printer' "start_gcode");    					var printer = testRunner.FirstPrinter();    					// Validate GCode fields persist values  					Assert.AreEqual(  						"G28"'  						printer.Settings.GetValue(SettingsKey.end_gcode)'  						"Failure persisting GCode/MultilineTextField value");    					testRunner.AddItemToBedplate();    					// Shorten the delay so the test runs in a reasonable time  					printer.Connection.TimeToHoldTemperature = 5;    					testRunner.StartPrint();    					// Wait for print to finish  					testRunner.WaitForPrintFinished(printer);    					// Wait for expected temp  					testRunner.WaitFor(() => printer.Connection.GetActualHotendTemperature(0) <= 0' 10);  					Assert.Less(printer.Connection.GetActualHotendTemperature(0)' 30);    					// Wait for expected temp  					testRunner.WaitFor(() => printer.Connection.ActualBedTemperature <= 10);  					Assert.Less(printer.Connection.ActualBedTemperature' 10);    					// Make sure we can run this whole thing again  					testRunner.StartPrint();    					// Wait for print to finish  					testRunner.WaitForPrintFinished(printer);    					// Wait for expected temp  					testRunner.WaitFor(() => printer.Connection.GetActualHotendTemperature(0) <= 0' 10);  					Assert.Less(printer.Connection.GetActualHotendTemperature(0)' 30);    					// Wait for expected temp  					testRunner.WaitFor(() => printer.Connection.ActualBedTemperature <= 10);  					Assert.Less(printer.Connection.ActualBedTemperature' 10);  				}    				return Task.CompletedTask;  			}' maxTimeToRun: 95);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,CompletingPrintTurnsoffHeat,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.WaitForName("Cancel Wizard Button"' 1);    				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					Assert.AreEqual(1' ApplicationController.Instance.ActivePrinters.Count()' "One printer should be defined after add");    					testRunner.SelectSliceSettingsField(PrinterSettings.Layout.Printer' "end_gcode");    					testRunner.Type("^a");  					testRunner.Type("{BACKSPACE}");  					testRunner.Type("G28");    					testRunner.SelectSliceSettingsField(PrinterSettings.Layout.Printer' "start_gcode");    					var printer = testRunner.FirstPrinter();    					// Validate GCode fields persist values  					Assert.AreEqual(  						"G28"'  						printer.Settings.GetValue(SettingsKey.end_gcode)'  						"Failure persisting GCode/MultilineTextField value");    					testRunner.AddItemToBedplate();    					// Shorten the delay so the test runs in a reasonable time  					printer.Connection.TimeToHoldTemperature = 5;    					testRunner.StartPrint();    					// Wait for print to finish  					testRunner.WaitForPrintFinished(printer);    					// Wait for expected temp  					testRunner.WaitFor(() => printer.Connection.GetActualHotendTemperature(0) <= 0' 10);  					Assert.Less(printer.Connection.GetActualHotendTemperature(0)' 30);    					// Wait for expected temp  					testRunner.WaitFor(() => printer.Connection.ActualBedTemperature <= 10);  					Assert.Less(printer.Connection.ActualBedTemperature' 10);    					// Make sure we can run this whole thing again  					testRunner.StartPrint();    					// Wait for print to finish  					testRunner.WaitForPrintFinished(printer);    					// Wait for expected temp  					testRunner.WaitFor(() => printer.Connection.GetActualHotendTemperature(0) <= 0' 10);  					Assert.Less(printer.Connection.GetActualHotendTemperature(0)' 30);    					// Wait for expected temp  					testRunner.WaitFor(() => printer.Connection.ActualBedTemperature <= 10);  					Assert.Less(printer.Connection.ActualBedTemperature' 10);  				}    				return Task.CompletedTask;  			}' maxTimeToRun: 95);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,CompletingPrintTurnsoffHeat,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.WaitForName("Cancel Wizard Button"' 1);    				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					Assert.AreEqual(1' ApplicationController.Instance.ActivePrinters.Count()' "One printer should be defined after add");    					testRunner.SelectSliceSettingsField(PrinterSettings.Layout.Printer' "end_gcode");    					testRunner.Type("^a");  					testRunner.Type("{BACKSPACE}");  					testRunner.Type("G28");    					testRunner.SelectSliceSettingsField(PrinterSettings.Layout.Printer' "start_gcode");    					var printer = testRunner.FirstPrinter();    					// Validate GCode fields persist values  					Assert.AreEqual(  						"G28"'  						printer.Settings.GetValue(SettingsKey.end_gcode)'  						"Failure persisting GCode/MultilineTextField value");    					testRunner.AddItemToBedplate();    					// Shorten the delay so the test runs in a reasonable time  					printer.Connection.TimeToHoldTemperature = 5;    					testRunner.StartPrint();    					// Wait for print to finish  					testRunner.WaitForPrintFinished(printer);    					// Wait for expected temp  					testRunner.WaitFor(() => printer.Connection.GetActualHotendTemperature(0) <= 0' 10);  					Assert.Less(printer.Connection.GetActualHotendTemperature(0)' 30);    					// Wait for expected temp  					testRunner.WaitFor(() => printer.Connection.ActualBedTemperature <= 10);  					Assert.Less(printer.Connection.ActualBedTemperature' 10);    					// Make sure we can run this whole thing again  					testRunner.StartPrint();    					// Wait for print to finish  					testRunner.WaitForPrintFinished(printer);    					// Wait for expected temp  					testRunner.WaitFor(() => printer.Connection.GetActualHotendTemperature(0) <= 0' 10);  					Assert.Less(printer.Connection.GetActualHotendTemperature(0)' 30);    					// Wait for expected temp  					testRunner.WaitFor(() => printer.Connection.ActualBedTemperature <= 10);  					Assert.Less(printer.Connection.ActualBedTemperature' 10);  				}    				return Task.CompletedTask;  			}' maxTimeToRun: 95);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,CompletingPrintTurnsoffHeat,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.WaitForName("Cancel Wizard Button"' 1);    				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					Assert.AreEqual(1' ApplicationController.Instance.ActivePrinters.Count()' "One printer should be defined after add");    					testRunner.SelectSliceSettingsField(PrinterSettings.Layout.Printer' "end_gcode");    					testRunner.Type("^a");  					testRunner.Type("{BACKSPACE}");  					testRunner.Type("G28");    					testRunner.SelectSliceSettingsField(PrinterSettings.Layout.Printer' "start_gcode");    					var printer = testRunner.FirstPrinter();    					// Validate GCode fields persist values  					Assert.AreEqual(  						"G28"'  						printer.Settings.GetValue(SettingsKey.end_gcode)'  						"Failure persisting GCode/MultilineTextField value");    					testRunner.AddItemToBedplate();    					// Shorten the delay so the test runs in a reasonable time  					printer.Connection.TimeToHoldTemperature = 5;    					testRunner.StartPrint();    					// Wait for print to finish  					testRunner.WaitForPrintFinished(printer);    					// Wait for expected temp  					testRunner.WaitFor(() => printer.Connection.GetActualHotendTemperature(0) <= 0' 10);  					Assert.Less(printer.Connection.GetActualHotendTemperature(0)' 30);    					// Wait for expected temp  					testRunner.WaitFor(() => printer.Connection.ActualBedTemperature <= 10);  					Assert.Less(printer.Connection.ActualBedTemperature' 10);    					// Make sure we can run this whole thing again  					testRunner.StartPrint();    					// Wait for print to finish  					testRunner.WaitForPrintFinished(printer);    					// Wait for expected temp  					testRunner.WaitFor(() => printer.Connection.GetActualHotendTemperature(0) <= 0' 10);  					Assert.Less(printer.Connection.GetActualHotendTemperature(0)' 30);    					// Wait for expected temp  					testRunner.WaitFor(() => printer.Connection.ActualBedTemperature <= 10);  					Assert.Less(printer.Connection.ActualBedTemperature' 10);  				}    				return Task.CompletedTask;  			}' maxTimeToRun: 95);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,CompletingPrintTurnsoffHeat,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.WaitForName("Cancel Wizard Button"' 1);    				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					Assert.AreEqual(1' ApplicationController.Instance.ActivePrinters.Count()' "One printer should be defined after add");    					testRunner.SelectSliceSettingsField(PrinterSettings.Layout.Printer' "end_gcode");    					testRunner.Type("^a");  					testRunner.Type("{BACKSPACE}");  					testRunner.Type("G28");    					testRunner.SelectSliceSettingsField(PrinterSettings.Layout.Printer' "start_gcode");    					var printer = testRunner.FirstPrinter();    					// Validate GCode fields persist values  					Assert.AreEqual(  						"G28"'  						printer.Settings.GetValue(SettingsKey.end_gcode)'  						"Failure persisting GCode/MultilineTextField value");    					testRunner.AddItemToBedplate();    					// Shorten the delay so the test runs in a reasonable time  					printer.Connection.TimeToHoldTemperature = 5;    					testRunner.StartPrint();    					// Wait for print to finish  					testRunner.WaitForPrintFinished(printer);    					// Wait for expected temp  					testRunner.WaitFor(() => printer.Connection.GetActualHotendTemperature(0) <= 0' 10);  					Assert.Less(printer.Connection.GetActualHotendTemperature(0)' 30);    					// Wait for expected temp  					testRunner.WaitFor(() => printer.Connection.ActualBedTemperature <= 10);  					Assert.Less(printer.Connection.ActualBedTemperature' 10);    					// Make sure we can run this whole thing again  					testRunner.StartPrint();    					// Wait for print to finish  					testRunner.WaitForPrintFinished(printer);    					// Wait for expected temp  					testRunner.WaitFor(() => printer.Connection.GetActualHotendTemperature(0) <= 0' 10);  					Assert.Less(printer.Connection.GetActualHotendTemperature(0)' 30);    					// Wait for expected temp  					testRunner.WaitFor(() => printer.Connection.ActualBedTemperature <= 10);  					Assert.Less(printer.Connection.ActualBedTemperature' 10);  				}    				return Task.CompletedTask;  			}' maxTimeToRun: 95);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,PulseLevelingTest,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				AutomationRunner.TimeToMoveMouse = .2;  				testRunner.WaitForName("Cancel Wizard Button"' 1);    				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator("Pulse"' "A-134"))  				{  					Assert.AreEqual(1' ApplicationController.Instance.ActivePrinters.Count()' "One printer should be defined after add");    					testRunner.OpenPrintPopupMenu();    					testRunner.ClickByName("SetupPrinter");    					testRunner.Complete9StepLeveling();    					// print a part  					testRunner.AddItemToBedplate();    					var printer = testRunner.FirstPrinter();    					var currentSettings = printer.Settings;  					currentSettings.SetValue(SettingsKey.pause_gcode' "");  					currentSettings.SetValue(SettingsKey.resume_gcode' "");    					testRunner.StartPrint(pauseAtLayers: "2");    					testRunner.WaitForName("Yes Button"' 20); // the yes button is 'Resume'    					// the user types in the pause layer 1 based and we are 0 based' so we should be on: user 2' printer 1.  					Assert.AreEqual(1' printer.Connection.CurrentlyPrintingLayer);    					// assert the leveling is working  					Assert.AreEqual(11.25' emulator.Destination.Z);    					testRunner.CancelPrint();    					// now run leveling again and make sure we get the same result  					testRunner.SwitchToControlsTab();  					testRunner.ClickByName("Printer Calibration Button");    					testRunner.ClickByName("Print Leveling Row");    					testRunner.Complete9StepLeveling(2);    					testRunner.StartPrint(pauseAtLayers: "2");    					testRunner.WaitForName("Yes Button"' 20); // the yes button is 'Resume'    					// the user types in the pause layer 1 based and we are 0 based' so we should be on: user 2' printer 1.  					Assert.AreEqual(1' printer.Connection.CurrentlyPrintingLayer);  					// assert the leveling is working  					Assert.AreEqual(12.25' emulator.Destination.Z);    					testRunner.CancelPrint();    					// now modify the leveling data manually and assert that it is applied when printing  					testRunner.SwitchToControlsTab();    					testRunner.ClickByName("Printer Calibration Button");    					testRunner.ClickByName("Edit Leveling Data Button");  					for (int i = 0; i < 3; i++)  					{  						var name = $"z Position {i}";  						testRunner.ClickByName(name);  						testRunner.Type("^a"); // select all  						testRunner.Type("5");  					}    					testRunner.ClickByName("Save Leveling Button");    					testRunner.ClickByName("Cancel Wizard Button");    					testRunner.StartPrint(pauseAtLayers: "2");    					testRunner.WaitForName("Yes Button"' 20); // the yes button is 'Resume'    					// the user types in the pause layer 1 based and we are 0 based' so we should be on: user 2' printer 1.  					Assert.AreEqual(1' printer.Connection.CurrentlyPrintingLayer);    					// assert the leveling is working  					Assert.AreEqual(5.25' emulator.Destination.Z);  				}    				return Task.CompletedTask;  			}' maxTimeToRun: 130);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,PulseLevelingTest,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				AutomationRunner.TimeToMoveMouse = .2;  				testRunner.WaitForName("Cancel Wizard Button"' 1);    				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator("Pulse"' "A-134"))  				{  					Assert.AreEqual(1' ApplicationController.Instance.ActivePrinters.Count()' "One printer should be defined after add");    					testRunner.OpenPrintPopupMenu();    					testRunner.ClickByName("SetupPrinter");    					testRunner.Complete9StepLeveling();    					// print a part  					testRunner.AddItemToBedplate();    					var printer = testRunner.FirstPrinter();    					var currentSettings = printer.Settings;  					currentSettings.SetValue(SettingsKey.pause_gcode' "");  					currentSettings.SetValue(SettingsKey.resume_gcode' "");    					testRunner.StartPrint(pauseAtLayers: "2");    					testRunner.WaitForName("Yes Button"' 20); // the yes button is 'Resume'    					// the user types in the pause layer 1 based and we are 0 based' so we should be on: user 2' printer 1.  					Assert.AreEqual(1' printer.Connection.CurrentlyPrintingLayer);    					// assert the leveling is working  					Assert.AreEqual(11.25' emulator.Destination.Z);    					testRunner.CancelPrint();    					// now run leveling again and make sure we get the same result  					testRunner.SwitchToControlsTab();  					testRunner.ClickByName("Printer Calibration Button");    					testRunner.ClickByName("Print Leveling Row");    					testRunner.Complete9StepLeveling(2);    					testRunner.StartPrint(pauseAtLayers: "2");    					testRunner.WaitForName("Yes Button"' 20); // the yes button is 'Resume'    					// the user types in the pause layer 1 based and we are 0 based' so we should be on: user 2' printer 1.  					Assert.AreEqual(1' printer.Connection.CurrentlyPrintingLayer);  					// assert the leveling is working  					Assert.AreEqual(12.25' emulator.Destination.Z);    					testRunner.CancelPrint();    					// now modify the leveling data manually and assert that it is applied when printing  					testRunner.SwitchToControlsTab();    					testRunner.ClickByName("Printer Calibration Button");    					testRunner.ClickByName("Edit Leveling Data Button");  					for (int i = 0; i < 3; i++)  					{  						var name = $"z Position {i}";  						testRunner.ClickByName(name);  						testRunner.Type("^a"); // select all  						testRunner.Type("5");  					}    					testRunner.ClickByName("Save Leveling Button");    					testRunner.ClickByName("Cancel Wizard Button");    					testRunner.StartPrint(pauseAtLayers: "2");    					testRunner.WaitForName("Yes Button"' 20); // the yes button is 'Resume'    					// the user types in the pause layer 1 based and we are 0 based' so we should be on: user 2' printer 1.  					Assert.AreEqual(1' printer.Connection.CurrentlyPrintingLayer);    					// assert the leveling is working  					Assert.AreEqual(5.25' emulator.Destination.Z);  				}    				return Task.CompletedTask;  			}' maxTimeToRun: 130);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,PulseLevelingTest,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				AutomationRunner.TimeToMoveMouse = .2;  				testRunner.WaitForName("Cancel Wizard Button"' 1);    				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator("Pulse"' "A-134"))  				{  					Assert.AreEqual(1' ApplicationController.Instance.ActivePrinters.Count()' "One printer should be defined after add");    					testRunner.OpenPrintPopupMenu();    					testRunner.ClickByName("SetupPrinter");    					testRunner.Complete9StepLeveling();    					// print a part  					testRunner.AddItemToBedplate();    					var printer = testRunner.FirstPrinter();    					var currentSettings = printer.Settings;  					currentSettings.SetValue(SettingsKey.pause_gcode' "");  					currentSettings.SetValue(SettingsKey.resume_gcode' "");    					testRunner.StartPrint(pauseAtLayers: "2");    					testRunner.WaitForName("Yes Button"' 20); // the yes button is 'Resume'    					// the user types in the pause layer 1 based and we are 0 based' so we should be on: user 2' printer 1.  					Assert.AreEqual(1' printer.Connection.CurrentlyPrintingLayer);    					// assert the leveling is working  					Assert.AreEqual(11.25' emulator.Destination.Z);    					testRunner.CancelPrint();    					// now run leveling again and make sure we get the same result  					testRunner.SwitchToControlsTab();  					testRunner.ClickByName("Printer Calibration Button");    					testRunner.ClickByName("Print Leveling Row");    					testRunner.Complete9StepLeveling(2);    					testRunner.StartPrint(pauseAtLayers: "2");    					testRunner.WaitForName("Yes Button"' 20); // the yes button is 'Resume'    					// the user types in the pause layer 1 based and we are 0 based' so we should be on: user 2' printer 1.  					Assert.AreEqual(1' printer.Connection.CurrentlyPrintingLayer);  					// assert the leveling is working  					Assert.AreEqual(12.25' emulator.Destination.Z);    					testRunner.CancelPrint();    					// now modify the leveling data manually and assert that it is applied when printing  					testRunner.SwitchToControlsTab();    					testRunner.ClickByName("Printer Calibration Button");    					testRunner.ClickByName("Edit Leveling Data Button");  					for (int i = 0; i < 3; i++)  					{  						var name = $"z Position {i}";  						testRunner.ClickByName(name);  						testRunner.Type("^a"); // select all  						testRunner.Type("5");  					}    					testRunner.ClickByName("Save Leveling Button");    					testRunner.ClickByName("Cancel Wizard Button");    					testRunner.StartPrint(pauseAtLayers: "2");    					testRunner.WaitForName("Yes Button"' 20); // the yes button is 'Resume'    					// the user types in the pause layer 1 based and we are 0 based' so we should be on: user 2' printer 1.  					Assert.AreEqual(1' printer.Connection.CurrentlyPrintingLayer);    					// assert the leveling is working  					Assert.AreEqual(5.25' emulator.Destination.Z);  				}    				return Task.CompletedTask;  			}' maxTimeToRun: 130);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,PulseLevelingTest,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				AutomationRunner.TimeToMoveMouse = .2;  				testRunner.WaitForName("Cancel Wizard Button"' 1);    				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator("Pulse"' "A-134"))  				{  					Assert.AreEqual(1' ApplicationController.Instance.ActivePrinters.Count()' "One printer should be defined after add");    					testRunner.OpenPrintPopupMenu();    					testRunner.ClickByName("SetupPrinter");    					testRunner.Complete9StepLeveling();    					// print a part  					testRunner.AddItemToBedplate();    					var printer = testRunner.FirstPrinter();    					var currentSettings = printer.Settings;  					currentSettings.SetValue(SettingsKey.pause_gcode' "");  					currentSettings.SetValue(SettingsKey.resume_gcode' "");    					testRunner.StartPrint(pauseAtLayers: "2");    					testRunner.WaitForName("Yes Button"' 20); // the yes button is 'Resume'    					// the user types in the pause layer 1 based and we are 0 based' so we should be on: user 2' printer 1.  					Assert.AreEqual(1' printer.Connection.CurrentlyPrintingLayer);    					// assert the leveling is working  					Assert.AreEqual(11.25' emulator.Destination.Z);    					testRunner.CancelPrint();    					// now run leveling again and make sure we get the same result  					testRunner.SwitchToControlsTab();  					testRunner.ClickByName("Printer Calibration Button");    					testRunner.ClickByName("Print Leveling Row");    					testRunner.Complete9StepLeveling(2);    					testRunner.StartPrint(pauseAtLayers: "2");    					testRunner.WaitForName("Yes Button"' 20); // the yes button is 'Resume'    					// the user types in the pause layer 1 based and we are 0 based' so we should be on: user 2' printer 1.  					Assert.AreEqual(1' printer.Connection.CurrentlyPrintingLayer);  					// assert the leveling is working  					Assert.AreEqual(12.25' emulator.Destination.Z);    					testRunner.CancelPrint();    					// now modify the leveling data manually and assert that it is applied when printing  					testRunner.SwitchToControlsTab();    					testRunner.ClickByName("Printer Calibration Button");    					testRunner.ClickByName("Edit Leveling Data Button");  					for (int i = 0; i < 3; i++)  					{  						var name = $"z Position {i}";  						testRunner.ClickByName(name);  						testRunner.Type("^a"); // select all  						testRunner.Type("5");  					}    					testRunner.ClickByName("Save Leveling Button");    					testRunner.ClickByName("Cancel Wizard Button");    					testRunner.StartPrint(pauseAtLayers: "2");    					testRunner.WaitForName("Yes Button"' 20); // the yes button is 'Resume'    					// the user types in the pause layer 1 based and we are 0 based' so we should be on: user 2' printer 1.  					Assert.AreEqual(1' printer.Connection.CurrentlyPrintingLayer);    					// assert the leveling is working  					Assert.AreEqual(5.25' emulator.Destination.Z);  				}    				return Task.CompletedTask;  			}' maxTimeToRun: 130);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,PulseLevelingTest,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				AutomationRunner.TimeToMoveMouse = .2;  				testRunner.WaitForName("Cancel Wizard Button"' 1);    				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator("Pulse"' "A-134"))  				{  					Assert.AreEqual(1' ApplicationController.Instance.ActivePrinters.Count()' "One printer should be defined after add");    					testRunner.OpenPrintPopupMenu();    					testRunner.ClickByName("SetupPrinter");    					testRunner.Complete9StepLeveling();    					// print a part  					testRunner.AddItemToBedplate();    					var printer = testRunner.FirstPrinter();    					var currentSettings = printer.Settings;  					currentSettings.SetValue(SettingsKey.pause_gcode' "");  					currentSettings.SetValue(SettingsKey.resume_gcode' "");    					testRunner.StartPrint(pauseAtLayers: "2");    					testRunner.WaitForName("Yes Button"' 20); // the yes button is 'Resume'    					// the user types in the pause layer 1 based and we are 0 based' so we should be on: user 2' printer 1.  					Assert.AreEqual(1' printer.Connection.CurrentlyPrintingLayer);    					// assert the leveling is working  					Assert.AreEqual(11.25' emulator.Destination.Z);    					testRunner.CancelPrint();    					// now run leveling again and make sure we get the same result  					testRunner.SwitchToControlsTab();  					testRunner.ClickByName("Printer Calibration Button");    					testRunner.ClickByName("Print Leveling Row");    					testRunner.Complete9StepLeveling(2);    					testRunner.StartPrint(pauseAtLayers: "2");    					testRunner.WaitForName("Yes Button"' 20); // the yes button is 'Resume'    					// the user types in the pause layer 1 based and we are 0 based' so we should be on: user 2' printer 1.  					Assert.AreEqual(1' printer.Connection.CurrentlyPrintingLayer);  					// assert the leveling is working  					Assert.AreEqual(12.25' emulator.Destination.Z);    					testRunner.CancelPrint();    					// now modify the leveling data manually and assert that it is applied when printing  					testRunner.SwitchToControlsTab();    					testRunner.ClickByName("Printer Calibration Button");    					testRunner.ClickByName("Edit Leveling Data Button");  					for (int i = 0; i < 3; i++)  					{  						var name = $"z Position {i}";  						testRunner.ClickByName(name);  						testRunner.Type("^a"); // select all  						testRunner.Type("5");  					}    					testRunner.ClickByName("Save Leveling Button");    					testRunner.ClickByName("Cancel Wizard Button");    					testRunner.StartPrint(pauseAtLayers: "2");    					testRunner.WaitForName("Yes Button"' 20); // the yes button is 'Resume'    					// the user types in the pause layer 1 based and we are 0 based' so we should be on: user 2' printer 1.  					Assert.AreEqual(1' printer.Connection.CurrentlyPrintingLayer);    					// assert the leveling is working  					Assert.AreEqual(5.25' emulator.Destination.Z);  				}    				return Task.CompletedTask;  			}' maxTimeToRun: 130);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,PulseLevelingTest,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				AutomationRunner.TimeToMoveMouse = .2;  				testRunner.WaitForName("Cancel Wizard Button"' 1);    				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator("Pulse"' "A-134"))  				{  					Assert.AreEqual(1' ApplicationController.Instance.ActivePrinters.Count()' "One printer should be defined after add");    					testRunner.OpenPrintPopupMenu();    					testRunner.ClickByName("SetupPrinter");    					testRunner.Complete9StepLeveling();    					// print a part  					testRunner.AddItemToBedplate();    					var printer = testRunner.FirstPrinter();    					var currentSettings = printer.Settings;  					currentSettings.SetValue(SettingsKey.pause_gcode' "");  					currentSettings.SetValue(SettingsKey.resume_gcode' "");    					testRunner.StartPrint(pauseAtLayers: "2");    					testRunner.WaitForName("Yes Button"' 20); // the yes button is 'Resume'    					// the user types in the pause layer 1 based and we are 0 based' so we should be on: user 2' printer 1.  					Assert.AreEqual(1' printer.Connection.CurrentlyPrintingLayer);    					// assert the leveling is working  					Assert.AreEqual(11.25' emulator.Destination.Z);    					testRunner.CancelPrint();    					// now run leveling again and make sure we get the same result  					testRunner.SwitchToControlsTab();  					testRunner.ClickByName("Printer Calibration Button");    					testRunner.ClickByName("Print Leveling Row");    					testRunner.Complete9StepLeveling(2);    					testRunner.StartPrint(pauseAtLayers: "2");    					testRunner.WaitForName("Yes Button"' 20); // the yes button is 'Resume'    					// the user types in the pause layer 1 based and we are 0 based' so we should be on: user 2' printer 1.  					Assert.AreEqual(1' printer.Connection.CurrentlyPrintingLayer);  					// assert the leveling is working  					Assert.AreEqual(12.25' emulator.Destination.Z);    					testRunner.CancelPrint();    					// now modify the leveling data manually and assert that it is applied when printing  					testRunner.SwitchToControlsTab();    					testRunner.ClickByName("Printer Calibration Button");    					testRunner.ClickByName("Edit Leveling Data Button");  					for (int i = 0; i < 3; i++)  					{  						var name = $"z Position {i}";  						testRunner.ClickByName(name);  						testRunner.Type("^a"); // select all  						testRunner.Type("5");  					}    					testRunner.ClickByName("Save Leveling Button");    					testRunner.ClickByName("Cancel Wizard Button");    					testRunner.StartPrint(pauseAtLayers: "2");    					testRunner.WaitForName("Yes Button"' 20); // the yes button is 'Resume'    					// the user types in the pause layer 1 based and we are 0 based' so we should be on: user 2' printer 1.  					Assert.AreEqual(1' printer.Connection.CurrentlyPrintingLayer);    					// assert the leveling is working  					Assert.AreEqual(5.25' emulator.Destination.Z);  				}    				return Task.CompletedTask;  			}' maxTimeToRun: 130);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,PulseLevelingTest,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				AutomationRunner.TimeToMoveMouse = .2;  				testRunner.WaitForName("Cancel Wizard Button"' 1);    				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator("Pulse"' "A-134"))  				{  					Assert.AreEqual(1' ApplicationController.Instance.ActivePrinters.Count()' "One printer should be defined after add");    					testRunner.OpenPrintPopupMenu();    					testRunner.ClickByName("SetupPrinter");    					testRunner.Complete9StepLeveling();    					// print a part  					testRunner.AddItemToBedplate();    					var printer = testRunner.FirstPrinter();    					var currentSettings = printer.Settings;  					currentSettings.SetValue(SettingsKey.pause_gcode' "");  					currentSettings.SetValue(SettingsKey.resume_gcode' "");    					testRunner.StartPrint(pauseAtLayers: "2");    					testRunner.WaitForName("Yes Button"' 20); // the yes button is 'Resume'    					// the user types in the pause layer 1 based and we are 0 based' so we should be on: user 2' printer 1.  					Assert.AreEqual(1' printer.Connection.CurrentlyPrintingLayer);    					// assert the leveling is working  					Assert.AreEqual(11.25' emulator.Destination.Z);    					testRunner.CancelPrint();    					// now run leveling again and make sure we get the same result  					testRunner.SwitchToControlsTab();  					testRunner.ClickByName("Printer Calibration Button");    					testRunner.ClickByName("Print Leveling Row");    					testRunner.Complete9StepLeveling(2);    					testRunner.StartPrint(pauseAtLayers: "2");    					testRunner.WaitForName("Yes Button"' 20); // the yes button is 'Resume'    					// the user types in the pause layer 1 based and we are 0 based' so we should be on: user 2' printer 1.  					Assert.AreEqual(1' printer.Connection.CurrentlyPrintingLayer);  					// assert the leveling is working  					Assert.AreEqual(12.25' emulator.Destination.Z);    					testRunner.CancelPrint();    					// now modify the leveling data manually and assert that it is applied when printing  					testRunner.SwitchToControlsTab();    					testRunner.ClickByName("Printer Calibration Button");    					testRunner.ClickByName("Edit Leveling Data Button");  					for (int i = 0; i < 3; i++)  					{  						var name = $"z Position {i}";  						testRunner.ClickByName(name);  						testRunner.Type("^a"); // select all  						testRunner.Type("5");  					}    					testRunner.ClickByName("Save Leveling Button");    					testRunner.ClickByName("Cancel Wizard Button");    					testRunner.StartPrint(pauseAtLayers: "2");    					testRunner.WaitForName("Yes Button"' 20); // the yes button is 'Resume'    					// the user types in the pause layer 1 based and we are 0 based' so we should be on: user 2' printer 1.  					Assert.AreEqual(1' printer.Connection.CurrentlyPrintingLayer);    					// assert the leveling is working  					Assert.AreEqual(5.25' emulator.Destination.Z);  				}    				return Task.CompletedTask;  			}' maxTimeToRun: 130);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,PulseLevelingTest,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				AutomationRunner.TimeToMoveMouse = .2;  				testRunner.WaitForName("Cancel Wizard Button"' 1);    				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator("Pulse"' "A-134"))  				{  					Assert.AreEqual(1' ApplicationController.Instance.ActivePrinters.Count()' "One printer should be defined after add");    					testRunner.OpenPrintPopupMenu();    					testRunner.ClickByName("SetupPrinter");    					testRunner.Complete9StepLeveling();    					// print a part  					testRunner.AddItemToBedplate();    					var printer = testRunner.FirstPrinter();    					var currentSettings = printer.Settings;  					currentSettings.SetValue(SettingsKey.pause_gcode' "");  					currentSettings.SetValue(SettingsKey.resume_gcode' "");    					testRunner.StartPrint(pauseAtLayers: "2");    					testRunner.WaitForName("Yes Button"' 20); // the yes button is 'Resume'    					// the user types in the pause layer 1 based and we are 0 based' so we should be on: user 2' printer 1.  					Assert.AreEqual(1' printer.Connection.CurrentlyPrintingLayer);    					// assert the leveling is working  					Assert.AreEqual(11.25' emulator.Destination.Z);    					testRunner.CancelPrint();    					// now run leveling again and make sure we get the same result  					testRunner.SwitchToControlsTab();  					testRunner.ClickByName("Printer Calibration Button");    					testRunner.ClickByName("Print Leveling Row");    					testRunner.Complete9StepLeveling(2);    					testRunner.StartPrint(pauseAtLayers: "2");    					testRunner.WaitForName("Yes Button"' 20); // the yes button is 'Resume'    					// the user types in the pause layer 1 based and we are 0 based' so we should be on: user 2' printer 1.  					Assert.AreEqual(1' printer.Connection.CurrentlyPrintingLayer);  					// assert the leveling is working  					Assert.AreEqual(12.25' emulator.Destination.Z);    					testRunner.CancelPrint();    					// now modify the leveling data manually and assert that it is applied when printing  					testRunner.SwitchToControlsTab();    					testRunner.ClickByName("Printer Calibration Button");    					testRunner.ClickByName("Edit Leveling Data Button");  					for (int i = 0; i < 3; i++)  					{  						var name = $"z Position {i}";  						testRunner.ClickByName(name);  						testRunner.Type("^a"); // select all  						testRunner.Type("5");  					}    					testRunner.ClickByName("Save Leveling Button");    					testRunner.ClickByName("Cancel Wizard Button");    					testRunner.StartPrint(pauseAtLayers: "2");    					testRunner.WaitForName("Yes Button"' 20); // the yes button is 'Resume'    					// the user types in the pause layer 1 based and we are 0 based' so we should be on: user 2' printer 1.  					Assert.AreEqual(1' printer.Connection.CurrentlyPrintingLayer);    					// assert the leveling is working  					Assert.AreEqual(5.25' emulator.Destination.Z);  				}    				return Task.CompletedTask;  			}' maxTimeToRun: 130);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,PulseLevelingTest,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				AutomationRunner.TimeToMoveMouse = .2;  				testRunner.WaitForName("Cancel Wizard Button"' 1);    				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator("Pulse"' "A-134"))  				{  					Assert.AreEqual(1' ApplicationController.Instance.ActivePrinters.Count()' "One printer should be defined after add");    					testRunner.OpenPrintPopupMenu();    					testRunner.ClickByName("SetupPrinter");    					testRunner.Complete9StepLeveling();    					// print a part  					testRunner.AddItemToBedplate();    					var printer = testRunner.FirstPrinter();    					var currentSettings = printer.Settings;  					currentSettings.SetValue(SettingsKey.pause_gcode' "");  					currentSettings.SetValue(SettingsKey.resume_gcode' "");    					testRunner.StartPrint(pauseAtLayers: "2");    					testRunner.WaitForName("Yes Button"' 20); // the yes button is 'Resume'    					// the user types in the pause layer 1 based and we are 0 based' so we should be on: user 2' printer 1.  					Assert.AreEqual(1' printer.Connection.CurrentlyPrintingLayer);    					// assert the leveling is working  					Assert.AreEqual(11.25' emulator.Destination.Z);    					testRunner.CancelPrint();    					// now run leveling again and make sure we get the same result  					testRunner.SwitchToControlsTab();  					testRunner.ClickByName("Printer Calibration Button");    					testRunner.ClickByName("Print Leveling Row");    					testRunner.Complete9StepLeveling(2);    					testRunner.StartPrint(pauseAtLayers: "2");    					testRunner.WaitForName("Yes Button"' 20); // the yes button is 'Resume'    					// the user types in the pause layer 1 based and we are 0 based' so we should be on: user 2' printer 1.  					Assert.AreEqual(1' printer.Connection.CurrentlyPrintingLayer);  					// assert the leveling is working  					Assert.AreEqual(12.25' emulator.Destination.Z);    					testRunner.CancelPrint();    					// now modify the leveling data manually and assert that it is applied when printing  					testRunner.SwitchToControlsTab();    					testRunner.ClickByName("Printer Calibration Button");    					testRunner.ClickByName("Edit Leveling Data Button");  					for (int i = 0; i < 3; i++)  					{  						var name = $"z Position {i}";  						testRunner.ClickByName(name);  						testRunner.Type("^a"); // select all  						testRunner.Type("5");  					}    					testRunner.ClickByName("Save Leveling Button");    					testRunner.ClickByName("Cancel Wizard Button");    					testRunner.StartPrint(pauseAtLayers: "2");    					testRunner.WaitForName("Yes Button"' 20); // the yes button is 'Resume'    					// the user types in the pause layer 1 based and we are 0 based' so we should be on: user 2' printer 1.  					Assert.AreEqual(1' printer.Connection.CurrentlyPrintingLayer);    					// assert the leveling is working  					Assert.AreEqual(5.25' emulator.Destination.Z);  				}    				return Task.CompletedTask;  			}' maxTimeToRun: 130);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,PulseLevelingTest,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				AutomationRunner.TimeToMoveMouse = .2;  				testRunner.WaitForName("Cancel Wizard Button"' 1);    				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator("Pulse"' "A-134"))  				{  					Assert.AreEqual(1' ApplicationController.Instance.ActivePrinters.Count()' "One printer should be defined after add");    					testRunner.OpenPrintPopupMenu();    					testRunner.ClickByName("SetupPrinter");    					testRunner.Complete9StepLeveling();    					// print a part  					testRunner.AddItemToBedplate();    					var printer = testRunner.FirstPrinter();    					var currentSettings = printer.Settings;  					currentSettings.SetValue(SettingsKey.pause_gcode' "");  					currentSettings.SetValue(SettingsKey.resume_gcode' "");    					testRunner.StartPrint(pauseAtLayers: "2");    					testRunner.WaitForName("Yes Button"' 20); // the yes button is 'Resume'    					// the user types in the pause layer 1 based and we are 0 based' so we should be on: user 2' printer 1.  					Assert.AreEqual(1' printer.Connection.CurrentlyPrintingLayer);    					// assert the leveling is working  					Assert.AreEqual(11.25' emulator.Destination.Z);    					testRunner.CancelPrint();    					// now run leveling again and make sure we get the same result  					testRunner.SwitchToControlsTab();  					testRunner.ClickByName("Printer Calibration Button");    					testRunner.ClickByName("Print Leveling Row");    					testRunner.Complete9StepLeveling(2);    					testRunner.StartPrint(pauseAtLayers: "2");    					testRunner.WaitForName("Yes Button"' 20); // the yes button is 'Resume'    					// the user types in the pause layer 1 based and we are 0 based' so we should be on: user 2' printer 1.  					Assert.AreEqual(1' printer.Connection.CurrentlyPrintingLayer);  					// assert the leveling is working  					Assert.AreEqual(12.25' emulator.Destination.Z);    					testRunner.CancelPrint();    					// now modify the leveling data manually and assert that it is applied when printing  					testRunner.SwitchToControlsTab();    					testRunner.ClickByName("Printer Calibration Button");    					testRunner.ClickByName("Edit Leveling Data Button");  					for (int i = 0; i < 3; i++)  					{  						var name = $"z Position {i}";  						testRunner.ClickByName(name);  						testRunner.Type("^a"); // select all  						testRunner.Type("5");  					}    					testRunner.ClickByName("Save Leveling Button");    					testRunner.ClickByName("Cancel Wizard Button");    					testRunner.StartPrint(pauseAtLayers: "2");    					testRunner.WaitForName("Yes Button"' 20); // the yes button is 'Resume'    					// the user types in the pause layer 1 based and we are 0 based' so we should be on: user 2' printer 1.  					Assert.AreEqual(1' printer.Connection.CurrentlyPrintingLayer);    					// assert the leveling is working  					Assert.AreEqual(5.25' emulator.Destination.Z);  				}    				return Task.CompletedTask;  			}' maxTimeToRun: 130);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,PrinterRequestsResumeWorkingAsExpected,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					Assert.AreEqual(1' ApplicationController.Instance.ActivePrinters.Count()' "One printer should be defined after add");    					// print a part  					testRunner.AddItemToBedplate();    					testRunner.StartPrint(pauseAtLayers: "2;6");    					// turn on line error simulation  					emulator.SimulateLineErrors = true;    					// close the pause dialog pop-up (resume)  					testRunner.WaitForName("Yes Button"' 20); // the yes button is 'Resume'  					testRunner.ClickByName("Yes Button");    					// simulate board reboot  					emulator.SimulateReboot();    					// close the pause dialog pop-up (resume)  					testRunner.Delay(3);  					testRunner.WaitForName("Yes Button"' 20);  					testRunner.ClickByName("Yes Button");    					// Wait for done  					testRunner.WaitForPrintFinished(testRunner.FirstPrinter());  				}    				return Task.CompletedTask;  			}' maxTimeToRun: 90);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,PrinterRequestsResumeWorkingAsExpected,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					Assert.AreEqual(1' ApplicationController.Instance.ActivePrinters.Count()' "One printer should be defined after add");    					// print a part  					testRunner.AddItemToBedplate();    					testRunner.StartPrint(pauseAtLayers: "2;6");    					// turn on line error simulation  					emulator.SimulateLineErrors = true;    					// close the pause dialog pop-up (resume)  					testRunner.WaitForName("Yes Button"' 20); // the yes button is 'Resume'  					testRunner.ClickByName("Yes Button");    					// simulate board reboot  					emulator.SimulateReboot();    					// close the pause dialog pop-up (resume)  					testRunner.Delay(3);  					testRunner.WaitForName("Yes Button"' 20);  					testRunner.ClickByName("Yes Button");    					// Wait for done  					testRunner.WaitForPrintFinished(testRunner.FirstPrinter());  				}    				return Task.CompletedTask;  			}' maxTimeToRun: 90);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,PrinterRequestsResumeWorkingAsExpected,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					Assert.AreEqual(1' ApplicationController.Instance.ActivePrinters.Count()' "One printer should be defined after add");    					// print a part  					testRunner.AddItemToBedplate();    					testRunner.StartPrint(pauseAtLayers: "2;6");    					// turn on line error simulation  					emulator.SimulateLineErrors = true;    					// close the pause dialog pop-up (resume)  					testRunner.WaitForName("Yes Button"' 20); // the yes button is 'Resume'  					testRunner.ClickByName("Yes Button");    					// simulate board reboot  					emulator.SimulateReboot();    					// close the pause dialog pop-up (resume)  					testRunner.Delay(3);  					testRunner.WaitForName("Yes Button"' 20);  					testRunner.ClickByName("Yes Button");    					// Wait for done  					testRunner.WaitForPrintFinished(testRunner.FirstPrinter());  				}    				return Task.CompletedTask;  			}' maxTimeToRun: 90);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,PrinterRequestsResumeWorkingAsExpected,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					Assert.AreEqual(1' ApplicationController.Instance.ActivePrinters.Count()' "One printer should be defined after add");    					// print a part  					testRunner.AddItemToBedplate();    					testRunner.StartPrint(pauseAtLayers: "2;6");    					// turn on line error simulation  					emulator.SimulateLineErrors = true;    					// close the pause dialog pop-up (resume)  					testRunner.WaitForName("Yes Button"' 20); // the yes button is 'Resume'  					testRunner.ClickByName("Yes Button");    					// simulate board reboot  					emulator.SimulateReboot();    					// close the pause dialog pop-up (resume)  					testRunner.Delay(3);  					testRunner.WaitForName("Yes Button"' 20);  					testRunner.ClickByName("Yes Button");    					// Wait for done  					testRunner.WaitForPrintFinished(testRunner.FirstPrinter());  				}    				return Task.CompletedTask;  			}' maxTimeToRun: 90);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,PrinterRecoveryTest,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					Assert.AreEqual(1' ApplicationController.Instance.ActivePrinters.Count()' "One printer should exist after add");    					var printer = testRunner.FirstPrinter();  					printer.Settings.SetValue(SettingsKey.recover_is_enabled' "1");  					printer.Settings.SetValue(SettingsKey.has_hardware_leveling' "0");    					// TODO: Delay needed to work around timing issue in MatterHackers/MCCentral#2415  					testRunner.Delay(1);    					Assert.IsTrue(printer.Connection.RecoveryIsEnabled);    					// print a part  					testRunner.AddItemToBedplate();  					testRunner.StartPrint(pauseAtLayers: "2;4;6");    					// Wait for pause dialog  					testRunner.WaitForName("Yes Button"' 15); // the yes button is 'Resume'    					// validate the current layer  					Assert.AreEqual(1' printer.Connection.CurrentlyPrintingLayer);    					// Resume  					testRunner.ClickByName("Yes Button");    					// the printer is now paused  					// close the pause dialog pop-up do not resume  					ClickDialogButton(testRunner' printer' "No Button"' 3);    					// Disconnect  					testRunner.ClickByName("Disconnect from printer button");    					// Reconnect  					testRunner.WaitForName("Connect to printer button"' 10);  					testRunner.ClickByName("Connect to printer button");    					testRunner.WaitFor(() => printer.Connection.CommunicationState == CommunicationStates.Connected);    					// Assert that recovery happens  					Assert.IsTrue(PrintRecovery.RecoveryAvailable(printer)' "Recovery should be enabled after Disconnect while printing");    					// Recover the print  					ClickDialogButton(testRunner' printer' "Yes Button"' -1);    					// The first pause that we get after recovery should be layer 6.  					// wait for the pause and continue  					ClickDialogButton(testRunner' printer' "Yes Button"' 5);    					// Wait for done  					testRunner.WaitForPrintFinished(printer);  				}    				return Task.CompletedTask;  			}' maxTimeToRun: 180);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,PrinterRecoveryTest,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					Assert.AreEqual(1' ApplicationController.Instance.ActivePrinters.Count()' "One printer should exist after add");    					var printer = testRunner.FirstPrinter();  					printer.Settings.SetValue(SettingsKey.recover_is_enabled' "1");  					printer.Settings.SetValue(SettingsKey.has_hardware_leveling' "0");    					// TODO: Delay needed to work around timing issue in MatterHackers/MCCentral#2415  					testRunner.Delay(1);    					Assert.IsTrue(printer.Connection.RecoveryIsEnabled);    					// print a part  					testRunner.AddItemToBedplate();  					testRunner.StartPrint(pauseAtLayers: "2;4;6");    					// Wait for pause dialog  					testRunner.WaitForName("Yes Button"' 15); // the yes button is 'Resume'    					// validate the current layer  					Assert.AreEqual(1' printer.Connection.CurrentlyPrintingLayer);    					// Resume  					testRunner.ClickByName("Yes Button");    					// the printer is now paused  					// close the pause dialog pop-up do not resume  					ClickDialogButton(testRunner' printer' "No Button"' 3);    					// Disconnect  					testRunner.ClickByName("Disconnect from printer button");    					// Reconnect  					testRunner.WaitForName("Connect to printer button"' 10);  					testRunner.ClickByName("Connect to printer button");    					testRunner.WaitFor(() => printer.Connection.CommunicationState == CommunicationStates.Connected);    					// Assert that recovery happens  					Assert.IsTrue(PrintRecovery.RecoveryAvailable(printer)' "Recovery should be enabled after Disconnect while printing");    					// Recover the print  					ClickDialogButton(testRunner' printer' "Yes Button"' -1);    					// The first pause that we get after recovery should be layer 6.  					// wait for the pause and continue  					ClickDialogButton(testRunner' printer' "Yes Button"' 5);    					// Wait for done  					testRunner.WaitForPrintFinished(printer);  				}    				return Task.CompletedTask;  			}' maxTimeToRun: 180);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,PrinterRecoveryTest,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					Assert.AreEqual(1' ApplicationController.Instance.ActivePrinters.Count()' "One printer should exist after add");    					var printer = testRunner.FirstPrinter();  					printer.Settings.SetValue(SettingsKey.recover_is_enabled' "1");  					printer.Settings.SetValue(SettingsKey.has_hardware_leveling' "0");    					// TODO: Delay needed to work around timing issue in MatterHackers/MCCentral#2415  					testRunner.Delay(1);    					Assert.IsTrue(printer.Connection.RecoveryIsEnabled);    					// print a part  					testRunner.AddItemToBedplate();  					testRunner.StartPrint(pauseAtLayers: "2;4;6");    					// Wait for pause dialog  					testRunner.WaitForName("Yes Button"' 15); // the yes button is 'Resume'    					// validate the current layer  					Assert.AreEqual(1' printer.Connection.CurrentlyPrintingLayer);    					// Resume  					testRunner.ClickByName("Yes Button");    					// the printer is now paused  					// close the pause dialog pop-up do not resume  					ClickDialogButton(testRunner' printer' "No Button"' 3);    					// Disconnect  					testRunner.ClickByName("Disconnect from printer button");    					// Reconnect  					testRunner.WaitForName("Connect to printer button"' 10);  					testRunner.ClickByName("Connect to printer button");    					testRunner.WaitFor(() => printer.Connection.CommunicationState == CommunicationStates.Connected);    					// Assert that recovery happens  					Assert.IsTrue(PrintRecovery.RecoveryAvailable(printer)' "Recovery should be enabled after Disconnect while printing");    					// Recover the print  					ClickDialogButton(testRunner' printer' "Yes Button"' -1);    					// The first pause that we get after recovery should be layer 6.  					// wait for the pause and continue  					ClickDialogButton(testRunner' printer' "Yes Button"' 5);    					// Wait for done  					testRunner.WaitForPrintFinished(printer);  				}    				return Task.CompletedTask;  			}' maxTimeToRun: 180);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,PrinterRecoveryTest,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					Assert.AreEqual(1' ApplicationController.Instance.ActivePrinters.Count()' "One printer should exist after add");    					var printer = testRunner.FirstPrinter();  					printer.Settings.SetValue(SettingsKey.recover_is_enabled' "1");  					printer.Settings.SetValue(SettingsKey.has_hardware_leveling' "0");    					// TODO: Delay needed to work around timing issue in MatterHackers/MCCentral#2415  					testRunner.Delay(1);    					Assert.IsTrue(printer.Connection.RecoveryIsEnabled);    					// print a part  					testRunner.AddItemToBedplate();  					testRunner.StartPrint(pauseAtLayers: "2;4;6");    					// Wait for pause dialog  					testRunner.WaitForName("Yes Button"' 15); // the yes button is 'Resume'    					// validate the current layer  					Assert.AreEqual(1' printer.Connection.CurrentlyPrintingLayer);    					// Resume  					testRunner.ClickByName("Yes Button");    					// the printer is now paused  					// close the pause dialog pop-up do not resume  					ClickDialogButton(testRunner' printer' "No Button"' 3);    					// Disconnect  					testRunner.ClickByName("Disconnect from printer button");    					// Reconnect  					testRunner.WaitForName("Connect to printer button"' 10);  					testRunner.ClickByName("Connect to printer button");    					testRunner.WaitFor(() => printer.Connection.CommunicationState == CommunicationStates.Connected);    					// Assert that recovery happens  					Assert.IsTrue(PrintRecovery.RecoveryAvailable(printer)' "Recovery should be enabled after Disconnect while printing");    					// Recover the print  					ClickDialogButton(testRunner' printer' "Yes Button"' -1);    					// The first pause that we get after recovery should be layer 6.  					// wait for the pause and continue  					ClickDialogButton(testRunner' printer' "Yes Button"' 5);    					// Wait for done  					testRunner.WaitForPrintFinished(printer);  				}    				return Task.CompletedTask;  			}' maxTimeToRun: 180);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,PrinterRecoveryTest,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					Assert.AreEqual(1' ApplicationController.Instance.ActivePrinters.Count()' "One printer should exist after add");    					var printer = testRunner.FirstPrinter();  					printer.Settings.SetValue(SettingsKey.recover_is_enabled' "1");  					printer.Settings.SetValue(SettingsKey.has_hardware_leveling' "0");    					// TODO: Delay needed to work around timing issue in MatterHackers/MCCentral#2415  					testRunner.Delay(1);    					Assert.IsTrue(printer.Connection.RecoveryIsEnabled);    					// print a part  					testRunner.AddItemToBedplate();  					testRunner.StartPrint(pauseAtLayers: "2;4;6");    					// Wait for pause dialog  					testRunner.WaitForName("Yes Button"' 15); // the yes button is 'Resume'    					// validate the current layer  					Assert.AreEqual(1' printer.Connection.CurrentlyPrintingLayer);    					// Resume  					testRunner.ClickByName("Yes Button");    					// the printer is now paused  					// close the pause dialog pop-up do not resume  					ClickDialogButton(testRunner' printer' "No Button"' 3);    					// Disconnect  					testRunner.ClickByName("Disconnect from printer button");    					// Reconnect  					testRunner.WaitForName("Connect to printer button"' 10);  					testRunner.ClickByName("Connect to printer button");    					testRunner.WaitFor(() => printer.Connection.CommunicationState == CommunicationStates.Connected);    					// Assert that recovery happens  					Assert.IsTrue(PrintRecovery.RecoveryAvailable(printer)' "Recovery should be enabled after Disconnect while printing");    					// Recover the print  					ClickDialogButton(testRunner' printer' "Yes Button"' -1);    					// The first pause that we get after recovery should be layer 6.  					// wait for the pause and continue  					ClickDialogButton(testRunner' printer' "Yes Button"' 5);    					// Wait for done  					testRunner.WaitForPrintFinished(printer);  				}    				return Task.CompletedTask;  			}' maxTimeToRun: 180);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,ClickDialogButton,The following statement contains a magic number: testRunner.WaitForName(buttonName' 90);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,TuningAdjustmentsDefaultToOneAndPersists,The following statement contains a magic number: double targetExtrusionRate = 1.5;
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,TuningAdjustmentsDefaultToOneAndPersists,The following statement contains a magic number: double targetFeedRate = 2;
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,TuningAdjustmentsDefaultToOneAndPersists,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.WaitForName("Cancel Wizard Button");    				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					Assert.AreEqual(1' ApplicationController.Instance.ActivePrinters.Count()' "One printer should be defined after add");    					testRunner.AddItemToBedplate();    					testRunner.SwitchToControlsTab();    					var printer = testRunner.FirstPrinter();    					// Wait for printing to complete  					var printFinishedResetEvent = new AutoResetEvent(false);  					printer.Connection.PrintFinished += (s' e) =>  					{  						printFinishedResetEvent.Set();  					};    					testRunner.StartPrint();    					var container = testRunner.GetWidgetByName("ManualPrinterControls.ControlsContainer"' out _' 5);    					// Scroll the widget into view  					var scrollable = container.Parents<ManualPrinterControls>().First() as ScrollableWidget;  					var width = scrollable.Width;    					// Workaround needed to scroll to the bottom of the Controls panel  					// scrollable.ScrollPosition = new Vector2();  					scrollable.ScrollPosition = new Vector2(0' 30);    					// Workaround to force layout to fix problems with size of Tuning Widgets after setting ScrollPosition manually  					scrollable.Width = width - 1;  					scrollable.Width = width;    					// Tuning values should default to 1 when missing  					ConfirmExpectedSpeeds(testRunner' 1' 1' "Initial case");    					testRunner.Delay();  					testRunner.ClickByName("Extrusion Multiplier NumberEdit");  					testRunner.Type(targetExtrusionRate.ToString());    					testRunner.ClickByName("Feed Rate NumberEdit");  					testRunner.Type(targetFeedRate.ToString());    					// Force focus away from the feed rate field' causing an persisted update  					testRunner.ClickByName("Extrusion Multiplier NumberEdit");    					ConfirmExpectedSpeeds(testRunner' targetExtrusionRate' targetFeedRate' "After setting TextEdit values");    					// Wait for slicing to complete before setting target values  					testRunner.WaitFor(() => printer.Connection.DetailedPrintingState == DetailedPrintingState.Printing' 8);  					testRunner.Delay();    					ConfirmExpectedSpeeds(testRunner' targetExtrusionRate' targetFeedRate' "While printing");    					// Wait up to 60 seconds for the print to finish  					printFinishedResetEvent.WaitOne(60 * 1000);    					// Values should match entered values  					ConfirmExpectedSpeeds(testRunner' targetExtrusionRate' targetFeedRate' "After print finished");    					testRunner.WaitForPrintFinished(printer);    					// Restart the print  					testRunner.StartPrint();  					testRunner.Delay(2);    					// Values should match entered values  					ConfirmExpectedSpeeds(testRunner' targetExtrusionRate' targetFeedRate' "After print restarted");    					testRunner.CancelPrint();  					testRunner.Delay(1);    					// Values should match entered values  					ConfirmExpectedSpeeds(testRunner' targetExtrusionRate' targetFeedRate' "After canceled print");  				}    				return Task.CompletedTask;  			}' overrideHeight: 900' maxTimeToRun: 120);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,TuningAdjustmentsDefaultToOneAndPersists,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.WaitForName("Cancel Wizard Button");    				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					Assert.AreEqual(1' ApplicationController.Instance.ActivePrinters.Count()' "One printer should be defined after add");    					testRunner.AddItemToBedplate();    					testRunner.SwitchToControlsTab();    					var printer = testRunner.FirstPrinter();    					// Wait for printing to complete  					var printFinishedResetEvent = new AutoResetEvent(false);  					printer.Connection.PrintFinished += (s' e) =>  					{  						printFinishedResetEvent.Set();  					};    					testRunner.StartPrint();    					var container = testRunner.GetWidgetByName("ManualPrinterControls.ControlsContainer"' out _' 5);    					// Scroll the widget into view  					var scrollable = container.Parents<ManualPrinterControls>().First() as ScrollableWidget;  					var width = scrollable.Width;    					// Workaround needed to scroll to the bottom of the Controls panel  					// scrollable.ScrollPosition = new Vector2();  					scrollable.ScrollPosition = new Vector2(0' 30);    					// Workaround to force layout to fix problems with size of Tuning Widgets after setting ScrollPosition manually  					scrollable.Width = width - 1;  					scrollable.Width = width;    					// Tuning values should default to 1 when missing  					ConfirmExpectedSpeeds(testRunner' 1' 1' "Initial case");    					testRunner.Delay();  					testRunner.ClickByName("Extrusion Multiplier NumberEdit");  					testRunner.Type(targetExtrusionRate.ToString());    					testRunner.ClickByName("Feed Rate NumberEdit");  					testRunner.Type(targetFeedRate.ToString());    					// Force focus away from the feed rate field' causing an persisted update  					testRunner.ClickByName("Extrusion Multiplier NumberEdit");    					ConfirmExpectedSpeeds(testRunner' targetExtrusionRate' targetFeedRate' "After setting TextEdit values");    					// Wait for slicing to complete before setting target values  					testRunner.WaitFor(() => printer.Connection.DetailedPrintingState == DetailedPrintingState.Printing' 8);  					testRunner.Delay();    					ConfirmExpectedSpeeds(testRunner' targetExtrusionRate' targetFeedRate' "While printing");    					// Wait up to 60 seconds for the print to finish  					printFinishedResetEvent.WaitOne(60 * 1000);    					// Values should match entered values  					ConfirmExpectedSpeeds(testRunner' targetExtrusionRate' targetFeedRate' "After print finished");    					testRunner.WaitForPrintFinished(printer);    					// Restart the print  					testRunner.StartPrint();  					testRunner.Delay(2);    					// Values should match entered values  					ConfirmExpectedSpeeds(testRunner' targetExtrusionRate' targetFeedRate' "After print restarted");    					testRunner.CancelPrint();  					testRunner.Delay(1);    					// Values should match entered values  					ConfirmExpectedSpeeds(testRunner' targetExtrusionRate' targetFeedRate' "After canceled print");  				}    				return Task.CompletedTask;  			}' overrideHeight: 900' maxTimeToRun: 120);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,TuningAdjustmentsDefaultToOneAndPersists,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.WaitForName("Cancel Wizard Button");    				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					Assert.AreEqual(1' ApplicationController.Instance.ActivePrinters.Count()' "One printer should be defined after add");    					testRunner.AddItemToBedplate();    					testRunner.SwitchToControlsTab();    					var printer = testRunner.FirstPrinter();    					// Wait for printing to complete  					var printFinishedResetEvent = new AutoResetEvent(false);  					printer.Connection.PrintFinished += (s' e) =>  					{  						printFinishedResetEvent.Set();  					};    					testRunner.StartPrint();    					var container = testRunner.GetWidgetByName("ManualPrinterControls.ControlsContainer"' out _' 5);    					// Scroll the widget into view  					var scrollable = container.Parents<ManualPrinterControls>().First() as ScrollableWidget;  					var width = scrollable.Width;    					// Workaround needed to scroll to the bottom of the Controls panel  					// scrollable.ScrollPosition = new Vector2();  					scrollable.ScrollPosition = new Vector2(0' 30);    					// Workaround to force layout to fix problems with size of Tuning Widgets after setting ScrollPosition manually  					scrollable.Width = width - 1;  					scrollable.Width = width;    					// Tuning values should default to 1 when missing  					ConfirmExpectedSpeeds(testRunner' 1' 1' "Initial case");    					testRunner.Delay();  					testRunner.ClickByName("Extrusion Multiplier NumberEdit");  					testRunner.Type(targetExtrusionRate.ToString());    					testRunner.ClickByName("Feed Rate NumberEdit");  					testRunner.Type(targetFeedRate.ToString());    					// Force focus away from the feed rate field' causing an persisted update  					testRunner.ClickByName("Extrusion Multiplier NumberEdit");    					ConfirmExpectedSpeeds(testRunner' targetExtrusionRate' targetFeedRate' "After setting TextEdit values");    					// Wait for slicing to complete before setting target values  					testRunner.WaitFor(() => printer.Connection.DetailedPrintingState == DetailedPrintingState.Printing' 8);  					testRunner.Delay();    					ConfirmExpectedSpeeds(testRunner' targetExtrusionRate' targetFeedRate' "While printing");    					// Wait up to 60 seconds for the print to finish  					printFinishedResetEvent.WaitOne(60 * 1000);    					// Values should match entered values  					ConfirmExpectedSpeeds(testRunner' targetExtrusionRate' targetFeedRate' "After print finished");    					testRunner.WaitForPrintFinished(printer);    					// Restart the print  					testRunner.StartPrint();  					testRunner.Delay(2);    					// Values should match entered values  					ConfirmExpectedSpeeds(testRunner' targetExtrusionRate' targetFeedRate' "After print restarted");    					testRunner.CancelPrint();  					testRunner.Delay(1);    					// Values should match entered values  					ConfirmExpectedSpeeds(testRunner' targetExtrusionRate' targetFeedRate' "After canceled print");  				}    				return Task.CompletedTask;  			}' overrideHeight: 900' maxTimeToRun: 120);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,TuningAdjustmentsDefaultToOneAndPersists,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.WaitForName("Cancel Wizard Button");    				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					Assert.AreEqual(1' ApplicationController.Instance.ActivePrinters.Count()' "One printer should be defined after add");    					testRunner.AddItemToBedplate();    					testRunner.SwitchToControlsTab();    					var printer = testRunner.FirstPrinter();    					// Wait for printing to complete  					var printFinishedResetEvent = new AutoResetEvent(false);  					printer.Connection.PrintFinished += (s' e) =>  					{  						printFinishedResetEvent.Set();  					};    					testRunner.StartPrint();    					var container = testRunner.GetWidgetByName("ManualPrinterControls.ControlsContainer"' out _' 5);    					// Scroll the widget into view  					var scrollable = container.Parents<ManualPrinterControls>().First() as ScrollableWidget;  					var width = scrollable.Width;    					// Workaround needed to scroll to the bottom of the Controls panel  					// scrollable.ScrollPosition = new Vector2();  					scrollable.ScrollPosition = new Vector2(0' 30);    					// Workaround to force layout to fix problems with size of Tuning Widgets after setting ScrollPosition manually  					scrollable.Width = width - 1;  					scrollable.Width = width;    					// Tuning values should default to 1 when missing  					ConfirmExpectedSpeeds(testRunner' 1' 1' "Initial case");    					testRunner.Delay();  					testRunner.ClickByName("Extrusion Multiplier NumberEdit");  					testRunner.Type(targetExtrusionRate.ToString());    					testRunner.ClickByName("Feed Rate NumberEdit");  					testRunner.Type(targetFeedRate.ToString());    					// Force focus away from the feed rate field' causing an persisted update  					testRunner.ClickByName("Extrusion Multiplier NumberEdit");    					ConfirmExpectedSpeeds(testRunner' targetExtrusionRate' targetFeedRate' "After setting TextEdit values");    					// Wait for slicing to complete before setting target values  					testRunner.WaitFor(() => printer.Connection.DetailedPrintingState == DetailedPrintingState.Printing' 8);  					testRunner.Delay();    					ConfirmExpectedSpeeds(testRunner' targetExtrusionRate' targetFeedRate' "While printing");    					// Wait up to 60 seconds for the print to finish  					printFinishedResetEvent.WaitOne(60 * 1000);    					// Values should match entered values  					ConfirmExpectedSpeeds(testRunner' targetExtrusionRate' targetFeedRate' "After print finished");    					testRunner.WaitForPrintFinished(printer);    					// Restart the print  					testRunner.StartPrint();  					testRunner.Delay(2);    					// Values should match entered values  					ConfirmExpectedSpeeds(testRunner' targetExtrusionRate' targetFeedRate' "After print restarted");    					testRunner.CancelPrint();  					testRunner.Delay(1);    					// Values should match entered values  					ConfirmExpectedSpeeds(testRunner' targetExtrusionRate' targetFeedRate' "After canceled print");  				}    				return Task.CompletedTask;  			}' overrideHeight: 900' maxTimeToRun: 120);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,TuningAdjustmentsDefaultToOneAndPersists,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.WaitForName("Cancel Wizard Button");    				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					Assert.AreEqual(1' ApplicationController.Instance.ActivePrinters.Count()' "One printer should be defined after add");    					testRunner.AddItemToBedplate();    					testRunner.SwitchToControlsTab();    					var printer = testRunner.FirstPrinter();    					// Wait for printing to complete  					var printFinishedResetEvent = new AutoResetEvent(false);  					printer.Connection.PrintFinished += (s' e) =>  					{  						printFinishedResetEvent.Set();  					};    					testRunner.StartPrint();    					var container = testRunner.GetWidgetByName("ManualPrinterControls.ControlsContainer"' out _' 5);    					// Scroll the widget into view  					var scrollable = container.Parents<ManualPrinterControls>().First() as ScrollableWidget;  					var width = scrollable.Width;    					// Workaround needed to scroll to the bottom of the Controls panel  					// scrollable.ScrollPosition = new Vector2();  					scrollable.ScrollPosition = new Vector2(0' 30);    					// Workaround to force layout to fix problems with size of Tuning Widgets after setting ScrollPosition manually  					scrollable.Width = width - 1;  					scrollable.Width = width;    					// Tuning values should default to 1 when missing  					ConfirmExpectedSpeeds(testRunner' 1' 1' "Initial case");    					testRunner.Delay();  					testRunner.ClickByName("Extrusion Multiplier NumberEdit");  					testRunner.Type(targetExtrusionRate.ToString());    					testRunner.ClickByName("Feed Rate NumberEdit");  					testRunner.Type(targetFeedRate.ToString());    					// Force focus away from the feed rate field' causing an persisted update  					testRunner.ClickByName("Extrusion Multiplier NumberEdit");    					ConfirmExpectedSpeeds(testRunner' targetExtrusionRate' targetFeedRate' "After setting TextEdit values");    					// Wait for slicing to complete before setting target values  					testRunner.WaitFor(() => printer.Connection.DetailedPrintingState == DetailedPrintingState.Printing' 8);  					testRunner.Delay();    					ConfirmExpectedSpeeds(testRunner' targetExtrusionRate' targetFeedRate' "While printing");    					// Wait up to 60 seconds for the print to finish  					printFinishedResetEvent.WaitOne(60 * 1000);    					// Values should match entered values  					ConfirmExpectedSpeeds(testRunner' targetExtrusionRate' targetFeedRate' "After print finished");    					testRunner.WaitForPrintFinished(printer);    					// Restart the print  					testRunner.StartPrint();  					testRunner.Delay(2);    					// Values should match entered values  					ConfirmExpectedSpeeds(testRunner' targetExtrusionRate' targetFeedRate' "After print restarted");    					testRunner.CancelPrint();  					testRunner.Delay(1);    					// Values should match entered values  					ConfirmExpectedSpeeds(testRunner' targetExtrusionRate' targetFeedRate' "After canceled print");  				}    				return Task.CompletedTask;  			}' overrideHeight: 900' maxTimeToRun: 120);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,TuningAdjustmentsDefaultToOneAndPersists,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.WaitForName("Cancel Wizard Button");    				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					Assert.AreEqual(1' ApplicationController.Instance.ActivePrinters.Count()' "One printer should be defined after add");    					testRunner.AddItemToBedplate();    					testRunner.SwitchToControlsTab();    					var printer = testRunner.FirstPrinter();    					// Wait for printing to complete  					var printFinishedResetEvent = new AutoResetEvent(false);  					printer.Connection.PrintFinished += (s' e) =>  					{  						printFinishedResetEvent.Set();  					};    					testRunner.StartPrint();    					var container = testRunner.GetWidgetByName("ManualPrinterControls.ControlsContainer"' out _' 5);    					// Scroll the widget into view  					var scrollable = container.Parents<ManualPrinterControls>().First() as ScrollableWidget;  					var width = scrollable.Width;    					// Workaround needed to scroll to the bottom of the Controls panel  					// scrollable.ScrollPosition = new Vector2();  					scrollable.ScrollPosition = new Vector2(0' 30);    					// Workaround to force layout to fix problems with size of Tuning Widgets after setting ScrollPosition manually  					scrollable.Width = width - 1;  					scrollable.Width = width;    					// Tuning values should default to 1 when missing  					ConfirmExpectedSpeeds(testRunner' 1' 1' "Initial case");    					testRunner.Delay();  					testRunner.ClickByName("Extrusion Multiplier NumberEdit");  					testRunner.Type(targetExtrusionRate.ToString());    					testRunner.ClickByName("Feed Rate NumberEdit");  					testRunner.Type(targetFeedRate.ToString());    					// Force focus away from the feed rate field' causing an persisted update  					testRunner.ClickByName("Extrusion Multiplier NumberEdit");    					ConfirmExpectedSpeeds(testRunner' targetExtrusionRate' targetFeedRate' "After setting TextEdit values");    					// Wait for slicing to complete before setting target values  					testRunner.WaitFor(() => printer.Connection.DetailedPrintingState == DetailedPrintingState.Printing' 8);  					testRunner.Delay();    					ConfirmExpectedSpeeds(testRunner' targetExtrusionRate' targetFeedRate' "While printing");    					// Wait up to 60 seconds for the print to finish  					printFinishedResetEvent.WaitOne(60 * 1000);    					// Values should match entered values  					ConfirmExpectedSpeeds(testRunner' targetExtrusionRate' targetFeedRate' "After print finished");    					testRunner.WaitForPrintFinished(printer);    					// Restart the print  					testRunner.StartPrint();  					testRunner.Delay(2);    					// Values should match entered values  					ConfirmExpectedSpeeds(testRunner' targetExtrusionRate' targetFeedRate' "After print restarted");    					testRunner.CancelPrint();  					testRunner.Delay(1);    					// Values should match entered values  					ConfirmExpectedSpeeds(testRunner' targetExtrusionRate' targetFeedRate' "After canceled print");  				}    				return Task.CompletedTask;  			}' overrideHeight: 900' maxTimeToRun: 120);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,TuningAdjustmentsDefaultToOneAndPersists,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.WaitForName("Cancel Wizard Button");    				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					Assert.AreEqual(1' ApplicationController.Instance.ActivePrinters.Count()' "One printer should be defined after add");    					testRunner.AddItemToBedplate();    					testRunner.SwitchToControlsTab();    					var printer = testRunner.FirstPrinter();    					// Wait for printing to complete  					var printFinishedResetEvent = new AutoResetEvent(false);  					printer.Connection.PrintFinished += (s' e) =>  					{  						printFinishedResetEvent.Set();  					};    					testRunner.StartPrint();    					var container = testRunner.GetWidgetByName("ManualPrinterControls.ControlsContainer"' out _' 5);    					// Scroll the widget into view  					var scrollable = container.Parents<ManualPrinterControls>().First() as ScrollableWidget;  					var width = scrollable.Width;    					// Workaround needed to scroll to the bottom of the Controls panel  					// scrollable.ScrollPosition = new Vector2();  					scrollable.ScrollPosition = new Vector2(0' 30);    					// Workaround to force layout to fix problems with size of Tuning Widgets after setting ScrollPosition manually  					scrollable.Width = width - 1;  					scrollable.Width = width;    					// Tuning values should default to 1 when missing  					ConfirmExpectedSpeeds(testRunner' 1' 1' "Initial case");    					testRunner.Delay();  					testRunner.ClickByName("Extrusion Multiplier NumberEdit");  					testRunner.Type(targetExtrusionRate.ToString());    					testRunner.ClickByName("Feed Rate NumberEdit");  					testRunner.Type(targetFeedRate.ToString());    					// Force focus away from the feed rate field' causing an persisted update  					testRunner.ClickByName("Extrusion Multiplier NumberEdit");    					ConfirmExpectedSpeeds(testRunner' targetExtrusionRate' targetFeedRate' "After setting TextEdit values");    					// Wait for slicing to complete before setting target values  					testRunner.WaitFor(() => printer.Connection.DetailedPrintingState == DetailedPrintingState.Printing' 8);  					testRunner.Delay();    					ConfirmExpectedSpeeds(testRunner' targetExtrusionRate' targetFeedRate' "While printing");    					// Wait up to 60 seconds for the print to finish  					printFinishedResetEvent.WaitOne(60 * 1000);    					// Values should match entered values  					ConfirmExpectedSpeeds(testRunner' targetExtrusionRate' targetFeedRate' "After print finished");    					testRunner.WaitForPrintFinished(printer);    					// Restart the print  					testRunner.StartPrint();  					testRunner.Delay(2);    					// Values should match entered values  					ConfirmExpectedSpeeds(testRunner' targetExtrusionRate' targetFeedRate' "After print restarted");    					testRunner.CancelPrint();  					testRunner.Delay(1);    					// Values should match entered values  					ConfirmExpectedSpeeds(testRunner' targetExtrusionRate' targetFeedRate' "After canceled print");  				}    				return Task.CompletedTask;  			}' overrideHeight: 900' maxTimeToRun: 120);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,TuningAdjustmentsDefaultToOneAndPersists,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.WaitForName("Cancel Wizard Button");    				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					Assert.AreEqual(1' ApplicationController.Instance.ActivePrinters.Count()' "One printer should be defined after add");    					testRunner.AddItemToBedplate();    					testRunner.SwitchToControlsTab();    					var printer = testRunner.FirstPrinter();    					// Wait for printing to complete  					var printFinishedResetEvent = new AutoResetEvent(false);  					printer.Connection.PrintFinished += (s' e) =>  					{  						printFinishedResetEvent.Set();  					};    					testRunner.StartPrint();    					var container = testRunner.GetWidgetByName("ManualPrinterControls.ControlsContainer"' out _' 5);    					// Scroll the widget into view  					var scrollable = container.Parents<ManualPrinterControls>().First() as ScrollableWidget;  					var width = scrollable.Width;    					// Workaround needed to scroll to the bottom of the Controls panel  					// scrollable.ScrollPosition = new Vector2();  					scrollable.ScrollPosition = new Vector2(0' 30);    					// Workaround to force layout to fix problems with size of Tuning Widgets after setting ScrollPosition manually  					scrollable.Width = width - 1;  					scrollable.Width = width;    					// Tuning values should default to 1 when missing  					ConfirmExpectedSpeeds(testRunner' 1' 1' "Initial case");    					testRunner.Delay();  					testRunner.ClickByName("Extrusion Multiplier NumberEdit");  					testRunner.Type(targetExtrusionRate.ToString());    					testRunner.ClickByName("Feed Rate NumberEdit");  					testRunner.Type(targetFeedRate.ToString());    					// Force focus away from the feed rate field' causing an persisted update  					testRunner.ClickByName("Extrusion Multiplier NumberEdit");    					ConfirmExpectedSpeeds(testRunner' targetExtrusionRate' targetFeedRate' "After setting TextEdit values");    					// Wait for slicing to complete before setting target values  					testRunner.WaitFor(() => printer.Connection.DetailedPrintingState == DetailedPrintingState.Printing' 8);  					testRunner.Delay();    					ConfirmExpectedSpeeds(testRunner' targetExtrusionRate' targetFeedRate' "While printing");    					// Wait up to 60 seconds for the print to finish  					printFinishedResetEvent.WaitOne(60 * 1000);    					// Values should match entered values  					ConfirmExpectedSpeeds(testRunner' targetExtrusionRate' targetFeedRate' "After print finished");    					testRunner.WaitForPrintFinished(printer);    					// Restart the print  					testRunner.StartPrint();  					testRunner.Delay(2);    					// Values should match entered values  					ConfirmExpectedSpeeds(testRunner' targetExtrusionRate' targetFeedRate' "After print restarted");    					testRunner.CancelPrint();  					testRunner.Delay(1);    					// Values should match entered values  					ConfirmExpectedSpeeds(testRunner' targetExtrusionRate' targetFeedRate' "After canceled print");  				}    				return Task.CompletedTask;  			}' overrideHeight: 900' maxTimeToRun: 120);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,TuningAdjustmentControlsBoundToStreamValues,The following statement contains a magic number: double targetExtrusionRate = 1.5;
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,TuningAdjustmentControlsBoundToStreamValues,The following statement contains a magic number: double targetFeedRate = 2;
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,TuningAdjustmentControlsBoundToStreamValues,The following statement contains a magic number: double initialExtrusionRate = 0.6;
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,TuningAdjustmentControlsBoundToStreamValues,The following statement contains a magic number: double initialFeedRate = 0.7;
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,TuningAdjustmentControlsBoundToStreamValues,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.WaitForName("Cancel Wizard Button");    				// Set custom adjustment values  				FeedRateMultiplierStream.FeedRateRatio = initialFeedRate;  				ExtrusionMultiplierStream.ExtrusionRatio = initialExtrusionRate;    				// Then validate that they are picked up  				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					Assert.AreEqual(1' ApplicationController.Instance.ActivePrinters.Count()' "One printer should be defined after add");    					testRunner.AddItemToBedplate();    					testRunner.SwitchToControlsTab();    					var printer = testRunner.FirstPrinter();    					var printFinishedResetEvent = new AutoResetEvent(false);  					printer.Connection.PrintFinished += (s' e) => printFinishedResetEvent.Set();    					testRunner.StartPrint();    					var container = testRunner.GetWidgetByName("ManualPrinterControls.ControlsContainer"' out _' 5);    					// Scroll the widget into view  					var scrollable = container.Parents<ManualPrinterControls>().FirstOrDefault() as ScrollableWidget;  					var width = scrollable.Width;    					// Workaround needed to scroll to the bottom of the Controls panel  					// scrollable.ScrollPosition = new Vector2();  					scrollable.ScrollPosition = new Vector2(0' 30);    					// Workaround to force layout to fix problems with size of Tuning Widgets after setting ScrollPosition manually  					scrollable.Width = width - 1;  					scrollable.Width = width;    					// Tuning values should match  					ConfirmExpectedSpeeds(testRunner' initialExtrusionRate' initialFeedRate' "Initial case");    					testRunner.Delay();  					testRunner.ClickByName("Extrusion Multiplier NumberEdit");  					testRunner.Type(targetExtrusionRate.ToString());    					testRunner.ClickByName("Feed Rate NumberEdit");  					testRunner.Type(targetFeedRate.ToString());    					// Force focus away from the feed rate field' causing an persisted update  					testRunner.ClickByName("Extrusion Multiplier NumberEdit");    					ConfirmExpectedSpeeds(testRunner' targetExtrusionRate' targetFeedRate' "After setting TextEdit values");    					// Wait for slicing to complete before setting target values  					testRunner.WaitFor(() => printer.Connection.DetailedPrintingState == DetailedPrintingState.Printing' 8);  					testRunner.Delay();    					// Values should remain after print completes  					ConfirmExpectedSpeeds(testRunner' targetExtrusionRate' targetFeedRate' "While printing");    					// Wait for printing to complete  					printFinishedResetEvent.WaitOne();    					testRunner.WaitForPrintFinished(printer);    					// Values should match entered values  					testRunner.StartPrint();  					testRunner.WaitFor(() => printer.Connection.CommunicationState == CommunicationStates.Printing' 15);    					// Values should match entered values  					ConfirmExpectedSpeeds(testRunner' targetExtrusionRate' targetFeedRate' "While reprinting");    					testRunner.CancelPrint();  					testRunner.WaitFor(() => printer.Connection.CommunicationState == CommunicationStates.Connected' 15);    					// Values should match entered values  					ConfirmExpectedSpeeds(testRunner' targetExtrusionRate' targetFeedRate' "After cancel");  				}    				return Task.CompletedTask;  			}' overrideHeight: 900' maxTimeToRun: 120);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,TuningAdjustmentControlsBoundToStreamValues,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.WaitForName("Cancel Wizard Button");    				// Set custom adjustment values  				FeedRateMultiplierStream.FeedRateRatio = initialFeedRate;  				ExtrusionMultiplierStream.ExtrusionRatio = initialExtrusionRate;    				// Then validate that they are picked up  				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					Assert.AreEqual(1' ApplicationController.Instance.ActivePrinters.Count()' "One printer should be defined after add");    					testRunner.AddItemToBedplate();    					testRunner.SwitchToControlsTab();    					var printer = testRunner.FirstPrinter();    					var printFinishedResetEvent = new AutoResetEvent(false);  					printer.Connection.PrintFinished += (s' e) => printFinishedResetEvent.Set();    					testRunner.StartPrint();    					var container = testRunner.GetWidgetByName("ManualPrinterControls.ControlsContainer"' out _' 5);    					// Scroll the widget into view  					var scrollable = container.Parents<ManualPrinterControls>().FirstOrDefault() as ScrollableWidget;  					var width = scrollable.Width;    					// Workaround needed to scroll to the bottom of the Controls panel  					// scrollable.ScrollPosition = new Vector2();  					scrollable.ScrollPosition = new Vector2(0' 30);    					// Workaround to force layout to fix problems with size of Tuning Widgets after setting ScrollPosition manually  					scrollable.Width = width - 1;  					scrollable.Width = width;    					// Tuning values should match  					ConfirmExpectedSpeeds(testRunner' initialExtrusionRate' initialFeedRate' "Initial case");    					testRunner.Delay();  					testRunner.ClickByName("Extrusion Multiplier NumberEdit");  					testRunner.Type(targetExtrusionRate.ToString());    					testRunner.ClickByName("Feed Rate NumberEdit");  					testRunner.Type(targetFeedRate.ToString());    					// Force focus away from the feed rate field' causing an persisted update  					testRunner.ClickByName("Extrusion Multiplier NumberEdit");    					ConfirmExpectedSpeeds(testRunner' targetExtrusionRate' targetFeedRate' "After setting TextEdit values");    					// Wait for slicing to complete before setting target values  					testRunner.WaitFor(() => printer.Connection.DetailedPrintingState == DetailedPrintingState.Printing' 8);  					testRunner.Delay();    					// Values should remain after print completes  					ConfirmExpectedSpeeds(testRunner' targetExtrusionRate' targetFeedRate' "While printing");    					// Wait for printing to complete  					printFinishedResetEvent.WaitOne();    					testRunner.WaitForPrintFinished(printer);    					// Values should match entered values  					testRunner.StartPrint();  					testRunner.WaitFor(() => printer.Connection.CommunicationState == CommunicationStates.Printing' 15);    					// Values should match entered values  					ConfirmExpectedSpeeds(testRunner' targetExtrusionRate' targetFeedRate' "While reprinting");    					testRunner.CancelPrint();  					testRunner.WaitFor(() => printer.Connection.CommunicationState == CommunicationStates.Connected' 15);    					// Values should match entered values  					ConfirmExpectedSpeeds(testRunner' targetExtrusionRate' targetFeedRate' "After cancel");  				}    				return Task.CompletedTask;  			}' overrideHeight: 900' maxTimeToRun: 120);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,TuningAdjustmentControlsBoundToStreamValues,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.WaitForName("Cancel Wizard Button");    				// Set custom adjustment values  				FeedRateMultiplierStream.FeedRateRatio = initialFeedRate;  				ExtrusionMultiplierStream.ExtrusionRatio = initialExtrusionRate;    				// Then validate that they are picked up  				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					Assert.AreEqual(1' ApplicationController.Instance.ActivePrinters.Count()' "One printer should be defined after add");    					testRunner.AddItemToBedplate();    					testRunner.SwitchToControlsTab();    					var printer = testRunner.FirstPrinter();    					var printFinishedResetEvent = new AutoResetEvent(false);  					printer.Connection.PrintFinished += (s' e) => printFinishedResetEvent.Set();    					testRunner.StartPrint();    					var container = testRunner.GetWidgetByName("ManualPrinterControls.ControlsContainer"' out _' 5);    					// Scroll the widget into view  					var scrollable = container.Parents<ManualPrinterControls>().FirstOrDefault() as ScrollableWidget;  					var width = scrollable.Width;    					// Workaround needed to scroll to the bottom of the Controls panel  					// scrollable.ScrollPosition = new Vector2();  					scrollable.ScrollPosition = new Vector2(0' 30);    					// Workaround to force layout to fix problems with size of Tuning Widgets after setting ScrollPosition manually  					scrollable.Width = width - 1;  					scrollable.Width = width;    					// Tuning values should match  					ConfirmExpectedSpeeds(testRunner' initialExtrusionRate' initialFeedRate' "Initial case");    					testRunner.Delay();  					testRunner.ClickByName("Extrusion Multiplier NumberEdit");  					testRunner.Type(targetExtrusionRate.ToString());    					testRunner.ClickByName("Feed Rate NumberEdit");  					testRunner.Type(targetFeedRate.ToString());    					// Force focus away from the feed rate field' causing an persisted update  					testRunner.ClickByName("Extrusion Multiplier NumberEdit");    					ConfirmExpectedSpeeds(testRunner' targetExtrusionRate' targetFeedRate' "After setting TextEdit values");    					// Wait for slicing to complete before setting target values  					testRunner.WaitFor(() => printer.Connection.DetailedPrintingState == DetailedPrintingState.Printing' 8);  					testRunner.Delay();    					// Values should remain after print completes  					ConfirmExpectedSpeeds(testRunner' targetExtrusionRate' targetFeedRate' "While printing");    					// Wait for printing to complete  					printFinishedResetEvent.WaitOne();    					testRunner.WaitForPrintFinished(printer);    					// Values should match entered values  					testRunner.StartPrint();  					testRunner.WaitFor(() => printer.Connection.CommunicationState == CommunicationStates.Printing' 15);    					// Values should match entered values  					ConfirmExpectedSpeeds(testRunner' targetExtrusionRate' targetFeedRate' "While reprinting");    					testRunner.CancelPrint();  					testRunner.WaitFor(() => printer.Connection.CommunicationState == CommunicationStates.Connected' 15);    					// Values should match entered values  					ConfirmExpectedSpeeds(testRunner' targetExtrusionRate' targetFeedRate' "After cancel");  				}    				return Task.CompletedTask;  			}' overrideHeight: 900' maxTimeToRun: 120);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,TuningAdjustmentControlsBoundToStreamValues,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.WaitForName("Cancel Wizard Button");    				// Set custom adjustment values  				FeedRateMultiplierStream.FeedRateRatio = initialFeedRate;  				ExtrusionMultiplierStream.ExtrusionRatio = initialExtrusionRate;    				// Then validate that they are picked up  				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					Assert.AreEqual(1' ApplicationController.Instance.ActivePrinters.Count()' "One printer should be defined after add");    					testRunner.AddItemToBedplate();    					testRunner.SwitchToControlsTab();    					var printer = testRunner.FirstPrinter();    					var printFinishedResetEvent = new AutoResetEvent(false);  					printer.Connection.PrintFinished += (s' e) => printFinishedResetEvent.Set();    					testRunner.StartPrint();    					var container = testRunner.GetWidgetByName("ManualPrinterControls.ControlsContainer"' out _' 5);    					// Scroll the widget into view  					var scrollable = container.Parents<ManualPrinterControls>().FirstOrDefault() as ScrollableWidget;  					var width = scrollable.Width;    					// Workaround needed to scroll to the bottom of the Controls panel  					// scrollable.ScrollPosition = new Vector2();  					scrollable.ScrollPosition = new Vector2(0' 30);    					// Workaround to force layout to fix problems with size of Tuning Widgets after setting ScrollPosition manually  					scrollable.Width = width - 1;  					scrollable.Width = width;    					// Tuning values should match  					ConfirmExpectedSpeeds(testRunner' initialExtrusionRate' initialFeedRate' "Initial case");    					testRunner.Delay();  					testRunner.ClickByName("Extrusion Multiplier NumberEdit");  					testRunner.Type(targetExtrusionRate.ToString());    					testRunner.ClickByName("Feed Rate NumberEdit");  					testRunner.Type(targetFeedRate.ToString());    					// Force focus away from the feed rate field' causing an persisted update  					testRunner.ClickByName("Extrusion Multiplier NumberEdit");    					ConfirmExpectedSpeeds(testRunner' targetExtrusionRate' targetFeedRate' "After setting TextEdit values");    					// Wait for slicing to complete before setting target values  					testRunner.WaitFor(() => printer.Connection.DetailedPrintingState == DetailedPrintingState.Printing' 8);  					testRunner.Delay();    					// Values should remain after print completes  					ConfirmExpectedSpeeds(testRunner' targetExtrusionRate' targetFeedRate' "While printing");    					// Wait for printing to complete  					printFinishedResetEvent.WaitOne();    					testRunner.WaitForPrintFinished(printer);    					// Values should match entered values  					testRunner.StartPrint();  					testRunner.WaitFor(() => printer.Connection.CommunicationState == CommunicationStates.Printing' 15);    					// Values should match entered values  					ConfirmExpectedSpeeds(testRunner' targetExtrusionRate' targetFeedRate' "While reprinting");    					testRunner.CancelPrint();  					testRunner.WaitFor(() => printer.Connection.CommunicationState == CommunicationStates.Connected' 15);    					// Values should match entered values  					ConfirmExpectedSpeeds(testRunner' targetExtrusionRate' targetFeedRate' "After cancel");  				}    				return Task.CompletedTask;  			}' overrideHeight: 900' maxTimeToRun: 120);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,TuningAdjustmentControlsBoundToStreamValues,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.WaitForName("Cancel Wizard Button");    				// Set custom adjustment values  				FeedRateMultiplierStream.FeedRateRatio = initialFeedRate;  				ExtrusionMultiplierStream.ExtrusionRatio = initialExtrusionRate;    				// Then validate that they are picked up  				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					Assert.AreEqual(1' ApplicationController.Instance.ActivePrinters.Count()' "One printer should be defined after add");    					testRunner.AddItemToBedplate();    					testRunner.SwitchToControlsTab();    					var printer = testRunner.FirstPrinter();    					var printFinishedResetEvent = new AutoResetEvent(false);  					printer.Connection.PrintFinished += (s' e) => printFinishedResetEvent.Set();    					testRunner.StartPrint();    					var container = testRunner.GetWidgetByName("ManualPrinterControls.ControlsContainer"' out _' 5);    					// Scroll the widget into view  					var scrollable = container.Parents<ManualPrinterControls>().FirstOrDefault() as ScrollableWidget;  					var width = scrollable.Width;    					// Workaround needed to scroll to the bottom of the Controls panel  					// scrollable.ScrollPosition = new Vector2();  					scrollable.ScrollPosition = new Vector2(0' 30);    					// Workaround to force layout to fix problems with size of Tuning Widgets after setting ScrollPosition manually  					scrollable.Width = width - 1;  					scrollable.Width = width;    					// Tuning values should match  					ConfirmExpectedSpeeds(testRunner' initialExtrusionRate' initialFeedRate' "Initial case");    					testRunner.Delay();  					testRunner.ClickByName("Extrusion Multiplier NumberEdit");  					testRunner.Type(targetExtrusionRate.ToString());    					testRunner.ClickByName("Feed Rate NumberEdit");  					testRunner.Type(targetFeedRate.ToString());    					// Force focus away from the feed rate field' causing an persisted update  					testRunner.ClickByName("Extrusion Multiplier NumberEdit");    					ConfirmExpectedSpeeds(testRunner' targetExtrusionRate' targetFeedRate' "After setting TextEdit values");    					// Wait for slicing to complete before setting target values  					testRunner.WaitFor(() => printer.Connection.DetailedPrintingState == DetailedPrintingState.Printing' 8);  					testRunner.Delay();    					// Values should remain after print completes  					ConfirmExpectedSpeeds(testRunner' targetExtrusionRate' targetFeedRate' "While printing");    					// Wait for printing to complete  					printFinishedResetEvent.WaitOne();    					testRunner.WaitForPrintFinished(printer);    					// Values should match entered values  					testRunner.StartPrint();  					testRunner.WaitFor(() => printer.Connection.CommunicationState == CommunicationStates.Printing' 15);    					// Values should match entered values  					ConfirmExpectedSpeeds(testRunner' targetExtrusionRate' targetFeedRate' "While reprinting");    					testRunner.CancelPrint();  					testRunner.WaitFor(() => printer.Connection.CommunicationState == CommunicationStates.Connected' 15);    					// Values should match entered values  					ConfirmExpectedSpeeds(testRunner' targetExtrusionRate' targetFeedRate' "After cancel");  				}    				return Task.CompletedTask;  			}' overrideHeight: 900' maxTimeToRun: 120);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,TuningAdjustmentControlsBoundToStreamValues,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.WaitForName("Cancel Wizard Button");    				// Set custom adjustment values  				FeedRateMultiplierStream.FeedRateRatio = initialFeedRate;  				ExtrusionMultiplierStream.ExtrusionRatio = initialExtrusionRate;    				// Then validate that they are picked up  				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					Assert.AreEqual(1' ApplicationController.Instance.ActivePrinters.Count()' "One printer should be defined after add");    					testRunner.AddItemToBedplate();    					testRunner.SwitchToControlsTab();    					var printer = testRunner.FirstPrinter();    					var printFinishedResetEvent = new AutoResetEvent(false);  					printer.Connection.PrintFinished += (s' e) => printFinishedResetEvent.Set();    					testRunner.StartPrint();    					var container = testRunner.GetWidgetByName("ManualPrinterControls.ControlsContainer"' out _' 5);    					// Scroll the widget into view  					var scrollable = container.Parents<ManualPrinterControls>().FirstOrDefault() as ScrollableWidget;  					var width = scrollable.Width;    					// Workaround needed to scroll to the bottom of the Controls panel  					// scrollable.ScrollPosition = new Vector2();  					scrollable.ScrollPosition = new Vector2(0' 30);    					// Workaround to force layout to fix problems with size of Tuning Widgets after setting ScrollPosition manually  					scrollable.Width = width - 1;  					scrollable.Width = width;    					// Tuning values should match  					ConfirmExpectedSpeeds(testRunner' initialExtrusionRate' initialFeedRate' "Initial case");    					testRunner.Delay();  					testRunner.ClickByName("Extrusion Multiplier NumberEdit");  					testRunner.Type(targetExtrusionRate.ToString());    					testRunner.ClickByName("Feed Rate NumberEdit");  					testRunner.Type(targetFeedRate.ToString());    					// Force focus away from the feed rate field' causing an persisted update  					testRunner.ClickByName("Extrusion Multiplier NumberEdit");    					ConfirmExpectedSpeeds(testRunner' targetExtrusionRate' targetFeedRate' "After setting TextEdit values");    					// Wait for slicing to complete before setting target values  					testRunner.WaitFor(() => printer.Connection.DetailedPrintingState == DetailedPrintingState.Printing' 8);  					testRunner.Delay();    					// Values should remain after print completes  					ConfirmExpectedSpeeds(testRunner' targetExtrusionRate' targetFeedRate' "While printing");    					// Wait for printing to complete  					printFinishedResetEvent.WaitOne();    					testRunner.WaitForPrintFinished(printer);    					// Values should match entered values  					testRunner.StartPrint();  					testRunner.WaitFor(() => printer.Connection.CommunicationState == CommunicationStates.Printing' 15);    					// Values should match entered values  					ConfirmExpectedSpeeds(testRunner' targetExtrusionRate' targetFeedRate' "While reprinting");    					testRunner.CancelPrint();  					testRunner.WaitFor(() => printer.Connection.CommunicationState == CommunicationStates.Connected' 15);    					// Values should match entered values  					ConfirmExpectedSpeeds(testRunner' targetExtrusionRate' targetFeedRate' "After cancel");  				}    				return Task.CompletedTask;  			}' overrideHeight: 900' maxTimeToRun: 120);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,TuningAdjustmentControlsBoundToStreamValues,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.WaitForName("Cancel Wizard Button");    				// Set custom adjustment values  				FeedRateMultiplierStream.FeedRateRatio = initialFeedRate;  				ExtrusionMultiplierStream.ExtrusionRatio = initialExtrusionRate;    				// Then validate that they are picked up  				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					Assert.AreEqual(1' ApplicationController.Instance.ActivePrinters.Count()' "One printer should be defined after add");    					testRunner.AddItemToBedplate();    					testRunner.SwitchToControlsTab();    					var printer = testRunner.FirstPrinter();    					var printFinishedResetEvent = new AutoResetEvent(false);  					printer.Connection.PrintFinished += (s' e) => printFinishedResetEvent.Set();    					testRunner.StartPrint();    					var container = testRunner.GetWidgetByName("ManualPrinterControls.ControlsContainer"' out _' 5);    					// Scroll the widget into view  					var scrollable = container.Parents<ManualPrinterControls>().FirstOrDefault() as ScrollableWidget;  					var width = scrollable.Width;    					// Workaround needed to scroll to the bottom of the Controls panel  					// scrollable.ScrollPosition = new Vector2();  					scrollable.ScrollPosition = new Vector2(0' 30);    					// Workaround to force layout to fix problems with size of Tuning Widgets after setting ScrollPosition manually  					scrollable.Width = width - 1;  					scrollable.Width = width;    					// Tuning values should match  					ConfirmExpectedSpeeds(testRunner' initialExtrusionRate' initialFeedRate' "Initial case");    					testRunner.Delay();  					testRunner.ClickByName("Extrusion Multiplier NumberEdit");  					testRunner.Type(targetExtrusionRate.ToString());    					testRunner.ClickByName("Feed Rate NumberEdit");  					testRunner.Type(targetFeedRate.ToString());    					// Force focus away from the feed rate field' causing an persisted update  					testRunner.ClickByName("Extrusion Multiplier NumberEdit");    					ConfirmExpectedSpeeds(testRunner' targetExtrusionRate' targetFeedRate' "After setting TextEdit values");    					// Wait for slicing to complete before setting target values  					testRunner.WaitFor(() => printer.Connection.DetailedPrintingState == DetailedPrintingState.Printing' 8);  					testRunner.Delay();    					// Values should remain after print completes  					ConfirmExpectedSpeeds(testRunner' targetExtrusionRate' targetFeedRate' "While printing");    					// Wait for printing to complete  					printFinishedResetEvent.WaitOne();    					testRunner.WaitForPrintFinished(printer);    					// Values should match entered values  					testRunner.StartPrint();  					testRunner.WaitFor(() => printer.Connection.CommunicationState == CommunicationStates.Printing' 15);    					// Values should match entered values  					ConfirmExpectedSpeeds(testRunner' targetExtrusionRate' targetFeedRate' "While reprinting");    					testRunner.CancelPrint();  					testRunner.WaitFor(() => printer.Connection.CommunicationState == CommunicationStates.Connected' 15);    					// Values should match entered values  					ConfirmExpectedSpeeds(testRunner' targetExtrusionRate' targetFeedRate' "After cancel");  				}    				return Task.CompletedTask;  			}' overrideHeight: 900' maxTimeToRun: 120);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,CloseShouldNotStopSDPrint,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.WaitForName("Cancel Wizard Button");    				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator(runSlow: true))  				{  					testRunner.NavigateToFolder("SD Card Row Item Collection");    					testRunner.ClickByName("Row Item Item 1.gcode");    					testRunner.ClickByName("Print Library Overflow Menu");  					testRunner.ClickByName("Print Menu Item");    					testRunner.Delay(2);    					int tempChangedCount = 0;  					int fanChangedCount = 0;  					emulator.ExtruderTemperatureChanged += (s' e) =>  					{  						tempChangedCount++;  					};  					emulator.FanSpeedChanged += (s' e) =>  					{  						fanChangedCount++;  					};    					testRunner.CloseMatterControl();    					testRunner.ClickByName("Yes Button");    					testRunner.Delay(2);  					Assert.AreEqual(0' tempChangedCount' "We should not change this while exiting an sd card print.");  					Assert.AreEqual(0' fanChangedCount' "We should not change this while exiting an sd card print.");  				}    				return Task.CompletedTask;  			}' maxTimeToRun: 90);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,CloseShouldNotStopSDPrint,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.WaitForName("Cancel Wizard Button");    				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator(runSlow: true))  				{  					testRunner.NavigateToFolder("SD Card Row Item Collection");    					testRunner.ClickByName("Row Item Item 1.gcode");    					testRunner.ClickByName("Print Library Overflow Menu");  					testRunner.ClickByName("Print Menu Item");    					testRunner.Delay(2);    					int tempChangedCount = 0;  					int fanChangedCount = 0;  					emulator.ExtruderTemperatureChanged += (s' e) =>  					{  						tempChangedCount++;  					};  					emulator.FanSpeedChanged += (s' e) =>  					{  						fanChangedCount++;  					};    					testRunner.CloseMatterControl();    					testRunner.ClickByName("Yes Button");    					testRunner.Delay(2);  					Assert.AreEqual(0' tempChangedCount' "We should not change this while exiting an sd card print.");  					Assert.AreEqual(0' fanChangedCount' "We should not change this while exiting an sd card print.");  				}    				return Task.CompletedTask;  			}' maxTimeToRun: 90);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,CloseShouldNotStopSDPrint,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.WaitForName("Cancel Wizard Button");    				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator(runSlow: true))  				{  					testRunner.NavigateToFolder("SD Card Row Item Collection");    					testRunner.ClickByName("Row Item Item 1.gcode");    					testRunner.ClickByName("Print Library Overflow Menu");  					testRunner.ClickByName("Print Menu Item");    					testRunner.Delay(2);    					int tempChangedCount = 0;  					int fanChangedCount = 0;  					emulator.ExtruderTemperatureChanged += (s' e) =>  					{  						tempChangedCount++;  					};  					emulator.FanSpeedChanged += (s' e) =>  					{  						fanChangedCount++;  					};    					testRunner.CloseMatterControl();    					testRunner.ClickByName("Yes Button");    					testRunner.Delay(2);  					Assert.AreEqual(0' tempChangedCount' "We should not change this while exiting an sd card print.");  					Assert.AreEqual(0' fanChangedCount' "We should not change this while exiting an sd card print.");  				}    				return Task.CompletedTask;  			}' maxTimeToRun: 90);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,CancelingPrintTurnsHeatAndFanOff,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.WaitForName("Cancel Wizard Button");    				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					var resetEvent = new AutoResetEvent(false);    					Assert.AreEqual(1' ApplicationController.Instance.ActivePrinters.Count()' "One printer should exist after add");    					testRunner.AddItemToBedplate();    					testRunner.StartPrint();    					int fanChangedCount = 0;  					emulator.FanSpeedChanged += (s' e) =>  					{  						fanChangedCount++;  					};    					var printer = testRunner.FirstPrinter();    					emulator.WaitForLayer(printer.Settings' 2);  					emulator.RunSlow = true;    					// Click close but cancel  					testRunner.CloseMatterControl();  					testRunner.ClickByName("No Button");    					// Wait for close  					testRunner.WaitForWidgetDisappear("Yes Button"' 4);  					testRunner.Delay(2);    					// Confirm abort  					Assert.IsFalse(AppContext.RootSystemWindow.HasBeenClosed' "Canceling Close dialog should *not* close MatterControl");    					// Close MatterControl and cancel print  					testRunner.CloseMatterControl();  					testRunner.ClickByName("Yes Button");    					// Wait for Disconnected CommunicationState which occurs after PrinterConnection.Disable()  					testRunner.WaitForCommunicationStateDisconnected(printer' maxSeconds: 30);    					// Wait for close  					testRunner.WaitForWidgetDisappear("Yes Button"' 4);  					testRunner.Delay(2);    					// Confirm close  					Assert.IsTrue(AppContext.RootSystemWindow.HasBeenClosed' "Confirming Close dialog *should* close MatterControl");    					// Wait for M106 change  					testRunner.WaitFor(() => fanChangedCount > 0' 15' 500);    					// Assert expected temp targets and fan transitions  					Assert.AreEqual(0' (int) emulator.CurrentExtruder.TargetTemperature' "Unexpected target temperature - MC close should call Connection.Disable->TurnOffBedAndExtruders to shutdown heaters");  					Assert.AreEqual(0' (int) emulator.HeatedBed.TargetTemperature' "Unexpected target temperature - MC close should call Connection.Disable->TurnOffBedAndExtruders to shutdown heaters");  					Assert.AreEqual(1' fanChangedCount' "Unexpected fan speed change count - MC close should call Connection.Disable which shuts down fans via M106");  				}    				return Task.CompletedTask;  			}' overrideHeight: 900' maxTimeToRun: 90);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,CancelingPrintTurnsHeatAndFanOff,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.WaitForName("Cancel Wizard Button");    				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					var resetEvent = new AutoResetEvent(false);    					Assert.AreEqual(1' ApplicationController.Instance.ActivePrinters.Count()' "One printer should exist after add");    					testRunner.AddItemToBedplate();    					testRunner.StartPrint();    					int fanChangedCount = 0;  					emulator.FanSpeedChanged += (s' e) =>  					{  						fanChangedCount++;  					};    					var printer = testRunner.FirstPrinter();    					emulator.WaitForLayer(printer.Settings' 2);  					emulator.RunSlow = true;    					// Click close but cancel  					testRunner.CloseMatterControl();  					testRunner.ClickByName("No Button");    					// Wait for close  					testRunner.WaitForWidgetDisappear("Yes Button"' 4);  					testRunner.Delay(2);    					// Confirm abort  					Assert.IsFalse(AppContext.RootSystemWindow.HasBeenClosed' "Canceling Close dialog should *not* close MatterControl");    					// Close MatterControl and cancel print  					testRunner.CloseMatterControl();  					testRunner.ClickByName("Yes Button");    					// Wait for Disconnected CommunicationState which occurs after PrinterConnection.Disable()  					testRunner.WaitForCommunicationStateDisconnected(printer' maxSeconds: 30);    					// Wait for close  					testRunner.WaitForWidgetDisappear("Yes Button"' 4);  					testRunner.Delay(2);    					// Confirm close  					Assert.IsTrue(AppContext.RootSystemWindow.HasBeenClosed' "Confirming Close dialog *should* close MatterControl");    					// Wait for M106 change  					testRunner.WaitFor(() => fanChangedCount > 0' 15' 500);    					// Assert expected temp targets and fan transitions  					Assert.AreEqual(0' (int) emulator.CurrentExtruder.TargetTemperature' "Unexpected target temperature - MC close should call Connection.Disable->TurnOffBedAndExtruders to shutdown heaters");  					Assert.AreEqual(0' (int) emulator.HeatedBed.TargetTemperature' "Unexpected target temperature - MC close should call Connection.Disable->TurnOffBedAndExtruders to shutdown heaters");  					Assert.AreEqual(1' fanChangedCount' "Unexpected fan speed change count - MC close should call Connection.Disable which shuts down fans via M106");  				}    				return Task.CompletedTask;  			}' overrideHeight: 900' maxTimeToRun: 90);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,CancelingPrintTurnsHeatAndFanOff,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.WaitForName("Cancel Wizard Button");    				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					var resetEvent = new AutoResetEvent(false);    					Assert.AreEqual(1' ApplicationController.Instance.ActivePrinters.Count()' "One printer should exist after add");    					testRunner.AddItemToBedplate();    					testRunner.StartPrint();    					int fanChangedCount = 0;  					emulator.FanSpeedChanged += (s' e) =>  					{  						fanChangedCount++;  					};    					var printer = testRunner.FirstPrinter();    					emulator.WaitForLayer(printer.Settings' 2);  					emulator.RunSlow = true;    					// Click close but cancel  					testRunner.CloseMatterControl();  					testRunner.ClickByName("No Button");    					// Wait for close  					testRunner.WaitForWidgetDisappear("Yes Button"' 4);  					testRunner.Delay(2);    					// Confirm abort  					Assert.IsFalse(AppContext.RootSystemWindow.HasBeenClosed' "Canceling Close dialog should *not* close MatterControl");    					// Close MatterControl and cancel print  					testRunner.CloseMatterControl();  					testRunner.ClickByName("Yes Button");    					// Wait for Disconnected CommunicationState which occurs after PrinterConnection.Disable()  					testRunner.WaitForCommunicationStateDisconnected(printer' maxSeconds: 30);    					// Wait for close  					testRunner.WaitForWidgetDisappear("Yes Button"' 4);  					testRunner.Delay(2);    					// Confirm close  					Assert.IsTrue(AppContext.RootSystemWindow.HasBeenClosed' "Confirming Close dialog *should* close MatterControl");    					// Wait for M106 change  					testRunner.WaitFor(() => fanChangedCount > 0' 15' 500);    					// Assert expected temp targets and fan transitions  					Assert.AreEqual(0' (int) emulator.CurrentExtruder.TargetTemperature' "Unexpected target temperature - MC close should call Connection.Disable->TurnOffBedAndExtruders to shutdown heaters");  					Assert.AreEqual(0' (int) emulator.HeatedBed.TargetTemperature' "Unexpected target temperature - MC close should call Connection.Disable->TurnOffBedAndExtruders to shutdown heaters");  					Assert.AreEqual(1' fanChangedCount' "Unexpected fan speed change count - MC close should call Connection.Disable which shuts down fans via M106");  				}    				return Task.CompletedTask;  			}' overrideHeight: 900' maxTimeToRun: 90);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,CancelingPrintTurnsHeatAndFanOff,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.WaitForName("Cancel Wizard Button");    				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					var resetEvent = new AutoResetEvent(false);    					Assert.AreEqual(1' ApplicationController.Instance.ActivePrinters.Count()' "One printer should exist after add");    					testRunner.AddItemToBedplate();    					testRunner.StartPrint();    					int fanChangedCount = 0;  					emulator.FanSpeedChanged += (s' e) =>  					{  						fanChangedCount++;  					};    					var printer = testRunner.FirstPrinter();    					emulator.WaitForLayer(printer.Settings' 2);  					emulator.RunSlow = true;    					// Click close but cancel  					testRunner.CloseMatterControl();  					testRunner.ClickByName("No Button");    					// Wait for close  					testRunner.WaitForWidgetDisappear("Yes Button"' 4);  					testRunner.Delay(2);    					// Confirm abort  					Assert.IsFalse(AppContext.RootSystemWindow.HasBeenClosed' "Canceling Close dialog should *not* close MatterControl");    					// Close MatterControl and cancel print  					testRunner.CloseMatterControl();  					testRunner.ClickByName("Yes Button");    					// Wait for Disconnected CommunicationState which occurs after PrinterConnection.Disable()  					testRunner.WaitForCommunicationStateDisconnected(printer' maxSeconds: 30);    					// Wait for close  					testRunner.WaitForWidgetDisappear("Yes Button"' 4);  					testRunner.Delay(2);    					// Confirm close  					Assert.IsTrue(AppContext.RootSystemWindow.HasBeenClosed' "Confirming Close dialog *should* close MatterControl");    					// Wait for M106 change  					testRunner.WaitFor(() => fanChangedCount > 0' 15' 500);    					// Assert expected temp targets and fan transitions  					Assert.AreEqual(0' (int) emulator.CurrentExtruder.TargetTemperature' "Unexpected target temperature - MC close should call Connection.Disable->TurnOffBedAndExtruders to shutdown heaters");  					Assert.AreEqual(0' (int) emulator.HeatedBed.TargetTemperature' "Unexpected target temperature - MC close should call Connection.Disable->TurnOffBedAndExtruders to shutdown heaters");  					Assert.AreEqual(1' fanChangedCount' "Unexpected fan speed change count - MC close should call Connection.Disable which shuts down fans via M106");  				}    				return Task.CompletedTask;  			}' overrideHeight: 900' maxTimeToRun: 90);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,CancelingPrintTurnsHeatAndFanOff,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.WaitForName("Cancel Wizard Button");    				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					var resetEvent = new AutoResetEvent(false);    					Assert.AreEqual(1' ApplicationController.Instance.ActivePrinters.Count()' "One printer should exist after add");    					testRunner.AddItemToBedplate();    					testRunner.StartPrint();    					int fanChangedCount = 0;  					emulator.FanSpeedChanged += (s' e) =>  					{  						fanChangedCount++;  					};    					var printer = testRunner.FirstPrinter();    					emulator.WaitForLayer(printer.Settings' 2);  					emulator.RunSlow = true;    					// Click close but cancel  					testRunner.CloseMatterControl();  					testRunner.ClickByName("No Button");    					// Wait for close  					testRunner.WaitForWidgetDisappear("Yes Button"' 4);  					testRunner.Delay(2);    					// Confirm abort  					Assert.IsFalse(AppContext.RootSystemWindow.HasBeenClosed' "Canceling Close dialog should *not* close MatterControl");    					// Close MatterControl and cancel print  					testRunner.CloseMatterControl();  					testRunner.ClickByName("Yes Button");    					// Wait for Disconnected CommunicationState which occurs after PrinterConnection.Disable()  					testRunner.WaitForCommunicationStateDisconnected(printer' maxSeconds: 30);    					// Wait for close  					testRunner.WaitForWidgetDisappear("Yes Button"' 4);  					testRunner.Delay(2);    					// Confirm close  					Assert.IsTrue(AppContext.RootSystemWindow.HasBeenClosed' "Confirming Close dialog *should* close MatterControl");    					// Wait for M106 change  					testRunner.WaitFor(() => fanChangedCount > 0' 15' 500);    					// Assert expected temp targets and fan transitions  					Assert.AreEqual(0' (int) emulator.CurrentExtruder.TargetTemperature' "Unexpected target temperature - MC close should call Connection.Disable->TurnOffBedAndExtruders to shutdown heaters");  					Assert.AreEqual(0' (int) emulator.HeatedBed.TargetTemperature' "Unexpected target temperature - MC close should call Connection.Disable->TurnOffBedAndExtruders to shutdown heaters");  					Assert.AreEqual(1' fanChangedCount' "Unexpected fan speed change count - MC close should call Connection.Disable which shuts down fans via M106");  				}    				return Task.CompletedTask;  			}' overrideHeight: 900' maxTimeToRun: 90);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,CancelingPrintTurnsHeatAndFanOff,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.WaitForName("Cancel Wizard Button");    				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					var resetEvent = new AutoResetEvent(false);    					Assert.AreEqual(1' ApplicationController.Instance.ActivePrinters.Count()' "One printer should exist after add");    					testRunner.AddItemToBedplate();    					testRunner.StartPrint();    					int fanChangedCount = 0;  					emulator.FanSpeedChanged += (s' e) =>  					{  						fanChangedCount++;  					};    					var printer = testRunner.FirstPrinter();    					emulator.WaitForLayer(printer.Settings' 2);  					emulator.RunSlow = true;    					// Click close but cancel  					testRunner.CloseMatterControl();  					testRunner.ClickByName("No Button");    					// Wait for close  					testRunner.WaitForWidgetDisappear("Yes Button"' 4);  					testRunner.Delay(2);    					// Confirm abort  					Assert.IsFalse(AppContext.RootSystemWindow.HasBeenClosed' "Canceling Close dialog should *not* close MatterControl");    					// Close MatterControl and cancel print  					testRunner.CloseMatterControl();  					testRunner.ClickByName("Yes Button");    					// Wait for Disconnected CommunicationState which occurs after PrinterConnection.Disable()  					testRunner.WaitForCommunicationStateDisconnected(printer' maxSeconds: 30);    					// Wait for close  					testRunner.WaitForWidgetDisappear("Yes Button"' 4);  					testRunner.Delay(2);    					// Confirm close  					Assert.IsTrue(AppContext.RootSystemWindow.HasBeenClosed' "Confirming Close dialog *should* close MatterControl");    					// Wait for M106 change  					testRunner.WaitFor(() => fanChangedCount > 0' 15' 500);    					// Assert expected temp targets and fan transitions  					Assert.AreEqual(0' (int) emulator.CurrentExtruder.TargetTemperature' "Unexpected target temperature - MC close should call Connection.Disable->TurnOffBedAndExtruders to shutdown heaters");  					Assert.AreEqual(0' (int) emulator.HeatedBed.TargetTemperature' "Unexpected target temperature - MC close should call Connection.Disable->TurnOffBedAndExtruders to shutdown heaters");  					Assert.AreEqual(1' fanChangedCount' "Unexpected fan speed change count - MC close should call Connection.Disable which shuts down fans via M106");  				}    				return Task.CompletedTask;  			}' overrideHeight: 900' maxTimeToRun: 90);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,CancelingPrintTurnsHeatAndFanOff,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.WaitForName("Cancel Wizard Button");    				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					var resetEvent = new AutoResetEvent(false);    					Assert.AreEqual(1' ApplicationController.Instance.ActivePrinters.Count()' "One printer should exist after add");    					testRunner.AddItemToBedplate();    					testRunner.StartPrint();    					int fanChangedCount = 0;  					emulator.FanSpeedChanged += (s' e) =>  					{  						fanChangedCount++;  					};    					var printer = testRunner.FirstPrinter();    					emulator.WaitForLayer(printer.Settings' 2);  					emulator.RunSlow = true;    					// Click close but cancel  					testRunner.CloseMatterControl();  					testRunner.ClickByName("No Button");    					// Wait for close  					testRunner.WaitForWidgetDisappear("Yes Button"' 4);  					testRunner.Delay(2);    					// Confirm abort  					Assert.IsFalse(AppContext.RootSystemWindow.HasBeenClosed' "Canceling Close dialog should *not* close MatterControl");    					// Close MatterControl and cancel print  					testRunner.CloseMatterControl();  					testRunner.ClickByName("Yes Button");    					// Wait for Disconnected CommunicationState which occurs after PrinterConnection.Disable()  					testRunner.WaitForCommunicationStateDisconnected(printer' maxSeconds: 30);    					// Wait for close  					testRunner.WaitForWidgetDisappear("Yes Button"' 4);  					testRunner.Delay(2);    					// Confirm close  					Assert.IsTrue(AppContext.RootSystemWindow.HasBeenClosed' "Confirming Close dialog *should* close MatterControl");    					// Wait for M106 change  					testRunner.WaitFor(() => fanChangedCount > 0' 15' 500);    					// Assert expected temp targets and fan transitions  					Assert.AreEqual(0' (int) emulator.CurrentExtruder.TargetTemperature' "Unexpected target temperature - MC close should call Connection.Disable->TurnOffBedAndExtruders to shutdown heaters");  					Assert.AreEqual(0' (int) emulator.HeatedBed.TargetTemperature' "Unexpected target temperature - MC close should call Connection.Disable->TurnOffBedAndExtruders to shutdown heaters");  					Assert.AreEqual(1' fanChangedCount' "Unexpected fan speed change count - MC close should call Connection.Disable which shuts down fans via M106");  				}    				return Task.CompletedTask;  			}' overrideHeight: 900' maxTimeToRun: 90);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,CancelingPrintTurnsHeatAndFanOff,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.WaitForName("Cancel Wizard Button");    				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					var resetEvent = new AutoResetEvent(false);    					Assert.AreEqual(1' ApplicationController.Instance.ActivePrinters.Count()' "One printer should exist after add");    					testRunner.AddItemToBedplate();    					testRunner.StartPrint();    					int fanChangedCount = 0;  					emulator.FanSpeedChanged += (s' e) =>  					{  						fanChangedCount++;  					};    					var printer = testRunner.FirstPrinter();    					emulator.WaitForLayer(printer.Settings' 2);  					emulator.RunSlow = true;    					// Click close but cancel  					testRunner.CloseMatterControl();  					testRunner.ClickByName("No Button");    					// Wait for close  					testRunner.WaitForWidgetDisappear("Yes Button"' 4);  					testRunner.Delay(2);    					// Confirm abort  					Assert.IsFalse(AppContext.RootSystemWindow.HasBeenClosed' "Canceling Close dialog should *not* close MatterControl");    					// Close MatterControl and cancel print  					testRunner.CloseMatterControl();  					testRunner.ClickByName("Yes Button");    					// Wait for Disconnected CommunicationState which occurs after PrinterConnection.Disable()  					testRunner.WaitForCommunicationStateDisconnected(printer' maxSeconds: 30);    					// Wait for close  					testRunner.WaitForWidgetDisappear("Yes Button"' 4);  					testRunner.Delay(2);    					// Confirm close  					Assert.IsTrue(AppContext.RootSystemWindow.HasBeenClosed' "Confirming Close dialog *should* close MatterControl");    					// Wait for M106 change  					testRunner.WaitFor(() => fanChangedCount > 0' 15' 500);    					// Assert expected temp targets and fan transitions  					Assert.AreEqual(0' (int) emulator.CurrentExtruder.TargetTemperature' "Unexpected target temperature - MC close should call Connection.Disable->TurnOffBedAndExtruders to shutdown heaters");  					Assert.AreEqual(0' (int) emulator.HeatedBed.TargetTemperature' "Unexpected target temperature - MC close should call Connection.Disable->TurnOffBedAndExtruders to shutdown heaters");  					Assert.AreEqual(1' fanChangedCount' "Unexpected fan speed change count - MC close should call Connection.Disable which shuts down fans via M106");  				}    				return Task.CompletedTask;  			}' overrideHeight: 900' maxTimeToRun: 90);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,CancelingPrintTurnsHeatAndFanOff,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.WaitForName("Cancel Wizard Button");    				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					var resetEvent = new AutoResetEvent(false);    					Assert.AreEqual(1' ApplicationController.Instance.ActivePrinters.Count()' "One printer should exist after add");    					testRunner.AddItemToBedplate();    					testRunner.StartPrint();    					int fanChangedCount = 0;  					emulator.FanSpeedChanged += (s' e) =>  					{  						fanChangedCount++;  					};    					var printer = testRunner.FirstPrinter();    					emulator.WaitForLayer(printer.Settings' 2);  					emulator.RunSlow = true;    					// Click close but cancel  					testRunner.CloseMatterControl();  					testRunner.ClickByName("No Button");    					// Wait for close  					testRunner.WaitForWidgetDisappear("Yes Button"' 4);  					testRunner.Delay(2);    					// Confirm abort  					Assert.IsFalse(AppContext.RootSystemWindow.HasBeenClosed' "Canceling Close dialog should *not* close MatterControl");    					// Close MatterControl and cancel print  					testRunner.CloseMatterControl();  					testRunner.ClickByName("Yes Button");    					// Wait for Disconnected CommunicationState which occurs after PrinterConnection.Disable()  					testRunner.WaitForCommunicationStateDisconnected(printer' maxSeconds: 30);    					// Wait for close  					testRunner.WaitForWidgetDisappear("Yes Button"' 4);  					testRunner.Delay(2);    					// Confirm close  					Assert.IsTrue(AppContext.RootSystemWindow.HasBeenClosed' "Confirming Close dialog *should* close MatterControl");    					// Wait for M106 change  					testRunner.WaitFor(() => fanChangedCount > 0' 15' 500);    					// Assert expected temp targets and fan transitions  					Assert.AreEqual(0' (int) emulator.CurrentExtruder.TargetTemperature' "Unexpected target temperature - MC close should call Connection.Disable->TurnOffBedAndExtruders to shutdown heaters");  					Assert.AreEqual(0' (int) emulator.HeatedBed.TargetTemperature' "Unexpected target temperature - MC close should call Connection.Disable->TurnOffBedAndExtruders to shutdown heaters");  					Assert.AreEqual(1' fanChangedCount' "Unexpected fan speed change count - MC close should call Connection.Disable which shuts down fans via M106");  				}    				return Task.CompletedTask;  			}' overrideHeight: 900' maxTimeToRun: 90);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,CancelingPrintTurnsHeatAndFanOff,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.WaitForName("Cancel Wizard Button");    				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					var resetEvent = new AutoResetEvent(false);    					Assert.AreEqual(1' ApplicationController.Instance.ActivePrinters.Count()' "One printer should exist after add");    					testRunner.AddItemToBedplate();    					testRunner.StartPrint();    					int fanChangedCount = 0;  					emulator.FanSpeedChanged += (s' e) =>  					{  						fanChangedCount++;  					};    					var printer = testRunner.FirstPrinter();    					emulator.WaitForLayer(printer.Settings' 2);  					emulator.RunSlow = true;    					// Click close but cancel  					testRunner.CloseMatterControl();  					testRunner.ClickByName("No Button");    					// Wait for close  					testRunner.WaitForWidgetDisappear("Yes Button"' 4);  					testRunner.Delay(2);    					// Confirm abort  					Assert.IsFalse(AppContext.RootSystemWindow.HasBeenClosed' "Canceling Close dialog should *not* close MatterControl");    					// Close MatterControl and cancel print  					testRunner.CloseMatterControl();  					testRunner.ClickByName("Yes Button");    					// Wait for Disconnected CommunicationState which occurs after PrinterConnection.Disable()  					testRunner.WaitForCommunicationStateDisconnected(printer' maxSeconds: 30);    					// Wait for close  					testRunner.WaitForWidgetDisappear("Yes Button"' 4);  					testRunner.Delay(2);    					// Confirm close  					Assert.IsTrue(AppContext.RootSystemWindow.HasBeenClosed' "Confirming Close dialog *should* close MatterControl");    					// Wait for M106 change  					testRunner.WaitFor(() => fanChangedCount > 0' 15' 500);    					// Assert expected temp targets and fan transitions  					Assert.AreEqual(0' (int) emulator.CurrentExtruder.TargetTemperature' "Unexpected target temperature - MC close should call Connection.Disable->TurnOffBedAndExtruders to shutdown heaters");  					Assert.AreEqual(0' (int) emulator.HeatedBed.TargetTemperature' "Unexpected target temperature - MC close should call Connection.Disable->TurnOffBedAndExtruders to shutdown heaters");  					Assert.AreEqual(1' fanChangedCount' "Unexpected fan speed change count - MC close should call Connection.Disable which shuts down fans via M106");  				}    				return Task.CompletedTask;  			}' overrideHeight: 900' maxTimeToRun: 90);
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,ConfirmExpectedSpeeds,The following statement contains a magic number: slider = testRunner.GetWidgetByName("Extrusion Multiplier Slider"' out systemWindow' 5) as SolidSlider;
Magic Number,MatterHackers.MatterControl.Tests.Automation,PrintingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\PrintingTests.cs,ConfirmExpectedSpeeds,The following statement contains a magic number: slider = testRunner.GetWidgetByName("Feed Rate Slider"' out systemWindow' 5) as SolidSlider;
Magic Number,MatterHackers.MatterControl.Tests.Automation,ReSliceTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\ReSliceTests.cs,ReSliceHasCorrectEPositions,The following statement contains a magic number: Assert.AreEqual(8' IntPtr.Size' "Test requires 64bit environment as Reslice is disabled in 32bit");
Magic Number,MatterHackers.MatterControl.Tests.Automation,ReSliceTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\ReSliceTests.cs,ReSliceHasCorrectEPositions,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				// testRunner.ClickByName("Connection Wizard Skip Sign In Button");    				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					var printer = testRunner.FirstPrinter();  					printer.Settings.SetValue(SettingsKey.enable_line_splitting' "0");    					var view3D = testRunner.GetWidgetByName("View3DWidget"' out _) as View3DWidget;  					var scene = view3D.InteractionLayer.Scene;    					// Add a callback to check that every line has an extruder  					// distance greater than the largest distance minus the max retraction  					// amount and less than some amount that is reasonable  					double lastAbsoluteEPosition = 0;  					double largestAbsoluteEPosition = 0;  					double largestRetraction = 0;    					emulator.EPositionChanged += (e' s) =>  					{  						largestAbsoluteEPosition = Math.Max(largestAbsoluteEPosition' emulator.CurrentExtruder.AbsoluteEPosition);  						var delta = emulator.CurrentExtruder.AbsoluteEPosition - lastAbsoluteEPosition;  						if (delta < largestRetraction)  						{  							largestRetraction = delta;  						}    						double printerRetraction = 7 + .1; // the airwolf has a retraction of 7 mm  						Assert.GreaterOrEqual(delta' -printerRetraction' "We should never move back more than the retraction amount");  						Assert.GreaterOrEqual(emulator.CurrentExtruder.AbsoluteEPosition' largestAbsoluteEPosition - printerRetraction' "Never go back more than the retraction amount");  						Assert.LessOrEqual(emulator.CurrentExtruder.AbsoluteEPosition' lastAbsoluteEPosition + 10' "We should never move up more than 10 mm");  						lastAbsoluteEPosition = emulator.CurrentExtruder.AbsoluteEPosition;  					};    					// Add a cube to the bed  					testRunner.NavigateToFolder("Print Queue Row Item Collection");  					testRunner.ClickByName("Row Item cube_20x20x20");  					testRunner.ClickByName("Print Library Overflow Menu");  					testRunner.ClickByName("Add to Bed Menu Item");  					testRunner.ClickByName("Print Library Overflow Menu");  					testRunner.ClickByName("Add to Bed Menu Item");    					// start the print  					testRunner.StartPrint(pauseAtLayers: "50;60");    					// Wait for pause  					testRunner.WaitForName("No Button"' 80); // the yes button is 'Resume'  					testRunner.ClickByName("No Button");    					// Delete the cube  					testRunner.ClickByName("Bed Options Menu");  					testRunner.ClickByName("Clear Bed Menu Item");    					testRunner.Delay();    					// ensure there is nothing on the bed  					Assert.AreEqual(0' scene.Children.Count);    					// Add a cylinder  					testRunner.NavigateToFolder("Print Queue Row Item Collection");  					testRunner.ClickByName("Row Item cylinder_5x20");  					testRunner.ClickByName("Print Library Overflow Menu");  					testRunner.ClickByName("Add to Bed Menu Item");  					testRunner.ClickByName("Add Content Menu");    					// re-slice the part  					testRunner.ClickByName("Re-Slice Button");  					testRunner.WaitForName("Switch Button"' 10); // The change to new g-code  					testRunner.ClickByName("Switch Button");    					// and resume the print  					testRunner.ClickByName("Resume Task Button");    					// Wait for next pause  					testRunner.WaitForName("No Button"' 80); // the yes button is 'Resume'  					testRunner.ClickByName("No Button");    					// Switch back to the cube  					// Delete the cylinder  					testRunner.ClickByName("Bed Options Menu");  					testRunner.ClickByName("Clear Bed Menu Item");    					// ensure there is nothing on the bed  					Assert.AreEqual(0' scene.Children.Count);    					// add the cube  					testRunner.NavigateToFolder("Print Queue Row Item Collection");  					testRunner.ClickByName("Row Item cube_20x20x20");  					testRunner.ClickByName("Print Library Overflow Menu");  					testRunner.ClickByName("Add to Bed Menu Item");  					testRunner.ClickByName("Add Content Menu");    					// re-slice the part  					testRunner.ClickByName("Re-Slice Button");  					testRunner.WaitForName("Switch Button"' 10); // The change to new g-code  					testRunner.ClickByName("Switch Button");    					// and resume the print  					testRunner.ClickByName("Resume Task Button");    					// Wait for done  					testRunner.WaitForPrintFinished(printer);    					// this will make sure we turned off line splitting and had good data about the extruder position  					Assert.AreEqual(-7' largestRetraction' "Airwolf HD has a retraction of 7mm' make sure we had one");  				}    				return Task.CompletedTask;  			}'  			maxTimeToRun: 290'  			queueItemFolderToAdd: QueueTemplate.ReSliceParts);
Magic Number,MatterHackers.MatterControl.Tests.Automation,ReSliceTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\ReSliceTests.cs,ReSliceHasCorrectEPositions,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				// testRunner.ClickByName("Connection Wizard Skip Sign In Button");    				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					var printer = testRunner.FirstPrinter();  					printer.Settings.SetValue(SettingsKey.enable_line_splitting' "0");    					var view3D = testRunner.GetWidgetByName("View3DWidget"' out _) as View3DWidget;  					var scene = view3D.InteractionLayer.Scene;    					// Add a callback to check that every line has an extruder  					// distance greater than the largest distance minus the max retraction  					// amount and less than some amount that is reasonable  					double lastAbsoluteEPosition = 0;  					double largestAbsoluteEPosition = 0;  					double largestRetraction = 0;    					emulator.EPositionChanged += (e' s) =>  					{  						largestAbsoluteEPosition = Math.Max(largestAbsoluteEPosition' emulator.CurrentExtruder.AbsoluteEPosition);  						var delta = emulator.CurrentExtruder.AbsoluteEPosition - lastAbsoluteEPosition;  						if (delta < largestRetraction)  						{  							largestRetraction = delta;  						}    						double printerRetraction = 7 + .1; // the airwolf has a retraction of 7 mm  						Assert.GreaterOrEqual(delta' -printerRetraction' "We should never move back more than the retraction amount");  						Assert.GreaterOrEqual(emulator.CurrentExtruder.AbsoluteEPosition' largestAbsoluteEPosition - printerRetraction' "Never go back more than the retraction amount");  						Assert.LessOrEqual(emulator.CurrentExtruder.AbsoluteEPosition' lastAbsoluteEPosition + 10' "We should never move up more than 10 mm");  						lastAbsoluteEPosition = emulator.CurrentExtruder.AbsoluteEPosition;  					};    					// Add a cube to the bed  					testRunner.NavigateToFolder("Print Queue Row Item Collection");  					testRunner.ClickByName("Row Item cube_20x20x20");  					testRunner.ClickByName("Print Library Overflow Menu");  					testRunner.ClickByName("Add to Bed Menu Item");  					testRunner.ClickByName("Print Library Overflow Menu");  					testRunner.ClickByName("Add to Bed Menu Item");    					// start the print  					testRunner.StartPrint(pauseAtLayers: "50;60");    					// Wait for pause  					testRunner.WaitForName("No Button"' 80); // the yes button is 'Resume'  					testRunner.ClickByName("No Button");    					// Delete the cube  					testRunner.ClickByName("Bed Options Menu");  					testRunner.ClickByName("Clear Bed Menu Item");    					testRunner.Delay();    					// ensure there is nothing on the bed  					Assert.AreEqual(0' scene.Children.Count);    					// Add a cylinder  					testRunner.NavigateToFolder("Print Queue Row Item Collection");  					testRunner.ClickByName("Row Item cylinder_5x20");  					testRunner.ClickByName("Print Library Overflow Menu");  					testRunner.ClickByName("Add to Bed Menu Item");  					testRunner.ClickByName("Add Content Menu");    					// re-slice the part  					testRunner.ClickByName("Re-Slice Button");  					testRunner.WaitForName("Switch Button"' 10); // The change to new g-code  					testRunner.ClickByName("Switch Button");    					// and resume the print  					testRunner.ClickByName("Resume Task Button");    					// Wait for next pause  					testRunner.WaitForName("No Button"' 80); // the yes button is 'Resume'  					testRunner.ClickByName("No Button");    					// Switch back to the cube  					// Delete the cylinder  					testRunner.ClickByName("Bed Options Menu");  					testRunner.ClickByName("Clear Bed Menu Item");    					// ensure there is nothing on the bed  					Assert.AreEqual(0' scene.Children.Count);    					// add the cube  					testRunner.NavigateToFolder("Print Queue Row Item Collection");  					testRunner.ClickByName("Row Item cube_20x20x20");  					testRunner.ClickByName("Print Library Overflow Menu");  					testRunner.ClickByName("Add to Bed Menu Item");  					testRunner.ClickByName("Add Content Menu");    					// re-slice the part  					testRunner.ClickByName("Re-Slice Button");  					testRunner.WaitForName("Switch Button"' 10); // The change to new g-code  					testRunner.ClickByName("Switch Button");    					// and resume the print  					testRunner.ClickByName("Resume Task Button");    					// Wait for done  					testRunner.WaitForPrintFinished(printer);    					// this will make sure we turned off line splitting and had good data about the extruder position  					Assert.AreEqual(-7' largestRetraction' "Airwolf HD has a retraction of 7mm' make sure we had one");  				}    				return Task.CompletedTask;  			}'  			maxTimeToRun: 290'  			queueItemFolderToAdd: QueueTemplate.ReSliceParts);
Magic Number,MatterHackers.MatterControl.Tests.Automation,ReSliceTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\ReSliceTests.cs,ReSliceHasCorrectEPositions,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				// testRunner.ClickByName("Connection Wizard Skip Sign In Button");    				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					var printer = testRunner.FirstPrinter();  					printer.Settings.SetValue(SettingsKey.enable_line_splitting' "0");    					var view3D = testRunner.GetWidgetByName("View3DWidget"' out _) as View3DWidget;  					var scene = view3D.InteractionLayer.Scene;    					// Add a callback to check that every line has an extruder  					// distance greater than the largest distance minus the max retraction  					// amount and less than some amount that is reasonable  					double lastAbsoluteEPosition = 0;  					double largestAbsoluteEPosition = 0;  					double largestRetraction = 0;    					emulator.EPositionChanged += (e' s) =>  					{  						largestAbsoluteEPosition = Math.Max(largestAbsoluteEPosition' emulator.CurrentExtruder.AbsoluteEPosition);  						var delta = emulator.CurrentExtruder.AbsoluteEPosition - lastAbsoluteEPosition;  						if (delta < largestRetraction)  						{  							largestRetraction = delta;  						}    						double printerRetraction = 7 + .1; // the airwolf has a retraction of 7 mm  						Assert.GreaterOrEqual(delta' -printerRetraction' "We should never move back more than the retraction amount");  						Assert.GreaterOrEqual(emulator.CurrentExtruder.AbsoluteEPosition' largestAbsoluteEPosition - printerRetraction' "Never go back more than the retraction amount");  						Assert.LessOrEqual(emulator.CurrentExtruder.AbsoluteEPosition' lastAbsoluteEPosition + 10' "We should never move up more than 10 mm");  						lastAbsoluteEPosition = emulator.CurrentExtruder.AbsoluteEPosition;  					};    					// Add a cube to the bed  					testRunner.NavigateToFolder("Print Queue Row Item Collection");  					testRunner.ClickByName("Row Item cube_20x20x20");  					testRunner.ClickByName("Print Library Overflow Menu");  					testRunner.ClickByName("Add to Bed Menu Item");  					testRunner.ClickByName("Print Library Overflow Menu");  					testRunner.ClickByName("Add to Bed Menu Item");    					// start the print  					testRunner.StartPrint(pauseAtLayers: "50;60");    					// Wait for pause  					testRunner.WaitForName("No Button"' 80); // the yes button is 'Resume'  					testRunner.ClickByName("No Button");    					// Delete the cube  					testRunner.ClickByName("Bed Options Menu");  					testRunner.ClickByName("Clear Bed Menu Item");    					testRunner.Delay();    					// ensure there is nothing on the bed  					Assert.AreEqual(0' scene.Children.Count);    					// Add a cylinder  					testRunner.NavigateToFolder("Print Queue Row Item Collection");  					testRunner.ClickByName("Row Item cylinder_5x20");  					testRunner.ClickByName("Print Library Overflow Menu");  					testRunner.ClickByName("Add to Bed Menu Item");  					testRunner.ClickByName("Add Content Menu");    					// re-slice the part  					testRunner.ClickByName("Re-Slice Button");  					testRunner.WaitForName("Switch Button"' 10); // The change to new g-code  					testRunner.ClickByName("Switch Button");    					// and resume the print  					testRunner.ClickByName("Resume Task Button");    					// Wait for next pause  					testRunner.WaitForName("No Button"' 80); // the yes button is 'Resume'  					testRunner.ClickByName("No Button");    					// Switch back to the cube  					// Delete the cylinder  					testRunner.ClickByName("Bed Options Menu");  					testRunner.ClickByName("Clear Bed Menu Item");    					// ensure there is nothing on the bed  					Assert.AreEqual(0' scene.Children.Count);    					// add the cube  					testRunner.NavigateToFolder("Print Queue Row Item Collection");  					testRunner.ClickByName("Row Item cube_20x20x20");  					testRunner.ClickByName("Print Library Overflow Menu");  					testRunner.ClickByName("Add to Bed Menu Item");  					testRunner.ClickByName("Add Content Menu");    					// re-slice the part  					testRunner.ClickByName("Re-Slice Button");  					testRunner.WaitForName("Switch Button"' 10); // The change to new g-code  					testRunner.ClickByName("Switch Button");    					// and resume the print  					testRunner.ClickByName("Resume Task Button");    					// Wait for done  					testRunner.WaitForPrintFinished(printer);    					// this will make sure we turned off line splitting and had good data about the extruder position  					Assert.AreEqual(-7' largestRetraction' "Airwolf HD has a retraction of 7mm' make sure we had one");  				}    				return Task.CompletedTask;  			}'  			maxTimeToRun: 290'  			queueItemFolderToAdd: QueueTemplate.ReSliceParts);
Magic Number,MatterHackers.MatterControl.Tests.Automation,ReSliceTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\ReSliceTests.cs,ReSliceHasCorrectEPositions,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				// testRunner.ClickByName("Connection Wizard Skip Sign In Button");    				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					var printer = testRunner.FirstPrinter();  					printer.Settings.SetValue(SettingsKey.enable_line_splitting' "0");    					var view3D = testRunner.GetWidgetByName("View3DWidget"' out _) as View3DWidget;  					var scene = view3D.InteractionLayer.Scene;    					// Add a callback to check that every line has an extruder  					// distance greater than the largest distance minus the max retraction  					// amount and less than some amount that is reasonable  					double lastAbsoluteEPosition = 0;  					double largestAbsoluteEPosition = 0;  					double largestRetraction = 0;    					emulator.EPositionChanged += (e' s) =>  					{  						largestAbsoluteEPosition = Math.Max(largestAbsoluteEPosition' emulator.CurrentExtruder.AbsoluteEPosition);  						var delta = emulator.CurrentExtruder.AbsoluteEPosition - lastAbsoluteEPosition;  						if (delta < largestRetraction)  						{  							largestRetraction = delta;  						}    						double printerRetraction = 7 + .1; // the airwolf has a retraction of 7 mm  						Assert.GreaterOrEqual(delta' -printerRetraction' "We should never move back more than the retraction amount");  						Assert.GreaterOrEqual(emulator.CurrentExtruder.AbsoluteEPosition' largestAbsoluteEPosition - printerRetraction' "Never go back more than the retraction amount");  						Assert.LessOrEqual(emulator.CurrentExtruder.AbsoluteEPosition' lastAbsoluteEPosition + 10' "We should never move up more than 10 mm");  						lastAbsoluteEPosition = emulator.CurrentExtruder.AbsoluteEPosition;  					};    					// Add a cube to the bed  					testRunner.NavigateToFolder("Print Queue Row Item Collection");  					testRunner.ClickByName("Row Item cube_20x20x20");  					testRunner.ClickByName("Print Library Overflow Menu");  					testRunner.ClickByName("Add to Bed Menu Item");  					testRunner.ClickByName("Print Library Overflow Menu");  					testRunner.ClickByName("Add to Bed Menu Item");    					// start the print  					testRunner.StartPrint(pauseAtLayers: "50;60");    					// Wait for pause  					testRunner.WaitForName("No Button"' 80); // the yes button is 'Resume'  					testRunner.ClickByName("No Button");    					// Delete the cube  					testRunner.ClickByName("Bed Options Menu");  					testRunner.ClickByName("Clear Bed Menu Item");    					testRunner.Delay();    					// ensure there is nothing on the bed  					Assert.AreEqual(0' scene.Children.Count);    					// Add a cylinder  					testRunner.NavigateToFolder("Print Queue Row Item Collection");  					testRunner.ClickByName("Row Item cylinder_5x20");  					testRunner.ClickByName("Print Library Overflow Menu");  					testRunner.ClickByName("Add to Bed Menu Item");  					testRunner.ClickByName("Add Content Menu");    					// re-slice the part  					testRunner.ClickByName("Re-Slice Button");  					testRunner.WaitForName("Switch Button"' 10); // The change to new g-code  					testRunner.ClickByName("Switch Button");    					// and resume the print  					testRunner.ClickByName("Resume Task Button");    					// Wait for next pause  					testRunner.WaitForName("No Button"' 80); // the yes button is 'Resume'  					testRunner.ClickByName("No Button");    					// Switch back to the cube  					// Delete the cylinder  					testRunner.ClickByName("Bed Options Menu");  					testRunner.ClickByName("Clear Bed Menu Item");    					// ensure there is nothing on the bed  					Assert.AreEqual(0' scene.Children.Count);    					// add the cube  					testRunner.NavigateToFolder("Print Queue Row Item Collection");  					testRunner.ClickByName("Row Item cube_20x20x20");  					testRunner.ClickByName("Print Library Overflow Menu");  					testRunner.ClickByName("Add to Bed Menu Item");  					testRunner.ClickByName("Add Content Menu");    					// re-slice the part  					testRunner.ClickByName("Re-Slice Button");  					testRunner.WaitForName("Switch Button"' 10); // The change to new g-code  					testRunner.ClickByName("Switch Button");    					// and resume the print  					testRunner.ClickByName("Resume Task Button");    					// Wait for done  					testRunner.WaitForPrintFinished(printer);    					// this will make sure we turned off line splitting and had good data about the extruder position  					Assert.AreEqual(-7' largestRetraction' "Airwolf HD has a retraction of 7mm' make sure we had one");  				}    				return Task.CompletedTask;  			}'  			maxTimeToRun: 290'  			queueItemFolderToAdd: QueueTemplate.ReSliceParts);
Magic Number,MatterHackers.MatterControl.Tests.Automation,ReSliceTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\ReSliceTests.cs,ReSliceHasCorrectEPositions,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				// testRunner.ClickByName("Connection Wizard Skip Sign In Button");    				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					var printer = testRunner.FirstPrinter();  					printer.Settings.SetValue(SettingsKey.enable_line_splitting' "0");    					var view3D = testRunner.GetWidgetByName("View3DWidget"' out _) as View3DWidget;  					var scene = view3D.InteractionLayer.Scene;    					// Add a callback to check that every line has an extruder  					// distance greater than the largest distance minus the max retraction  					// amount and less than some amount that is reasonable  					double lastAbsoluteEPosition = 0;  					double largestAbsoluteEPosition = 0;  					double largestRetraction = 0;    					emulator.EPositionChanged += (e' s) =>  					{  						largestAbsoluteEPosition = Math.Max(largestAbsoluteEPosition' emulator.CurrentExtruder.AbsoluteEPosition);  						var delta = emulator.CurrentExtruder.AbsoluteEPosition - lastAbsoluteEPosition;  						if (delta < largestRetraction)  						{  							largestRetraction = delta;  						}    						double printerRetraction = 7 + .1; // the airwolf has a retraction of 7 mm  						Assert.GreaterOrEqual(delta' -printerRetraction' "We should never move back more than the retraction amount");  						Assert.GreaterOrEqual(emulator.CurrentExtruder.AbsoluteEPosition' largestAbsoluteEPosition - printerRetraction' "Never go back more than the retraction amount");  						Assert.LessOrEqual(emulator.CurrentExtruder.AbsoluteEPosition' lastAbsoluteEPosition + 10' "We should never move up more than 10 mm");  						lastAbsoluteEPosition = emulator.CurrentExtruder.AbsoluteEPosition;  					};    					// Add a cube to the bed  					testRunner.NavigateToFolder("Print Queue Row Item Collection");  					testRunner.ClickByName("Row Item cube_20x20x20");  					testRunner.ClickByName("Print Library Overflow Menu");  					testRunner.ClickByName("Add to Bed Menu Item");  					testRunner.ClickByName("Print Library Overflow Menu");  					testRunner.ClickByName("Add to Bed Menu Item");    					// start the print  					testRunner.StartPrint(pauseAtLayers: "50;60");    					// Wait for pause  					testRunner.WaitForName("No Button"' 80); // the yes button is 'Resume'  					testRunner.ClickByName("No Button");    					// Delete the cube  					testRunner.ClickByName("Bed Options Menu");  					testRunner.ClickByName("Clear Bed Menu Item");    					testRunner.Delay();    					// ensure there is nothing on the bed  					Assert.AreEqual(0' scene.Children.Count);    					// Add a cylinder  					testRunner.NavigateToFolder("Print Queue Row Item Collection");  					testRunner.ClickByName("Row Item cylinder_5x20");  					testRunner.ClickByName("Print Library Overflow Menu");  					testRunner.ClickByName("Add to Bed Menu Item");  					testRunner.ClickByName("Add Content Menu");    					// re-slice the part  					testRunner.ClickByName("Re-Slice Button");  					testRunner.WaitForName("Switch Button"' 10); // The change to new g-code  					testRunner.ClickByName("Switch Button");    					// and resume the print  					testRunner.ClickByName("Resume Task Button");    					// Wait for next pause  					testRunner.WaitForName("No Button"' 80); // the yes button is 'Resume'  					testRunner.ClickByName("No Button");    					// Switch back to the cube  					// Delete the cylinder  					testRunner.ClickByName("Bed Options Menu");  					testRunner.ClickByName("Clear Bed Menu Item");    					// ensure there is nothing on the bed  					Assert.AreEqual(0' scene.Children.Count);    					// add the cube  					testRunner.NavigateToFolder("Print Queue Row Item Collection");  					testRunner.ClickByName("Row Item cube_20x20x20");  					testRunner.ClickByName("Print Library Overflow Menu");  					testRunner.ClickByName("Add to Bed Menu Item");  					testRunner.ClickByName("Add Content Menu");    					// re-slice the part  					testRunner.ClickByName("Re-Slice Button");  					testRunner.WaitForName("Switch Button"' 10); // The change to new g-code  					testRunner.ClickByName("Switch Button");    					// and resume the print  					testRunner.ClickByName("Resume Task Button");    					// Wait for done  					testRunner.WaitForPrintFinished(printer);    					// this will make sure we turned off line splitting and had good data about the extruder position  					Assert.AreEqual(-7' largestRetraction' "Airwolf HD has a retraction of 7mm' make sure we had one");  				}    				return Task.CompletedTask;  			}'  			maxTimeToRun: 290'  			queueItemFolderToAdd: QueueTemplate.ReSliceParts);
Magic Number,MatterHackers.MatterControl.Tests.Automation,ReSliceTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\ReSliceTests.cs,ReSliceHasCorrectEPositions,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				// testRunner.ClickByName("Connection Wizard Skip Sign In Button");    				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					var printer = testRunner.FirstPrinter();  					printer.Settings.SetValue(SettingsKey.enable_line_splitting' "0");    					var view3D = testRunner.GetWidgetByName("View3DWidget"' out _) as View3DWidget;  					var scene = view3D.InteractionLayer.Scene;    					// Add a callback to check that every line has an extruder  					// distance greater than the largest distance minus the max retraction  					// amount and less than some amount that is reasonable  					double lastAbsoluteEPosition = 0;  					double largestAbsoluteEPosition = 0;  					double largestRetraction = 0;    					emulator.EPositionChanged += (e' s) =>  					{  						largestAbsoluteEPosition = Math.Max(largestAbsoluteEPosition' emulator.CurrentExtruder.AbsoluteEPosition);  						var delta = emulator.CurrentExtruder.AbsoluteEPosition - lastAbsoluteEPosition;  						if (delta < largestRetraction)  						{  							largestRetraction = delta;  						}    						double printerRetraction = 7 + .1; // the airwolf has a retraction of 7 mm  						Assert.GreaterOrEqual(delta' -printerRetraction' "We should never move back more than the retraction amount");  						Assert.GreaterOrEqual(emulator.CurrentExtruder.AbsoluteEPosition' largestAbsoluteEPosition - printerRetraction' "Never go back more than the retraction amount");  						Assert.LessOrEqual(emulator.CurrentExtruder.AbsoluteEPosition' lastAbsoluteEPosition + 10' "We should never move up more than 10 mm");  						lastAbsoluteEPosition = emulator.CurrentExtruder.AbsoluteEPosition;  					};    					// Add a cube to the bed  					testRunner.NavigateToFolder("Print Queue Row Item Collection");  					testRunner.ClickByName("Row Item cube_20x20x20");  					testRunner.ClickByName("Print Library Overflow Menu");  					testRunner.ClickByName("Add to Bed Menu Item");  					testRunner.ClickByName("Print Library Overflow Menu");  					testRunner.ClickByName("Add to Bed Menu Item");    					// start the print  					testRunner.StartPrint(pauseAtLayers: "50;60");    					// Wait for pause  					testRunner.WaitForName("No Button"' 80); // the yes button is 'Resume'  					testRunner.ClickByName("No Button");    					// Delete the cube  					testRunner.ClickByName("Bed Options Menu");  					testRunner.ClickByName("Clear Bed Menu Item");    					testRunner.Delay();    					// ensure there is nothing on the bed  					Assert.AreEqual(0' scene.Children.Count);    					// Add a cylinder  					testRunner.NavigateToFolder("Print Queue Row Item Collection");  					testRunner.ClickByName("Row Item cylinder_5x20");  					testRunner.ClickByName("Print Library Overflow Menu");  					testRunner.ClickByName("Add to Bed Menu Item");  					testRunner.ClickByName("Add Content Menu");    					// re-slice the part  					testRunner.ClickByName("Re-Slice Button");  					testRunner.WaitForName("Switch Button"' 10); // The change to new g-code  					testRunner.ClickByName("Switch Button");    					// and resume the print  					testRunner.ClickByName("Resume Task Button");    					// Wait for next pause  					testRunner.WaitForName("No Button"' 80); // the yes button is 'Resume'  					testRunner.ClickByName("No Button");    					// Switch back to the cube  					// Delete the cylinder  					testRunner.ClickByName("Bed Options Menu");  					testRunner.ClickByName("Clear Bed Menu Item");    					// ensure there is nothing on the bed  					Assert.AreEqual(0' scene.Children.Count);    					// add the cube  					testRunner.NavigateToFolder("Print Queue Row Item Collection");  					testRunner.ClickByName("Row Item cube_20x20x20");  					testRunner.ClickByName("Print Library Overflow Menu");  					testRunner.ClickByName("Add to Bed Menu Item");  					testRunner.ClickByName("Add Content Menu");    					// re-slice the part  					testRunner.ClickByName("Re-Slice Button");  					testRunner.WaitForName("Switch Button"' 10); // The change to new g-code  					testRunner.ClickByName("Switch Button");    					// and resume the print  					testRunner.ClickByName("Resume Task Button");    					// Wait for done  					testRunner.WaitForPrintFinished(printer);    					// this will make sure we turned off line splitting and had good data about the extruder position  					Assert.AreEqual(-7' largestRetraction' "Airwolf HD has a retraction of 7mm' make sure we had one");  				}    				return Task.CompletedTask;  			}'  			maxTimeToRun: 290'  			queueItemFolderToAdd: QueueTemplate.ReSliceParts);
Magic Number,MatterHackers.MatterControl.Tests.Automation,ReSliceTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\ReSliceTests.cs,ReSliceHasCorrectEPositions,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				// testRunner.ClickByName("Connection Wizard Skip Sign In Button");    				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					var printer = testRunner.FirstPrinter();  					printer.Settings.SetValue(SettingsKey.enable_line_splitting' "0");    					var view3D = testRunner.GetWidgetByName("View3DWidget"' out _) as View3DWidget;  					var scene = view3D.InteractionLayer.Scene;    					// Add a callback to check that every line has an extruder  					// distance greater than the largest distance minus the max retraction  					// amount and less than some amount that is reasonable  					double lastAbsoluteEPosition = 0;  					double largestAbsoluteEPosition = 0;  					double largestRetraction = 0;    					emulator.EPositionChanged += (e' s) =>  					{  						largestAbsoluteEPosition = Math.Max(largestAbsoluteEPosition' emulator.CurrentExtruder.AbsoluteEPosition);  						var delta = emulator.CurrentExtruder.AbsoluteEPosition - lastAbsoluteEPosition;  						if (delta < largestRetraction)  						{  							largestRetraction = delta;  						}    						double printerRetraction = 7 + .1; // the airwolf has a retraction of 7 mm  						Assert.GreaterOrEqual(delta' -printerRetraction' "We should never move back more than the retraction amount");  						Assert.GreaterOrEqual(emulator.CurrentExtruder.AbsoluteEPosition' largestAbsoluteEPosition - printerRetraction' "Never go back more than the retraction amount");  						Assert.LessOrEqual(emulator.CurrentExtruder.AbsoluteEPosition' lastAbsoluteEPosition + 10' "We should never move up more than 10 mm");  						lastAbsoluteEPosition = emulator.CurrentExtruder.AbsoluteEPosition;  					};    					// Add a cube to the bed  					testRunner.NavigateToFolder("Print Queue Row Item Collection");  					testRunner.ClickByName("Row Item cube_20x20x20");  					testRunner.ClickByName("Print Library Overflow Menu");  					testRunner.ClickByName("Add to Bed Menu Item");  					testRunner.ClickByName("Print Library Overflow Menu");  					testRunner.ClickByName("Add to Bed Menu Item");    					// start the print  					testRunner.StartPrint(pauseAtLayers: "50;60");    					// Wait for pause  					testRunner.WaitForName("No Button"' 80); // the yes button is 'Resume'  					testRunner.ClickByName("No Button");    					// Delete the cube  					testRunner.ClickByName("Bed Options Menu");  					testRunner.ClickByName("Clear Bed Menu Item");    					testRunner.Delay();    					// ensure there is nothing on the bed  					Assert.AreEqual(0' scene.Children.Count);    					// Add a cylinder  					testRunner.NavigateToFolder("Print Queue Row Item Collection");  					testRunner.ClickByName("Row Item cylinder_5x20");  					testRunner.ClickByName("Print Library Overflow Menu");  					testRunner.ClickByName("Add to Bed Menu Item");  					testRunner.ClickByName("Add Content Menu");    					// re-slice the part  					testRunner.ClickByName("Re-Slice Button");  					testRunner.WaitForName("Switch Button"' 10); // The change to new g-code  					testRunner.ClickByName("Switch Button");    					// and resume the print  					testRunner.ClickByName("Resume Task Button");    					// Wait for next pause  					testRunner.WaitForName("No Button"' 80); // the yes button is 'Resume'  					testRunner.ClickByName("No Button");    					// Switch back to the cube  					// Delete the cylinder  					testRunner.ClickByName("Bed Options Menu");  					testRunner.ClickByName("Clear Bed Menu Item");    					// ensure there is nothing on the bed  					Assert.AreEqual(0' scene.Children.Count);    					// add the cube  					testRunner.NavigateToFolder("Print Queue Row Item Collection");  					testRunner.ClickByName("Row Item cube_20x20x20");  					testRunner.ClickByName("Print Library Overflow Menu");  					testRunner.ClickByName("Add to Bed Menu Item");  					testRunner.ClickByName("Add Content Menu");    					// re-slice the part  					testRunner.ClickByName("Re-Slice Button");  					testRunner.WaitForName("Switch Button"' 10); // The change to new g-code  					testRunner.ClickByName("Switch Button");    					// and resume the print  					testRunner.ClickByName("Resume Task Button");    					// Wait for done  					testRunner.WaitForPrintFinished(printer);    					// this will make sure we turned off line splitting and had good data about the extruder position  					Assert.AreEqual(-7' largestRetraction' "Airwolf HD has a retraction of 7mm' make sure we had one");  				}    				return Task.CompletedTask;  			}'  			maxTimeToRun: 290'  			queueItemFolderToAdd: QueueTemplate.ReSliceParts);
Magic Number,MatterHackers.MatterControl.Tests.Automation,ReSliceTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\ReSliceTests.cs,ReSliceHasCorrectEPositions,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				// testRunner.ClickByName("Connection Wizard Skip Sign In Button");    				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					var printer = testRunner.FirstPrinter();  					printer.Settings.SetValue(SettingsKey.enable_line_splitting' "0");    					var view3D = testRunner.GetWidgetByName("View3DWidget"' out _) as View3DWidget;  					var scene = view3D.InteractionLayer.Scene;    					// Add a callback to check that every line has an extruder  					// distance greater than the largest distance minus the max retraction  					// amount and less than some amount that is reasonable  					double lastAbsoluteEPosition = 0;  					double largestAbsoluteEPosition = 0;  					double largestRetraction = 0;    					emulator.EPositionChanged += (e' s) =>  					{  						largestAbsoluteEPosition = Math.Max(largestAbsoluteEPosition' emulator.CurrentExtruder.AbsoluteEPosition);  						var delta = emulator.CurrentExtruder.AbsoluteEPosition - lastAbsoluteEPosition;  						if (delta < largestRetraction)  						{  							largestRetraction = delta;  						}    						double printerRetraction = 7 + .1; // the airwolf has a retraction of 7 mm  						Assert.GreaterOrEqual(delta' -printerRetraction' "We should never move back more than the retraction amount");  						Assert.GreaterOrEqual(emulator.CurrentExtruder.AbsoluteEPosition' largestAbsoluteEPosition - printerRetraction' "Never go back more than the retraction amount");  						Assert.LessOrEqual(emulator.CurrentExtruder.AbsoluteEPosition' lastAbsoluteEPosition + 10' "We should never move up more than 10 mm");  						lastAbsoluteEPosition = emulator.CurrentExtruder.AbsoluteEPosition;  					};    					// Add a cube to the bed  					testRunner.NavigateToFolder("Print Queue Row Item Collection");  					testRunner.ClickByName("Row Item cube_20x20x20");  					testRunner.ClickByName("Print Library Overflow Menu");  					testRunner.ClickByName("Add to Bed Menu Item");  					testRunner.ClickByName("Print Library Overflow Menu");  					testRunner.ClickByName("Add to Bed Menu Item");    					// start the print  					testRunner.StartPrint(pauseAtLayers: "50;60");    					// Wait for pause  					testRunner.WaitForName("No Button"' 80); // the yes button is 'Resume'  					testRunner.ClickByName("No Button");    					// Delete the cube  					testRunner.ClickByName("Bed Options Menu");  					testRunner.ClickByName("Clear Bed Menu Item");    					testRunner.Delay();    					// ensure there is nothing on the bed  					Assert.AreEqual(0' scene.Children.Count);    					// Add a cylinder  					testRunner.NavigateToFolder("Print Queue Row Item Collection");  					testRunner.ClickByName("Row Item cylinder_5x20");  					testRunner.ClickByName("Print Library Overflow Menu");  					testRunner.ClickByName("Add to Bed Menu Item");  					testRunner.ClickByName("Add Content Menu");    					// re-slice the part  					testRunner.ClickByName("Re-Slice Button");  					testRunner.WaitForName("Switch Button"' 10); // The change to new g-code  					testRunner.ClickByName("Switch Button");    					// and resume the print  					testRunner.ClickByName("Resume Task Button");    					// Wait for next pause  					testRunner.WaitForName("No Button"' 80); // the yes button is 'Resume'  					testRunner.ClickByName("No Button");    					// Switch back to the cube  					// Delete the cylinder  					testRunner.ClickByName("Bed Options Menu");  					testRunner.ClickByName("Clear Bed Menu Item");    					// ensure there is nothing on the bed  					Assert.AreEqual(0' scene.Children.Count);    					// add the cube  					testRunner.NavigateToFolder("Print Queue Row Item Collection");  					testRunner.ClickByName("Row Item cube_20x20x20");  					testRunner.ClickByName("Print Library Overflow Menu");  					testRunner.ClickByName("Add to Bed Menu Item");  					testRunner.ClickByName("Add Content Menu");    					// re-slice the part  					testRunner.ClickByName("Re-Slice Button");  					testRunner.WaitForName("Switch Button"' 10); // The change to new g-code  					testRunner.ClickByName("Switch Button");    					// and resume the print  					testRunner.ClickByName("Resume Task Button");    					// Wait for done  					testRunner.WaitForPrintFinished(printer);    					// this will make sure we turned off line splitting and had good data about the extruder position  					Assert.AreEqual(-7' largestRetraction' "Airwolf HD has a retraction of 7mm' make sure we had one");  				}    				return Task.CompletedTask;  			}'  			maxTimeToRun: 290'  			queueItemFolderToAdd: QueueTemplate.ReSliceParts);
Magic Number,MatterHackers.MatterControl.Tests.Automation,ReSliceTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\ReSliceTests.cs,ReSliceHasCorrectEPositions,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				// testRunner.ClickByName("Connection Wizard Skip Sign In Button");    				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					var printer = testRunner.FirstPrinter();  					printer.Settings.SetValue(SettingsKey.enable_line_splitting' "0");    					var view3D = testRunner.GetWidgetByName("View3DWidget"' out _) as View3DWidget;  					var scene = view3D.InteractionLayer.Scene;    					// Add a callback to check that every line has an extruder  					// distance greater than the largest distance minus the max retraction  					// amount and less than some amount that is reasonable  					double lastAbsoluteEPosition = 0;  					double largestAbsoluteEPosition = 0;  					double largestRetraction = 0;    					emulator.EPositionChanged += (e' s) =>  					{  						largestAbsoluteEPosition = Math.Max(largestAbsoluteEPosition' emulator.CurrentExtruder.AbsoluteEPosition);  						var delta = emulator.CurrentExtruder.AbsoluteEPosition - lastAbsoluteEPosition;  						if (delta < largestRetraction)  						{  							largestRetraction = delta;  						}    						double printerRetraction = 7 + .1; // the airwolf has a retraction of 7 mm  						Assert.GreaterOrEqual(delta' -printerRetraction' "We should never move back more than the retraction amount");  						Assert.GreaterOrEqual(emulator.CurrentExtruder.AbsoluteEPosition' largestAbsoluteEPosition - printerRetraction' "Never go back more than the retraction amount");  						Assert.LessOrEqual(emulator.CurrentExtruder.AbsoluteEPosition' lastAbsoluteEPosition + 10' "We should never move up more than 10 mm");  						lastAbsoluteEPosition = emulator.CurrentExtruder.AbsoluteEPosition;  					};    					// Add a cube to the bed  					testRunner.NavigateToFolder("Print Queue Row Item Collection");  					testRunner.ClickByName("Row Item cube_20x20x20");  					testRunner.ClickByName("Print Library Overflow Menu");  					testRunner.ClickByName("Add to Bed Menu Item");  					testRunner.ClickByName("Print Library Overflow Menu");  					testRunner.ClickByName("Add to Bed Menu Item");    					// start the print  					testRunner.StartPrint(pauseAtLayers: "50;60");    					// Wait for pause  					testRunner.WaitForName("No Button"' 80); // the yes button is 'Resume'  					testRunner.ClickByName("No Button");    					// Delete the cube  					testRunner.ClickByName("Bed Options Menu");  					testRunner.ClickByName("Clear Bed Menu Item");    					testRunner.Delay();    					// ensure there is nothing on the bed  					Assert.AreEqual(0' scene.Children.Count);    					// Add a cylinder  					testRunner.NavigateToFolder("Print Queue Row Item Collection");  					testRunner.ClickByName("Row Item cylinder_5x20");  					testRunner.ClickByName("Print Library Overflow Menu");  					testRunner.ClickByName("Add to Bed Menu Item");  					testRunner.ClickByName("Add Content Menu");    					// re-slice the part  					testRunner.ClickByName("Re-Slice Button");  					testRunner.WaitForName("Switch Button"' 10); // The change to new g-code  					testRunner.ClickByName("Switch Button");    					// and resume the print  					testRunner.ClickByName("Resume Task Button");    					// Wait for next pause  					testRunner.WaitForName("No Button"' 80); // the yes button is 'Resume'  					testRunner.ClickByName("No Button");    					// Switch back to the cube  					// Delete the cylinder  					testRunner.ClickByName("Bed Options Menu");  					testRunner.ClickByName("Clear Bed Menu Item");    					// ensure there is nothing on the bed  					Assert.AreEqual(0' scene.Children.Count);    					// add the cube  					testRunner.NavigateToFolder("Print Queue Row Item Collection");  					testRunner.ClickByName("Row Item cube_20x20x20");  					testRunner.ClickByName("Print Library Overflow Menu");  					testRunner.ClickByName("Add to Bed Menu Item");  					testRunner.ClickByName("Add Content Menu");    					// re-slice the part  					testRunner.ClickByName("Re-Slice Button");  					testRunner.WaitForName("Switch Button"' 10); // The change to new g-code  					testRunner.ClickByName("Switch Button");    					// and resume the print  					testRunner.ClickByName("Resume Task Button");    					// Wait for done  					testRunner.WaitForPrintFinished(printer);    					// this will make sure we turned off line splitting and had good data about the extruder position  					Assert.AreEqual(-7' largestRetraction' "Airwolf HD has a retraction of 7mm' make sure we had one");  				}    				return Task.CompletedTask;  			}'  			maxTimeToRun: 290'  			queueItemFolderToAdd: QueueTemplate.ReSliceParts);
Magic Number,MatterHackers.MatterControl.Tests.Automation,SliceSetingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\SliceSettingsTests.cs,RaftEnabledPassedToSliceEngine,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.WaitForFirstDraw();    				testRunner.AddAndSelectPrinter("Airwolf 3D"' "HD");    				testRunner.AddTestAssetsToLibrary(new[] { "Rook.amf" });    				testRunner.AddItemToBedplate(""' "Row Item Rook");    				testRunner.SwitchToSliceSettings();  				testRunner.SelectSliceSettingsField(PrinterSettings.Layout.SliceSettings' SettingsKey.create_raft);  				testRunner.Delay(.5);    				testRunner.StartSlicing();  				testRunner.WaitFor(() => MatterControlUtilities.CompareExpectedSliceSettingValueWithActualVaue("enableRaft"' "True")' 10);    				// Call compare slice settings method here  				Assert.IsTrue(MatterControlUtilities.CompareExpectedSliceSettingValueWithActualVaue("enableRaft"' "True"));    				return Task.CompletedTask;  			}' overrideWidth: 1224' overrideHeight: 800);
Magic Number,MatterHackers.MatterControl.Tests.Automation,SliceSetingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\SliceSettingsTests.cs,RaftEnabledPassedToSliceEngine,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.WaitForFirstDraw();    				testRunner.AddAndSelectPrinter("Airwolf 3D"' "HD");    				testRunner.AddTestAssetsToLibrary(new[] { "Rook.amf" });    				testRunner.AddItemToBedplate(""' "Row Item Rook");    				testRunner.SwitchToSliceSettings();  				testRunner.SelectSliceSettingsField(PrinterSettings.Layout.SliceSettings' SettingsKey.create_raft);  				testRunner.Delay(.5);    				testRunner.StartSlicing();  				testRunner.WaitFor(() => MatterControlUtilities.CompareExpectedSliceSettingValueWithActualVaue("enableRaft"' "True")' 10);    				// Call compare slice settings method here  				Assert.IsTrue(MatterControlUtilities.CompareExpectedSliceSettingValueWithActualVaue("enableRaft"' "True"));    				return Task.CompletedTask;  			}' overrideWidth: 1224' overrideHeight: 800);
Magic Number,MatterHackers.MatterControl.Tests.Automation,SliceSetingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\SliceSettingsTests.cs,RaftEnabledPassedToSliceEngine,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.WaitForFirstDraw();    				testRunner.AddAndSelectPrinter("Airwolf 3D"' "HD");    				testRunner.AddTestAssetsToLibrary(new[] { "Rook.amf" });    				testRunner.AddItemToBedplate(""' "Row Item Rook");    				testRunner.SwitchToSliceSettings();  				testRunner.SelectSliceSettingsField(PrinterSettings.Layout.SliceSettings' SettingsKey.create_raft);  				testRunner.Delay(.5);    				testRunner.StartSlicing();  				testRunner.WaitFor(() => MatterControlUtilities.CompareExpectedSliceSettingValueWithActualVaue("enableRaft"' "True")' 10);    				// Call compare slice settings method here  				Assert.IsTrue(MatterControlUtilities.CompareExpectedSliceSettingValueWithActualVaue("enableRaft"' "True"));    				return Task.CompletedTask;  			}' overrideWidth: 1224' overrideHeight: 800);
Magic Number,MatterHackers.MatterControl.Tests.Automation,SliceSetingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\SliceSettingsTests.cs,RaftEnabledPassedToSliceEngine,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.WaitForFirstDraw();    				testRunner.AddAndSelectPrinter("Airwolf 3D"' "HD");    				testRunner.AddTestAssetsToLibrary(new[] { "Rook.amf" });    				testRunner.AddItemToBedplate(""' "Row Item Rook");    				testRunner.SwitchToSliceSettings();  				testRunner.SelectSliceSettingsField(PrinterSettings.Layout.SliceSettings' SettingsKey.create_raft);  				testRunner.Delay(.5);    				testRunner.StartSlicing();  				testRunner.WaitFor(() => MatterControlUtilities.CompareExpectedSliceSettingValueWithActualVaue("enableRaft"' "True")' 10);    				// Call compare slice settings method here  				Assert.IsTrue(MatterControlUtilities.CompareExpectedSliceSettingValueWithActualVaue("enableRaft"' "True"));    				return Task.CompletedTask;  			}' overrideWidth: 1224' overrideHeight: 800);
Magic Number,MatterHackers.MatterControl.Tests.Automation,SliceSetingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\SliceSettingsTests.cs,PauseOnLayerTest,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.WaitForName("Cancel Wizard Button");    				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					testRunner.AddItemToBedplate();  					testRunner.StartPrint(pauseAtLayers: "4;2;a;not;6");    					var printer = testRunner.FirstPrinter();    					WaitForLayerAndResume(testRunner' printer' 2);  					WaitForLayerAndResume(testRunner' printer' 4);  					WaitForLayerAndResume(testRunner' printer' 6);    					testRunner.WaitForPrintFinished(printer);  				}    				return Task.CompletedTask;  			}' maxTimeToRun: 120);
Magic Number,MatterHackers.MatterControl.Tests.Automation,SliceSetingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\SliceSettingsTests.cs,PauseOnLayerTest,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.WaitForName("Cancel Wizard Button");    				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					testRunner.AddItemToBedplate();  					testRunner.StartPrint(pauseAtLayers: "4;2;a;not;6");    					var printer = testRunner.FirstPrinter();    					WaitForLayerAndResume(testRunner' printer' 2);  					WaitForLayerAndResume(testRunner' printer' 4);  					WaitForLayerAndResume(testRunner' printer' 6);    					testRunner.WaitForPrintFinished(printer);  				}    				return Task.CompletedTask;  			}' maxTimeToRun: 120);
Magic Number,MatterHackers.MatterControl.Tests.Automation,SliceSetingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\SliceSettingsTests.cs,PauseOnLayerTest,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.WaitForName("Cancel Wizard Button");    				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					testRunner.AddItemToBedplate();  					testRunner.StartPrint(pauseAtLayers: "4;2;a;not;6");    					var printer = testRunner.FirstPrinter();    					WaitForLayerAndResume(testRunner' printer' 2);  					WaitForLayerAndResume(testRunner' printer' 4);  					WaitForLayerAndResume(testRunner' printer' 6);    					testRunner.WaitForPrintFinished(printer);  				}    				return Task.CompletedTask;  			}' maxTimeToRun: 120);
Magic Number,MatterHackers.MatterControl.Tests.Automation,SliceSetingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\SliceSettingsTests.cs,PauseOnLayerTest,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.WaitForName("Cancel Wizard Button");    				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					testRunner.AddItemToBedplate();  					testRunner.StartPrint(pauseAtLayers: "4;2;a;not;6");    					var printer = testRunner.FirstPrinter();    					WaitForLayerAndResume(testRunner' printer' 2);  					WaitForLayerAndResume(testRunner' printer' 4);  					WaitForLayerAndResume(testRunner' printer' 6);    					testRunner.WaitForPrintFinished(printer);  				}    				return Task.CompletedTask;  			}' maxTimeToRun: 120);
Magic Number,MatterHackers.MatterControl.Tests.Automation,SliceSetingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\SliceSettingsTests.cs,CancelWorksAsExpected,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					Assert.AreEqual(1' ApplicationController.Instance.ActivePrinters.Count()' "One printer should exist after add");    					var printer = testRunner.FirstPrinter();  					printer.Settings.SetValue(SettingsKey.cancel_gcode' "G28 ; Cancel GCode");    					testRunner.AddItemToBedplate();    					testRunner.StartPrint(pauseAtLayers: "2");    					// Wait for the Ok button  					testRunner.WaitForName("Yes Button"' 30);  					emulator.RunSlow = true;  					testRunner.ClickByName("Yes Button");    					// Cancel the Printing task  					testRunner.ClickByName("Stop Task Button");    					// Wait for and assert that printing has been canceled  					testRunner.WaitFor(() => printer.Connection.CommunicationState == CommunicationStates.Connected);  					Assert.AreEqual(printer.Connection.CommunicationState' CommunicationStates.Connected);    					// Assert that two G28s were output to the terminal  					int g28Count = printer.TerminalLog.PrinterLines.Where(lineData => lineData.Line.Contains("G28")).Count();  					Assert.AreEqual(2' g28Count' "The terminal log should contain one G28 from Start-GCode and one G28 from Cancel-GCode");  				}    				return Task.CompletedTask;  			}' maxTimeToRun: 120);
Magic Number,MatterHackers.MatterControl.Tests.Automation,SliceSetingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\SliceSettingsTests.cs,CancelWorksAsExpected,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					Assert.AreEqual(1' ApplicationController.Instance.ActivePrinters.Count()' "One printer should exist after add");    					var printer = testRunner.FirstPrinter();  					printer.Settings.SetValue(SettingsKey.cancel_gcode' "G28 ; Cancel GCode");    					testRunner.AddItemToBedplate();    					testRunner.StartPrint(pauseAtLayers: "2");    					// Wait for the Ok button  					testRunner.WaitForName("Yes Button"' 30);  					emulator.RunSlow = true;  					testRunner.ClickByName("Yes Button");    					// Cancel the Printing task  					testRunner.ClickByName("Stop Task Button");    					// Wait for and assert that printing has been canceled  					testRunner.WaitFor(() => printer.Connection.CommunicationState == CommunicationStates.Connected);  					Assert.AreEqual(printer.Connection.CommunicationState' CommunicationStates.Connected);    					// Assert that two G28s were output to the terminal  					int g28Count = printer.TerminalLog.PrinterLines.Where(lineData => lineData.Line.Contains("G28")).Count();  					Assert.AreEqual(2' g28Count' "The terminal log should contain one G28 from Start-GCode and one G28 from Cancel-GCode");  				}    				return Task.CompletedTask;  			}' maxTimeToRun: 120);
Magic Number,MatterHackers.MatterControl.Tests.Automation,SliceSetingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\SliceSettingsTests.cs,CancelWorksAsExpected,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					Assert.AreEqual(1' ApplicationController.Instance.ActivePrinters.Count()' "One printer should exist after add");    					var printer = testRunner.FirstPrinter();  					printer.Settings.SetValue(SettingsKey.cancel_gcode' "G28 ; Cancel GCode");    					testRunner.AddItemToBedplate();    					testRunner.StartPrint(pauseAtLayers: "2");    					// Wait for the Ok button  					testRunner.WaitForName("Yes Button"' 30);  					emulator.RunSlow = true;  					testRunner.ClickByName("Yes Button");    					// Cancel the Printing task  					testRunner.ClickByName("Stop Task Button");    					// Wait for and assert that printing has been canceled  					testRunner.WaitFor(() => printer.Connection.CommunicationState == CommunicationStates.Connected);  					Assert.AreEqual(printer.Connection.CommunicationState' CommunicationStates.Connected);    					// Assert that two G28s were output to the terminal  					int g28Count = printer.TerminalLog.PrinterLines.Where(lineData => lineData.Line.Contains("G28")).Count();  					Assert.AreEqual(2' g28Count' "The terminal log should contain one G28 from Start-GCode and one G28 from Cancel-GCode");  				}    				return Task.CompletedTask;  			}' maxTimeToRun: 120);
Magic Number,MatterHackers.MatterControl.Tests.Automation,SliceSetingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\SliceSettingsTests.cs,WaitForLayerAndResume,The following statement contains a magic number: testRunner.WaitForName("Yes Button"' 15);
Magic Number,MatterHackers.MatterControl.Tests.Automation,SliceSetingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\SliceSettingsTests.cs,WaitForLayerAndResume,The following statement contains a magic number: testRunner.WaitFor(() => printer.Bed.ActiveLayerIndex + 1 == indexToWaitFor' 10' 500);
Magic Number,MatterHackers.MatterControl.Tests.Automation,SliceSetingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\SliceSettingsTests.cs,WaitForLayerAndResume,The following statement contains a magic number: testRunner.WaitFor(() => printer.Bed.ActiveLayerIndex + 1 == indexToWaitFor' 10' 500);
Magic Number,MatterHackers.MatterControl.Tests.Automation,SliceSetingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\SliceSettingsTests.cs,ClearingCheckBoxClearsUserOverride,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.WaitForFirstDraw();    				testRunner.AddAndSelectPrinter("Airwolf 3D"' "HD");    				// Navigate to Local Library  				testRunner.SwitchToPrinterSettings();    				testRunner.ClickByName("Features Tab");    				var printer = testRunner.FirstPrinter();    				CheckAndUncheckSetting(testRunner' printer' SettingsKey.heat_extruder_before_homing' false);    				CheckAndUncheckSetting(testRunner' printer' SettingsKey.has_fan' true);    				return Task.CompletedTask;  			}' overrideWidth: 1224' overrideHeight: 900' maxTimeToRun: 600);
Magic Number,MatterHackers.MatterControl.Tests.Automation,SliceSetingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\SliceSettingsTests.cs,ClearingCheckBoxClearsUserOverride,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.WaitForFirstDraw();    				testRunner.AddAndSelectPrinter("Airwolf 3D"' "HD");    				// Navigate to Local Library  				testRunner.SwitchToPrinterSettings();    				testRunner.ClickByName("Features Tab");    				var printer = testRunner.FirstPrinter();    				CheckAndUncheckSetting(testRunner' printer' SettingsKey.heat_extruder_before_homing' false);    				CheckAndUncheckSetting(testRunner' printer' SettingsKey.has_fan' true);    				return Task.CompletedTask;  			}' overrideWidth: 1224' overrideHeight: 900' maxTimeToRun: 600);
Magic Number,MatterHackers.MatterControl.Tests.Automation,SliceSetingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\SliceSettingsTests.cs,ClearingCheckBoxClearsUserOverride,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.WaitForFirstDraw();    				testRunner.AddAndSelectPrinter("Airwolf 3D"' "HD");    				// Navigate to Local Library  				testRunner.SwitchToPrinterSettings();    				testRunner.ClickByName("Features Tab");    				var printer = testRunner.FirstPrinter();    				CheckAndUncheckSetting(testRunner' printer' SettingsKey.heat_extruder_before_homing' false);    				CheckAndUncheckSetting(testRunner' printer' SettingsKey.has_fan' true);    				return Task.CompletedTask;  			}' overrideWidth: 1224' overrideHeight: 900' maxTimeToRun: 600);
Magic Number,MatterHackers.MatterControl.Tests.Automation,SliceSetingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\SliceSettingsTests.cs,DualExtrusionShowsCorrectHotendData,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					testRunner.ClickByName("Features Tab");    					// only 1 hotend and 1 extruder  					Assert.IsTrue(testRunner.NameExists("Hotend 0"));  					Assert.IsTrue(testRunner.NameExists("Bed TemperatureWidget"));  					Assert.IsFalse(testRunner.NameExists("Hotend 1"' .1));    					testRunner.ClickByName("Hotend 0");    					// assert the temp is set when we first open (it comes from the material)  					MHNumberEdit tempWidget = testRunner.GetWidgetByName("Temperature Input"' out _) as MHNumberEdit;  					Assert.AreEqual(240' (int)tempWidget.Value);    					// change material  					var dropDownLists = testRunner.GetWidgetsByName("Hotend Preset Selector");  					Assert.AreEqual(1' dropDownLists.Count' "There is one. The slice settings and the pop out.");  					DropDownList materialSelector = dropDownLists[0].Widget as DropDownList;  					Assert.AreEqual(""' materialSelector.SelectedValue);    					testRunner.ClickByName("Hotend Preset Selector");  					testRunner.ClickByName("HIPS Menu");    					// check the extruder count  					var extrudeButtons = testRunner.GetWidgetsByName("Extrude Button");  					Assert.AreEqual(1' extrudeButtons.Count' "There should be just one.");    					int hipsGoalTemp = 220;  					testRunner.Delay();    					// assert the temp changed to a new temp  					Assert.AreEqual(hipsGoalTemp'(int) tempWidget.Value' "The goal temp should match the material temp");  					// and the printer heat is off  					Assert.AreEqual(0' (int) emulator.CurrentExtruder.TargetTemperature' "The printer should report the heaters are off");    					// turn on the heater  					testRunner.ClickByName("Toggle Heater");  					testRunner.Delay(1);    					// assert the printer is heating  					Assert.AreEqual(hipsGoalTemp' (int)emulator.CurrentExtruder.TargetTemperature' "The printer should report the expected goal temp");    					// turn off the heater  					testRunner.ClickByName("Toggle Heater");  					testRunner.Delay(1);    					// assert the printer is off  					Assert.AreEqual(0' (int)emulator.CurrentExtruder.TargetTemperature' "The printer should report the heaters are off");    					// type in a temp when the heating is off  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("110");  					testRunner.Type("{Enter}");  					testRunner.Delay();    					// assert the printer is off  					Assert.AreEqual(0' (int)emulator.CurrentExtruder.TargetTemperature);    					// and the heat toggle is showing on  					ICheckbox heatToggle = testRunner.GetWidgetByName("Toggle Heater"' out _) as ICheckbox;  					Assert.IsFalse(heatToggle.Checked);    					// turn it on  					testRunner.ClickByName("Toggle Heater");  					Assert.AreEqual(110' (int)emulator.CurrentExtruder.TargetTemperature);    					// adjust when on  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("104");  					testRunner.Type("{Enter}");  					testRunner.Delay();  					Assert.AreEqual(104' (int)emulator.CurrentExtruder.TargetTemperature);    					// type in 0 and have the heater turn off  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("^a");  					testRunner.Type("0");  					testRunner.Type("{Enter}");  					testRunner.Delay();    					// type in 60 and have the heater turn on  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("^a");  					testRunner.Type("60");  					testRunner.Type("{Enter}");  					testRunner.Delay();  					testRunner.ClickByName("Toggle Heater");  					Assert.AreEqual(60' (int)emulator.CurrentExtruder.TargetTemperature);    					// click the remove override and have it change to default temp  					testRunner.ClickByName("Restore temperature");  					testRunner.WaitFor(() => hipsGoalTemp == emulator.CurrentExtruder.TargetTemperature);  					Assert.AreEqual(hipsGoalTemp' (int)emulator.CurrentExtruder.TargetTemperature' "The printer should report the expected goal temp");    					// type in 60 and have the heater turn on  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("^a");  					testRunner.Type("60");  					testRunner.Type("{Enter}");  					testRunner.Delay();  					Assert.AreEqual(60' (int)emulator.CurrentExtruder.TargetTemperature);    					// type in 0 and have the heater turn off  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("^a");  					testRunner.Type("0");  					testRunner.Type("{Enter}");  					testRunner.Delay();    					// assert the printer is not heating  					Assert.AreEqual(0' (int)emulator.CurrentExtruder.TargetTemperature);  					// and the on toggle is showing off  					Assert.IsFalse(heatToggle.Checked);    					// test that the load filament button works and closes correctly  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("^a");  					testRunner.Type("104");  					testRunner.Type("{Enter}");  					testRunner.Delay();  					testRunner.ClickByName("Load Filament Button");  					testRunner.ClickByName("Load Filament");  					Assert.AreEqual(104' (int)emulator.CurrentExtruder.TargetTemperature);  					testRunner.Delay();  					testRunner.ClickByName("Cancel Wizard Button");  					testRunner.Delay();  					Assert.AreEqual(0' (int)emulator.CurrentExtruder.TargetTemperature);    					testRunner.ClickByName("Hotend 0");  					testRunner.ClickByName("Load Filament Button");  					testRunner.ClickByName("Load Filament");  					testRunner.Delay();  					Assert.AreEqual(104' (int)emulator.CurrentExtruder.TargetTemperature);  					var systemWindow = testRunner.GetWidgetByName("Cancel Wizard Button"' out SystemWindow containingWindow);  					// close the window through windows (alt-f4)  					testRunner.Type("%{F4}");  					Assert.AreEqual(0' (int)emulator.CurrentExtruder.TargetTemperature);    					// Switch back to the general tab  					testRunner.ClickByName("General Tab");    					testRunner.SelectSliceSettingsField(PrinterSettings.Layout.Printer' SettingsKey.extruder_count);  					testRunner.Type("2");  					testRunner.Type("{Enter}");    					// there are now 2 hotends and 2 extruders  					Assert.IsTrue(testRunner.NameExists("Hotend 0"));  					Assert.IsTrue(testRunner.NameExists("Hotend 1"));    					var printer = testRunner.FirstPrinter();    					SetCheckBoxSetting(testRunner' printer' SettingsKey.extruders_share_temperature' true);    					// there is one hotend and 2 extruders  					Assert.IsTrue(testRunner.NameExists("Hotend 0"));  					Assert.IsFalse(testRunner.NameExists("Hotend 1"' .1));    					testRunner.ClickByName("Hotend 0");    					extrudeButtons = testRunner.GetWidgetsByName("Extrude Button");  					Assert.AreEqual(2' extrudeButtons.Count' "Now there should be two.");  				}    				return Task.CompletedTask;  			}' maxTimeToRun: 120);
Magic Number,MatterHackers.MatterControl.Tests.Automation,SliceSetingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\SliceSettingsTests.cs,DualExtrusionShowsCorrectHotendData,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					testRunner.ClickByName("Features Tab");    					// only 1 hotend and 1 extruder  					Assert.IsTrue(testRunner.NameExists("Hotend 0"));  					Assert.IsTrue(testRunner.NameExists("Bed TemperatureWidget"));  					Assert.IsFalse(testRunner.NameExists("Hotend 1"' .1));    					testRunner.ClickByName("Hotend 0");    					// assert the temp is set when we first open (it comes from the material)  					MHNumberEdit tempWidget = testRunner.GetWidgetByName("Temperature Input"' out _) as MHNumberEdit;  					Assert.AreEqual(240' (int)tempWidget.Value);    					// change material  					var dropDownLists = testRunner.GetWidgetsByName("Hotend Preset Selector");  					Assert.AreEqual(1' dropDownLists.Count' "There is one. The slice settings and the pop out.");  					DropDownList materialSelector = dropDownLists[0].Widget as DropDownList;  					Assert.AreEqual(""' materialSelector.SelectedValue);    					testRunner.ClickByName("Hotend Preset Selector");  					testRunner.ClickByName("HIPS Menu");    					// check the extruder count  					var extrudeButtons = testRunner.GetWidgetsByName("Extrude Button");  					Assert.AreEqual(1' extrudeButtons.Count' "There should be just one.");    					int hipsGoalTemp = 220;  					testRunner.Delay();    					// assert the temp changed to a new temp  					Assert.AreEqual(hipsGoalTemp'(int) tempWidget.Value' "The goal temp should match the material temp");  					// and the printer heat is off  					Assert.AreEqual(0' (int) emulator.CurrentExtruder.TargetTemperature' "The printer should report the heaters are off");    					// turn on the heater  					testRunner.ClickByName("Toggle Heater");  					testRunner.Delay(1);    					// assert the printer is heating  					Assert.AreEqual(hipsGoalTemp' (int)emulator.CurrentExtruder.TargetTemperature' "The printer should report the expected goal temp");    					// turn off the heater  					testRunner.ClickByName("Toggle Heater");  					testRunner.Delay(1);    					// assert the printer is off  					Assert.AreEqual(0' (int)emulator.CurrentExtruder.TargetTemperature' "The printer should report the heaters are off");    					// type in a temp when the heating is off  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("110");  					testRunner.Type("{Enter}");  					testRunner.Delay();    					// assert the printer is off  					Assert.AreEqual(0' (int)emulator.CurrentExtruder.TargetTemperature);    					// and the heat toggle is showing on  					ICheckbox heatToggle = testRunner.GetWidgetByName("Toggle Heater"' out _) as ICheckbox;  					Assert.IsFalse(heatToggle.Checked);    					// turn it on  					testRunner.ClickByName("Toggle Heater");  					Assert.AreEqual(110' (int)emulator.CurrentExtruder.TargetTemperature);    					// adjust when on  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("104");  					testRunner.Type("{Enter}");  					testRunner.Delay();  					Assert.AreEqual(104' (int)emulator.CurrentExtruder.TargetTemperature);    					// type in 0 and have the heater turn off  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("^a");  					testRunner.Type("0");  					testRunner.Type("{Enter}");  					testRunner.Delay();    					// type in 60 and have the heater turn on  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("^a");  					testRunner.Type("60");  					testRunner.Type("{Enter}");  					testRunner.Delay();  					testRunner.ClickByName("Toggle Heater");  					Assert.AreEqual(60' (int)emulator.CurrentExtruder.TargetTemperature);    					// click the remove override and have it change to default temp  					testRunner.ClickByName("Restore temperature");  					testRunner.WaitFor(() => hipsGoalTemp == emulator.CurrentExtruder.TargetTemperature);  					Assert.AreEqual(hipsGoalTemp' (int)emulator.CurrentExtruder.TargetTemperature' "The printer should report the expected goal temp");    					// type in 60 and have the heater turn on  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("^a");  					testRunner.Type("60");  					testRunner.Type("{Enter}");  					testRunner.Delay();  					Assert.AreEqual(60' (int)emulator.CurrentExtruder.TargetTemperature);    					// type in 0 and have the heater turn off  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("^a");  					testRunner.Type("0");  					testRunner.Type("{Enter}");  					testRunner.Delay();    					// assert the printer is not heating  					Assert.AreEqual(0' (int)emulator.CurrentExtruder.TargetTemperature);  					// and the on toggle is showing off  					Assert.IsFalse(heatToggle.Checked);    					// test that the load filament button works and closes correctly  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("^a");  					testRunner.Type("104");  					testRunner.Type("{Enter}");  					testRunner.Delay();  					testRunner.ClickByName("Load Filament Button");  					testRunner.ClickByName("Load Filament");  					Assert.AreEqual(104' (int)emulator.CurrentExtruder.TargetTemperature);  					testRunner.Delay();  					testRunner.ClickByName("Cancel Wizard Button");  					testRunner.Delay();  					Assert.AreEqual(0' (int)emulator.CurrentExtruder.TargetTemperature);    					testRunner.ClickByName("Hotend 0");  					testRunner.ClickByName("Load Filament Button");  					testRunner.ClickByName("Load Filament");  					testRunner.Delay();  					Assert.AreEqual(104' (int)emulator.CurrentExtruder.TargetTemperature);  					var systemWindow = testRunner.GetWidgetByName("Cancel Wizard Button"' out SystemWindow containingWindow);  					// close the window through windows (alt-f4)  					testRunner.Type("%{F4}");  					Assert.AreEqual(0' (int)emulator.CurrentExtruder.TargetTemperature);    					// Switch back to the general tab  					testRunner.ClickByName("General Tab");    					testRunner.SelectSliceSettingsField(PrinterSettings.Layout.Printer' SettingsKey.extruder_count);  					testRunner.Type("2");  					testRunner.Type("{Enter}");    					// there are now 2 hotends and 2 extruders  					Assert.IsTrue(testRunner.NameExists("Hotend 0"));  					Assert.IsTrue(testRunner.NameExists("Hotend 1"));    					var printer = testRunner.FirstPrinter();    					SetCheckBoxSetting(testRunner' printer' SettingsKey.extruders_share_temperature' true);    					// there is one hotend and 2 extruders  					Assert.IsTrue(testRunner.NameExists("Hotend 0"));  					Assert.IsFalse(testRunner.NameExists("Hotend 1"' .1));    					testRunner.ClickByName("Hotend 0");    					extrudeButtons = testRunner.GetWidgetsByName("Extrude Button");  					Assert.AreEqual(2' extrudeButtons.Count' "Now there should be two.");  				}    				return Task.CompletedTask;  			}' maxTimeToRun: 120);
Magic Number,MatterHackers.MatterControl.Tests.Automation,SliceSetingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\SliceSettingsTests.cs,DualExtrusionShowsCorrectHotendData,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					testRunner.ClickByName("Features Tab");    					// only 1 hotend and 1 extruder  					Assert.IsTrue(testRunner.NameExists("Hotend 0"));  					Assert.IsTrue(testRunner.NameExists("Bed TemperatureWidget"));  					Assert.IsFalse(testRunner.NameExists("Hotend 1"' .1));    					testRunner.ClickByName("Hotend 0");    					// assert the temp is set when we first open (it comes from the material)  					MHNumberEdit tempWidget = testRunner.GetWidgetByName("Temperature Input"' out _) as MHNumberEdit;  					Assert.AreEqual(240' (int)tempWidget.Value);    					// change material  					var dropDownLists = testRunner.GetWidgetsByName("Hotend Preset Selector");  					Assert.AreEqual(1' dropDownLists.Count' "There is one. The slice settings and the pop out.");  					DropDownList materialSelector = dropDownLists[0].Widget as DropDownList;  					Assert.AreEqual(""' materialSelector.SelectedValue);    					testRunner.ClickByName("Hotend Preset Selector");  					testRunner.ClickByName("HIPS Menu");    					// check the extruder count  					var extrudeButtons = testRunner.GetWidgetsByName("Extrude Button");  					Assert.AreEqual(1' extrudeButtons.Count' "There should be just one.");    					int hipsGoalTemp = 220;  					testRunner.Delay();    					// assert the temp changed to a new temp  					Assert.AreEqual(hipsGoalTemp'(int) tempWidget.Value' "The goal temp should match the material temp");  					// and the printer heat is off  					Assert.AreEqual(0' (int) emulator.CurrentExtruder.TargetTemperature' "The printer should report the heaters are off");    					// turn on the heater  					testRunner.ClickByName("Toggle Heater");  					testRunner.Delay(1);    					// assert the printer is heating  					Assert.AreEqual(hipsGoalTemp' (int)emulator.CurrentExtruder.TargetTemperature' "The printer should report the expected goal temp");    					// turn off the heater  					testRunner.ClickByName("Toggle Heater");  					testRunner.Delay(1);    					// assert the printer is off  					Assert.AreEqual(0' (int)emulator.CurrentExtruder.TargetTemperature' "The printer should report the heaters are off");    					// type in a temp when the heating is off  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("110");  					testRunner.Type("{Enter}");  					testRunner.Delay();    					// assert the printer is off  					Assert.AreEqual(0' (int)emulator.CurrentExtruder.TargetTemperature);    					// and the heat toggle is showing on  					ICheckbox heatToggle = testRunner.GetWidgetByName("Toggle Heater"' out _) as ICheckbox;  					Assert.IsFalse(heatToggle.Checked);    					// turn it on  					testRunner.ClickByName("Toggle Heater");  					Assert.AreEqual(110' (int)emulator.CurrentExtruder.TargetTemperature);    					// adjust when on  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("104");  					testRunner.Type("{Enter}");  					testRunner.Delay();  					Assert.AreEqual(104' (int)emulator.CurrentExtruder.TargetTemperature);    					// type in 0 and have the heater turn off  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("^a");  					testRunner.Type("0");  					testRunner.Type("{Enter}");  					testRunner.Delay();    					// type in 60 and have the heater turn on  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("^a");  					testRunner.Type("60");  					testRunner.Type("{Enter}");  					testRunner.Delay();  					testRunner.ClickByName("Toggle Heater");  					Assert.AreEqual(60' (int)emulator.CurrentExtruder.TargetTemperature);    					// click the remove override and have it change to default temp  					testRunner.ClickByName("Restore temperature");  					testRunner.WaitFor(() => hipsGoalTemp == emulator.CurrentExtruder.TargetTemperature);  					Assert.AreEqual(hipsGoalTemp' (int)emulator.CurrentExtruder.TargetTemperature' "The printer should report the expected goal temp");    					// type in 60 and have the heater turn on  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("^a");  					testRunner.Type("60");  					testRunner.Type("{Enter}");  					testRunner.Delay();  					Assert.AreEqual(60' (int)emulator.CurrentExtruder.TargetTemperature);    					// type in 0 and have the heater turn off  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("^a");  					testRunner.Type("0");  					testRunner.Type("{Enter}");  					testRunner.Delay();    					// assert the printer is not heating  					Assert.AreEqual(0' (int)emulator.CurrentExtruder.TargetTemperature);  					// and the on toggle is showing off  					Assert.IsFalse(heatToggle.Checked);    					// test that the load filament button works and closes correctly  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("^a");  					testRunner.Type("104");  					testRunner.Type("{Enter}");  					testRunner.Delay();  					testRunner.ClickByName("Load Filament Button");  					testRunner.ClickByName("Load Filament");  					Assert.AreEqual(104' (int)emulator.CurrentExtruder.TargetTemperature);  					testRunner.Delay();  					testRunner.ClickByName("Cancel Wizard Button");  					testRunner.Delay();  					Assert.AreEqual(0' (int)emulator.CurrentExtruder.TargetTemperature);    					testRunner.ClickByName("Hotend 0");  					testRunner.ClickByName("Load Filament Button");  					testRunner.ClickByName("Load Filament");  					testRunner.Delay();  					Assert.AreEqual(104' (int)emulator.CurrentExtruder.TargetTemperature);  					var systemWindow = testRunner.GetWidgetByName("Cancel Wizard Button"' out SystemWindow containingWindow);  					// close the window through windows (alt-f4)  					testRunner.Type("%{F4}");  					Assert.AreEqual(0' (int)emulator.CurrentExtruder.TargetTemperature);    					// Switch back to the general tab  					testRunner.ClickByName("General Tab");    					testRunner.SelectSliceSettingsField(PrinterSettings.Layout.Printer' SettingsKey.extruder_count);  					testRunner.Type("2");  					testRunner.Type("{Enter}");    					// there are now 2 hotends and 2 extruders  					Assert.IsTrue(testRunner.NameExists("Hotend 0"));  					Assert.IsTrue(testRunner.NameExists("Hotend 1"));    					var printer = testRunner.FirstPrinter();    					SetCheckBoxSetting(testRunner' printer' SettingsKey.extruders_share_temperature' true);    					// there is one hotend and 2 extruders  					Assert.IsTrue(testRunner.NameExists("Hotend 0"));  					Assert.IsFalse(testRunner.NameExists("Hotend 1"' .1));    					testRunner.ClickByName("Hotend 0");    					extrudeButtons = testRunner.GetWidgetsByName("Extrude Button");  					Assert.AreEqual(2' extrudeButtons.Count' "Now there should be two.");  				}    				return Task.CompletedTask;  			}' maxTimeToRun: 120);
Magic Number,MatterHackers.MatterControl.Tests.Automation,SliceSetingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\SliceSettingsTests.cs,DualExtrusionShowsCorrectHotendData,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					testRunner.ClickByName("Features Tab");    					// only 1 hotend and 1 extruder  					Assert.IsTrue(testRunner.NameExists("Hotend 0"));  					Assert.IsTrue(testRunner.NameExists("Bed TemperatureWidget"));  					Assert.IsFalse(testRunner.NameExists("Hotend 1"' .1));    					testRunner.ClickByName("Hotend 0");    					// assert the temp is set when we first open (it comes from the material)  					MHNumberEdit tempWidget = testRunner.GetWidgetByName("Temperature Input"' out _) as MHNumberEdit;  					Assert.AreEqual(240' (int)tempWidget.Value);    					// change material  					var dropDownLists = testRunner.GetWidgetsByName("Hotend Preset Selector");  					Assert.AreEqual(1' dropDownLists.Count' "There is one. The slice settings and the pop out.");  					DropDownList materialSelector = dropDownLists[0].Widget as DropDownList;  					Assert.AreEqual(""' materialSelector.SelectedValue);    					testRunner.ClickByName("Hotend Preset Selector");  					testRunner.ClickByName("HIPS Menu");    					// check the extruder count  					var extrudeButtons = testRunner.GetWidgetsByName("Extrude Button");  					Assert.AreEqual(1' extrudeButtons.Count' "There should be just one.");    					int hipsGoalTemp = 220;  					testRunner.Delay();    					// assert the temp changed to a new temp  					Assert.AreEqual(hipsGoalTemp'(int) tempWidget.Value' "The goal temp should match the material temp");  					// and the printer heat is off  					Assert.AreEqual(0' (int) emulator.CurrentExtruder.TargetTemperature' "The printer should report the heaters are off");    					// turn on the heater  					testRunner.ClickByName("Toggle Heater");  					testRunner.Delay(1);    					// assert the printer is heating  					Assert.AreEqual(hipsGoalTemp' (int)emulator.CurrentExtruder.TargetTemperature' "The printer should report the expected goal temp");    					// turn off the heater  					testRunner.ClickByName("Toggle Heater");  					testRunner.Delay(1);    					// assert the printer is off  					Assert.AreEqual(0' (int)emulator.CurrentExtruder.TargetTemperature' "The printer should report the heaters are off");    					// type in a temp when the heating is off  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("110");  					testRunner.Type("{Enter}");  					testRunner.Delay();    					// assert the printer is off  					Assert.AreEqual(0' (int)emulator.CurrentExtruder.TargetTemperature);    					// and the heat toggle is showing on  					ICheckbox heatToggle = testRunner.GetWidgetByName("Toggle Heater"' out _) as ICheckbox;  					Assert.IsFalse(heatToggle.Checked);    					// turn it on  					testRunner.ClickByName("Toggle Heater");  					Assert.AreEqual(110' (int)emulator.CurrentExtruder.TargetTemperature);    					// adjust when on  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("104");  					testRunner.Type("{Enter}");  					testRunner.Delay();  					Assert.AreEqual(104' (int)emulator.CurrentExtruder.TargetTemperature);    					// type in 0 and have the heater turn off  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("^a");  					testRunner.Type("0");  					testRunner.Type("{Enter}");  					testRunner.Delay();    					// type in 60 and have the heater turn on  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("^a");  					testRunner.Type("60");  					testRunner.Type("{Enter}");  					testRunner.Delay();  					testRunner.ClickByName("Toggle Heater");  					Assert.AreEqual(60' (int)emulator.CurrentExtruder.TargetTemperature);    					// click the remove override and have it change to default temp  					testRunner.ClickByName("Restore temperature");  					testRunner.WaitFor(() => hipsGoalTemp == emulator.CurrentExtruder.TargetTemperature);  					Assert.AreEqual(hipsGoalTemp' (int)emulator.CurrentExtruder.TargetTemperature' "The printer should report the expected goal temp");    					// type in 60 and have the heater turn on  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("^a");  					testRunner.Type("60");  					testRunner.Type("{Enter}");  					testRunner.Delay();  					Assert.AreEqual(60' (int)emulator.CurrentExtruder.TargetTemperature);    					// type in 0 and have the heater turn off  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("^a");  					testRunner.Type("0");  					testRunner.Type("{Enter}");  					testRunner.Delay();    					// assert the printer is not heating  					Assert.AreEqual(0' (int)emulator.CurrentExtruder.TargetTemperature);  					// and the on toggle is showing off  					Assert.IsFalse(heatToggle.Checked);    					// test that the load filament button works and closes correctly  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("^a");  					testRunner.Type("104");  					testRunner.Type("{Enter}");  					testRunner.Delay();  					testRunner.ClickByName("Load Filament Button");  					testRunner.ClickByName("Load Filament");  					Assert.AreEqual(104' (int)emulator.CurrentExtruder.TargetTemperature);  					testRunner.Delay();  					testRunner.ClickByName("Cancel Wizard Button");  					testRunner.Delay();  					Assert.AreEqual(0' (int)emulator.CurrentExtruder.TargetTemperature);    					testRunner.ClickByName("Hotend 0");  					testRunner.ClickByName("Load Filament Button");  					testRunner.ClickByName("Load Filament");  					testRunner.Delay();  					Assert.AreEqual(104' (int)emulator.CurrentExtruder.TargetTemperature);  					var systemWindow = testRunner.GetWidgetByName("Cancel Wizard Button"' out SystemWindow containingWindow);  					// close the window through windows (alt-f4)  					testRunner.Type("%{F4}");  					Assert.AreEqual(0' (int)emulator.CurrentExtruder.TargetTemperature);    					// Switch back to the general tab  					testRunner.ClickByName("General Tab");    					testRunner.SelectSliceSettingsField(PrinterSettings.Layout.Printer' SettingsKey.extruder_count);  					testRunner.Type("2");  					testRunner.Type("{Enter}");    					// there are now 2 hotends and 2 extruders  					Assert.IsTrue(testRunner.NameExists("Hotend 0"));  					Assert.IsTrue(testRunner.NameExists("Hotend 1"));    					var printer = testRunner.FirstPrinter();    					SetCheckBoxSetting(testRunner' printer' SettingsKey.extruders_share_temperature' true);    					// there is one hotend and 2 extruders  					Assert.IsTrue(testRunner.NameExists("Hotend 0"));  					Assert.IsFalse(testRunner.NameExists("Hotend 1"' .1));    					testRunner.ClickByName("Hotend 0");    					extrudeButtons = testRunner.GetWidgetsByName("Extrude Button");  					Assert.AreEqual(2' extrudeButtons.Count' "Now there should be two.");  				}    				return Task.CompletedTask;  			}' maxTimeToRun: 120);
Magic Number,MatterHackers.MatterControl.Tests.Automation,SliceSetingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\SliceSettingsTests.cs,DualExtrusionShowsCorrectHotendData,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					testRunner.ClickByName("Features Tab");    					// only 1 hotend and 1 extruder  					Assert.IsTrue(testRunner.NameExists("Hotend 0"));  					Assert.IsTrue(testRunner.NameExists("Bed TemperatureWidget"));  					Assert.IsFalse(testRunner.NameExists("Hotend 1"' .1));    					testRunner.ClickByName("Hotend 0");    					// assert the temp is set when we first open (it comes from the material)  					MHNumberEdit tempWidget = testRunner.GetWidgetByName("Temperature Input"' out _) as MHNumberEdit;  					Assert.AreEqual(240' (int)tempWidget.Value);    					// change material  					var dropDownLists = testRunner.GetWidgetsByName("Hotend Preset Selector");  					Assert.AreEqual(1' dropDownLists.Count' "There is one. The slice settings and the pop out.");  					DropDownList materialSelector = dropDownLists[0].Widget as DropDownList;  					Assert.AreEqual(""' materialSelector.SelectedValue);    					testRunner.ClickByName("Hotend Preset Selector");  					testRunner.ClickByName("HIPS Menu");    					// check the extruder count  					var extrudeButtons = testRunner.GetWidgetsByName("Extrude Button");  					Assert.AreEqual(1' extrudeButtons.Count' "There should be just one.");    					int hipsGoalTemp = 220;  					testRunner.Delay();    					// assert the temp changed to a new temp  					Assert.AreEqual(hipsGoalTemp'(int) tempWidget.Value' "The goal temp should match the material temp");  					// and the printer heat is off  					Assert.AreEqual(0' (int) emulator.CurrentExtruder.TargetTemperature' "The printer should report the heaters are off");    					// turn on the heater  					testRunner.ClickByName("Toggle Heater");  					testRunner.Delay(1);    					// assert the printer is heating  					Assert.AreEqual(hipsGoalTemp' (int)emulator.CurrentExtruder.TargetTemperature' "The printer should report the expected goal temp");    					// turn off the heater  					testRunner.ClickByName("Toggle Heater");  					testRunner.Delay(1);    					// assert the printer is off  					Assert.AreEqual(0' (int)emulator.CurrentExtruder.TargetTemperature' "The printer should report the heaters are off");    					// type in a temp when the heating is off  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("110");  					testRunner.Type("{Enter}");  					testRunner.Delay();    					// assert the printer is off  					Assert.AreEqual(0' (int)emulator.CurrentExtruder.TargetTemperature);    					// and the heat toggle is showing on  					ICheckbox heatToggle = testRunner.GetWidgetByName("Toggle Heater"' out _) as ICheckbox;  					Assert.IsFalse(heatToggle.Checked);    					// turn it on  					testRunner.ClickByName("Toggle Heater");  					Assert.AreEqual(110' (int)emulator.CurrentExtruder.TargetTemperature);    					// adjust when on  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("104");  					testRunner.Type("{Enter}");  					testRunner.Delay();  					Assert.AreEqual(104' (int)emulator.CurrentExtruder.TargetTemperature);    					// type in 0 and have the heater turn off  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("^a");  					testRunner.Type("0");  					testRunner.Type("{Enter}");  					testRunner.Delay();    					// type in 60 and have the heater turn on  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("^a");  					testRunner.Type("60");  					testRunner.Type("{Enter}");  					testRunner.Delay();  					testRunner.ClickByName("Toggle Heater");  					Assert.AreEqual(60' (int)emulator.CurrentExtruder.TargetTemperature);    					// click the remove override and have it change to default temp  					testRunner.ClickByName("Restore temperature");  					testRunner.WaitFor(() => hipsGoalTemp == emulator.CurrentExtruder.TargetTemperature);  					Assert.AreEqual(hipsGoalTemp' (int)emulator.CurrentExtruder.TargetTemperature' "The printer should report the expected goal temp");    					// type in 60 and have the heater turn on  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("^a");  					testRunner.Type("60");  					testRunner.Type("{Enter}");  					testRunner.Delay();  					Assert.AreEqual(60' (int)emulator.CurrentExtruder.TargetTemperature);    					// type in 0 and have the heater turn off  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("^a");  					testRunner.Type("0");  					testRunner.Type("{Enter}");  					testRunner.Delay();    					// assert the printer is not heating  					Assert.AreEqual(0' (int)emulator.CurrentExtruder.TargetTemperature);  					// and the on toggle is showing off  					Assert.IsFalse(heatToggle.Checked);    					// test that the load filament button works and closes correctly  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("^a");  					testRunner.Type("104");  					testRunner.Type("{Enter}");  					testRunner.Delay();  					testRunner.ClickByName("Load Filament Button");  					testRunner.ClickByName("Load Filament");  					Assert.AreEqual(104' (int)emulator.CurrentExtruder.TargetTemperature);  					testRunner.Delay();  					testRunner.ClickByName("Cancel Wizard Button");  					testRunner.Delay();  					Assert.AreEqual(0' (int)emulator.CurrentExtruder.TargetTemperature);    					testRunner.ClickByName("Hotend 0");  					testRunner.ClickByName("Load Filament Button");  					testRunner.ClickByName("Load Filament");  					testRunner.Delay();  					Assert.AreEqual(104' (int)emulator.CurrentExtruder.TargetTemperature);  					var systemWindow = testRunner.GetWidgetByName("Cancel Wizard Button"' out SystemWindow containingWindow);  					// close the window through windows (alt-f4)  					testRunner.Type("%{F4}");  					Assert.AreEqual(0' (int)emulator.CurrentExtruder.TargetTemperature);    					// Switch back to the general tab  					testRunner.ClickByName("General Tab");    					testRunner.SelectSliceSettingsField(PrinterSettings.Layout.Printer' SettingsKey.extruder_count);  					testRunner.Type("2");  					testRunner.Type("{Enter}");    					// there are now 2 hotends and 2 extruders  					Assert.IsTrue(testRunner.NameExists("Hotend 0"));  					Assert.IsTrue(testRunner.NameExists("Hotend 1"));    					var printer = testRunner.FirstPrinter();    					SetCheckBoxSetting(testRunner' printer' SettingsKey.extruders_share_temperature' true);    					// there is one hotend and 2 extruders  					Assert.IsTrue(testRunner.NameExists("Hotend 0"));  					Assert.IsFalse(testRunner.NameExists("Hotend 1"' .1));    					testRunner.ClickByName("Hotend 0");    					extrudeButtons = testRunner.GetWidgetsByName("Extrude Button");  					Assert.AreEqual(2' extrudeButtons.Count' "Now there should be two.");  				}    				return Task.CompletedTask;  			}' maxTimeToRun: 120);
Magic Number,MatterHackers.MatterControl.Tests.Automation,SliceSetingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\SliceSettingsTests.cs,DualExtrusionShowsCorrectHotendData,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					testRunner.ClickByName("Features Tab");    					// only 1 hotend and 1 extruder  					Assert.IsTrue(testRunner.NameExists("Hotend 0"));  					Assert.IsTrue(testRunner.NameExists("Bed TemperatureWidget"));  					Assert.IsFalse(testRunner.NameExists("Hotend 1"' .1));    					testRunner.ClickByName("Hotend 0");    					// assert the temp is set when we first open (it comes from the material)  					MHNumberEdit tempWidget = testRunner.GetWidgetByName("Temperature Input"' out _) as MHNumberEdit;  					Assert.AreEqual(240' (int)tempWidget.Value);    					// change material  					var dropDownLists = testRunner.GetWidgetsByName("Hotend Preset Selector");  					Assert.AreEqual(1' dropDownLists.Count' "There is one. The slice settings and the pop out.");  					DropDownList materialSelector = dropDownLists[0].Widget as DropDownList;  					Assert.AreEqual(""' materialSelector.SelectedValue);    					testRunner.ClickByName("Hotend Preset Selector");  					testRunner.ClickByName("HIPS Menu");    					// check the extruder count  					var extrudeButtons = testRunner.GetWidgetsByName("Extrude Button");  					Assert.AreEqual(1' extrudeButtons.Count' "There should be just one.");    					int hipsGoalTemp = 220;  					testRunner.Delay();    					// assert the temp changed to a new temp  					Assert.AreEqual(hipsGoalTemp'(int) tempWidget.Value' "The goal temp should match the material temp");  					// and the printer heat is off  					Assert.AreEqual(0' (int) emulator.CurrentExtruder.TargetTemperature' "The printer should report the heaters are off");    					// turn on the heater  					testRunner.ClickByName("Toggle Heater");  					testRunner.Delay(1);    					// assert the printer is heating  					Assert.AreEqual(hipsGoalTemp' (int)emulator.CurrentExtruder.TargetTemperature' "The printer should report the expected goal temp");    					// turn off the heater  					testRunner.ClickByName("Toggle Heater");  					testRunner.Delay(1);    					// assert the printer is off  					Assert.AreEqual(0' (int)emulator.CurrentExtruder.TargetTemperature' "The printer should report the heaters are off");    					// type in a temp when the heating is off  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("110");  					testRunner.Type("{Enter}");  					testRunner.Delay();    					// assert the printer is off  					Assert.AreEqual(0' (int)emulator.CurrentExtruder.TargetTemperature);    					// and the heat toggle is showing on  					ICheckbox heatToggle = testRunner.GetWidgetByName("Toggle Heater"' out _) as ICheckbox;  					Assert.IsFalse(heatToggle.Checked);    					// turn it on  					testRunner.ClickByName("Toggle Heater");  					Assert.AreEqual(110' (int)emulator.CurrentExtruder.TargetTemperature);    					// adjust when on  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("104");  					testRunner.Type("{Enter}");  					testRunner.Delay();  					Assert.AreEqual(104' (int)emulator.CurrentExtruder.TargetTemperature);    					// type in 0 and have the heater turn off  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("^a");  					testRunner.Type("0");  					testRunner.Type("{Enter}");  					testRunner.Delay();    					// type in 60 and have the heater turn on  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("^a");  					testRunner.Type("60");  					testRunner.Type("{Enter}");  					testRunner.Delay();  					testRunner.ClickByName("Toggle Heater");  					Assert.AreEqual(60' (int)emulator.CurrentExtruder.TargetTemperature);    					// click the remove override and have it change to default temp  					testRunner.ClickByName("Restore temperature");  					testRunner.WaitFor(() => hipsGoalTemp == emulator.CurrentExtruder.TargetTemperature);  					Assert.AreEqual(hipsGoalTemp' (int)emulator.CurrentExtruder.TargetTemperature' "The printer should report the expected goal temp");    					// type in 60 and have the heater turn on  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("^a");  					testRunner.Type("60");  					testRunner.Type("{Enter}");  					testRunner.Delay();  					Assert.AreEqual(60' (int)emulator.CurrentExtruder.TargetTemperature);    					// type in 0 and have the heater turn off  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("^a");  					testRunner.Type("0");  					testRunner.Type("{Enter}");  					testRunner.Delay();    					// assert the printer is not heating  					Assert.AreEqual(0' (int)emulator.CurrentExtruder.TargetTemperature);  					// and the on toggle is showing off  					Assert.IsFalse(heatToggle.Checked);    					// test that the load filament button works and closes correctly  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("^a");  					testRunner.Type("104");  					testRunner.Type("{Enter}");  					testRunner.Delay();  					testRunner.ClickByName("Load Filament Button");  					testRunner.ClickByName("Load Filament");  					Assert.AreEqual(104' (int)emulator.CurrentExtruder.TargetTemperature);  					testRunner.Delay();  					testRunner.ClickByName("Cancel Wizard Button");  					testRunner.Delay();  					Assert.AreEqual(0' (int)emulator.CurrentExtruder.TargetTemperature);    					testRunner.ClickByName("Hotend 0");  					testRunner.ClickByName("Load Filament Button");  					testRunner.ClickByName("Load Filament");  					testRunner.Delay();  					Assert.AreEqual(104' (int)emulator.CurrentExtruder.TargetTemperature);  					var systemWindow = testRunner.GetWidgetByName("Cancel Wizard Button"' out SystemWindow containingWindow);  					// close the window through windows (alt-f4)  					testRunner.Type("%{F4}");  					Assert.AreEqual(0' (int)emulator.CurrentExtruder.TargetTemperature);    					// Switch back to the general tab  					testRunner.ClickByName("General Tab");    					testRunner.SelectSliceSettingsField(PrinterSettings.Layout.Printer' SettingsKey.extruder_count);  					testRunner.Type("2");  					testRunner.Type("{Enter}");    					// there are now 2 hotends and 2 extruders  					Assert.IsTrue(testRunner.NameExists("Hotend 0"));  					Assert.IsTrue(testRunner.NameExists("Hotend 1"));    					var printer = testRunner.FirstPrinter();    					SetCheckBoxSetting(testRunner' printer' SettingsKey.extruders_share_temperature' true);    					// there is one hotend and 2 extruders  					Assert.IsTrue(testRunner.NameExists("Hotend 0"));  					Assert.IsFalse(testRunner.NameExists("Hotend 1"' .1));    					testRunner.ClickByName("Hotend 0");    					extrudeButtons = testRunner.GetWidgetsByName("Extrude Button");  					Assert.AreEqual(2' extrudeButtons.Count' "Now there should be two.");  				}    				return Task.CompletedTask;  			}' maxTimeToRun: 120);
Magic Number,MatterHackers.MatterControl.Tests.Automation,SliceSetingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\SliceSettingsTests.cs,DualExtrusionShowsCorrectHotendData,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					testRunner.ClickByName("Features Tab");    					// only 1 hotend and 1 extruder  					Assert.IsTrue(testRunner.NameExists("Hotend 0"));  					Assert.IsTrue(testRunner.NameExists("Bed TemperatureWidget"));  					Assert.IsFalse(testRunner.NameExists("Hotend 1"' .1));    					testRunner.ClickByName("Hotend 0");    					// assert the temp is set when we first open (it comes from the material)  					MHNumberEdit tempWidget = testRunner.GetWidgetByName("Temperature Input"' out _) as MHNumberEdit;  					Assert.AreEqual(240' (int)tempWidget.Value);    					// change material  					var dropDownLists = testRunner.GetWidgetsByName("Hotend Preset Selector");  					Assert.AreEqual(1' dropDownLists.Count' "There is one. The slice settings and the pop out.");  					DropDownList materialSelector = dropDownLists[0].Widget as DropDownList;  					Assert.AreEqual(""' materialSelector.SelectedValue);    					testRunner.ClickByName("Hotend Preset Selector");  					testRunner.ClickByName("HIPS Menu");    					// check the extruder count  					var extrudeButtons = testRunner.GetWidgetsByName("Extrude Button");  					Assert.AreEqual(1' extrudeButtons.Count' "There should be just one.");    					int hipsGoalTemp = 220;  					testRunner.Delay();    					// assert the temp changed to a new temp  					Assert.AreEqual(hipsGoalTemp'(int) tempWidget.Value' "The goal temp should match the material temp");  					// and the printer heat is off  					Assert.AreEqual(0' (int) emulator.CurrentExtruder.TargetTemperature' "The printer should report the heaters are off");    					// turn on the heater  					testRunner.ClickByName("Toggle Heater");  					testRunner.Delay(1);    					// assert the printer is heating  					Assert.AreEqual(hipsGoalTemp' (int)emulator.CurrentExtruder.TargetTemperature' "The printer should report the expected goal temp");    					// turn off the heater  					testRunner.ClickByName("Toggle Heater");  					testRunner.Delay(1);    					// assert the printer is off  					Assert.AreEqual(0' (int)emulator.CurrentExtruder.TargetTemperature' "The printer should report the heaters are off");    					// type in a temp when the heating is off  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("110");  					testRunner.Type("{Enter}");  					testRunner.Delay();    					// assert the printer is off  					Assert.AreEqual(0' (int)emulator.CurrentExtruder.TargetTemperature);    					// and the heat toggle is showing on  					ICheckbox heatToggle = testRunner.GetWidgetByName("Toggle Heater"' out _) as ICheckbox;  					Assert.IsFalse(heatToggle.Checked);    					// turn it on  					testRunner.ClickByName("Toggle Heater");  					Assert.AreEqual(110' (int)emulator.CurrentExtruder.TargetTemperature);    					// adjust when on  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("104");  					testRunner.Type("{Enter}");  					testRunner.Delay();  					Assert.AreEqual(104' (int)emulator.CurrentExtruder.TargetTemperature);    					// type in 0 and have the heater turn off  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("^a");  					testRunner.Type("0");  					testRunner.Type("{Enter}");  					testRunner.Delay();    					// type in 60 and have the heater turn on  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("^a");  					testRunner.Type("60");  					testRunner.Type("{Enter}");  					testRunner.Delay();  					testRunner.ClickByName("Toggle Heater");  					Assert.AreEqual(60' (int)emulator.CurrentExtruder.TargetTemperature);    					// click the remove override and have it change to default temp  					testRunner.ClickByName("Restore temperature");  					testRunner.WaitFor(() => hipsGoalTemp == emulator.CurrentExtruder.TargetTemperature);  					Assert.AreEqual(hipsGoalTemp' (int)emulator.CurrentExtruder.TargetTemperature' "The printer should report the expected goal temp");    					// type in 60 and have the heater turn on  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("^a");  					testRunner.Type("60");  					testRunner.Type("{Enter}");  					testRunner.Delay();  					Assert.AreEqual(60' (int)emulator.CurrentExtruder.TargetTemperature);    					// type in 0 and have the heater turn off  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("^a");  					testRunner.Type("0");  					testRunner.Type("{Enter}");  					testRunner.Delay();    					// assert the printer is not heating  					Assert.AreEqual(0' (int)emulator.CurrentExtruder.TargetTemperature);  					// and the on toggle is showing off  					Assert.IsFalse(heatToggle.Checked);    					// test that the load filament button works and closes correctly  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("^a");  					testRunner.Type("104");  					testRunner.Type("{Enter}");  					testRunner.Delay();  					testRunner.ClickByName("Load Filament Button");  					testRunner.ClickByName("Load Filament");  					Assert.AreEqual(104' (int)emulator.CurrentExtruder.TargetTemperature);  					testRunner.Delay();  					testRunner.ClickByName("Cancel Wizard Button");  					testRunner.Delay();  					Assert.AreEqual(0' (int)emulator.CurrentExtruder.TargetTemperature);    					testRunner.ClickByName("Hotend 0");  					testRunner.ClickByName("Load Filament Button");  					testRunner.ClickByName("Load Filament");  					testRunner.Delay();  					Assert.AreEqual(104' (int)emulator.CurrentExtruder.TargetTemperature);  					var systemWindow = testRunner.GetWidgetByName("Cancel Wizard Button"' out SystemWindow containingWindow);  					// close the window through windows (alt-f4)  					testRunner.Type("%{F4}");  					Assert.AreEqual(0' (int)emulator.CurrentExtruder.TargetTemperature);    					// Switch back to the general tab  					testRunner.ClickByName("General Tab");    					testRunner.SelectSliceSettingsField(PrinterSettings.Layout.Printer' SettingsKey.extruder_count);  					testRunner.Type("2");  					testRunner.Type("{Enter}");    					// there are now 2 hotends and 2 extruders  					Assert.IsTrue(testRunner.NameExists("Hotend 0"));  					Assert.IsTrue(testRunner.NameExists("Hotend 1"));    					var printer = testRunner.FirstPrinter();    					SetCheckBoxSetting(testRunner' printer' SettingsKey.extruders_share_temperature' true);    					// there is one hotend and 2 extruders  					Assert.IsTrue(testRunner.NameExists("Hotend 0"));  					Assert.IsFalse(testRunner.NameExists("Hotend 1"' .1));    					testRunner.ClickByName("Hotend 0");    					extrudeButtons = testRunner.GetWidgetsByName("Extrude Button");  					Assert.AreEqual(2' extrudeButtons.Count' "Now there should be two.");  				}    				return Task.CompletedTask;  			}' maxTimeToRun: 120);
Magic Number,MatterHackers.MatterControl.Tests.Automation,SliceSetingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\SliceSettingsTests.cs,DualExtrusionShowsCorrectHotendData,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					testRunner.ClickByName("Features Tab");    					// only 1 hotend and 1 extruder  					Assert.IsTrue(testRunner.NameExists("Hotend 0"));  					Assert.IsTrue(testRunner.NameExists("Bed TemperatureWidget"));  					Assert.IsFalse(testRunner.NameExists("Hotend 1"' .1));    					testRunner.ClickByName("Hotend 0");    					// assert the temp is set when we first open (it comes from the material)  					MHNumberEdit tempWidget = testRunner.GetWidgetByName("Temperature Input"' out _) as MHNumberEdit;  					Assert.AreEqual(240' (int)tempWidget.Value);    					// change material  					var dropDownLists = testRunner.GetWidgetsByName("Hotend Preset Selector");  					Assert.AreEqual(1' dropDownLists.Count' "There is one. The slice settings and the pop out.");  					DropDownList materialSelector = dropDownLists[0].Widget as DropDownList;  					Assert.AreEqual(""' materialSelector.SelectedValue);    					testRunner.ClickByName("Hotend Preset Selector");  					testRunner.ClickByName("HIPS Menu");    					// check the extruder count  					var extrudeButtons = testRunner.GetWidgetsByName("Extrude Button");  					Assert.AreEqual(1' extrudeButtons.Count' "There should be just one.");    					int hipsGoalTemp = 220;  					testRunner.Delay();    					// assert the temp changed to a new temp  					Assert.AreEqual(hipsGoalTemp'(int) tempWidget.Value' "The goal temp should match the material temp");  					// and the printer heat is off  					Assert.AreEqual(0' (int) emulator.CurrentExtruder.TargetTemperature' "The printer should report the heaters are off");    					// turn on the heater  					testRunner.ClickByName("Toggle Heater");  					testRunner.Delay(1);    					// assert the printer is heating  					Assert.AreEqual(hipsGoalTemp' (int)emulator.CurrentExtruder.TargetTemperature' "The printer should report the expected goal temp");    					// turn off the heater  					testRunner.ClickByName("Toggle Heater");  					testRunner.Delay(1);    					// assert the printer is off  					Assert.AreEqual(0' (int)emulator.CurrentExtruder.TargetTemperature' "The printer should report the heaters are off");    					// type in a temp when the heating is off  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("110");  					testRunner.Type("{Enter}");  					testRunner.Delay();    					// assert the printer is off  					Assert.AreEqual(0' (int)emulator.CurrentExtruder.TargetTemperature);    					// and the heat toggle is showing on  					ICheckbox heatToggle = testRunner.GetWidgetByName("Toggle Heater"' out _) as ICheckbox;  					Assert.IsFalse(heatToggle.Checked);    					// turn it on  					testRunner.ClickByName("Toggle Heater");  					Assert.AreEqual(110' (int)emulator.CurrentExtruder.TargetTemperature);    					// adjust when on  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("104");  					testRunner.Type("{Enter}");  					testRunner.Delay();  					Assert.AreEqual(104' (int)emulator.CurrentExtruder.TargetTemperature);    					// type in 0 and have the heater turn off  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("^a");  					testRunner.Type("0");  					testRunner.Type("{Enter}");  					testRunner.Delay();    					// type in 60 and have the heater turn on  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("^a");  					testRunner.Type("60");  					testRunner.Type("{Enter}");  					testRunner.Delay();  					testRunner.ClickByName("Toggle Heater");  					Assert.AreEqual(60' (int)emulator.CurrentExtruder.TargetTemperature);    					// click the remove override and have it change to default temp  					testRunner.ClickByName("Restore temperature");  					testRunner.WaitFor(() => hipsGoalTemp == emulator.CurrentExtruder.TargetTemperature);  					Assert.AreEqual(hipsGoalTemp' (int)emulator.CurrentExtruder.TargetTemperature' "The printer should report the expected goal temp");    					// type in 60 and have the heater turn on  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("^a");  					testRunner.Type("60");  					testRunner.Type("{Enter}");  					testRunner.Delay();  					Assert.AreEqual(60' (int)emulator.CurrentExtruder.TargetTemperature);    					// type in 0 and have the heater turn off  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("^a");  					testRunner.Type("0");  					testRunner.Type("{Enter}");  					testRunner.Delay();    					// assert the printer is not heating  					Assert.AreEqual(0' (int)emulator.CurrentExtruder.TargetTemperature);  					// and the on toggle is showing off  					Assert.IsFalse(heatToggle.Checked);    					// test that the load filament button works and closes correctly  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("^a");  					testRunner.Type("104");  					testRunner.Type("{Enter}");  					testRunner.Delay();  					testRunner.ClickByName("Load Filament Button");  					testRunner.ClickByName("Load Filament");  					Assert.AreEqual(104' (int)emulator.CurrentExtruder.TargetTemperature);  					testRunner.Delay();  					testRunner.ClickByName("Cancel Wizard Button");  					testRunner.Delay();  					Assert.AreEqual(0' (int)emulator.CurrentExtruder.TargetTemperature);    					testRunner.ClickByName("Hotend 0");  					testRunner.ClickByName("Load Filament Button");  					testRunner.ClickByName("Load Filament");  					testRunner.Delay();  					Assert.AreEqual(104' (int)emulator.CurrentExtruder.TargetTemperature);  					var systemWindow = testRunner.GetWidgetByName("Cancel Wizard Button"' out SystemWindow containingWindow);  					// close the window through windows (alt-f4)  					testRunner.Type("%{F4}");  					Assert.AreEqual(0' (int)emulator.CurrentExtruder.TargetTemperature);    					// Switch back to the general tab  					testRunner.ClickByName("General Tab");    					testRunner.SelectSliceSettingsField(PrinterSettings.Layout.Printer' SettingsKey.extruder_count);  					testRunner.Type("2");  					testRunner.Type("{Enter}");    					// there are now 2 hotends and 2 extruders  					Assert.IsTrue(testRunner.NameExists("Hotend 0"));  					Assert.IsTrue(testRunner.NameExists("Hotend 1"));    					var printer = testRunner.FirstPrinter();    					SetCheckBoxSetting(testRunner' printer' SettingsKey.extruders_share_temperature' true);    					// there is one hotend and 2 extruders  					Assert.IsTrue(testRunner.NameExists("Hotend 0"));  					Assert.IsFalse(testRunner.NameExists("Hotend 1"' .1));    					testRunner.ClickByName("Hotend 0");    					extrudeButtons = testRunner.GetWidgetsByName("Extrude Button");  					Assert.AreEqual(2' extrudeButtons.Count' "Now there should be two.");  				}    				return Task.CompletedTask;  			}' maxTimeToRun: 120);
Magic Number,MatterHackers.MatterControl.Tests.Automation,SliceSetingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\SliceSettingsTests.cs,DualExtrusionShowsCorrectHotendData,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					testRunner.ClickByName("Features Tab");    					// only 1 hotend and 1 extruder  					Assert.IsTrue(testRunner.NameExists("Hotend 0"));  					Assert.IsTrue(testRunner.NameExists("Bed TemperatureWidget"));  					Assert.IsFalse(testRunner.NameExists("Hotend 1"' .1));    					testRunner.ClickByName("Hotend 0");    					// assert the temp is set when we first open (it comes from the material)  					MHNumberEdit tempWidget = testRunner.GetWidgetByName("Temperature Input"' out _) as MHNumberEdit;  					Assert.AreEqual(240' (int)tempWidget.Value);    					// change material  					var dropDownLists = testRunner.GetWidgetsByName("Hotend Preset Selector");  					Assert.AreEqual(1' dropDownLists.Count' "There is one. The slice settings and the pop out.");  					DropDownList materialSelector = dropDownLists[0].Widget as DropDownList;  					Assert.AreEqual(""' materialSelector.SelectedValue);    					testRunner.ClickByName("Hotend Preset Selector");  					testRunner.ClickByName("HIPS Menu");    					// check the extruder count  					var extrudeButtons = testRunner.GetWidgetsByName("Extrude Button");  					Assert.AreEqual(1' extrudeButtons.Count' "There should be just one.");    					int hipsGoalTemp = 220;  					testRunner.Delay();    					// assert the temp changed to a new temp  					Assert.AreEqual(hipsGoalTemp'(int) tempWidget.Value' "The goal temp should match the material temp");  					// and the printer heat is off  					Assert.AreEqual(0' (int) emulator.CurrentExtruder.TargetTemperature' "The printer should report the heaters are off");    					// turn on the heater  					testRunner.ClickByName("Toggle Heater");  					testRunner.Delay(1);    					// assert the printer is heating  					Assert.AreEqual(hipsGoalTemp' (int)emulator.CurrentExtruder.TargetTemperature' "The printer should report the expected goal temp");    					// turn off the heater  					testRunner.ClickByName("Toggle Heater");  					testRunner.Delay(1);    					// assert the printer is off  					Assert.AreEqual(0' (int)emulator.CurrentExtruder.TargetTemperature' "The printer should report the heaters are off");    					// type in a temp when the heating is off  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("110");  					testRunner.Type("{Enter}");  					testRunner.Delay();    					// assert the printer is off  					Assert.AreEqual(0' (int)emulator.CurrentExtruder.TargetTemperature);    					// and the heat toggle is showing on  					ICheckbox heatToggle = testRunner.GetWidgetByName("Toggle Heater"' out _) as ICheckbox;  					Assert.IsFalse(heatToggle.Checked);    					// turn it on  					testRunner.ClickByName("Toggle Heater");  					Assert.AreEqual(110' (int)emulator.CurrentExtruder.TargetTemperature);    					// adjust when on  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("104");  					testRunner.Type("{Enter}");  					testRunner.Delay();  					Assert.AreEqual(104' (int)emulator.CurrentExtruder.TargetTemperature);    					// type in 0 and have the heater turn off  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("^a");  					testRunner.Type("0");  					testRunner.Type("{Enter}");  					testRunner.Delay();    					// type in 60 and have the heater turn on  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("^a");  					testRunner.Type("60");  					testRunner.Type("{Enter}");  					testRunner.Delay();  					testRunner.ClickByName("Toggle Heater");  					Assert.AreEqual(60' (int)emulator.CurrentExtruder.TargetTemperature);    					// click the remove override and have it change to default temp  					testRunner.ClickByName("Restore temperature");  					testRunner.WaitFor(() => hipsGoalTemp == emulator.CurrentExtruder.TargetTemperature);  					Assert.AreEqual(hipsGoalTemp' (int)emulator.CurrentExtruder.TargetTemperature' "The printer should report the expected goal temp");    					// type in 60 and have the heater turn on  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("^a");  					testRunner.Type("60");  					testRunner.Type("{Enter}");  					testRunner.Delay();  					Assert.AreEqual(60' (int)emulator.CurrentExtruder.TargetTemperature);    					// type in 0 and have the heater turn off  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("^a");  					testRunner.Type("0");  					testRunner.Type("{Enter}");  					testRunner.Delay();    					// assert the printer is not heating  					Assert.AreEqual(0' (int)emulator.CurrentExtruder.TargetTemperature);  					// and the on toggle is showing off  					Assert.IsFalse(heatToggle.Checked);    					// test that the load filament button works and closes correctly  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("^a");  					testRunner.Type("104");  					testRunner.Type("{Enter}");  					testRunner.Delay();  					testRunner.ClickByName("Load Filament Button");  					testRunner.ClickByName("Load Filament");  					Assert.AreEqual(104' (int)emulator.CurrentExtruder.TargetTemperature);  					testRunner.Delay();  					testRunner.ClickByName("Cancel Wizard Button");  					testRunner.Delay();  					Assert.AreEqual(0' (int)emulator.CurrentExtruder.TargetTemperature);    					testRunner.ClickByName("Hotend 0");  					testRunner.ClickByName("Load Filament Button");  					testRunner.ClickByName("Load Filament");  					testRunner.Delay();  					Assert.AreEqual(104' (int)emulator.CurrentExtruder.TargetTemperature);  					var systemWindow = testRunner.GetWidgetByName("Cancel Wizard Button"' out SystemWindow containingWindow);  					// close the window through windows (alt-f4)  					testRunner.Type("%{F4}");  					Assert.AreEqual(0' (int)emulator.CurrentExtruder.TargetTemperature);    					// Switch back to the general tab  					testRunner.ClickByName("General Tab");    					testRunner.SelectSliceSettingsField(PrinterSettings.Layout.Printer' SettingsKey.extruder_count);  					testRunner.Type("2");  					testRunner.Type("{Enter}");    					// there are now 2 hotends and 2 extruders  					Assert.IsTrue(testRunner.NameExists("Hotend 0"));  					Assert.IsTrue(testRunner.NameExists("Hotend 1"));    					var printer = testRunner.FirstPrinter();    					SetCheckBoxSetting(testRunner' printer' SettingsKey.extruders_share_temperature' true);    					// there is one hotend and 2 extruders  					Assert.IsTrue(testRunner.NameExists("Hotend 0"));  					Assert.IsFalse(testRunner.NameExists("Hotend 1"' .1));    					testRunner.ClickByName("Hotend 0");    					extrudeButtons = testRunner.GetWidgetsByName("Extrude Button");  					Assert.AreEqual(2' extrudeButtons.Count' "Now there should be two.");  				}    				return Task.CompletedTask;  			}' maxTimeToRun: 120);
Magic Number,MatterHackers.MatterControl.Tests.Automation,SliceSetingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\SliceSettingsTests.cs,DualExtrusionShowsCorrectHotendData,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					testRunner.ClickByName("Features Tab");    					// only 1 hotend and 1 extruder  					Assert.IsTrue(testRunner.NameExists("Hotend 0"));  					Assert.IsTrue(testRunner.NameExists("Bed TemperatureWidget"));  					Assert.IsFalse(testRunner.NameExists("Hotend 1"' .1));    					testRunner.ClickByName("Hotend 0");    					// assert the temp is set when we first open (it comes from the material)  					MHNumberEdit tempWidget = testRunner.GetWidgetByName("Temperature Input"' out _) as MHNumberEdit;  					Assert.AreEqual(240' (int)tempWidget.Value);    					// change material  					var dropDownLists = testRunner.GetWidgetsByName("Hotend Preset Selector");  					Assert.AreEqual(1' dropDownLists.Count' "There is one. The slice settings and the pop out.");  					DropDownList materialSelector = dropDownLists[0].Widget as DropDownList;  					Assert.AreEqual(""' materialSelector.SelectedValue);    					testRunner.ClickByName("Hotend Preset Selector");  					testRunner.ClickByName("HIPS Menu");    					// check the extruder count  					var extrudeButtons = testRunner.GetWidgetsByName("Extrude Button");  					Assert.AreEqual(1' extrudeButtons.Count' "There should be just one.");    					int hipsGoalTemp = 220;  					testRunner.Delay();    					// assert the temp changed to a new temp  					Assert.AreEqual(hipsGoalTemp'(int) tempWidget.Value' "The goal temp should match the material temp");  					// and the printer heat is off  					Assert.AreEqual(0' (int) emulator.CurrentExtruder.TargetTemperature' "The printer should report the heaters are off");    					// turn on the heater  					testRunner.ClickByName("Toggle Heater");  					testRunner.Delay(1);    					// assert the printer is heating  					Assert.AreEqual(hipsGoalTemp' (int)emulator.CurrentExtruder.TargetTemperature' "The printer should report the expected goal temp");    					// turn off the heater  					testRunner.ClickByName("Toggle Heater");  					testRunner.Delay(1);    					// assert the printer is off  					Assert.AreEqual(0' (int)emulator.CurrentExtruder.TargetTemperature' "The printer should report the heaters are off");    					// type in a temp when the heating is off  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("110");  					testRunner.Type("{Enter}");  					testRunner.Delay();    					// assert the printer is off  					Assert.AreEqual(0' (int)emulator.CurrentExtruder.TargetTemperature);    					// and the heat toggle is showing on  					ICheckbox heatToggle = testRunner.GetWidgetByName("Toggle Heater"' out _) as ICheckbox;  					Assert.IsFalse(heatToggle.Checked);    					// turn it on  					testRunner.ClickByName("Toggle Heater");  					Assert.AreEqual(110' (int)emulator.CurrentExtruder.TargetTemperature);    					// adjust when on  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("104");  					testRunner.Type("{Enter}");  					testRunner.Delay();  					Assert.AreEqual(104' (int)emulator.CurrentExtruder.TargetTemperature);    					// type in 0 and have the heater turn off  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("^a");  					testRunner.Type("0");  					testRunner.Type("{Enter}");  					testRunner.Delay();    					// type in 60 and have the heater turn on  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("^a");  					testRunner.Type("60");  					testRunner.Type("{Enter}");  					testRunner.Delay();  					testRunner.ClickByName("Toggle Heater");  					Assert.AreEqual(60' (int)emulator.CurrentExtruder.TargetTemperature);    					// click the remove override and have it change to default temp  					testRunner.ClickByName("Restore temperature");  					testRunner.WaitFor(() => hipsGoalTemp == emulator.CurrentExtruder.TargetTemperature);  					Assert.AreEqual(hipsGoalTemp' (int)emulator.CurrentExtruder.TargetTemperature' "The printer should report the expected goal temp");    					// type in 60 and have the heater turn on  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("^a");  					testRunner.Type("60");  					testRunner.Type("{Enter}");  					testRunner.Delay();  					Assert.AreEqual(60' (int)emulator.CurrentExtruder.TargetTemperature);    					// type in 0 and have the heater turn off  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("^a");  					testRunner.Type("0");  					testRunner.Type("{Enter}");  					testRunner.Delay();    					// assert the printer is not heating  					Assert.AreEqual(0' (int)emulator.CurrentExtruder.TargetTemperature);  					// and the on toggle is showing off  					Assert.IsFalse(heatToggle.Checked);    					// test that the load filament button works and closes correctly  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("^a");  					testRunner.Type("104");  					testRunner.Type("{Enter}");  					testRunner.Delay();  					testRunner.ClickByName("Load Filament Button");  					testRunner.ClickByName("Load Filament");  					Assert.AreEqual(104' (int)emulator.CurrentExtruder.TargetTemperature);  					testRunner.Delay();  					testRunner.ClickByName("Cancel Wizard Button");  					testRunner.Delay();  					Assert.AreEqual(0' (int)emulator.CurrentExtruder.TargetTemperature);    					testRunner.ClickByName("Hotend 0");  					testRunner.ClickByName("Load Filament Button");  					testRunner.ClickByName("Load Filament");  					testRunner.Delay();  					Assert.AreEqual(104' (int)emulator.CurrentExtruder.TargetTemperature);  					var systemWindow = testRunner.GetWidgetByName("Cancel Wizard Button"' out SystemWindow containingWindow);  					// close the window through windows (alt-f4)  					testRunner.Type("%{F4}");  					Assert.AreEqual(0' (int)emulator.CurrentExtruder.TargetTemperature);    					// Switch back to the general tab  					testRunner.ClickByName("General Tab");    					testRunner.SelectSliceSettingsField(PrinterSettings.Layout.Printer' SettingsKey.extruder_count);  					testRunner.Type("2");  					testRunner.Type("{Enter}");    					// there are now 2 hotends and 2 extruders  					Assert.IsTrue(testRunner.NameExists("Hotend 0"));  					Assert.IsTrue(testRunner.NameExists("Hotend 1"));    					var printer = testRunner.FirstPrinter();    					SetCheckBoxSetting(testRunner' printer' SettingsKey.extruders_share_temperature' true);    					// there is one hotend and 2 extruders  					Assert.IsTrue(testRunner.NameExists("Hotend 0"));  					Assert.IsFalse(testRunner.NameExists("Hotend 1"' .1));    					testRunner.ClickByName("Hotend 0");    					extrudeButtons = testRunner.GetWidgetsByName("Extrude Button");  					Assert.AreEqual(2' extrudeButtons.Count' "Now there should be two.");  				}    				return Task.CompletedTask;  			}' maxTimeToRun: 120);
Magic Number,MatterHackers.MatterControl.Tests.Automation,SliceSetingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\SliceSettingsTests.cs,DualExtrusionShowsCorrectHotendData,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					testRunner.ClickByName("Features Tab");    					// only 1 hotend and 1 extruder  					Assert.IsTrue(testRunner.NameExists("Hotend 0"));  					Assert.IsTrue(testRunner.NameExists("Bed TemperatureWidget"));  					Assert.IsFalse(testRunner.NameExists("Hotend 1"' .1));    					testRunner.ClickByName("Hotend 0");    					// assert the temp is set when we first open (it comes from the material)  					MHNumberEdit tempWidget = testRunner.GetWidgetByName("Temperature Input"' out _) as MHNumberEdit;  					Assert.AreEqual(240' (int)tempWidget.Value);    					// change material  					var dropDownLists = testRunner.GetWidgetsByName("Hotend Preset Selector");  					Assert.AreEqual(1' dropDownLists.Count' "There is one. The slice settings and the pop out.");  					DropDownList materialSelector = dropDownLists[0].Widget as DropDownList;  					Assert.AreEqual(""' materialSelector.SelectedValue);    					testRunner.ClickByName("Hotend Preset Selector");  					testRunner.ClickByName("HIPS Menu");    					// check the extruder count  					var extrudeButtons = testRunner.GetWidgetsByName("Extrude Button");  					Assert.AreEqual(1' extrudeButtons.Count' "There should be just one.");    					int hipsGoalTemp = 220;  					testRunner.Delay();    					// assert the temp changed to a new temp  					Assert.AreEqual(hipsGoalTemp'(int) tempWidget.Value' "The goal temp should match the material temp");  					// and the printer heat is off  					Assert.AreEqual(0' (int) emulator.CurrentExtruder.TargetTemperature' "The printer should report the heaters are off");    					// turn on the heater  					testRunner.ClickByName("Toggle Heater");  					testRunner.Delay(1);    					// assert the printer is heating  					Assert.AreEqual(hipsGoalTemp' (int)emulator.CurrentExtruder.TargetTemperature' "The printer should report the expected goal temp");    					// turn off the heater  					testRunner.ClickByName("Toggle Heater");  					testRunner.Delay(1);    					// assert the printer is off  					Assert.AreEqual(0' (int)emulator.CurrentExtruder.TargetTemperature' "The printer should report the heaters are off");    					// type in a temp when the heating is off  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("110");  					testRunner.Type("{Enter}");  					testRunner.Delay();    					// assert the printer is off  					Assert.AreEqual(0' (int)emulator.CurrentExtruder.TargetTemperature);    					// and the heat toggle is showing on  					ICheckbox heatToggle = testRunner.GetWidgetByName("Toggle Heater"' out _) as ICheckbox;  					Assert.IsFalse(heatToggle.Checked);    					// turn it on  					testRunner.ClickByName("Toggle Heater");  					Assert.AreEqual(110' (int)emulator.CurrentExtruder.TargetTemperature);    					// adjust when on  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("104");  					testRunner.Type("{Enter}");  					testRunner.Delay();  					Assert.AreEqual(104' (int)emulator.CurrentExtruder.TargetTemperature);    					// type in 0 and have the heater turn off  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("^a");  					testRunner.Type("0");  					testRunner.Type("{Enter}");  					testRunner.Delay();    					// type in 60 and have the heater turn on  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("^a");  					testRunner.Type("60");  					testRunner.Type("{Enter}");  					testRunner.Delay();  					testRunner.ClickByName("Toggle Heater");  					Assert.AreEqual(60' (int)emulator.CurrentExtruder.TargetTemperature);    					// click the remove override and have it change to default temp  					testRunner.ClickByName("Restore temperature");  					testRunner.WaitFor(() => hipsGoalTemp == emulator.CurrentExtruder.TargetTemperature);  					Assert.AreEqual(hipsGoalTemp' (int)emulator.CurrentExtruder.TargetTemperature' "The printer should report the expected goal temp");    					// type in 60 and have the heater turn on  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("^a");  					testRunner.Type("60");  					testRunner.Type("{Enter}");  					testRunner.Delay();  					Assert.AreEqual(60' (int)emulator.CurrentExtruder.TargetTemperature);    					// type in 0 and have the heater turn off  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("^a");  					testRunner.Type("0");  					testRunner.Type("{Enter}");  					testRunner.Delay();    					// assert the printer is not heating  					Assert.AreEqual(0' (int)emulator.CurrentExtruder.TargetTemperature);  					// and the on toggle is showing off  					Assert.IsFalse(heatToggle.Checked);    					// test that the load filament button works and closes correctly  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("^a");  					testRunner.Type("104");  					testRunner.Type("{Enter}");  					testRunner.Delay();  					testRunner.ClickByName("Load Filament Button");  					testRunner.ClickByName("Load Filament");  					Assert.AreEqual(104' (int)emulator.CurrentExtruder.TargetTemperature);  					testRunner.Delay();  					testRunner.ClickByName("Cancel Wizard Button");  					testRunner.Delay();  					Assert.AreEqual(0' (int)emulator.CurrentExtruder.TargetTemperature);    					testRunner.ClickByName("Hotend 0");  					testRunner.ClickByName("Load Filament Button");  					testRunner.ClickByName("Load Filament");  					testRunner.Delay();  					Assert.AreEqual(104' (int)emulator.CurrentExtruder.TargetTemperature);  					var systemWindow = testRunner.GetWidgetByName("Cancel Wizard Button"' out SystemWindow containingWindow);  					// close the window through windows (alt-f4)  					testRunner.Type("%{F4}");  					Assert.AreEqual(0' (int)emulator.CurrentExtruder.TargetTemperature);    					// Switch back to the general tab  					testRunner.ClickByName("General Tab");    					testRunner.SelectSliceSettingsField(PrinterSettings.Layout.Printer' SettingsKey.extruder_count);  					testRunner.Type("2");  					testRunner.Type("{Enter}");    					// there are now 2 hotends and 2 extruders  					Assert.IsTrue(testRunner.NameExists("Hotend 0"));  					Assert.IsTrue(testRunner.NameExists("Hotend 1"));    					var printer = testRunner.FirstPrinter();    					SetCheckBoxSetting(testRunner' printer' SettingsKey.extruders_share_temperature' true);    					// there is one hotend and 2 extruders  					Assert.IsTrue(testRunner.NameExists("Hotend 0"));  					Assert.IsFalse(testRunner.NameExists("Hotend 1"' .1));    					testRunner.ClickByName("Hotend 0");    					extrudeButtons = testRunner.GetWidgetsByName("Extrude Button");  					Assert.AreEqual(2' extrudeButtons.Count' "Now there should be two.");  				}    				return Task.CompletedTask;  			}' maxTimeToRun: 120);
Magic Number,MatterHackers.MatterControl.Tests.Automation,SliceSetingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\SliceSettingsTests.cs,DualExtrusionShowsCorrectHotendData,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				using (var emulator = testRunner.LaunchAndConnectToPrinterEmulator())  				{  					testRunner.ClickByName("Features Tab");    					// only 1 hotend and 1 extruder  					Assert.IsTrue(testRunner.NameExists("Hotend 0"));  					Assert.IsTrue(testRunner.NameExists("Bed TemperatureWidget"));  					Assert.IsFalse(testRunner.NameExists("Hotend 1"' .1));    					testRunner.ClickByName("Hotend 0");    					// assert the temp is set when we first open (it comes from the material)  					MHNumberEdit tempWidget = testRunner.GetWidgetByName("Temperature Input"' out _) as MHNumberEdit;  					Assert.AreEqual(240' (int)tempWidget.Value);    					// change material  					var dropDownLists = testRunner.GetWidgetsByName("Hotend Preset Selector");  					Assert.AreEqual(1' dropDownLists.Count' "There is one. The slice settings and the pop out.");  					DropDownList materialSelector = dropDownLists[0].Widget as DropDownList;  					Assert.AreEqual(""' materialSelector.SelectedValue);    					testRunner.ClickByName("Hotend Preset Selector");  					testRunner.ClickByName("HIPS Menu");    					// check the extruder count  					var extrudeButtons = testRunner.GetWidgetsByName("Extrude Button");  					Assert.AreEqual(1' extrudeButtons.Count' "There should be just one.");    					int hipsGoalTemp = 220;  					testRunner.Delay();    					// assert the temp changed to a new temp  					Assert.AreEqual(hipsGoalTemp'(int) tempWidget.Value' "The goal temp should match the material temp");  					// and the printer heat is off  					Assert.AreEqual(0' (int) emulator.CurrentExtruder.TargetTemperature' "The printer should report the heaters are off");    					// turn on the heater  					testRunner.ClickByName("Toggle Heater");  					testRunner.Delay(1);    					// assert the printer is heating  					Assert.AreEqual(hipsGoalTemp' (int)emulator.CurrentExtruder.TargetTemperature' "The printer should report the expected goal temp");    					// turn off the heater  					testRunner.ClickByName("Toggle Heater");  					testRunner.Delay(1);    					// assert the printer is off  					Assert.AreEqual(0' (int)emulator.CurrentExtruder.TargetTemperature' "The printer should report the heaters are off");    					// type in a temp when the heating is off  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("110");  					testRunner.Type("{Enter}");  					testRunner.Delay();    					// assert the printer is off  					Assert.AreEqual(0' (int)emulator.CurrentExtruder.TargetTemperature);    					// and the heat toggle is showing on  					ICheckbox heatToggle = testRunner.GetWidgetByName("Toggle Heater"' out _) as ICheckbox;  					Assert.IsFalse(heatToggle.Checked);    					// turn it on  					testRunner.ClickByName("Toggle Heater");  					Assert.AreEqual(110' (int)emulator.CurrentExtruder.TargetTemperature);    					// adjust when on  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("104");  					testRunner.Type("{Enter}");  					testRunner.Delay();  					Assert.AreEqual(104' (int)emulator.CurrentExtruder.TargetTemperature);    					// type in 0 and have the heater turn off  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("^a");  					testRunner.Type("0");  					testRunner.Type("{Enter}");  					testRunner.Delay();    					// type in 60 and have the heater turn on  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("^a");  					testRunner.Type("60");  					testRunner.Type("{Enter}");  					testRunner.Delay();  					testRunner.ClickByName("Toggle Heater");  					Assert.AreEqual(60' (int)emulator.CurrentExtruder.TargetTemperature);    					// click the remove override and have it change to default temp  					testRunner.ClickByName("Restore temperature");  					testRunner.WaitFor(() => hipsGoalTemp == emulator.CurrentExtruder.TargetTemperature);  					Assert.AreEqual(hipsGoalTemp' (int)emulator.CurrentExtruder.TargetTemperature' "The printer should report the expected goal temp");    					// type in 60 and have the heater turn on  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("^a");  					testRunner.Type("60");  					testRunner.Type("{Enter}");  					testRunner.Delay();  					Assert.AreEqual(60' (int)emulator.CurrentExtruder.TargetTemperature);    					// type in 0 and have the heater turn off  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("^a");  					testRunner.Type("0");  					testRunner.Type("{Enter}");  					testRunner.Delay();    					// assert the printer is not heating  					Assert.AreEqual(0' (int)emulator.CurrentExtruder.TargetTemperature);  					// and the on toggle is showing off  					Assert.IsFalse(heatToggle.Checked);    					// test that the load filament button works and closes correctly  					testRunner.ClickByName("Temperature Input");  					testRunner.Type("^a");  					testRunner.Type("104");  					testRunner.Type("{Enter}");  					testRunner.Delay();  					testRunner.ClickByName("Load Filament Button");  					testRunner.ClickByName("Load Filament");  					Assert.AreEqual(104' (int)emulator.CurrentExtruder.TargetTemperature);  					testRunner.Delay();  					testRunner.ClickByName("Cancel Wizard Button");  					testRunner.Delay();  					Assert.AreEqual(0' (int)emulator.CurrentExtruder.TargetTemperature);    					testRunner.ClickByName("Hotend 0");  					testRunner.ClickByName("Load Filament Button");  					testRunner.ClickByName("Load Filament");  					testRunner.Delay();  					Assert.AreEqual(104' (int)emulator.CurrentExtruder.TargetTemperature);  					var systemWindow = testRunner.GetWidgetByName("Cancel Wizard Button"' out SystemWindow containingWindow);  					// close the window through windows (alt-f4)  					testRunner.Type("%{F4}");  					Assert.AreEqual(0' (int)emulator.CurrentExtruder.TargetTemperature);    					// Switch back to the general tab  					testRunner.ClickByName("General Tab");    					testRunner.SelectSliceSettingsField(PrinterSettings.Layout.Printer' SettingsKey.extruder_count);  					testRunner.Type("2");  					testRunner.Type("{Enter}");    					// there are now 2 hotends and 2 extruders  					Assert.IsTrue(testRunner.NameExists("Hotend 0"));  					Assert.IsTrue(testRunner.NameExists("Hotend 1"));    					var printer = testRunner.FirstPrinter();    					SetCheckBoxSetting(testRunner' printer' SettingsKey.extruders_share_temperature' true);    					// there is one hotend and 2 extruders  					Assert.IsTrue(testRunner.NameExists("Hotend 0"));  					Assert.IsFalse(testRunner.NameExists("Hotend 1"' .1));    					testRunner.ClickByName("Hotend 0");    					extrudeButtons = testRunner.GetWidgetsByName("Extrude Button");  					Assert.AreEqual(2' extrudeButtons.Count' "Now there should be two.");  				}    				return Task.CompletedTask;  			}' maxTimeToRun: 120);
Magic Number,MatterHackers.MatterControl.Tests.Automation,SliceSetingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\SliceSettingsTests.cs,SliceSettingsOrganizerSupportsKeyLookup,The following statement contains a magic number: AggContext.StaticData = new FileSystemStaticData(TestContext.CurrentContext.ResolveProjectPath(5' "MatterControl"' "StaticData"));
Magic Number,MatterHackers.MatterControl.Tests.Automation,SliceSetingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\SliceSettingsTests.cs,SwitchingMaterialsCausesSettingsChangedEvents,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.AddAndSelectPrinter();    				int layerHeightChangedCount = 0;    				PrinterSettings.AnyPrinterSettingChanged += (s' stringEvent) =>  				{  					if (stringEvent != null)  					{  						if (stringEvent.Data == SettingsKey.layer_height)  						{  							layerHeightChangedCount++;  						}  					}  				};    				testRunner.AddAndSelectPrinter("Airwolf 3D"' "HD");    				// Navigate to Local Library  				testRunner.SwitchToSliceSettings();    				// Navigate to General Tab -> Layers / Surface Tab  				testRunner.SelectSliceSettingsField(PrinterSettings.Layout.SliceSettings' "layer_height");  				Assert.AreEqual(0' layerHeightChangedCount' "No change to layer height yet.");    				testRunner.ClickByName("Quality");  				testRunner.ClickByName("Fine Menu");  				testRunner.Delay(.5);  				Assert.AreEqual(1' layerHeightChangedCount' "Changed to fine.");    				testRunner.ClickByName("Quality");  				testRunner.ClickByName("Standard Menu");  				testRunner.Delay(.5);  				Assert.AreEqual(2' layerHeightChangedCount' "Changed to standard.");    				return Task.CompletedTask;  			}' overrideWidth: 1224' overrideHeight: 900);
Magic Number,MatterHackers.MatterControl.Tests.Automation,SliceSetingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\SliceSettingsTests.cs,SwitchingMaterialsCausesSettingsChangedEvents,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.AddAndSelectPrinter();    				int layerHeightChangedCount = 0;    				PrinterSettings.AnyPrinterSettingChanged += (s' stringEvent) =>  				{  					if (stringEvent != null)  					{  						if (stringEvent.Data == SettingsKey.layer_height)  						{  							layerHeightChangedCount++;  						}  					}  				};    				testRunner.AddAndSelectPrinter("Airwolf 3D"' "HD");    				// Navigate to Local Library  				testRunner.SwitchToSliceSettings();    				// Navigate to General Tab -> Layers / Surface Tab  				testRunner.SelectSliceSettingsField(PrinterSettings.Layout.SliceSettings' "layer_height");  				Assert.AreEqual(0' layerHeightChangedCount' "No change to layer height yet.");    				testRunner.ClickByName("Quality");  				testRunner.ClickByName("Fine Menu");  				testRunner.Delay(.5);  				Assert.AreEqual(1' layerHeightChangedCount' "Changed to fine.");    				testRunner.ClickByName("Quality");  				testRunner.ClickByName("Standard Menu");  				testRunner.Delay(.5);  				Assert.AreEqual(2' layerHeightChangedCount' "Changed to standard.");    				return Task.CompletedTask;  			}' overrideWidth: 1224' overrideHeight: 900);
Magic Number,MatterHackers.MatterControl.Tests.Automation,SliceSetingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\SliceSettingsTests.cs,SwitchingMaterialsCausesSettingsChangedEvents,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.AddAndSelectPrinter();    				int layerHeightChangedCount = 0;    				PrinterSettings.AnyPrinterSettingChanged += (s' stringEvent) =>  				{  					if (stringEvent != null)  					{  						if (stringEvent.Data == SettingsKey.layer_height)  						{  							layerHeightChangedCount++;  						}  					}  				};    				testRunner.AddAndSelectPrinter("Airwolf 3D"' "HD");    				// Navigate to Local Library  				testRunner.SwitchToSliceSettings();    				// Navigate to General Tab -> Layers / Surface Tab  				testRunner.SelectSliceSettingsField(PrinterSettings.Layout.SliceSettings' "layer_height");  				Assert.AreEqual(0' layerHeightChangedCount' "No change to layer height yet.");    				testRunner.ClickByName("Quality");  				testRunner.ClickByName("Fine Menu");  				testRunner.Delay(.5);  				Assert.AreEqual(1' layerHeightChangedCount' "Changed to fine.");    				testRunner.ClickByName("Quality");  				testRunner.ClickByName("Standard Menu");  				testRunner.Delay(.5);  				Assert.AreEqual(2' layerHeightChangedCount' "Changed to standard.");    				return Task.CompletedTask;  			}' overrideWidth: 1224' overrideHeight: 900);
Magic Number,MatterHackers.MatterControl.Tests.Automation,SliceSetingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\SliceSettingsTests.cs,SwitchingMaterialsCausesSettingsChangedEvents,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.AddAndSelectPrinter();    				int layerHeightChangedCount = 0;    				PrinterSettings.AnyPrinterSettingChanged += (s' stringEvent) =>  				{  					if (stringEvent != null)  					{  						if (stringEvent.Data == SettingsKey.layer_height)  						{  							layerHeightChangedCount++;  						}  					}  				};    				testRunner.AddAndSelectPrinter("Airwolf 3D"' "HD");    				// Navigate to Local Library  				testRunner.SwitchToSliceSettings();    				// Navigate to General Tab -> Layers / Surface Tab  				testRunner.SelectSliceSettingsField(PrinterSettings.Layout.SliceSettings' "layer_height");  				Assert.AreEqual(0' layerHeightChangedCount' "No change to layer height yet.");    				testRunner.ClickByName("Quality");  				testRunner.ClickByName("Fine Menu");  				testRunner.Delay(.5);  				Assert.AreEqual(1' layerHeightChangedCount' "Changed to fine.");    				testRunner.ClickByName("Quality");  				testRunner.ClickByName("Standard Menu");  				testRunner.Delay(.5);  				Assert.AreEqual(2' layerHeightChangedCount' "Changed to standard.");    				return Task.CompletedTask;  			}' overrideWidth: 1224' overrideHeight: 900);
Magic Number,MatterHackers.MatterControl.Tests.Automation,SliceSetingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\SliceSettingsTests.cs,SwitchingMaterialsCausesSettingsChangedEvents,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.AddAndSelectPrinter();    				int layerHeightChangedCount = 0;    				PrinterSettings.AnyPrinterSettingChanged += (s' stringEvent) =>  				{  					if (stringEvent != null)  					{  						if (stringEvent.Data == SettingsKey.layer_height)  						{  							layerHeightChangedCount++;  						}  					}  				};    				testRunner.AddAndSelectPrinter("Airwolf 3D"' "HD");    				// Navigate to Local Library  				testRunner.SwitchToSliceSettings();    				// Navigate to General Tab -> Layers / Surface Tab  				testRunner.SelectSliceSettingsField(PrinterSettings.Layout.SliceSettings' "layer_height");  				Assert.AreEqual(0' layerHeightChangedCount' "No change to layer height yet.");    				testRunner.ClickByName("Quality");  				testRunner.ClickByName("Fine Menu");  				testRunner.Delay(.5);  				Assert.AreEqual(1' layerHeightChangedCount' "Changed to fine.");    				testRunner.ClickByName("Quality");  				testRunner.ClickByName("Standard Menu");  				testRunner.Delay(.5);  				Assert.AreEqual(2' layerHeightChangedCount' "Changed to standard.");    				return Task.CompletedTask;  			}' overrideWidth: 1224' overrideHeight: 900);
Magic Number,MatterHackers.MatterControl.Tests.Automation,SliceSetingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\SliceSettingsTests.cs,DeleteProfileWorksForGuest,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.WaitForFirstDraw();    				// assert no profiles  				Assert.AreEqual(0' ProfileManager.Instance.ActiveProfiles.Count());    				testRunner.AddAndSelectPrinter("Airwolf 3D"' "HD");    				// assert one profile  				Assert.AreEqual(1' ProfileManager.Instance.ActiveProfiles.Count()' "One profile should exist after add");    				MatterControlUtilities.DeleteSelectedPrinter(testRunner);    				// assert no profiles  				Assert.AreEqual(0' ProfileManager.Instance.ActiveProfiles.Count()' "No profiles should exist after delete");    				return Task.CompletedTask;  			}' overrideWidth: 1224' overrideHeight: 900);
Magic Number,MatterHackers.MatterControl.Tests.Automation,SliceSetingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\SliceSettingsTests.cs,DeleteProfileWorksForGuest,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.WaitForFirstDraw();    				// assert no profiles  				Assert.AreEqual(0' ProfileManager.Instance.ActiveProfiles.Count());    				testRunner.AddAndSelectPrinter("Airwolf 3D"' "HD");    				// assert one profile  				Assert.AreEqual(1' ProfileManager.Instance.ActiveProfiles.Count()' "One profile should exist after add");    				MatterControlUtilities.DeleteSelectedPrinter(testRunner);    				// assert no profiles  				Assert.AreEqual(0' ProfileManager.Instance.ActiveProfiles.Count()' "No profiles should exist after delete");    				return Task.CompletedTask;  			}' overrideWidth: 1224' overrideHeight: 900);
Magic Number,MatterHackers.MatterControl.Tests.Automation,SliceSetingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\SliceSettingsTests.cs,SetCheckBoxSetting,The following statement contains a magic number: testRunner.Delay(2);
Magic Number,MatterHackers.MatterControl.Tests.Automation,SliceSetingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\SliceSettingsTests.cs,CheckAndUncheckSetting,The following statement contains a magic number: testRunner.Delay(2);
Magic Number,MatterHackers.MatterControl.Tests.Automation,SliceSetingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\SliceSettingsTests.cs,HasHeatedBedCheckedHidesBedTemperatureOptions,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.WaitForFirstDraw();    				testRunner.AddAndSelectPrinter("Airwolf 3D"' "HD");    				// Navigate to Settings Tab and make sure Bed Temp Text box is visible  				testRunner.SwitchToSliceSettings();    				testRunner.SelectSliceSettingsField(PrinterSettings.Layout.SliceSettings' SettingsKey.bed_temperature);  				testRunner.SelectSliceSettingsField(PrinterSettings.Layout.SliceSettings' SettingsKey.temperature);    				// Uncheck Has Heated Bed checkbox and make sure Bed Temp Textbox is not visible  				testRunner.SwitchToPrinterSettings();    				testRunner.SelectSliceSettingsField(PrinterSettings.Layout.Printer' SettingsKey.has_heated_bed);  				testRunner.Delay(.5);    				testRunner.SwitchToSliceSettings();  				testRunner.NavigateToSliceSettingsField(PrinterSettings.Layout.SliceSettings' SettingsKey.temperature);  				Assert.IsFalse(testRunner.WaitForName("Bed Temperature Textbox"' .5)' "Filament -> Bed Temp should not be visible after Heated Bed unchecked");    				// Make sure Bed Temperature Options are not visible in printer controls  				testRunner.SwitchToControlsTab();    				Assert.IsFalse(testRunner.WaitForName("Bed Temperature Controls Widget"' .5)' "Controls -> Bed Temp should not be visible after Heated Bed unchecked");    				return Task.CompletedTask;  			});
Magic Number,MatterHackers.MatterControl.Tests.Automation,SliceSetingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\SliceSettingsTests.cs,HasHeatedBedCheckedHidesBedTemperatureOptions,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.WaitForFirstDraw();    				testRunner.AddAndSelectPrinter("Airwolf 3D"' "HD");    				// Navigate to Settings Tab and make sure Bed Temp Text box is visible  				testRunner.SwitchToSliceSettings();    				testRunner.SelectSliceSettingsField(PrinterSettings.Layout.SliceSettings' SettingsKey.bed_temperature);  				testRunner.SelectSliceSettingsField(PrinterSettings.Layout.SliceSettings' SettingsKey.temperature);    				// Uncheck Has Heated Bed checkbox and make sure Bed Temp Textbox is not visible  				testRunner.SwitchToPrinterSettings();    				testRunner.SelectSliceSettingsField(PrinterSettings.Layout.Printer' SettingsKey.has_heated_bed);  				testRunner.Delay(.5);    				testRunner.SwitchToSliceSettings();  				testRunner.NavigateToSliceSettingsField(PrinterSettings.Layout.SliceSettings' SettingsKey.temperature);  				Assert.IsFalse(testRunner.WaitForName("Bed Temperature Textbox"' .5)' "Filament -> Bed Temp should not be visible after Heated Bed unchecked");    				// Make sure Bed Temperature Options are not visible in printer controls  				testRunner.SwitchToControlsTab();    				Assert.IsFalse(testRunner.WaitForName("Bed Temperature Controls Widget"' .5)' "Controls -> Bed Temp should not be visible after Heated Bed unchecked");    				return Task.CompletedTask;  			});
Magic Number,MatterHackers.MatterControl.Tests.Automation,SliceSetingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\SliceSettingsTests.cs,HasHeatedBedCheckedHidesBedTemperatureOptions,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.WaitForFirstDraw();    				testRunner.AddAndSelectPrinter("Airwolf 3D"' "HD");    				// Navigate to Settings Tab and make sure Bed Temp Text box is visible  				testRunner.SwitchToSliceSettings();    				testRunner.SelectSliceSettingsField(PrinterSettings.Layout.SliceSettings' SettingsKey.bed_temperature);  				testRunner.SelectSliceSettingsField(PrinterSettings.Layout.SliceSettings' SettingsKey.temperature);    				// Uncheck Has Heated Bed checkbox and make sure Bed Temp Textbox is not visible  				testRunner.SwitchToPrinterSettings();    				testRunner.SelectSliceSettingsField(PrinterSettings.Layout.Printer' SettingsKey.has_heated_bed);  				testRunner.Delay(.5);    				testRunner.SwitchToSliceSettings();  				testRunner.NavigateToSliceSettingsField(PrinterSettings.Layout.SliceSettings' SettingsKey.temperature);  				Assert.IsFalse(testRunner.WaitForName("Bed Temperature Textbox"' .5)' "Filament -> Bed Temp should not be visible after Heated Bed unchecked");    				// Make sure Bed Temperature Options are not visible in printer controls  				testRunner.SwitchToControlsTab();    				Assert.IsFalse(testRunner.WaitForName("Bed Temperature Controls Widget"' .5)' "Controls -> Bed Temp should not be visible after Heated Bed unchecked");    				return Task.CompletedTask;  			});
Magic Number,MatterHackers.MatterControl.Tests.Automation,SliceSetingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\SliceSettingsTests.cs,QualitySettingsStayAsOverrides,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.WaitForFirstDraw();    				// Add Guest printers  				testRunner.AddAndSelectPrinter("Airwolf 3D"' "HD");  				testRunner.SwitchToSliceSettings();    				var printer = testRunner.FirstPrinter();    				testRunner.SelectSliceSettingsField(PrinterSettings.Layout.SliceSettings' "layer_height");  				testRunner.Type(".5");    				// Force lose focus  				testRunner.SelectSliceSettingsField(PrinterSettings.Layout.SliceSettings' "first_layer_height");    				testRunner.WaitFor(() => printer.Settings.GetValue<double>(SettingsKey.layer_height) == 0.5);  				Assert.AreEqual(printer.Settings.GetValue<double>(SettingsKey.layer_height).ToString()' "0.5"' "Layer height is what we set it to");    				testRunner.ClickByName("Quality");  				testRunner.ClickByName("Fine Menu");    				testRunner.WaitFor(() => printer.Settings.GetValue<double>(SettingsKey.layer_height) == 0.1);  				Assert.AreEqual(printer.Settings.GetValue<double>(SettingsKey.layer_height).ToString()' "0.1"' "Layer height is the fine override");    				// Close Airwolf  				testRunner.CloseFirstPrinterTab();    				// Assert printer counts  				Assert.AreEqual(1' ProfileManager.Instance.ActiveProfiles.Count()' "ProfileManager should have 1 profile after Airwolf close");  				Assert.AreEqual(0' ApplicationController.Instance.ActivePrinters.Count()' "Zero printers should be active after Airwolf close");    				testRunner.AddAndSelectPrinter("BCN3D"' "Sigma");    				// Assert printer counts  				Assert.AreEqual(2' ProfileManager.Instance.ActiveProfiles.Count()' "ProfileManager has 2 profiles");  				Assert.AreEqual(1' ApplicationController.Instance.ActivePrinters.Count()' "One printer should be active after BCN add");    				// Close BCN  				testRunner.CloseFirstPrinterTab();    				// Reopen Airwolf  				testRunner.SwitchToHardwareTab();  				testRunner.DoubleClickByName("Airwolf 3D HD Node");  				testRunner.Delay(0.2);    				printer = testRunner.FirstPrinter();    				testRunner.WaitFor(() => printer.Settings.GetValue<double>(SettingsKey.layer_height) == 0.1);  				Assert.AreEqual(printer.Settings.GetValue<double>(SettingsKey.layer_height).ToString()' "0.1"' "Layer height is the fine override");    				// Switch to Slice Settings Tab  				testRunner.ClickByName("Slice Settings Tab");    				testRunner.ClickByName("Quality");  				testRunner.ClickByName("- none - Menu Item");    				testRunner.WaitFor(() => printer.Settings.GetValue<double>(SettingsKey.layer_height) == 0.5);  				Assert.AreEqual(printer.Settings.GetValue<double>(SettingsKey.layer_height).ToString()' "0.5"' "Layer height is what we set it to");    				return Task.CompletedTask;  			}' maxTimeToRun: 120);
Magic Number,MatterHackers.MatterControl.Tests.Automation,SliceSetingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\SliceSettingsTests.cs,QualitySettingsStayAsOverrides,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.WaitForFirstDraw();    				// Add Guest printers  				testRunner.AddAndSelectPrinter("Airwolf 3D"' "HD");  				testRunner.SwitchToSliceSettings();    				var printer = testRunner.FirstPrinter();    				testRunner.SelectSliceSettingsField(PrinterSettings.Layout.SliceSettings' "layer_height");  				testRunner.Type(".5");    				// Force lose focus  				testRunner.SelectSliceSettingsField(PrinterSettings.Layout.SliceSettings' "first_layer_height");    				testRunner.WaitFor(() => printer.Settings.GetValue<double>(SettingsKey.layer_height) == 0.5);  				Assert.AreEqual(printer.Settings.GetValue<double>(SettingsKey.layer_height).ToString()' "0.5"' "Layer height is what we set it to");    				testRunner.ClickByName("Quality");  				testRunner.ClickByName("Fine Menu");    				testRunner.WaitFor(() => printer.Settings.GetValue<double>(SettingsKey.layer_height) == 0.1);  				Assert.AreEqual(printer.Settings.GetValue<double>(SettingsKey.layer_height).ToString()' "0.1"' "Layer height is the fine override");    				// Close Airwolf  				testRunner.CloseFirstPrinterTab();    				// Assert printer counts  				Assert.AreEqual(1' ProfileManager.Instance.ActiveProfiles.Count()' "ProfileManager should have 1 profile after Airwolf close");  				Assert.AreEqual(0' ApplicationController.Instance.ActivePrinters.Count()' "Zero printers should be active after Airwolf close");    				testRunner.AddAndSelectPrinter("BCN3D"' "Sigma");    				// Assert printer counts  				Assert.AreEqual(2' ProfileManager.Instance.ActiveProfiles.Count()' "ProfileManager has 2 profiles");  				Assert.AreEqual(1' ApplicationController.Instance.ActivePrinters.Count()' "One printer should be active after BCN add");    				// Close BCN  				testRunner.CloseFirstPrinterTab();    				// Reopen Airwolf  				testRunner.SwitchToHardwareTab();  				testRunner.DoubleClickByName("Airwolf 3D HD Node");  				testRunner.Delay(0.2);    				printer = testRunner.FirstPrinter();    				testRunner.WaitFor(() => printer.Settings.GetValue<double>(SettingsKey.layer_height) == 0.1);  				Assert.AreEqual(printer.Settings.GetValue<double>(SettingsKey.layer_height).ToString()' "0.1"' "Layer height is the fine override");    				// Switch to Slice Settings Tab  				testRunner.ClickByName("Slice Settings Tab");    				testRunner.ClickByName("Quality");  				testRunner.ClickByName("- none - Menu Item");    				testRunner.WaitFor(() => printer.Settings.GetValue<double>(SettingsKey.layer_height) == 0.5);  				Assert.AreEqual(printer.Settings.GetValue<double>(SettingsKey.layer_height).ToString()' "0.5"' "Layer height is what we set it to");    				return Task.CompletedTask;  			}' maxTimeToRun: 120);
Magic Number,MatterHackers.MatterControl.Tests.Automation,SliceSetingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\SliceSettingsTests.cs,QualitySettingsStayAsOverrides,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.WaitForFirstDraw();    				// Add Guest printers  				testRunner.AddAndSelectPrinter("Airwolf 3D"' "HD");  				testRunner.SwitchToSliceSettings();    				var printer = testRunner.FirstPrinter();    				testRunner.SelectSliceSettingsField(PrinterSettings.Layout.SliceSettings' "layer_height");  				testRunner.Type(".5");    				// Force lose focus  				testRunner.SelectSliceSettingsField(PrinterSettings.Layout.SliceSettings' "first_layer_height");    				testRunner.WaitFor(() => printer.Settings.GetValue<double>(SettingsKey.layer_height) == 0.5);  				Assert.AreEqual(printer.Settings.GetValue<double>(SettingsKey.layer_height).ToString()' "0.5"' "Layer height is what we set it to");    				testRunner.ClickByName("Quality");  				testRunner.ClickByName("Fine Menu");    				testRunner.WaitFor(() => printer.Settings.GetValue<double>(SettingsKey.layer_height) == 0.1);  				Assert.AreEqual(printer.Settings.GetValue<double>(SettingsKey.layer_height).ToString()' "0.1"' "Layer height is the fine override");    				// Close Airwolf  				testRunner.CloseFirstPrinterTab();    				// Assert printer counts  				Assert.AreEqual(1' ProfileManager.Instance.ActiveProfiles.Count()' "ProfileManager should have 1 profile after Airwolf close");  				Assert.AreEqual(0' ApplicationController.Instance.ActivePrinters.Count()' "Zero printers should be active after Airwolf close");    				testRunner.AddAndSelectPrinter("BCN3D"' "Sigma");    				// Assert printer counts  				Assert.AreEqual(2' ProfileManager.Instance.ActiveProfiles.Count()' "ProfileManager has 2 profiles");  				Assert.AreEqual(1' ApplicationController.Instance.ActivePrinters.Count()' "One printer should be active after BCN add");    				// Close BCN  				testRunner.CloseFirstPrinterTab();    				// Reopen Airwolf  				testRunner.SwitchToHardwareTab();  				testRunner.DoubleClickByName("Airwolf 3D HD Node");  				testRunner.Delay(0.2);    				printer = testRunner.FirstPrinter();    				testRunner.WaitFor(() => printer.Settings.GetValue<double>(SettingsKey.layer_height) == 0.1);  				Assert.AreEqual(printer.Settings.GetValue<double>(SettingsKey.layer_height).ToString()' "0.1"' "Layer height is the fine override");    				// Switch to Slice Settings Tab  				testRunner.ClickByName("Slice Settings Tab");    				testRunner.ClickByName("Quality");  				testRunner.ClickByName("- none - Menu Item");    				testRunner.WaitFor(() => printer.Settings.GetValue<double>(SettingsKey.layer_height) == 0.5);  				Assert.AreEqual(printer.Settings.GetValue<double>(SettingsKey.layer_height).ToString()' "0.5"' "Layer height is what we set it to");    				return Task.CompletedTask;  			}' maxTimeToRun: 120);
Magic Number,MatterHackers.MatterControl.Tests.Automation,SliceSetingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\SliceSettingsTests.cs,QualitySettingsStayAsOverrides,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.WaitForFirstDraw();    				// Add Guest printers  				testRunner.AddAndSelectPrinter("Airwolf 3D"' "HD");  				testRunner.SwitchToSliceSettings();    				var printer = testRunner.FirstPrinter();    				testRunner.SelectSliceSettingsField(PrinterSettings.Layout.SliceSettings' "layer_height");  				testRunner.Type(".5");    				// Force lose focus  				testRunner.SelectSliceSettingsField(PrinterSettings.Layout.SliceSettings' "first_layer_height");    				testRunner.WaitFor(() => printer.Settings.GetValue<double>(SettingsKey.layer_height) == 0.5);  				Assert.AreEqual(printer.Settings.GetValue<double>(SettingsKey.layer_height).ToString()' "0.5"' "Layer height is what we set it to");    				testRunner.ClickByName("Quality");  				testRunner.ClickByName("Fine Menu");    				testRunner.WaitFor(() => printer.Settings.GetValue<double>(SettingsKey.layer_height) == 0.1);  				Assert.AreEqual(printer.Settings.GetValue<double>(SettingsKey.layer_height).ToString()' "0.1"' "Layer height is the fine override");    				// Close Airwolf  				testRunner.CloseFirstPrinterTab();    				// Assert printer counts  				Assert.AreEqual(1' ProfileManager.Instance.ActiveProfiles.Count()' "ProfileManager should have 1 profile after Airwolf close");  				Assert.AreEqual(0' ApplicationController.Instance.ActivePrinters.Count()' "Zero printers should be active after Airwolf close");    				testRunner.AddAndSelectPrinter("BCN3D"' "Sigma");    				// Assert printer counts  				Assert.AreEqual(2' ProfileManager.Instance.ActiveProfiles.Count()' "ProfileManager has 2 profiles");  				Assert.AreEqual(1' ApplicationController.Instance.ActivePrinters.Count()' "One printer should be active after BCN add");    				// Close BCN  				testRunner.CloseFirstPrinterTab();    				// Reopen Airwolf  				testRunner.SwitchToHardwareTab();  				testRunner.DoubleClickByName("Airwolf 3D HD Node");  				testRunner.Delay(0.2);    				printer = testRunner.FirstPrinter();    				testRunner.WaitFor(() => printer.Settings.GetValue<double>(SettingsKey.layer_height) == 0.1);  				Assert.AreEqual(printer.Settings.GetValue<double>(SettingsKey.layer_height).ToString()' "0.1"' "Layer height is the fine override");    				// Switch to Slice Settings Tab  				testRunner.ClickByName("Slice Settings Tab");    				testRunner.ClickByName("Quality");  				testRunner.ClickByName("- none - Menu Item");    				testRunner.WaitFor(() => printer.Settings.GetValue<double>(SettingsKey.layer_height) == 0.5);  				Assert.AreEqual(printer.Settings.GetValue<double>(SettingsKey.layer_height).ToString()' "0.5"' "Layer height is what we set it to");    				return Task.CompletedTask;  			}' maxTimeToRun: 120);
Magic Number,MatterHackers.MatterControl.Tests.Automation,SliceSetingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\SliceSettingsTests.cs,QualitySettingsStayAsOverrides,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.WaitForFirstDraw();    				// Add Guest printers  				testRunner.AddAndSelectPrinter("Airwolf 3D"' "HD");  				testRunner.SwitchToSliceSettings();    				var printer = testRunner.FirstPrinter();    				testRunner.SelectSliceSettingsField(PrinterSettings.Layout.SliceSettings' "layer_height");  				testRunner.Type(".5");    				// Force lose focus  				testRunner.SelectSliceSettingsField(PrinterSettings.Layout.SliceSettings' "first_layer_height");    				testRunner.WaitFor(() => printer.Settings.GetValue<double>(SettingsKey.layer_height) == 0.5);  				Assert.AreEqual(printer.Settings.GetValue<double>(SettingsKey.layer_height).ToString()' "0.5"' "Layer height is what we set it to");    				testRunner.ClickByName("Quality");  				testRunner.ClickByName("Fine Menu");    				testRunner.WaitFor(() => printer.Settings.GetValue<double>(SettingsKey.layer_height) == 0.1);  				Assert.AreEqual(printer.Settings.GetValue<double>(SettingsKey.layer_height).ToString()' "0.1"' "Layer height is the fine override");    				// Close Airwolf  				testRunner.CloseFirstPrinterTab();    				// Assert printer counts  				Assert.AreEqual(1' ProfileManager.Instance.ActiveProfiles.Count()' "ProfileManager should have 1 profile after Airwolf close");  				Assert.AreEqual(0' ApplicationController.Instance.ActivePrinters.Count()' "Zero printers should be active after Airwolf close");    				testRunner.AddAndSelectPrinter("BCN3D"' "Sigma");    				// Assert printer counts  				Assert.AreEqual(2' ProfileManager.Instance.ActiveProfiles.Count()' "ProfileManager has 2 profiles");  				Assert.AreEqual(1' ApplicationController.Instance.ActivePrinters.Count()' "One printer should be active after BCN add");    				// Close BCN  				testRunner.CloseFirstPrinterTab();    				// Reopen Airwolf  				testRunner.SwitchToHardwareTab();  				testRunner.DoubleClickByName("Airwolf 3D HD Node");  				testRunner.Delay(0.2);    				printer = testRunner.FirstPrinter();    				testRunner.WaitFor(() => printer.Settings.GetValue<double>(SettingsKey.layer_height) == 0.1);  				Assert.AreEqual(printer.Settings.GetValue<double>(SettingsKey.layer_height).ToString()' "0.1"' "Layer height is the fine override");    				// Switch to Slice Settings Tab  				testRunner.ClickByName("Slice Settings Tab");    				testRunner.ClickByName("Quality");  				testRunner.ClickByName("- none - Menu Item");    				testRunner.WaitFor(() => printer.Settings.GetValue<double>(SettingsKey.layer_height) == 0.5);  				Assert.AreEqual(printer.Settings.GetValue<double>(SettingsKey.layer_height).ToString()' "0.5"' "Layer height is what we set it to");    				return Task.CompletedTask;  			}' maxTimeToRun: 120);
Magic Number,MatterHackers.MatterControl.Tests.Automation,SliceSetingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\SliceSettingsTests.cs,QualitySettingsStayAsOverrides,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.WaitForFirstDraw();    				// Add Guest printers  				testRunner.AddAndSelectPrinter("Airwolf 3D"' "HD");  				testRunner.SwitchToSliceSettings();    				var printer = testRunner.FirstPrinter();    				testRunner.SelectSliceSettingsField(PrinterSettings.Layout.SliceSettings' "layer_height");  				testRunner.Type(".5");    				// Force lose focus  				testRunner.SelectSliceSettingsField(PrinterSettings.Layout.SliceSettings' "first_layer_height");    				testRunner.WaitFor(() => printer.Settings.GetValue<double>(SettingsKey.layer_height) == 0.5);  				Assert.AreEqual(printer.Settings.GetValue<double>(SettingsKey.layer_height).ToString()' "0.5"' "Layer height is what we set it to");    				testRunner.ClickByName("Quality");  				testRunner.ClickByName("Fine Menu");    				testRunner.WaitFor(() => printer.Settings.GetValue<double>(SettingsKey.layer_height) == 0.1);  				Assert.AreEqual(printer.Settings.GetValue<double>(SettingsKey.layer_height).ToString()' "0.1"' "Layer height is the fine override");    				// Close Airwolf  				testRunner.CloseFirstPrinterTab();    				// Assert printer counts  				Assert.AreEqual(1' ProfileManager.Instance.ActiveProfiles.Count()' "ProfileManager should have 1 profile after Airwolf close");  				Assert.AreEqual(0' ApplicationController.Instance.ActivePrinters.Count()' "Zero printers should be active after Airwolf close");    				testRunner.AddAndSelectPrinter("BCN3D"' "Sigma");    				// Assert printer counts  				Assert.AreEqual(2' ProfileManager.Instance.ActiveProfiles.Count()' "ProfileManager has 2 profiles");  				Assert.AreEqual(1' ApplicationController.Instance.ActivePrinters.Count()' "One printer should be active after BCN add");    				// Close BCN  				testRunner.CloseFirstPrinterTab();    				// Reopen Airwolf  				testRunner.SwitchToHardwareTab();  				testRunner.DoubleClickByName("Airwolf 3D HD Node");  				testRunner.Delay(0.2);    				printer = testRunner.FirstPrinter();    				testRunner.WaitFor(() => printer.Settings.GetValue<double>(SettingsKey.layer_height) == 0.1);  				Assert.AreEqual(printer.Settings.GetValue<double>(SettingsKey.layer_height).ToString()' "0.1"' "Layer height is the fine override");    				// Switch to Slice Settings Tab  				testRunner.ClickByName("Slice Settings Tab");    				testRunner.ClickByName("Quality");  				testRunner.ClickByName("- none - Menu Item");    				testRunner.WaitFor(() => printer.Settings.GetValue<double>(SettingsKey.layer_height) == 0.5);  				Assert.AreEqual(printer.Settings.GetValue<double>(SettingsKey.layer_height).ToString()' "0.5"' "Layer height is what we set it to");    				return Task.CompletedTask;  			}' maxTimeToRun: 120);
Magic Number,MatterHackers.MatterControl.Tests.Automation,SliceSetingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\SliceSettingsTests.cs,QualitySettingsStayAsOverrides,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.WaitForFirstDraw();    				// Add Guest printers  				testRunner.AddAndSelectPrinter("Airwolf 3D"' "HD");  				testRunner.SwitchToSliceSettings();    				var printer = testRunner.FirstPrinter();    				testRunner.SelectSliceSettingsField(PrinterSettings.Layout.SliceSettings' "layer_height");  				testRunner.Type(".5");    				// Force lose focus  				testRunner.SelectSliceSettingsField(PrinterSettings.Layout.SliceSettings' "first_layer_height");    				testRunner.WaitFor(() => printer.Settings.GetValue<double>(SettingsKey.layer_height) == 0.5);  				Assert.AreEqual(printer.Settings.GetValue<double>(SettingsKey.layer_height).ToString()' "0.5"' "Layer height is what we set it to");    				testRunner.ClickByName("Quality");  				testRunner.ClickByName("Fine Menu");    				testRunner.WaitFor(() => printer.Settings.GetValue<double>(SettingsKey.layer_height) == 0.1);  				Assert.AreEqual(printer.Settings.GetValue<double>(SettingsKey.layer_height).ToString()' "0.1"' "Layer height is the fine override");    				// Close Airwolf  				testRunner.CloseFirstPrinterTab();    				// Assert printer counts  				Assert.AreEqual(1' ProfileManager.Instance.ActiveProfiles.Count()' "ProfileManager should have 1 profile after Airwolf close");  				Assert.AreEqual(0' ApplicationController.Instance.ActivePrinters.Count()' "Zero printers should be active after Airwolf close");    				testRunner.AddAndSelectPrinter("BCN3D"' "Sigma");    				// Assert printer counts  				Assert.AreEqual(2' ProfileManager.Instance.ActiveProfiles.Count()' "ProfileManager has 2 profiles");  				Assert.AreEqual(1' ApplicationController.Instance.ActivePrinters.Count()' "One printer should be active after BCN add");    				// Close BCN  				testRunner.CloseFirstPrinterTab();    				// Reopen Airwolf  				testRunner.SwitchToHardwareTab();  				testRunner.DoubleClickByName("Airwolf 3D HD Node");  				testRunner.Delay(0.2);    				printer = testRunner.FirstPrinter();    				testRunner.WaitFor(() => printer.Settings.GetValue<double>(SettingsKey.layer_height) == 0.1);  				Assert.AreEqual(printer.Settings.GetValue<double>(SettingsKey.layer_height).ToString()' "0.1"' "Layer height is the fine override");    				// Switch to Slice Settings Tab  				testRunner.ClickByName("Slice Settings Tab");    				testRunner.ClickByName("Quality");  				testRunner.ClickByName("- none - Menu Item");    				testRunner.WaitFor(() => printer.Settings.GetValue<double>(SettingsKey.layer_height) == 0.5);  				Assert.AreEqual(printer.Settings.GetValue<double>(SettingsKey.layer_height).ToString()' "0.5"' "Layer height is what we set it to");    				return Task.CompletedTask;  			}' maxTimeToRun: 120);
Magic Number,MatterHackers.MatterControl.Tests.Automation,SliceSetingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\SliceSettingsTests.cs,CopyFromTest,The following statement contains a magic number: AggContext.StaticData = new FileSystemStaticData(TestContext.CurrentContext.ResolveProjectPath(4' "StaticData"));
Magic Number,MatterHackers.MatterControl.Tests.Automation,SliceSetingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\SliceSettingsTests.cs,CopyFromTest,The following statement contains a magic number: MatterControlUtilities.OverrideAppDataLocation(TestContext.CurrentContext.ResolveProjectPath(4));
Magic Number,MatterHackers.MatterControl.Tests.Automation,SqLiteLibraryProviderTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\SqLiteLibraryProvider.cs,LibraryQueueViewRefreshesOnAddItem,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.OpenEmptyPartTab();    				testRunner.AddItemToBedplate();    				var view3D = testRunner.GetWidgetByName("View3DWidget"' out _) as View3DWidget;  				var scene = view3D.InteractionLayer.Scene;    				testRunner.WaitFor(() => scene.SelectedItem != null);  				Assert.IsNotNull(scene.SelectedItem' "Expect part selection after Add to Bed action");    				testRunner.ClickByName("Duplicate Button");    				// wait for the copy to finish  				testRunner.Delay(.1);  				testRunner.ClickByName("Remove Button");    				testRunner.SaveBedplateToFolder("0Test Part"' "Local Library Row Item Collection");    				// Click Home -> Local Library  				testRunner.NavigateToLibraryHome();  				testRunner.NavigateToFolder("Local Library Row Item Collection");    				// ensure that it is now in the library folder (that the folder updated)  				Assert.IsTrue(testRunner.WaitForName("Row Item 0Test Part")' "The part we added should be in the library");    				testRunner.Delay(.5);    				return Task.CompletedTask;  			}' queueItemFolderToAdd: QueueTemplate.Three_Queue_Items' overrideWidth: 1300);
Magic Number,MatterHackers.MatterControl.Tests.Automation,SqLiteLibraryProviderTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\SqLiteLibraryProvider.cs,LibraryQueueViewRefreshesOnAddItem,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.OpenEmptyPartTab();    				testRunner.AddItemToBedplate();    				var view3D = testRunner.GetWidgetByName("View3DWidget"' out _) as View3DWidget;  				var scene = view3D.InteractionLayer.Scene;    				testRunner.WaitFor(() => scene.SelectedItem != null);  				Assert.IsNotNull(scene.SelectedItem' "Expect part selection after Add to Bed action");    				testRunner.ClickByName("Duplicate Button");    				// wait for the copy to finish  				testRunner.Delay(.1);  				testRunner.ClickByName("Remove Button");    				testRunner.SaveBedplateToFolder("0Test Part"' "Local Library Row Item Collection");    				// Click Home -> Local Library  				testRunner.NavigateToLibraryHome();  				testRunner.NavigateToFolder("Local Library Row Item Collection");    				// ensure that it is now in the library folder (that the folder updated)  				Assert.IsTrue(testRunner.WaitForName("Row Item 0Test Part")' "The part we added should be in the library");    				testRunner.Delay(.5);    				return Task.CompletedTask;  			}' queueItemFolderToAdd: QueueTemplate.Three_Queue_Items' overrideWidth: 1300);
Magic Number,MatterHackers.MatterControl.Tests.Automation,SqLiteLibraryProviderTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\SqLiteLibraryProvider.cs,LibraryQueueViewRefreshesOnAddItem,The following statement contains a magic number: await MatterControlUtilities.RunTest((testRunner) =>  			{  				testRunner.OpenEmptyPartTab();    				testRunner.AddItemToBedplate();    				var view3D = testRunner.GetWidgetByName("View3DWidget"' out _) as View3DWidget;  				var scene = view3D.InteractionLayer.Scene;    				testRunner.WaitFor(() => scene.SelectedItem != null);  				Assert.IsNotNull(scene.SelectedItem' "Expect part selection after Add to Bed action");    				testRunner.ClickByName("Duplicate Button");    				// wait for the copy to finish  				testRunner.Delay(.1);  				testRunner.ClickByName("Remove Button");    				testRunner.SaveBedplateToFolder("0Test Part"' "Local Library Row Item Collection");    				// Click Home -> Local Library  				testRunner.NavigateToLibraryHome();  				testRunner.NavigateToFolder("Local Library Row Item Collection");    				// ensure that it is now in the library folder (that the folder updated)  				Assert.IsTrue(testRunner.WaitForName("Row Item 0Test Part")' "The part we added should be in the library");    				testRunner.Delay(.5);    				return Task.CompletedTask;  			}' queueItemFolderToAdd: QueueTemplate.Three_Queue_Items' overrideWidth: 1300);
Magic Number,MatterControl.Tests.MatterControl,LibraryContainerTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\LibraryContainerTests.cs,TestExistsForEachContainerType,The following statement contains a magic number: AggContext.StaticData = new FileSystemStaticData(TestContext.CurrentContext.ResolveProjectPath(4' "StaticData"));
Magic Number,MatterControl.Tests.MatterControl,LibraryContainerTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\LibraryContainerTests.cs,TestExistsForEachContainerType,The following statement contains a magic number: MatterControlUtilities.OverrideAppDataLocation(TestContext.CurrentContext.ResolveProjectPath(4));
Magic Number,MatterControl.Tests.MatterControl,LibraryContainerTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\LibraryContainerTests.cs,NoContentChangedOnLoad,The following statement contains a magic number: AggContext.StaticData = new FileSystemStaticData(TestContext.CurrentContext.ResolveProjectPath(4' "StaticData"));
Magic Number,MatterControl.Tests.MatterControl,LibraryContainerTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\LibraryContainerTests.cs,NoContentChangedOnLoad,The following statement contains a magic number: MatterControlUtilities.OverrideAppDataLocation(TestContext.CurrentContext.ResolveProjectPath(4));
Magic Number,MatterControl.Tests.MatterControl,LibraryContainerTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\LibraryContainerTests.cs,NoContentChangedOnLoad,The following statement contains a magic number: var uiPump = Task.Run(() =>  			{  				while (onIdlePumpActive)  				{  					UiThread.InvokePendingActions();  					Thread.Sleep(10);  				};    				Console.Write("Exiting");  			});
Magic Number,MatterControl.Tests.MatterControl,LibraryContainerTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\LibraryContainerTests.cs,NoContentChangedOnLoad,The following statement contains a magic number: args.Add(TestContext.CurrentContext.ResolveProjectPath(4));
Magic Number,MatterControl.Tests.MatterControl,LibraryContainerTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\LibraryContainerTests.cs,NoContentChangedOnLoad,The following statement contains a magic number: zipContainer.Path = TestContext.CurrentContext.ResolveProjectPath(4' "Tests"' "TestData"' "TestParts"' "Batman.zip");
Magic Number,MatterControl.Tests.MatterControl,LibraryContainerTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\LibraryContainerTests.cs,NoContentChangedOnLoad,The following statement contains a magic number: await Task.Delay(300);
Magic Number,MatterControl.Tests.MatterControl,LibraryContainerTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\LibraryContainerTests.cs,AddFiresContentChangedEvent,The following statement contains a magic number: AggContext.StaticData = new FileSystemStaticData(TestContext.CurrentContext.ResolveProjectPath(4' "StaticData"));
Magic Number,MatterControl.Tests.MatterControl,LibraryContainerTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\LibraryContainerTests.cs,AddFiresContentChangedEvent,The following statement contains a magic number: MatterControlUtilities.OverrideAppDataLocation(TestContext.CurrentContext.ResolveProjectPath(4));
Magic Number,MatterControl.Tests.MatterControl,LibraryContainerTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\LibraryContainerTests.cs,AddFiresContentChangedEvent,The following statement contains a magic number: string filePath = TestContext.CurrentContext.ResolveProjectPath(4' "Tests"' "TestData"' "TestParts"' "Batman.stl");
Magic Number,MatterControl.Tests.MatterControl,LibraryContainerTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\LibraryContainerTests.cs,AddFiresContentChangedEvent,The following statement contains a magic number: var uiPump = Task.Run(() =>  			{  				while (onIdlePumpActive)  				{  					UiThread.InvokePendingActions();  					Thread.Sleep(10);  				};    				Console.Write("Exiting");  			});
Magic Number,MatterControl.Tests.MatterControl,LibraryContainerTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\LibraryContainerTests.cs,AddFiresContentChangedEvent,The following statement contains a magic number: zipContainer.Path = TestContext.CurrentContext.ResolveProjectPath(4' "Tests"' "TestData"' "TestParts"' "Batman.zip");
Magic Number,MatterControl.Tests.MatterControl,LibraryContainerTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\LibraryContainerTests.cs,AddFiresContentChangedEvent,The following statement contains a magic number: var waitUntil = DateTime.Now.AddSeconds(15);
Magic Number,MatterControl.Tests.MatterControl,LibraryContainerTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\LibraryContainerTests.cs,AddFiresContentChangedEvent,The following statement contains a magic number: await Task.Delay(200);
Magic Number,MatterControl.Tests.MatterControl,LibraryContainerTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.AutomationTests\LibraryContainerTests.cs,AddFiresContentChangedEvent,The following statement contains a magic number: await Task.Delay(300);
Missing Default,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,NavigateToFolder,The following switch statement is missing a default case: switch (libraryRowItemName)  			{  				case "SD Card Row Item Collection":  					if (ApplicationController.Instance.DragDropData.View3DWidget?.Printer is PrinterConfig printer)  					{  						testRunner.DoubleClickByName($"{printer.Settings.GetValue(SettingsKey.printer_name)} Row Item Collection");    						testRunner.Delay();    						testRunner.ClickByName(libraryRowItemName);  					}    					break;    				case "Calibration Parts Row Item Collection":  				case "Cloud Library Row Item Collection":  				case "Print Queue Row Item Collection":  				case "Local Library Row Item Collection":  					if (!testRunner.NameExists("Library Row Item Collection"))  					{  						testRunner.ClickByName("Bread Crumb Button Home");  						testRunner.Delay();  					}    					// If visible' navigate into Libraries container before opening target  					if (testRunner.NameExists("Library Row Item Collection"))  					{  						testRunner.DoubleClickByName("Library Row Item Collection");  						testRunner.Delay();  					}    					break;  			}
